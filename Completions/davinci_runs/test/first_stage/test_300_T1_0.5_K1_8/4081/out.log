2022-04-19 21:43:54.513692 """
The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).

You are given a sequence $a$ consisting of $n$ integers. All these integers are distinct, each value from $1$ to $n$ appears in the sequence exactly once.

You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).

For example, for the sequence $[2, 1, 5, 4, 3]$ the answer is $4$ (you take $2$ and the sequence becomes $[1, 5, 4, 3]$, then you take the rightmost element $3$ and the sequence becomes $[1, 5, 4]$, then you take $4$ and the sequence becomes $[1, 5]$ and then you take $5$ and the sequence becomes $[1]$, the obtained increasing sequence is $[2, 3, 4, 5]$).


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le n$), where $a_i$ is the $i$-th element of $a$. All these integers are pairwise distinct.


-----Output-----

In the first line of the output print $k$ — the maximum number of elements in a strictly increasing sequence you can obtain.

In the second line print a string $s$ of length $k$, where the $j$-th character of this string $s_j$ should be 'L' if you take the leftmost element during the $j$-th move and 'R' otherwise. If there are multiple answers, you can print any.


-----Examples-----
Input
5
2 1 5 4 3

Output
4
LRRR

Input
7
1 3 5 6 7 4 2

Output
7
LRLRLLL

Input
3
1 2 3

Output
3
LLL

Input
4
1 2 4 3

Output
4
LLRL



-----Note-----

The first example is described in the problem statement.
"""
2022-04-19 21:43:54.513713 --------------------------
2022-04-19 21:43:54.513814 using api key gabby
2022-04-19 21:45:20.205615 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# for i in range(1, n+1):\n#     try:\n#         a.index(i)\n#     except ValueError:\n#         a.append(i)\n#\n# print(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(a)\n\n# def get_max(a):\n#     return max(a)\n#\n# def get_min(a):\n#     return min(a)\n#\n# def get_max_index(a):\n#     return a.index(get_max(a))\n#\n# def get_min_index(a):\n#     return a.index(get_min(a))\n#\n# def get_max_index_not_in_list(a, l):\n#     for i in range(len(a)):\n#         try:\n#             l.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_min_index_not_in_list(a, l):\n#     for i in range(len(a)-1, -1, -1):\n#         try:\n#             l.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_max_from_list(a, l):\n#     return max([a[i] for i in l])\n#\n# def get_min_from_list(a, l):\n#     return min([a[i] for i in l])\n#\n# def get_max_index_from_list(a, l):\n#     return l[a.index(get_max_from_list(a, l))]\n#\n# def get_min_index_from_list(a, l):\n#     return l[a.index(get_min_from_list(a, l))]\n#\n# def get_max_index_not_in_list_from_list(a, l, m):\n#     for i in m:\n#         try:\n#             l.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_min_index_not_in_list_from_list(a, l, m):\n#     for i in m[::-1]:\n#         try:\n#             l.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_max_index_not_in_list_from_list_from_list(a, l, m, n):\n#     for i in n:\n#         try:\n#             m.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_min_index_not_in_list_from_list_from_list(a, l, m, n):\n#     for i in n[::-1]:\n#         try:\n#             m.index(a[i])\n#         except ValueError:\n#             return i\n#\n# print(a)\n#\n# print(get_max(a))\n# print(get_min(a))\n# print(get_max_index(a))\n# print(get_min_index(a))\n# print(get_max_index_not_in_list(a, []))\n# print(get_min_index_not_in_list(a, []))\n# print(get_max_from_list(a, []))\n# print(get_min_from_list(a, []))\n# print(get_max_index_from_list(a, []))\n# print(get_min_index_from_list(a, []))\n# print(get_max_index_not_in_list_from_list(a, [], []))\n# print(get_min_index_not_in_list_from_list(a, [], []))\n# print(get_max_index_not_in_list_from_list_from_list(a, [], [], []))\n# print(get_min_index_not_in_list_from_list_from_list(a, [], [], []))\n#\n# max_index = get_max_index(a)\n# min_index = get_min_index(a)\n#\n# if max_index <= min_index:\n#     max_index_not_in_list = get_max_index_not_in_list(a, [min_index])\n#     min_index_not_in_list = get_min_index_not_in_list(a, [max_index])\n# else:\n#     max_index_not_in_list = get_max_index_not_in_list(a, [min_index, max_index])\n#     min_index_not_in_list = get_min_index_not_in_list(a, [max_index, min_index])\n#\n# print(max_index)\n# print(min_index)\n# print(max_index_not_in_list)\n# print(min_index_not_in_list)\n#\n# if a[max_index] > a[max_index_not_in_list]:\n#     if a[min_index] < a[min_index_not_in_list]:\n#         max_index_not_in_list_from_list = get_max_index_not_in_list_from_list(a, [max_index, min_index], [min_index_not_in_list])\n#         min_index_not_in_list_from_list = get_min_index_not_in_list_from_list(a, [max_index, min_index], [max_index_not_in_list])\n#     else:\n#         max_index_not_in_list_from_list = get_max_index_not_in_list_from_list(a, [max_index, min_index], [min_index])\n#         min_index_not_in_list_from_list = get_min_index_not_in_list_from_list(a, [max_index, min_index], [max_index_not_in_list])\n# else:\n#     if a[min_index] < a[min_index_not_in_list]:\n#         max_index_not_in_list_from_list = get_max_index_not_in_list_from_list(a, [max_index, min_index], [max_index])\n#         min_index_not_in_list_from_list = get_min_index_not_in_list_from_list(a, [max_index, min_index], [min_index_not_in_list])\n#     else:\n#         max_index_not_in_list_from_list = get_max_index_not_in_list_from_list(a, [max_index, min_index], [max_index])\n#         min_index_not_in_list_from_list = get_min_index_not_in_list_from_list(a, [max_index, min_index], [min_index])\n#\n# print(max_index_not_in_list_from_list)\n# print(min_index_not_in_list_from_list)\n#\n# if a[max_index_not_in_list] > a[max_index_not_in_list_from_list]:\n#     if a[min_index_not_in_list] < a[min_index_not_in_list_from_list]:\n#         max_index_not_in_list_from_list_from_list = get_max_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [min_index_not_in_list_from_list])\n#         min_index_not_in_list_from_list_from_list = get_min_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list_from_list])\n#     else:\n#         max_index_not_in_list_from_list_from_list = get_max_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [min_index_not_in_list])\n#         min_index_not_in_list_from_list_from_list = get_min_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list_from_list])\n# else:\n#     if a[min_index_not_in_list] < a[min_index_not_in_list_from_list]:\n#         max_index_not_in_list_from_list_from_list = get_max_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list])\n#         min_index_not_in_list_from_list_from_list = get_min_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [min_index_not_in_list_from_list])\n#     else:\n#         max_index_not_in_list_from_list_from_list = get_max_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list])\n#         min_index_not_in_list_from_list_from_list = get_min_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [min_index_not_in_list])\n#\n# print(max_index_not_in_list_from_list_from_list)\n# print(min_index_not_in_list_from_list_from_list)\n#\n# if a[max_index_not_in_list_from_list] > a[max_index_not_in_list_from_list_from_list]:\n#     if a[min_index_not_in_list_from_list] < a[min_index_not_in_list_from_list_from_list]:\n#         max_index_not_in_list_from_list_from_"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, a):\n    l = [1] * n\n    r = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            l[i] = l[i - 1] + 1\n        else:\n            l[i] = 1\n    for i in reversed(range(n - 1)):\n        if a[i] < a[i + 1]:\n            r[i] = r[i + 1] + 1\n        else:\n            r[i] = 1\n    r[n - 1] = 1\n    ans = max(l + r)\n    # print(l, r)\n    return ans\n\n\ndef print_ans(ans):\n    print(len(ans))\n    print(''.join(ans))\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(n, a)\n    print_ans(ans)\n\n\ndef test():\n    assert solve(5, [2, 1, 5, 4, 3]) == 'LRRR'\n    assert solve(7, [1, 3, 5, 6, 7, 4, 2]) == 'LRLRLLL'\n    assert solve(3, [1, 2, 3]) == 'LLL'\n    assert solve(4, [1, 2, 4, 3]) == 'LLRL'\n\n\nif __name__ == \"__main__\":\n    test()\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nstack = []\n\nans = []\n\nfor i in range(n):\n    if len(stack) == 0:\n        stack.append(a[i])\n        ans.append('L')\n    elif stack[-1] < a[i]:\n        stack.append(a[i])\n        ans.append('L')\n    else:\n        while len(stack) > 0 and stack[-1] > a[i]:\n            stack.pop()\n        if len(stack) == 0:\n            stack.append(a[i])\n            ans.append('L')\n        elif stack[-1] < a[i]:\n            stack.append(a[i])\n            ans.append('L')\n        else:\n            stack.pop()\n            ans.append('R')\n\nprint(len(stack))\nprint(''.join(ans))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, a):\n    # find the longest increasing subsequence\n    lis = [1 for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    # find the longest decreasing subsequence\n    lds = [1 for _ in range(n)]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    # find the maximum\n    max_len = -1\n    for i in range(n):\n        max_len = max(max_len, lis[i] + lds[i] - 1)\n    # find the answer\n    ans = \"\"\n    for i in range(n):\n        if lis[i] + lds[i] - 1 == max_len:\n            ans += \"L\" * lis[i]\n            ans += \"R\" * (lds[i] - 1)\n            break\n    return max_len, ans\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(n, a)\n    print(ans[0])\n    print(ans[1])"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\n    # create a list of tuples (value, index)\n    a_indexed = [(a[i], i) for i in range(n)]\n\n    # sort it by value\n    a_indexed.sort()\n\n    # create a list of tuples (value, index, is_left)\n    # is_left is True if the element is on the left, False otherwise\n    a_indexed_left = [(a_indexed[i][0], a_indexed[i][1], True) for i in range(n)]\n    a_indexed_right = [(a_indexed[i][0], a_indexed[i][1], False) for i in range(n)]\n\n    # sort it by the index\n    a_indexed_left.sort(key=lambda x: x[1])\n    a_indexed_right.sort(key=lambda x: x[1])\n\n    # create a list of tuples (value, index, is_left, is_included)\n    # is_included is True if the element is included in the result, False otherwise\n    a_indexed_left_included = [(a_indexed_left[i][0], a_indexed_left[i][1], a_indexed_left[i][2], False) for i in range(n)]\n    a_indexed_right_included = [(a_indexed_right[i][0], a_indexed_right[i][1], a_indexed_right[i][2], False) for i in range(n)]\n\n    # include the first element (the leftmost one) in the result\n    a_indexed_left_included[0] = (a_indexed_left_included[0][0], a_indexed_left_included[0][1], a_indexed_left_included[0][2], True)\n    a_indexed_right_included[0] = (a_indexed_right_included[0][0], a_indexed_right_included[0][1], a_indexed_right_included[0][2], True)\n\n    # iterate over all elements except the first one\n    for i in range(1, n):\n        # if the current element is on the left\n        if a_indexed_left_included[i][2] == True:\n            # if the previous element is included in the result\n            if a_indexed_left_included[i - 1][3] == True:\n                # if the current element is greater than the previous one, include it in the result\n                if a_indexed_left_included[i][0] > a_indexed_left_included[i - 1][0]:\n                    a_indexed_left_included[i] = (a_indexed_left_included[i][0], a_indexed_left_included[i][1], a_indexed_left_included[i][2], True)\n        # if the current element is on the right\n        else:\n            # if the previous element is included in the result\n            if a_indexed_right_included[i - 1][3] == True:\n                # if the current element is greater than the previous one, include it in the result\n                if a_indexed_right_included[i][0] > a_indexed_right_included[i - 1][0]:\n                    a_indexed_right_included[i] = (a_indexed_right_included[i][0], a_indexed_right_included[i][1], a_indexed_right_included[i][2], True)\n\n    # count the number of elements included in the result\n    result_left = sum(i[3] for i in a_indexed_left_included)\n    result_right = sum(i[3] for i in a_indexed_right_included)\n\n    # if the result obtained by taking the leftmost element is greater than or equal to the result obtained by taking the rightmost element,\n    # print the result obtained by taking the leftmost element\n    if result_left >= result_right:\n        print(result_left)\n        for i in a_indexed_left_included:\n            if i[3] == True:\n                print('L', end='')\n    # if the result obtained by taking the leftmost element is less than the result obtained by taking the rightmost element,\n    # print the result obtained by taking the rightmost element\n    else:\n        print(result_right)\n        for i in a_indexed_right_included:\n            if i[3] == True:\n                print('R', end='')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [None]*n\nr = [None]*n\n\nl[0] = 0\nfor i in range(1, n):\n    l[i] = l[i-1]\n    if a[i] > a[i-1]:\n        l[i] += 1\n\nr[-1] = 0\nfor i in range(n-2, -1, -1):\n    r[i] = r[i+1]\n    if a[i] < a[i+1]:\n        r[i] += 1\n\nans = 0\npos = 0\nfor i in range(n):\n    if l[i] + r[i] + 1 > ans:\n        ans = l[i] + r[i] + 1\n        pos = i\n\nprint(ans)\nprint('L'*(l[pos]+1) + 'R'*r[pos])"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef solve(n, a):\n    res = [0]*n\n    stack = []\n    for i in range(n):\n        while len(stack) > 0 and stack[-1][0] < a[i]:\n            res[stack[-1][1]] = i+1\n            stack.pop()\n        stack.append((a[i], i))\n    while len(stack) > 0:\n        res[stack[-1][1]] = stack[-1][1]+1\n        stack.pop()\n    cur = 0\n    ans = [0]*n\n    for i in range(n):\n        if res[i] > cur:\n            ans[i] = 'L'\n            cur = res[i]\n        else:\n            ans[i] = 'R'\n    return ''.join(ans)\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(n, a))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650404634,
  "id": "cmpl-4ypvWMfOY3EvnWRtSdVsTYlI3SW8e",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:45:20.206118 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# for i in range(1, n+1):\n#     try:\n#         a.index(i)\n#     except ValueError:\n#         a.append(i)\n#\n# print(a)\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(a)\n\n# def get_max(a):\n#     return max(a)\n#\n# def get_min(a):\n#     return min(a)\n#\n# def get_max_index(a):\n#     return a.index(get_max(a))\n#\n# def get_min_index(a):\n#     return a.index(get_min(a))\n#\n# def get_max_index_not_in_list(a, l):\n#     for i in range(len(a)):\n#         try:\n#             l.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_min_index_not_in_list(a, l):\n#     for i in range(len(a)-1, -1, -1):\n#         try:\n#             l.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_max_from_list(a, l):\n#     return max([a[i] for i in l])\n#\n# def get_min_from_list(a, l):\n#     return min([a[i] for i in l])\n#\n# def get_max_index_from_list(a, l):\n#     return l[a.index(get_max_from_list(a, l))]\n#\n# def get_min_index_from_list(a, l):\n#     return l[a.index(get_min_from_list(a, l))]\n#\n# def get_max_index_not_in_list_from_list(a, l, m):\n#     for i in m:\n#         try:\n#             l.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_min_index_not_in_list_from_list(a, l, m):\n#     for i in m[::-1]:\n#         try:\n#             l.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_max_index_not_in_list_from_list_from_list(a, l, m, n):\n#     for i in n:\n#         try:\n#             m.index(a[i])\n#         except ValueError:\n#             return i\n#\n# def get_min_index_not_in_list_from_list_from_list(a, l, m, n):\n#     for i in n[::-1]:\n#         try:\n#             m.index(a[i])\n#         except ValueError:\n#             return i\n#\n# print(a)\n#\n# print(get_max(a))\n# print(get_min(a))\n# print(get_max_index(a))\n# print(get_min_index(a))\n# print(get_max_index_not_in_list(a, []))\n# print(get_min_index_not_in_list(a, []))\n# print(get_max_from_list(a, []))\n# print(get_min_from_list(a, []))\n# print(get_max_index_from_list(a, []))\n# print(get_min_index_from_list(a, []))\n# print(get_max_index_not_in_list_from_list(a, [], []))\n# print(get_min_index_not_in_list_from_list(a, [], []))\n# print(get_max_index_not_in_list_from_list_from_list(a, [], [], []))\n# print(get_min_index_not_in_list_from_list_from_list(a, [], [], []))\n#\n# max_index = get_max_index(a)\n# min_index = get_min_index(a)\n#\n# if max_index <= min_index:\n#     max_index_not_in_list = get_max_index_not_in_list(a, [min_index])\n#     min_index_not_in_list = get_min_index_not_in_list(a, [max_index])\n# else:\n#     max_index_not_in_list = get_max_index_not_in_list(a, [min_index, max_index])\n#     min_index_not_in_list = get_min_index_not_in_list(a, [max_index, min_index])\n#\n# print(max_index)\n# print(min_index)\n# print(max_index_not_in_list)\n# print(min_index_not_in_list)\n#\n# if a[max_index] > a[max_index_not_in_list]:\n#     if a[min_index] < a[min_index_not_in_list]:\n#         max_index_not_in_list_from_list = get_max_index_not_in_list_from_list(a, [max_index, min_index], [min_index_not_in_list])\n#         min_index_not_in_list_from_list = get_min_index_not_in_list_from_list(a, [max_index, min_index], [max_index_not_in_list])\n#     else:\n#         max_index_not_in_list_from_list = get_max_index_not_in_list_from_list(a, [max_index, min_index], [min_index])\n#         min_index_not_in_list_from_list = get_min_index_not_in_list_from_list(a, [max_index, min_index], [max_index_not_in_list])\n# else:\n#     if a[min_index] < a[min_index_not_in_list]:\n#         max_index_not_in_list_from_list = get_max_index_not_in_list_from_list(a, [max_index, min_index], [max_index])\n#         min_index_not_in_list_from_list = get_min_index_not_in_list_from_list(a, [max_index, min_index], [min_index_not_in_list])\n#     else:\n#         max_index_not_in_list_from_list = get_max_index_not_in_list_from_list(a, [max_index, min_index], [max_index])\n#         min_index_not_in_list_from_list = get_min_index_not_in_list_from_list(a, [max_index, min_index], [min_index])\n#\n# print(max_index_not_in_list_from_list)\n# print(min_index_not_in_list_from_list)\n#\n# if a[max_index_not_in_list] > a[max_index_not_in_list_from_list]:\n#     if a[min_index_not_in_list] < a[min_index_not_in_list_from_list]:\n#         max_index_not_in_list_from_list_from_list = get_max_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [min_index_not_in_list_from_list])\n#         min_index_not_in_list_from_list_from_list = get_min_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list_from_list])\n#     else:\n#         max_index_not_in_list_from_list_from_list = get_max_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [min_index_not_in_list])\n#         min_index_not_in_list_from_list_from_list = get_min_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list_from_list])\n# else:\n#     if a[min_index_not_in_list] < a[min_index_not_in_list_from_list]:\n#         max_index_not_in_list_from_list_from_list = get_max_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list])\n#         min_index_not_in_list_from_list_from_list = get_min_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [min_index_not_in_list_from_list])\n#     else:\n#         max_index_not_in_list_from_list_from_list = get_max_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list])\n#         min_index_not_in_list_from_list_from_list = get_min_index_not_in_list_from_list_from_list(a, [max_index, min_index, max_index_not_in_list, min_index_not_in_list], [max_index_not_in_list, min_index_not_in_list], [min_index_not_in_list])\n#\n# print(max_index_not_in_list_from_list_from_list)\n# print(min_index_not_in_list_from_list_from_list)\n#\n# if a[max_index_not_in_list_from_list] > a[max_index_not_in_list_from_list_from_list]:\n#     if a[min_index_not_in_list_from_list] < a[min_index_not_in_list_from_list_from_list]:\n#         max_index_not_in_list_from_list_from_"
}
2022-04-19 21:45:20.206222 REASON length
2022-04-19 21:45:20.206231 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, a):\n    l = [1] * n\n    r = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            l[i] = l[i - 1] + 1\n        else:\n            l[i] = 1\n    for i in reversed(range(n - 1)):\n        if a[i] < a[i + 1]:\n            r[i] = r[i + 1] + 1\n        else:\n            r[i] = 1\n    r[n - 1] = 1\n    ans = max(l + r)\n    # print(l, r)\n    return ans\n\n\ndef print_ans(ans):\n    print(len(ans))\n    print(''.join(ans))\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(n, a)\n    print_ans(ans)\n\n\ndef test():\n    assert solve(5, [2, 1, 5, 4, 3]) == 'LRRR'\n    assert solve(7, [1, 3, 5, 6, 7, 4, 2]) == 'LRLRLLL'\n    assert solve(3, [1, 2, 3]) == 'LLL'\n    assert solve(4, [1, 2, 4, 3]) == 'LLRL'\n\n\nif __name__ == \"__main__\":\n    test()\n    main()"
}
2022-04-19 21:45:20.206262 REASON stop
2022-04-19 21:45:20.218631 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nstack = []\n\nans = []\n\nfor i in range(n):\n    if len(stack) == 0:\n        stack.append(a[i])\n        ans.append('L')\n    elif stack[-1] < a[i]:\n        stack.append(a[i])\n        ans.append('L')\n    else:\n        while len(stack) > 0 and stack[-1] > a[i]:\n            stack.pop()\n        if len(stack) == 0:\n            stack.append(a[i])\n            ans.append('L')\n        elif stack[-1] < a[i]:\n            stack.append(a[i])\n            ans.append('L')\n        else:\n            stack.pop()\n            ans.append('R')\n\nprint(len(stack))\nprint(''.join(ans))"
}
2022-04-19 21:45:20.218799 REASON stop
2022-04-19 21:45:20.219274 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, a):\n    # find the longest increasing subsequence\n    lis = [1 for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    # find the longest decreasing subsequence\n    lds = [1 for _ in range(n)]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    # find the maximum\n    max_len = -1\n    for i in range(n):\n        max_len = max(max_len, lis[i] + lds[i] - 1)\n    # find the answer\n    ans = \"\"\n    for i in range(n):\n        if lis[i] + lds[i] - 1 == max_len:\n            ans += \"L\" * lis[i]\n            ans += \"R\" * (lds[i] - 1)\n            break\n    return max_len, ans\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(n, a)\n    print(ans[0])\n    print(ans[1])"
}
2022-04-19 21:45:20.219356 REASON stop
2022-04-19 21:45:20.239082 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\n    # create a list of tuples (value, index)\n    a_indexed = [(a[i], i) for i in range(n)]\n\n    # sort it by value\n    a_indexed.sort()\n\n    # create a list of tuples (value, index, is_left)\n    # is_left is True if the element is on the left, False otherwise\n    a_indexed_left = [(a_indexed[i][0], a_indexed[i][1], True) for i in range(n)]\n    a_indexed_right = [(a_indexed[i][0], a_indexed[i][1], False) for i in range(n)]\n\n    # sort it by the index\n    a_indexed_left.sort(key=lambda x: x[1])\n    a_indexed_right.sort(key=lambda x: x[1])\n\n    # create a list of tuples (value, index, is_left, is_included)\n    # is_included is True if the element is included in the result, False otherwise\n    a_indexed_left_included = [(a_indexed_left[i][0], a_indexed_left[i][1], a_indexed_left[i][2], False) for i in range(n)]\n    a_indexed_right_included = [(a_indexed_right[i][0], a_indexed_right[i][1], a_indexed_right[i][2], False) for i in range(n)]\n\n    # include the first element (the leftmost one) in the result\n    a_indexed_left_included[0] = (a_indexed_left_included[0][0], a_indexed_left_included[0][1], a_indexed_left_included[0][2], True)\n    a_indexed_right_included[0] = (a_indexed_right_included[0][0], a_indexed_right_included[0][1], a_indexed_right_included[0][2], True)\n\n    # iterate over all elements except the first one\n    for i in range(1, n):\n        # if the current element is on the left\n        if a_indexed_left_included[i][2] == True:\n            # if the previous element is included in the result\n            if a_indexed_left_included[i - 1][3] == True:\n                # if the current element is greater than the previous one, include it in the result\n                if a_indexed_left_included[i][0] > a_indexed_left_included[i - 1][0]:\n                    a_indexed_left_included[i] = (a_indexed_left_included[i][0], a_indexed_left_included[i][1], a_indexed_left_included[i][2], True)\n        # if the current element is on the right\n        else:\n            # if the previous element is included in the result\n            if a_indexed_right_included[i - 1][3] == True:\n                # if the current element is greater than the previous one, include it in the result\n                if a_indexed_right_included[i][0] > a_indexed_right_included[i - 1][0]:\n                    a_indexed_right_included[i] = (a_indexed_right_included[i][0], a_indexed_right_included[i][1], a_indexed_right_included[i][2], True)\n\n    # count the number of elements included in the result\n    result_left = sum(i[3] for i in a_indexed_left_included)\n    result_right = sum(i[3] for i in a_indexed_right_included)\n\n    # if the result obtained by taking the leftmost element is greater than or equal to the result obtained by taking the rightmost element,\n    # print the result obtained by taking the leftmost element\n    if result_left >= result_right:\n        print(result_left)\n        for i in a_indexed_left_included:\n            if i[3] == True:\n                print('L', end='')\n    # if the result obtained by taking the leftmost element is less than the result obtained by taking the rightmost element,\n    # print the result obtained by taking the rightmost element\n    else:\n        print(result_right)\n        for i in a_indexed_right_included:\n            if i[3] == True:\n                print('R', end='')\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:45:20.239235 REASON stop
2022-04-19 21:45:20.258209 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [None]*n\nr = [None]*n\n\nl[0] = 0\nfor i in range(1, n):\n    l[i] = l[i-1]\n    if a[i] > a[i-1]:\n        l[i] += 1\n\nr[-1] = 0\nfor i in range(n-2, -1, -1):\n    r[i] = r[i+1]\n    if a[i] < a[i+1]:\n        r[i] += 1\n\nans = 0\npos = 0\nfor i in range(n):\n    if l[i] + r[i] + 1 > ans:\n        ans = l[i] + r[i] + 1\n        pos = i\n\nprint(ans)\nprint('L'*(l[pos]+1) + 'R'*r[pos])"
}
2022-04-19 21:45:20.258355 REASON stop
2022-04-19 21:45:20.261535 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 21:45:20.261640 REASON stop
2022-04-19 21:45:20.265966 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef solve(n, a):\n    res = [0]*n\n    stack = []\n    for i in range(n):\n        while len(stack) > 0 and stack[-1][0] < a[i]:\n            res[stack[-1][1]] = i+1\n            stack.pop()\n        stack.append((a[i], i))\n    while len(stack) > 0:\n        res[stack[-1][1]] = stack[-1][1]+1\n        stack.pop()\n    cur = 0\n    ans = [0]*n\n    for i in range(n):\n        if res[i] > cur:\n            ans[i] = 'L'\n            cur = res[i]\n        else:\n            ans[i] = 'R'\n    return ''.join(ans)\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(n, a))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:45:20.266173 REASON stop
