["", "\n\ndef main():\n    n = int(input())\n    l = input()\n    r = input()\n\n    l_dic = {}\n    r_dic = {}\n    for i in range(n):\n        if l[i] == '?':\n            if '?' in l_dic:\n                l_dic['?'].append(i+1)\n            else:\n                l_dic['?'] = [i+1]\n        else:\n            if l[i] in l_dic:\n                l_dic[l[i]].append(i+1)\n            else:\n                l_dic[l[i]] = [i+1]\n        if r[i] == '?':\n            if '?' in r_dic:\n                r_dic['?'].append(i+1)\n            else:\n                r_dic['?'] = [i+1]\n        else:\n            if r[i] in r_dic:\n                r_dic[r[i]].append(i+1)\n            else:\n                r_dic[r[i]] = [i+1]\n\n    res = []\n    for i in range(n):\n        if l[i] == '?' and r[i] == '?':\n            if '?' in l_dic and '?' in r_dic:\n                res.append([l_dic['?'].pop(), r_dic['?'].pop()])\n            else:\n                break\n        elif l[i] == '?':\n            if r[i] in r_dic:\n                res.append([l_dic['?'].pop(), r_dic[r[i]].pop()])\n            else:\n                break\n        elif r[i] == '?':\n            if l[i] in l_dic:\n                res.append([l_dic[l[i]].pop(), r_dic['?'].pop()])\n            else:\n                break\n        elif l[i] == r[i]:\n            if l[i] in l_dic and r[i] in r_dic:\n                res.append([l_dic[l[i]].pop(), r_dic[r[i]].pop()])\n            else:\n                break\n        else:\n            break\n\n    print(len(res))\n    for i in res:\n        print(i[0], i[1])\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef get_boots_pair(n, l, r):\n    ll = [0] * 26\n    rr = [0] * 26\n    for i in range(n):\n        if l[i] != '?':\n            ll[ord(l[i]) - ord('a')] += 1\n        if r[i] != '?':\n            rr[ord(r[i]) - ord('a')] += 1\n\n    pairs = []\n    for i in range(n):\n        if l[i] != '?' and r[i] != '?':\n            pairs.append([i, i])\n            ll[ord(l[i]) - ord('a')] -= 1\n            rr[ord(r[i]) - ord('a')] -= 1\n        elif l[i] != '?':\n            j = ord(l[i]) - ord('a')\n            if rr[j] > 0:\n                pairs.append([i, n - rr[j]])\n                rr[j] -= 1\n                ll[j] -= 1\n        elif r[i] != '?':\n            j = ord(r[i]) - ord('a')\n            if ll[j] > 0:\n                pairs.append([n - ll[j], i])\n                rr[j] -= 1\n                ll[j] -= 1\n        else:\n            for j in range(26):\n                if ll[j] > 0 and rr[j] > 0:\n                    pairs.append([n - ll[j], n - rr[j]])\n                    rr[j] -= 1\n                    ll[j] -= 1\n                    break\n    return pairs\n\nif __name__ == '__main__':\n    n = int(input())\n    l = input()\n    r = input()\n    pairs = get_boots_pair(n, l, r)\n    print(len(pairs))\n    for p in pairs:\n        print(p[0] + 1, p[1] + 1)", "\n\nn = int(input())\nl = input()\nr = input()\n\nl_dict = {}\nr_dict = {}\n\nfor i in range(n):\n    if l[i] == \"?\":\n        if \"?\" not in l_dict:\n            l_dict[\"?\"] = [i + 1]\n        else:\n            l_dict[\"?\"].append(i + 1)\n    else:\n        if l[i] not in l_dict:\n            l_dict[l[i]] = [i + 1]\n        else:\n            l_dict[l[i]].append(i + 1)\n\nfor i in range(n):\n    if r[i] == \"?\":\n        if \"?\" not in r_dict:\n            r_dict[\"?\"] = [i + 1]\n        else:\n            r_dict[\"?\"].append(i + 1)\n    else:\n        if r[i] not in r_dict:\n            r_dict[r[i]] = [i + 1]\n        else:\n            r_dict[r[i]].append(i + 1)\n\ncount = 0\nfor key in l_dict:\n    if key in r_dict:\n        count += min(len(l_dict[key]), len(r_dict[key]))\n    elif \"?\" in r_dict:\n        count += len(l_dict[key])\n\nfor key in r_dict:\n    if key not in l_dict and key != \"?\":\n        count += len(r_dict[key])\n\nprint(count)\n\nfor key in l_dict:\n    if key in r_dict:\n        for i in range(min(len(l_dict[key]), len(r_dict[key]))):\n            print(str(l_dict[key][i]) + \" \" + str(r_dict[key][i]))\n    elif \"?\" in r_dict:\n        for i in range(len(l_dict[key])):\n            print(str(l_dict[key][i]) + \" \" + str(r_dict[\"?\"][i]))\n\nfor key in r_dict:\n    if key not in l_dict and key != \"?\":\n        for i in range(len(r_dict[key])):\n            print(str(l_dict[\"?\"][i]) + \" \" + str(r_dict[key][i]))", "\n\nimport sys\n\ndef color_pairs(l, r):\n    l_indices = {}\n    for i, c in enumerate(l):\n        l_indices.setdefault(c, []).append(i)\n    pairs = []\n    for i, c in enumerate(r):\n        if c == '?':\n            for j in l_indices.get('?', []):\n                pairs.append((j, i))\n        else:\n            for j in l_indices.get(c, []):\n                pairs.append((j, i))\n    return len(pairs), pairs\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    l = sys.stdin.readline().strip()\n    r = sys.stdin.readline().strip()\n    k, pairs = color_pairs(l, r)\n    print(k)\n    for p in pairs:\n        print('{} {}'.format(p[0]+1, p[1]+1))\n\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\nl = input()\nr = input()\n\ndef get_index(char):\n    if char == '?':\n        return -1\n    else:\n        return ord(char) - ord('a')\n\ndef solve():\n    l_indexes = list(map(get_index, l))\n    r_indexes = list(map(get_index, r))\n    left_counts = [0] * 26\n    right_counts = [0] * 26\n    for index in l_indexes:\n        if index >= 0:\n            left_counts[index] += 1\n    for index in r_indexes:\n        if index >= 0:\n            right_counts[index] += 1\n    left_index = 0\n    right_index = 0\n    solutions = []\n    while left_index < n and right_index < n:\n        if l_indexes[left_index] == r_indexes[right_index]:\n            solutions.append((left_index + 1, right_index + 1))\n            left_index += 1\n            right_index += 1\n        elif l_indexes[left_index] < 0:\n            left_index += 1\n        elif r_indexes[right_index] < 0:\n            right_index += 1\n        elif left_counts[l_indexes[left_index]] <= right_counts[l_indexes[left_index]]:\n            left_index += 1\n        else:\n            right_index += 1\n    print(len(solutions))\n    for solution in solutions:\n        print(*solution)\n\nsolve()", "\n\nn = int(input())\nl = input()\nr = input()\n\ndef get_compatible(a, b):\n    if a == '?' or b == '?':\n        return True\n    return a == b\n\nmatches = []\nfor i in range(n):\n    for j in range(n):\n        if get_compatible(l[i], r[j]):\n            matches.append((i, j))\n\nprint(len(matches))\nfor i, j in matches:\n    print(i+1, j+1)", "\n\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n\n    def compute_height(self):\n        # Replace this code with a faster implementation\n        maxHeight = 0\n        for vertex in range(self.n):\n            height = 0\n            i = vertex\n            while i != -1:\n                height += 1\n                i = self.parent[i]\n            maxHeight = max(maxHeight, height);\n        return maxHeight;\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\n\nthreading.Thread(target=main).start()"]