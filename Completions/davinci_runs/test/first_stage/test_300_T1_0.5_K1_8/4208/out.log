2022-04-19 22:59:32.302954 """
There are $n$ left boots and $n$ right boots. Each boot has a color which is denoted as a lowercase Latin letter or a question mark ('?'). Thus, you are given two strings $l$ and $r$, both of length $n$. The character $l_i$ stands for the color of the $i$-th left boot and the character $r_i$ stands for the color of the $i$-th right boot.

A lowercase Latin letter denotes a specific color, but the question mark ('?') denotes an indefinite color. Two specific colors are compatible if they are exactly the same. An indefinite color is compatible with any (specific or indefinite) color.

For example, the following pairs of colors are compatible: ('f', 'f'), ('?', 'z'), ('a', '?') and ('?', '?'). The following pairs of colors are not compatible: ('f', 'g') and ('a', 'z').

Compute the maximum number of pairs of boots such that there is one left and one right boot in a pair and their colors are compatible.

Print the maximum number of such pairs and the pairs themselves. A boot can be part of at most one pair.


-----Input-----

The first line contains $n$ ($1 \le n \le 150000$), denoting the number of boots for each leg (i.e. the number of left boots and the number of right boots).

The second line contains the string $l$ of length $n$. It contains only lowercase Latin letters or question marks. The $i$-th character stands for the color of the $i$-th left boot.

The third line contains the string $r$ of length $n$. It contains only lowercase Latin letters or question marks. The $i$-th character stands for the color of the $i$-th right boot.


-----Output-----

Print $k$ â€” the maximum number of compatible left-right pairs of boots, i.e. pairs consisting of one left and one right boot which have compatible colors.

The following $k$ lines should contain pairs $a_j, b_j$ ($1 \le a_j, b_j \le n$). The $j$-th of these lines should contain the index $a_j$ of the left boot in the $j$-th pair and index $b_j$ of the right boot in the $j$-th pair. All the numbers $a_j$ should be distinct (unique), all the numbers $b_j$ should be distinct (unique).

If there are many optimal answers, print any of them.


-----Examples-----
Input
10
codeforces
dodivthree

Output
5
7 8
4 9
2 2
9 10
3 1

Input
7
abaca?b
zabbbcc

Output
5
6 5
2 3
4 6
7 4
1 2

Input
9
bambarbia
hellocode

Output
0

Input
10
code??????
??????test

Output
10
6 2
1 6
7 3
3 5
4 8
9 7
5 1
2 4
10 9
8 10
"""
2022-04-19 22:59:32.302973 --------------------------
2022-04-19 22:59:32.303081 using api key derek
2022-04-19 23:00:03.652758 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef get_boots_pair(n, l, r):\n    ll = [0] * 26\n    rr = [0] * 26\n    for i in range(n):\n        if l[i] != '?':\n            ll[ord(l[i]) - ord('a')] += 1\n        if r[i] != '?':\n            rr[ord(r[i]) - ord('a')] += 1\n\n    pairs = []\n    for i in range(n):\n        if l[i] != '?' and r[i] != '?':\n            pairs.append([i, i])\n            ll[ord(l[i]) - ord('a')] -= 1\n            rr[ord(r[i]) - ord('a')] -= 1\n        elif l[i] != '?':\n            j = ord(l[i]) - ord('a')\n            if rr[j] > 0:\n                pairs.append([i, n - rr[j]])\n                rr[j] -= 1\n                ll[j] -= 1\n        elif r[i] != '?':\n            j = ord(r[i]) - ord('a')\n            if ll[j] > 0:\n                pairs.append([n - ll[j], i])\n                rr[j] -= 1\n                ll[j] -= 1\n        else:\n            for j in range(26):\n                if ll[j] > 0 and rr[j] > 0:\n                    pairs.append([n - ll[j], n - rr[j]])\n                    rr[j] -= 1\n                    ll[j] -= 1\n                    break\n    return pairs\n\nif __name__ == '__main__':\n    n = int(input())\n    l = input()\n    r = input()\n    pairs = get_boots_pair(n, l, r)\n    print(len(pairs))\n    for p in pairs:\n        print(p[0] + 1, p[1] + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n\n    def compute_height(self):\n        # Replace this code with a faster implementation\n        maxHeight = 0\n        for vertex in range(self.n):\n            height = 0\n            i = vertex\n            while i != -1:\n                height += 1\n                i = self.parent[i]\n            maxHeight = max(maxHeight, height);\n        return maxHeight;\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\n\nthreading.Thread(target=main).start()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\nl = input()\nr = input()\n\nl_dict = {}\nr_dict = {}\n\nfor i in range(n):\n    if l[i] == \"?\":\n        if \"?\" not in l_dict:\n            l_dict[\"?\"] = [i + 1]\n        else:\n            l_dict[\"?\"].append(i + 1)\n    else:\n        if l[i] not in l_dict:\n            l_dict[l[i]] = [i + 1]\n        else:\n            l_dict[l[i]].append(i + 1)\n\nfor i in range(n):\n    if r[i] == \"?\":\n        if \"?\" not in r_dict:\n            r_dict[\"?\"] = [i + 1]\n        else:\n            r_dict[\"?\"].append(i + 1)\n    else:\n        if r[i] not in r_dict:\n            r_dict[r[i]] = [i + 1]\n        else:\n            r_dict[r[i]].append(i + 1)\n\ncount = 0\nfor key in l_dict:\n    if key in r_dict:\n        count += min(len(l_dict[key]), len(r_dict[key]))\n    elif \"?\" in r_dict:\n        count += len(l_dict[key])\n\nfor key in r_dict:\n    if key not in l_dict and key != \"?\":\n        count += len(r_dict[key])\n\nprint(count)\n\nfor key in l_dict:\n    if key in r_dict:\n        for i in range(min(len(l_dict[key]), len(r_dict[key]))):\n            print(str(l_dict[key][i]) + \" \" + str(r_dict[key][i]))\n    elif \"?\" in r_dict:\n        for i in range(len(l_dict[key])):\n            print(str(l_dict[key][i]) + \" \" + str(r_dict[\"?\"][i]))\n\nfor key in r_dict:\n    if key not in l_dict and key != \"?\":\n        for i in range(len(r_dict[key])):\n            print(str(l_dict[\"?\"][i]) + \" \" + str(r_dict[key][i]))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\nl = input()\nr = input()\n\ndef get_compatible(a, b):\n    if a == '?' or b == '?':\n        return True\n    return a == b\n\nmatches = []\nfor i in range(n):\n    for j in range(n):\n        if get_compatible(l[i], r[j]):\n            matches.append((i, j))\n\nprint(len(matches))\nfor i, j in matches:\n    print(i+1, j+1)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\nl = input()\nr = input()\n\ndef get_index(char):\n    if char == '?':\n        return -1\n    else:\n        return ord(char) - ord('a')\n\ndef solve():\n    l_indexes = list(map(get_index, l))\n    r_indexes = list(map(get_index, r))\n    left_counts = [0] * 26\n    right_counts = [0] * 26\n    for index in l_indexes:\n        if index >= 0:\n            left_counts[index] += 1\n    for index in r_indexes:\n        if index >= 0:\n            right_counts[index] += 1\n    left_index = 0\n    right_index = 0\n    solutions = []\n    while left_index < n and right_index < n:\n        if l_indexes[left_index] == r_indexes[right_index]:\n            solutions.append((left_index + 1, right_index + 1))\n            left_index += 1\n            right_index += 1\n        elif l_indexes[left_index] < 0:\n            left_index += 1\n        elif r_indexes[right_index] < 0:\n            right_index += 1\n        elif left_counts[l_indexes[left_index]] <= right_counts[l_indexes[left_index]]:\n            left_index += 1\n        else:\n            right_index += 1\n    print(len(solutions))\n    for solution in solutions:\n        print(*solution)\n\nsolve()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    l = input()\n    r = input()\n\n    l_dic = {}\n    r_dic = {}\n    for i in range(n):\n        if l[i] == '?':\n            if '?' in l_dic:\n                l_dic['?'].append(i+1)\n            else:\n                l_dic['?'] = [i+1]\n        else:\n            if l[i] in l_dic:\n                l_dic[l[i]].append(i+1)\n            else:\n                l_dic[l[i]] = [i+1]\n        if r[i] == '?':\n            if '?' in r_dic:\n                r_dic['?'].append(i+1)\n            else:\n                r_dic['?'] = [i+1]\n        else:\n            if r[i] in r_dic:\n                r_dic[r[i]].append(i+1)\n            else:\n                r_dic[r[i]] = [i+1]\n\n    res = []\n    for i in range(n):\n        if l[i] == '?' and r[i] == '?':\n            if '?' in l_dic and '?' in r_dic:\n                res.append([l_dic['?'].pop(), r_dic['?'].pop()])\n            else:\n                break\n        elif l[i] == '?':\n            if r[i] in r_dic:\n                res.append([l_dic['?'].pop(), r_dic[r[i]].pop()])\n            else:\n                break\n        elif r[i] == '?':\n            if l[i] in l_dic:\n                res.append([l_dic[l[i]].pop(), r_dic['?'].pop()])\n            else:\n                break\n        elif l[i] == r[i]:\n            if l[i] in l_dic and r[i] in r_dic:\n                res.append([l_dic[l[i]].pop(), r_dic[r[i]].pop()])\n            else:\n                break\n        else:\n            break\n\n    print(len(res))\n    for i in res:\n        print(i[0], i[1])\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef color_pairs(l, r):\n    l_indices = {}\n    for i, c in enumerate(l):\n        l_indices.setdefault(c, []).append(i)\n    pairs = []\n    for i, c in enumerate(r):\n        if c == '?':\n            for j in l_indices.get('?', []):\n                pairs.append((j, i))\n        else:\n            for j in l_indices.get(c, []):\n                pairs.append((j, i))\n    return len(pairs), pairs\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    l = sys.stdin.readline().strip()\n    r = sys.stdin.readline().strip()\n    k, pairs = color_pairs(l, r)\n    print(k)\n    for p in pairs:\n        print('{} {}'.format(p[0]+1, p[1]+1))\n\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650409172,
  "id": "cmpl-4yr6ilOAZyqageZwY5EL5D3vVjsdX",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 23:00:03.653314 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef get_boots_pair(n, l, r):\n    ll = [0] * 26\n    rr = [0] * 26\n    for i in range(n):\n        if l[i] != '?':\n            ll[ord(l[i]) - ord('a')] += 1\n        if r[i] != '?':\n            rr[ord(r[i]) - ord('a')] += 1\n\n    pairs = []\n    for i in range(n):\n        if l[i] != '?' and r[i] != '?':\n            pairs.append([i, i])\n            ll[ord(l[i]) - ord('a')] -= 1\n            rr[ord(r[i]) - ord('a')] -= 1\n        elif l[i] != '?':\n            j = ord(l[i]) - ord('a')\n            if rr[j] > 0:\n                pairs.append([i, n - rr[j]])\n                rr[j] -= 1\n                ll[j] -= 1\n        elif r[i] != '?':\n            j = ord(r[i]) - ord('a')\n            if ll[j] > 0:\n                pairs.append([n - ll[j], i])\n                rr[j] -= 1\n                ll[j] -= 1\n        else:\n            for j in range(26):\n                if ll[j] > 0 and rr[j] > 0:\n                    pairs.append([n - ll[j], n - rr[j]])\n                    rr[j] -= 1\n                    ll[j] -= 1\n                    break\n    return pairs\n\nif __name__ == '__main__':\n    n = int(input())\n    l = input()\n    r = input()\n    pairs = get_boots_pair(n, l, r)\n    print(len(pairs))\n    for p in pairs:\n        print(p[0] + 1, p[1] + 1)"
}
2022-04-19 23:00:03.653389 REASON stop
2022-04-19 23:00:03.654400 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": ""
}
2022-04-19 23:00:03.654506 REASON stop
2022-04-19 23:00:03.655227 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n\n    def compute_height(self):\n        # Replace this code with a faster implementation\n        maxHeight = 0\n        for vertex in range(self.n):\n            height = 0\n            i = vertex\n            while i != -1:\n                height += 1\n                i = self.parent[i]\n            maxHeight = max(maxHeight, height);\n        return maxHeight;\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\n\nthreading.Thread(target=main).start()"
}
2022-04-19 23:00:03.655322 REASON stop
2022-04-19 23:00:03.673877 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\nl = input()\nr = input()\n\nl_dict = {}\nr_dict = {}\n\nfor i in range(n):\n    if l[i] == \"?\":\n        if \"?\" not in l_dict:\n            l_dict[\"?\"] = [i + 1]\n        else:\n            l_dict[\"?\"].append(i + 1)\n    else:\n        if l[i] not in l_dict:\n            l_dict[l[i]] = [i + 1]\n        else:\n            l_dict[l[i]].append(i + 1)\n\nfor i in range(n):\n    if r[i] == \"?\":\n        if \"?\" not in r_dict:\n            r_dict[\"?\"] = [i + 1]\n        else:\n            r_dict[\"?\"].append(i + 1)\n    else:\n        if r[i] not in r_dict:\n            r_dict[r[i]] = [i + 1]\n        else:\n            r_dict[r[i]].append(i + 1)\n\ncount = 0\nfor key in l_dict:\n    if key in r_dict:\n        count += min(len(l_dict[key]), len(r_dict[key]))\n    elif \"?\" in r_dict:\n        count += len(l_dict[key])\n\nfor key in r_dict:\n    if key not in l_dict and key != \"?\":\n        count += len(r_dict[key])\n\nprint(count)\n\nfor key in l_dict:\n    if key in r_dict:\n        for i in range(min(len(l_dict[key]), len(r_dict[key]))):\n            print(str(l_dict[key][i]) + \" \" + str(r_dict[key][i]))\n    elif \"?\" in r_dict:\n        for i in range(len(l_dict[key])):\n            print(str(l_dict[key][i]) + \" \" + str(r_dict[\"?\"][i]))\n\nfor key in r_dict:\n    if key not in l_dict and key != \"?\":\n        for i in range(len(r_dict[key])):\n            print(str(l_dict[\"?\"][i]) + \" \" + str(r_dict[key][i]))"
}
2022-04-19 23:00:03.674053 REASON stop
2022-04-19 23:00:03.686570 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\nl = input()\nr = input()\n\ndef get_compatible(a, b):\n    if a == '?' or b == '?':\n        return True\n    return a == b\n\nmatches = []\nfor i in range(n):\n    for j in range(n):\n        if get_compatible(l[i], r[j]):\n            matches.append((i, j))\n\nprint(len(matches))\nfor i, j in matches:\n    print(i+1, j+1)"
}
2022-04-19 23:00:03.686740 REASON stop
2022-04-19 23:00:03.693181 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\nl = input()\nr = input()\n\ndef get_index(char):\n    if char == '?':\n        return -1\n    else:\n        return ord(char) - ord('a')\n\ndef solve():\n    l_indexes = list(map(get_index, l))\n    r_indexes = list(map(get_index, r))\n    left_counts = [0] * 26\n    right_counts = [0] * 26\n    for index in l_indexes:\n        if index >= 0:\n            left_counts[index] += 1\n    for index in r_indexes:\n        if index >= 0:\n            right_counts[index] += 1\n    left_index = 0\n    right_index = 0\n    solutions = []\n    while left_index < n and right_index < n:\n        if l_indexes[left_index] == r_indexes[right_index]:\n            solutions.append((left_index + 1, right_index + 1))\n            left_index += 1\n            right_index += 1\n        elif l_indexes[left_index] < 0:\n            left_index += 1\n        elif r_indexes[right_index] < 0:\n            right_index += 1\n        elif left_counts[l_indexes[left_index]] <= right_counts[l_indexes[left_index]]:\n            left_index += 1\n        else:\n            right_index += 1\n    print(len(solutions))\n    for solution in solutions:\n        print(*solution)\n\nsolve()"
}
2022-04-19 23:00:03.693332 REASON stop
2022-04-19 23:00:03.694315 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    l = input()\n    r = input()\n\n    l_dic = {}\n    r_dic = {}\n    for i in range(n):\n        if l[i] == '?':\n            if '?' in l_dic:\n                l_dic['?'].append(i+1)\n            else:\n                l_dic['?'] = [i+1]\n        else:\n            if l[i] in l_dic:\n                l_dic[l[i]].append(i+1)\n            else:\n                l_dic[l[i]] = [i+1]\n        if r[i] == '?':\n            if '?' in r_dic:\n                r_dic['?'].append(i+1)\n            else:\n                r_dic['?'] = [i+1]\n        else:\n            if r[i] in r_dic:\n                r_dic[r[i]].append(i+1)\n            else:\n                r_dic[r[i]] = [i+1]\n\n    res = []\n    for i in range(n):\n        if l[i] == '?' and r[i] == '?':\n            if '?' in l_dic and '?' in r_dic:\n                res.append([l_dic['?'].pop(), r_dic['?'].pop()])\n            else:\n                break\n        elif l[i] == '?':\n            if r[i] in r_dic:\n                res.append([l_dic['?'].pop(), r_dic[r[i]].pop()])\n            else:\n                break\n        elif r[i] == '?':\n            if l[i] in l_dic:\n                res.append([l_dic[l[i]].pop(), r_dic['?'].pop()])\n            else:\n                break\n        elif l[i] == r[i]:\n            if l[i] in l_dic and r[i] in r_dic:\n                res.append([l_dic[l[i]].pop(), r_dic[r[i]].pop()])\n            else:\n                break\n        else:\n            break\n\n    print(len(res))\n    for i in res:\n        print(i[0], i[1])\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 23:00:03.694431 REASON stop
2022-04-19 23:00:03.697200 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef color_pairs(l, r):\n    l_indices = {}\n    for i, c in enumerate(l):\n        l_indices.setdefault(c, []).append(i)\n    pairs = []\n    for i, c in enumerate(r):\n        if c == '?':\n            for j in l_indices.get('?', []):\n                pairs.append((j, i))\n        else:\n            for j in l_indices.get(c, []):\n                pairs.append((j, i))\n    return len(pairs), pairs\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    l = sys.stdin.readline().strip()\n    r = sys.stdin.readline().strip()\n    k, pairs = color_pairs(l, r)\n    print(k)\n    for p in pairs:\n        print('{} {}'.format(p[0]+1, p[1]+1))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:00:03.697491 REASON stop
