2022-04-19 23:40:52.003425 """
You are given a string S of length N consisting of A, C, G and T. Answer the following Q queries:
 - Query i (1 \leq i \leq Q): You will be given integers l_i and r_i (1 \leq l_i < r_i \leq N). Consider the substring of S starting at index l_i and ending at index r_i (both inclusive). In this string, how many times does AC occurs as a substring?

-----Notes-----
A substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.
For example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.

-----Constraints-----
 - 2 \leq N \leq 10^5
 - 1 \leq Q \leq 10^5
 - S is a string of length N.
 - Each character in S is A, C, G or T.
 - 1 \leq l_i < r_i \leq N

-----Input-----
Input is given from Standard Input in the following format:
N Q
S
l_1 r_1
:
l_Q r_Q

-----Output-----
Print Q lines. The i-th line should contain the answer to the i-th query.

-----Sample Input-----
8 3
ACACTACG
3 7
2 3
1 8

-----Sample Output-----
2
0
3

 - Query 1: the substring of S starting at index 3 and ending at index 7 is ACTAC. In this string, AC occurs twice as a substring.
 - Query 2: the substring of S starting at index 2 and ending at index 3 is CA. In this string, AC occurs zero times as a substring.
 - Query 3: the substring of S starting at index 1 and ending at index 8 is ACACTACG. In this string, AC occurs three times as a substring.
"""
2022-04-19 23:40:52.003439 --------------------------
2022-04-19 23:40:52.003543 using api key gabby
2022-04-19 23:41:07.194394 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN, Q = map(int, input().split())\nS = input()\n\n# \u7d2f\u7a4d\u548c\u3092\u4f5c\u308b\nac_count = [0] * (N + 1)\nfor i in range(N):\n    if S[i:i + 2] == \"AC\":\n        ac_count[i + 1] = ac_count[i] + 1\n    else:\n        ac_count[i + 1] = ac_count[i]\n\nfor _ in range(Q):\n    l, r = map(int, input().split())\n    print(ac_count[r - 1] - ac_count[l - 1])"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# AC\nn, q = map(int, input().split())\ns = input()\n\nac_dict = {}\n\nfor i in range(n):\n    if s[i:i+2] == 'AC':\n        ac_dict[i] = 1\n\nfor _ in range(q):\n    l, r = map(int, input().split())\n    l -= 1\n    r -= 1\n    cnt = 0\n    for i in ac_dict:\n        if i >= l and i < r:\n            cnt += 1\n    print(cnt)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, q = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().rstrip()\n    for _ in range(q):\n        l, r = map(int, sys.stdin.readline().split())\n        print(s[l-1:r].count(\"AC\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    # Get the string and query counts\n    n, q = map(int, input().split())\n\n    # Get the string\n    s = input()\n\n    # Get the queries\n    queries = [list(map(int, input().split())) for _ in range(q)]\n\n    # Create a dictionary to store the number of ACs in each substring\n    ac_count = defaultdict(int)\n\n    # Loop through the string\n    for i in range(n-1):\n        # If the current 2 characters are AC, increase the count\n        if s[i:i+2] == 'AC':\n            ac_count[i+1] += 1\n\n    # Create a prefix sum array\n    prefix_sums = [0]\n    for i in range(1, n):\n        prefix_sums.append(prefix_sums[i-1] + ac_count[i])\n\n    # Loop through the queries\n    for query in queries:\n        # Get the start and end index\n        l, r = query[0]-1, query[1]-1\n\n        # Print the answer\n        print(prefix_sums[r] - prefix_sums[l])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nN, Q = map(int, input().split())\nS = input()\n\nfor _ in range(Q):\n    l, r = map(int, input().split())\n    print(S[l-1:r].count(\"AC\"))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN, Q = map(int, input().split())\nS = input()\n\nsubstrings = []\nfor i in range(N-1):\n    if S[i:i+2] == \"AC\":\n        substrings.append(i)\n\nfor i in range(Q):\n    l, r = map(int, input().split())\n    count = 0\n    for s in substrings:\n        if l-1 <= s <= r-2:\n            count += 1\n    print(count)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN, Q = map(int, input().split())\nS = input()\n\nfor i in range(Q):\n    l, r = map(int, input().split())\n    print(S[l-1:r-1].count('AC'))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, q = map(int, input().split())\ns = input()\nfor _ in range(q):\n    l, r = map(int, input().split())\n    print(s[l-1:r].count(\"AC\"))"
    }
  ],
  "created": 1650411652,
  "id": "cmpl-4yrkif5OeNGrBYCyLsukLXZzUCouE",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 23:41:07.194727 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN, Q = map(int, input().split())\nS = input()\n\n# \u7d2f\u7a4d\u548c\u3092\u4f5c\u308b\nac_count = [0] * (N + 1)\nfor i in range(N):\n    if S[i:i + 2] == \"AC\":\n        ac_count[i + 1] = ac_count[i] + 1\n    else:\n        ac_count[i + 1] = ac_count[i]\n\nfor _ in range(Q):\n    l, r = map(int, input().split())\n    print(ac_count[r - 1] - ac_count[l - 1])"
}
2022-04-19 23:41:07.194770 REASON stop
2022-04-19 23:41:07.264897 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# AC\nn, q = map(int, input().split())\ns = input()\n\nac_dict = {}\n\nfor i in range(n):\n    if s[i:i+2] == 'AC':\n        ac_dict[i] = 1\n\nfor _ in range(q):\n    l, r = map(int, input().split())\n    l -= 1\n    r -= 1\n    cnt = 0\n    for i in ac_dict:\n        if i >= l and i < r:\n            cnt += 1\n    print(cnt)"
}
2022-04-19 23:41:07.265032 REASON stop
2022-04-19 23:41:07.378890 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, q = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().rstrip()\n    for _ in range(q):\n        l, r = map(int, sys.stdin.readline().split())\n        print(s[l-1:r].count(\"AC\"))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:41:07.379040 REASON stop
2022-04-19 23:41:07.463118 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    # Get the string and query counts\n    n, q = map(int, input().split())\n\n    # Get the string\n    s = input()\n\n    # Get the queries\n    queries = [list(map(int, input().split())) for _ in range(q)]\n\n    # Create a dictionary to store the number of ACs in each substring\n    ac_count = defaultdict(int)\n\n    # Loop through the string\n    for i in range(n-1):\n        # If the current 2 characters are AC, increase the count\n        if s[i:i+2] == 'AC':\n            ac_count[i+1] += 1\n\n    # Create a prefix sum array\n    prefix_sums = [0]\n    for i in range(1, n):\n        prefix_sums.append(prefix_sums[i-1] + ac_count[i])\n\n    # Loop through the queries\n    for query in queries:\n        # Get the start and end index\n        l, r = query[0]-1, query[1]-1\n\n        # Print the answer\n        print(prefix_sums[r] - prefix_sums[l])\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 23:41:07.463279 REASON stop
2022-04-19 23:41:07.582253 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nN, Q = map(int, input().split())\nS = input()\n\nfor _ in range(Q):\n    l, r = map(int, input().split())\n    print(S[l-1:r].count(\"AC\"))"
}
2022-04-19 23:41:07.582402 REASON stop
2022-04-19 23:41:07.609761 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN, Q = map(int, input().split())\nS = input()\n\nsubstrings = []\nfor i in range(N-1):\n    if S[i:i+2] == \"AC\":\n        substrings.append(i)\n\nfor i in range(Q):\n    l, r = map(int, input().split())\n    count = 0\n    for s in substrings:\n        if l-1 <= s <= r-2:\n            count += 1\n    print(count)"
}
2022-04-19 23:41:07.609961 REASON stop
2022-04-19 23:41:07.762551 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN, Q = map(int, input().split())\nS = input()\n\nfor i in range(Q):\n    l, r = map(int, input().split())\n    print(S[l-1:r-1].count('AC'))"
}
2022-04-19 23:41:07.762703 REASON stop
2022-04-19 23:41:07.914404 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, q = map(int, input().split())\ns = input()\nfor _ in range(q):\n    l, r = map(int, input().split())\n    print(s[l-1:r].count(\"AC\"))"
}
2022-04-19 23:41:07.914646 REASON stop
