["\n\nn = int(input())\nf = list(map(int, input().split()))\n\n# First, fill in the gift-giving for people who don't know where to give their gift to\nfor i in range(len(f)):\n    if f[i] == 0:\n        for j in range(len(f)):\n            if f[j] == 0:\n                f[i] = j + 1\n                break\n        break\n\n# Now, fill in the gift-giving for people who don't know where to receive their gift from\nfor i in range(len(f)):\n    if f[i] == 0:\n        for j in range(len(f)):\n            if f[j] == 0:\n                f[i] = j + 1\n                break\n        break\n\n# Now, fill in the gift-giving for people who don't know where to give their gift to\nfor i in range(len(f)):\n    if f[i] == 0:\n        for j in range(len(f)):\n            if f[j] == 0:\n                f[i] = j + 1\n                break\n        break\n\nprint(*f)", "\n\nn = int(input())\nf = list(map(int, input().split()))\n\n# For each friend i, we want to know the friend j whom i wants to give a gift to\n# So we create a dictionary that maps i to j\n# We also keep track of the number of friends who want to give a gift to each friend\n# Each friend i should have 1 outgoing gift and 1 incoming gift\n# If a friend i has 0 outgoing gifts, we give him an outgoing gift to the friend who has the most incoming gifts\n# If a friend i has 2 outgoing gifts, we take one of the outgoing gifts away\n# If a friend i has 1 outgoing gift and 1 incoming gift, we do nothing\n# We keep doing this until no friend has 2 outgoing gifts\n\ngifts = dict()\nincoming = dict()\noutgoing = dict()\n\nfor i in range(n):\n    if f[i] != 0:\n        gifts[i] = f[i] - 1\n        if f[i] - 1 in incoming:\n            incoming[f[i] - 1] += 1\n        else:\n            incoming[f[i] - 1] = 1\n        if i in outgoing:\n            outgoing[i] += 1\n        else:\n            outgoing[i] = 1\n\nwhile any(map(lambda x: x >= 2, outgoing.values())):\n    for i in range(n):\n        if i in outgoing:\n            if outgoing[i] >= 2:\n                del gifts[i]\n                outgoing[i] -= 1\n                incoming[gifts[i]] -= 1\n            elif outgoing[i] == 1 and i not in incoming:\n                most_incoming = max(incoming, key=incoming.get)\n                incoming[most_incoming] += 1\n                outgoing[i] += 1\n                gifts[i] = most_incoming\n\nfor i in range(n):\n    if i not in outgoing:\n        print(1, end=' ')\n    else:\n        print(gifts[i] + 1, end=' ')", "\n\ndef main():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    for i in range(n):\n        if f[i] == 0:\n            for j in range(1, n+1):\n                if j not in f and j != i+1:\n                    f[i] = j\n                    break\n\n    print(' '.join(map(str, f)))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input().strip())\n    f = list(map(int, input().strip().split()))\n    assert n == len(f)\n\n    # There are two cases:\n    #   1. There are only two 0's, in which case we can simply swap them\n    #   2. There are more than two 0's, in which case we can assign the 0's\n    #      in a round robin fashion\n\n    zeros = []\n    for i in range(n):\n        if f[i] == 0:\n            zeros.append(i)\n\n    if len(zeros) == 2:\n        f[zeros[0]], f[zeros[1]] = f[zeros[1]], f[zeros[0]]\n    else:\n        i = 0\n        for j in range(n):\n            if f[j] == 0:\n                f[j] = zeros[i] + 1\n                i += 1\n\n    print(' '.join(map(str, f)))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n# Solution\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    f = [int(x) for x in sys.stdin.readline().split()]\n    g = [0] * n\n    for i in range(n):\n        if f[i] != 0:\n            g[f[i] - 1] = i + 1\n    for i in range(n):\n        if f[i] == 0:\n            for j in range(n):\n                if g[j] == 0:\n                    g[j] = i + 1\n                    break\n    print(' '.join(map(str, g)))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    f = list(map(int,input().split()))\n    for i in range(len(f)):\n        if f[i] == 0:\n            f[i] = i+1\n    for i in range(len(f)):\n        if f[i] == 0:\n            f[i] = i+1\n    for i in range(len(f)):\n        print(f[i],end=\" \")\n\nmain()", "\n\nn = int(input())\nf = [int(x) for x in input().split()]\n\nif f[0] == 0:\n    for i in range(2,n+1):\n        if i not in f:\n            f[0] = i\n            break\n\nfor i in range(1,n):\n    if f[i] == 0:\n        for j in range(1,n+1):\n            if (j not in f) and (j != f[i-1]):\n                f[i] = j\n                break\n\nprint(*f)", "\n\ndef main():\n    n = int(input())\n    f = list(map(int, input().split()))\n    f = [0 if x == 0 else x for x in f]\n    f = [x if x != 0 else n+1 for x in f]\n    f = [x if x != 0 else n+2 for x in f]\n    f = [x if x != 0 else n+3 for x in f]\n    f = [x if x != 0 else n+4 for x in f]\n    f = [x if x != 0 else n+5 for x in f]\n    f = [x if x != 0 else n+6 for x in f]\n    f = [x if x != 0 else n+7 for x in f]\n    f = [x if x != 0 else n+8 for x in f]\n    print(*f)\n\nif __name__ == '__main__':\n    main()"]