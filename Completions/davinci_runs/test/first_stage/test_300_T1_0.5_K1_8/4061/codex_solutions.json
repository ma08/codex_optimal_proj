["\n\n# If the strings are the same, you can't remove any characters.\n# Otherwise, you can remove the characters that are not in the string.\n\n# Python 2/3 compatibility\nfrom __future__ import print_function\n\n# Read inputs\ns = raw_input()\nt = raw_input()\n\nif s == t:\n    print(0)\nelse:\n    print(len(s) - len(t))", "\n\ndef solve(s, t):\n    \"\"\"\n    >>> solve('bbaba', 'bb')\n    3\n    >>> solve('baaba', 'ab')\n    2\n    >>> solve('abcde', 'abcde')\n    0\n    >>> solve('asdfasdf', 'fasd')\n    3\n    \"\"\"\n\n    s_len, t_len = len(s), len(t)\n    dp = [[0] * (t_len + 1) for _ in range(s_len + 1)]\n\n    for i in range(1, s_len + 1):\n        for j in range(1, t_len + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return s_len - dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    s = input()\n    t = input()\n    print(solve(s, t))", "\n\n#!/bin/python3\n\nimport sys\n\ndef solve(s, t):\n    # Complete this function\n    # dp[i][j] = max substring length that can be removed such that s[:i] and t[:j] are subsequences\n    # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n    # else dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + 1)\n    dp = [[0 for j in range(len(t) + 1)] for i in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i-1] != t[j-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + 1)\n    return len(s) - dp[len(s)][len(t)]\n\ns = input().strip()\nt = input().strip()\nresult = solve(s, t)\nprint(result)", "\n\n#!/usr/bin/python3\n\n# import sys\n# # For faster input\n# input = sys.stdin.readline\n\n# Read input\ns = input()\nt = input()\n\n# Create a list of indices of characters in t from s\nindices = []\nfor c in t:\n    indices.append(s.find(c))\n    s = s[s.find(c)+1:]\n\n# Remove all -1 indices\nindices = list(filter(lambda x: x != -1, indices))\n\n# Remove all continuous indices\ni = 0\nwhile i < len(indices)-1:\n    if indices[i] + 1 == indices[i+1]:\n        del indices[i]\n    else:\n        i += 1\n\n# Remove all continuous indices\ni = 0\nwhile i < len(indices)-1:\n    if indices[i] + 1 == indices[i+1]:\n        del indices[i]\n    else:\n        i += 1\n\n# If there are no indices, print 0\nif len(indices) == 0:\n    print(0)\nelse:\n    # Find the maximum length of all continuous substrings\n    i = 0\n    max_length = 0\n    while i < len(indices)-1:\n        length = indices[i+1] - indices[i] - 1\n        if length > max_length:\n            max_length = length\n        i += 1\n    print(max_length)", "\n\n\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return n - dp[n][m]\n\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))", "\n\ndef subsequence(s1, s2):\n    if len(s2) == 0:\n        return True\n    if len(s1) == 0:\n        return False\n\n    if s1[0] == s2[0]:\n        return subsequence(s1[1:], s2[1:])\n    else:\n        return subsequence(s1[1:], s2)\n\ndef max_removal(s, t):\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if subsequence(s[:i] + s[j:], t):\n                return len(s) - len(t)\n    return 0\n\ndef main():\n    s = input()\n    t = input()\n    print(max_removal(s, t))\n\nif __name__ == '__main__':\n    main()", "\n\ndef solve(s, t):\n    \"\"\"\n    >>> solve('bbaba', 'bb')\n    3\n    >>> solve('baaba', 'ab')\n    2\n    >>> solve('abcde', 'abcde')\n    0\n    >>> solve('asdfasdf', 'fasd')\n    3\n    \"\"\"\n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i] == t[j]:\n                dp[i][j] = dp[i + 1][j + 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n    return n - dp[0][0]\n\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))"]