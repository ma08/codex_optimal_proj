2022-04-19 22:11:40.792053 """
Two-gram is an ordered pair (i.e. string of length two) of capital Latin letters. For example, "AZ", "AA", "ZA" — three distinct two-grams.

You are given a string $s$ consisting of $n$ capital Latin letters. Your task is to find any two-gram contained in the given string as a substring (i.e. two consecutive characters of the string) maximal number of times. For example, for string $s$ = "BBAABBBA" the answer is two-gram "BB", which contained in $s$ three times. In other words, find any most frequent two-gram.

Note that occurrences of the two-gram can overlap with each other.


-----Input-----

The first line of the input contains integer number $n$ ($2 \le n \le 100$) — the length of string $s$. The second line of the input contains the string $s$ consisting of $n$ capital Latin letters.


-----Output-----

Print the only line containing exactly two capital Latin letters — any two-gram contained in the given string $s$ as a substring (i.e. two consecutive characters of the string) maximal number of times.


-----Examples-----
Input
7
ABACABA

Output
AB

Input
5
ZZZAA

Output
ZZ



-----Note-----

In the first example "BA" is also valid answer.

In the second example the only two-gram "ZZ" can be printed because it contained in the string "ZZZAA" two times.
"""
2022-04-19 22:11:40.792076 --------------------------
2022-04-19 22:11:40.792185 using api key sourya
2022-04-19 22:11:54.388150 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\ntwo_grams = [s[i:i+2] for i in range(len(s)-1)]\n\nprint(max(set(two_grams), key=two_grams.count))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\ndef main():\n    n = int(input())\n    s = input()\n    max_count = 0\n    max_str = \"\"\n    for i in range(n-1):\n        current_str = s[i:i+2]\n        current_count = s.count(current_str)\n        if current_count > max_count:\n            max_count = current_count\n            max_str = current_str\n    print(max_str)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nfor i in range(n-1):\n    count = s.count(s[i:i+2])\n    if count > max_count:\n        max_count = count\n        max_gram = s[i:i+2]\n\nprint(max_gram)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef two_grams(s):\n    s = list(s)\n    max_gram = ''\n    max_count = 0\n    for i in range(1, len(s)):\n        gram = s[i-1] + s[i]\n        count = s.count(gram)\n        if count > max_count:\n            max_count = count\n            max_gram = gram\n    return max_gram\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = str(input())\n    print(two_grams(s))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n#-----main-----\ns = input()\nn = len(s)\n\n#-----function-----\ndef two_gram(s,n):\n    l = []\n    for i in range(n-1):\n        l.append(s[i:i+2])\n    return l\n\ndef check_max(l):\n    m = 0\n    for i in l:\n        if l.count(i) > m:\n            m = l.count(i)\n    return m\n\ndef print_max(l,m):\n    for i in l:\n        if l.count(i) == m:\n            print(i)\n            break\n\n#-----process-----\nl = two_gram(s,n)\nm = check_max(l)\nprint_max(l,m)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef two_gram(n, s):\n    max_count = 0\n    max_two_gram = ''\n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        count = s.count(two_gram)\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n    return max_two_gram\n\nn = int(input())\ns = input()\nprint(two_gram(n, s))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\n# create a list of tuples containing each two-gram and the number of times it appears in the string\ntwo_grams = [(s[i:i+2], s.count(s[i:i+2])) for i in range(n-1)]\n\n# find the maximum number of times a two-gram appears in the string\nmax_count = max([i[1] for i in two_grams])\n\n# find the two-gram that appears the most\nfor i in two_grams:\n    if i[1] == max_count:\n        print(i[0])\n        break"
    }
  ],
  "created": 1650406300,
  "id": "cmpl-4yqMODjoMj6z2OCzBddXIB14DB23s",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:11:54.388533 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\ntwo_grams = [s[i:i+2] for i in range(len(s)-1)]\n\nprint(max(set(two_grams), key=two_grams.count))"
}
2022-04-19 22:11:54.388574 REASON stop
2022-04-19 22:11:54.389291 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\ndef main():\n    n = int(input())\n    s = input()\n    max_count = 0\n    max_str = \"\"\n    for i in range(n-1):\n        current_str = s[i:i+2]\n        current_count = s.count(current_str)\n        if current_count > max_count:\n            max_count = current_count\n            max_str = current_str\n    print(max_str)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:11:54.389375 REASON stop
2022-04-19 22:11:54.389757 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nfor i in range(n-1):\n    count = s.count(s[i:i+2])\n    if count > max_count:\n        max_count = count\n        max_gram = s[i:i+2]\n\nprint(max_gram)"
}
2022-04-19 22:11:54.389809 REASON stop
2022-04-19 22:11:54.408977 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef two_grams(s):\n    s = list(s)\n    max_gram = ''\n    max_count = 0\n    for i in range(1, len(s)):\n        gram = s[i-1] + s[i]\n        count = s.count(gram)\n        if count > max_count:\n            max_count = count\n            max_gram = gram\n    return max_gram\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = str(input())\n    print(two_grams(s))"
}
2022-04-19 22:11:54.409115 REASON stop
2022-04-19 22:11:54.415240 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n#-----main-----\ns = input()\nn = len(s)\n\n#-----function-----\ndef two_gram(s,n):\n    l = []\n    for i in range(n-1):\n        l.append(s[i:i+2])\n    return l\n\ndef check_max(l):\n    m = 0\n    for i in l:\n        if l.count(i) > m:\n            m = l.count(i)\n    return m\n\ndef print_max(l,m):\n    for i in l:\n        if l.count(i) == m:\n            print(i)\n            break\n\n#-----process-----\nl = two_gram(s,n)\nm = check_max(l)\nprint_max(l,m)"
}
2022-04-19 22:11:54.415355 REASON stop
2022-04-19 22:11:54.424233 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef two_gram(n, s):\n    max_count = 0\n    max_two_gram = ''\n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        count = s.count(two_gram)\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n    return max_two_gram\n\nn = int(input())\ns = input()\nprint(two_gram(n, s))"
}
2022-04-19 22:11:54.424367 REASON stop
2022-04-19 22:11:54.425314 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": ""
}
2022-04-19 22:11:54.425404 REASON stop
2022-04-19 22:11:54.426083 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\n# create a list of tuples containing each two-gram and the number of times it appears in the string\ntwo_grams = [(s[i:i+2], s.count(s[i:i+2])) for i in range(n-1)]\n\n# find the maximum number of times a two-gram appears in the string\nmax_count = max([i[1] for i in two_grams])\n\n# find the two-gram that appears the most\nfor i in two_grams:\n    if i[1] == max_count:\n        print(i[0])\n        break"
}
2022-04-19 22:11:54.426293 REASON stop
