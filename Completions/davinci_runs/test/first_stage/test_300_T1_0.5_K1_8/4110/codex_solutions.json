["\n\ndef main():\n    d, g = map(int, input().split())\n    p, c = [], []\n    for _ in range(d):\n        p_i, c_i = map(int, input().split())\n        p.append(p_i)\n        c.append(c_i)\n    ans = float('inf')\n    for i in range(2 ** d):\n        score = 0\n        cnt = 0\n        for j in range(d):\n            if ((i >> j) & 1):\n                score += 100 * (j + 1) * p[j] + c[j]\n                cnt += p[j]\n        for j in range(d - 1, -1, -1):\n            if (score >= g):\n                ans = min(ans, cnt)\n                break\n            if not ((i >> j) & 1):\n                for k in range(p[j]):\n                    score += 100 * (j + 1)\n                    cnt += 1\n                    if (score >= g):\n                        ans = min(ans, cnt)\n                        break\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nd, g = map(int, input().split())\n\nproblem = []\n\nfor i in range(d):\n    p, c = map(int, input().split())\n    problem.append([p, c])\n\nproblem = sorted(problem, key=lambda x: -x[0])\n\nans = 0\n\nfor i in range(d):\n    p, c = problem[i]\n    if (g - c) // (100 * (i + 1)) < p:\n        ans += (g - c) // (100 * (i + 1))\n        g -= (g - c) // (100 * (i + 1)) * (100 * (i + 1))\n    else:\n        ans += p\n        g -= p * (100 * (i + 1)) + c\n\nprint(ans)", "\n\nimport sys\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse input\n    D, G = map(int, lines[0].split())\n    p_c = [list(map(int, line.split())) for line in lines[1:]]\n\n    # Solve\n    print(solve(D, G, p_c))\n\ndef solve(D, G, p_c):\n    # Number of problems to solve\n    num_problems = 0\n\n    # Current total score\n    total_score = 0\n\n    # Solve all problems with the highest score\n    max_score = 100 * D\n    max_score_idx = D\n    while total_score < G and max_score_idx > 0:\n        num_problems += p_c[max_score_idx - 1][0]\n        total_score += max_score * p_c[max_score_idx - 1][0]\n        max_score_idx -= 1\n\n    # Solve problems with the second highest score, if necessary\n    if total_score < G:\n        # Calculate how many problems must be solved in order to reach G points\n        num_problems_needed = (G - total_score) // 100 + 1\n        num_problems += min(num_problems_needed, p_c[max_score_idx][0])\n        total_score += min(num_problems_needed, p_c[max_score_idx][0]) * 100\n\n    # Add perfect bonus, if necessary\n    if total_score < G:\n        total_score += p_c[max_score_idx][1]\n\n    return num_problems\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    D, G = map(int, sys.stdin.readline().split())\n    problems = []\n    for i in range(D):\n        problems.append(list(map(int, sys.stdin.readline().split())))\n    problems.reverse()\n    ans = 0\n    now = 0\n    while True:\n        if now >= G:\n            break\n        if problems[0][0] != 0:\n            problems[0][0] -= 1\n            now += problems[0][1] + 100 * (D - len(problems) + 1)\n            ans += 1\n        else:\n            problems.pop(0)\n    for i in range(len(problems)):\n        if problems[i][0] == 0:\n            continue\n        if now < G:\n            if (G - now) % (100 * (D - i)) == 0:\n                ans += (G - now) // (100 * (D - i))\n                now = G\n            elif (G - now) <= ((100 * (D - i)) * problems[i][0]):\n                ans += (G - now) // (100 * (D - i)) + 1\n                now = G\n        else:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    D, G = map(int, sys.stdin.readline().split())\n    p_c_list = []\n    for i in range(D):\n        p, c = map(int, sys.stdin.readline().split())\n        p_c_list.append([p, c])\n    p_c_list.reverse()\n    result = 0\n    total_score = 0\n    while total_score < G:\n        if len(p_c_list) == 0:\n            result += 1\n            total_score += 100 * (D + 1)\n        else:\n            p, c = p_c_list.pop()\n            if total_score + p * 100 * (D + 1) + c >= G:\n                result += (G - total_score - 1) // (100 * (D + 1)) + 1\n                total_score = G\n            else:\n                result += p\n                total_score += p * 100 * (D + 1) + c\n    print(result)\n\nmain()", "\n\n#===main===\nd, g = map(int, input().split())\np = []\nc = []\nfor i in range(d):\n    pi, ci = map(int, input().split())\n    p.append(pi)\n    c.append(ci)\n\n# \u5168\u3066\u306e\u30b3\u30fc\u30b9\u3092\u521d\u671f\u5316\ncourse = []\nfor i in range(d):\n    course.append([i+1, p[i], c[i]])\n\n# \u5168\u3066\u306e\u30b3\u30fc\u30b9\u3067\u554f\u984c\u3092\u89e3\u3044\u305f\u5834\u5408\u306e\u6e80\u70b9\u30fb\u5408\u8a08\u70b9\u6570\nfull_score = 0\nfull_total = 0\nfor i in range(d):\n    full_score += course[i][1] * course[i][0] * 100\n    full_total += course[i][1] * course[i][0] * 100 + course[i][2]\n\n# \u5168\u3066\u306e\u30b3\u30fc\u30b9\u3067\u554f\u984c\u3092\u89e3\u3044\u305f\u5834\u5408\u306e\u6e80\u70b9\u30fb\u5408\u8a08\u70b9\u6570\u304c\u76ee\u6a19\u5024\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u5168\u3066\u89e3\u304f\nif full_total >= g:\n    print(full_score)\n    exit()\n\n# \u5168\u3066\u306e\u30b3\u30fc\u30b9\u3067\u554f\u984c\u3092\u89e3\u3044\u305f\u5834\u5408\u306e\u6e80\u70b9\u30fb\u5408\u8a08\u70b9\u6570\u304c\u76ee\u6a19\u5024\u672a\u6e80\u3067\u3042\u308b\u5834\u5408\n# \u5168\u3066\u306e\u30b3\u30fc\u30b9\u3092\u89e3\u3044\u305f\u5f8c\u3001\u76ee\u6a19\u5024\u306b\u8fd1\u3044\u30b3\u30fc\u30b9\u304b\u3089\u5fc5\u8981\u306a\u554f\u984c\u6570\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\nelse:\n    # \u5168\u3066\u306e\u30b3\u30fc\u30b9\u3092\u89e3\u304f\n    ans = full_score\n\n    # \u30b3\u30fc\u30b9\u3092\u964d\u9806\u306b\u30bd\u30fc\u30c8\n    course.sort(key=lambda x: x[2], reverse=True)\n\n    # \u76ee\u6a19\u5024\u306b\u8fd1\u3044\u30b3\u30fc\u30b9\u304b\u3089\u5fc5\u8981\u306a\u554f\u984c\u6570\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\n    for i in range(d):\n        # \u76ee\u6a19\u5024\u3092\u8d85\u3048\u308b\u5834\u5408\u306f\u7d42\u4e86\n        if ans >= g:\n            break\n        # \u76ee\u6a19\u5024\u306b\u8fd1\u3044\u30b3\u30fc\u30b9\u304b\u3089\u5fc5\u8981\u306a\u554f\u984c\u6570\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\n        else:\n            # \u5b8c\u5168\u30dc\u30fc\u30ca\u30b9\u3092\u8d85\u3048\u308b\u5834\u5408\u306f\u30dc\u30fc\u30ca\u30b9\u5206\u3092\u52a0\u7b97\u3057\u3001\u6b8b\u308a\u306f\u30b3\u30fc\u30b9\u5358\u4f4d\u3067\u52a0\u7b97\n            if ans + course[i][2] >= g:\n                ans += g - ans\n            # \u5b8c\u5168\u30dc\u30fc\u30ca\u30b9\u3092\u8d85\u3048\u306a\u3044\u5834\u5408\u306f\u5b8c\u5168\u30dc\u30fc\u30ca\u30b9\u5206\u3092\u52a0\u7b97\u3057\u3001\u6b8b\u308a\u306f\u30b3\u30fc\u30b9\u5358\u4f4d\u3067\u52a0\u7b97\n            else:\n                ans += course[i][2]\n                # \u30b3\u30fc\u30b9\u5358\u4f4d\u3067\u52a0\u7b97\n                for j in range(course[i][1]):\n                    # \u76ee\u6a19\u5024\u3092\u8d85\u3048\u308b\u5834\u5408\u306f\u7d42\u4e86\n                    if ans >= g:\n                        break\n                    # \u76ee\u6a19\u5024\u306b\u8fd1\u3044\u30b3\u30fc\u30b9\u304b\u3089\u5fc5\u8981\u306a\u554f\u984c\u6570\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\n                    else:\n                        ans += course[i][0] * 100\n\n    # \u5fc5\u8981\u306a\u554f\u984c\u6570\u3092\u51fa\u529b\n    print(ans)", "\n\ndef main():\n    d, g = (int(i) for i in input().split())\n    p, c = [], []\n    for _ in range(d):\n        p_i, c_i = (int(i) for i in input().split())\n        p.append(p_i)\n        c.append(c_i)\n    ans = solve(d, g, p, c)\n    print(ans)\n\n\ndef solve(d, g, p, c):\n    ans = float('inf')\n    for i in range(2**d):\n        total_score, num_problems, rest_problems = 0, 0, []\n        for j in range(d):\n            if ((i >> j) & 1):\n                total_score += (j+1)*100*p[j] + c[j]\n                num_problems += p[j]\n            else:\n                rest_problems.append(j)\n        if total_score < g:\n            for j in reversed(rest_problems):\n                need_problems = math.ceil((g-total_score)/((j+1)*100))\n                if need_problems >= p[j]:\n                    need_problems = p[j]\n                total_score += need_problems*(j+1)*100\n                num_problems += need_problems\n                if total_score >= g:\n                    break\n        ans = min(ans, num_problems)\n    return ans\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, g = map(int, input().split())\n    problems = []\n    for _ in range(n):\n        p, c = map(int, input().split())\n        problems.append((p, c))\n    # print(problems)\n\n    # solve\n    problems.reverse()\n    solved = 0\n    for p, c in problems:\n        if g <= 0:\n            break\n        if c > g:\n            continue\n        solved += g // c\n        g -= (g // c) * c\n    print(solved)\n\nif __name__ == '__main__':\n    main()"]