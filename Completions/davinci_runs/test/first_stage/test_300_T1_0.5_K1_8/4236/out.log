2022-04-19 23:15:52.099133 """
You are given a set of $n$ segments on the axis $Ox$, each segment has integer endpoints between $1$ and $m$ inclusive. Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers $l_i$ and $r_i$ ($1 \le l_i \le r_i \le m$) — coordinates of the left and of the right endpoints. 

Consider all integer points between $1$ and $m$ inclusive. Your task is to print all such points that don't belong to any segment. The point $x$ belongs to the segment $[l; r]$ if and only if $l \le x \le r$.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n, m \le 100$) — the number of segments and the upper bound for coordinates.

The next $n$ lines contain two integers each $l_i$ and $r_i$ ($1 \le l_i \le r_i \le m$) — the endpoints of the $i$-th segment. Segments may intersect, overlap or even coincide with each other. Note, it is possible that $l_i=r_i$, i.e. a segment can degenerate to a point.


-----Output-----

In the first line print one integer $k$ — the number of points that don't belong to any segment.

In the second line print exactly $k$ integers in any order — the points that don't belong to any segment. All points you print should be distinct.

If there are no such points at all, print a single integer $0$ in the first line and either leave the second line empty or do not print it at all.


-----Examples-----
Input
3 5
2 2
1 2
5 5

Output
2
3 4 

Input
1 7
1 7

Output
0




-----Note-----

In the first example the point $1$ belongs to the second segment, the point $2$ belongs to the first and the second segments and the point $5$ belongs to the third segment. The points $3$ and $4$ do not belong to any segment.

In the second example all the points from $1$ to $7$ belong to the first segment.
"""
2022-04-19 23:15:52.099158 --------------------------
2022-04-19 23:15:52.099284 using api key gabby
2022-04-19 23:16:06.479254 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\n\npoints = [1] * (m+1)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    for j in range(l, r+1):\n        points[j] = 0\n\nprint(sum(points))\nfor i in range(len(points)):\n    if points[i]:\n        print(i, end=' ')\nprint()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n\n    # Get the input\n    n, m = map(int, input().split())\n    segments = []\n    for i in range(n):\n        segments.append(tuple(map(int, input().split())))\n\n    # Convert the segments to a set of numbers\n    numbers = set()\n    for segment in segments:\n        for i in range(segment[0], segment[1] + 1):\n            numbers.add(i)\n\n    # Get the numbers that aren't in the set\n    numbers = list(set(range(1, m + 1)) - numbers)\n    numbers.sort()\n\n    # Print the output\n    print(len(numbers))\n    print(\" \".join(map(str, numbers)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\nn, m = map(int, input().split())\na = [0] * (m+1)\nfor i in range(n):\n    l, r = map(int, input().split())\n    for j in range(l, r+1):\n        a[j] = 1\n\nprint(m - sum(a))\nfor i in range(1, m+1):\n    if a[i] == 0:\n        print(i, end=' ')"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\nn, m = [int(i) for i in input().split()]\n\nnums = [False for i in range(m + 1)]\n\nfor i in range(n):\n    l, r = [int(i) for i in input().split()]\n    for j in range(l, r + 1):\n        nums[j] = True\n\nc = 0\n\nfor i in range(1, m + 1):\n    if not nums[i]:\n        c += 1\n\nprint(c)\n\nfor i in range(1, m + 1):\n    if not nums[i]:\n        print(i, end=\" \")"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    # n, m = 100, 100\n    segments = []\n    for i in range(n):\n        # l, r = map(int, input().split())\n        l, r = 1, 7\n        segments.append((l, r))\n\n    # print(segments)\n    points = []\n    for i in range(1, m+1):\n        for segment in segments:\n            if i >= segment[0] and i <= segment[1]:\n                break\n        else:\n            points.append(i)\n\n    print(len(points))\n    print(' '.join(map(str, points)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\ndef get_input():\n    n, m = map(int, input().split())\n    lr = [list(map(int, input().split())) for _ in range(n)]\n    return n, m, lr\n\n\ndef get_points(n, m, lr):\n    points = set(range(m+1))\n    for l, r in lr:\n        points -= set(range(l, r+1))\n    return points\n\n\ndef print_points(points):\n    print(len(points))\n    print(*sorted(points))\n\n\ndef main():\n    n, m, lr = get_input()\n    points = get_points(n, m, lr)\n    print_points(points)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in input().split()])\n    #print(segments)\n    points = []\n    for i in range(1,m+1):\n        for j in range(n):\n            if i in range(segments[j][0], segments[j][1]+1):\n                break\n            if j == n-1:\n                points.append(i)\n    print(len(points))\n    print(*points)\n    return 0\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# SOLUTION\nn, m = [int(i) for i in input().split()]\n\nsegments = []\nfor i in range(n):\n    l, r = [int(i) for i in input().split()]\n    segments.append([l, r])\n\nsegments.sort(key=lambda x: x[0])\n\n# print(segments)\n\nresult = []\nfor i in range(m):\n    for j in range(len(segments)):\n        if i + 1 >= segments[j][0] and i + 1 <= segments[j][1]:\n            break\n        elif j == len(segments) - 1:\n            result.append(i + 1)\n\nprint(len(result))\nprint(*result)"
    }
  ],
  "created": 1650410152,
  "id": "cmpl-4yrMWwrGcjhCb1mumDZu3kzIsb9Fl",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 23:16:06.479599 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\n\npoints = [1] * (m+1)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    for j in range(l, r+1):\n        points[j] = 0\n\nprint(sum(points))\nfor i in range(len(points)):\n    if points[i]:\n        print(i, end=' ')\nprint()"
}
2022-04-19 23:16:06.479636 REASON stop
2022-04-19 23:16:06.482114 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n\n    # Get the input\n    n, m = map(int, input().split())\n    segments = []\n    for i in range(n):\n        segments.append(tuple(map(int, input().split())))\n\n    # Convert the segments to a set of numbers\n    numbers = set()\n    for segment in segments:\n        for i in range(segment[0], segment[1] + 1):\n            numbers.add(i)\n\n    # Get the numbers that aren't in the set\n    numbers = list(set(range(1, m + 1)) - numbers)\n    numbers.sort()\n\n    # Print the output\n    print(len(numbers))\n    print(\" \".join(map(str, numbers)))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 23:16:06.482208 REASON stop
2022-04-19 23:16:06.482662 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\nn, m = map(int, input().split())\na = [0] * (m+1)\nfor i in range(n):\n    l, r = map(int, input().split())\n    for j in range(l, r+1):\n        a[j] = 1\n\nprint(m - sum(a))\nfor i in range(1, m+1):\n    if a[i] == 0:\n        print(i, end=' ')"
}
2022-04-19 23:16:06.482780 REASON stop
2022-04-19 23:16:06.507949 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\nn, m = [int(i) for i in input().split()]\n\nnums = [False for i in range(m + 1)]\n\nfor i in range(n):\n    l, r = [int(i) for i in input().split()]\n    for j in range(l, r + 1):\n        nums[j] = True\n\nc = 0\n\nfor i in range(1, m + 1):\n    if not nums[i]:\n        c += 1\n\nprint(c)\n\nfor i in range(1, m + 1):\n    if not nums[i]:\n        print(i, end=\" \")"
}
2022-04-19 23:16:06.508070 REASON stop
2022-04-19 23:16:06.508882 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    # n, m = 100, 100\n    segments = []\n    for i in range(n):\n        # l, r = map(int, input().split())\n        l, r = 1, 7\n        segments.append((l, r))\n\n    # print(segments)\n    points = []\n    for i in range(1, m+1):\n        for segment in segments:\n            if i >= segment[0] and i <= segment[1]:\n                break\n        else:\n            points.append(i)\n\n    print(len(points))\n    print(' '.join(map(str, points)))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:16:06.508963 REASON stop
2022-04-19 23:16:06.509772 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\ndef get_input():\n    n, m = map(int, input().split())\n    lr = [list(map(int, input().split())) for _ in range(n)]\n    return n, m, lr\n\n\ndef get_points(n, m, lr):\n    points = set(range(m+1))\n    for l, r in lr:\n        points -= set(range(l, r+1))\n    return points\n\n\ndef print_points(points):\n    print(len(points))\n    print(*sorted(points))\n\n\ndef main():\n    n, m, lr = get_input()\n    points = get_points(n, m, lr)\n    print_points(points)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 23:16:06.509843 REASON stop
2022-04-19 23:16:06.510796 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in input().split()])\n    #print(segments)\n    points = []\n    for i in range(1,m+1):\n        for j in range(n):\n            if i in range(segments[j][0], segments[j][1]+1):\n                break\n            if j == n-1:\n                points.append(i)\n    print(len(points))\n    print(*points)\n    return 0\n\nmain()"
}
2022-04-19 23:16:06.510857 REASON stop
2022-04-19 23:16:06.511705 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# SOLUTION\nn, m = [int(i) for i in input().split()]\n\nsegments = []\nfor i in range(n):\n    l, r = [int(i) for i in input().split()]\n    segments.append([l, r])\n\nsegments.sort(key=lambda x: x[0])\n\n# print(segments)\n\nresult = []\nfor i in range(m):\n    for j in range(len(segments)):\n        if i + 1 >= segments[j][0] and i + 1 <= segments[j][1]:\n            break\n        elif j == len(segments) - 1:\n            result.append(i + 1)\n\nprint(len(result))\nprint(*result)"
}
2022-04-19 23:16:06.511903 REASON stop
