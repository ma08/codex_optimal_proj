["\n\n# Solution\n\nN = int(input())\nA = [int(x) for x in input().split()]\n\nA.sort()\n\nres = 1\ncur = A[0]\n\nfor i in range(1, N):\n    if A[i] != cur:\n        res += 1\n    cur = A[i]\n\nprint(res)", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]].append(i)\n        else:\n            d[a[i]] = [i]\n    m = {}\n    for i in range(n):\n        if a[i] not in m:\n            m[a[i]] = 0\n        if a[i]-1 in m:\n            m[a[i]] = max(m[a[i]], m[a[i]-1]+1)\n        if a[i]+1 in m:\n            m[a[i]] = max(m[a[i]], m[a[i]+1]+1)\n        if a[i] in d and len(d[a[i]]) > 1:\n            m[a[i]] = max(m[a[i]], m[a[i]]+1)\n    print(max(m.values()))\n\nif __name__ == '__main__':\n    main()", "\n\n# SOLUTION\n# This problem can be solved using a greedy algorithm.\n# We sort the array of weights and then we iterate through the array.\n# If the next weight is different from the previous one, we add it to the team.\n# If the next weight is the same as the previous one, we check if we can change it,\n# and if it is possible, we add it to the team.\n\n# We use a set to check if the weight already exists.\n\n# We use a variable to store the previous weight.\n\n# We use a variable to store the number of boxers in the team.\n\n# We sort the array of weights.\n\n# We iterate through the array of weights.\n\n# If the current weight is different from the previous weight, we add it to the team.\n\n# If the current weight is the same as the previous weight, we check if we can change it.\n\n# If we can change the current weight, we add it to the team.\n\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\ns = set()\n\nprev = -1\nans = 0\n\nfor i in a:\n    if i != prev:\n        ans += 1\n        s.add(i)\n    elif i - 1 not in s:\n        ans += 1\n        s.add(i - 1)\n    prev = i\n\nprint(ans)", "\n\ndef main():\n    n = int(input())\n    ai = list(map(int, input().split()))\n    weights = set()\n    for i in range(n):\n        if ai[i] - 1 in weights:\n            weights.add(ai[i] - 1)\n        elif ai[i] + 1 in weights:\n            weights.add(ai[i] + 1)\n        else:\n            weights.add(ai[i])\n    print(len(weights))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef solve(n, a):\n    \"\"\"\n    >>> solve(4, [3, 2, 4, 1])\n    4\n    >>> solve(6, [1, 1, 1, 4, 4, 4])\n    5\n    >>> solve(5, [1, 2, 3, 4, 5])\n    5\n    >>> solve(5, [5, 4, 3, 2, 1])\n    5\n    >>> solve(5, [1, 1, 2, 2, 2])\n    4\n    >>> solve(5, [1, 2, 3, 4, 3])\n    4\n    \"\"\"\n    a_set = set(a)\n    a_set_size = len(a_set)\n    if a_set_size == n:\n        return n\n    min_a = min(a_set)\n    max_a = max(a_set)\n    if max_a - min_a + 1 == a_set_size:\n        return a_set_size\n    else:\n        return a_set_size + 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))", "\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nd = {}\nfor i in range(n):\n    if a[i] in d:\n        d[a[i]] += 1\n    else:\n        d[a[i]] = 1\n\nans = 0\nfor i in range(n):\n    if d[a[i]] > 1:\n        d[a[i]] -= 1\n        continue\n    ans += 1\n    if a[i] + 1 in d:\n        d[a[i] + 1] -= 1\n    if a[i] - 1 in d:\n        d[a[i] - 1] -= 1\n\nprint(ans)", "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n#\n# def solve(n, a):\n#     a_set = set()\n#     count = 0\n#     max_count = 0\n#     for i in range(n):\n#         if a[i] in a_set:\n#             a_set.remove(a[i])\n#             count -= 1\n#         else:\n#             a_set.add(a[i])\n#             count += 1\n#\n#         if a[i] + 1 in a_set:\n#             a_set.remove(a[i] + 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] + 1)\n#             count += 1\n#\n#         if a[i] - 1 in a_set:\n#             a_set.remove(a[i] - 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] - 1)\n#             count += 1\n#\n#         if count > max_count:\n#             max_count = count\n#     return max_count\n#\n#\n# print(solve(n, a))\n\n# def solve(n, a):\n#     a_set = set()\n#     count = 0\n#     max_count = 0\n#     for i in range(n):\n#         if a[i] in a_set:\n#             a_set.remove(a[i])\n#             count -= 1\n#         else:\n#             a_set.add(a[i])\n#             count += 1\n#\n#         if a[i] + 1 in a_set:\n#             a_set.remove(a[i] + 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] + 1)\n#             count += 1\n#\n#         if a[i] - 1 in a_set:\n#             a_set.remove(a[i] - 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] - 1)\n#             count += 1\n#\n#         if count > max_count:\n#             max_count = count\n#     return max_count\n#\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n# print(solve(n, a))\n\n\ndef solve(n, a):\n    a_set = set()\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if a[i] in a_set:\n            a_set.remove(a[i])\n            count -= 1\n        else:\n            a_set.add(a[i])\n            count += 1\n\n        if a[i] + 1 in a_set:\n            a_set.remove(a[i] + 1)\n            count -= 1\n        else:\n            a_set.add(a[i] + 1)\n            count += 1\n\n        if a[i] - 1 in a_set:\n            a_set.remove(a[i] - 1)\n            count -= 1\n        else:\n            a_set.add(a[i] - 1)\n            count += 1\n\n        if count > max_count:\n            max_count = count\n    return max_count\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n\n    ans = 0\n    for i in range(1, 150001):\n        if i in d:\n            ans += 1\n        if i - 1 in d:\n            d[i - 1] -= d[i]\n            if d[i - 1] == 0:\n                del d[i - 1]\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"]