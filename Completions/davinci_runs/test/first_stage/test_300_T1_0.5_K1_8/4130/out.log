2022-04-19 22:14:14.539121 """
There are $n$ boxers, the weight of the $i$-th boxer is $a_i$. Each of them can change the weight by no more than $1$ before the competition (the weight cannot become equal to zero, that is, it must remain positive). Weight is always an integer number.

It is necessary to choose the largest boxing team in terms of the number of people, that all the boxers' weights in the team are different (i.e. unique).

Write a program that for given current values ​$a_i$ will find the maximum possible number of boxers in a team.

It is possible that after some change the weight of some boxer is $150001$ (but no more).


-----Input-----

The first line contains an integer $n$ ($1 \le n \le 150000$) — the number of boxers. The next line contains $n$ integers $a_1, a_2, \dots, a_n$, where $a_i$ ($1 \le a_i \le 150000$) is the weight of the $i$-th boxer.


-----Output-----

Print a single integer — the maximum possible number of people in a team.


-----Examples-----
Input
4
3 2 4 1

Output
4

Input
6
1 1 1 4 4 4

Output
5



-----Note-----

In the first example, boxers should not change their weights — you can just make a team out of all of them.

In the second example, one boxer with a weight of $1$ can be increased by one (get the weight of $2$), one boxer with a weight of $4$ can be reduced by one, and the other can be increased by one (resulting the boxers with a weight of $3$ and $5$, respectively). Thus, you can get a team consisting of boxers with weights of $5, 4, 3, 2, 1$.
"""
2022-04-19 22:14:14.539140 --------------------------
2022-04-19 22:14:14.539248 using api key sourya
2022-04-19 22:14:55.283035 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n#\n# def solve(n, a):\n#     a_set = set()\n#     count = 0\n#     max_count = 0\n#     for i in range(n):\n#         if a[i] in a_set:\n#             a_set.remove(a[i])\n#             count -= 1\n#         else:\n#             a_set.add(a[i])\n#             count += 1\n#\n#         if a[i] + 1 in a_set:\n#             a_set.remove(a[i] + 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] + 1)\n#             count += 1\n#\n#         if a[i] - 1 in a_set:\n#             a_set.remove(a[i] - 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] - 1)\n#             count += 1\n#\n#         if count > max_count:\n#             max_count = count\n#     return max_count\n#\n#\n# print(solve(n, a))\n\n# def solve(n, a):\n#     a_set = set()\n#     count = 0\n#     max_count = 0\n#     for i in range(n):\n#         if a[i] in a_set:\n#             a_set.remove(a[i])\n#             count -= 1\n#         else:\n#             a_set.add(a[i])\n#             count += 1\n#\n#         if a[i] + 1 in a_set:\n#             a_set.remove(a[i] + 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] + 1)\n#             count += 1\n#\n#         if a[i] - 1 in a_set:\n#             a_set.remove(a[i] - 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] - 1)\n#             count += 1\n#\n#         if count > max_count:\n#             max_count = count\n#     return max_count\n#\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n# print(solve(n, a))\n\n\ndef solve(n, a):\n    a_set = set()\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if a[i] in a_set:\n            a_set.remove(a[i])\n            count -= 1\n        else:\n            a_set.add(a[i])\n            count += 1\n\n        if a[i] + 1 in a_set:\n            a_set.remove(a[i] + 1)\n            count -= 1\n        else:\n            a_set.add(a[i] + 1)\n            count += 1\n\n        if a[i] - 1 in a_set:\n            a_set.remove(a[i] - 1)\n            count -= 1\n        else:\n            a_set.add(a[i] - 1)\n            count += 1\n\n        if count > max_count:\n            max_count = count\n    return max_count\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]].append(i)\n        else:\n            d[a[i]] = [i]\n    m = {}\n    for i in range(n):\n        if a[i] not in m:\n            m[a[i]] = 0\n        if a[i]-1 in m:\n            m[a[i]] = max(m[a[i]], m[a[i]-1]+1)\n        if a[i]+1 in m:\n            m[a[i]] = max(m[a[i]], m[a[i]+1]+1)\n        if a[i] in d and len(d[a[i]]) > 1:\n            m[a[i]] = max(m[a[i]], m[a[i]]+1)\n    print(max(m.values()))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# Solution\n\nN = int(input())\nA = [int(x) for x in input().split()]\n\nA.sort()\n\nres = 1\ncur = A[0]\n\nfor i in range(1, N):\n    if A[i] != cur:\n        res += 1\n    cur = A[i]\n\nprint(res)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n\n    ans = 0\n    for i in range(1, 150001):\n        if i in d:\n            ans += 1\n        if i - 1 in d:\n            d[i - 1] -= d[i]\n            if d[i - 1] == 0:\n                del d[i - 1]\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nd = {}\nfor i in range(n):\n    if a[i] in d:\n        d[a[i]] += 1\n    else:\n        d[a[i]] = 1\n\nans = 0\nfor i in range(n):\n    if d[a[i]] > 1:\n        d[a[i]] -= 1\n        continue\n    ans += 1\n    if a[i] + 1 in d:\n        d[a[i] + 1] -= 1\n    if a[i] - 1 in d:\n        d[a[i] - 1] -= 1\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# This problem can be solved using a greedy algorithm.\n# We sort the array of weights and then we iterate through the array.\n# If the next weight is different from the previous one, we add it to the team.\n# If the next weight is the same as the previous one, we check if we can change it,\n# and if it is possible, we add it to the team.\n\n# We use a set to check if the weight already exists.\n\n# We use a variable to store the previous weight.\n\n# We use a variable to store the number of boxers in the team.\n\n# We sort the array of weights.\n\n# We iterate through the array of weights.\n\n# If the current weight is different from the previous weight, we add it to the team.\n\n# If the current weight is the same as the previous weight, we check if we can change it.\n\n# If we can change the current weight, we add it to the team.\n\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\ns = set()\n\nprev = -1\nans = 0\n\nfor i in a:\n    if i != prev:\n        ans += 1\n        s.add(i)\n    elif i - 1 not in s:\n        ans += 1\n        s.add(i - 1)\n    prev = i\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef solve(n, a):\n    \"\"\"\n    >>> solve(4, [3, 2, 4, 1])\n    4\n    >>> solve(6, [1, 1, 1, 4, 4, 4])\n    5\n    >>> solve(5, [1, 2, 3, 4, 5])\n    5\n    >>> solve(5, [5, 4, 3, 2, 1])\n    5\n    >>> solve(5, [1, 1, 2, 2, 2])\n    4\n    >>> solve(5, [1, 2, 3, 4, 3])\n    4\n    \"\"\"\n    a_set = set(a)\n    a_set_size = len(a_set)\n    if a_set_size == n:\n        return n\n    min_a = min(a_set)\n    max_a = max(a_set)\n    if max_a - min_a + 1 == a_set_size:\n        return a_set_size\n    else:\n        return a_set_size + 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    ai = list(map(int, input().split()))\n    weights = set()\n    for i in range(n):\n        if ai[i] - 1 in weights:\n            weights.add(ai[i] - 1)\n        elif ai[i] + 1 in weights:\n            weights.add(ai[i] + 1)\n        else:\n            weights.add(ai[i])\n    print(len(weights))\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650406454,
  "id": "cmpl-4yqOs5nSzfZ2ySv1m9C02vBHJxHJs",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:14:55.283459 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n#\n# def solve(n, a):\n#     a_set = set()\n#     count = 0\n#     max_count = 0\n#     for i in range(n):\n#         if a[i] in a_set:\n#             a_set.remove(a[i])\n#             count -= 1\n#         else:\n#             a_set.add(a[i])\n#             count += 1\n#\n#         if a[i] + 1 in a_set:\n#             a_set.remove(a[i] + 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] + 1)\n#             count += 1\n#\n#         if a[i] - 1 in a_set:\n#             a_set.remove(a[i] - 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] - 1)\n#             count += 1\n#\n#         if count > max_count:\n#             max_count = count\n#     return max_count\n#\n#\n# print(solve(n, a))\n\n# def solve(n, a):\n#     a_set = set()\n#     count = 0\n#     max_count = 0\n#     for i in range(n):\n#         if a[i] in a_set:\n#             a_set.remove(a[i])\n#             count -= 1\n#         else:\n#             a_set.add(a[i])\n#             count += 1\n#\n#         if a[i] + 1 in a_set:\n#             a_set.remove(a[i] + 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] + 1)\n#             count += 1\n#\n#         if a[i] - 1 in a_set:\n#             a_set.remove(a[i] - 1)\n#             count -= 1\n#         else:\n#             a_set.add(a[i] - 1)\n#             count += 1\n#\n#         if count > max_count:\n#             max_count = count\n#     return max_count\n#\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n# print(solve(n, a))\n\n\ndef solve(n, a):\n    a_set = set()\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if a[i] in a_set:\n            a_set.remove(a[i])\n            count -= 1\n        else:\n            a_set.add(a[i])\n            count += 1\n\n        if a[i] + 1 in a_set:\n            a_set.remove(a[i] + 1)\n            count -= 1\n        else:\n            a_set.add(a[i] + 1)\n            count += 1\n\n        if a[i] - 1 in a_set:\n            a_set.remove(a[i] - 1)\n            count -= 1\n        else:\n            a_set.add(a[i] - 1)\n            count += 1\n\n        if count > max_count:\n            max_count = count\n    return max_count\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))"
}
2022-04-19 22:14:55.283525 REASON stop
2022-04-19 22:14:55.284148 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]].append(i)\n        else:\n            d[a[i]] = [i]\n    m = {}\n    for i in range(n):\n        if a[i] not in m:\n            m[a[i]] = 0\n        if a[i]-1 in m:\n            m[a[i]] = max(m[a[i]], m[a[i]-1]+1)\n        if a[i]+1 in m:\n            m[a[i]] = max(m[a[i]], m[a[i]+1]+1)\n        if a[i] in d and len(d[a[i]]) > 1:\n            m[a[i]] = max(m[a[i]], m[a[i]]+1)\n    print(max(m.values()))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:14:55.284221 REASON stop
2022-04-19 22:14:55.284631 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# Solution\n\nN = int(input())\nA = [int(x) for x in input().split()]\n\nA.sort()\n\nres = 1\ncur = A[0]\n\nfor i in range(1, N):\n    if A[i] != cur:\n        res += 1\n    cur = A[i]\n\nprint(res)"
}
2022-04-19 22:14:55.284693 REASON stop
2022-04-19 22:14:55.304659 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n\n    ans = 0\n    for i in range(1, 150001):\n        if i in d:\n            ans += 1\n        if i - 1 in d:\n            d[i - 1] -= d[i]\n            if d[i - 1] == 0:\n                del d[i - 1]\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:14:55.304827 REASON stop
2022-04-19 22:14:55.327561 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nd = {}\nfor i in range(n):\n    if a[i] in d:\n        d[a[i]] += 1\n    else:\n        d[a[i]] = 1\n\nans = 0\nfor i in range(n):\n    if d[a[i]] > 1:\n        d[a[i]] -= 1\n        continue\n    ans += 1\n    if a[i] + 1 in d:\n        d[a[i] + 1] -= 1\n    if a[i] - 1 in d:\n        d[a[i] - 1] -= 1\n\nprint(ans)"
}
2022-04-19 22:14:55.327698 REASON stop
2022-04-19 22:14:55.329076 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# This problem can be solved using a greedy algorithm.\n# We sort the array of weights and then we iterate through the array.\n# If the next weight is different from the previous one, we add it to the team.\n# If the next weight is the same as the previous one, we check if we can change it,\n# and if it is possible, we add it to the team.\n\n# We use a set to check if the weight already exists.\n\n# We use a variable to store the previous weight.\n\n# We use a variable to store the number of boxers in the team.\n\n# We sort the array of weights.\n\n# We iterate through the array of weights.\n\n# If the current weight is different from the previous weight, we add it to the team.\n\n# If the current weight is the same as the previous weight, we check if we can change it.\n\n# If we can change the current weight, we add it to the team.\n\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\ns = set()\n\nprev = -1\nans = 0\n\nfor i in a:\n    if i != prev:\n        ans += 1\n        s.add(i)\n    elif i - 1 not in s:\n        ans += 1\n        s.add(i - 1)\n    prev = i\n\nprint(ans)"
}
2022-04-19 22:14:55.329208 REASON stop
2022-04-19 22:14:55.330094 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef solve(n, a):\n    \"\"\"\n    >>> solve(4, [3, 2, 4, 1])\n    4\n    >>> solve(6, [1, 1, 1, 4, 4, 4])\n    5\n    >>> solve(5, [1, 2, 3, 4, 5])\n    5\n    >>> solve(5, [5, 4, 3, 2, 1])\n    5\n    >>> solve(5, [1, 1, 2, 2, 2])\n    4\n    >>> solve(5, [1, 2, 3, 4, 3])\n    4\n    \"\"\"\n    a_set = set(a)\n    a_set_size = len(a_set)\n    if a_set_size == n:\n        return n\n    min_a = min(a_set)\n    max_a = max(a_set)\n    if max_a - min_a + 1 == a_set_size:\n        return a_set_size\n    else:\n        return a_set_size + 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))"
}
2022-04-19 22:14:55.330181 REASON stop
2022-04-19 22:14:55.330941 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    ai = list(map(int, input().split()))\n    weights = set()\n    for i in range(n):\n        if ai[i] - 1 in weights:\n            weights.add(ai[i] - 1)\n        elif ai[i] + 1 in weights:\n            weights.add(ai[i] + 1)\n        else:\n            weights.add(ai[i])\n    print(len(weights))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:14:55.331135 REASON stop
