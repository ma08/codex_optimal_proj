["\n\nN = int(input())\nS = input()\n\ndef solve():\n    n0 = S.count('0')\n    n1 = S.count('1')\n    n2 = S.count('2')\n    if n0 == n1 == n2:\n        return S\n\n    n = N // 3\n    s = list(S)\n    for i in range(N):\n        if s[i] == '0':\n            if n0 > n:\n                s[i] = '2'\n                n0 -= 1\n                n2 += 1\n        elif s[i] == '1':\n            if n1 > n:\n                s[i] = '0'\n                n1 -= 1\n                n0 += 1\n        else:\n            if n2 > n:\n                s[i] = '1'\n                n2 -= 1\n                n1 += 1\n\n    return ''.join(s)\n\nprint(solve())", "\n\n#Solution\n\nn = int(input())\ns = input()\n\nassert(n%3 == 0)\n\ncnt = [0]*3\nfor i in range(n):\n    cnt[int(s[i])] += 1\n\nfor i in range(n):\n    if cnt[int(s[i])] == n//3:\n        continue\n    for j in range(3):\n        if cnt[j] < n//3:\n            s = s[:i] + str(j) + s[i+1:]\n            cnt[int(s[i])] += 1\n            cnt[j] -= 1\n            break\n\nprint(s)", "\n\n\ndef main():\n    n = int(input())\n    s = input()\n    if len(set(s)) == 1:\n        print(s[0] * n)\n    else:\n        print(s)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    assert(len(s) == n)\n    assert(all(c in '012' for c in s))\n    assert(n % 3 == 0)\n\n    zeros = s.count('0')\n    ones = s.count('1')\n    twos = s.count('2')\n    assert(zeros == ones == twos)\n\n    # Replace one '1' with a '0' if the first character is '1'.\n    if s[0] == '1':\n        s = '0' + s[1:]\n        ones -= 1\n        zeros += 1\n\n    # Replace one '2' with a '0' if the last character is '2'.\n    if s[-1] == '2':\n        s = s[:-1] + '0'\n        twos -= 1\n        zeros += 1\n\n    # Replace one '1' with a '2' if the last character is '1'.\n    if s[-1] == '1':\n        s = s[:-1] + '2'\n        ones -= 1\n        twos += 1\n\n    # Replace one '0' with a '1' if the first character is '0'.\n    if s[0] == '0':\n        s = '1' + s[1:]\n        zeros -= 1\n        ones += 1\n\n    # Replace one '0' with a '2' if the last character is '0'.\n    if s[-1] == '0':\n        s = s[:-1] + '2'\n        zeros -= 1\n        twos += 1\n\n    assert(zeros == ones == twos)\n    assert(s[0] == '0')\n    assert(s[-1] == '2')\n\n    print(s)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# noinspection PyPep8Naming\ndef solve(n, s):\n    \"\"\"\n    >>> solve(3, '121')\n    '021'\n    >>> solve(6, '000000')\n    '001122'\n    >>> solve(6, '211200')\n    '211200'\n    >>> solve(6, '120110')\n    '120120'\n    \"\"\"\n    s = list(s)\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = s.count('2')\n    if count_0 == count_1 == count_2:\n        return ''.join(s)\n    if count_0 > count_1:\n        index = s.index('0')\n        s[index] = '1'\n    else:\n        index = s.index('2')\n        s[index] = '1'\n    return ''.join(s)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    s = input()\n    print(solve(n, s))", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n\n    if n % 3 != 0:\n        print(\"n is not divisible by 3\")\n        sys.exit(1)\n\n    # Count number of characters\n    c = {'0': 0, '1': 0, '2': 0}\n    for i in range(n):\n        c[s[i]] += 1\n\n    # Replace characters to make the string balanced\n    for i in range(n):\n        if c['0'] > n//3:\n            c['0'] -= 1\n            c['2'] += 1\n            s = s[:i] + '2' + s[i+1:]\n        elif c['2'] > n//3:\n            c['2'] -= 1\n            c['0'] += 1\n            s = s[:i] + '0' + s[i+1:]\n        elif c['1'] > n//3:\n            c['1'] -= 1\n            c['2'] += 1\n            s = s[:i] + '2' + s[i+1:]\n\n    print(s)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef minimum_replacement(n, s):\n    \"\"\"\n    >>> minimum_replacement(3, '121')\n    '021'\n    >>> minimum_replacement(6, '000000')\n    '001122'\n    >>> minimum_replacement(6, '211200')\n    '211200'\n    >>> minimum_replacement(6, '120110')\n    '120120'\n    \"\"\"\n    n_zeros = 0\n    n_ones = 0\n    n_twos = 0\n    for i in s:\n        if i == '0':\n            n_zeros += 1\n        elif i == '1':\n            n_ones += 1\n        elif i == '2':\n            n_twos += 1\n    if n_zeros > n_ones:\n        for i in range(n_zeros - n_ones):\n            s = s.replace('0', '1', 1)\n    elif n_zeros < n_ones:\n        for i in range(n_ones - n_zeros):\n            s = s.replace('1', '0', 1)\n    if n_ones > n_twos:\n        for i in range(n_ones - n_twos):\n            s = s.replace('1', '2', 1)\n    elif n_ones < n_twos:\n        for i in range(n_twos - n_ones):\n            s = s.replace('2', '1', 1)\n    return s\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(minimum_replacement(n, s))"]