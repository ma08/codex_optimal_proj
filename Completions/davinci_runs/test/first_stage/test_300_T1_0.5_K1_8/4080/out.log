2022-04-19 21:43:22.316579 """
The only difference between easy and hard versions is a number of elements in the array.

You are given an array $a$ consisting of $n$ integers. The value of the $i$-th element of the array is $a_i$.

You are also given a set of $m$ segments. The $j$-th segment is $[l_j; r_j]$, where $1 \le l_j \le r_j \le n$.

You can choose some subset of the given set of segments and decrease values on each of the chosen segments by one (independently). For example, if the initial array $a = [0, 0, 0, 0, 0]$ and the given segments are $[1; 3]$ and $[2; 4]$ then you can choose both of them and the array will become $b = [-1, -2, -2, -1, 0]$.

You have to choose some subset of the given segments (each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array $a$ and obtain the array $b$ then the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ will be maximum possible.

Note that you can choose the empty set.

If there are multiple answers, you can print any.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n \le 10^5, 0 \le m \le 300$) — the length of the array $a$ and the number of segments, respectively.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^6 \le a_i \le 10^6$), where $a_i$ is the value of the $i$-th element of the array $a$.

The next $m$ lines are contain two integers each. The $j$-th of them contains two integers $l_j$ and $r_j$ ($1 \le l_j \le r_j \le n$), where $l_j$ and $r_j$ are the ends of the $j$-th segment.


-----Output-----

In the first line of the output print one integer $d$ — the maximum possible value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ if $b$ is the array obtained by applying some subset of the given segments to the array $a$.

In the second line of the output print one integer $q$ ($0 \le q \le m$) — the number of segments you apply.

In the third line print $q$ distinct integers $c_1, c_2, \dots, c_q$ in any order ($1 \le c_k \le m$) — indices of segments you apply to the array $a$ in such a way that the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ of the obtained array $b$ is maximum possible.

If there are multiple answers, you can print any.


-----Examples-----
Input
5 4
2 -2 3 1 2
1 3
4 5
2 5
1 3

Output
6
2
4 1 

Input
5 4
2 -2 3 1 4
3 5
3 4
2 4
2 5

Output
7
2
3 2 

Input
1 0
1000000

Output
0
0




-----Note-----

In the first example the obtained array $b$ will be $[0, -4, 1, 1, 2]$ so the answer is $6$.

In the second example the obtained array $b$ will be $[2, -3, 1, -1, 4]$ so the answer is $7$.

In the third example you cannot do anything so the answer is $0$.
"""
2022-04-19 21:43:22.316606 --------------------------
2022-04-19 21:43:22.316739 using api key gabby
2022-04-19 21:43:54.022520 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport os\nimport math\nfrom collections import defaultdict\n\ndef solve(n, m, a, l, r):\n    # get min and max of a\n    a_min = min(a)\n    a_max = max(a)\n    a_range = a_max - a_min\n    # get max of a[l[i]:r[i]+1]\n    max_l_r = -float('inf')\n    for i in range(m):\n        max_l_r = max(max_l_r, max(a[l[i]-1:r[i]]))\n    # compare\n    if max_l_r <= a_min:\n        return (a_range, 0)\n    else:\n        # get max of a[l[i]:r[i]+1] - a_min\n        max_l_r = -float('inf')\n        max_l_r_i = -1\n        for i in range(m):\n            tmp = max(a[l[i]-1:r[i]]) - a_min\n            if tmp > max_l_r:\n                max_l_r = tmp\n                max_l_r_i = i\n        return (a_range, 1, max_l_r_i+1)\n\ndef main():\n    # read data\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        x, y = [int(x) for x in input().split()]\n        l.append(x)\n        r.append(y)\n    # solve\n    ans = solve(n, m, a, l, r)\n    # print answer\n    print(ans[0])\n    print(ans[1])\n    for i in range(2, len(ans)):\n        print(ans[i], end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\"\"\"\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    vector<int> l(m), r(m);\n    vector<int> d(m);\n\n    for (int i = 0; i < m; ++i) {\n        cin >> l[i] >> r[i];\n        d[i] = r[i] - l[i] + 1;\n    }\n\n    int maxx = 0;\n    for (int i = 0; i < n; ++i) {\n        maxx = max(maxx, a[i]);\n    }\n\n    vector<int> f(maxx + 1);\n    for (int i = 0; i < n; ++i) {\n        ++f[a[i]];\n    }\n\n    int ans = 0;\n    for (int i = 0; i < m; ++i) {\n        if (d[i] > f[a[l[i] - 1]]) {\n            ans += d[i];\n        }\n    }\n\n    cout << ans << endl;\n    cout << m << endl;\n    for (int i = 0; i < m; ++i) {\n        cout << i + 1 << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}\n\"\"\""
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[1] - x[0], reverse=True)\n    r = max(a)\n    l = min(a)\n    for segment in segments:\n        if a[segment[0] - 1] >= a[segment[1] - 1]:\n            for i in range(segment[0] - 1, segment[1]):\n                a[i] -= 1\n            r = max(a)\n            l = min(a)\n    print(r - l)\n    print(0)\n\n\nif __name__ == '__main__':\n    sys.exit(main())"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nsegments = []\nfor i in range(m):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\n#print(a)\n#print(segments)\n\nmax_diff = 0\nmax_segments = []\n\nfor i in range(m):\n    for j in range(i+1, m):\n        #print(\"{} {}\".format(i, j))\n        new_a = list(a)\n        \n        new_a[segments[i][0]-1:segments[i][1]] = [x-1 for x in new_a[segments[i][0]-1:segments[i][1]]]\n        new_a[segments[j][0]-1:segments[j][1]] = [x-1 for x in new_a[segments[j][0]-1:segments[j][1]]]\n        \n        #print(new_a)\n        new_diff = max(new_a) - min(new_a)\n        \n        #print(new_diff)\n        if new_diff > max_diff:\n            max_diff = new_diff\n            max_segments = [i+1, j+1]\n\nprint(max_diff)\nprint(len(max_segments))\nprint(\" \".join(map(str, max_segments)))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef get_segments(a, m):\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l-1, r-1))\n    return segments\n\ndef get_max_min(a, segments):\n    max_min = 0\n    for i, j in segments:\n        max_min = max(max_min, max(a[i:j+1]) - min(a[i:j+1]))\n    return max_min\n\ndef find_max_segments(a, segments):\n    max_min = 0\n    res = []\n    for i, j in segments:\n        if max(a[i:j+1]) - min(a[i:j+1]) == max_min:\n            res.append((i, j))\n        elif max(a[i:j+1]) - min(a[i:j+1]) > max_min:\n            max_min = max(a[i:j+1]) - min(a[i:j+1])\n            res = [(i, j)]\n    return max_min, res\n\ndef find_max_segments_index(segments, res):\n    res_index = []\n    for i in range(len(segments)):\n        if segments[i] in res:\n            res_index.append(i+1)\n    return res_index\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = get_segments(a, m)\n    max_min, res = find_max_segments(a, segments)\n    res_index = find_max_segments_index(segments, res)\n    print(max_min)\n    print(len(res_index))\n    print(*res_index)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650404602,
  "id": "cmpl-4ypv03FdGkI3MD7RAjNaW3pW7YniW",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:43:54.022929 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": ""
}
2022-04-19 21:43:54.022972 REASON stop
2022-04-19 21:43:54.023674 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport os\nimport math\nfrom collections import defaultdict\n\ndef solve(n, m, a, l, r):\n    # get min and max of a\n    a_min = min(a)\n    a_max = max(a)\n    a_range = a_max - a_min\n    # get max of a[l[i]:r[i]+1]\n    max_l_r = -float('inf')\n    for i in range(m):\n        max_l_r = max(max_l_r, max(a[l[i]-1:r[i]]))\n    # compare\n    if max_l_r <= a_min:\n        return (a_range, 0)\n    else:\n        # get max of a[l[i]:r[i]+1] - a_min\n        max_l_r = -float('inf')\n        max_l_r_i = -1\n        for i in range(m):\n            tmp = max(a[l[i]-1:r[i]]) - a_min\n            if tmp > max_l_r:\n                max_l_r = tmp\n                max_l_r_i = i\n        return (a_range, 1, max_l_r_i+1)\n\ndef main():\n    # read data\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        x, y = [int(x) for x in input().split()]\n        l.append(x)\n        r.append(y)\n    # solve\n    ans = solve(n, m, a, l, r)\n    # print answer\n    print(ans[0])\n    print(ans[1])\n    for i in range(2, len(ans)):\n        print(ans[i], end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:43:54.023771 REASON stop
2022-04-19 21:43:54.024240 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\"\"\"\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    vector<int> l(m), r(m);\n    vector<int> d(m);\n\n    for (int i = 0; i < m; ++i) {\n        cin >> l[i] >> r[i];\n        d[i] = r[i] - l[i] + 1;\n    }\n\n    int maxx = 0;\n    for (int i = 0; i < n; ++i) {\n        maxx = max(maxx, a[i]);\n    }\n\n    vector<int> f(maxx + 1);\n    for (int i = 0; i < n; ++i) {\n        ++f[a[i]];\n    }\n\n    int ans = 0;\n    for (int i = 0; i < m; ++i) {\n        if (d[i] > f[a[l[i] - 1]]) {\n            ans += d[i];\n        }\n    }\n\n    cout << ans << endl;\n    cout << m << endl;\n    for (int i = 0; i < m; ++i) {\n        cout << i + 1 << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}\n\"\"\""
}
2022-04-19 21:43:54.024307 REASON stop
2022-04-19 21:43:54.046979 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[1] - x[0], reverse=True)\n    r = max(a)\n    l = min(a)\n    for segment in segments:\n        if a[segment[0] - 1] >= a[segment[1] - 1]:\n            for i in range(segment[0] - 1, segment[1]):\n                a[i] -= 1\n            r = max(a)\n            l = min(a)\n    print(r - l)\n    print(0)\n\n\nif __name__ == '__main__':\n    sys.exit(main())"
}
2022-04-19 21:43:54.047114 REASON stop
2022-04-19 21:43:54.072751 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nsegments = []\nfor i in range(m):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\n#print(a)\n#print(segments)\n\nmax_diff = 0\nmax_segments = []\n\nfor i in range(m):\n    for j in range(i+1, m):\n        #print(\"{} {}\".format(i, j))\n        new_a = list(a)\n        \n        new_a[segments[i][0]-1:segments[i][1]] = [x-1 for x in new_a[segments[i][0]-1:segments[i][1]]]\n        new_a[segments[j][0]-1:segments[j][1]] = [x-1 for x in new_a[segments[j][0]-1:segments[j][1]]]\n        \n        #print(new_a)\n        new_diff = max(new_a) - min(new_a)\n        \n        #print(new_diff)\n        if new_diff > max_diff:\n            max_diff = new_diff\n            max_segments = [i+1, j+1]\n\nprint(max_diff)\nprint(len(max_segments))\nprint(\" \".join(map(str, max_segments)))"
}
2022-04-19 21:43:54.072918 REASON stop
2022-04-19 21:43:54.074291 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": ""
}
2022-04-19 21:43:54.074396 REASON stop
2022-04-19 21:43:54.075706 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": ""
}
2022-04-19 21:43:54.075796 REASON stop
2022-04-19 21:43:54.077317 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef get_segments(a, m):\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l-1, r-1))\n    return segments\n\ndef get_max_min(a, segments):\n    max_min = 0\n    for i, j in segments:\n        max_min = max(max_min, max(a[i:j+1]) - min(a[i:j+1]))\n    return max_min\n\ndef find_max_segments(a, segments):\n    max_min = 0\n    res = []\n    for i, j in segments:\n        if max(a[i:j+1]) - min(a[i:j+1]) == max_min:\n            res.append((i, j))\n        elif max(a[i:j+1]) - min(a[i:j+1]) > max_min:\n            max_min = max(a[i:j+1]) - min(a[i:j+1])\n            res = [(i, j)]\n    return max_min, res\n\ndef find_max_segments_index(segments, res):\n    res_index = []\n    for i in range(len(segments)):\n        if segments[i] in res:\n            res_index.append(i+1)\n    return res_index\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = get_segments(a, m)\n    max_min, res = find_max_segments(a, segments)\n    res_index = find_max_segments_index(segments, res)\n    print(max_min)\n    print(len(res_index))\n    print(*res_index)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:43:54.077512 REASON stop
