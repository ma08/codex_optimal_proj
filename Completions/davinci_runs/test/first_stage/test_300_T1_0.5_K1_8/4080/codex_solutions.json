["", "\n\ndef get_segments(a, m):\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l-1, r-1))\n    return segments\n\ndef get_max_min(a, segments):\n    max_min = 0\n    for i, j in segments:\n        max_min = max(max_min, max(a[i:j+1]) - min(a[i:j+1]))\n    return max_min\n\ndef find_max_segments(a, segments):\n    max_min = 0\n    res = []\n    for i, j in segments:\n        if max(a[i:j+1]) - min(a[i:j+1]) == max_min:\n            res.append((i, j))\n        elif max(a[i:j+1]) - min(a[i:j+1]) > max_min:\n            max_min = max(a[i:j+1]) - min(a[i:j+1])\n            res = [(i, j)]\n    return max_min, res\n\ndef find_max_segments_index(segments, res):\n    res_index = []\n    for i in range(len(segments)):\n        if segments[i] in res:\n            res_index.append(i+1)\n    return res_index\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = get_segments(a, m)\n    max_min, res = find_max_segments(a, segments)\n    res_index = find_max_segments_index(segments, res)\n    print(max_min)\n    print(len(res_index))\n    print(*res_index)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport os\nimport math\nfrom collections import defaultdict\n\ndef solve(n, m, a, l, r):\n    # get min and max of a\n    a_min = min(a)\n    a_max = max(a)\n    a_range = a_max - a_min\n    # get max of a[l[i]:r[i]+1]\n    max_l_r = -float('inf')\n    for i in range(m):\n        max_l_r = max(max_l_r, max(a[l[i]-1:r[i]]))\n    # compare\n    if max_l_r <= a_min:\n        return (a_range, 0)\n    else:\n        # get max of a[l[i]:r[i]+1] - a_min\n        max_l_r = -float('inf')\n        max_l_r_i = -1\n        for i in range(m):\n            tmp = max(a[l[i]-1:r[i]]) - a_min\n            if tmp > max_l_r:\n                max_l_r = tmp\n                max_l_r_i = i\n        return (a_range, 1, max_l_r_i+1)\n\ndef main():\n    # read data\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        x, y = [int(x) for x in input().split()]\n        l.append(x)\n        r.append(y)\n    # solve\n    ans = solve(n, m, a, l, r)\n    # print answer\n    print(ans[0])\n    print(ans[1])\n    for i in range(2, len(ans)):\n        print(ans[i], end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()", "\n\n\"\"\"\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    vector<int> l(m), r(m);\n    vector<int> d(m);\n\n    for (int i = 0; i < m; ++i) {\n        cin >> l[i] >> r[i];\n        d[i] = r[i] - l[i] + 1;\n    }\n\n    int maxx = 0;\n    for (int i = 0; i < n; ++i) {\n        maxx = max(maxx, a[i]);\n    }\n\n    vector<int> f(maxx + 1);\n    for (int i = 0; i < n; ++i) {\n        ++f[a[i]];\n    }\n\n    int ans = 0;\n    for (int i = 0; i < m; ++i) {\n        if (d[i] > f[a[l[i] - 1]]) {\n            ans += d[i];\n        }\n    }\n\n    cout << ans << endl;\n    cout << m << endl;\n    for (int i = 0; i < m; ++i) {\n        cout << i + 1 << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}\n\"\"\"", "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nsegments = []\nfor i in range(m):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\n#print(a)\n#print(segments)\n\nmax_diff = 0\nmax_segments = []\n\nfor i in range(m):\n    for j in range(i+1, m):\n        #print(\"{} {}\".format(i, j))\n        new_a = list(a)\n        \n        new_a[segments[i][0]-1:segments[i][1]] = [x-1 for x in new_a[segments[i][0]-1:segments[i][1]]]\n        new_a[segments[j][0]-1:segments[j][1]] = [x-1 for x in new_a[segments[j][0]-1:segments[j][1]]]\n        \n        #print(new_a)\n        new_diff = max(new_a) - min(new_a)\n        \n        #print(new_diff)\n        if new_diff > max_diff:\n            max_diff = new_diff\n            max_segments = [i+1, j+1]\n\nprint(max_diff)\nprint(len(max_segments))\nprint(\" \".join(map(str, max_segments)))", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[1] - x[0], reverse=True)\n    r = max(a)\n    l = min(a)\n    for segment in segments:\n        if a[segment[0] - 1] >= a[segment[1] - 1]:\n            for i in range(segment[0] - 1, segment[1]):\n                a[i] -= 1\n            r = max(a)\n            l = min(a)\n    print(r - l)\n    print(0)\n\n\nif __name__ == '__main__':\n    sys.exit(main())"]