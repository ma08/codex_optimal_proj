["\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    s = input()\n    if n < k:\n        print(-1)\n        return\n    ans = 0\n    for i in range(n - 1, n - k, -1):\n        ans += i\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, k = map(int, input().split())\ns = input()\n\nif k > n:\n    print(-1)\nelse:\n    print(n*k-sum(map(len, s.split(s[0]))))", "\n\nn, k = map(int, input().split())\ns = input()\n\nif k > n:\n    print(-1)\nelse:\n    print(n * (k - 1))", "\n\ndef main():\n    # parse input\n    n, k = map(int, input().split())\n    s = input()\n\n    # build subsequence generator\n    def subsequences(s):\n        for i in range(len(s) + 1):\n            for j in range(i + 1, len(s) + 1):\n                yield s[i:j]\n\n    # determine if it is possible to generate the set\n    def possible(s, k):\n        # build set of all subsequences of s\n        subsequences_set = set(subsequences(s))\n        # build list of costs to generate each subsequence\n        costs = [len(s) - len(subsequence) for subsequence in subsequences_set]\n        # sort costs\n        costs.sort()\n        # return sum of first k costs\n        return sum(costs[:k])\n\n    # print result\n    print(possible(s, k) if possible(s, k) != 0 else -1)\n\nif __name__ == \"__main__\":\n    main()", "\nimport sys\nsys.setrecursionlimit(1000000000)\n\ndef find_subsequence(s, t, i, j, n, m, dp):\n    if i >= n or j >= m:\n        return 0\n    if dp[i][j] != -1:\n        return dp[i][j]\n    if s[i] == t[j]:\n        return dp[i][j] = 1 + find_subsequence(s, t, i+1, j+1, n, m, dp)\n    else:\n        return dp[i][j] = max(find_subsequence(s, t, i+1, j, n, m, dp), find_subsequence(s, t, i, j+1, n, m, dp))\n\ndef solve(s, k):\n    n = len(s)\n    if k > n:\n        return -1\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = find_subsequence(s[i:j+1], s[j:], 0, 0, j-i+1, j-i+1, dp)\n            max_len = max(max_len, dp[i][j])\n    if max_len < k:\n        return -1\n    else:\n        return n*(k-1) - (n-max_len)*(k-1)\n\nn, k = map(int, input().split())\ns = input()\nprint(solve(s, k))", "\n\nimport sys\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n\n    if k > n:\n        print(-1)\n        return\n\n    if k == n:\n        print(0)\n        return\n\n    if k == 1:\n        print(n)\n        return\n\n    if k == 2:\n        if len(set(s)) == 1:\n            print(n)\n            return\n        else:\n            print(n - 1)\n            return\n\n    print(n - k)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef isSubsequence(string, sub):\n    if(len(sub)==0):\n        return True\n    \n    i = 0\n    j = 0\n    \n    while(i<len(string) and j<len(sub)):\n        if string[i] == sub[j]:\n            j+=1\n        i+=1\n    \n    return j == len(sub)\n\ndef subsequence(string, k):\n    if(len(string)<k):\n        return -1\n    \n    subs = []\n    for i in range(1, len(string)+1):\n        for j in range(0, len(string)-i+1):\n            subs.append(string[j:j+i])\n    \n    subs = list(set(subs))\n    subs.sort(key=len)\n    subs.reverse()\n    print(subs)\n    \n    for i in range(0, len(subs)):\n        for j in range(i+1, len(subs)):\n            if(isSubsequence(subs[i], subs[j])):\n                del subs[j]\n                break\n    \n    print(subs)\n    \n    if(len(subs)<k):\n        return -1\n    else:\n        return sum([len(string)-len(sub) for sub in subs[:k]])\n\nn, k = [int(x) for x in input().split()]\nstring = input()\n\nprint(subsequence(string, k))", "\n\nn, k = map(int, input().split())\ns = input()\n\ndef get_subsequences(s):\n    return [s[:i] + s[i+1:] for i in range(len(s))]\n\ndef get_subsequences_recursive(s):\n    if len(s) == 1:\n        return [s]\n    else:\n        return get_subsequences_recursive(s[:-1]) + get_subsequences(s)\n\ndef get_subsequences_dp(s):\n    dp = [[s[:i] + s[i+1:] for i in range(len(s))]]\n    for _ in range(len(s) - 1):\n        dp.append([])\n        for i in range(len(dp[-2])):\n            dp[-1] += get_subsequences(dp[-2][i])\n    return [i for j in dp for i in j]\n\nsubsequences = get_subsequences_dp(s)\n\nif len(subsequences) < k:\n    print(-1)\nelse:\n    print(sum(len(s) for s in subsequences[:k]))"]