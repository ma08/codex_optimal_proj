["\n\nimport sys\n\ndef solve(s, b):\n    m = len(b)\n    ans = [None] * m\n\n    def add(i, j):\n        b[i] -= abs(i - j)\n        b[j] -= abs(i - j)\n\n    for i in range(m):\n        for j in range(m):\n            if b[i] == 0:\n                break\n            if b[i] == abs(i - j):\n                add(i, j)\n                ans[i] = s[j]\n                s = s[:j] + s[j + 1:]\n                break\n    return ''.join(ans)\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input().strip()\n        m = int(input())\n        b = list(map(int, input().strip().split()))\n        print(solve(s, b))\n\nif __name__ == '__main__':\n    main()", "\n\nfrom random import randint\nfrom random import shuffle\n\ndef generate_string(m):\n    return ''.join([chr(randint(ord('a'), ord('z'))) for i in range(m)])\n\ndef generate_b(s):\n    b = [0 for i in range(len(s))]\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if s[i] < s[j]:\n                b[i] += abs(i - j)\n    return b\n\ndef get_result(s, b):\n    n = len(s)\n    t = ['' for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if (b[j] == 0):\n                t[j] = s[i]\n                b[j] = -1\n                break\n            else:\n                b[j] -= abs(j - i)\n    return ''.join(t)\n\ndef main():\n    q = randint(1, 100)\n    print(q)\n    for i in range(q):\n        m = randint(1, 50)\n        s = generate_string(m)\n        b = generate_b(s)\n        shuffle(b)\n        print(s)\n        print(len(b))\n        print(' '.join([str(x) for x in b]))\n\nif __name__ == '__main__':\n    main()", "\n\n# Uses python3\nimport sys\n\ndef get_optimal_value(capacity, weights, values):\n    value = 0.\n    # write your code here\n    return value\n\n\nif __name__ == \"__main__\":\n    data = list(map(int, sys.stdin.read().split()))\n    n, capacity = data[0:2]\n    values = data[2:(2 * n + 2):2]\n    weights = data[3:(2 * n + 2):2]\n    opt_value = get_optimal_value(capacity, weights, values)\n    print(\"{:.10f}\".format(opt_value))", "\n\nimport sys\nimport math\n\ndef solve(s, b):\n    #print(s, b)\n    n = len(s)\n    if n == 1:\n        return s\n    if n == 2:\n        if b[0] == 0 and b[1] == 0:\n            return s\n        elif b[0] == 1 and b[1] == 1:\n            return s[::-1]\n        else:\n            return None\n    b1 = b[:n//2]\n    b2 = b[n//2:]\n    s1 = s[:n//2]\n    s2 = s[n//2:]\n    s12 = s1 + s2\n    c = 0\n    for i in range(n//2):\n        c += sum(1 for j in range(n//2, n) if s12[j] > s12[i])\n    if c != sum(b1):\n        return None\n    s21 = s2 + s1\n    c = 0\n    for i in range(n//2, n):\n        c += sum(1 for j in range(n//2) if s21[j] > s21[i])\n    if c != sum(b2):\n        return None\n    s1 = solve(s1, b1)\n    s2 = solve(s2, b2)\n    if s1 is None or s2 is None:\n        return None\n    return s1 + s2\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        n = int(input())\n        b = list(map(int, input().split()))\n        s = solve(s, b)\n        if s is None:\n            print(\"-1\")\n        else:\n            print(s)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline().strip())\n    for i in range(q):\n        s = sys.stdin.readline().strip()\n        m = int(sys.stdin.readline().strip())\n        b = sys.stdin.readline().strip()\n        b = b.split(\" \")\n        b = [int(x) for x in b]\n        #print(s)\n        #print(m)\n        #print(b)\n        ans = \"\"\n        for j in range(len(s)):\n            if j < len(b):\n                for k in range(b[j]):\n                    ans += \"a\"\n            ans += s[j]\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef get_b(t):\n    b = [0]*len(t)\n    for i in range(len(t)):\n        for j in range(len(t)):\n            if t[i] < t[j]:\n                b[i] += abs(i-j)\n    return b\n\ndef get_t(s, b):\n    t = [' ']*len(b)\n    for i in range(len(b)):\n        for j in range(len(s)):\n            if b[i] == get_b(t[:i] + [s[j]] + t[i+1:])[i]:\n                t[i] = s[j]\n                s = s[:j] + s[j+1:]\n                break\n    return ''.join(t)\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        m = int(input())\n        b = [int(i) for i in input().split()]\n        print(get_t(s, b))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for i in range(q):\n        s = list(sys.stdin.readline().strip())\n        m = int(sys.stdin.readline())\n        b = [int(x) for x in sys.stdin.readline().split()]\n        print(solve(s, m, b))\n\ndef solve(s, m, b):\n    n = len(s)\n    count = [0] * 26\n    for x in s:\n        count[ord(x) - ord('a')] += 1\n\n    #print(count)\n\n    for i in range(m):\n        for j in range(b[i]):\n            count[ord(s[n - 1 - j]) - ord('a')] -= 1\n        s = s[:-b[i]]\n        #print(s)\n\n    ans = [''] * 26\n    for i in range(26):\n        ans[i] = chr(ord('a') + i) * count[i]\n\n    return ''.join(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline().strip())\n    for _ in range(q):\n        s = sys.stdin.readline().strip()\n        n = int(sys.stdin.readline().strip())\n        b = [int(x) for x in sys.stdin.readline().strip().split()]\n        print(solve(s, n, b))\n\ndef solve(s, n, b):\n    s = list(s)\n    for i in range(n):\n        if i == 0:\n            s[0] = chr(ord('a') + sum(b[:1]))\n        else:\n            s[i] = chr(ord('a') + sum(b[:i]) - sum(b[:i-1]))\n    return ''.join(s)\n\nif __name__ == '__main__':\n    main()"]