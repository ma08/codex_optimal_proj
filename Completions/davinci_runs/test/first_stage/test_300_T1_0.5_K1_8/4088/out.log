2022-04-19 21:48:54.956312 """
Polycarp wrote on the board a string $s$ containing only lowercase Latin letters ('a'-'z'). This string is known for you and given in the input.

After that, he erased some letters from the string $s$, and he rewrote the remaining letters in any order. As a result, he got some new string $t$. You have to find it with some additional information.

Suppose that the string $t$ has length $m$ and the characters are numbered from left to right from $1$ to $m$. You are given a sequence of $m$ integers: $b_1, b_2, \ldots, b_m$, where $b_i$ is the sum of the distances $|i-j|$ from the index $i$ to all such indices $j$ that $t_j > t_i$ (consider that 'a'<'b'<...<'z'). In other words, to calculate $b_i$, Polycarp finds all such indices $j$ that the index $j$ contains a letter that is later in the alphabet than $t_i$ and sums all the values $|i-j|$.

For example, if $t$ = "abzb", then:  since $t_1$='a', all other indices contain letters which are later in the alphabet, that is: $b_1=|1-2|+|1-3|+|1-4|=1+2+3=6$;  since $t_2$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_2=|2-3|=1$;  since $t_3$='z', then there are no indexes $j$ such that $t_j>t_i$, thus $b_3=0$;  since $t_4$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_4=|4-3|=1$. 

Thus, if $t$ = "abzb", then $b=[6,1,0,1]$.

Given the string $s$ and the array $b$, find any possible string $t$ for which the following two requirements are fulfilled simultaneously:  $t$ is obtained from $s$ by erasing some letters (possibly zero) and then writing the rest in any order;  the array, constructed from the string $t$ according to the rules above, equals to the array $b$ specified in the input data. 


-----Input-----

The first line contains an integer $q$ ($1 \le q \le 100$) — the number of test cases in the test. Then $q$ test cases follow.

Each test case consists of three lines:  the first line contains string $s$, which has a length from $1$ to $50$ and consists of lowercase English letters;  the second line contains positive integer $m$ ($1 \le m \le |s|$), where $|s|$ is the length of the string $s$, and $m$ is the length of the array $b$;  the third line contains the integers $b_1, b_2, \dots, b_m$ ($0 \le b_i \le 1225$). 

It is guaranteed that in each test case an answer exists.


-----Output-----

Output $q$ lines: the $k$-th of them should contain the answer (string $t$) to the $k$-th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.


-----Example-----
Input
4
abac
3
2 1 0
abc
1
0
abba
3
1 0 1
ecoosdcefr
10
38 13 24 14 11 5 3 24 17 0

Output
aac
b
aba
codeforces



-----Note-----

In the first test case, such strings $t$ are suitable: "aac', "aab".

In the second test case, such trings $t$ are suitable: "a", "b", "c".

In the third test case, only the string $t$ equals to "aba" is suitable, but the character 'b' can be from the second or third position.
"""
2022-04-19 21:48:54.956332 --------------------------
2022-04-19 21:48:54.956445 using api key derek
2022-04-19 21:49:18.785131 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef get_b(t):\n    b = [0]*len(t)\n    for i in range(len(t)):\n        for j in range(len(t)):\n            if t[i] < t[j]:\n                b[i] += abs(i-j)\n    return b\n\ndef get_t(s, b):\n    t = [' ']*len(b)\n    for i in range(len(b)):\n        for j in range(len(s)):\n            if b[i] == get_b(t[:i] + [s[j]] + t[i+1:])[i]:\n                t[i] = s[j]\n                s = s[:j] + s[j+1:]\n                break\n    return ''.join(t)\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        m = int(input())\n        b = [int(i) for i in input().split()]\n        print(get_t(s, b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(s, b):\n    m = len(b)\n    ans = [None] * m\n\n    def add(i, j):\n        b[i] -= abs(i - j)\n        b[j] -= abs(i - j)\n\n    for i in range(m):\n        for j in range(m):\n            if b[i] == 0:\n                break\n            if b[i] == abs(i - j):\n                add(i, j)\n                ans[i] = s[j]\n                s = s[:j] + s[j + 1:]\n                break\n    return ''.join(ans)\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input().strip()\n        m = int(input())\n        b = list(map(int, input().strip().split()))\n        print(solve(s, b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nfrom random import randint\nfrom random import shuffle\n\ndef generate_string(m):\n    return ''.join([chr(randint(ord('a'), ord('z'))) for i in range(m)])\n\ndef generate_b(s):\n    b = [0 for i in range(len(s))]\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if s[i] < s[j]:\n                b[i] += abs(i - j)\n    return b\n\ndef get_result(s, b):\n    n = len(s)\n    t = ['' for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if (b[j] == 0):\n                t[j] = s[i]\n                b[j] = -1\n                break\n            else:\n                b[j] -= abs(j - i)\n    return ''.join(t)\n\ndef main():\n    q = randint(1, 100)\n    print(q)\n    for i in range(q):\n        m = randint(1, 50)\n        s = generate_string(m)\n        b = generate_b(s)\n        shuffle(b)\n        print(s)\n        print(len(b))\n        print(' '.join([str(x) for x in b]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline().strip())\n    for i in range(q):\n        s = sys.stdin.readline().strip()\n        m = int(sys.stdin.readline().strip())\n        b = sys.stdin.readline().strip()\n        b = b.split(\" \")\n        b = [int(x) for x in b]\n        #print(s)\n        #print(m)\n        #print(b)\n        ans = \"\"\n        for j in range(len(s)):\n            if j < len(b):\n                for k in range(b[j]):\n                    ans += \"a\"\n            ans += s[j]\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for i in range(q):\n        s = list(sys.stdin.readline().strip())\n        m = int(sys.stdin.readline())\n        b = [int(x) for x in sys.stdin.readline().split()]\n        print(solve(s, m, b))\n\ndef solve(s, m, b):\n    n = len(s)\n    count = [0] * 26\n    for x in s:\n        count[ord(x) - ord('a')] += 1\n\n    #print(count)\n\n    for i in range(m):\n        for j in range(b[i]):\n            count[ord(s[n - 1 - j]) - ord('a')] -= 1\n        s = s[:-b[i]]\n        #print(s)\n\n    ans = [''] * 26\n    for i in range(26):\n        ans[i] = chr(ord('a') + i) * count[i]\n\n    return ''.join(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline().strip())\n    for _ in range(q):\n        s = sys.stdin.readline().strip()\n        n = int(sys.stdin.readline().strip())\n        b = [int(x) for x in sys.stdin.readline().strip().split()]\n        print(solve(s, n, b))\n\ndef solve(s, n, b):\n    s = list(s)\n    for i in range(n):\n        if i == 0:\n            s[0] = chr(ord('a') + sum(b[:1]))\n        else:\n            s[i] = chr(ord('a') + sum(b[:i]) - sum(b[:i-1]))\n    return ''.join(s)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef solve(s, b):\n    #print(s, b)\n    n = len(s)\n    if n == 1:\n        return s\n    if n == 2:\n        if b[0] == 0 and b[1] == 0:\n            return s\n        elif b[0] == 1 and b[1] == 1:\n            return s[::-1]\n        else:\n            return None\n    b1 = b[:n//2]\n    b2 = b[n//2:]\n    s1 = s[:n//2]\n    s2 = s[n//2:]\n    s12 = s1 + s2\n    c = 0\n    for i in range(n//2):\n        c += sum(1 for j in range(n//2, n) if s12[j] > s12[i])\n    if c != sum(b1):\n        return None\n    s21 = s2 + s1\n    c = 0\n    for i in range(n//2, n):\n        c += sum(1 for j in range(n//2) if s21[j] > s21[i])\n    if c != sum(b2):\n        return None\n    s1 = solve(s1, b1)\n    s2 = solve(s2, b2)\n    if s1 is None or s2 is None:\n        return None\n    return s1 + s2\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        n = int(input())\n        b = list(map(int, input().split()))\n        s = solve(s, b)\n        if s is None:\n            print(\"-1\")\n        else:\n            print(s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# Uses python3\nimport sys\n\ndef get_optimal_value(capacity, weights, values):\n    value = 0.\n    # write your code here\n    return value\n\n\nif __name__ == \"__main__\":\n    data = list(map(int, sys.stdin.read().split()))\n    n, capacity = data[0:2]\n    values = data[2:(2 * n + 2):2]\n    weights = data[3:(2 * n + 2):2]\n    opt_value = get_optimal_value(capacity, weights, values)\n    print(\"{:.10f}\".format(opt_value))"
    }
  ],
  "created": 1650404935,
  "id": "cmpl-4yq0NQSEkyg9ydeQ1aMlTiUJeaW5M",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:49:18.785582 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef get_b(t):\n    b = [0]*len(t)\n    for i in range(len(t)):\n        for j in range(len(t)):\n            if t[i] < t[j]:\n                b[i] += abs(i-j)\n    return b\n\ndef get_t(s, b):\n    t = [' ']*len(b)\n    for i in range(len(b)):\n        for j in range(len(s)):\n            if b[i] == get_b(t[:i] + [s[j]] + t[i+1:])[i]:\n                t[i] = s[j]\n                s = s[:j] + s[j+1:]\n                break\n    return ''.join(t)\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        m = int(input())\n        b = [int(i) for i in input().split()]\n        print(get_t(s, b))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:49:18.785631 REASON stop
2022-04-19 21:49:18.786182 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(s, b):\n    m = len(b)\n    ans = [None] * m\n\n    def add(i, j):\n        b[i] -= abs(i - j)\n        b[j] -= abs(i - j)\n\n    for i in range(m):\n        for j in range(m):\n            if b[i] == 0:\n                break\n            if b[i] == abs(i - j):\n                add(i, j)\n                ans[i] = s[j]\n                s = s[:j] + s[j + 1:]\n                break\n    return ''.join(ans)\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input().strip()\n        m = int(input())\n        b = list(map(int, input().strip().split()))\n        print(solve(s, b))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:49:18.786255 REASON stop
2022-04-19 21:49:18.786702 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nfrom random import randint\nfrom random import shuffle\n\ndef generate_string(m):\n    return ''.join([chr(randint(ord('a'), ord('z'))) for i in range(m)])\n\ndef generate_b(s):\n    b = [0 for i in range(len(s))]\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if s[i] < s[j]:\n                b[i] += abs(i - j)\n    return b\n\ndef get_result(s, b):\n    n = len(s)\n    t = ['' for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if (b[j] == 0):\n                t[j] = s[i]\n                b[j] = -1\n                break\n            else:\n                b[j] -= abs(j - i)\n    return ''.join(t)\n\ndef main():\n    q = randint(1, 100)\n    print(q)\n    for i in range(q):\n        m = randint(1, 50)\n        s = generate_string(m)\n        b = generate_b(s)\n        shuffle(b)\n        print(s)\n        print(len(b))\n        print(' '.join([str(x) for x in b]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:49:18.786775 REASON stop
2022-04-19 21:49:18.806830 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline().strip())\n    for i in range(q):\n        s = sys.stdin.readline().strip()\n        m = int(sys.stdin.readline().strip())\n        b = sys.stdin.readline().strip()\n        b = b.split(\" \")\n        b = [int(x) for x in b]\n        #print(s)\n        #print(m)\n        #print(b)\n        ans = \"\"\n        for j in range(len(s)):\n            if j < len(b):\n                for k in range(b[j]):\n                    ans += \"a\"\n            ans += s[j]\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 21:49:18.806946 REASON stop
2022-04-19 21:49:18.808188 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for i in range(q):\n        s = list(sys.stdin.readline().strip())\n        m = int(sys.stdin.readline())\n        b = [int(x) for x in sys.stdin.readline().split()]\n        print(solve(s, m, b))\n\ndef solve(s, m, b):\n    n = len(s)\n    count = [0] * 26\n    for x in s:\n        count[ord(x) - ord('a')] += 1\n\n    #print(count)\n\n    for i in range(m):\n        for j in range(b[i]):\n            count[ord(s[n - 1 - j]) - ord('a')] -= 1\n        s = s[:-b[i]]\n        #print(s)\n\n    ans = [''] * 26\n    for i in range(26):\n        ans[i] = chr(ord('a') + i) * count[i]\n\n    return ''.join(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:49:18.808289 REASON stop
2022-04-19 21:49:18.809400 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline().strip())\n    for _ in range(q):\n        s = sys.stdin.readline().strip()\n        n = int(sys.stdin.readline().strip())\n        b = [int(x) for x in sys.stdin.readline().strip().split()]\n        print(solve(s, n, b))\n\ndef solve(s, n, b):\n    s = list(s)\n    for i in range(n):\n        if i == 0:\n            s[0] = chr(ord('a') + sum(b[:1]))\n        else:\n            s[i] = chr(ord('a') + sum(b[:i]) - sum(b[:i-1]))\n    return ''.join(s)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:49:18.809488 REASON stop
2022-04-19 21:49:18.810878 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef solve(s, b):\n    #print(s, b)\n    n = len(s)\n    if n == 1:\n        return s\n    if n == 2:\n        if b[0] == 0 and b[1] == 0:\n            return s\n        elif b[0] == 1 and b[1] == 1:\n            return s[::-1]\n        else:\n            return None\n    b1 = b[:n//2]\n    b2 = b[n//2:]\n    s1 = s[:n//2]\n    s2 = s[n//2:]\n    s12 = s1 + s2\n    c = 0\n    for i in range(n//2):\n        c += sum(1 for j in range(n//2, n) if s12[j] > s12[i])\n    if c != sum(b1):\n        return None\n    s21 = s2 + s1\n    c = 0\n    for i in range(n//2, n):\n        c += sum(1 for j in range(n//2) if s21[j] > s21[i])\n    if c != sum(b2):\n        return None\n    s1 = solve(s1, b1)\n    s2 = solve(s2, b2)\n    if s1 is None or s2 is None:\n        return None\n    return s1 + s2\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        n = int(input())\n        b = list(map(int, input().split()))\n        s = solve(s, b)\n        if s is None:\n            print(\"-1\")\n        else:\n            print(s)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 21:49:18.810955 REASON stop
2022-04-19 21:49:18.812402 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# Uses python3\nimport sys\n\ndef get_optimal_value(capacity, weights, values):\n    value = 0.\n    # write your code here\n    return value\n\n\nif __name__ == \"__main__\":\n    data = list(map(int, sys.stdin.read().split()))\n    n, capacity = data[0:2]\n    values = data[2:(2 * n + 2):2]\n    weights = data[3:(2 * n + 2):2]\n    opt_value = get_optimal_value(capacity, weights, values)\n    print(\"{:.10f}\".format(opt_value))"
}
2022-04-19 21:49:18.812577 REASON stop
