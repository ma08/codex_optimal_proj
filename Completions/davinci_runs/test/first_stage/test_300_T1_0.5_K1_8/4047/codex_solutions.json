["\n\nn = int(input())\nx = list(map(int, input().split()))\n\nans = 10**9\nfor i in range(min(x), max(x) + 1):\n    ans = min(ans, sum(abs(i - j) for j in x))\n\nprint(ans)", "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    ans = 0\n    for i in range(n):\n        if x[i] < x[0]:\n            ans += x[0] - x[i]\n        elif x[i] > x[0]:\n            ans += x[i] - x[0] - 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\nx = sorted(list(map(int,input().split())))\n\nans = 0\nfor i in range(1,n):\n    ans += abs(x[i]-x[i-1])-1\n\nprint(ans)", "\n\n# SOLUTION\nn = int(input())\nx = list(map(int, input().split()))\n\nx.sort()\n\nif x[-1] - x[0] == 0:\n    print(0)\nelif x[-1] - x[0] == 1:\n    print(1)\nelif x[-1] - x[0] == 2:\n    print(1)\nelse:\n    print(2)", "\n\nn = int(input())\nchips = list(map(int, input().split()))\n\n# print(chips)\n\nans = 0\n\nif (n == 1):\n    print(0)\nelse:\n    chips.sort()\n    # print(chips)\n    mid = chips[n//2]\n    # print(mid)\n\n    for i in range(n):\n        ans += abs(chips[i] - mid)\n\n    print(ans)", "\n\nn = int(input())\nx = list(map(int, input().split()))\nmx = max(x)\nmn = min(x)\n\nif mx == mn:\n    print(0)\nelse:\n    print(mx-mn-n)", "\n\n# -*- coding: utf-8 -*-\n# @Date    : 2018-09-06 15:11:49\n# @Author  : raj lath (oorja.halt@gmail.com)\n# @Link    : link\n# @Version : 1.0.0\n\nimport os\nfrom sys import stdin\n\nmax_val=int(10e12)\nmin_val=int(-10e12)\n\ndef read_int()     : return int(stdin.readline())\ndef read_ints()    : return [int(x) for x in stdin.readline().split()]\ndef read_str()     : return input()\ndef read_strs()    : return [x for x in stdin.readline().split()]\n\nnb_chips = read_int()\nchips    = read_ints()\nchips.sort()\nmid = chips[nb_chips//2]\nans = 0\nfor i in chips:\n    ans += abs(mid-i)\nprint(ans)", "\n\ndef main():\n    num_chips = int(input())\n    chip_pos = [int(x) for x in input().split()]\n    min_pos = min(chip_pos)\n    max_pos = max(chip_pos)\n    min_cost = 0\n    for pos in chip_pos:\n        if pos > min_pos:\n            min_cost += pos - min_pos\n    max_cost = 0\n    for pos in chip_pos:\n        if pos < max_pos:\n            max_cost += max_pos - pos\n    print(min(min_cost, max_cost))\n\nif __name__ == \"__main__\":\n    main()"]