["\n\ndef find_minimum_heaters(n, r, a):\n    if n < r:\n        return -1\n\n    heaters = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            if i >= r and a[i-r] == 0:\n                if i + r < len(a) and a[i+r] == 0:\n                    return -1\n                else:\n                    heaters += 1\n                    a[i] = 1\n                    a[i-r+1:i+1] = [1] * (r-1)\n                    if i + r < len(a):\n                        a[i+1:i+r+1] = [1] * r\n            elif i + r < len(a) and a[i+r] == 0:\n                heaters += 1\n                a[i] = 1\n                a[i+1:i+r+1] = [1] * r\n    return heaters\n\n\ndef run_tests():\n    n, r = 6, 2\n    a = [0, 1, 1, 0, 0, 1]\n    assert find_minimum_heaters(n, r, a) == 3\n\n    n, r = 5, 3\n    a = [1, 0, 0, 0, 1]\n    assert find_minimum_heaters(n, r, a) == 2\n\n    n, r = 5, 10\n    a = [0, 0, 0, 0, 0]\n    assert find_minimum_heaters(n, r, a) == -1\n\n    n, r = 10, 3\n    a = [0, 0, 1, 1, 0, 1, 0, 0, 0, 1]\n    assert find_minimum_heaters(n, r, a) == 3\n\n\nif __name__ == '__main__':\n    run_tests()\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(find_minimum_heaters(n, r, a))", "\n\nn, r = map(int, raw_input().split())\n\na = map(int, raw_input().split())\n\nheaters = []\n\nfor i in range(n):\n    if a[i] == 1:\n        heaters.append(i)\n\n#print heaters\n\nif len(heaters) == 0:\n    print -1\n    exit()\n\nheaters.sort()\n\n#print heaters\n\nheaters.append(n)\n\nans = 1\n\nlast = heaters[0] + r - 1\n\n#print last\n\nfor i in range(1, len(heaters)):\n    if heaters[i] - r + 1 <= last:\n        last = max(last, heaters[i] + r - 1)\n    else:\n        ans += 1\n        last = heaters[i] + r - 1\n\nprint ans", "\n\nn, r = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\n# If there are no heaters, then it is impossible to warm up the whole house\nif sum(a) == 0:\n    print(-1)\n    exit()\n\n# If the heater is at position 0 or n, then we can't warm up the first or last element\nif a[0] == 0 or a[-1] == 0:\n    print(-1)\n    exit()\n\n# Count the number of heaters that need to be turned on\ncount = 0\nfor i in range(n):\n    # If the current element is not a heater, then add 1 to the count\n    if a[i] == 0:\n        count += 1\n\n        # If the heater is at position 0 or n, then we can't warm up the first or last element\n        if i == 0 or i == n-1:\n            print(-1)\n            exit()\n\n        # If a heater is at position i-r, then we don't need to turn on the heater at position i\n        if a[i-r] == 1:\n            count -= 1\n\nprint(count)", "\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, r, a)\n\ndef get_heaters(n, r, a):\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append((i + 1, i + 1))\n    return heaters\n\ndef check_heaters(n, r, a, heaters):\n    for i in range(n):\n        if a[i] == 0:\n            covered = False\n            for j in range(len(heaters)):\n                if heaters[j][0] <= i + 1 <= heaters[j][1]:\n                    covered = True\n                    break\n            if not covered:\n                return False\n    return True\n\ndef heat_up(n, r, a, heaters):\n    for i in range(n):\n        if a[i] == 0:\n            covered = False\n            for j in range(len(heaters)):\n                if heaters[j][0] <= i + 1 <= heaters[j][1]:\n                    covered = True\n                    break\n            if not covered:\n                # print(i + 1, heaters)\n                for j in range(len(heaters)):\n                    if heaters[j][0] > i + 1:\n                        heaters[j] = (i + 1, heaters[j][1])\n                        break\n                    if heaters[j][1] < i + 1:\n                        heaters[j] = (heaters[j][0], i + 1)\n                        break\n                # print(i + 1, heaters)\n    return heaters\n\ndef count_heaters(heaters):\n    return len(heaters)\n\nheaters = get_heaters(n, r, a)\n\n# print(heaters)\n\nif check_heaters(n, r, a, heaters):\n    print(count_heaters(heaters))\nelse:\n    heaters = heat_up(n, r, a, heaters)\n    # print(heaters)\n    if check_heaters(n, r, a, heaters):\n        print(count_heaters(heaters))\n    else:\n        print(-1)", "\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if a[i] == 0:\n        for j in range(max(0, i - r + 1), min(n, i + r)):\n            if a[j] == 1:\n                a[i] = 1\n                break\n    if a[i] == 0:\n        ans = -1\n        break\n    if a[i] == 1:\n        ans += 1\nprint(ans)", "\n\nimport sys\n\ndef main():\n    n, r = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n\n    if len(heaters) == 0:\n        print(-1)\n        return\n\n    ans = 1\n    prev = heaters[0]\n    for i in range(1, len(heaters)):\n        if heaters[i] - prev > r:\n            ans += 1\n            prev = heaters[i]\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if n == 0:\n        print(-1)\n        return\n\n    if r == 0:\n        if sum(a) == 0:\n            print(-1)\n        else:\n            print(0)\n        return\n\n    ans = 0\n    pos = 0\n    while pos < n:\n        if a[pos] == 1:\n            pos += r\n            ans += 1\n            continue\n        else:\n            # try to find the closest heater\n            i = pos + 1\n            while i < n:\n                if a[i] == 1:\n                    break\n                i += 1\n            if i == n:\n                print(-1)\n                return\n\n            # turn on the heater at position pos\n            pos = i + r\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()", "\n\n#-----Solution-----\n\n# Read input\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# Check if there is a heater\nheater = False\nfor i in a:\n    if i == 1:\n        heater = True\n\n# If there is no heater, the answer is -1\nif not heater:\n    print(-1)\n    exit()\n\n# If there is a heater, count the number of heaters needed\nans = 0\ni = 0\nwhile i < n:\n    # If there is no heater at the current position, move to the next position\n    if a[i] == 0:\n        i += 1\n        continue\n    # If there is a heater at the current position, move to the next position that is not warmed up by the heater\n    if a[i] == 1:\n        ans += 1\n        i += 2 * r - 1\n\n# Print the answer\nprint(ans)"]