2022-04-19 21:29:04.608899 """
Vova's house is an array consisting of $n$ elements (yeah, this is the first problem, I think, where someone lives in the array). There are heaters in some positions of the array. The $i$-th element of the array is $1$ if there is a heater in the position $i$, otherwise the $i$-th element of the array is $0$.

Each heater has a value $r$ ($r$ is the same for all heaters). This value means that the heater at the position $pos$ can warm up all the elements in range $[pos - r + 1; pos + r - 1]$.

Vova likes to walk through his house while he thinks, and he hates cold positions of his house. Vova wants to switch some of his heaters on in such a way that each element of his house will be warmed up by at least one heater. 

Vova's target is to warm up the whole house (all the elements of the array), i.e. if $n = 6$, $r = 2$ and heaters are at positions $2$ and $5$, then Vova can warm up the whole house if he switches all the heaters in the house on (then the first $3$ elements will be warmed up by the first heater and the last $3$ elements will be warmed up by the second heater).

Initially, all the heaters are off.

But from the other hand, Vova didn't like to pay much for the electricity. So he wants to switch the minimum number of heaters on in such a way that each element of his house is warmed up by at least one heater.

Your task is to find this number of heaters or say that it is impossible to warm up the whole house.


-----Input-----

The first line of the input contains two integers $n$ and $r$ ($1 \le n, r \le 1000$) — the number of elements in the array and the value of heaters.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($0 \le a_i \le 1$) — the Vova's house description.


-----Output-----

Print one integer — the minimum number of heaters needed to warm up the whole house or -1 if it is impossible to do it.


-----Examples-----
Input
6 2
0 1 1 0 0 1

Output
3

Input
5 3
1 0 0 0 1

Output
2

Input
5 10
0 0 0 0 0

Output
-1

Input
10 3
0 0 1 1 0 1 0 0 0 1

Output
3



-----Note-----

In the first example the heater at the position $2$ warms up elements $[1; 3]$, the heater at the position $3$ warms up elements $[2, 4]$ and the heater at the position $6$ warms up elements $[5; 6]$ so the answer is $3$.

In the second example the heater at the position $1$ warms up elements $[1; 3]$ and the heater at the position $5$ warms up elements $[3; 5]$ so the answer is $2$.

In the third example there are no heaters so the answer is -1.

In the fourth example the heater at the position $3$ warms up elements $[1; 5]$, the heater at the position $6$ warms up elements $[4; 8]$ and the heater at the position $10$ warms up elements $[8; 10]$ so the answer is $3$.
"""
2022-04-19 21:29:04.608923 --------------------------
2022-04-19 21:29:04.609031 using api key derek
2022-04-19 21:29:04.771513 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-19 21:29:09.776867 """
Vova's house is an array consisting of $n$ elements (yeah, this is the first problem, I think, where someone lives in the array). There are heaters in some positions of the array. The $i$-th element of the array is $1$ if there is a heater in the position $i$, otherwise the $i$-th element of the array is $0$.

Each heater has a value $r$ ($r$ is the same for all heaters). This value means that the heater at the position $pos$ can warm up all the elements in range $[pos - r + 1; pos + r - 1]$.

Vova likes to walk through his house while he thinks, and he hates cold positions of his house. Vova wants to switch some of his heaters on in such a way that each element of his house will be warmed up by at least one heater. 

Vova's target is to warm up the whole house (all the elements of the array), i.e. if $n = 6$, $r = 2$ and heaters are at positions $2$ and $5$, then Vova can warm up the whole house if he switches all the heaters in the house on (then the first $3$ elements will be warmed up by the first heater and the last $3$ elements will be warmed up by the second heater).

Initially, all the heaters are off.

But from the other hand, Vova didn't like to pay much for the electricity. So he wants to switch the minimum number of heaters on in such a way that each element of his house is warmed up by at least one heater.

Your task is to find this number of heaters or say that it is impossible to warm up the whole house.


-----Input-----

The first line of the input contains two integers $n$ and $r$ ($1 \le n, r \le 1000$) — the number of elements in the array and the value of heaters.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($0 \le a_i \le 1$) — the Vova's house description.


-----Output-----

Print one integer — the minimum number of heaters needed to warm up the whole house or -1 if it is impossible to do it.


-----Examples-----
Input
6 2
0 1 1 0 0 1

Output
3

Input
5 3
1 0 0 0 1

Output
2

Input
5 10
0 0 0 0 0

Output
-1

Input
10 3
0 0 1 1 0 1 0 0 0 1

Output
3



-----Note-----

In the first example the heater at the position $2$ warms up elements $[1; 3]$, the heater at the position $3$ warms up elements $[2, 4]$ and the heater at the position $6$ warms up elements $[5; 6]$ so the answer is $3$.

In the second example the heater at the position $1$ warms up elements $[1; 3]$ and the heater at the position $5$ warms up elements $[3; 5]$ so the answer is $2$.

In the third example there are no heaters so the answer is -1.

In the fourth example the heater at the position $3$ warms up elements $[1; 5]$, the heater at the position $6$ warms up elements $[4; 8]$ and the heater at the position $10$ warms up elements $[8; 10]$ so the answer is $3$.
"""
2022-04-19 21:29:09.776904 --------------------------
2022-04-19 21:29:09.777021 using api key derek
2022-04-19 21:29:36.484535 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if a[i] == 0:\n        for j in range(max(0, i - r + 1), min(n, i + r)):\n            if a[j] == 1:\n                a[i] = 1\n                break\n    if a[i] == 0:\n        ans = -1\n        break\n    if a[i] == 1:\n        ans += 1\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, r = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\n# If there are no heaters, then it is impossible to warm up the whole house\nif sum(a) == 0:\n    print(-1)\n    exit()\n\n# If the heater is at position 0 or n, then we can't warm up the first or last element\nif a[0] == 0 or a[-1] == 0:\n    print(-1)\n    exit()\n\n# Count the number of heaters that need to be turned on\ncount = 0\nfor i in range(n):\n    # If the current element is not a heater, then add 1 to the count\n    if a[i] == 0:\n        count += 1\n\n        # If the heater is at position 0 or n, then we can't warm up the first or last element\n        if i == 0 or i == n-1:\n            print(-1)\n            exit()\n\n        # If a heater is at position i-r, then we don't need to turn on the heater at position i\n        if a[i-r] == 1:\n            count -= 1\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\n# Read input\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# Check if there is a heater\nheater = False\nfor i in a:\n    if i == 1:\n        heater = True\n\n# If there is no heater, the answer is -1\nif not heater:\n    print(-1)\n    exit()\n\n# If there is a heater, count the number of heaters needed\nans = 0\ni = 0\nwhile i < n:\n    # If there is no heater at the current position, move to the next position\n    if a[i] == 0:\n        i += 1\n        continue\n    # If there is a heater at the current position, move to the next position that is not warmed up by the heater\n    if a[i] == 1:\n        ans += 1\n        i += 2 * r - 1\n\n# Print the answer\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, r = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n\n    if len(heaters) == 0:\n        print(-1)\n        return\n\n    ans = 1\n    prev = heaters[0]\n    for i in range(1, len(heaters)):\n        if heaters[i] - prev > r:\n            ans += 1\n            prev = heaters[i]\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef find_minimum_heaters(n, r, a):\n    if n < r:\n        return -1\n\n    heaters = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            if i >= r and a[i-r] == 0:\n                if i + r < len(a) and a[i+r] == 0:\n                    return -1\n                else:\n                    heaters += 1\n                    a[i] = 1\n                    a[i-r+1:i+1] = [1] * (r-1)\n                    if i + r < len(a):\n                        a[i+1:i+r+1] = [1] * r\n            elif i + r < len(a) and a[i+r] == 0:\n                heaters += 1\n                a[i] = 1\n                a[i+1:i+r+1] = [1] * r\n    return heaters\n\n\ndef run_tests():\n    n, r = 6, 2\n    a = [0, 1, 1, 0, 0, 1]\n    assert find_minimum_heaters(n, r, a) == 3\n\n    n, r = 5, 3\n    a = [1, 0, 0, 0, 1]\n    assert find_minimum_heaters(n, r, a) == 2\n\n    n, r = 5, 10\n    a = [0, 0, 0, 0, 0]\n    assert find_minimum_heaters(n, r, a) == -1\n\n    n, r = 10, 3\n    a = [0, 0, 1, 1, 0, 1, 0, 0, 0, 1]\n    assert find_minimum_heaters(n, r, a) == 3\n\n\nif __name__ == '__main__':\n    run_tests()\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(find_minimum_heaters(n, r, a))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, r, a)\n\ndef get_heaters(n, r, a):\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append((i + 1, i + 1))\n    return heaters\n\ndef check_heaters(n, r, a, heaters):\n    for i in range(n):\n        if a[i] == 0:\n            covered = False\n            for j in range(len(heaters)):\n                if heaters[j][0] <= i + 1 <= heaters[j][1]:\n                    covered = True\n                    break\n            if not covered:\n                return False\n    return True\n\ndef heat_up(n, r, a, heaters):\n    for i in range(n):\n        if a[i] == 0:\n            covered = False\n            for j in range(len(heaters)):\n                if heaters[j][0] <= i + 1 <= heaters[j][1]:\n                    covered = True\n                    break\n            if not covered:\n                # print(i + 1, heaters)\n                for j in range(len(heaters)):\n                    if heaters[j][0] > i + 1:\n                        heaters[j] = (i + 1, heaters[j][1])\n                        break\n                    if heaters[j][1] < i + 1:\n                        heaters[j] = (heaters[j][0], i + 1)\n                        break\n                # print(i + 1, heaters)\n    return heaters\n\ndef count_heaters(heaters):\n    return len(heaters)\n\nheaters = get_heaters(n, r, a)\n\n# print(heaters)\n\nif check_heaters(n, r, a, heaters):\n    print(count_heaters(heaters))\nelse:\n    heaters = heat_up(n, r, a, heaters)\n    # print(heaters)\n    if check_heaters(n, r, a, heaters):\n        print(count_heaters(heaters))\n    else:\n        print(-1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if n == 0:\n        print(-1)\n        return\n\n    if r == 0:\n        if sum(a) == 0:\n            print(-1)\n        else:\n            print(0)\n        return\n\n    ans = 0\n    pos = 0\n    while pos < n:\n        if a[pos] == 1:\n            pos += r\n            ans += 1\n            continue\n        else:\n            # try to find the closest heater\n            i = pos + 1\n            while i < n:\n                if a[i] == 1:\n                    break\n                i += 1\n            if i == n:\n                print(-1)\n                return\n\n            # turn on the heater at position pos\n            pos = i + r\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, r = map(int, raw_input().split())\n\na = map(int, raw_input().split())\n\nheaters = []\n\nfor i in range(n):\n    if a[i] == 1:\n        heaters.append(i)\n\n#print heaters\n\nif len(heaters) == 0:\n    print -1\n    exit()\n\nheaters.sort()\n\n#print heaters\n\nheaters.append(n)\n\nans = 1\n\nlast = heaters[0] + r - 1\n\n#print last\n\nfor i in range(1, len(heaters)):\n    if heaters[i] - r + 1 <= last:\n        last = max(last, heaters[i] + r - 1)\n    else:\n        ans += 1\n        last = heaters[i] + r - 1\n\nprint ans"
    }
  ],
  "created": 1650403749,
  "id": "cmpl-4yphFe28JAH1bJEWLuHitrF5h3aEO",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:29:36.485062 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if a[i] == 0:\n        for j in range(max(0, i - r + 1), min(n, i + r)):\n            if a[j] == 1:\n                a[i] = 1\n                break\n    if a[i] == 0:\n        ans = -1\n        break\n    if a[i] == 1:\n        ans += 1\nprint(ans)"
}
2022-04-19 21:29:36.485120 REASON stop
2022-04-19 21:29:36.485704 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, r = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\n# If there are no heaters, then it is impossible to warm up the whole house\nif sum(a) == 0:\n    print(-1)\n    exit()\n\n# If the heater is at position 0 or n, then we can't warm up the first or last element\nif a[0] == 0 or a[-1] == 0:\n    print(-1)\n    exit()\n\n# Count the number of heaters that need to be turned on\ncount = 0\nfor i in range(n):\n    # If the current element is not a heater, then add 1 to the count\n    if a[i] == 0:\n        count += 1\n\n        # If the heater is at position 0 or n, then we can't warm up the first or last element\n        if i == 0 or i == n-1:\n            print(-1)\n            exit()\n\n        # If a heater is at position i-r, then we don't need to turn on the heater at position i\n        if a[i-r] == 1:\n            count -= 1\n\nprint(count)"
}
2022-04-19 21:29:36.485772 REASON stop
2022-04-19 21:29:36.486209 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\n# Read input\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# Check if there is a heater\nheater = False\nfor i in a:\n    if i == 1:\n        heater = True\n\n# If there is no heater, the answer is -1\nif not heater:\n    print(-1)\n    exit()\n\n# If there is a heater, count the number of heaters needed\nans = 0\ni = 0\nwhile i < n:\n    # If there is no heater at the current position, move to the next position\n    if a[i] == 0:\n        i += 1\n        continue\n    # If there is a heater at the current position, move to the next position that is not warmed up by the heater\n    if a[i] == 1:\n        ans += 1\n        i += 2 * r - 1\n\n# Print the answer\nprint(ans)"
}
2022-04-19 21:29:36.486270 REASON stop
2022-04-19 21:29:36.514138 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, r = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n\n    if len(heaters) == 0:\n        print(-1)\n        return\n\n    ans = 1\n    prev = heaters[0]\n    for i in range(1, len(heaters)):\n        if heaters[i] - prev > r:\n            ans += 1\n            prev = heaters[i]\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:29:36.514265 REASON stop
2022-04-19 21:29:36.523598 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef find_minimum_heaters(n, r, a):\n    if n < r:\n        return -1\n\n    heaters = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            if i >= r and a[i-r] == 0:\n                if i + r < len(a) and a[i+r] == 0:\n                    return -1\n                else:\n                    heaters += 1\n                    a[i] = 1\n                    a[i-r+1:i+1] = [1] * (r-1)\n                    if i + r < len(a):\n                        a[i+1:i+r+1] = [1] * r\n            elif i + r < len(a) and a[i+r] == 0:\n                heaters += 1\n                a[i] = 1\n                a[i+1:i+r+1] = [1] * r\n    return heaters\n\n\ndef run_tests():\n    n, r = 6, 2\n    a = [0, 1, 1, 0, 0, 1]\n    assert find_minimum_heaters(n, r, a) == 3\n\n    n, r = 5, 3\n    a = [1, 0, 0, 0, 1]\n    assert find_minimum_heaters(n, r, a) == 2\n\n    n, r = 5, 10\n    a = [0, 0, 0, 0, 0]\n    assert find_minimum_heaters(n, r, a) == -1\n\n    n, r = 10, 3\n    a = [0, 0, 1, 1, 0, 1, 0, 0, 0, 1]\n    assert find_minimum_heaters(n, r, a) == 3\n\n\nif __name__ == '__main__':\n    run_tests()\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(find_minimum_heaters(n, r, a))"
}
2022-04-19 21:29:36.523722 REASON stop
2022-04-19 21:29:36.524567 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, r, a)\n\ndef get_heaters(n, r, a):\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append((i + 1, i + 1))\n    return heaters\n\ndef check_heaters(n, r, a, heaters):\n    for i in range(n):\n        if a[i] == 0:\n            covered = False\n            for j in range(len(heaters)):\n                if heaters[j][0] <= i + 1 <= heaters[j][1]:\n                    covered = True\n                    break\n            if not covered:\n                return False\n    return True\n\ndef heat_up(n, r, a, heaters):\n    for i in range(n):\n        if a[i] == 0:\n            covered = False\n            for j in range(len(heaters)):\n                if heaters[j][0] <= i + 1 <= heaters[j][1]:\n                    covered = True\n                    break\n            if not covered:\n                # print(i + 1, heaters)\n                for j in range(len(heaters)):\n                    if heaters[j][0] > i + 1:\n                        heaters[j] = (i + 1, heaters[j][1])\n                        break\n                    if heaters[j][1] < i + 1:\n                        heaters[j] = (heaters[j][0], i + 1)\n                        break\n                # print(i + 1, heaters)\n    return heaters\n\ndef count_heaters(heaters):\n    return len(heaters)\n\nheaters = get_heaters(n, r, a)\n\n# print(heaters)\n\nif check_heaters(n, r, a, heaters):\n    print(count_heaters(heaters))\nelse:\n    heaters = heat_up(n, r, a, heaters)\n    # print(heaters)\n    if check_heaters(n, r, a, heaters):\n        print(count_heaters(heaters))\n    else:\n        print(-1)"
}
2022-04-19 21:29:36.524660 REASON stop
2022-04-19 21:29:36.528610 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if n == 0:\n        print(-1)\n        return\n\n    if r == 0:\n        if sum(a) == 0:\n            print(-1)\n        else:\n            print(0)\n        return\n\n    ans = 0\n    pos = 0\n    while pos < n:\n        if a[pos] == 1:\n            pos += r\n            ans += 1\n            continue\n        else:\n            # try to find the closest heater\n            i = pos + 1\n            while i < n:\n                if a[i] == 1:\n                    break\n                i += 1\n            if i == n:\n                print(-1)\n                return\n\n            # turn on the heater at position pos\n            pos = i + r\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:29:36.528803 REASON stop
2022-04-19 21:29:36.530858 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, r = map(int, raw_input().split())\n\na = map(int, raw_input().split())\n\nheaters = []\n\nfor i in range(n):\n    if a[i] == 1:\n        heaters.append(i)\n\n#print heaters\n\nif len(heaters) == 0:\n    print -1\n    exit()\n\nheaters.sort()\n\n#print heaters\n\nheaters.append(n)\n\nans = 1\n\nlast = heaters[0] + r - 1\n\n#print last\n\nfor i in range(1, len(heaters)):\n    if heaters[i] - r + 1 <= last:\n        last = max(last, heaters[i] + r - 1)\n    else:\n        ans += 1\n        last = heaters[i] + r - 1\n\nprint ans"
}
2022-04-19 21:29:36.530954 REASON stop
