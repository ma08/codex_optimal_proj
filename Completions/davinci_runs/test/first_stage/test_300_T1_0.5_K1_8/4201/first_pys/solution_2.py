

# H, W, K = map(int, input().split())
# c = [list(input()) for i in range(H)]

H, W, K = 2, 3, 2
c = [['.', '.', '#'], ['#', '#', '#']]

# H, W, K = 3, 3, 5
# c = [['.', '.', '.'], ['.', '.', '.'], ['.', '.', '.']]

# H, W, K = 1, 1, 1
# c = [['#']]

# H, W, K = 3, 3, 3
# c = [['.', '.', '.'], ['.', '.', '.'], ['.', '.', '.']]

# H, W, K = 6, 6, 20
# c = [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.']]

# H, W, K = 6, 6, 20
# c = [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.']]

# H, W, K = 6, 6, 20
# c = [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.']]

# H, W, K = 6, 6, 20
# c = [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.']]

# H, W, K = 6, 6, 20
# c = [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.']]

# H, W, K = 6, 6, 20
# c = [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.']]


def main():
    # 全ての行・列の選択パターンを作成
    # 例えば、H=3, W=3のとき、
    # [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 2, 2], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 3, 3], [0, 3, 4], [0, 3, 5], [0, 4, 4], [0, 4, 5], [0, 5, 5], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 1, 5], [1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 3], [1, 3, 4], [1, 3, 5], [1, 4, 4], [1, 4, 5], [1, 5, 5], [2, 2, 2], [2, 2, 3], [2, 2, 4], [2, 2, 5], [2, 3, 3], [2, 3, 4], [2, 3, 5], [2, 4, 4], [2, 4, 5], [2, 5, 5], [3, 3, 3], [3, 3, 4], [3, 3, 5], [3, 4, 4], [3, 4, 5], [3, 5, 5], [4, 4, 4], [4, 4, 5], [4, 5, 5], [5, 5, 5]]
    # のようなリストを作成
    # このリストの要素は、[行の個数, 列の個数, 行の個数 * 列の個数]のリスト
    # 例えば、[0, 0, 0]は、行も列も選択しないパターン
    # [0, 0, 0]は、行も列も選択しないパターン
    # [0, 1, 1]は、行は選択せず、1列だけ選択するパターン
    # [0, 2, 2]は、行は選択せず、2列だけ選択するパターン
    # [0, 3, 3]は、行は選択せず、3列だけ選択するパターン
    # [0, 4, 4]は、行は選択せず、4列だけ選択するパターン
    # [0, 5, 5]は、行は選択せず、5列だけ選択するパターン
    # [1, 1, 1]は、1行だけ選択し、1列だけ選択するパターン
    # [1, 2, 2]は、1行だけ選択し、2列だけ選択するパターン
    # [1, 3, 3]は、1行だけ選択し、3列だけ選択するパターン
    # [1, 4, 4]は、1行だけ選択し、4列だけ選択するパターン
    # [1, 5, 5]は、1行だけ選択し、5列だけ選択するパターン
    # [2, 2, 2]は、2行だけ選択し、2列だけ選択するパターン
    # [2, 3, 3]は、2行だけ選択し、3列だけ選択するパターン
    # [2, 4, 4]は、2行だけ選択し、4列だけ選択するパターン
    # [2, 5, 5]は、2行だけ選択し、5列だけ選択するパターン
    # [3, 3, 3]は、3行だけ選択し、3列だけ選択するパターン
    # [3, 4, 4]は、3行だけ選択し、4列だけ選択するパターン
    # [3, 5, 5]は、3行だけ選択し、5列だけ選択するパターン
    # [4, 4, 4]は、4行だけ選択し、4列だけ選択するパターン
    # [4, 5, 5]は、4行だけ選択し、5列だけ選択するパターン
    # [5, 5, 5]は、5行だけ選択し、5列だけ選択するパターン
    pattern = [[i, j, i * j] for i in range(H + 1) for j in range(W + 1)]
    # print(pattern)

    # 全ての行・列の選択パターンについて、以下を繰り返す
    # - 一旦、全てのマスを黒マスにする
    # - 選択した行・列のマスを赤マスにする
    # 黒マスの数がKと一致したら、カウントアップする
    ans = 0
    for i, j, k in pattern:
        if k != K:
            continue
        grid = [['#'] * W for _ in range(H)]
        for row in range(H):
            if row in range(i):
                continue
            for col in range(W):
                if col in range(j):
                    continue
                grid[row][col] = '.'
        # print(grid)
        if sum([row.count('#') for row in grid]) == K:
            # print(grid)
            ans += 1
    print(ans)


if __name__ == '__main__':
    main()