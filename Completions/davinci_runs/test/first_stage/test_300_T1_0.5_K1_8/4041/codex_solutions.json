["", "\n\n# Solution 1\n\ns = input()\nt = input()\n\nlst = []\n\nfor i in range(len(s)):\n    if s[i] in t:\n        lst.append(i)\n\nif len(lst) == len(t):\n    print(0)\nelse:\n    print(len(s) - max([lst[i+1] - lst[i] for i in range(len(lst)-1)]))\n\n# Solution 2\n\ns = input()\nt = input()\n\nlst = []\n\nfor i in range(len(s)):\n    if s[i] in t:\n        lst.append(i)\n\nif len(lst) == len(t):\n    print(0)\nelse:\n    print(len(s) - max([lst[i+1] - lst[i] for i in range(len(lst)-1)]))", "\n\ndef subsequence(s, t):\n    \"\"\" Returns the maximum length of a substring of s that can be removed\n    so that t remains a subsequence of s. \"\"\"\n    # We use dynamic programming. Our state is (i, j), where i is the index\n    # of the character in s and j is the index of the character in t. We\n    # want to know the longest substring that can be removed from s[:i] so\n    # that t[:j] is a subsequence of s[:i].\n    #\n    # We can make the transition by considering whether s[i] == t[j]. If so,\n    # then we need to remove a substring from s[:i-1] so that t[:j-1] is a\n    # subsequence of s[:i-1]. If not, then we need to remove a substring from\n    # s[:i-1] so that t[:j] is a subsequence of s[:i-1].\n    #\n    # The base case is when i == 0, in which case we can remove the entire\n    # substring s[:i] and t[:j] is a subsequence.\n    #\n    # The answer is the maximum value of dp[i][j] over all i and j.\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n    return dp[n][m]\n\nprint(subsequence(input(), input()))", "\n\ndef solve(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(s) - i\n\ns = input()\nt = input()\nprint(solve(s, t))", "\n\ns = input()\nt = input()\n\ndp = [[0 for i in range(len(s))] for j in range(len(t))]\n\nfor i in range(len(t)):\n    for j in range(len(s)):\n        if i == 0 and j == 0:\n            if t[i] == s[j]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n        elif i == 0:\n            if t[i] == s[j]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j-1]\n        elif j == 0:\n            if t[i] == s[j]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j]\n        else:\n            if t[i] == s[j]:\n                dp[i][j] = max(dp[i-1][j-1]+1, dp[i-1][j], dp[i][j-1])\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n\nprint(len(s)-dp[-1][-1])", "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    len_s = len(s)\n    len_t = len(t)\n    # dp[i][j] means the max length of substring of s[0:i] and t[0:j]\n    dp = [[0 for j in range(len_t + 1)] for i in range(len_s + 1)]\n    for i in range(len_s + 1):\n        for j in range(len_t + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    print(len_s - dp[len_s][len_t])\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nsys.stdin = open('input.txt', 'r')\n\ndef find(s, t):\n\tl = 0\n\tr = len(s)\n\twhile l < r:\n\t\tm = (l + r) // 2\n\t\tif s[m] == t:\n\t\t\treturn m\n\t\telif s[m] > t:\n\t\t\tr = m\n\t\telse:\n\t\t\tl = m + 1\n\treturn -1\n\ns = input()\nt = input()\n\ni = 0\nwhile i < len(t):\n\tpos = find(s[i:], t[i])\n\tif pos == -1:\n\t\tbreak\n\telse:\n\t\ti += pos + 1\n\nprint(len(t) - i)", "\n\n# s = input()\n# t = input()\n\ns = \"bbaba\"\nt = \"bb\"\n\nl = [0 for _ in range(len(s))]\n\nfor i in range(len(s)):\n    if s[i] in t:\n        l[i] = 1\n\nfor i in range(1, len(l)):\n    l[i] += l[i - 1]\n\nmax_len = 0\nfor i in range(len(l)):\n    for j in range(i, len(l)):\n        if l[j] - l[i] + l[i] == len(t):\n            max_len = max(max_len, j - i + 1)\nprint(max_len)"]