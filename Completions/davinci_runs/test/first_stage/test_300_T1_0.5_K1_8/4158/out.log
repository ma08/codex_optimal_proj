2022-04-19 22:36:22.274571 """
There are $n$ distinct points on a coordinate line, the coordinate of $i$-th point equals to $x_i$. Choose a subset of the given set of points such that the distance between each pair of points in a subset is an integral power of two. It is necessary to consider each pair of points, not only adjacent. Note that any subset containing one element satisfies the condition above. Among all these subsets, choose a subset with maximum possible size.

In other words, you have to choose the maximum possible number of points $x_{i_1}, x_{i_2}, \dots, x_{i_m}$ such that for each pair $x_{i_j}$, $x_{i_k}$ it is true that $|x_{i_j} - x_{i_k}| = 2^d$ where $d$ is some non-negative integer number (not necessarily the same for each pair of points).


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of points.

The second line contains $n$ pairwise distinct integers $x_1, x_2, \dots, x_n$ ($-10^9 \le x_i \le 10^9$) — the coordinates of points.


-----Output-----

In the first line print $m$ — the maximum possible number of points in a subset that satisfies the conditions described above.

In the second line print $m$ integers — the coordinates of points in the subset you have chosen.

If there are multiple answers, print any of them.


-----Examples-----
Input
6
3 5 4 7 10 12

Output
3
7 3 5
Input
5
-1 2 5 8 11

Output
1
8



-----Note-----

In the first example the answer is $[7, 3, 5]$. Note, that $|7-3|=4=2^2$, $|7-5|=2=2^1$ and $|3-5|=2=2^1$. You can't find a subset having more points satisfying the required property.
"""
2022-04-19 22:36:22.274587 --------------------------
2022-04-19 22:36:22.274692 using api key gabby
2022-04-19 22:37:09.731460 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef find_subset(n, points):\n    points.sort()\n    distances = []\n    for i in range(n - 1):\n        distances.append(points[i+1] - points[i])\n    subset = []\n    i = 0\n    while i < n - 1:\n        if distances[i] == 1:\n            subset.append(points[i+1])\n            i += 1\n        elif distances[i] == 2:\n            subset.append(points[i+1])\n            i += 2\n        else:\n            i += 1\n    return subset\n\nn = int(input())\npoints = list(map(int, input().split()))\nsubset = find_subset(n, points)\nprint(len(subset))\nprint(*subset)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef solve(n, points):\n    points.sort()\n    # print(points)\n    start = 0\n    end = 1\n    max_end = 1\n    count = 0\n    while end < len(points):\n        if points[end] - points[start] == 2 ** count:\n            count += 1\n            end += 1\n            max_end = max(max_end, end)\n        elif points[end] - points[start] > 2 ** count:\n            start += 1\n            count = 0\n            end = start + 1\n        else:\n            end += 1\n    # print(max_end)\n    return points[:max_end]\n\nif __name__ == \"__main__\":\n    n = int(input())\n    points = list(map(int, input().split()))\n    ans = solve(n, points)\n    print(len(ans))\n    print(*ans)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    if n == 1:\n        print(1)\n        print(x[0])\n        return\n    if n == 2:\n        if x[0] == x[1]:\n            print(1)\n            print(x[0])\n            return\n        else:\n            print(2)\n            print(x[0], x[1])\n            return\n\n    x.sort()\n\n    x_dict = {}\n    for i in x:\n        if i not in x_dict:\n            x_dict[i] = 1\n        else:\n            x_dict[i] += 1\n\n    max_len = 0\n    max_subset = []\n\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            diff = x[j] - x[i]\n            if diff == 0:\n                continue\n            if diff % 2 == 1:\n                continue\n            diff = diff // 2\n            if x[i] + diff not in x_dict:\n                continue\n            if x[j] + diff not in x_dict:\n                continue\n            if x[i] - diff not in x_dict:\n                continue\n            if x[j] - diff not in x_dict:\n                continue\n            subset = [x[i], x[j], x[i] + diff, x[j] + diff, x[i] - diff, x[j] - diff]\n            subset.sort()\n            if len(subset) > max_len:\n                max_len = len(subset)\n                max_subset = subset\n\n    print(max_len)\n    print(*max_subset)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# SOLUTION\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nd = {}\nfor i in range(n-1):\n    for j in range(i+1, n):\n        d[a[j] - a[i]] = d.get(a[j] - a[i], 0) + 1\n\nans = 0\nfor i in d:\n    if d[i] > ans:\n        ans = d[i]\n        m = i\n\nprint(ans+1)\nfor i in a:\n    if i % m == 0:\n        print(i, end=' ')"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n\tsys.stdin = open(\"input.txt\", \"r\")\n\tsys.stdout = open(\"output.txt\", \"w\")\n\n\tn = int(input())\n\tx = list(map(int, input().split(' ')))\n\n\tx.sort()\n\tx = [0] + x\n\t# print(x)\n\n\tp = [0 for i in range(n + 1)]\n\tp[1] = 1\n\n\tfor i in range(2, n + 1):\n\t\tp[i] = p[i - 1]\n\t\tfor j in range(i - 1, 0, -1):\n\t\t\tif x[i] - x[j] in [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808, 18446744073709551616]:\n\t\t\t\tp[i] = max(p[i], p[j] + 1)\n\t\t\t\tbreak\n\n\t# print(p)\n\n\tans = []\n\ti = n\n\twhile i > 0:\n\t\tif p[i] != p[i - 1]:\n\t\t\tans.append(x[i])\n\t\t\tfor j in range(i - 1, 0, -1):\n\t\t\t\tif x[i] - x[j] in [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808, 18446744073709551616]:\n\t\t\t\t\ti = j\n\t\t\t\t\tbreak\n\n\tprint(len(ans))\n\tprint(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    result = []\n    i = 0\n    while i < n:\n        result.append(arr[i])\n        j = i + 1\n        while j < n and arr[j] - arr[i] < 10**9:\n            if arr[j] - arr[i] == 2**(len(bin(arr[j] - arr[i])) - 3):\n                result.append(arr[j])\n                i = j\n            j += 1\n        i += 1\n    print(len(result))\n    print(*result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\nn = int(input())\nx = list(map(int, input().split()))\nx.sort()\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndist = [x[i + 1] - x[i] for i in range(n - 1)]\n\nd = dist[0]\nfor i in range(1, n - 1):\n    d = gcd(d, dist[i])\n\nif d == 1:\n    print(1)\n    print(x[0])\nelse:\n    count = 0\n    for i in range(n):\n        if x[i] % d == 0:\n            count += 1\n    print(count)\n    for i in range(n):\n        if x[i] % d == 0:\n            print(x[i], end = ' ')"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    x.sort()\n    d = x[1] - x[0]\n    ans = [x[0]]\n    for i in range(1, n):\n        if x[i] - x[i-1] == d:\n            ans.append(x[i])\n        elif x[i] - x[i-1] == 2*d:\n            continue\n        else:\n            d = x[i] - x[i-1]\n            ans = [x[i-1], x[i]]\n    print(len(ans))\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650407782,
  "id": "cmpl-4yqkIHbFx0bGdnbEqOoB6JluzFVkl",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:37:09.731899 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef find_subset(n, points):\n    points.sort()\n    distances = []\n    for i in range(n - 1):\n        distances.append(points[i+1] - points[i])\n    subset = []\n    i = 0\n    while i < n - 1:\n        if distances[i] == 1:\n            subset.append(points[i+1])\n            i += 1\n        elif distances[i] == 2:\n            subset.append(points[i+1])\n            i += 2\n        else:\n            i += 1\n    return subset\n\nn = int(input())\npoints = list(map(int, input().split()))\nsubset = find_subset(n, points)\nprint(len(subset))\nprint(*subset)"
}
2022-04-19 22:37:09.731944 REASON stop
2022-04-19 22:37:09.732778 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef solve(n, points):\n    points.sort()\n    # print(points)\n    start = 0\n    end = 1\n    max_end = 1\n    count = 0\n    while end < len(points):\n        if points[end] - points[start] == 2 ** count:\n            count += 1\n            end += 1\n            max_end = max(max_end, end)\n        elif points[end] - points[start] > 2 ** count:\n            start += 1\n            count = 0\n            end = start + 1\n        else:\n            end += 1\n    # print(max_end)\n    return points[:max_end]\n\nif __name__ == \"__main__\":\n    n = int(input())\n    points = list(map(int, input().split()))\n    ans = solve(n, points)\n    print(len(ans))\n    print(*ans)"
}
2022-04-19 22:37:09.732867 REASON stop
2022-04-19 22:37:09.733306 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    if n == 1:\n        print(1)\n        print(x[0])\n        return\n    if n == 2:\n        if x[0] == x[1]:\n            print(1)\n            print(x[0])\n            return\n        else:\n            print(2)\n            print(x[0], x[1])\n            return\n\n    x.sort()\n\n    x_dict = {}\n    for i in x:\n        if i not in x_dict:\n            x_dict[i] = 1\n        else:\n            x_dict[i] += 1\n\n    max_len = 0\n    max_subset = []\n\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            diff = x[j] - x[i]\n            if diff == 0:\n                continue\n            if diff % 2 == 1:\n                continue\n            diff = diff // 2\n            if x[i] + diff not in x_dict:\n                continue\n            if x[j] + diff not in x_dict:\n                continue\n            if x[i] - diff not in x_dict:\n                continue\n            if x[j] - diff not in x_dict:\n                continue\n            subset = [x[i], x[j], x[i] + diff, x[j] + diff, x[i] - diff, x[j] - diff]\n            subset.sort()\n            if len(subset) > max_len:\n                max_len = len(subset)\n                max_subset = subset\n\n    print(max_len)\n    print(*max_subset)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:37:09.733377 REASON stop
2022-04-19 22:37:09.756961 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# SOLUTION\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nd = {}\nfor i in range(n-1):\n    for j in range(i+1, n):\n        d[a[j] - a[i]] = d.get(a[j] - a[i], 0) + 1\n\nans = 0\nfor i in d:\n    if d[i] > ans:\n        ans = d[i]\n        m = i\n\nprint(ans+1)\nfor i in a:\n    if i % m == 0:\n        print(i, end=' ')"
}
2022-04-19 22:37:09.757099 REASON stop
2022-04-19 22:37:09.771634 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n\tsys.stdin = open(\"input.txt\", \"r\")\n\tsys.stdout = open(\"output.txt\", \"w\")\n\n\tn = int(input())\n\tx = list(map(int, input().split(' ')))\n\n\tx.sort()\n\tx = [0] + x\n\t# print(x)\n\n\tp = [0 for i in range(n + 1)]\n\tp[1] = 1\n\n\tfor i in range(2, n + 1):\n\t\tp[i] = p[i - 1]\n\t\tfor j in range(i - 1, 0, -1):\n\t\t\tif x[i] - x[j] in [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808, 18446744073709551616]:\n\t\t\t\tp[i] = max(p[i], p[j] + 1)\n\t\t\t\tbreak\n\n\t# print(p)\n\n\tans = []\n\ti = n\n\twhile i > 0:\n\t\tif p[i] != p[i - 1]:\n\t\t\tans.append(x[i])\n\t\t\tfor j in range(i - 1, 0, -1):\n\t\t\t\tif x[i] - x[j] in [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808, 18446744073709551616]:\n\t\t\t\t\ti = j\n\t\t\t\t\tbreak\n\n\tprint(len(ans))\n\tprint(' '.join(map(str, ans)))\n\nif __name__ == '__main__':\n\tmain()"
}
2022-04-19 22:37:09.771806 REASON stop
2022-04-19 22:37:09.772556 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    result = []\n    i = 0\n    while i < n:\n        result.append(arr[i])\n        j = i + 1\n        while j < n and arr[j] - arr[i] < 10**9:\n            if arr[j] - arr[i] == 2**(len(bin(arr[j] - arr[i])) - 3):\n                result.append(arr[j])\n                i = j\n            j += 1\n        i += 1\n    print(len(result))\n    print(*result)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:37:09.772649 REASON stop
2022-04-19 22:37:09.775081 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\nn = int(input())\nx = list(map(int, input().split()))\nx.sort()\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndist = [x[i + 1] - x[i] for i in range(n - 1)]\n\nd = dist[0]\nfor i in range(1, n - 1):\n    d = gcd(d, dist[i])\n\nif d == 1:\n    print(1)\n    print(x[0])\nelse:\n    count = 0\n    for i in range(n):\n        if x[i] % d == 0:\n            count += 1\n    print(count)\n    for i in range(n):\n        if x[i] % d == 0:\n            print(x[i], end = ' ')"
}
2022-04-19 22:37:09.775171 REASON stop
2022-04-19 22:37:09.775785 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    x.sort()\n    d = x[1] - x[0]\n    ans = [x[0]]\n    for i in range(1, n):\n        if x[i] - x[i-1] == d:\n            ans.append(x[i])\n        elif x[i] - x[i-1] == 2*d:\n            continue\n        else:\n            d = x[i] - x[i-1]\n            ans = [x[i-1], x[i]]\n    print(len(ans))\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:37:09.775995 REASON stop
