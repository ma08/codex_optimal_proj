2022-04-19 23:32:40.061533 """
When Mr. X is away from home, he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.
You, the smartwatch, has found N routes to his home.
If Mr. X uses the i-th of these routes, he will get home in time t_i at cost c_i.
Find the smallest cost of a route that takes not longer than time T.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 100
 - 1 \leq T \leq 1000
 - 1 \leq c_i \leq 1000
 - 1 \leq t_i \leq 1000
 - The pairs (c_i, t_i) are distinct.

-----Input-----
Input is given from Standard Input in the following format:
N T
c_1 t_1
c_2 t_2
:
c_N t_N

-----Output-----
Print the smallest cost of a route that takes not longer than time T.
If there is no route that takes not longer than time T, print TLE instead.

-----Sample Input-----
3 70
7 60
1 80
4 50

-----Sample Output-----
4

 - The first route gets him home at cost 7.
 - The second route takes longer than time T = 70.
 - The third route gets him home at cost 4.
Thus, the cost 4 of the third route is the minimum.
"""
2022-04-19 23:32:40.061544 --------------------------
2022-04-19 23:32:40.061654 using api key sourya
2022-04-19 23:32:51.967603 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN, T = map(int, input().split())\n\ncost = []\nfor i in range(N):\n    c, t = map(int, input().split())\n    cost.append([c, t])\n\ncost.sort(key=lambda x: x[0])\n\nans = \"TLE\"\nfor i in range(len(cost)):\n    if cost[i][1] <= T:\n        ans = cost[i][0]\n        break\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem A\n\nif __name__ == '__main__':\n    from operator import itemgetter\n\n    routes = []\n    route_count = int(input())\n    time = int(input())\n\n    for i in range(route_count):\n        route = list(map(int, input().split()))\n        routes.append(route)\n\n    routes = sorted(routes, key=itemgetter(1))\n\n    for route in routes:\n        if route[1] <= time:\n            print(route[0])\n            exit()\n\n    print('TLE')"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, t = map(int, input().split())\nc = []\nfor _ in range(n):\n    c.append(list(map(int, input().split())))\n\nc.sort(key=lambda x: x[0])\n\nfor i in range(n):\n    if c[i][1] <= t:\n        print(c[i][0])\n        exit()\nprint('TLE')"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\n\nroute_list = []\nfor i in range(n):\n    c, t = map(int, sys.stdin.readline().split())\n    route_list.append([c, t])\n\nroute_list = sorted(route_list, key=lambda x: x[1])\n\nfor route in route_list:\n    if route[1] <= t:\n        print(route[0])\n        sys.exit()\n\nprint('TLE')"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, t = map(int, input().split())\nclist = []\nfor i in range(n):\n    c, l = map(int, input().split())\n    clist.append((c, l))\n\nclist.sort()\n\nfor i in clist:\n    if i[1] <= t:\n        print(i[0])\n        exit()\nelse:\n    print(\"TLE\")"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# N = int(input())\n# T = int(input())\n#\n# for i in range(N):\n#     c, t = map(int, input().split())\n#\n#     if t <= T:\n#         if i == 0:\n#             min_cost = c\n#         else:\n#             min_cost = min(min_cost, c)\n#\n# if i != 0:\n#     print(min_cost)\n# else:\n#     print(\"TLE\")\n\nN = int(input())\nT = int(input())\n\nmin_cost = T + 1\n\nfor i in range(N):\n    c, t = map(int, input().split())\n\n    if t <= T:\n        min_cost = min(min_cost, c)\n\nif min_cost <= T:\n    print(min_cost)\nelse:\n    print(\"TLE\")"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n#-----main-----\nn, t = map(int, input().split())\ncost = []\ntime = []\n\nfor i in range(n):\n    c, ti = map(int, input().split())\n    cost.append(c)\n    time.append(ti)\n\nif min(time) > t:\n    print('TLE')\nelse:\n    min_cost = 1000\n    for i in range(n):\n        if time[i] <= t:\n            if min_cost > cost[i]:\n                min_cost = cost[i]\n    print(min_cost)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, t = map(int, input().split())\n\nfor i in range(n):\n    c, ti = map(int, input().split())\n    if ti <= t:\n        print(c)\n        break\nelse:\n    print('TLE')"
    }
  ],
  "created": 1650411160,
  "id": "cmpl-4yrcmggWFpnUPDr5gjbNlnSTDBo4d",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 23:32:51.967968 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN, T = map(int, input().split())\n\ncost = []\nfor i in range(N):\n    c, t = map(int, input().split())\n    cost.append([c, t])\n\ncost.sort(key=lambda x: x[0])\n\nans = \"TLE\"\nfor i in range(len(cost)):\n    if cost[i][1] <= T:\n        ans = cost[i][0]\n        break\n\nprint(ans)"
}
2022-04-19 23:32:51.968011 REASON stop
2022-04-19 23:32:51.969069 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem A\n\nif __name__ == '__main__':\n    from operator import itemgetter\n\n    routes = []\n    route_count = int(input())\n    time = int(input())\n\n    for i in range(route_count):\n        route = list(map(int, input().split()))\n        routes.append(route)\n\n    routes = sorted(routes, key=itemgetter(1))\n\n    for route in routes:\n        if route[1] <= time:\n            print(route[0])\n            exit()\n\n    print('TLE')"
}
2022-04-19 23:32:51.969162 REASON stop
2022-04-19 23:32:51.969662 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, t = map(int, input().split())\nc = []\nfor _ in range(n):\n    c.append(list(map(int, input().split())))\n\nc.sort(key=lambda x: x[0])\n\nfor i in range(n):\n    if c[i][1] <= t:\n        print(c[i][0])\n        exit()\nprint('TLE')"
}
2022-04-19 23:32:51.969719 REASON stop
2022-04-19 23:32:51.992568 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\n\nroute_list = []\nfor i in range(n):\n    c, t = map(int, sys.stdin.readline().split())\n    route_list.append([c, t])\n\nroute_list = sorted(route_list, key=lambda x: x[1])\n\nfor route in route_list:\n    if route[1] <= t:\n        print(route[0])\n        sys.exit()\n\nprint('TLE')"
}
2022-04-19 23:32:51.992740 REASON stop
2022-04-19 23:32:52.009808 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, t = map(int, input().split())\nclist = []\nfor i in range(n):\n    c, l = map(int, input().split())\n    clist.append((c, l))\n\nclist.sort()\n\nfor i in clist:\n    if i[1] <= t:\n        print(i[0])\n        exit()\nelse:\n    print(\"TLE\")"
}
2022-04-19 23:32:52.009955 REASON stop
2022-04-19 23:32:52.010882 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# N = int(input())\n# T = int(input())\n#\n# for i in range(N):\n#     c, t = map(int, input().split())\n#\n#     if t <= T:\n#         if i == 0:\n#             min_cost = c\n#         else:\n#             min_cost = min(min_cost, c)\n#\n# if i != 0:\n#     print(min_cost)\n# else:\n#     print(\"TLE\")\n\nN = int(input())\nT = int(input())\n\nmin_cost = T + 1\n\nfor i in range(N):\n    c, t = map(int, input().split())\n\n    if t <= T:\n        min_cost = min(min_cost, c)\n\nif min_cost <= T:\n    print(min_cost)\nelse:\n    print(\"TLE\")"
}
2022-04-19 23:32:52.010988 REASON stop
2022-04-19 23:32:52.011835 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n#-----main-----\nn, t = map(int, input().split())\ncost = []\ntime = []\n\nfor i in range(n):\n    c, ti = map(int, input().split())\n    cost.append(c)\n    time.append(ti)\n\nif min(time) > t:\n    print('TLE')\nelse:\n    min_cost = 1000\n    for i in range(n):\n        if time[i] <= t:\n            if min_cost > cost[i]:\n                min_cost = cost[i]\n    print(min_cost)"
}
2022-04-19 23:32:52.011966 REASON stop
2022-04-19 23:32:52.012863 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, t = map(int, input().split())\n\nfor i in range(n):\n    c, ti = map(int, input().split())\n    if ti <= t:\n        print(c)\n        break\nelse:\n    print('TLE')"
}
2022-04-19 23:32:52.013049 REASON stop
