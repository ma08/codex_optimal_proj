["\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        if n == 1:\n            print(0)\n        elif m == 0:\n            print(2*(n-1))\n        elif m < n:\n            print(2*(n-m) + 2*(m-1))\n        else:\n            print(2*(n-1))\n\nif __name__ == '__main__':\n    main()", "\n\n# cook your dish here\nt=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n    if n==1:\n        print(0)\n    else:\n        print((m-n+1)*2)", "\n\nimport sys\nimport math\n\ndef solve(n, m):\n    \"\"\"\n    n: length of array\n    m: sum of array\n    \"\"\"\n    if n == 1: return 0\n    if m == 0: return n-1\n    if m == 1: return n-2\n    if m == 2: return n-1\n    if m == 3: return n-2\n    if m == 4: return n-1\n    if m == 5: return n\n    if m == 6: return n\n    if m == 7: return n-1\n    if m == 8: return n\n    if m == 9: return n\n    if m == 10: return n\n    if m == 11: return n-1\n    if m == 12: return n\n    if m == 13: return n\n    if m == 14: return n\n    if m == 15: return n-1\n    if m == 16: return n\n    if m == 17: return n\n    if m == 18: return n\n    if m == 19: return n\n    if m == 20: return n\n    if m == 21: return n-1\n\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101\n\n    if m % 2 == 0:\n        return n-1 + ((m-2) // 2)\n    else:\n        return n-2 + ((m-3) // 2)\n\nt = int(input())\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    print(solve(n, m))", "\n\nimport math\n\nt = int(input())\n\nfor i in range(t):\n    n, m = map(int, input().split())\n    print((n-1)*min(m, n-m))", "\n\nimport sys\nimport math\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n, m = [int(x) for x in input().split()]\n        if n == 1:\n            print(0)\n        elif n == 2:\n            print(m)\n        elif m == 1:\n            print(n - 1)\n        else:\n            print(max(m - 1, (m - 1) * (n - 2) + 1))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        if n == 1:\n            print(0)\n        elif n == 2:\n            print(2)\n        elif n == 3:\n            print(m-1)\n        else:\n            if m % 2 == 0:\n                print(m - 1)\n            else:\n                print(m)\n\nmain()", "\n\n# SOLUTION\n# This is a greedy problem.\n# We can start from the middle of the array and continue to fill the array\n# with the maximum possible number of elements.\n\n# We will use a function to calculate the maximum possible sum of absolute\n# differences between adjacent numbers in the array\n# for a given number of elements and a given sum.\n\n# This function will return the maximum possible sum of absolute\n# differences between adjacent numbers in the array\n# for a given number of elements and a given sum.\n# The array will be filled with the maximum possible number of elements\n# starting from the middle.\ndef max_sum_of_absolute_differences(n, m):\n    \n    # If n is odd, the middle element will be the maximum possible number,\n    # which is m divided by n.\n    # If n is even, the middle element will be the maximum possible number,\n    # which is m divided by n, minus one.\n    # We will use this middle element to start filling the array.\n    if n % 2 == 1:\n        middle_element = m // n\n    else:\n        middle_element = m // n - 1\n    \n    # We will use a variable to keep track of the sum of the array.\n    # We will use this variable to check if we can add another element\n    # to the array.\n    sum_of_array = middle_element\n    \n    # We will use a variable to keep track of the sum of absolute\n    # differences between adjacent numbers in the array.\n    # We will use this variable to check if we can add another element\n    # to the array.\n    sum_of_absolute_differences = 0\n    \n    # We will use a variable to keep track of the current element.\n    # We will use this variable to check if we can add another element\n    # to the array.\n    current_element = middle_element\n    \n    # We will use a variable to keep track of the number of elements\n    # in the array.\n    # We will use this variable to check if we can add another element\n    # to the array.\n    number_of_elements = 1\n    \n    # We will use a variable to keep track of the maximum possible number\n    # of elements in the array.\n    # We will use this variable to check if we can add another element\n    # to the array.\n    max_number_of_elements = n // 2\n    \n    # We will use a variable to keep track of the number of elements\n    # in the array.\n    # We will use this variable to check if we can add another element\n    # to the array.\n    number_of_elements_after_middle = 0\n    \n    # We will use a variable to keep track of the maximum possible number\n    # of elements in the array.\n    # We will use this variable to check if we can add another element\n    # to the array.\n    max_number_of_elements_after_middle = n // 2\n    \n    # We will use a variable to keep track of the maximum possible number\n    # of elements in the array.\n    # We will use this variable to check if we can add another element\n    # to the array.\n    max_number_of_elements_before_middle = n // 2\n    \n    # We will use a variable to keep track of the number of elements\n    # in the array.\n    # We will use this variable to check if we can add another element\n    # to the array.\n    number_of_elements_before_middle = 0\n    \n    # We will use a while loop to fill the array with the maximum\n    # possible number of elements.\n    while True:\n        \n        # We will use an if statement to check if we can add another\n        # element to the array before the middle element.\n        if number_of_elements_before_middle < max_number_of_elements_before_middle:\n            \n            # We will use a nested if statement to check if we can add\n            # another element to the array before the middle element.\n            if current_element > 0 and current_element * number_of_elements + sum_of_array <= m:\n                \n                # We will add another element to the array before the\n                # middle element.\n                current_element -= 1\n                \n                # We will update the sum of the array.\n                sum_of_array += current_element\n                \n                # We will update the sum of absolute differences between\n                # adjacent numbers in the array.\n                sum_of_absolute_differences += current_element\n                \n                # We will update the number of elements in the array.\n                number_of_elements += 1\n                \n                # We will update the number of elements in the array\n                # before the middle element.\n                number_of_elements_before_middle += 1\n                \n                # We will update the number of elements in the array\n                # after the middle element.\n                number_of_elements_after_middle = number_of_elements - number_of_elements_before_middle - 1\n        \n        # We will use an if statement to check if we can add another\n        # element to the array after the middle element.\n        if number_of_elements_after_middle < max_number_of_elements_after_middle:\n            \n            # We will use a nested if statement to check if we can add\n            # another element to the array after the middle element.\n            if current_element * number_of_elements + sum_of_array <= m:\n                \n                # We will add another element to the array after the\n                # middle element.\n                current_element += 1\n                \n                # We will update the sum of the array.\n                sum_of_array += current_element\n                \n                # We will update the sum of absolute differences between\n                # adjacent numbers in the array.\n                sum_of_absolute_differences += current_element\n                \n                # We will update the number of elements in the array.\n                number_of_elements += 1\n                \n                # We will update the number of elements in the array\n                # after the middle element.\n                number_of_elements_after_middle += 1\n                \n                # We will update the number of elements in the array\n                # before the middle element.\n                number_of_elements_before_middle = number_of_elements - number_of_elements_after_middle - 1\n        \n        # We will use an if statement to check if we can add another\n        # element to the array before the middle element.\n        if number_of_elements_before_middle < max_number_of_elements_before_middle:\n            \n            # We will use a nested if statement to check if we can add\n            # another element to the array before the middle element.\n            if current_element > 0 and current_element * number_of_elements + sum_of_array <= m:\n                \n                # We will add another element to the array before the\n                # middle element.\n                current_element -= 1\n                \n                # We will update the sum of the array.\n                sum_of_array += current_element\n                \n                # We will update the sum of absolute differences between\n                # adjacent numbers in the array.\n                sum_of_absolute_differences += current_element\n                \n                # We will update the number of elements in the array.\n                number_of_elements += 1\n                \n                # We will update the number of elements in the array\n                # before the middle element.\n                number_of_elements_before_middle += 1\n                \n                # We will update the number of elements in the array\n                # after the middle element.\n                number_of_elements_after_middle = number_of_elements - number_of_elements_before_middle - 1\n        \n        # We will use an if statement to check if we can add another\n        # element to the array after the middle element.\n        if number_of_elements_after_middle < max_number_of_elements_after_middle:\n            \n            # We will use a nested if statement to check if we can add\n            # another element to the array after the middle element.\n            if current_element * number_of_elements + sum_of_array <= m:\n                \n                # We will add another element to the array after the\n                # middle element.\n                current_element += 1\n                \n                # We will update the sum of the array.\n                sum_of_array += current_element\n                \n                # We will update the sum of absolute differences between\n                # adjacent numbers in the array.\n                sum_of_absolute_differences += current_element\n                \n                # We will update the number of elements in the array.\n                number_of_elements += 1\n                \n                # We will update the number of elements in the array\n                # after the middle element.\n                number_of_elements_after_middle += 1\n                \n                # We will update the number of elements in the array\n                # before the middle element.\n                number_of_elements_before_middle = number_of_elements - number_of_elements_after_middle - 1\n        \n        # We will use an if statement to check if we cannot add another\n        # element to the array.\n        if (number_of_elements_after_middle == max_number_of_elements_after_middle and\n            number_of_elements_before_middle == max_number_of_elements_before_middle):\n            \n            # We will break out of the while loop.\n            break\n    \n    # We will return the maximum possible sum of absolute differences\n    # between adjacent numbers in the array.\n    return sum_of_absolute_differences\n\n# We will use a for loop to iterate through the test cases.\nfor _ in range(int(input())):\n    \n    # We will use a list to get the input for the test case.\n    l = [int(x) for x in input().split()]\n    \n    # We will use the function to calculate the maximum possible sum\n    # of absolute differences between adjacent numbers in the array\n    # for a given number of elements and a given sum.\n    # We will print the result.\n    print(max_sum_of_absolute_differences(l[0], l[1]))", "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = map(int, input().split())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(m)\n    else:\n        print(m*2)"]