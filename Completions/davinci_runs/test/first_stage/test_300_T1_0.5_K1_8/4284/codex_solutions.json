["\n\nimport sys\n\ndef solve(k,n,a,b):\n    if k<a and k<b:\n        return -1\n    if k<a:\n        return 0\n    if a<=b:\n        return n\n    if k<a+b:\n        return 1\n    if k==a+b:\n        return n-1\n    if k==a+b+1:\n        return n-2\n    return n-2-((k-a-b-2)//(b-1))\n\nq = int(input())\nfor i in range(q):\n    k,n,a,b = map(int,input().split())\n    print(solve(k,n,a,b))", "\n\n\n# TODO: implement the solution\ndef solve(k, n, a, b):\n    return -1\n\n\n# TODO: implement the parser\ndef parse():\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        yield k, n, a, b\n\n\ndef main():\n    for args in parse():\n        print(solve(*args))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef solve(k, n, a, b):\n    if (k - n * a) < 0:\n        return -1\n    if (k - n * a) % (a - b) == 0:\n        return n - (k - n * a) // (a - b)\n    else:\n        return n - (k - n * a) // (a - b) - 1\n\n\nif __name__ == '__main__':\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(solve(k, n, a, b))", "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline().strip())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().strip().split())\n        if k >= a*n:\n            print(n)\n            continue\n        if k < b*n:\n            print(-1)\n            continue\n        print(int(k/a))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    queries = int(input())\n    for i in range(queries):\n        k, n, a, b = map(int, input().split())\n        if k < n*b:\n            print(-1)\n        else:\n            print(k-n*b)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\n\nimport sys\n\ndef get_maximum_play_turns(k, n, a, b):\n    if k < a:\n        return -1\n    elif a == b:\n        return n\n    elif k == a:\n        return n - 1\n    elif k == b:\n        return n\n    else:\n        if n == 1:\n            return 1\n        else:\n            return get_maximum_play_turns(k - a, n - 1, a, b) + 1\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        print(get_maximum_play_turns(k, n, a, b))\n\nif __name__ == \"__main__\":\n    main()", "\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    if b > k or a > k or b > k - n:\n        print(-1)\n        continue\n    if a > k - n:\n        print(n)\n        continue\n    if b > k - n:\n        print(n - (a - b))\n        continue\n    if a <= b:\n        print(k // a)\n        continue\n    print(n - (a - b) - (k - n - b) // a)", "\n\n# SOLUTION\n# This is a greedy problem.\n# We can just play as many times as possible, and then play and charge as many times as possible\n# until the end of the game.\n\n# The first thing we need to do is figure out how many times we can just play.\n# We can do this by dividing the initial charge by the charge used for just playing.\n# The result is the number of times we can just play.\n# We can then subtract this number from the total number of turns in the game.\n# The result is the number of times we can play and charge.\n# If the number of times we can play and charge is at least 1, then we can complete the game.\n# Otherwise, we cannot.\n\n# The second thing we need to do is figure out how many times we can play and charge.\n# We can do this by dividing the initial charge by the charge used for playing and charging.\n# The result is the number of times we can play and charge.\n\n# The third thing we need to do is figure out how many times we can just play.\n# We can do this by subtracting the number of times we can play and charge from the total number of turns.\n# The result is the number of times we can just play.\n\n# We can then print the number of times we can just play, or -1 if we cannot complete the game.\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    if k < a and k < b:\n        print(-1)\n    else:\n        print(k // a - min(k // a, n - k // b))"]