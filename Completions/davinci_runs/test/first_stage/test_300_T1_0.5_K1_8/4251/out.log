2022-04-19 23:24:43.302310 """
You are given a matrix $a$, consisting of $n$ rows and $m$ columns. Each cell contains an integer in it.

You can change the order of rows arbitrarily (including leaving the initial order), but you can't change the order of cells in a row. After you pick some order of rows, you traverse the whole matrix the following way: firstly visit all cells of the first column from the top row to the bottom one, then the same for the second column and so on. During the traversal you write down the sequence of the numbers on the cells in the same order you visited them. Let that sequence be $s_1, s_2, \dots, s_{nm}$. 

The traversal is $k$-acceptable if for all $i$ ($1 \le i \le nm - 1$) $|s_i - s_{i + 1}| \ge k$.

Find the maximum integer $k$ such that there exists some order of rows of matrix $a$ that it produces a $k$-acceptable traversal.


-----Input-----

The first line contains two integers $n$ and $m$ ($1 \le n \le 16$, $1 \le m \le 10^4$, $2 \le nm$) — the number of rows and the number of columns, respectively.

Each of the next $n$ lines contains $m$ integers ($1 \le a_{i, j} \le 10^9$) — the description of the matrix.


-----Output-----

Print a single integer $k$ — the maximum number such that there exists some order of rows of matrix $a$ that it produces an $k$-acceptable traversal.


-----Examples-----
Input
4 2
9 9
10 8
5 3
4 3

Output
5

Input
2 4
1 2 3 4
10 3 7 3

Output
0

Input
6 1
3
6
2
5
1
4

Output
3



-----Note-----

In the first example you can rearrange rows as following to get the $5$-acceptable traversal:

5 3

10 8

4 3

9 9



Then the sequence $s$ will be $[5, 10, 4, 9, 3, 8, 3, 9]$. Each pair of neighbouring elements have at least $k = 5$ difference between them.

In the second example the maximum $k = 0$, any order is $0$-acceptable.

In the third example the given order is already $3$-acceptable, you can leave it as it is.
"""
2022-04-19 23:24:43.302332 --------------------------
2022-04-19 23:24:43.302440 using api key sourya
2022-04-19 23:24:43.471252 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-19 23:24:48.476640 """
You are given a matrix $a$, consisting of $n$ rows and $m$ columns. Each cell contains an integer in it.

You can change the order of rows arbitrarily (including leaving the initial order), but you can't change the order of cells in a row. After you pick some order of rows, you traverse the whole matrix the following way: firstly visit all cells of the first column from the top row to the bottom one, then the same for the second column and so on. During the traversal you write down the sequence of the numbers on the cells in the same order you visited them. Let that sequence be $s_1, s_2, \dots, s_{nm}$. 

The traversal is $k$-acceptable if for all $i$ ($1 \le i \le nm - 1$) $|s_i - s_{i + 1}| \ge k$.

Find the maximum integer $k$ such that there exists some order of rows of matrix $a$ that it produces a $k$-acceptable traversal.


-----Input-----

The first line contains two integers $n$ and $m$ ($1 \le n \le 16$, $1 \le m \le 10^4$, $2 \le nm$) — the number of rows and the number of columns, respectively.

Each of the next $n$ lines contains $m$ integers ($1 \le a_{i, j} \le 10^9$) — the description of the matrix.


-----Output-----

Print a single integer $k$ — the maximum number such that there exists some order of rows of matrix $a$ that it produces an $k$-acceptable traversal.


-----Examples-----
Input
4 2
9 9
10 8
5 3
4 3

Output
5

Input
2 4
1 2 3 4
10 3 7 3

Output
0

Input
6 1
3
6
2
5
1
4

Output
3



-----Note-----

In the first example you can rearrange rows as following to get the $5$-acceptable traversal:

5 3

10 8

4 3

9 9



Then the sequence $s$ will be $[5, 10, 4, 9, 3, 8, 3, 9]$. Each pair of neighbouring elements have at least $k = 5$ difference between them.

In the second example the maximum $k = 0$, any order is $0$-acceptable.

In the third example the given order is already $3$-acceptable, you can leave it as it is.
"""
2022-04-19 23:24:48.476679 --------------------------
2022-04-19 23:24:48.476881 using api key sourya
2022-04-19 23:25:08.856385 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\na.sort()\n\nans = 0\nfor i in range(m):\n    for j in range(1, n):\n        ans = max(ans, abs(a[j][i] - a[j - 1][i]))\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, M = [int(i) for i in input().split()]\n    A = []\n    for i in range(N):\n        A.append([int(i) for i in input().split()])\n    A = sorted(A, key=lambda x: (x[0], sum(x)))\n    print(max(abs(A[i][0] - A[i+1][0]) for i in range(N-1)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport numpy as np\n\n# read input\nn, m = map(int, input().split())\na = np.empty((n, m))\nfor i in range(n):\n    a[i] = np.array(input().split(), dtype=np.int)\n\n# find the maximum difference between elements in the same row\nk = np.zeros(n)\nfor i in range(n):\n    k[i] = max(a[i]) - min(a[i])\n\n# find the minimum difference between rows\nk_min = min(np.diff(np.sort(k)))\n\n# output\nprint(int(k_min))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\na.sort(key=lambda x: x[0])\n\nfor i in range(1, m):\n    a.sort(key=lambda x: x[i])\n\ndiffs = []\nfor row in a:\n    for i in range(1, m):\n        diffs.append(abs(row[i] - row[i-1]))\n\nprint(max(diffs))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n\tn, m = map(int, sys.stdin.readline().split())\n\n\ta = []\n\tfor i in range(n):\n\t\ta.append(map(int, sys.stdin.readline().split()))\n\n\ta.sort(key=lambda x: max(x))\n\n\ts = []\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\ts.append(a[j][i])\n\n\tk = 0\n\tfor i in range(len(s) - 1):\n\t\tk = max(k, abs(s[i] - s[i + 1]))\n\n\tprint k\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# The problem is to find the minimum distance between two adjacent numbers in the sorted array of the matrix.\n# The answer is the difference between the minimum and the second minimum number in the array.\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n# print(n, m)\n# print(a)\n\nb = []\nfor i in range(n):\n    for j in range(m):\n        b.append(a[i][j])\n\n# print(b)\nb.sort()\n# print(b)\n\ns = set()\nfor i in range(len(b) - 1):\n    s.add(b[i + 1] - b[i])\n\n# print(s)\n\nif len(s) == 1:\n    print(0)\nelse:\n    print(min(s))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef check_acceptable(a, k):\n    n = len(a)\n    m = len(a[0])\n    s = []\n    for j in range(m):\n        for i in range(n):\n            s.append(a[i][j])\n    for i in range(len(s) - 1):\n        if abs(s[i] - s[i + 1]) < k:\n            return False\n    return True\n\ndef find_max_acceptable(a):\n    n = len(a)\n    m = len(a[0])\n    max_k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            a[i], a[j] = a[j], a[i]\n            for k in range(max_k, min(a[i]) - max(a[j]), -1):\n                if check_acceptable(a, k):\n                    max_k = k\n                    break\n            a[i], a[j] = a[j], a[i]\n    return max_k\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(find_max_acceptable(a))"
    }
  ],
  "created": 1650410688,
  "id": "cmpl-4yrVAZ2qxS3HSqoMwVMak1vmSpKMa",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 23:25:08.856872 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\na.sort()\n\nans = 0\nfor i in range(m):\n    for j in range(1, n):\n        ans = max(ans, abs(a[j][i] - a[j - 1][i]))\nprint(ans)"
}
2022-04-19 23:25:08.856923 REASON stop
2022-04-19 23:25:08.857467 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, M = [int(i) for i in input().split()]\n    A = []\n    for i in range(N):\n        A.append([int(i) for i in input().split()])\n    A = sorted(A, key=lambda x: (x[0], sum(x)))\n    print(max(abs(A[i][0] - A[i+1][0]) for i in range(N-1)))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:25:08.857537 REASON stop
2022-04-19 23:25:08.857920 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": ""
}
2022-04-19 23:25:08.857973 REASON stop
2022-04-19 23:25:08.881906 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport numpy as np\n\n# read input\nn, m = map(int, input().split())\na = np.empty((n, m))\nfor i in range(n):\n    a[i] = np.array(input().split(), dtype=np.int)\n\n# find the maximum difference between elements in the same row\nk = np.zeros(n)\nfor i in range(n):\n    k[i] = max(a[i]) - min(a[i])\n\n# find the minimum difference between rows\nk_min = min(np.diff(np.sort(k)))\n\n# output\nprint(int(k_min))"
}
2022-04-19 23:25:08.882038 REASON stop
2022-04-19 23:25:08.891552 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\na.sort(key=lambda x: x[0])\n\nfor i in range(1, m):\n    a.sort(key=lambda x: x[i])\n\ndiffs = []\nfor row in a:\n    for i in range(1, m):\n        diffs.append(abs(row[i] - row[i-1]))\n\nprint(max(diffs))"
}
2022-04-19 23:25:08.891684 REASON stop
2022-04-19 23:25:08.894833 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n\tn, m = map(int, sys.stdin.readline().split())\n\n\ta = []\n\tfor i in range(n):\n\t\ta.append(map(int, sys.stdin.readline().split()))\n\n\ta.sort(key=lambda x: max(x))\n\n\ts = []\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\ts.append(a[j][i])\n\n\tk = 0\n\tfor i in range(len(s) - 1):\n\t\tk = max(k, abs(s[i] - s[i + 1]))\n\n\tprint k\n\nif __name__ == '__main__':\n\tmain()"
}
2022-04-19 23:25:08.894944 REASON stop
2022-04-19 23:25:08.895639 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# The problem is to find the minimum distance between two adjacent numbers in the sorted array of the matrix.\n# The answer is the difference between the minimum and the second minimum number in the array.\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n# print(n, m)\n# print(a)\n\nb = []\nfor i in range(n):\n    for j in range(m):\n        b.append(a[i][j])\n\n# print(b)\nb.sort()\n# print(b)\n\ns = set()\nfor i in range(len(b) - 1):\n    s.add(b[i + 1] - b[i])\n\n# print(s)\n\nif len(s) == 1:\n    print(0)\nelse:\n    print(min(s))"
}
2022-04-19 23:25:08.895811 REASON stop
2022-04-19 23:25:08.898923 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef check_acceptable(a, k):\n    n = len(a)\n    m = len(a[0])\n    s = []\n    for j in range(m):\n        for i in range(n):\n            s.append(a[i][j])\n    for i in range(len(s) - 1):\n        if abs(s[i] - s[i + 1]) < k:\n            return False\n    return True\n\ndef find_max_acceptable(a):\n    n = len(a)\n    m = len(a[0])\n    max_k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            a[i], a[j] = a[j], a[i]\n            for k in range(max_k, min(a[i]) - max(a[j]), -1):\n                if check_acceptable(a, k):\n                    max_k = k\n                    break\n            a[i], a[j] = a[j], a[i]\n    return max_k\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(find_max_acceptable(a))"
}
2022-04-19 23:25:08.899016 REASON stop
