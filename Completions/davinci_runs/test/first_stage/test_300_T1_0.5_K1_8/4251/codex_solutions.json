["", "\n\nimport numpy as np\n\n# read input\nn, m = map(int, input().split())\na = np.empty((n, m))\nfor i in range(n):\n    a[i] = np.array(input().split(), dtype=np.int)\n\n# find the maximum difference between elements in the same row\nk = np.zeros(n)\nfor i in range(n):\n    k[i] = max(a[i]) - min(a[i])\n\n# find the minimum difference between rows\nk_min = min(np.diff(np.sort(k)))\n\n# output\nprint(int(k_min))", "\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\na.sort(key=lambda x: x[0])\n\nfor i in range(1, m):\n    a.sort(key=lambda x: x[i])\n\ndiffs = []\nfor row in a:\n    for i in range(1, m):\n        diffs.append(abs(row[i] - row[i-1]))\n\nprint(max(diffs))", "\n\ndef main():\n    N, M = [int(i) for i in input().split()]\n    A = []\n    for i in range(N):\n        A.append([int(i) for i in input().split()])\n    A = sorted(A, key=lambda x: (x[0], sum(x)))\n    print(max(abs(A[i][0] - A[i+1][0]) for i in range(N-1)))\n\nif __name__ == '__main__':\n    main()", "\n\n# SOLUTION\n# The problem is to find the minimum distance between two adjacent numbers in the sorted array of the matrix.\n# The answer is the difference between the minimum and the second minimum number in the array.\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n# print(n, m)\n# print(a)\n\nb = []\nfor i in range(n):\n    for j in range(m):\n        b.append(a[i][j])\n\n# print(b)\nb.sort()\n# print(b)\n\ns = set()\nfor i in range(len(b) - 1):\n    s.add(b[i + 1] - b[i])\n\n# print(s)\n\nif len(s) == 1:\n    print(0)\nelse:\n    print(min(s))", "\n\nimport sys\n\ndef main():\n\tn, m = map(int, sys.stdin.readline().split())\n\n\ta = []\n\tfor i in range(n):\n\t\ta.append(map(int, sys.stdin.readline().split()))\n\n\ta.sort(key=lambda x: max(x))\n\n\ts = []\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\ts.append(a[j][i])\n\n\tk = 0\n\tfor i in range(len(s) - 1):\n\t\tk = max(k, abs(s[i] - s[i + 1]))\n\n\tprint k\n\nif __name__ == '__main__':\n\tmain()", "\n\ndef check_acceptable(a, k):\n    n = len(a)\n    m = len(a[0])\n    s = []\n    for j in range(m):\n        for i in range(n):\n            s.append(a[i][j])\n    for i in range(len(s) - 1):\n        if abs(s[i] - s[i + 1]) < k:\n            return False\n    return True\n\ndef find_max_acceptable(a):\n    n = len(a)\n    m = len(a[0])\n    max_k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            a[i], a[j] = a[j], a[i]\n            for k in range(max_k, min(a[i]) - max(a[j]), -1):\n                if check_acceptable(a, k):\n                    max_k = k\n                    break\n            a[i], a[j] = a[j], a[i]\n    return max_k\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(find_max_acceptable(a))", "\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\na.sort()\n\nans = 0\nfor i in range(m):\n    for j in range(1, n):\n        ans = max(ans, abs(a[j][i] - a[j - 1][i]))\nprint(ans)"]