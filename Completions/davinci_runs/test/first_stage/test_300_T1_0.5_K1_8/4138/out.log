2022-04-19 22:20:05.617959 """
The only difference between the easy and the hard versions is the maximum value of $k$.

You are given an infinite sequence of form "112123123412345$\dots$" which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from $1$ to $1$, the second one — from $1$ to $2$, the third one — from $1$ to $3$, $\dots$, the $i$-th block consists of all numbers from $1$ to $i$. 

So the first $56$ elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the $1$-st element of the sequence is $1$, the $3$-rd element of the sequence is $2$, the $20$-th element of the sequence is $5$, the $38$-th element is $2$, the $56$-th element of the sequence is $0$.

Your task is to answer $q$ independent queries. In the $i$-th query you are given one integer $k_i$. Calculate the digit at the position $k_i$ of the sequence.


-----Input-----

The first line of the input contains one integer $q$ ($1 \le q \le 500$) — the number of queries.

The $i$-th of the following $q$ lines contains one integer $k_i$ $(1 \le k_i \le 10^{18})$ — the description of the corresponding query.


-----Output-----

Print $q$ lines. In the $i$-th line print one digit $x_i$ $(0 \le x_i \le 9)$ — the answer to the query $i$, i.e. $x_i$ should be equal to the element at the position $k_i$ of the sequence.


-----Examples-----
Input
5
1
3
20
38
56

Output
1
2
5
2
0

Input
4
2132
506
999999999999999999
1000000000000000000

Output
8
2
4
1



-----Note-----

Answers on queries from the first example are described in the problem statement.
"""
2022-04-19 22:20:05.617976 --------------------------
2022-04-19 22:20:05.618079 using api key gabby
2022-04-19 22:21:29.444665 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef solve(q):\n\tfor k in q:\n\t\tif k == 1:\n\t\t\tyield 1\n\t\telif k == 2:\n\t\t\tyield 1\n\t\telif k == 3:\n\t\t\tyield 2\n\t\telse:\n\t\t\t# find the block\n\t\t\tblock = math.floor(math.sqrt(k))\n\t\t\tif block == math.sqrt(k):\n\t\t\t\tblock -= 1\n\t\t\t# find the element in the block\n\t\t\tel = k - block * (block + 1)\n\t\t\t# find the digit\n\t\t\tdigit = str(block)[el - 1]\n\t\t\tyield int(digit)\n\nif __name__ == '__main__':\n\tq = int(sys.stdin.readline().strip())\n\tq = [int(sys.stdin.readline().strip()) for _ in range(q)]\n\tans = solve(q)\n\tprint(*ans,sep='\\n')"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# Solution\n\nq = int(input())\nfor i in range(q):\n\tk = int(input())\n\tn = int(k**0.5)\n\tif n*(n+1) < k:\n\t\tn+=1\n\tk -= n*(n-1)\n\tprint(str(n)[k-1])"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#We can use the formula for the sum of an arithmetic progression\n#to get the position of the digit in the sequence\n#(i.e. the sum of the numbers from 1 to n)\n\ndef sumOfAP(n):\n    return n*(n+1)/2\n\ndef getDigit(k):\n    n = 1\n    while(sumOfAP(n) < k):\n        n += 1\n    return k - sumOfAP(n-1)\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(int(str(n)[int(getDigit(k))-1]))"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\nimport math\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn(n):\n    return int(math.log10(n)) + 1\n\n# This function returns the number of digits in the number n\ndef digitsIn2(n):\n    return len(str(n))\n\n# This function returns the number of digits in the number n\ndef digitsIn3(n):\n    if n == 0:\n        return 1\n    return int(math.floor(math.log10(n)) + 1)\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn4(n):\n    digits = 0\n    while n:\n        digits += 1\n        n //= 10\n    return digits\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn5(n):\n    digits = 0\n    while n >= 1:\n        digits += 1\n        n /= 10\n    return digits\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn6(n):\n    digits = 0\n    while n > 0:\n        digits += 1\n        n = n // 10\n    return digits\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn7(n):\n    if n == 0:\n        return 1\n    else:\n        return int(math.log10(n))+1\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn8(n):\n    if n == 0:\n        return 1\n    return int(math.log10(n)) + 1\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn9(n):\n    if n == 0:\n        return 1\n    return int(math.ceil(math.log10(n)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn10(n):\n    if n == 0:\n        return 1\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn11(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.floor(math.log10(n))) + 1\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn12(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.floor(math.log10(n))) + 1\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn13(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn14(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn15(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn16(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn17(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn18(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn19(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn20(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn21(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn22(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn23(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn24(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn25(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn26(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn27(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn28(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn29(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn30(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn31(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn32(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn33(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn34(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn35(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn36(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn37(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn38(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\nimport time\n\nclass Problem:\n    def __init__(self, inp, out):\n        self.input = inp\n        self.output = out\n        self.blockSize = [1]\n        self.blockDigits = [1]\n        self.blockStart = [1]\n        self.blockEnd = [1]\n        self.blockDigitsSum = [1]\n        self.blockStartSum = [1]\n        self.blockEndSum = [1]\n        self.blockDigitsSumSq = [1]\n        self.blockStartSumSq = [1]\n        self.blockEndSumSq = [1]\n        self.blockDigitsSumSqrt = [1]\n        self.blockStartSumSqrt = [1]\n        self.blockEndSumSqrt = [1]\n        self.blockDigitsSumSqrtSq = [1]\n        self.blockStartSumSqrtSq = [1]\n        self.blockEndSumSqrtSq = [1]\n    \n    def solve(self):\n        inp = self.input\n        out = self.output\n        q = int(inp.readline())\n        for i in range(q):\n            k = int(inp.readline())\n            ans = self.getDigitAt(k)\n            out.write(str(ans) + \"\\n\")\n    \n    def getDigitAt(self, k):\n        if k == 1:\n            return 1\n        if self.getBlockId(k) == len(self.blockSize):\n            self.growBlock()\n        return self.findDigit(k)\n    \n    def getBlockId(self, k):\n        l = 0\n        r = len(self.blockSize)\n        while l + 1 < r:\n            m = (l + r) // 2\n            if self.blockEnd[m] < k:\n                l = m\n            else:\n                r = m\n        return l\n    \n    def growBlock(self):\n        b = len(self.blockSize)\n        self.blockSize.append(self.blockSize[-1] + b + 1)\n        self.blockDigits.append(self.blockDigits[-1] + b + 1)\n        self.blockStart.append(self.blockEnd[-1] + 1)\n        self.blockEnd.append(self.blockEnd[-1] + self.blockSize[-1])\n        self.blockDigitsSum.append(self.blockDigitsSum[-1] + self.blockDigits[-1])\n        self.blockStartSum.append(self.blockStartSum[-1] + self.blockStart[-1])\n        self.blockEndSum.append(self.blockEndSum[-1] + self.blockEnd[-1])\n        self.blockDigitsSumSq.append(self.blockDigitsSumSq[-1] + self.blockDigitsSum[-1] * self.blockDigitsSum[-1])\n        self.blockStartSumSq.append(self.blockStartSumSq[-1] + self.blockStartSum[-1] * self.blockStartSum[-1])\n        self.blockEndSumSq.append(self.blockEndSumSq[-1] + self.blockEndSum[-1] * self.blockEndSum[-1])\n        self.blockDigitsSumSqrt.append(self.blockDigitsSumSqrt[-1] + self.blockDigitsSum[-1] ** 0.5)\n        self.blockStartSumSqrt.append(self.blockStartSumSqrt[-1] + self.blockStartSum[-1] ** 0.5)\n        self.blockEndSumSqrt.append(self.blockEndSumSqrt[-1] + self.blockEndSum[-1] ** 0.5)\n        self.blockDigitsSumSqrtSq.append(self.blockDigitsSumSqrtSq[-1] + self.blockDigitsSumSqrt[-1] * self.blockDigitsSumSqrt[-1])\n        self.blockStartSumSqrtSq.append(self.blockStartSumSqrtSq[-1] + self.blockStartSumSqrt[-1] * self.blockStartSumSqrt[-1])\n        self.blockEndSumSqrtSq.append(self.blockEndSumSqrtSq[-1] + self.blockEndSumSqrt[-1] * self.blockEndSumSqrt[-1])\n    \n    def findDigit(self, k):\n        b = self.getBlockId(k)\n        if b == 0:\n            return 1\n        a = self.blockStart[b]\n        x = k - a + 1\n        if x <= self.blockSize[b] // 2:\n            return self.findDigit1(x, b)\n        else:\n            return self.findDigit2(x, b)\n    \n    def findDigit1(self, x, b):\n        l = 1\n        r = b - 1\n        while l + 1 < r:\n            m = (l + r) // 2\n            if self.blockDigitsSum[m] < x:\n                l = m\n            else:\n                r = m\n        return l + 1\n    \n    def findDigit2(self, x, b):\n        l = 1\n        r = b - 1\n        while l + 1 < r:\n            m = (l + r) // 2\n            if self.blockStartSum[m] < x:\n                l = m\n            else:\n                r = m\n        return r + 1\n\nstart = time.time()\ninp = sys.stdin\nout = sys.stdout\nProblem(inp, out).solve()\nend = time.time()\nprint(end - start)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nq = int(input())\n\ndef digit_at(n):\n    if n == 1:\n        return 1\n    if n <= 10:\n        return n - 1\n    if n <= 100:\n        return n % 10\n    if n <= 1000:\n        return (n - 1) % 10\n    if n <= 10000:\n        return n % 10\n    if n <= 100000:\n        return (n - 1) % 10\n    if n <= 1000000:\n        return n % 10\n    if n <= 10000000:\n        return (n - 1) % 10\n    if n <= 100000000:\n        return n % 10\n    if n <= 1000000000:\n        return (n - 1) % 10\n    if n <= 10000000000:\n        return n % 10\n    if n <= 100000000000:\n        return (n - 1) % 10\n    if n <= 1000000000000:\n        return n % 10\n    if n <= 10000000000000:\n        return (n - 1) % 10\n    if n <= 100000000000000:\n        return n % 10\n    if n <= 1000000000000000:\n        return (n - 1) % 10\n    if n <= 10000000000000000:\n        return n % 10\n    if n <= 100000000000000000:\n        return (n - 1) % 10\n    if n <= 1000000000000000000:\n        return n % 10\n    if n <= 10000000000000000000:\n        return (n - 1) % 10\n    else:\n        return n % 10\n\nfor i in range(q):\n    k = int(input())\n    print(digit_at(k))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n#------------------------------------------------------------------------------#\n\n# https://oeis.org/A007814\n# https://oeis.org/A007814/b007814.txt\n\n#------------------------------------------------------------------------------#\n\nfrom math import log10\n\ndef digit_at_pos(n):\n    if n == 0:\n        return 0\n\n    # the length of the first n blocks\n    length_n_blocks = (n*(n+1))//2\n\n    # the length of the nth block\n    length_nth_block = n\n\n    # the number of digits in the nth block\n    num_digits_nth_block = int(log10(n)) + 1\n\n    # the length of the first n-1 blocks\n    length_n_minus_1_blocks = length_n_blocks - length_nth_block\n\n    # the number of digits in the first n-1 blocks\n    num_digits_n_minus_1_blocks = length_n_minus_1_blocks - (n-1)\n\n    # the number of digits in the first n-1 blocks of the nth block\n    num_digits_n_minus_1_blocks_nth_block = num_digits_n_minus_1_blocks - (num_digits_nth_block - 1)\n\n    # the number of digits in the nth block\n    num_digits_nth_block = num_digits_nth_block + num_digits_n_minus_1_blocks_nth_block\n\n    # the number of digits in the n blocks\n    num_digits_n_blocks = num_digits_n_minus_1_blocks + num_digits_nth_block\n\n    # the number of digits in the n-1 blocks\n    num_digits_n_minus_1_blocks = num_digits_n_minus_1_blocks + num_digits_nth_block - 1\n\n    # the digit number of the digit we want\n    digit_num = n - length_n_minus_1_blocks - 1\n\n    # the number of the block that contains the digit we want\n    block_num = n - digit_num//num_digits_nth_block - 1\n\n    # the block that contains the digit we want\n    block = str(block_num + 1)\n\n    # the digit we want\n    digit = block[digit_num%num_digits_nth_block]\n\n    return int(digit)\n\n#------------------------------------------------------------------------------#\n\nq = int(input())\n\nfor _ in range(q):\n    k = int(input())\n\n    print(digit_at_pos(k-1))"
    }
  ],
  "created": 1650406805,
  "id": "cmpl-4yqUX3Za2G4JIg1aqNxpsVlIs8oCB",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:21:29.445277 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef solve(q):\n\tfor k in q:\n\t\tif k == 1:\n\t\t\tyield 1\n\t\telif k == 2:\n\t\t\tyield 1\n\t\telif k == 3:\n\t\t\tyield 2\n\t\telse:\n\t\t\t# find the block\n\t\t\tblock = math.floor(math.sqrt(k))\n\t\t\tif block == math.sqrt(k):\n\t\t\t\tblock -= 1\n\t\t\t# find the element in the block\n\t\t\tel = k - block * (block + 1)\n\t\t\t# find the digit\n\t\t\tdigit = str(block)[el - 1]\n\t\t\tyield int(digit)\n\nif __name__ == '__main__':\n\tq = int(sys.stdin.readline().strip())\n\tq = [int(sys.stdin.readline().strip()) for _ in range(q)]\n\tans = solve(q)\n\tprint(*ans,sep='\\n')"
}
2022-04-19 22:21:29.445373 REASON stop
2022-04-19 22:21:29.446154 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# Solution\n\nq = int(input())\nfor i in range(q):\n\tk = int(input())\n\tn = int(k**0.5)\n\tif n*(n+1) < k:\n\t\tn+=1\n\tk -= n*(n-1)\n\tprint(str(n)[k-1])"
}
2022-04-19 22:21:29.446227 REASON stop
2022-04-19 22:21:29.446665 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#We can use the formula for the sum of an arithmetic progression\n#to get the position of the digit in the sequence\n#(i.e. the sum of the numbers from 1 to n)\n\ndef sumOfAP(n):\n    return n*(n+1)/2\n\ndef getDigit(k):\n    n = 1\n    while(sumOfAP(n) < k):\n        n += 1\n    return k - sumOfAP(n-1)\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(int(str(n)[int(getDigit(k))-1]))"
}
2022-04-19 22:21:29.446720 REASON stop
2022-04-19 22:21:29.464863 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\nimport math\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn(n):\n    return int(math.log10(n)) + 1\n\n# This function returns the number of digits in the number n\ndef digitsIn2(n):\n    return len(str(n))\n\n# This function returns the number of digits in the number n\ndef digitsIn3(n):\n    if n == 0:\n        return 1\n    return int(math.floor(math.log10(n)) + 1)\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn4(n):\n    digits = 0\n    while n:\n        digits += 1\n        n //= 10\n    return digits\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn5(n):\n    digits = 0\n    while n >= 1:\n        digits += 1\n        n /= 10\n    return digits\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn6(n):\n    digits = 0\n    while n > 0:\n        digits += 1\n        n = n // 10\n    return digits\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn7(n):\n    if n == 0:\n        return 1\n    else:\n        return int(math.log10(n))+1\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn8(n):\n    if n == 0:\n        return 1\n    return int(math.log10(n)) + 1\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn9(n):\n    if n == 0:\n        return 1\n    return int(math.ceil(math.log10(n)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn10(n):\n    if n == 0:\n        return 1\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn11(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.floor(math.log10(n))) + 1\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn12(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.floor(math.log10(n))) + 1\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn13(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn14(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn15(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn16(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn17(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn18(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn19(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn20(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn21(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn22(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn23(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn24(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn25(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn26(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn27(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn28(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn29(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn30(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn31(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn32(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn33(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn34(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn35(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn36(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn37(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits in the number n\ndef digitsIn38(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return int(math.ceil(math.log10(n+1)))\n\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\n# This function returns the number of digits"
}
2022-04-19 22:21:29.465086 REASON length
2022-04-19 22:21:29.465096 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\nimport time\n\nclass Problem:\n    def __init__(self, inp, out):\n        self.input = inp\n        self.output = out\n        self.blockSize = [1]\n        self.blockDigits = [1]\n        self.blockStart = [1]\n        self.blockEnd = [1]\n        self.blockDigitsSum = [1]\n        self.blockStartSum = [1]\n        self.blockEndSum = [1]\n        self.blockDigitsSumSq = [1]\n        self.blockStartSumSq = [1]\n        self.blockEndSumSq = [1]\n        self.blockDigitsSumSqrt = [1]\n        self.blockStartSumSqrt = [1]\n        self.blockEndSumSqrt = [1]\n        self.blockDigitsSumSqrtSq = [1]\n        self.blockStartSumSqrtSq = [1]\n        self.blockEndSumSqrtSq = [1]\n    \n    def solve(self):\n        inp = self.input\n        out = self.output\n        q = int(inp.readline())\n        for i in range(q):\n            k = int(inp.readline())\n            ans = self.getDigitAt(k)\n            out.write(str(ans) + \"\\n\")\n    \n    def getDigitAt(self, k):\n        if k == 1:\n            return 1\n        if self.getBlockId(k) == len(self.blockSize):\n            self.growBlock()\n        return self.findDigit(k)\n    \n    def getBlockId(self, k):\n        l = 0\n        r = len(self.blockSize)\n        while l + 1 < r:\n            m = (l + r) // 2\n            if self.blockEnd[m] < k:\n                l = m\n            else:\n                r = m\n        return l\n    \n    def growBlock(self):\n        b = len(self.blockSize)\n        self.blockSize.append(self.blockSize[-1] + b + 1)\n        self.blockDigits.append(self.blockDigits[-1] + b + 1)\n        self.blockStart.append(self.blockEnd[-1] + 1)\n        self.blockEnd.append(self.blockEnd[-1] + self.blockSize[-1])\n        self.blockDigitsSum.append(self.blockDigitsSum[-1] + self.blockDigits[-1])\n        self.blockStartSum.append(self.blockStartSum[-1] + self.blockStart[-1])\n        self.blockEndSum.append(self.blockEndSum[-1] + self.blockEnd[-1])\n        self.blockDigitsSumSq.append(self.blockDigitsSumSq[-1] + self.blockDigitsSum[-1] * self.blockDigitsSum[-1])\n        self.blockStartSumSq.append(self.blockStartSumSq[-1] + self.blockStartSum[-1] * self.blockStartSum[-1])\n        self.blockEndSumSq.append(self.blockEndSumSq[-1] + self.blockEndSum[-1] * self.blockEndSum[-1])\n        self.blockDigitsSumSqrt.append(self.blockDigitsSumSqrt[-1] + self.blockDigitsSum[-1] ** 0.5)\n        self.blockStartSumSqrt.append(self.blockStartSumSqrt[-1] + self.blockStartSum[-1] ** 0.5)\n        self.blockEndSumSqrt.append(self.blockEndSumSqrt[-1] + self.blockEndSum[-1] ** 0.5)\n        self.blockDigitsSumSqrtSq.append(self.blockDigitsSumSqrtSq[-1] + self.blockDigitsSumSqrt[-1] * self.blockDigitsSumSqrt[-1])\n        self.blockStartSumSqrtSq.append(self.blockStartSumSqrtSq[-1] + self.blockStartSumSqrt[-1] * self.blockStartSumSqrt[-1])\n        self.blockEndSumSqrtSq.append(self.blockEndSumSqrtSq[-1] + self.blockEndSumSqrt[-1] * self.blockEndSumSqrt[-1])\n    \n    def findDigit(self, k):\n        b = self.getBlockId(k)\n        if b == 0:\n            return 1\n        a = self.blockStart[b]\n        x = k - a + 1\n        if x <= self.blockSize[b] // 2:\n            return self.findDigit1(x, b)\n        else:\n            return self.findDigit2(x, b)\n    \n    def findDigit1(self, x, b):\n        l = 1\n        r = b - 1\n        while l + 1 < r:\n            m = (l + r) // 2\n            if self.blockDigitsSum[m] < x:\n                l = m\n            else:\n                r = m\n        return l + 1\n    \n    def findDigit2(self, x, b):\n        l = 1\n        r = b - 1\n        while l + 1 < r:\n            m = (l + r) // 2\n            if self.blockStartSum[m] < x:\n                l = m\n            else:\n                r = m\n        return r + 1\n\nstart = time.time()\ninp = sys.stdin\nout = sys.stdout\nProblem(inp, out).solve()\nend = time.time()\nprint(end - start)"
}
2022-04-19 22:21:29.465145 REASON stop
2022-04-19 22:21:29.485602 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nq = int(input())\n\ndef digit_at(n):\n    if n == 1:\n        return 1\n    if n <= 10:\n        return n - 1\n    if n <= 100:\n        return n % 10\n    if n <= 1000:\n        return (n - 1) % 10\n    if n <= 10000:\n        return n % 10\n    if n <= 100000:\n        return (n - 1) % 10\n    if n <= 1000000:\n        return n % 10\n    if n <= 10000000:\n        return (n - 1) % 10\n    if n <= 100000000:\n        return n % 10\n    if n <= 1000000000:\n        return (n - 1) % 10\n    if n <= 10000000000:\n        return n % 10\n    if n <= 100000000000:\n        return (n - 1) % 10\n    if n <= 1000000000000:\n        return n % 10\n    if n <= 10000000000000:\n        return (n - 1) % 10\n    if n <= 100000000000000:\n        return n % 10\n    if n <= 1000000000000000:\n        return (n - 1) % 10\n    if n <= 10000000000000000:\n        return n % 10\n    if n <= 100000000000000000:\n        return (n - 1) % 10\n    if n <= 1000000000000000000:\n        return n % 10\n    if n <= 10000000000000000000:\n        return (n - 1) % 10\n    else:\n        return n % 10\n\nfor i in range(q):\n    k = int(input())\n    print(digit_at(k))"
}
2022-04-19 22:21:29.485729 REASON stop
2022-04-19 22:21:29.486964 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": ""
}
2022-04-19 22:21:29.487070 REASON stop
2022-04-19 22:21:29.488123 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n#------------------------------------------------------------------------------#\n\n# https://oeis.org/A007814\n# https://oeis.org/A007814/b007814.txt\n\n#------------------------------------------------------------------------------#\n\nfrom math import log10\n\ndef digit_at_pos(n):\n    if n == 0:\n        return 0\n\n    # the length of the first n blocks\n    length_n_blocks = (n*(n+1))//2\n\n    # the length of the nth block\n    length_nth_block = n\n\n    # the number of digits in the nth block\n    num_digits_nth_block = int(log10(n)) + 1\n\n    # the length of the first n-1 blocks\n    length_n_minus_1_blocks = length_n_blocks - length_nth_block\n\n    # the number of digits in the first n-1 blocks\n    num_digits_n_minus_1_blocks = length_n_minus_1_blocks - (n-1)\n\n    # the number of digits in the first n-1 blocks of the nth block\n    num_digits_n_minus_1_blocks_nth_block = num_digits_n_minus_1_blocks - (num_digits_nth_block - 1)\n\n    # the number of digits in the nth block\n    num_digits_nth_block = num_digits_nth_block + num_digits_n_minus_1_blocks_nth_block\n\n    # the number of digits in the n blocks\n    num_digits_n_blocks = num_digits_n_minus_1_blocks + num_digits_nth_block\n\n    # the number of digits in the n-1 blocks\n    num_digits_n_minus_1_blocks = num_digits_n_minus_1_blocks + num_digits_nth_block - 1\n\n    # the digit number of the digit we want\n    digit_num = n - length_n_minus_1_blocks - 1\n\n    # the number of the block that contains the digit we want\n    block_num = n - digit_num//num_digits_nth_block - 1\n\n    # the block that contains the digit we want\n    block = str(block_num + 1)\n\n    # the digit we want\n    digit = block[digit_num%num_digits_nth_block]\n\n    return int(digit)\n\n#------------------------------------------------------------------------------#\n\nq = int(input())\n\nfor _ in range(q):\n    k = int(input())\n\n    print(digit_at_pos(k-1))"
}
2022-04-19 22:21:29.488315 REASON stop
