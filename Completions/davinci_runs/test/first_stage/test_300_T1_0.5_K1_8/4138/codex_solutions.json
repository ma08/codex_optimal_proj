["", "\n\nq = int(input())\n\ndef digit_at(n):\n    if n == 1:\n        return 1\n    if n <= 10:\n        return n - 1\n    if n <= 100:\n        return n % 10\n    if n <= 1000:\n        return (n - 1) % 10\n    if n <= 10000:\n        return n % 10\n    if n <= 100000:\n        return (n - 1) % 10\n    if n <= 1000000:\n        return n % 10\n    if n <= 10000000:\n        return (n - 1) % 10\n    if n <= 100000000:\n        return n % 10\n    if n <= 1000000000:\n        return (n - 1) % 10\n    if n <= 10000000000:\n        return n % 10\n    if n <= 100000000000:\n        return (n - 1) % 10\n    if n <= 1000000000000:\n        return n % 10\n    if n <= 10000000000000:\n        return (n - 1) % 10\n    if n <= 100000000000000:\n        return n % 10\n    if n <= 1000000000000000:\n        return (n - 1) % 10\n    if n <= 10000000000000000:\n        return n % 10\n    if n <= 100000000000000000:\n        return (n - 1) % 10\n    if n <= 1000000000000000000:\n        return n % 10\n    if n <= 10000000000000000000:\n        return (n - 1) % 10\n    else:\n        return n % 10\n\nfor i in range(q):\n    k = int(input())\n    print(digit_at(k))", "\n\nimport sys\nimport time\n\nclass Problem:\n    def __init__(self, inp, out):\n        self.input = inp\n        self.output = out\n        self.blockSize = [1]\n        self.blockDigits = [1]\n        self.blockStart = [1]\n        self.blockEnd = [1]\n        self.blockDigitsSum = [1]\n        self.blockStartSum = [1]\n        self.blockEndSum = [1]\n        self.blockDigitsSumSq = [1]\n        self.blockStartSumSq = [1]\n        self.blockEndSumSq = [1]\n        self.blockDigitsSumSqrt = [1]\n        self.blockStartSumSqrt = [1]\n        self.blockEndSumSqrt = [1]\n        self.blockDigitsSumSqrtSq = [1]\n        self.blockStartSumSqrtSq = [1]\n        self.blockEndSumSqrtSq = [1]\n    \n    def solve(self):\n        inp = self.input\n        out = self.output\n        q = int(inp.readline())\n        for i in range(q):\n            k = int(inp.readline())\n            ans = self.getDigitAt(k)\n            out.write(str(ans) + \"\\n\")\n    \n    def getDigitAt(self, k):\n        if k == 1:\n            return 1\n        if self.getBlockId(k) == len(self.blockSize):\n            self.growBlock()\n        return self.findDigit(k)\n    \n    def getBlockId(self, k):\n        l = 0\n        r = len(self.blockSize)\n        while l + 1 < r:\n            m = (l + r) // 2\n            if self.blockEnd[m] < k:\n                l = m\n            else:\n                r = m\n        return l\n    \n    def growBlock(self):\n        b = len(self.blockSize)\n        self.blockSize.append(self.blockSize[-1] + b + 1)\n        self.blockDigits.append(self.blockDigits[-1] + b + 1)\n        self.blockStart.append(self.blockEnd[-1] + 1)\n        self.blockEnd.append(self.blockEnd[-1] + self.blockSize[-1])\n        self.blockDigitsSum.append(self.blockDigitsSum[-1] + self.blockDigits[-1])\n        self.blockStartSum.append(self.blockStartSum[-1] + self.blockStart[-1])\n        self.blockEndSum.append(self.blockEndSum[-1] + self.blockEnd[-1])\n        self.blockDigitsSumSq.append(self.blockDigitsSumSq[-1] + self.blockDigitsSum[-1] * self.blockDigitsSum[-1])\n        self.blockStartSumSq.append(self.blockStartSumSq[-1] + self.blockStartSum[-1] * self.blockStartSum[-1])\n        self.blockEndSumSq.append(self.blockEndSumSq[-1] + self.blockEndSum[-1] * self.blockEndSum[-1])\n        self.blockDigitsSumSqrt.append(self.blockDigitsSumSqrt[-1] + self.blockDigitsSum[-1] ** 0.5)\n        self.blockStartSumSqrt.append(self.blockStartSumSqrt[-1] + self.blockStartSum[-1] ** 0.5)\n        self.blockEndSumSqrt.append(self.blockEndSumSqrt[-1] + self.blockEndSum[-1] ** 0.5)\n        self.blockDigitsSumSqrtSq.append(self.blockDigitsSumSqrtSq[-1] + self.blockDigitsSumSqrt[-1] * self.blockDigitsSumSqrt[-1])\n        self.blockStartSumSqrtSq.append(self.blockStartSumSqrtSq[-1] + self.blockStartSumSqrt[-1] * self.blockStartSumSqrt[-1])\n        self.blockEndSumSqrtSq.append(self.blockEndSumSqrtSq[-1] + self.blockEndSumSqrt[-1] * self.blockEndSumSqrt[-1])\n    \n    def findDigit(self, k):\n        b = self.getBlockId(k)\n        if b == 0:\n            return 1\n        a = self.blockStart[b]\n        x = k - a + 1\n        if x <= self.blockSize[b] // 2:\n            return self.findDigit1(x, b)\n        else:\n            return self.findDigit2(x, b)\n    \n    def findDigit1(self, x, b):\n        l = 1\n        r = b - 1\n        while l + 1 < r:\n            m = (l + r) // 2\n            if self.blockDigitsSum[m] < x:\n                l = m\n            else:\n                r = m\n        return l + 1\n    \n    def findDigit2(self, x, b):\n        l = 1\n        r = b - 1\n        while l + 1 < r:\n            m = (l + r) // 2\n            if self.blockStartSum[m] < x:\n                l = m\n            else:\n                r = m\n        return r + 1\n\nstart = time.time()\ninp = sys.stdin\nout = sys.stdout\nProblem(inp, out).solve()\nend = time.time()\nprint(end - start)", "\n\nimport sys\nimport math\n\ndef solve(q):\n\tfor k in q:\n\t\tif k == 1:\n\t\t\tyield 1\n\t\telif k == 2:\n\t\t\tyield 1\n\t\telif k == 3:\n\t\t\tyield 2\n\t\telse:\n\t\t\t# find the block\n\t\t\tblock = math.floor(math.sqrt(k))\n\t\t\tif block == math.sqrt(k):\n\t\t\t\tblock -= 1\n\t\t\t# find the element in the block\n\t\t\tel = k - block * (block + 1)\n\t\t\t# find the digit\n\t\t\tdigit = str(block)[el - 1]\n\t\t\tyield int(digit)\n\nif __name__ == '__main__':\n\tq = int(sys.stdin.readline().strip())\n\tq = [int(sys.stdin.readline().strip()) for _ in range(q)]\n\tans = solve(q)\n\tprint(*ans,sep='\\n')", "\n\n# Solution\n\nq = int(input())\nfor i in range(q):\n\tk = int(input())\n\tn = int(k**0.5)\n\tif n*(n+1) < k:\n\t\tn+=1\n\tk -= n*(n-1)\n\tprint(str(n)[k-1])", "\n\n#We can use the formula for the sum of an arithmetic progression\n#to get the position of the digit in the sequence\n#(i.e. the sum of the numbers from 1 to n)\n\ndef sumOfAP(n):\n    return n*(n+1)/2\n\ndef getDigit(k):\n    n = 1\n    while(sumOfAP(n) < k):\n        n += 1\n    return k - sumOfAP(n-1)\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(int(str(n)[int(getDigit(k))-1]))", "\n\n#------------------------------------------------------------------------------#\n\n# https://oeis.org/A007814\n# https://oeis.org/A007814/b007814.txt\n\n#------------------------------------------------------------------------------#\n\nfrom math import log10\n\ndef digit_at_pos(n):\n    if n == 0:\n        return 0\n\n    # the length of the first n blocks\n    length_n_blocks = (n*(n+1))//2\n\n    # the length of the nth block\n    length_nth_block = n\n\n    # the number of digits in the nth block\n    num_digits_nth_block = int(log10(n)) + 1\n\n    # the length of the first n-1 blocks\n    length_n_minus_1_blocks = length_n_blocks - length_nth_block\n\n    # the number of digits in the first n-1 blocks\n    num_digits_n_minus_1_blocks = length_n_minus_1_blocks - (n-1)\n\n    # the number of digits in the first n-1 blocks of the nth block\n    num_digits_n_minus_1_blocks_nth_block = num_digits_n_minus_1_blocks - (num_digits_nth_block - 1)\n\n    # the number of digits in the nth block\n    num_digits_nth_block = num_digits_nth_block + num_digits_n_minus_1_blocks_nth_block\n\n    # the number of digits in the n blocks\n    num_digits_n_blocks = num_digits_n_minus_1_blocks + num_digits_nth_block\n\n    # the number of digits in the n-1 blocks\n    num_digits_n_minus_1_blocks = num_digits_n_minus_1_blocks + num_digits_nth_block - 1\n\n    # the digit number of the digit we want\n    digit_num = n - length_n_minus_1_blocks - 1\n\n    # the number of the block that contains the digit we want\n    block_num = n - digit_num//num_digits_nth_block - 1\n\n    # the block that contains the digit we want\n    block = str(block_num + 1)\n\n    # the digit we want\n    digit = block[digit_num%num_digits_nth_block]\n\n    return int(digit)\n\n#------------------------------------------------------------------------------#\n\nq = int(input())\n\nfor _ in range(q):\n    k = int(input())\n\n    print(digit_at_pos(k-1))"]