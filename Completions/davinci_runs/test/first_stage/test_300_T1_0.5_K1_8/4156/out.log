2022-04-19 22:34:36.974444 """
The busses in Berland are equipped with a video surveillance system. The system records information about changes in the number of passengers in a bus after stops.

If $x$ is the number of passengers in a bus just before the current bus stop and $y$ is the number of passengers in the bus just after current bus stop, the system records the number $y-x$. So the system records show how number of passengers changed.

The test run was made for single bus and $n$ bus stops. Thus, the system recorded the sequence of integers $a_1, a_2, \dots, a_n$ (exactly one number for each bus stop), where $a_i$ is the record for the bus stop $i$. The bus stops are numbered from $1$ to $n$ in chronological order.

Determine the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$ (that is, at any time in the bus there should be from $0$ to $w$ passengers inclusive).


-----Input-----

The first line contains two integers $n$ and $w$ $(1 \le n \le 1\,000, 1 \le w \le 10^{9})$ — the number of bus stops and the capacity of the bus.

The second line contains a sequence $a_1, a_2, \dots, a_n$ $(-10^{6} \le a_i \le 10^{6})$, where $a_i$ equals to the number, which has been recorded by the video system after the $i$-th bus stop.


-----Output-----

Print the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.


-----Examples-----
Input
3 5
2 1 -3

Output
3

Input
2 4
-1 1

Output
4

Input
4 10
2 4 1 2

Output
2



-----Note-----

In the first example initially in the bus could be $0$, $1$ or $2$ passengers.

In the second example initially in the bus could be $1$, $2$, $3$ or $4$ passengers.

In the third example initially in the bus could be $0$ or $1$ passenger.
"""
2022-04-19 22:34:36.974468 --------------------------
2022-04-19 22:34:36.974572 using api key derek
2022-04-19 22:34:37.091899 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-19 22:34:42.097310 """
The busses in Berland are equipped with a video surveillance system. The system records information about changes in the number of passengers in a bus after stops.

If $x$ is the number of passengers in a bus just before the current bus stop and $y$ is the number of passengers in the bus just after current bus stop, the system records the number $y-x$. So the system records show how number of passengers changed.

The test run was made for single bus and $n$ bus stops. Thus, the system recorded the sequence of integers $a_1, a_2, \dots, a_n$ (exactly one number for each bus stop), where $a_i$ is the record for the bus stop $i$. The bus stops are numbered from $1$ to $n$ in chronological order.

Determine the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$ (that is, at any time in the bus there should be from $0$ to $w$ passengers inclusive).


-----Input-----

The first line contains two integers $n$ and $w$ $(1 \le n \le 1\,000, 1 \le w \le 10^{9})$ — the number of bus stops and the capacity of the bus.

The second line contains a sequence $a_1, a_2, \dots, a_n$ $(-10^{6} \le a_i \le 10^{6})$, where $a_i$ equals to the number, which has been recorded by the video system after the $i$-th bus stop.


-----Output-----

Print the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.


-----Examples-----
Input
3 5
2 1 -3

Output
3

Input
2 4
-1 1

Output
4

Input
4 10
2 4 1 2

Output
2



-----Note-----

In the first example initially in the bus could be $0$, $1$ or $2$ passengers.

In the second example initially in the bus could be $1$, $2$, $3$ or $4$ passengers.

In the third example initially in the bus could be $0$ or $1$ passenger.
"""
2022-04-19 22:34:42.097370 --------------------------
2022-04-19 22:34:42.097490 using api key gabby
2022-04-19 22:36:05.923069 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # First, we must find the total number of passengers and their average\n    # for the entire trip.\n    total_passengers = sum(a)\n    avg_passengers = total_passengers / n\n\n    # The average number of passengers must be between 0 and the bus capacity.\n    # If not, then no valid number of passengers at the beginning of the trip\n    # exists.\n    if not (0 <= avg_passengers <= w):\n        print(0)\n        return\n\n    # The number of passengers at the beginning of the trip will be equal to\n    # the average number of passengers plus or minus the total number of\n    # passengers.\n    #\n    # We know that the number of passengers must be between 0 and the bus\n    # capacity.\n    #\n    # We also know that the number of passengers at the beginning of the trip\n    # must be an integer.\n    #\n    # Therefore, the number of passengers at the beginning of the trip will be\n    # equal to the floor of the average number of passengers plus the total\n    # number of passengers or the ceiling of the average number of passengers\n    # minus the total number of passengers.\n    #\n    # We must check if each of these values is between 0 and the bus capacity\n    # and if they are integers.\n    #\n    # If they are, then the number of passengers at the beginning of the trip\n    # will be one of these values.\n    #\n    # If one or both of these values is not an integer or not between 0 and\n    # the bus capacity, then the number of passengers at the beginning of the\n    # trip will be the other value.\n    #\n    # If both values are not integers or not between 0 and the bus capacity,\n    # then no valid number of passengers at the beginning of the trip exists.\n\n    start_passengers = int(avg_passengers + total_passengers)\n    end_passengers = int(avg_passengers - total_passengers)\n\n    if (0 <= start_passengers <= w) and (0 <= end_passengers <= w):\n        print(2)\n    elif (0 <= start_passengers <= w) or (0 <= end_passengers <= w):\n        print(1)\n    else:\n        print(0)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(w+1)\n    exit()\n\nif a[0] == 0:\n    print(w+1)\n    exit()\n\nif a[0] > 0 and a[1] > 0:\n    print(0)\n    exit()\n\nif a[0] < 0 and a[1] < 0:\n    print(0)\n    exit()\n\nd = {}\n\nfor i in range(n):\n    if a[i] in d.keys():\n        print(0)\n        exit()\n    if a[i] > 0:\n        d[a[i]] = 1\n    else:\n        d[-a[i]] = -1\n\n# print(d)\n\ncnt = 0\n\nfor i in range(1, w+1):\n    if i in d.keys():\n        s = d[i]\n    else:\n        s = 0\n    if i-1 in d.keys():\n        s += d[i-1]\n    if i+1 in d.keys():\n        s += d[i+1]\n    if s == 0:\n        cnt += 1\n\nprint(cnt)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i] is the number of ways to reach a[i]\ndp = [0] * n\ndp[0] = 1\nfor i in range(1, n):\n    for j in range(i):\n        if dp[j] == 0:\n            continue\n        if a[i] - a[j] >= 0 and a[i] - a[j] <= w:\n            dp[i] += dp[j]\n\nprint(dp[-1])"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0]\n    for i in a:\n        b.append(b[-1] + i)\n    if min(b) < 0:\n        b = [i + abs(min(b)) for i in b]\n    if max(b) > w:\n        print(0)\n    else:\n        print(w - max(b) + 1)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, w = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nif n == 1:\n    print(w + 1)\n    exit()\n\nfor i in range(1, n):\n    a[i] += a[i - 1]\n\nmin_a = a[0]\nmax_a = a[0]\n\nfor i in range(1, n):\n    if a[i] < min_a:\n        min_a = a[i]\n    if a[i] > max_a:\n        max_a = a[i]\n\nif min_a < 0:\n    min_a = -min_a\n\nif max_a > w or min_a > w:\n    print(0)\n    exit()\n\nif max_a - min_a <= w:\n    print(max_a - min_a + 1)\n    exit()\n\nif max_a > w:\n    print(max_a - w)\n    exit()\n\nif min_a > w:\n    print(min_a - w)\n    exit()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, w = map(int, input().split())\na = [int(x) for x in input().split()]\n\nif w == 1:\n    if len(set(a)) == 1:\n        print(1)\n    else:\n        print(0)\nelse:\n    if len(set(a)) == 1:\n        print(w+1)\n    else:\n        print(0)"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n\tn, w = [int(x) for x in input().strip().split()]\n\ta = [int(x) for x in input().strip().split()]\n\t\n\t# n = 3\n\t# w = 5\n\t# a = [2, 1, -3]\n\t\n\t# n = 2\n\t# w = 4\n\t# a = [-1, 1]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, 2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(w+1)\nelse:\n    d = {}\n    d[0] = 1\n    for i in range(1, n):\n        d2 = {}\n        for k in d.keys():\n            if k+a[i] > w or k+a[i] < 0:\n                continue\n            if k+a[i] in d2.keys():\n                d2[k+a[i]] += d[k]\n            else:\n                d2[k+a[i]] = d[k]\n        d = d2\n    print(sum(d.values()))"
    }
  ],
  "created": 1650407682,
  "id": "cmpl-4yqigskE8YkbSlJoJR0vtmKidgxug",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:36:05.923632 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # First, we must find the total number of passengers and their average\n    # for the entire trip.\n    total_passengers = sum(a)\n    avg_passengers = total_passengers / n\n\n    # The average number of passengers must be between 0 and the bus capacity.\n    # If not, then no valid number of passengers at the beginning of the trip\n    # exists.\n    if not (0 <= avg_passengers <= w):\n        print(0)\n        return\n\n    # The number of passengers at the beginning of the trip will be equal to\n    # the average number of passengers plus or minus the total number of\n    # passengers.\n    #\n    # We know that the number of passengers must be between 0 and the bus\n    # capacity.\n    #\n    # We also know that the number of passengers at the beginning of the trip\n    # must be an integer.\n    #\n    # Therefore, the number of passengers at the beginning of the trip will be\n    # equal to the floor of the average number of passengers plus the total\n    # number of passengers or the ceiling of the average number of passengers\n    # minus the total number of passengers.\n    #\n    # We must check if each of these values is between 0 and the bus capacity\n    # and if they are integers.\n    #\n    # If they are, then the number of passengers at the beginning of the trip\n    # will be one of these values.\n    #\n    # If one or both of these values is not an integer or not between 0 and\n    # the bus capacity, then the number of passengers at the beginning of the\n    # trip will be the other value.\n    #\n    # If both values are not integers or not between 0 and the bus capacity,\n    # then no valid number of passengers at the beginning of the trip exists.\n\n    start_passengers = int(avg_passengers + total_passengers)\n    end_passengers = int(avg_passengers - total_passengers)\n\n    if (0 <= start_passengers <= w) and (0 <= end_passengers <= w):\n        print(2)\n    elif (0 <= start_passengers <= w) or (0 <= end_passengers <= w):\n        print(1)\n    else:\n        print(0)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:36:05.923695 REASON stop
2022-04-19 22:36:05.924448 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(w+1)\n    exit()\n\nif a[0] == 0:\n    print(w+1)\n    exit()\n\nif a[0] > 0 and a[1] > 0:\n    print(0)\n    exit()\n\nif a[0] < 0 and a[1] < 0:\n    print(0)\n    exit()\n\nd = {}\n\nfor i in range(n):\n    if a[i] in d.keys():\n        print(0)\n        exit()\n    if a[i] > 0:\n        d[a[i]] = 1\n    else:\n        d[-a[i]] = -1\n\n# print(d)\n\ncnt = 0\n\nfor i in range(1, w+1):\n    if i in d.keys():\n        s = d[i]\n    else:\n        s = 0\n    if i-1 in d.keys():\n        s += d[i-1]\n    if i+1 in d.keys():\n        s += d[i+1]\n    if s == 0:\n        cnt += 1\n\nprint(cnt)"
}
2022-04-19 22:36:05.924544 REASON stop
2022-04-19 22:36:05.925120 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i] is the number of ways to reach a[i]\ndp = [0] * n\ndp[0] = 1\nfor i in range(1, n):\n    for j in range(i):\n        if dp[j] == 0:\n            continue\n        if a[i] - a[j] >= 0 and a[i] - a[j] <= w:\n            dp[i] += dp[j]\n\nprint(dp[-1])"
}
2022-04-19 22:36:05.925213 REASON stop
2022-04-19 22:36:05.940689 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0]\n    for i in a:\n        b.append(b[-1] + i)\n    if min(b) < 0:\n        b = [i + abs(min(b)) for i in b]\n    if max(b) > w:\n        print(0)\n    else:\n        print(w - max(b) + 1)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:36:05.940891 REASON stop
2022-04-19 22:36:05.967748 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, w = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nif n == 1:\n    print(w + 1)\n    exit()\n\nfor i in range(1, n):\n    a[i] += a[i - 1]\n\nmin_a = a[0]\nmax_a = a[0]\n\nfor i in range(1, n):\n    if a[i] < min_a:\n        min_a = a[i]\n    if a[i] > max_a:\n        max_a = a[i]\n\nif min_a < 0:\n    min_a = -min_a\n\nif max_a > w or min_a > w:\n    print(0)\n    exit()\n\nif max_a - min_a <= w:\n    print(max_a - min_a + 1)\n    exit()\n\nif max_a > w:\n    print(max_a - w)\n    exit()\n\nif min_a > w:\n    print(min_a - w)\n    exit()"
}
2022-04-19 22:36:05.967886 REASON stop
2022-04-19 22:36:05.968742 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, w = map(int, input().split())\na = [int(x) for x in input().split()]\n\nif w == 1:\n    if len(set(a)) == 1:\n        print(1)\n    else:\n        print(0)\nelse:\n    if len(set(a)) == 1:\n        print(w+1)\n    else:\n        print(0)"
}
2022-04-19 22:36:05.968881 REASON stop
2022-04-19 22:36:05.969616 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n\tn, w = [int(x) for x in input().strip().split()]\n\ta = [int(x) for x in input().strip().split()]\n\t\n\t# n = 3\n\t# w = 5\n\t# a = [2, 1, -3]\n\t\n\t# n = 2\n\t# w = 4\n\t# a = [-1, 1]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, 2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2, 4, 1, -2]\n\t\n\t# n = 4\n\t# w = 10\n\t# a = [2"
}
2022-04-19 22:36:05.969853 REASON length
2022-04-19 22:36:05.969863 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(w+1)\nelse:\n    d = {}\n    d[0] = 1\n    for i in range(1, n):\n        d2 = {}\n        for k in d.keys():\n            if k+a[i] > w or k+a[i] < 0:\n                continue\n            if k+a[i] in d2.keys():\n                d2[k+a[i]] += d[k]\n            else:\n                d2[k+a[i]] = d[k]\n        d = d2\n    print(sum(d.values()))"
}
2022-04-19 22:36:05.969897 REASON stop
