2022-04-19 21:49:19.250187 """
1000000000000001 dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered 1 through 1000000000000001, but he gave them new names, as follows:
 - the dogs numbered 1,2,\cdots,26 were respectively given the names a, b, ..., z;
 - the dogs numbered 27,28,29,\cdots,701,702  were respectively given the names aa, ab, ac, ..., zy, zz;
 - the dogs numbered 703,704,705,\cdots,18277,18278  were respectively given the names aaa, aab, aac, ..., zzy, zzz;
 - the dogs numbered 18279,18280,18281,\cdots,475253,475254  were respectively given the names aaaa, aaab, aaac, ..., zzzy, zzzz;
 - the dogs numbered 475255,475256,\cdots  were respectively given the names aaaaa, aaaab, ...;
 - and so on.
To sum it up, the dogs numbered 1, 2, \cdots were respectively given the following names:
a, b, ..., z, aa, ab, ..., az, ba, bb, ..., bz, ..., za, zb, ..., zz, aaa, aab, ..., aaz, aba, abb, ..., abz, ..., zzz, aaaa, ...
Now, Roger asks you:
"What is the name for the dog numbered N?"

-----Constraints-----
 - N is an integer.
 -  1 \leq N \leq 1000000000000001

-----Input-----
Input is given from Standard Input in the following format:
N

-----Output-----
Print the answer to Roger's question as a string consisting of lowercase English letters.

-----Sample Input-----
2

-----Sample Output-----
b

"""
2022-04-19 21:49:19.250201 --------------------------
2022-04-19 21:49:19.250317 using api key gabby
2022-04-19 21:50:41.854712 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\n# \u5165\u529b\nN = int(input())\n\n# \u51e6\u7406\n\n# \u51fa\u529b\nprint(N)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport math\nimport sys\n\nn = int(input())\n\ndef get_name(n):\n    if n < 27:\n        return chr(ord('a') + n - 1)\n    else:\n        base = 26\n        while n > base:\n            n -= base\n            base = 26 * base\n        return get_name(n // 26) + get_name(n % 26)\n\nprint(get_name(n))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    n = int(input())\n    num = n - 1\n    arr = []\n    while True:\n        if num < 26:\n            arr.append(num)\n            break\n        else:\n            arr.append(num % 26)\n            num //= 26\n    ans = \"\"\n    for i in range(len(arr)):\n        ans += chr(arr[i] + 97)\n    print(ans[::-1])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nN = int(input())\n\ndef get_name(N):\n    if N == 1:\n        return \"a\"\n    N -= 1\n    name = \"\"\n    while N > 0:\n        N -= 1\n        name = chr(N % 26 + 97) + name\n        N //= 26\n    return name\n\nprint(get_name(N))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    num = n-1\n    s = \"\"\n    while num >= 0:\n        s = chr(ord('a') + num % 26) + s\n        num = num // 26 - 1\n    print(s)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\n# N is an integer. 1 <= N <= 1000000000000001\nN = int(sys.stdin.readline())\n\n# the number of digits of the answer\n# (the number of times the alphabet has to be repeated)\ndigits = int(math.log(N, 26))\n# the number of digits of the answer\n# (the number of times the alphabet has to be repeated)\nif N > 26 ** digits:\n    digits += 1\n\n# the number of dogs with a name of length 'digits'\nnum_dogs_with_digits = 26 ** digits\n\n# the number of dogs with a name of length 'digits - 1'\nnum_dogs_with_digits_minus_1 = 26 ** (digits - 1)\n\n# the number of dogs with a name of length 'digits - 1'\n# that precede the dog we are looking for\nnum_dogs_with_digits_minus_1_before_N = (N - 1) // num_dogs_with_digits_minus_1\n\n# the number of dogs with a name of length 'digits'\n# that precede the dog we are looking for\nnum_dogs_with_digits_before_N = num_dogs_with_digits_minus_1_before_N * num_dogs_with_digits_minus_1\n\n# the index of the letter in the alphabet\nalphabet_index = (N - num_dogs_with_digits_before_N - 1) // num_dogs_with_digits_minus_1\n\n# the letter in the alphabet corresponding to the index\nalphabet_letter = chr(ord('a') + alphabet_index)\n\n# the answer\nans = \"\"\nfor i in range(digits - 1):\n    ans += alphabet_letter\n\nsys.stdout.write(ans)"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    # N = int(input())\n    if N == 1:\n        print(\"a\")\n        return\n    if N == 2:\n        print(\"b\")\n        return\n    if N == 3:\n        print(\"c\")\n        return\n    if N == 4:\n        print(\"d\")\n        return\n    if N == 5:\n        print(\"e\")\n        return\n    if N == 6:\n        print(\"f\")\n        return\n    if N == 7:\n        print(\"g\")\n        return\n    if N == 8:\n        print(\"h\")\n        return\n    if N == 9:\n        print(\"i\")\n        return\n    if N == 10:\n        print(\"j\")\n        return\n    if N == 11:\n        print(\"k\")\n        return\n    if N == 12:\n        print(\"l\")\n        return\n    if N == 13:\n        print(\"m\")\n        return\n    if N == 14:\n        print(\"n\")\n        return\n    if N == 15:\n        print(\"o\")\n        return\n    if N == 16:\n        print(\"p\")\n        return\n    if N == 17:\n        print(\"q\")\n        return\n    if N == 18:\n        print(\"r\")\n        return\n    if N == 19:\n        print(\"s\")\n        return\n    if N == 20:\n        print(\"t\")\n        return\n    if N == 21:\n        print(\"u\")\n        return\n    if N == 22:\n        print(\"v\")\n        return\n    if N == 23:\n        print(\"w\")\n        return\n    if N == 24:\n        print(\"x\")\n        return\n    if N == 25:\n        print(\"y\")\n        return\n    if N == 26:\n        print(\"z\")\n        return\n\n    # 26\u4ee5\u964d\n    # 1\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26\u901a\u308a\n    # 2\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26\u901a\u308a\n    # 3\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26\u901a\u308a\n    # 4\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26\u901a\u308a\n    # 5\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26\u901a\u308a\n    # 6\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26\u901a\u308a\n    # 7\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26\u901a\u308a\n    # 8\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26\u901a\u308a\n    # 9\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 10\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 11\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 12\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 13\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 14\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 15\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 16\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 17\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 18\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 19\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 20\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 21\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 22\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 23\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 24\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 25\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 26\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 27\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 28\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 29\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 30\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 31\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 32\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 33\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 34\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 35\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 36\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 37\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 38\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn = int(input())\n\ndef get_name(n):\n    if n <= 26:\n        return chr(n + 96)\n    else:\n        name = \"\"\n        while n > 26:\n            name += chr(n % 26 + 96)\n            n = n // 26\n        name += chr(n + 96)\n        return name[::-1]\n\nprint(get_name(n))"
    }
  ],
  "created": 1650404959,
  "id": "cmpl-4yq0lwW9J1a1MrJTVrKQZHa6noyAW",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:50:41.855178 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\n# \u5165\u529b\nN = int(input())\n\n# \u51e6\u7406\n\n# \u51fa\u529b\nprint(N)"
}
2022-04-19 21:50:41.855224 REASON stop
2022-04-19 21:50:41.855976 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport math\nimport sys\n\nn = int(input())\n\ndef get_name(n):\n    if n < 27:\n        return chr(ord('a') + n - 1)\n    else:\n        base = 26\n        while n > base:\n            n -= base\n            base = 26 * base\n        return get_name(n // 26) + get_name(n % 26)\n\nprint(get_name(n))"
}
2022-04-19 21:50:41.856054 REASON stop
2022-04-19 21:50:41.856551 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    n = int(input())\n    num = n - 1\n    arr = []\n    while True:\n        if num < 26:\n            arr.append(num)\n            break\n        else:\n            arr.append(num % 26)\n            num //= 26\n    ans = \"\"\n    for i in range(len(arr)):\n        ans += chr(arr[i] + 97)\n    print(ans[::-1])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:50:41.856613 REASON stop
2022-04-19 21:50:41.885809 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nN = int(input())\n\ndef get_name(N):\n    if N == 1:\n        return \"a\"\n    N -= 1\n    name = \"\"\n    while N > 0:\n        N -= 1\n        name = chr(N % 26 + 97) + name\n        N //= 26\n    return name\n\nprint(get_name(N))"
}
2022-04-19 21:50:41.885926 REASON stop
2022-04-19 21:50:41.904368 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    num = n-1\n    s = \"\"\n    while num >= 0:\n        s = chr(ord('a') + num % 26) + s\n        num = num // 26 - 1\n    print(s)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:50:41.904494 REASON stop
2022-04-19 21:50:41.905166 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\n# N is an integer. 1 <= N <= 1000000000000001\nN = int(sys.stdin.readline())\n\n# the number of digits of the answer\n# (the number of times the alphabet has to be repeated)\ndigits = int(math.log(N, 26))\n# the number of digits of the answer\n# (the number of times the alphabet has to be repeated)\nif N > 26 ** digits:\n    digits += 1\n\n# the number of dogs with a name of length 'digits'\nnum_dogs_with_digits = 26 ** digits\n\n# the number of dogs with a name of length 'digits - 1'\nnum_dogs_with_digits_minus_1 = 26 ** (digits - 1)\n\n# the number of dogs with a name of length 'digits - 1'\n# that precede the dog we are looking for\nnum_dogs_with_digits_minus_1_before_N = (N - 1) // num_dogs_with_digits_minus_1\n\n# the number of dogs with a name of length 'digits'\n# that precede the dog we are looking for\nnum_dogs_with_digits_before_N = num_dogs_with_digits_minus_1_before_N * num_dogs_with_digits_minus_1\n\n# the index of the letter in the alphabet\nalphabet_index = (N - num_dogs_with_digits_before_N - 1) // num_dogs_with_digits_minus_1\n\n# the letter in the alphabet corresponding to the index\nalphabet_letter = chr(ord('a') + alphabet_index)\n\n# the answer\nans = \"\"\nfor i in range(digits - 1):\n    ans += alphabet_letter\n\nsys.stdout.write(ans)"
}
2022-04-19 21:50:41.905260 REASON stop
2022-04-19 21:50:41.907349 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    # N = int(input())\n    if N == 1:\n        print(\"a\")\n        return\n    if N == 2:\n        print(\"b\")\n        return\n    if N == 3:\n        print(\"c\")\n        return\n    if N == 4:\n        print(\"d\")\n        return\n    if N == 5:\n        print(\"e\")\n        return\n    if N == 6:\n        print(\"f\")\n        return\n    if N == 7:\n        print(\"g\")\n        return\n    if N == 8:\n        print(\"h\")\n        return\n    if N == 9:\n        print(\"i\")\n        return\n    if N == 10:\n        print(\"j\")\n        return\n    if N == 11:\n        print(\"k\")\n        return\n    if N == 12:\n        print(\"l\")\n        return\n    if N == 13:\n        print(\"m\")\n        return\n    if N == 14:\n        print(\"n\")\n        return\n    if N == 15:\n        print(\"o\")\n        return\n    if N == 16:\n        print(\"p\")\n        return\n    if N == 17:\n        print(\"q\")\n        return\n    if N == 18:\n        print(\"r\")\n        return\n    if N == 19:\n        print(\"s\")\n        return\n    if N == 20:\n        print(\"t\")\n        return\n    if N == 21:\n        print(\"u\")\n        return\n    if N == 22:\n        print(\"v\")\n        return\n    if N == 23:\n        print(\"w\")\n        return\n    if N == 24:\n        print(\"x\")\n        return\n    if N == 25:\n        print(\"y\")\n        return\n    if N == 26:\n        print(\"z\")\n        return\n\n    # 26\u4ee5\u964d\n    # 1\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26\u901a\u308a\n    # 2\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26\u901a\u308a\n    # 3\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26\u901a\u308a\n    # 4\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26\u901a\u308a\n    # 5\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26\u901a\u308a\n    # 6\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26\u901a\u308a\n    # 7\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26\u901a\u308a\n    # 8\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26\u901a\u308a\n    # 9\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 10\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 11\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 12\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 13\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 14\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 15\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 16\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 17\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 18\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 19\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 20\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 21\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 22\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 23\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 24\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 25\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 26\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 27\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 28\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 29\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 30\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 31\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 32\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 33\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 34\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 35\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 36\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 37\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26\u901a\u308a\n    # 38\u6841\u306e\u6570\u5b57\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u306f26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26*26"
}
2022-04-19 21:50:41.907487 REASON length
2022-04-19 21:50:41.907495 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn = int(input())\n\ndef get_name(n):\n    if n <= 26:\n        return chr(n + 96)\n    else:\n        name = \"\"\n        while n > 26:\n            name += chr(n % 26 + 96)\n            n = n // 26\n        name += chr(n + 96)\n        return name[::-1]\n\nprint(get_name(n))"
}
2022-04-19 21:50:41.907632 REASON stop
