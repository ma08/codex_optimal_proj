2022-04-19 22:27:46.011916 """
Authors guessed an array $a$ consisting of $n$ integers; each integer is not less than $2$ and not greater than $2 \cdot 10^5$. You don't know the array $a$, but you know the array $b$ which is formed from it with the following sequence of operations:  Firstly, let the array $b$ be equal to the array $a$;  Secondly, for each $i$ from $1$ to $n$:   if $a_i$ is a prime number, then one integer $p_{a_i}$ is appended to array $b$, where $p$ is an infinite sequence of prime numbers ($2, 3, 5, \dots$);  otherwise (if $a_i$ is not a prime number), the greatest divisor of $a_i$ which is not equal to $a_i$ is appended to $b$;   Then the obtained array of length $2n$ is shuffled and given to you in the input. 

Here $p_{a_i}$ means the $a_i$-th prime number. The first prime $p_1 = 2$, the second one is $p_2 = 3$, and so on.

Your task is to recover any suitable array $a$ that forms the given array $b$. It is guaranteed that the answer exists (so the array $b$ is obtained from some suitable array $a$). If there are multiple answers, you can print any.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $2n$ integers $b_1, b_2, \dots, b_{2n}$ ($2 \le b_i \le 2750131$), where $b_i$ is the $i$-th element of $b$. $2750131$ is the $199999$-th prime number.


-----Output-----

In the only line of the output print $n$ integers $a_1, a_2, \dots, a_n$ ($2 \le a_i \le 2 \cdot 10^5$) in any order — the array $a$ from which the array $b$ can be obtained using the sequence of moves given in the problem statement. If there are multiple answers, you can print any.


-----Examples-----
Input
3
3 5 2 3 2 4

Output
3 4 2 
Input
1
2750131 199999

Output
199999 
Input
1
3 6

Output
6
"""
2022-04-19 22:27:46.011935 --------------------------
2022-04-19 22:27:46.012055 using api key derek
2022-04-19 22:29:09.288124 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nb = input().split(' ')\nb = [int(i) for i in b]\n\n#print(b)\n\na = []\n\nfor i in range(n):\n    if b[i] in b[n:]:\n        a.append(b[i])\n    else:\n        a.append(b[n+i])\n\nprint(' '.join([str(i) for i in a]))"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\nb = input().split(\" \")\nb = [int(x) for x in b]\na = []\n\nfor i in range(n):\n    if b[i] in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,79"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nfrom math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# def get_primes(n):\n#     prime_list = []\n#     for i in range(2, n):\n#         if is_prime(i):\n#             prime_list.append(i)\n#     return prime_list\n\ndef get_primes(n):\n    prime_list = [2, 3]\n    i = 1\n    while len(prime_list) < n:\n        i += 6\n        if is_prime(i):\n            prime_list.append(i)\n        i += 4\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n\ndef get_divisor(n):\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return 1\n\ndef get_a(b):\n    a = []\n    for i in range(len(b) // 2):\n        if is_prime(b[i]):\n            a.append(b[i])\n        else:\n            a.append(b[i] // get_divisor(b[i]))\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = get_a(b)\n    print(' '.join([str(x) for x in a]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n#!/usr/bin/python3\nimport math\n\nn = int(input())\nb = [int(x) for x in input().split()]\n\na = []\nfor i in range(n):\n    if b[i] == b[i+n]:\n        a.append(b[i])\n    else:\n        a.append(b[i]*b[i+n])\n\nprint(*a)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef isPrime(n):\n\tif n == 2:\n\t\treturn True\n\tif n % 2 == 0:\n\t\treturn False\n\ti = 3\n\twhile i * i <= n:\n\t\tif n % i == 0:\n\t\t\treturn False\n\t\ti += 2\n\treturn True\n\ndef getPrime(n):\n\tif n == 1:\n\t\treturn 2\n\ti = 1\n\tv = 3\n\twhile i < n:\n\t\tif isPrime(v):\n\t\t\ti += 1\n\t\tv += 2\n\treturn v - 2\n\ndef solve(n, b):\n\ta = []\n\ti = 0\n\twhile i < len(b):\n\t\tif b[i] == b[i + 1]:\n\t\t\ta.append(b[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tp = getPrime(b[i + 1])\n\t\t\ta.append(p)\n\t\ti += 1\n\treturn a\n\ndef main():\n\tn = int(input())\n\tb = list(map(int, input().split()))\n\ta = solve(n, b)\n\tprint(' '.join(map(str, a)))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# Solution\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(len(b)):\n\tif b[i] in a:\n\t\ta.append(b[i])\n\telif b[i] in b[i+1:]:\n\t\ta.append(b[i])\n\telse:\n\t\ta.append(b[i])\n\nprint(*a[:n])"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 2\n    return primes\n\ndef get_a(b, n):\n    a = []\n    primes = get_primes(len(b))\n    for i in range(n):\n        if b[i] in primes:\n            a.append(primes.index(b[i]) + 2)\n        else:\n            for j in range(2, b[i] // 2 + 1):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = get_a(b, n)\n    print(*a)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# The problem is to find the permutation of the array b that gives us the array a\n# The permutation is as follows:\n# 1. For every element in a, if it is prime, we add it to the end of the array\n# 2. For every element in a, if it is composite, we add its largest factor to the end of the array\n# 3. We shuffle the array\n# We can see that the last element of the array b is always a prime\n# We can also see that the last element of the array a is always a prime\n# So, we can find the last element of the array a by finding the last element of the array b\n# Then, the second last element of the array b is the largest factor of the second last element of the array a\n# In general, for every element in the array b, we find the largest factor of the element before it in the array a\n# We keep doing this until we reach the first element of the array a\n\n# FUNCTION TO CHECK WHETHER A NUMBER IS PRIME OR NOT\ndef isPrime(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n# FUNCTION TO FIND THE LARGEST FACTOR OF A NUMBER WHICH IS NOT EQUAL TO THE NUMBER\ndef findLargestFactor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return n // i\n        i += 1\n    return 1\n\n# GETTING THE INPUT\nn = int(input())\nb = list(map(int, input().split()))\n\n# INITIALISING THE ARRAY a\na = [0] * n\n\n# INITIALISING THE INDEXES\ni = 0\nj = n - 1\n\n# FINDING THE FIRST ELEMENT OF THE ARRAY a\na[i] = b[j]\n\n# FINDING THE SECOND ELEMENT OF THE ARRAY a\na[i + 1] = findLargestFactor(b[j - 1])\n\n# FINDING THE REMAINING ELEMENTS OF THE ARRAY a\nwhile i < n - 2:\n    if isPrime(b[j - 2]):\n        a[i + 2] = b[j - 2]\n    else:\n        a[i + 2] = findLargestFactor(b[j - 2])\n    i += 1\n    j -= 1\n\n# PRINTING THE ARRAY a\nprint(*a)"
    }
  ],
  "created": 1650407266,
  "id": "cmpl-4yqbyNz1uxeRea7cU41t8Tp1gWhxy",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:29:09.288572 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nb = input().split(' ')\nb = [int(i) for i in b]\n\n#print(b)\n\na = []\n\nfor i in range(n):\n    if b[i] in b[n:]:\n        a.append(b[i])\n    else:\n        a.append(b[n+i])\n\nprint(' '.join([str(i) for i in a]))"
}
2022-04-19 22:29:09.288619 REASON stop
2022-04-19 22:29:09.289391 1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\nb = input().split(\" \")\nb = [int(x) for x in b]\na = []\n\nfor i in range(n):\n    if b[i] in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,79"
}
2022-04-19 22:29:09.289477 REASON length
2022-04-19 22:29:09.289484 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nfrom math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# def get_primes(n):\n#     prime_list = []\n#     for i in range(2, n):\n#         if is_prime(i):\n#             prime_list.append(i)\n#     return prime_list\n\ndef get_primes(n):\n    prime_list = [2, 3]\n    i = 1\n    while len(prime_list) < n:\n        i += 6\n        if is_prime(i):\n            prime_list.append(i)\n        i += 4\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n\ndef get_divisor(n):\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return 1\n\ndef get_a(b):\n    a = []\n    for i in range(len(b) // 2):\n        if is_prime(b[i]):\n            a.append(b[i])\n        else:\n            a.append(b[i] // get_divisor(b[i]))\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = get_a(b)\n    print(' '.join([str(x) for x in a]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:29:09.289523 REASON stop
2022-04-19 22:29:09.289943 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n#!/usr/bin/python3\nimport math\n\nn = int(input())\nb = [int(x) for x in input().split()]\n\na = []\nfor i in range(n):\n    if b[i] == b[i+n]:\n        a.append(b[i])\n    else:\n        a.append(b[i]*b[i+n])\n\nprint(*a)"
}
2022-04-19 22:29:09.289994 REASON stop
2022-04-19 22:29:09.317137 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef isPrime(n):\n\tif n == 2:\n\t\treturn True\n\tif n % 2 == 0:\n\t\treturn False\n\ti = 3\n\twhile i * i <= n:\n\t\tif n % i == 0:\n\t\t\treturn False\n\t\ti += 2\n\treturn True\n\ndef getPrime(n):\n\tif n == 1:\n\t\treturn 2\n\ti = 1\n\tv = 3\n\twhile i < n:\n\t\tif isPrime(v):\n\t\t\ti += 1\n\t\tv += 2\n\treturn v - 2\n\ndef solve(n, b):\n\ta = []\n\ti = 0\n\twhile i < len(b):\n\t\tif b[i] == b[i + 1]:\n\t\t\ta.append(b[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tp = getPrime(b[i + 1])\n\t\t\ta.append(p)\n\t\ti += 1\n\treturn a\n\ndef main():\n\tn = int(input())\n\tb = list(map(int, input().split()))\n\ta = solve(n, b)\n\tprint(' '.join(map(str, a)))\n\nif __name__ == '__main__':\n\tmain()"
}
2022-04-19 22:29:09.317297 REASON stop
2022-04-19 22:29:09.326856 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# Solution\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(len(b)):\n\tif b[i] in a:\n\t\ta.append(b[i])\n\telif b[i] in b[i+1:]:\n\t\ta.append(b[i])\n\telse:\n\t\ta.append(b[i])\n\nprint(*a[:n])"
}
2022-04-19 22:29:09.327037 REASON stop
2022-04-19 22:29:09.329742 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 2\n    return primes\n\ndef get_a(b, n):\n    a = []\n    primes = get_primes(len(b))\n    for i in range(n):\n        if b[i] in primes:\n            a.append(primes.index(b[i]) + 2)\n        else:\n            for j in range(2, b[i] // 2 + 1):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = get_a(b, n)\n    print(*a)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:29:09.329849 REASON stop
2022-04-19 22:29:09.330796 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# The problem is to find the permutation of the array b that gives us the array a\n# The permutation is as follows:\n# 1. For every element in a, if it is prime, we add it to the end of the array\n# 2. For every element in a, if it is composite, we add its largest factor to the end of the array\n# 3. We shuffle the array\n# We can see that the last element of the array b is always a prime\n# We can also see that the last element of the array a is always a prime\n# So, we can find the last element of the array a by finding the last element of the array b\n# Then, the second last element of the array b is the largest factor of the second last element of the array a\n# In general, for every element in the array b, we find the largest factor of the element before it in the array a\n# We keep doing this until we reach the first element of the array a\n\n# FUNCTION TO CHECK WHETHER A NUMBER IS PRIME OR NOT\ndef isPrime(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n# FUNCTION TO FIND THE LARGEST FACTOR OF A NUMBER WHICH IS NOT EQUAL TO THE NUMBER\ndef findLargestFactor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return n // i\n        i += 1\n    return 1\n\n# GETTING THE INPUT\nn = int(input())\nb = list(map(int, input().split()))\n\n# INITIALISING THE ARRAY a\na = [0] * n\n\n# INITIALISING THE INDEXES\ni = 0\nj = n - 1\n\n# FINDING THE FIRST ELEMENT OF THE ARRAY a\na[i] = b[j]\n\n# FINDING THE SECOND ELEMENT OF THE ARRAY a\na[i + 1] = findLargestFactor(b[j - 1])\n\n# FINDING THE REMAINING ELEMENTS OF THE ARRAY a\nwhile i < n - 2:\n    if isPrime(b[j - 2]):\n        a[i + 2] = b[j - 2]\n    else:\n        a[i + 2] = findLargestFactor(b[j - 2])\n    i += 1\n    j -= 1\n\n# PRINTING THE ARRAY a\nprint(*a)"
}
2022-04-19 22:29:09.330996 REASON stop
