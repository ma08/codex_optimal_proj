["\n\n#!/usr/bin/python3\nimport math\n\nn = int(input())\nb = [int(x) for x in input().split()]\n\na = []\nfor i in range(n):\n    if b[i] == b[i+n]:\n        a.append(b[i])\n    else:\n        a.append(b[i]*b[i+n])\n\nprint(*a)", "\n\ndef isPrime(n):\n\tif n == 2:\n\t\treturn True\n\tif n % 2 == 0:\n\t\treturn False\n\ti = 3\n\twhile i * i <= n:\n\t\tif n % i == 0:\n\t\t\treturn False\n\t\ti += 2\n\treturn True\n\ndef getPrime(n):\n\tif n == 1:\n\t\treturn 2\n\ti = 1\n\tv = 3\n\twhile i < n:\n\t\tif isPrime(v):\n\t\t\ti += 1\n\t\tv += 2\n\treturn v - 2\n\ndef solve(n, b):\n\ta = []\n\ti = 0\n\twhile i < len(b):\n\t\tif b[i] == b[i + 1]:\n\t\t\ta.append(b[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tp = getPrime(b[i + 1])\n\t\t\ta.append(p)\n\t\ti += 1\n\treturn a\n\ndef main():\n\tn = int(input())\n\tb = list(map(int, input().split()))\n\ta = solve(n, b)\n\tprint(' '.join(map(str, a)))\n\nif __name__ == '__main__':\n\tmain()", "\n\n# Solution\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\n\nfor i in range(len(b)):\n\tif b[i] in a:\n\t\ta.append(b[i])\n\telif b[i] in b[i+1:]:\n\t\ta.append(b[i])\n\telse:\n\t\ta.append(b[i])\n\nprint(*a[:n])", "\n\nfrom math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# def get_primes(n):\n#     prime_list = []\n#     for i in range(2, n):\n#         if is_prime(i):\n#             prime_list.append(i)\n#     return prime_list\n\ndef get_primes(n):\n    prime_list = [2, 3]\n    i = 1\n    while len(prime_list) < n:\n        i += 6\n        if is_prime(i):\n            prime_list.append(i)\n        i += 4\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n\ndef get_divisor(n):\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return 1\n\ndef get_a(b):\n    a = []\n    for i in range(len(b) // 2):\n        if is_prime(b[i]):\n            a.append(b[i])\n        else:\n            a.append(b[i] // get_divisor(b[i]))\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = get_a(b)\n    print(' '.join([str(x) for x in a]))\n\nif __name__ == '__main__':\n    main()", "\n\n# SOLUTION\n# The problem is to find the permutation of the array b that gives us the array a\n# The permutation is as follows:\n# 1. For every element in a, if it is prime, we add it to the end of the array\n# 2. For every element in a, if it is composite, we add its largest factor to the end of the array\n# 3. We shuffle the array\n# We can see that the last element of the array b is always a prime\n# We can also see that the last element of the array a is always a prime\n# So, we can find the last element of the array a by finding the last element of the array b\n# Then, the second last element of the array b is the largest factor of the second last element of the array a\n# In general, for every element in the array b, we find the largest factor of the element before it in the array a\n# We keep doing this until we reach the first element of the array a\n\n# FUNCTION TO CHECK WHETHER A NUMBER IS PRIME OR NOT\ndef isPrime(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n# FUNCTION TO FIND THE LARGEST FACTOR OF A NUMBER WHICH IS NOT EQUAL TO THE NUMBER\ndef findLargestFactor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return n // i\n        i += 1\n    return 1\n\n# GETTING THE INPUT\nn = int(input())\nb = list(map(int, input().split()))\n\n# INITIALISING THE ARRAY a\na = [0] * n\n\n# INITIALISING THE INDEXES\ni = 0\nj = n - 1\n\n# FINDING THE FIRST ELEMENT OF THE ARRAY a\na[i] = b[j]\n\n# FINDING THE SECOND ELEMENT OF THE ARRAY a\na[i + 1] = findLargestFactor(b[j - 1])\n\n# FINDING THE REMAINING ELEMENTS OF THE ARRAY a\nwhile i < n - 2:\n    if isPrime(b[j - 2]):\n        a[i + 2] = b[j - 2]\n    else:\n        a[i + 2] = findLargestFactor(b[j - 2])\n    i += 1\n    j -= 1\n\n# PRINTING THE ARRAY a\nprint(*a)", "\n\nn = int(input())\nb = input().split(' ')\nb = [int(i) for i in b]\n\n#print(b)\n\na = []\n\nfor i in range(n):\n    if b[i] in b[n:]:\n        a.append(b[i])\n    else:\n        a.append(b[n+i])\n\nprint(' '.join([str(i) for i in a]))", "\n\nimport sys\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 2\n    return primes\n\ndef get_a(b, n):\n    a = []\n    primes = get_primes(len(b))\n    for i in range(n):\n        if b[i] in primes:\n            a.append(primes.index(b[i]) + 2)\n        else:\n            for j in range(2, b[i] // 2 + 1):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = get_a(b, n)\n    print(*a)\n\nif __name__ == \"__main__\":\n    main()"]