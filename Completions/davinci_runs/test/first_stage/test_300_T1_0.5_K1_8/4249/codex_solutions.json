["\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if max(a) * n < m:\n        print(-1)\n        return\n\n    a.sort(reverse=True)\n    res = 0\n    days = 0\n    for i in range(n):\n        days += 1\n        res += a[i] - days + 1\n        if res >= m:\n            print(days)\n            return\n\n    print(-1)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nif m > sum(a):\n    print(-1)\nelse:\n    days = 0\n    for i in range(n):\n        if a[i] > days:\n            days += 1\n    print(days)", "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\n# print(a)\n\nif max(a) * (n + 1) < m:\n    print(-1)\nelse:\n    i = 0\n    while m > 0:\n        m -= a[i]\n        i += 1\n    print(i)", "\n\ndef min_days(n, m, a):\n    \"\"\"Return the minimum number of days Polycarp needs to write his coursework.\n\n    >>> min_days(5, 8, [2, 3, 1, 1, 2])\n    4\n    >>> min_days(7, 10, [1, 3, 4, 2, 1, 4, 2])\n    2\n    >>> min_days(5, 15, [5, 5, 5, 5, 5])\n    1\n    >>> min_days(5, 16, [5, 5, 5, 5, 5])\n    2\n    >>> min_days(5, 26, [5, 5, 5, 5, 5])\n    -1\n    \"\"\"\n    # TODO: implement this\n    return -1\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(min_days(n, m, a))", "\n\nimport sys\n\ndef readline_int_list():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef solve(m, caffeine_dosages):\n    \"\"\"\n    caffeine_dosages is a list of caffeine dosages\n    \"\"\"\n    # we can simulate the process of writing coursework and drinking coffee\n    # in a single pass\n    # we can only drink coffee that is not yet drunk\n    caffeine_dosages.sort(reverse=True)\n    caffeine_dosages_length = len(caffeine_dosages)\n    remaining_pages = m\n    remaining_cups = caffeine_dosages_length\n    days = 0\n    while remaining_pages > 0 and remaining_cups > 0:\n        # we can drink the remaining cups of coffee and write some pages\n        days += 1\n        # we can drink the remaining cups of coffee\n        # we can write at most remaining_cups pages\n        remaining_pages -= remaining_cups\n        # remove the caffeine dosages that we have already drunk\n        # we can only drink coffee that is not yet drunk\n        caffeine_dosages = caffeine_dosages[remaining_cups:]\n        remaining_cups = len(caffeine_dosages)\n    if remaining_pages > 0:\n        # we cannot write the remaining pages\n        return -1\n    else:\n        # we can write all the pages\n        return days\n\ndef main():\n    n, m = readline_int_list()\n    caffeine_dosages = readline_int_list()\n    assert(len(caffeine_dosages) == n)\n    print(solve(m, caffeine_dosages))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n\n    days = 0\n    pages = 0\n    for i in range(n):\n        pages += max(0, a[i] - i)\n        if pages >= m:\n            print(i + 1)\n            return\n    print(-1)\n\nmain()", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    days = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            break\n        days += 1\n        m -= a[i] - i\n        if m <= 0:\n            break\n    if m > 0:\n        print(-1)\n    else:\n        print(days)\n\nif __name__ == \"__main__\":\n    main()"]