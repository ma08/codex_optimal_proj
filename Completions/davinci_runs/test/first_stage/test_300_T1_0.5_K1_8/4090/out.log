2022-04-19 21:50:42.340910 """
You are given a text consisting of $n$ space-separated words. There is exactly one space character between any pair of adjacent words. There are no spaces before the first word and no spaces after the last word. The length of text is the number of letters and spaces in it. $w_i$ is the $i$-th word of text. All words consist only of lowercase Latin letters.

Let's denote a segment of words $w[i..j]$ as a sequence of words $w_i, w_{i + 1}, \dots, w_j$. Two segments of words $w[i_1 .. j_1]$ and $w[i_2 .. j_2]$ are considered equal if $j_1 - i_1 = j_2 - i_2$, $j_1 \ge i_1$, $j_2 \ge i_2$, and for every $t \in [0, j_1 - i_1]$ $w_{i_1 + t} = w_{i_2 + t}$. For example, for the text "to be or not to be" the segments $w[1..2]$ and $w[5..6]$ are equal, they correspond to the words "to be".

An abbreviation is a replacement of some segments of words with their first uppercase letters. In order to perform an abbreviation, you have to choose at least two non-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase). For example, for the text "a ab a a b ab a a b c" you can replace segments of words $w[2..4]$ and $w[6..8]$ with an abbreviation "AAA" and obtain the text "a AAA b AAA b c", or you can replace segments of words $w[2..5]$ and $w[6..9]$ with an abbreviation "AAAB" and obtain the text "a AAAB AAAB c".

What is the minimum length of the text after at most one abbreviation?


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 300$) — the number of words in the text.

The next line contains $n$ space-separated words of the text $w_1, w_2, \dots, w_n$. Each word consists only of lowercase Latin letters.

It is guaranteed that the length of text does not exceed $10^5$.


-----Output-----

Print one integer — the minimum length of the text after at most one abbreviation.


-----Examples-----
Input
6
to be or not to be

Output
12

Input
10
a ab a a b ab a a b c

Output
13

Input
6
aa bb aa aa bb bb

Output
11



-----Note-----

In the first example you can obtain the text "TB or not TB".

In the second example you can obtain the text "a AAAB AAAB c".

In the third example you can obtain the text "AB aa AB bb".
"""
2022-04-19 21:50:42.340930 --------------------------
2022-04-19 21:50:42.341037 using api key derek
2022-04-19 21:52:08.724118 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nwords = input().split(' ')\n\n#print(words)\n\ndef abbreviation(words):\n    \"\"\"\n    Returns the length of the text after abbreviation\n    \"\"\"\n    length = 0\n    i = 0\n    while i < len(words):\n        #print(words)\n        if i+1 < len(words) and words[i] == words[i+1]:\n            #print('i =', i)\n            #print('i+1 =', i+1)\n            #print('words[i]', words[i])\n            #print('words[i+1]', words[i+1])\n            #print('length =', length)\n            #print('len(words[i]) =', len(words[i]))\n            #print('len(words[i+1]) =', len(words[i+1]))\n            #print('len(words[i]) + len(words[i+1]) =', len(words[i]) + len(words[i+1]))\n            #print('len(words[i]) + len(words[i+1]) - 1 =', len(words[i]) + len(words[i+1]) - 1)\n            #print('len(words[i]) + len(words[i+1]) - 2 =', len(words[i]) + len(words[i+1]) - 2)\n            #print('len(words[i]) + len(words[i+1]) - 3 =', len(words[i]) + len(words[i+1]) - 3)\n            length = length - len(words[i]) - len(words[i+1]) + 1\n            words[i] = words[i][0].upper()\n            del words[i+1]\n            #print('length =', length)\n            #print('i =', i)\n            #print('i+1 =', i+1)\n        else:\n            length = length + len(words[i])\n            #print('length =', length)\n            i = i + 1\n            #print('i =', i)\n    return length\n\nprint(abbreviation(words))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    min_length = len(\"\".join(words))\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n                if words[i:j] == words[j:k]:\n                    abbreviation = words[i][0].upper() + str(len(words[i:j]))\n                    new_words = words[:i] + [abbreviation] + words[k:]\n                    min_length = min(len(\"\".join(new_words)), min_length)\n    print(min_length)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    text = input()\n    print(min_length(text))\n\n\ndef min_length(text):\n    words = text.split()\n    dp = [0] * len(words)\n\n    dp[0] = len(words[0])\n    for i in range(1, len(words)):\n        dp[i] = dp[i - 1] + len(words[i])\n\n    for i in range(1, len(words)):\n        for j in range(i + 1, len(words)):\n            if words[i] == words[j]:\n                if i > 0:\n                    dp[j] = min(dp[j], dp[i - 1] + len(words[i]) + 1)\n                else:\n                    dp[j] = min(dp[j], len(words[i]) + 1)\n    return dp[-1]\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    words = sys.stdin.readline().split()\n\n    # Build a dictionary of word frequencies\n    word_map = {}\n    for word in words:\n        if word not in word_map:\n            word_map[word] = 1\n        else:\n            word_map[word] += 1\n\n    # Find the most frequently used word\n    most_frequent = 0\n    for word in word_map:\n        if word_map[word] > most_frequent:\n            most_frequent = word_map[word]\n\n    # Find the length of the most frequently used word\n    # and the number of words in the text\n    length_of_most_frequent = 0\n    for word in word_map:\n        if word_map[word] == most_frequent:\n            length_of_most_frequent = len(word)\n\n    # The minimum length of the text after at most one abbreviation\n    # is the length of the most frequently used word plus the number\n    # of words in the text minus the most frequent word\n    print(length_of_most_frequent + n - most_frequent)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom math import inf\n\ndef main():\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    # print(n, words)\n    lengths = [len(w) for w in words]\n    # print(lengths)\n    total_length = sum(lengths)\n    # print(total_length)\n    # print(list(combinations(range(n), 2)))\n    # print()\n    min_length = inf\n    for i, j in combinations(range(n), 2):\n        # print(i, j)\n        if words[i] == words[j]:\n            k = i + 1\n            while k < j and words[k] == words[i]:\n                k += 1\n            # print(i, j, k)\n            if k == j:\n                # print(words[i], k - i)\n                # print(total_length - (k - i) * lengths[i] + len(words[i].upper()))\n                min_length = min(min_length, total_length - (k - i) * lengths[i] + len(words[i].upper()))\n    print(min_length if min_length != inf else total_length)\n\nmain()"
    },
    {
      "finish_reason": "length",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\n# split the string into an array of words\nwords = s.split(\" \")\n\n# create an array of the lengths of the words\nlengths = [len(w) for w in words]\n\n# create an array of the lengths of the first letters of the words\nfirst_letters = [len(w[0]) for w in words]\n\n# create an array of the lengths of the second letters of the words\nsecond_letters = [len(w[1:]) for w in words]\n\n# create an array of the lengths of the first two letters of the words\nfirst_two_letters = [len(w[:2]) for w in words]\n\n# create an array of the lengths of the first three letters of the words\nfirst_three_letters = [len(w[:3]) for w in words]\n\n# create an array of the lengths of the first four letters of the words\nfirst_four_letters = [len(w[:4]) for w in words]\n\n# create an array of the lengths of the first five letters of the words\nfirst_five_letters = [len(w[:5]) for w in words]\n\n# create an array of the lengths of the first six letters of the words\nfirst_six_letters = [len(w[:6]) for w in words]\n\n# create an array of the lengths of the first seven letters of the words\nfirst_seven_letters = [len(w[:7]) for w in words]\n\n# create an array of the lengths of the first eight letters of the words\nfirst_eight_letters = [len(w[:8]) for w in words]\n\n# create an array of the lengths of the first nine letters of the words\nfirst_nine_letters = [len(w[:9]) for w in words]\n\n# create an array of the lengths of the first ten letters of the words\nfirst_ten_letters = [len(w[:10]) for w in words]\n\n# create an array of the lengths of the first eleven letters of the words\nfirst_eleven_letters = [len(w[:11]) for w in words]\n\n# create an array of the lengths of the first twelve letters of the words\nfirst_twelve_letters = [len(w[:12]) for w in words]\n\n# create an array of the lengths of the first thirteen letters of the words\nfirst_thirteen_letters = [len(w[:13]) for w in words]\n\n# create an array of the lengths of the first fourteen letters of the words\nfirst_fourteen_letters = [len(w[:14]) for w in words]\n\n# create an array of the lengths of the first fifteen letters of the words\nfirst_fifteen_letters = [len(w[:15]) for w in words]\n\n# create an array of the lengths of the first sixteen letters of the words\nfirst_sixteen_letters = [len(w[:16]) for w in words]\n\n# create an array of the lengths of the first seventeen letters of the words\nfirst_seventeen_letters = [len(w[:17]) for w in words]\n\n# create an array of the lengths of the first eighteen letters of the words\nfirst_eighteen_letters = [len(w[:18]) for w in words]\n\n# create an array of the lengths of the first nineteen letters of the words\nfirst_nineteen_letters = [len(w[:19]) for w in words]\n\n# create an array of the lengths of the first twenty letters of the words\nfirst_twenty_letters = [len(w[:20]) for w in words]\n\n# create an array of the lengths of the first twenty-one letters of the words\nfirst_twenty_one_letters = [len(w[:21]) for w in words]\n\n# create an array of the lengths of the first twenty-two letters of the words\nfirst_twenty_two_letters = [len(w[:22]) for w in words]\n\n# create an array of the lengths of the first twenty-three letters of the words\nfirst_twenty_three_letters = [len(w[:23]) for w in words]\n\n# create an array of the lengths of the first twenty-four letters of the words\nfirst_twenty_four_letters = [len(w[:24]) for w in words]\n\n# create an array of the lengths of the first twenty-five letters of the words\nfirst_twenty_five_letters = [len(w[:25]) for w in words]\n\n# create an array of the lengths of the first twenty-six letters of the words\nfirst_twenty_six_letters = [len(w[:26]) for w in words]\n\n# create an array of the lengths of the first twenty-seven letters of the words\nfirst_twenty_seven_letters = [len(w[:27]) for w in words]\n\n# create an array of the lengths of the first twenty-eight letters of the words\nfirst_twenty_eight_letters = [len(w[:28]) for w in words]\n\n# create an array of the lengths of the first twenty-nine letters of the words\nfirst_twenty_nine_letters = [len(w[:29]) for w in words]\n\n# create an array of the lengths of the first thirty letters of the words\nfirst_thirty_letters = [len(w[:30]) for w in words]\n\n# create an array of the lengths of the first thirty-one letters of the words\nfirst_thirty_one_letters = [len(w[:31]) for w in words]\n\n# create an array of the lengths of the first thirty-two letters of the words\nfirst_thirty_two_letters = [len(w[:32]) for w in words]\n\n# create an array of the lengths of the first thirty-three letters of the words\nfirst_thirty_three_letters = [len(w[:33]) for w in words]\n\n# create an array of the lengths of the first thirty-four letters of the words\nfirst_thirty_four_letters = [len(w[:34]) for w in words]\n\n# create an array of the lengths of the first thirty-five letters of the words\nfirst_thirty_five_letters = [len(w[:35]) for w in words]\n\n# create an array of the lengths of the first thirty-six letters of the words\nfirst_thirty_six_letters = [len(w[:36]) for w in words]\n\n# create an array of the lengths of the first thirty-seven letters of the words\nfirst_thirty_seven_letters = [len(w[:37]) for w in words]\n\n# create an array of the lengths of the first thirty-eight letters of the words\nfirst_thirty_eight_letters = [len(w[:38]) for w in words]\n\n# create an array of the lengths of the first thirty-nine letters of the words\nfirst_thirty_nine_letters = [len(w[:39]) for w in words]\n\n# create an array of the lengths of the first forty letters of the words\nfirst_forty_letters = [len(w[:40]) for w in words]\n\n# create an array of the lengths of the first forty-one letters of the words\nfirst_forty_one_letters = [len(w[:41]) for w in words]\n\n# create an array of the lengths of the first forty-two letters of the words\nfirst_forty_two_letters = [len(w[:42]) for w in words]\n\n# create an array of the lengths of the first forty-three letters of the words\nfirst_forty_three_letters = [len(w[:43]) for w in words]\n\n# create an array of the lengths of the first forty-four letters of the words\nfirst_forty_four_letters = [len(w[:44]) for w in words]\n\n# create an array of the lengths of the first forty-five letters of the words\nfirst_forty_five_letters = [len(w[:45]) for w in words]\n\n# create an array of the lengths of the first forty-six letters of the words\nfirst_forty_six_letters = [len(w[:46]) for w in words]\n\n# create an array of the lengths of the first forty-seven letters of the words\nfirst_forty_seven_letters = [len(w[:47]) for w in words]\n\n# create an array of the lengths of the first forty-eight letters of the words\nfirst_forty_eight_letters = [len(w[:48]) for w in words]\n\n# create an array of the lengths of the first forty-nine letters of the words\nfirst_forty_nine_letters = [len(w[:49]) for w in words]\n\n# create an array of the lengths of the first fifty letters of the words\nfirst_fifty_letters = [len(w[:50]) for w in words]\n\n# create an array of the lengths of the first fifty-one letters of the words\nfirst_fifty_one_letters = [len(w[:51]) for w in words]\n\n# create an array of the lengths of the first fifty-two letters of the words\nfirst_fifty_two_letters = [len(w[:52]) for w in words]\n\n# create an array of the lengths of the first fifty-three letters of the words\nfirst_fifty_three_letters = [len(w[:53]) for w in words]\n\n# create an array of the lengths of the first fifty-four letters of the words\nfirst_fifty_four_letters = [len(w[:54]) for w in words]\n\n# create an array of the lengths of the first fifty-five letters of the words\nfirst_fifty_five_letters = [len(w[:55]) for w in words]\n\n# create an array of the lengths of the first fifty-six letters of the words\nfirst_fifty_six_letters = [len(w[:56]) for w in words]\n\n# create an array of the lengths of the first fifty-seven letters of the words\nfirst_fifty_seven_letters = [len(w[:57]) for w in words]\n\n# create an array of the lengths of the first fifty-eight letters of the words\nfirst_fifty_eight_letters = [len(w[:58]) for w in words]\n\n# create an array of the lengths of the first fifty-nine letters of the words\nfirst_fifty_nine_letters = [len(w[:59]) for w in words]\n\n# create an array of the lengths of the first sixty letters of the words\nfirst_sixty_letters = [len(w[:60]) for w in words]\n\n# create an array of the lengths of the first sixty-one letters of the words\nfirst_sixty_one_letters = [len(w[:61]) for w in words]\n\n# create an array of the lengths of the first sixty-two letters of the words\nfirst_sixty_two_letters = [len(w[:62]) for w in words]\n\n# create an array of the lengths of the first sixty-three letters of the words\nfirst_sixty_three_letters = [len(w[:63]) for w in words]\n\n# create an array of the lengths of the first sixty-four letters of the words\nfirst_sixty_four_letters = [len(w[:64]) for w in words]\n\n# create an array of the lengths of the first sixty-five letters of the words\nfirst_sixty_five_letters = [len(w[:65]) for w in words]\n\n# create an array of the lengths of the first sixty-six letters of the words\nfirst_sixty_six_letters = [len(w[:66]) for w in words]\n\n# create an array of the lengths of the first sixty-seven letters of the words\nfirst_sixty_seven_letters = [len(w[:67]) for w in words]\n\n# create an array of the lengths of the first sixty-eight letters of the words\nfirst_sixty_eight_letters = [len(w[:68]) for w in words]\n\n# create an array of the lengths of the first sixty-nine letters of the words\nfirst_sixty_nine_letters = [len(w[:69]) for w in words]\n\n# create an array of the lengths of the first seventy letters of the words\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# First, we calculate the number of occurrences for each word.\n# Then, we find the maximum number of occurrences for any word.\n# Finally, we calculate the total number of letters in the text,\n# and subtract the number of occurrences of the most frequent word.\n# We add 1 because we also need to count the number of spaces.\n\nn = int(input())\nwords = input().split()\n\noccurrences = {}\nfor word in words:\n    if word not in occurrences:\n        occurrences[word] = 1\n    else:\n        occurrences[word] += 1\n\nmax_occurrences = max(occurrences.values())\n\ntotal_letters = sum(len(word) for word in words)\n\nprint(total_letters - max_occurrences + 1)"
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn = int(input())\ntext = input()\n\n# a = 1\n# b = 2\n# c = 3\n\n# aa = 11\n# ab = 12\n# ac = 13\n# ba = 21\n# bb = 22\n# bc = 23\n# ca = 31\n# cb = 32\n# cc = 33\n\n# aaa = 111\n# aab = 112\n# aac = 113\n# aba = 121\n# abb = 122\n# abc = 123\n# aca = 131\n# acb = 132\n# acc = 133\n# baa = 211\n# bab = 212\n# bac = 213\n# bba = 221\n# bbb = 222\n# bbc = 223\n# bca = 231\n# bcb = 232\n# bcc = 233\n# caa = 311\n# cab = 312\n# cac = 313\n# cba = 321\n# cbb = 322\n# cbc = 323\n# cca = 331\n# ccb = 332\n# ccc = 333\n\n# aaaa = 1111\n# aaab = 1112\n# aaac = 1113\n# aaba = 1121\n# aabb = 1122\n# aabc = 1123\n# aaca = 1131\n# aacb = 1132\n# aacc = 1133\n# abaa = 1211\n# abab = 1212\n# abac = 1213\n# abba = 1221\n# abbb = 1222\n# abbc = 1223\n# abca = 1231\n# abcb = 1232\n# abcc = 1233\n# acaa = 1311\n# acab = 1312\n# acac = 1313\n# acba = 1321\n# acbb = 1322\n# acbc = 1323\n# acca = 1331\n# accb = 1332\n# accc = 1333\n# baaa = 2111\n# baab = 2112\n# baac = 2113\n# baba = 2121\n# babb = 2122\n# babc = 2123\n# baca = 2131\n# bacb = 2132\n# bacc = 2133\n# bbaa = 2211\n# bbab = 2212\n# bbac = 2213\n# bbba = 2221\n# bbbb = 2222\n# bbbc = 2223\n# bbca = 2231\n# bbcb = 2232\n# bbcc = 2233\n# bcaa = 2311\n# bcab = 2312\n# bcac = 2313\n# bcba = 2321\n# bcbb = 2322\n# bcbc = 2323\n# bcca = 2331\n# bccb = 2332\n# bccc = 2333\n# caaa = 3111\n# caab = 3112\n# caac = 3113\n# caba = 3121\n# cabb = 3122\n# cabc = 3123\n# caca = 3131\n# cacb = 3132\n# cacc = 3133\n# cbaa = 3211\n# cbab = 3212\n# cbac = 3213\n# cbba = 3221\n# cbbb = 3222\n# cbbc = 3223\n# cbca = 3231\n# cbcb = 3232\n# cbcc = 3233\n# ccaa = 3311\n# ccab = 3312\n# ccac = 3313\n# ccba = 3321\n# ccbb = 3322\n# ccbc = 3323\n# ccca = 3331\n# cccb = 3332\n# cccc = 3333\n\n# aaaaa = 11111\n# aaaab = 11112\n# aaaac = 11113\n# aaaba = 11121\n# aaabb = 11122\n# aaabc = 11123\n# aaaca = 11131\n# aaacb = 11132\n# aaacc = 11133\n# aabaa = 11211\n# aabab = 11212\n# aabac = 11213\n# aabba = 11221\n# aabbb = 11222\n# aabbc = 11223\n# aabca = 11231\n# aabcb = 11232\n# aabcc = 11233\n# aacaa = 11311\n# aacab = 11312\n# aacac = 11313\n# aacba = 11321\n# aacbb = 11322\n# aacbc = 11323\n# aacca = 11331\n# aaccb = 11332\n# aaccc = 11333\n# abaaa = 12111\n# abaab = 12112\n# abaac = 12113\n# ababa = 12121\n# ababb = 12122\n# ababc = 12123\n# abaca = 12131\n# abacb = 12132\n# abacc = 12133\n# abbaa = 12211\n# abbab = 12212\n# abbac = 12213\n# abbba = 12221\n# abbbb = 12222\n# abbbc = 12223\n# abbca = 12231\n# abbcb = 12232\n# abbcc = 12233\n# abcaa = 12311\n# abcab = 12312\n# abcac = 12313\n# abcba = 12321\n# abcbb = 12322\n# abcbc = 12323\n# abcca = 12331\n# abccb = 12332\n# abccc = 12333\n# acaaa = 13111\n# acaab = 13112\n# acaac = 13113\n# acaba = 13121\n# acabb = 13122\n# acabc = 13123\n# acaca = 13131\n# acacb = 13132\n# acacc = 13133\n# acbaa = 13211\n# acbab = 13212\n# acbac = 13213\n# acbba = 13221\n# acbbb = 13222\n# acbbc = 13223\n# acbca = 13231\n# acbcb = 13232\n# acbcc = 13233\n# accaa = 13311\n# accab = 13312\n# accac = 13313\n# accba = 13321\n# accbb = 13322\n# accbc = 13323\n# accca = 13331\n# acccb = 13332\n# acccc = 13333\n# baaaa = 21111\n# baaab = 21112\n# baaac = 21113\n# baaba = 21121\n# baabb = 21122\n# baabc = 21123\n# baaca = 21131\n# baacb = 21132\n# baacc = 21133\n# babaa = 21211\n# babab = 21212\n# babac = 21213\n# babba = 21221\n# babbb = 21222\n# babbc = 21223\n# babca = 21231\n# babcb = 21232\n# babcc = 21233\n# bacaa = 21311\n# bacab = 21312\n# bacac = 21313\n# bacba = 21321\n# bacbb = 21322\n# bacbc = 21323\n# bacca = 21331\n# baccb = 21332\n# baccc = 21333\n# bbaaa = 22111\n# bbaab = 22112\n# bbaac = 22113\n# bbaba = 22121\n# bbabb = 22122\n# bbabc = 22123\n# bbaca = 22131\n# bbacb = 22132\n# bbacc = 22133\n# bbbaa = 22211\n# bbbab = 22212\n# bbbac = 22213\n# bbbba = 22221\n# bbbbb = 22222\n# bbbbc = 22223\n# bbbca = 22231\n# bbbcb = 22232\n# bbbcc = 22233\n# bbcaa = 22311\n# bbcab = 22312\n# bbcac = 22313\n# bbcba = 22321\n# bbcbb = 22322\n# bbcbc = 22323\n# bbcca = 22331\n# bbccb = 22332\n# bbccc = 22333\n# bcaaa = 23111\n# bcaab = 23112\n# bcaac = 23113\n# bcaba = 23121\n# bcabb = 23122\n# bcabc = 23123\n# bcaca = 23131\n# bcacb = 23132\n# bcacc = 23133\n# bcbaa = 23211\n# bcbab = 23212\n# bcbac = 23213\n# bcbba = 23221\n# bcbbb = 23222\n# bcbbc = 23223\n# bcbca = 23231\n# bcbcc = 23233\n# bccaa = 23311\n# bccab = 23312\n# bccac = 23313\n# bccba = 23321\n# bccbb = 23322\n# bccbc = 23323\n# bccca = 23331\n# bcccb = 23332\n# bcccc = 23333\n# caaaa = 31111\n# caaab = 31112\n# caaac = 31113\n# caaba = 31121\n# caabb = 31122\n# caabc = 31123\n# caaca = 31131\n# caacb = 31132\n# caacc = 31133\n# cabaa = 31211\n# cabab = 31212\n# cabac = 31213\n# cabba = 31221\n# cabbb = 31222\n# cabbc = 31223\n# cabca = 31231\n# cabcb = 31232\n# cabcc = 31233\n# cacaa = 31311\n# cacab = 31312\n# cacac = 31313\n# cacba = 31321\n# cacbb = 31322\n# cacbc = 31323\n# cacca = 31331\n# caccb = 31332\n# caccc = 31333\n# cbaaa = 32111\n# cbaab = 32112\n# cbaac = 32113\n# cbaba = 32121\n# cbabb = 32122\n# cbabc = 32123\n# cbaca = 32131\n# cbacb = 32132\n# cbacc = 32133\n# cbbaa = 32211\n# cbbab = 32212\n# cbbac = 32213\n# cbbba = 32221\n# cbbbb = 32222\n# cbbbc = 32223\n# cbbca = 32231\n# cbbcb = 32232\n# cbbcc = 32233\n# cbcaa = 32311\n# cbcab = 32312\n# cbcac = 32313\n# cbcba = 32321\n# cbcbb = 32322\n# cbcbc = 32323\n# cbcca = 32331\n# cbccb = 32332\n# cbccc = 32333\n# ccaaa = 33111\n# ccaab = 33112\n# ccaac = 33113\n# ccaba = 33121\n# ccabb = 33122\n# ccabc = 33123\n# ccaca = 33131\n# ccacb = 33132\n# ccacc = 33133\n# ccbaa = 33211\n# ccbab = 33212\n# ccbac = 33213\n# ccbba = 33221\n# ccbbb = 33222\n# ccbbc = 33223\n# ccbca = 33231\n# ccbcc = 33233\n# cccaa = 33311\n# cccab = 33312\n# cccac = 33313\n# cccba = 33321\n# cccbb = 33322\n# cccbc = 33323\n# cccca = 33331\n# ccccb = 33332\n# ccccc = 33333\n\n# aaaaaa = 111111\n# aaaaab = 111112\n# aaaaac = 111113\n# aaaaba = 111121\n# aaaabb = 111122\n# aaaabc = 111123\n# aaaaca = 111131\n# aaaacb = 111132\n# aaaacc = 111133\n# aaabaa = 111211\n# aaabab = 111212\n# aaabac = 111213\n# aaabba = 111221\n# aaabbb = 111222\n# aaabbc = 111223\n# aaabca = 111231\n# aaabcb = 111232\n# aaabcc = 111233\n# aaacaa = 111311\n# aaacab = 111312\n# aaacac = 111313\n# a"
    }
  ],
  "created": 1650405042,
  "id": "cmpl-4yq26lTy3bZQFS36pQVo8ZSAC9siX",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:52:08.724672 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nwords = input().split(' ')\n\n#print(words)\n\ndef abbreviation(words):\n    \"\"\"\n    Returns the length of the text after abbreviation\n    \"\"\"\n    length = 0\n    i = 0\n    while i < len(words):\n        #print(words)\n        if i+1 < len(words) and words[i] == words[i+1]:\n            #print('i =', i)\n            #print('i+1 =', i+1)\n            #print('words[i]', words[i])\n            #print('words[i+1]', words[i+1])\n            #print('length =', length)\n            #print('len(words[i]) =', len(words[i]))\n            #print('len(words[i+1]) =', len(words[i+1]))\n            #print('len(words[i]) + len(words[i+1]) =', len(words[i]) + len(words[i+1]))\n            #print('len(words[i]) + len(words[i+1]) - 1 =', len(words[i]) + len(words[i+1]) - 1)\n            #print('len(words[i]) + len(words[i+1]) - 2 =', len(words[i]) + len(words[i+1]) - 2)\n            #print('len(words[i]) + len(words[i+1]) - 3 =', len(words[i]) + len(words[i+1]) - 3)\n            length = length - len(words[i]) - len(words[i+1]) + 1\n            words[i] = words[i][0].upper()\n            del words[i+1]\n            #print('length =', length)\n            #print('i =', i)\n            #print('i+1 =', i+1)\n        else:\n            length = length + len(words[i])\n            #print('length =', length)\n            i = i + 1\n            #print('i =', i)\n    return length\n\nprint(abbreviation(words))"
}
2022-04-19 21:52:08.724759 REASON stop
2022-04-19 21:52:08.725260 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    min_length = len(\"\".join(words))\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n                if words[i:j] == words[j:k]:\n                    abbreviation = words[i][0].upper() + str(len(words[i:j]))\n                    new_words = words[:i] + [abbreviation] + words[k:]\n                    min_length = min(len(\"\".join(new_words)), min_length)\n    print(min_length)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:52:08.725322 REASON stop
2022-04-19 21:52:08.725740 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    text = input()\n    print(min_length(text))\n\n\ndef min_length(text):\n    words = text.split()\n    dp = [0] * len(words)\n\n    dp[0] = len(words[0])\n    for i in range(1, len(words)):\n        dp[i] = dp[i - 1] + len(words[i])\n\n    for i in range(1, len(words)):\n        for j in range(i + 1, len(words)):\n            if words[i] == words[j]:\n                if i > 0:\n                    dp[j] = min(dp[j], dp[i - 1] + len(words[i]) + 1)\n                else:\n                    dp[j] = min(dp[j], len(words[i]) + 1)\n    return dp[-1]\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:52:08.725808 REASON stop
2022-04-19 21:52:08.747714 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    words = sys.stdin.readline().split()\n\n    # Build a dictionary of word frequencies\n    word_map = {}\n    for word in words:\n        if word not in word_map:\n            word_map[word] = 1\n        else:\n            word_map[word] += 1\n\n    # Find the most frequently used word\n    most_frequent = 0\n    for word in word_map:\n        if word_map[word] > most_frequent:\n            most_frequent = word_map[word]\n\n    # Find the length of the most frequently used word\n    # and the number of words in the text\n    length_of_most_frequent = 0\n    for word in word_map:\n        if word_map[word] == most_frequent:\n            length_of_most_frequent = len(word)\n\n    # The minimum length of the text after at most one abbreviation\n    # is the length of the most frequently used word plus the number\n    # of words in the text minus the most frequent word\n    print(length_of_most_frequent + n - most_frequent)\n\nmain()"
}
2022-04-19 21:52:08.747836 REASON stop
2022-04-19 21:52:08.768116 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom math import inf\n\ndef main():\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    # print(n, words)\n    lengths = [len(w) for w in words]\n    # print(lengths)\n    total_length = sum(lengths)\n    # print(total_length)\n    # print(list(combinations(range(n), 2)))\n    # print()\n    min_length = inf\n    for i, j in combinations(range(n), 2):\n        # print(i, j)\n        if words[i] == words[j]:\n            k = i + 1\n            while k < j and words[k] == words[i]:\n                k += 1\n            # print(i, j, k)\n            if k == j:\n                # print(words[i], k - i)\n                # print(total_length - (k - i) * lengths[i] + len(words[i].upper()))\n                min_length = min(min_length, total_length - (k - i) * lengths[i] + len(words[i].upper()))\n    print(min_length if min_length != inf else total_length)\n\nmain()"
}
2022-04-19 21:52:08.768259 REASON stop
2022-04-19 21:52:08.769539 5 {
  "finish_reason": "length",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\n# split the string into an array of words\nwords = s.split(\" \")\n\n# create an array of the lengths of the words\nlengths = [len(w) for w in words]\n\n# create an array of the lengths of the first letters of the words\nfirst_letters = [len(w[0]) for w in words]\n\n# create an array of the lengths of the second letters of the words\nsecond_letters = [len(w[1:]) for w in words]\n\n# create an array of the lengths of the first two letters of the words\nfirst_two_letters = [len(w[:2]) for w in words]\n\n# create an array of the lengths of the first three letters of the words\nfirst_three_letters = [len(w[:3]) for w in words]\n\n# create an array of the lengths of the first four letters of the words\nfirst_four_letters = [len(w[:4]) for w in words]\n\n# create an array of the lengths of the first five letters of the words\nfirst_five_letters = [len(w[:5]) for w in words]\n\n# create an array of the lengths of the first six letters of the words\nfirst_six_letters = [len(w[:6]) for w in words]\n\n# create an array of the lengths of the first seven letters of the words\nfirst_seven_letters = [len(w[:7]) for w in words]\n\n# create an array of the lengths of the first eight letters of the words\nfirst_eight_letters = [len(w[:8]) for w in words]\n\n# create an array of the lengths of the first nine letters of the words\nfirst_nine_letters = [len(w[:9]) for w in words]\n\n# create an array of the lengths of the first ten letters of the words\nfirst_ten_letters = [len(w[:10]) for w in words]\n\n# create an array of the lengths of the first eleven letters of the words\nfirst_eleven_letters = [len(w[:11]) for w in words]\n\n# create an array of the lengths of the first twelve letters of the words\nfirst_twelve_letters = [len(w[:12]) for w in words]\n\n# create an array of the lengths of the first thirteen letters of the words\nfirst_thirteen_letters = [len(w[:13]) for w in words]\n\n# create an array of the lengths of the first fourteen letters of the words\nfirst_fourteen_letters = [len(w[:14]) for w in words]\n\n# create an array of the lengths of the first fifteen letters of the words\nfirst_fifteen_letters = [len(w[:15]) for w in words]\n\n# create an array of the lengths of the first sixteen letters of the words\nfirst_sixteen_letters = [len(w[:16]) for w in words]\n\n# create an array of the lengths of the first seventeen letters of the words\nfirst_seventeen_letters = [len(w[:17]) for w in words]\n\n# create an array of the lengths of the first eighteen letters of the words\nfirst_eighteen_letters = [len(w[:18]) for w in words]\n\n# create an array of the lengths of the first nineteen letters of the words\nfirst_nineteen_letters = [len(w[:19]) for w in words]\n\n# create an array of the lengths of the first twenty letters of the words\nfirst_twenty_letters = [len(w[:20]) for w in words]\n\n# create an array of the lengths of the first twenty-one letters of the words\nfirst_twenty_one_letters = [len(w[:21]) for w in words]\n\n# create an array of the lengths of the first twenty-two letters of the words\nfirst_twenty_two_letters = [len(w[:22]) for w in words]\n\n# create an array of the lengths of the first twenty-three letters of the words\nfirst_twenty_three_letters = [len(w[:23]) for w in words]\n\n# create an array of the lengths of the first twenty-four letters of the words\nfirst_twenty_four_letters = [len(w[:24]) for w in words]\n\n# create an array of the lengths of the first twenty-five letters of the words\nfirst_twenty_five_letters = [len(w[:25]) for w in words]\n\n# create an array of the lengths of the first twenty-six letters of the words\nfirst_twenty_six_letters = [len(w[:26]) for w in words]\n\n# create an array of the lengths of the first twenty-seven letters of the words\nfirst_twenty_seven_letters = [len(w[:27]) for w in words]\n\n# create an array of the lengths of the first twenty-eight letters of the words\nfirst_twenty_eight_letters = [len(w[:28]) for w in words]\n\n# create an array of the lengths of the first twenty-nine letters of the words\nfirst_twenty_nine_letters = [len(w[:29]) for w in words]\n\n# create an array of the lengths of the first thirty letters of the words\nfirst_thirty_letters = [len(w[:30]) for w in words]\n\n# create an array of the lengths of the first thirty-one letters of the words\nfirst_thirty_one_letters = [len(w[:31]) for w in words]\n\n# create an array of the lengths of the first thirty-two letters of the words\nfirst_thirty_two_letters = [len(w[:32]) for w in words]\n\n# create an array of the lengths of the first thirty-three letters of the words\nfirst_thirty_three_letters = [len(w[:33]) for w in words]\n\n# create an array of the lengths of the first thirty-four letters of the words\nfirst_thirty_four_letters = [len(w[:34]) for w in words]\n\n# create an array of the lengths of the first thirty-five letters of the words\nfirst_thirty_five_letters = [len(w[:35]) for w in words]\n\n# create an array of the lengths of the first thirty-six letters of the words\nfirst_thirty_six_letters = [len(w[:36]) for w in words]\n\n# create an array of the lengths of the first thirty-seven letters of the words\nfirst_thirty_seven_letters = [len(w[:37]) for w in words]\n\n# create an array of the lengths of the first thirty-eight letters of the words\nfirst_thirty_eight_letters = [len(w[:38]) for w in words]\n\n# create an array of the lengths of the first thirty-nine letters of the words\nfirst_thirty_nine_letters = [len(w[:39]) for w in words]\n\n# create an array of the lengths of the first forty letters of the words\nfirst_forty_letters = [len(w[:40]) for w in words]\n\n# create an array of the lengths of the first forty-one letters of the words\nfirst_forty_one_letters = [len(w[:41]) for w in words]\n\n# create an array of the lengths of the first forty-two letters of the words\nfirst_forty_two_letters = [len(w[:42]) for w in words]\n\n# create an array of the lengths of the first forty-three letters of the words\nfirst_forty_three_letters = [len(w[:43]) for w in words]\n\n# create an array of the lengths of the first forty-four letters of the words\nfirst_forty_four_letters = [len(w[:44]) for w in words]\n\n# create an array of the lengths of the first forty-five letters of the words\nfirst_forty_five_letters = [len(w[:45]) for w in words]\n\n# create an array of the lengths of the first forty-six letters of the words\nfirst_forty_six_letters = [len(w[:46]) for w in words]\n\n# create an array of the lengths of the first forty-seven letters of the words\nfirst_forty_seven_letters = [len(w[:47]) for w in words]\n\n# create an array of the lengths of the first forty-eight letters of the words\nfirst_forty_eight_letters = [len(w[:48]) for w in words]\n\n# create an array of the lengths of the first forty-nine letters of the words\nfirst_forty_nine_letters = [len(w[:49]) for w in words]\n\n# create an array of the lengths of the first fifty letters of the words\nfirst_fifty_letters = [len(w[:50]) for w in words]\n\n# create an array of the lengths of the first fifty-one letters of the words\nfirst_fifty_one_letters = [len(w[:51]) for w in words]\n\n# create an array of the lengths of the first fifty-two letters of the words\nfirst_fifty_two_letters = [len(w[:52]) for w in words]\n\n# create an array of the lengths of the first fifty-three letters of the words\nfirst_fifty_three_letters = [len(w[:53]) for w in words]\n\n# create an array of the lengths of the first fifty-four letters of the words\nfirst_fifty_four_letters = [len(w[:54]) for w in words]\n\n# create an array of the lengths of the first fifty-five letters of the words\nfirst_fifty_five_letters = [len(w[:55]) for w in words]\n\n# create an array of the lengths of the first fifty-six letters of the words\nfirst_fifty_six_letters = [len(w[:56]) for w in words]\n\n# create an array of the lengths of the first fifty-seven letters of the words\nfirst_fifty_seven_letters = [len(w[:57]) for w in words]\n\n# create an array of the lengths of the first fifty-eight letters of the words\nfirst_fifty_eight_letters = [len(w[:58]) for w in words]\n\n# create an array of the lengths of the first fifty-nine letters of the words\nfirst_fifty_nine_letters = [len(w[:59]) for w in words]\n\n# create an array of the lengths of the first sixty letters of the words\nfirst_sixty_letters = [len(w[:60]) for w in words]\n\n# create an array of the lengths of the first sixty-one letters of the words\nfirst_sixty_one_letters = [len(w[:61]) for w in words]\n\n# create an array of the lengths of the first sixty-two letters of the words\nfirst_sixty_two_letters = [len(w[:62]) for w in words]\n\n# create an array of the lengths of the first sixty-three letters of the words\nfirst_sixty_three_letters = [len(w[:63]) for w in words]\n\n# create an array of the lengths of the first sixty-four letters of the words\nfirst_sixty_four_letters = [len(w[:64]) for w in words]\n\n# create an array of the lengths of the first sixty-five letters of the words\nfirst_sixty_five_letters = [len(w[:65]) for w in words]\n\n# create an array of the lengths of the first sixty-six letters of the words\nfirst_sixty_six_letters = [len(w[:66]) for w in words]\n\n# create an array of the lengths of the first sixty-seven letters of the words\nfirst_sixty_seven_letters = [len(w[:67]) for w in words]\n\n# create an array of the lengths of the first sixty-eight letters of the words\nfirst_sixty_eight_letters = [len(w[:68]) for w in words]\n\n# create an array of the lengths of the first sixty-nine letters of the words\nfirst_sixty_nine_letters = [len(w[:69]) for w in words]\n\n# create an array of the lengths of the first seventy letters of the words\n"
}
2022-04-19 21:52:08.769720 REASON length
2022-04-19 21:52:08.769732 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# First, we calculate the number of occurrences for each word.\n# Then, we find the maximum number of occurrences for any word.\n# Finally, we calculate the total number of letters in the text,\n# and subtract the number of occurrences of the most frequent word.\n# We add 1 because we also need to count the number of spaces.\n\nn = int(input())\nwords = input().split()\n\noccurrences = {}\nfor word in words:\n    if word not in occurrences:\n        occurrences[word] = 1\n    else:\n        occurrences[word] += 1\n\nmax_occurrences = max(occurrences.values())\n\ntotal_letters = sum(len(word) for word in words)\n\nprint(total_letters - max_occurrences + 1)"
}
2022-04-19 21:52:08.769769 REASON stop
2022-04-19 21:52:08.770293 7 {
  "finish_reason": "length",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn = int(input())\ntext = input()\n\n# a = 1\n# b = 2\n# c = 3\n\n# aa = 11\n# ab = 12\n# ac = 13\n# ba = 21\n# bb = 22\n# bc = 23\n# ca = 31\n# cb = 32\n# cc = 33\n\n# aaa = 111\n# aab = 112\n# aac = 113\n# aba = 121\n# abb = 122\n# abc = 123\n# aca = 131\n# acb = 132\n# acc = 133\n# baa = 211\n# bab = 212\n# bac = 213\n# bba = 221\n# bbb = 222\n# bbc = 223\n# bca = 231\n# bcb = 232\n# bcc = 233\n# caa = 311\n# cab = 312\n# cac = 313\n# cba = 321\n# cbb = 322\n# cbc = 323\n# cca = 331\n# ccb = 332\n# ccc = 333\n\n# aaaa = 1111\n# aaab = 1112\n# aaac = 1113\n# aaba = 1121\n# aabb = 1122\n# aabc = 1123\n# aaca = 1131\n# aacb = 1132\n# aacc = 1133\n# abaa = 1211\n# abab = 1212\n# abac = 1213\n# abba = 1221\n# abbb = 1222\n# abbc = 1223\n# abca = 1231\n# abcb = 1232\n# abcc = 1233\n# acaa = 1311\n# acab = 1312\n# acac = 1313\n# acba = 1321\n# acbb = 1322\n# acbc = 1323\n# acca = 1331\n# accb = 1332\n# accc = 1333\n# baaa = 2111\n# baab = 2112\n# baac = 2113\n# baba = 2121\n# babb = 2122\n# babc = 2123\n# baca = 2131\n# bacb = 2132\n# bacc = 2133\n# bbaa = 2211\n# bbab = 2212\n# bbac = 2213\n# bbba = 2221\n# bbbb = 2222\n# bbbc = 2223\n# bbca = 2231\n# bbcb = 2232\n# bbcc = 2233\n# bcaa = 2311\n# bcab = 2312\n# bcac = 2313\n# bcba = 2321\n# bcbb = 2322\n# bcbc = 2323\n# bcca = 2331\n# bccb = 2332\n# bccc = 2333\n# caaa = 3111\n# caab = 3112\n# caac = 3113\n# caba = 3121\n# cabb = 3122\n# cabc = 3123\n# caca = 3131\n# cacb = 3132\n# cacc = 3133\n# cbaa = 3211\n# cbab = 3212\n# cbac = 3213\n# cbba = 3221\n# cbbb = 3222\n# cbbc = 3223\n# cbca = 3231\n# cbcb = 3232\n# cbcc = 3233\n# ccaa = 3311\n# ccab = 3312\n# ccac = 3313\n# ccba = 3321\n# ccbb = 3322\n# ccbc = 3323\n# ccca = 3331\n# cccb = 3332\n# cccc = 3333\n\n# aaaaa = 11111\n# aaaab = 11112\n# aaaac = 11113\n# aaaba = 11121\n# aaabb = 11122\n# aaabc = 11123\n# aaaca = 11131\n# aaacb = 11132\n# aaacc = 11133\n# aabaa = 11211\n# aabab = 11212\n# aabac = 11213\n# aabba = 11221\n# aabbb = 11222\n# aabbc = 11223\n# aabca = 11231\n# aabcb = 11232\n# aabcc = 11233\n# aacaa = 11311\n# aacab = 11312\n# aacac = 11313\n# aacba = 11321\n# aacbb = 11322\n# aacbc = 11323\n# aacca = 11331\n# aaccb = 11332\n# aaccc = 11333\n# abaaa = 12111\n# abaab = 12112\n# abaac = 12113\n# ababa = 12121\n# ababb = 12122\n# ababc = 12123\n# abaca = 12131\n# abacb = 12132\n# abacc = 12133\n# abbaa = 12211\n# abbab = 12212\n# abbac = 12213\n# abbba = 12221\n# abbbb = 12222\n# abbbc = 12223\n# abbca = 12231\n# abbcb = 12232\n# abbcc = 12233\n# abcaa = 12311\n# abcab = 12312\n# abcac = 12313\n# abcba = 12321\n# abcbb = 12322\n# abcbc = 12323\n# abcca = 12331\n# abccb = 12332\n# abccc = 12333\n# acaaa = 13111\n# acaab = 13112\n# acaac = 13113\n# acaba = 13121\n# acabb = 13122\n# acabc = 13123\n# acaca = 13131\n# acacb = 13132\n# acacc = 13133\n# acbaa = 13211\n# acbab = 13212\n# acbac = 13213\n# acbba = 13221\n# acbbb = 13222\n# acbbc = 13223\n# acbca = 13231\n# acbcb = 13232\n# acbcc = 13233\n# accaa = 13311\n# accab = 13312\n# accac = 13313\n# accba = 13321\n# accbb = 13322\n# accbc = 13323\n# accca = 13331\n# acccb = 13332\n# acccc = 13333\n# baaaa = 21111\n# baaab = 21112\n# baaac = 21113\n# baaba = 21121\n# baabb = 21122\n# baabc = 21123\n# baaca = 21131\n# baacb = 21132\n# baacc = 21133\n# babaa = 21211\n# babab = 21212\n# babac = 21213\n# babba = 21221\n# babbb = 21222\n# babbc = 21223\n# babca = 21231\n# babcb = 21232\n# babcc = 21233\n# bacaa = 21311\n# bacab = 21312\n# bacac = 21313\n# bacba = 21321\n# bacbb = 21322\n# bacbc = 21323\n# bacca = 21331\n# baccb = 21332\n# baccc = 21333\n# bbaaa = 22111\n# bbaab = 22112\n# bbaac = 22113\n# bbaba = 22121\n# bbabb = 22122\n# bbabc = 22123\n# bbaca = 22131\n# bbacb = 22132\n# bbacc = 22133\n# bbbaa = 22211\n# bbbab = 22212\n# bbbac = 22213\n# bbbba = 22221\n# bbbbb = 22222\n# bbbbc = 22223\n# bbbca = 22231\n# bbbcb = 22232\n# bbbcc = 22233\n# bbcaa = 22311\n# bbcab = 22312\n# bbcac = 22313\n# bbcba = 22321\n# bbcbb = 22322\n# bbcbc = 22323\n# bbcca = 22331\n# bbccb = 22332\n# bbccc = 22333\n# bcaaa = 23111\n# bcaab = 23112\n# bcaac = 23113\n# bcaba = 23121\n# bcabb = 23122\n# bcabc = 23123\n# bcaca = 23131\n# bcacb = 23132\n# bcacc = 23133\n# bcbaa = 23211\n# bcbab = 23212\n# bcbac = 23213\n# bcbba = 23221\n# bcbbb = 23222\n# bcbbc = 23223\n# bcbca = 23231\n# bcbcc = 23233\n# bccaa = 23311\n# bccab = 23312\n# bccac = 23313\n# bccba = 23321\n# bccbb = 23322\n# bccbc = 23323\n# bccca = 23331\n# bcccb = 23332\n# bcccc = 23333\n# caaaa = 31111\n# caaab = 31112\n# caaac = 31113\n# caaba = 31121\n# caabb = 31122\n# caabc = 31123\n# caaca = 31131\n# caacb = 31132\n# caacc = 31133\n# cabaa = 31211\n# cabab = 31212\n# cabac = 31213\n# cabba = 31221\n# cabbb = 31222\n# cabbc = 31223\n# cabca = 31231\n# cabcb = 31232\n# cabcc = 31233\n# cacaa = 31311\n# cacab = 31312\n# cacac = 31313\n# cacba = 31321\n# cacbb = 31322\n# cacbc = 31323\n# cacca = 31331\n# caccb = 31332\n# caccc = 31333\n# cbaaa = 32111\n# cbaab = 32112\n# cbaac = 32113\n# cbaba = 32121\n# cbabb = 32122\n# cbabc = 32123\n# cbaca = 32131\n# cbacb = 32132\n# cbacc = 32133\n# cbbaa = 32211\n# cbbab = 32212\n# cbbac = 32213\n# cbbba = 32221\n# cbbbb = 32222\n# cbbbc = 32223\n# cbbca = 32231\n# cbbcb = 32232\n# cbbcc = 32233\n# cbcaa = 32311\n# cbcab = 32312\n# cbcac = 32313\n# cbcba = 32321\n# cbcbb = 32322\n# cbcbc = 32323\n# cbcca = 32331\n# cbccb = 32332\n# cbccc = 32333\n# ccaaa = 33111\n# ccaab = 33112\n# ccaac = 33113\n# ccaba = 33121\n# ccabb = 33122\n# ccabc = 33123\n# ccaca = 33131\n# ccacb = 33132\n# ccacc = 33133\n# ccbaa = 33211\n# ccbab = 33212\n# ccbac = 33213\n# ccbba = 33221\n# ccbbb = 33222\n# ccbbc = 33223\n# ccbca = 33231\n# ccbcc = 33233\n# cccaa = 33311\n# cccab = 33312\n# cccac = 33313\n# cccba = 33321\n# cccbb = 33322\n# cccbc = 33323\n# cccca = 33331\n# ccccb = 33332\n# ccccc = 33333\n\n# aaaaaa = 111111\n# aaaaab = 111112\n# aaaaac = 111113\n# aaaaba = 111121\n# aaaabb = 111122\n# aaaabc = 111123\n# aaaaca = 111131\n# aaaacb = 111132\n# aaaacc = 111133\n# aaabaa = 111211\n# aaabab = 111212\n# aaabac = 111213\n# aaabba = 111221\n# aaabbb = 111222\n# aaabbc = 111223\n# aaabca = 111231\n# aaabcb = 111232\n# aaabcc = 111233\n# aaacaa = 111311\n# aaacab = 111312\n# aaacac = 111313\n# a"
}
2022-04-19 21:52:08.770491 REASON length
