["\n\ndef main():\n    n = int(input())\n    words = input().split()\n    min_length = len(\"\".join(words))\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n                if words[i:j] == words[j:k]:\n                    abbreviation = words[i][0].upper() + str(len(words[i:j]))\n                    new_words = words[:i] + [abbreviation] + words[k:]\n                    min_length = min(len(\"\".join(new_words)), min_length)\n    print(min_length)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    words = sys.stdin.readline().split()\n\n    # Build a dictionary of word frequencies\n    word_map = {}\n    for word in words:\n        if word not in word_map:\n            word_map[word] = 1\n        else:\n            word_map[word] += 1\n\n    # Find the most frequently used word\n    most_frequent = 0\n    for word in word_map:\n        if word_map[word] > most_frequent:\n            most_frequent = word_map[word]\n\n    # Find the length of the most frequently used word\n    # and the number of words in the text\n    length_of_most_frequent = 0\n    for word in word_map:\n        if word_map[word] == most_frequent:\n            length_of_most_frequent = len(word)\n\n    # The minimum length of the text after at most one abbreviation\n    # is the length of the most frequently used word plus the number\n    # of words in the text minus the most frequent word\n    print(length_of_most_frequent + n - most_frequent)\n\nmain()", "\n\nfrom sys import stdin\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom math import inf\n\ndef main():\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    # print(n, words)\n    lengths = [len(w) for w in words]\n    # print(lengths)\n    total_length = sum(lengths)\n    # print(total_length)\n    # print(list(combinations(range(n), 2)))\n    # print()\n    min_length = inf\n    for i, j in combinations(range(n), 2):\n        # print(i, j)\n        if words[i] == words[j]:\n            k = i + 1\n            while k < j and words[k] == words[i]:\n                k += 1\n            # print(i, j, k)\n            if k == j:\n                # print(words[i], k - i)\n                # print(total_length - (k - i) * lengths[i] + len(words[i].upper()))\n                min_length = min(min_length, total_length - (k - i) * lengths[i] + len(words[i].upper()))\n    print(min_length if min_length != inf else total_length)\n\nmain()", "\n\nn = int(input())\nwords = input().split(' ')\n\n#print(words)\n\ndef abbreviation(words):\n    \"\"\"\n    Returns the length of the text after abbreviation\n    \"\"\"\n    length = 0\n    i = 0\n    while i < len(words):\n        #print(words)\n        if i+1 < len(words) and words[i] == words[i+1]:\n            #print('i =', i)\n            #print('i+1 =', i+1)\n            #print('words[i]', words[i])\n            #print('words[i+1]', words[i+1])\n            #print('length =', length)\n            #print('len(words[i]) =', len(words[i]))\n            #print('len(words[i+1]) =', len(words[i+1]))\n            #print('len(words[i]) + len(words[i+1]) =', len(words[i]) + len(words[i+1]))\n            #print('len(words[i]) + len(words[i+1]) - 1 =', len(words[i]) + len(words[i+1]) - 1)\n            #print('len(words[i]) + len(words[i+1]) - 2 =', len(words[i]) + len(words[i+1]) - 2)\n            #print('len(words[i]) + len(words[i+1]) - 3 =', len(words[i]) + len(words[i+1]) - 3)\n            length = length - len(words[i]) - len(words[i+1]) + 1\n            words[i] = words[i][0].upper()\n            del words[i+1]\n            #print('length =', length)\n            #print('i =', i)\n            #print('i+1 =', i+1)\n        else:\n            length = length + len(words[i])\n            #print('length =', length)\n            i = i + 1\n            #print('i =', i)\n    return length\n\nprint(abbreviation(words))", "\n\n# SOLUTION\n# First, we calculate the number of occurrences for each word.\n# Then, we find the maximum number of occurrences for any word.\n# Finally, we calculate the total number of letters in the text,\n# and subtract the number of occurrences of the most frequent word.\n# We add 1 because we also need to count the number of spaces.\n\nn = int(input())\nwords = input().split()\n\noccurrences = {}\nfor word in words:\n    if word not in occurrences:\n        occurrences[word] = 1\n    else:\n        occurrences[word] += 1\n\nmax_occurrences = max(occurrences.values())\n\ntotal_letters = sum(len(word) for word in words)\n\nprint(total_letters - max_occurrences + 1)", "\n\n\ndef main():\n    n = int(input())\n    text = input()\n    print(min_length(text))\n\n\ndef min_length(text):\n    words = text.split()\n    dp = [0] * len(words)\n\n    dp[0] = len(words[0])\n    for i in range(1, len(words)):\n        dp[i] = dp[i - 1] + len(words[i])\n\n    for i in range(1, len(words)):\n        for j in range(i + 1, len(words)):\n            if words[i] == words[j]:\n                if i > 0:\n                    dp[j] = min(dp[j], dp[i - 1] + len(words[i]) + 1)\n                else:\n                    dp[j] = min(dp[j], len(words[i]) + 1)\n    return dp[-1]\n\nif __name__ == '__main__':\n    main()"]