2022-04-19 23:33:04.575580 """
We will call a string obtained by arranging the characters contained in a string a in some order, an anagram of a.
For example, greenbin is an anagram of beginner. As seen here, when the same character occurs multiple times, that character must be used that number of times.
Given are N strings s_1, s_2, \ldots, s_N. Each of these strings has a length of 10 and consists of lowercase English characters. Additionally, all of these strings are distinct. Find the number of pairs of integers i, j (1 \leq i < j \leq N) such that s_i is an anagram of s_j.

-----Constraints-----
 - 2 \leq N \leq 10^5
 - s_i is a string of length 10.
 - Each character in s_i is a lowercase English letter.
 - s_1, s_2, \ldots, s_N are all distinct.

-----Input-----
Input is given from Standard Input in the following format:
N
s_1
s_2
:
s_N

-----Output-----
Print the number of pairs of integers i, j (1 \leq i < j \leq N) such that s_i is an anagram of s_j.

-----Sample Input-----
3
acornistnt
peanutbomb
constraint

-----Sample Output-----
1

s_1 = acornistnt is an anagram of s_3 = constraint. There are no other pairs i, j such that s_i is an anagram of s_j, so the answer is 1.
"""
2022-04-19 23:33:04.575592 --------------------------
2022-04-19 23:33:04.575700 using api key gabby
2022-04-19 23:33:04.690068 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-19 23:33:09.695467 """
We will call a string obtained by arranging the characters contained in a string a in some order, an anagram of a.
For example, greenbin is an anagram of beginner. As seen here, when the same character occurs multiple times, that character must be used that number of times.
Given are N strings s_1, s_2, \ldots, s_N. Each of these strings has a length of 10 and consists of lowercase English characters. Additionally, all of these strings are distinct. Find the number of pairs of integers i, j (1 \leq i < j \leq N) such that s_i is an anagram of s_j.

-----Constraints-----
 - 2 \leq N \leq 10^5
 - s_i is a string of length 10.
 - Each character in s_i is a lowercase English letter.
 - s_1, s_2, \ldots, s_N are all distinct.

-----Input-----
Input is given from Standard Input in the following format:
N
s_1
s_2
:
s_N

-----Output-----
Print the number of pairs of integers i, j (1 \leq i < j \leq N) such that s_i is an anagram of s_j.

-----Sample Input-----
3
acornistnt
peanutbomb
constraint

-----Sample Output-----
1

s_1 = acornistnt is an anagram of s_3 = constraint. There are no other pairs i, j such that s_i is an anagram of s_j, so the answer is 1.
"""
2022-04-19 23:33:09.695502 --------------------------
2022-04-19 23:33:09.695623 using api key derek
2022-04-19 23:33:22.812252 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n = int(input())\n    s = [input() for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sorted(s[i]) == sorted(s[j]):\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# n = int(input())\n# d = dict()\n# for i in range(n):\n#     s = input()\n#     k = ''.join(sorted(s))\n#     if k in d:\n#         d[k] += 1\n#     else:\n#         d[k] = 1\n# ans = 0\n# for key in d:\n#     ans += d[key] * (d[key] - 1) // 2\n# print(ans)\n\nn = int(input())\nd = dict()\nfor i in range(n):\n    s = input()\n    k = ''.join(sorted(s))\n    if k in d:\n        d[k] += 1\n    else:\n        d[k] = 1\nans = 0\nfor key in d:\n    ans += d[key] * (d[key] - 1) // 2\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    words.sort()\n    count = 0\n    for i in range(n-1):\n        if words[i] == words[i+1]:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = []\n    for i in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    \n    t = []\n    for i in range(n):\n        t.append(\"\".join(sorted(s[i])))\n    t.sort()\n\n    ans = 0\n    for i in range(n-1):\n        if t[i] == t[i+1]:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\n# read input\nN = int(input())\ns = []\nfor i in range(N):\n    s.append(input())\n\n# sort the string\ns_sorted = [''.join(sorted(x)) for x in s]\n\n# count the number of pairs of anagrams\nc = Counter(s_sorted)\nans = 0\nfor key in c.keys():\n    ans += c[key] * (c[key]-1) // 2\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n#import sys\n#input = sys.stdin.readline\n\nN = int(input())\n\ns = []\nfor _ in range(N):\n    s.append(input())\n\ncount = 0\nfor i in range(N-1):\n    for j in range(i+1, N):\n        if sorted(s[i]) == sorted(s[j]):\n            count += 1\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport string\n\ndef anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    for c in string.ascii_lowercase:\n        if s1.count(c) != s2.count(c):\n            return False\n    return True\n\ndef main():\n    N = int(input())\n    s = []\n    for i in range(N):\n        s.append(input())\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\nimport collections\n\nn = int(sys.stdin.readline())\n\nresult = 0\n\nfor i in range(n):\n    s = sys.stdin.readline().rstrip()\n    if len(s) != 10:\n        continue\n\n    c = collections.Counter(s)\n    if i == 0:\n        first = c\n        continue\n    if first == c:\n        result += 1\n\nprint(result)"
    }
  ],
  "created": 1650411189,
  "id": "cmpl-4yrdFXE1vi0vkjetXh9G93WqUADHx",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 23:33:22.812620 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n = int(input())\n    s = [input() for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sorted(s[i]) == sorted(s[j]):\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:33:22.812656 REASON stop
2022-04-19 23:33:22.848123 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# n = int(input())\n# d = dict()\n# for i in range(n):\n#     s = input()\n#     k = ''.join(sorted(s))\n#     if k in d:\n#         d[k] += 1\n#     else:\n#         d[k] = 1\n# ans = 0\n# for key in d:\n#     ans += d[key] * (d[key] - 1) // 2\n# print(ans)\n\nn = int(input())\nd = dict()\nfor i in range(n):\n    s = input()\n    k = ''.join(sorted(s))\n    if k in d:\n        d[k] += 1\n    else:\n        d[k] = 1\nans = 0\nfor key in d:\n    ans += d[key] * (d[key] - 1) // 2\nprint(ans)"
}
2022-04-19 23:33:22.848269 REASON stop
2022-04-19 23:33:22.917494 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    words.sort()\n    count = 0\n    for i in range(n-1):\n        if words[i] == words[i+1]:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:33:22.917661 REASON stop
2022-04-19 23:33:22.964163 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = []\n    for i in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    \n    t = []\n    for i in range(n):\n        t.append(\"\".join(sorted(s[i])))\n    t.sort()\n\n    ans = 0\n    for i in range(n-1):\n        if t[i] == t[i+1]:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:33:22.964376 REASON stop
2022-04-19 23:33:23.023456 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\n# read input\nN = int(input())\ns = []\nfor i in range(N):\n    s.append(input())\n\n# sort the string\ns_sorted = [''.join(sorted(x)) for x in s]\n\n# count the number of pairs of anagrams\nc = Counter(s_sorted)\nans = 0\nfor key in c.keys():\n    ans += c[key] * (c[key]-1) // 2\n\nprint(ans)"
}
2022-04-19 23:33:23.023609 REASON stop
2022-04-19 23:33:23.053568 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n#import sys\n#input = sys.stdin.readline\n\nN = int(input())\n\ns = []\nfor _ in range(N):\n    s.append(input())\n\ncount = 0\nfor i in range(N-1):\n    for j in range(i+1, N):\n        if sorted(s[i]) == sorted(s[j]):\n            count += 1\n\nprint(count)"
}
2022-04-19 23:33:23.053727 REASON stop
2022-04-19 23:33:23.108504 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport string\n\ndef anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    for c in string.ascii_lowercase:\n        if s1.count(c) != s2.count(c):\n            return False\n    return True\n\ndef main():\n    N = int(input())\n    s = []\n    for i in range(N):\n        s.append(input())\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:33:23.108796 REASON stop
2022-04-19 23:33:23.157167 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\nimport collections\n\nn = int(sys.stdin.readline())\n\nresult = 0\n\nfor i in range(n):\n    s = sys.stdin.readline().rstrip()\n    if len(s) != 10:\n        continue\n\n    c = collections.Counter(s)\n    if i == 0:\n        first = c\n        continue\n    if first == c:\n        result += 1\n\nprint(result)"
}
2022-04-19 23:33:23.157318 REASON stop
