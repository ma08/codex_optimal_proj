["\n\nfrom collections import deque\nfrom itertools import combinations\nfrom sys import stdin\nfrom typing import Deque, Iterable, List, Tuple\n\n\ndef main() -> None:\n    n, a, b, c = map(int, stdin.readline().split())\n    ls: List[int] = [int(stdin.readline()) for _ in range(n)]\n\n    # dp[i][j]: i: the length of the bamboo, j: the number of bamboos with the length i\n    # dp[i][j] = min(dp[i - 1][j], dp[i - 2][j] + 1, dp[i - 1][j - 1] + 10)\n    dp: List[List[int]] = [[float(\"inf\") for _ in range(n + 1)] for _ in range(a + 1)]\n    dp[0][0] = 0\n    for i in range(1, a + 1):\n        for j in range(n + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i - 2][j] + 1, dp[i - 1][j - 1] + 10)\n\n    def solve(a: int, b: int, c: int, ls: Iterable[int]) -> int:\n        if a < b or b < c:\n            return float(\"inf\")\n\n        count: int = 0\n        for l in ls:\n            count += 1 if l >= a else 0\n\n        return dp[a][count] + dp[b][count] + dp[c][count]\n\n    print(min(solve(a, b, c, ls),\n              solve(a, c, b, ls),\n              solve(b, a, c, ls),\n              solve(b, c, a, ls),\n              solve(c, a, b, ls),\n              solve(c, b, a, ls)))\n\n\nif __name__ == '__main__':\n    main()", "\n\nN, A, B, C = map(int, input().split())\nl = [int(input()) for i in range(N)]\n\ndef dfs(n, a, b, c):\n    if n == N:\n        return abs(a-A) + abs(b-B) + abs(c-C) - 30 if min(a, b, c) > 0 else float('inf')\n    ret0 = dfs(n+1, a, b, c)\n    ret1 = dfs(n+1, a+l[n], b, c) + 10\n    ret2 = dfs(n+1, a, b+l[n], c) + 10\n    ret3 = dfs(n+1, a, b, c+l[n]) + 10\n    ret4 = dfs(n+1, a+l[n], b+l[n], c) + 20\n    ret5 = dfs(n+1, a+l[n], b, c+l[n]) + 20\n    ret6 = dfs(n+1, a, b+l[n], c+l[n]) + 20\n    return min(ret0, ret1, ret2, ret3, ret4, ret5, ret6)\n\nprint(dfs(0, 0, 0, 0))", "\n\nN, A, B, C = map(int, input().split())\nli = []\nfor i in range(N):\n    li.append(int(input()))\n\nli.sort()\n\nd = {}\nfor i in range(len(li)):\n    if li[i] in d:\n        d[li[i]].append(i)\n    else:\n        d[li[i]] = [i]\n\ndef get_key(d, val):\n    for key, value in d.items():\n        if val in value:\n            return key\n    return \"key doesn't exist\"\n\ndef get_val(d, key):\n    for k, v in d.items():\n        if k == key:\n            return v\n    return \"key doesn't exist\"\n\nans = 10**10\nfor i in range(N):\n    for j in range(N):\n        for k in range(N):\n            if i == j or j == k or k == i:\n                continue\n            if li[i] + li[j] + li[k] == A + B + C:\n                if li[i] == A:\n                    if li[j] == B:\n                        if li[k] == C:\n                            ans = min(ans, 0)\n                        else:\n                            ans = min(ans, abs(C - li[k]))\n                    else:\n                        if li[k] == C:\n                            ans = min(ans, abs(B - li[j]))\n                        else:\n                            ans = min(ans, abs(B - li[j]) + abs(C - li[k]))\n                else:\n                    if li[j] == B:\n                        if li[k] == C:\n                            ans = min(ans, abs(A - li[i]))\n                        else:\n                            ans = min(ans, abs(A - li[i]) + abs(C - li[k]))\n                    else:\n                        if li[k] == C:\n                            ans = min(ans, abs(A - li[i]) + abs(B - li[j]))\n                        else:\n                            ans = min(ans, abs(A - li[i]) + abs(B - li[j]) + abs(C - li[k]))\n            elif li[i] + li[j] == A + B:\n                if li[i] == A:\n                    ans = min(ans, abs(B - li[j]) + abs(C - (li[i] + li[j])))\n                else:\n                    ans = min(ans, abs(A - li[i]) + abs(B - li[j]) + abs(C - (li[i] + li[j])))\n            elif li[i] + li[j] == A + C:\n                if li[i] == A:\n                    ans = min(ans, abs(C - li[j]) + abs(B - (li[i] + li[j])))\n                else:\n                    ans = min(ans, abs(A - li[i]) + abs(C - li[j]) + abs(B - (li[i] + li[j])))\n            elif li[i] + li[j] == B + C:\n                if li[i] == B:\n                    ans = min(ans, abs(C - li[j]) + abs(A - (li[i] + li[j])))\n                else:\n                    ans = min(ans, abs(B - li[i]) + abs(C - li[j]) + abs(A - (li[i] + li[j])))\n            elif li[i] + li[j] + li[k] == A + B:\n                if li[i] == A:\n                    ans = min(ans, abs(B - li[j]) + abs(C - li[k]))\n                else:\n                    ans = min(ans, abs(A - li[i]) + abs(B - li[j]) + abs(C - li[k]))\n            elif li[i] + li[j] + li[k] == A + C:\n                if li[i] == A:\n                    ans = min(ans, abs(C - li[j]) + abs(B - li[k]))\n                else:\n                    ans = min(ans, abs(A - li[i]) + abs(C - li[j]) + abs(B - li[k]))\n            elif li[i] + li[j] + li[k] == B + C:\n                if li[i] == B:\n                    ans = min(ans, abs(C - li[j]) + abs(A - li[k]))\n                else:\n                    ans = min(ans, abs(B - li[i]) + abs(C - li[j]) + abs(A - li[k]))\nprint(ans)", "\n\nimport sys\nimport heapq\n\nn, a, b, c = map(int, sys.stdin.readline().split())\nl = [int(sys.stdin.readline()) for _ in range(n)]\n\nl.sort(reverse=True)\n\nh = []\n\nfor i in range(n):\n    heapq.heappush(h, (l[i], 1, l[i]))\n\n# print(h)\n\nfor _ in range(n):\n    bamboo, count, length = heapq.heappop(h)\n    # print(bamboo, count, length)\n    if length == a:\n        if b in h:\n            if c in h:\n                print(count)\n                sys.exit()\n            else:\n                heapq.heappush(h, (bamboo, count+10, length+b))\n        else:\n            if c in h:\n                heapq.heappush(h, (bamboo, count+10, length+c))\n            else:\n                heapq.heappush(h, (bamboo, count+10, length+b))\n                heapq.heappush(h, (bamboo, count+10, length+c))\n    elif length == b:\n        if c in h:\n            print(count)\n            sys.exit()\n        else:\n            heapq.heappush(h, (bamboo, count+10, length+c))\n    elif length == c:\n        print(count)\n        sys.exit()\n    else:\n        heapq.heappush(h, (bamboo, count+1, length+1))\n        if length > 1:\n            heapq.heappush(h, (bamboo, count+1, length-1))\n        if length > a:\n            heapq.heappush(h, (bamboo, count+10, length+a))\n        elif length > b:\n            heapq.heappush(h, (bamboo, count+10, length+b))\n        elif length > c:\n            heapq.heappush(h, (bamboo, count+10, length+c))\n\nprint(-1)", "\n\nimport sys\n\nN, A, B, C = map(int, sys.stdin.readline().strip().split())\nl_i = [int(sys.stdin.readline().strip()) for _ in range(N)]\n\n# MP = (A-a)+(B-b)+(C-c)+10*(n-3)\n# a = A-MP+(B-b)+(C-c)+10*(n-3)\n# b = B-MP+(A-a)+(C-c)+10*(n-3)\n# c = C-MP+(A-a)+(B-b)+10*(n-3)\n\ndef calc_mp(n, a, b, c):\n    return (A-a)+(B-b)+(C-c)+10*(n-3)\n\ndef calc_a(mp, b, c):\n    return A-mp+(B-b)+(C-c)+10*(N-3)\n\ndef calc_b(mp, a, c):\n    return B-mp+(A-a)+(C-c)+10*(N-3)\n\ndef calc_c(mp, a, b):\n    return C-mp+(A-a)+(B-b)+10*(N-3)\n\ndef is_valid(mp, a, b, c):\n    if a < 0 or b < 0 or c < 0:\n        return False\n    for l in l_i:\n        if l == a:\n            a = 0\n        elif l == b:\n            b = 0\n        elif l == c:\n            c = 0\n    return True if a+b+c == 0 else False\n\ndef main():\n    mp = None\n    for a in range(1, A+1):\n        for b in range(a+1, B+1):\n            for c in range(b+1, C+1):\n                if is_valid(calc_mp(N, a, b, c), a, b, c):\n                    mp = calc_mp(N, a, b, c)\n                    break\n            else:\n                continue\n            break\n        else:\n            continue\n        break\n    print(mp)\n\nif __name__ == \"__main__\":\n    main()", "\n\nN, A, B, C = map(int, input().split())\nl = [int(input()) for _ in range(N)]\n\ndp = [[[float(\"inf\") for _ in range(sum(l) + 1)] for _ in range(B + 1)] for _ in range(A + 1)]\ndp[0][0][0] = 0\n\nfor i in range(N):\n    for j in range(A + 1):\n        for k in range(B + 1):\n            for m in range(sum(l) + 1):\n                if dp[j][k][m] == float(\"inf\"):\n                    continue\n                if j + l[i] <= A:\n                    dp[j + l[i]][k][m] = min(dp[j + l[i]][k][m], dp[j][k][m] + 1)\n                if k + l[i] <= B:\n                    dp[j][k + l[i]][m] = min(dp[j][k + l[i]][m], dp[j][k][m] + 1)\n                if m + l[i] <= sum(l):\n                    dp[j][k][m + l[i]] = min(dp[j][k][m + l[i]], dp[j][k][m] + 1)\n                if j + l[i] <= A and k + l[i] <= B:\n                    dp[j + l[i]][k + l[i]][m] = min(dp[j + l[i]][k + l[i]][m], dp[j][k][m] + 10)\n                if j + l[i] <= A and m + l[i] <= sum(l):\n                    dp[j + l[i]][k][m + l[i]] = min(dp[j + l[i]][k][m + l[i]], dp[j][k][m] + 10)\n                if k + l[i] <= B and m + l[i] <= sum(l):\n                    dp[j][k + l[i]][m + l[i]] = min(dp[j][k + l[i]][m + l[i]], dp[j][k][m] + 10)\n\nans = float(\"inf\")\nfor i in range(A + 1):\n    for j in range(B + 1):\n        for k in range(sum(l) + 1):\n            if i == A and j == B and k == C:\n                ans = min(ans, dp[i][j][k])\n\nprint(ans)", "\n\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    ls = [int(sys.stdin.readline()) for i in range(n)]\n    ls.sort(reverse=True)\n    cost = 0\n    if ls[0] >= a:\n        ls[0] -= a\n        cost += a\n    else:\n        cost += ls[0]\n        ls[0] = 0\n    if ls[1] >= b:\n        ls[1] -= b\n        cost += b\n    else:\n        cost += ls[1]\n        ls[1] = 0\n    if ls[2] >= c:\n        ls[2] -= c\n        cost += c\n    else:\n        cost += ls[2]\n        ls[2] = 0\n    ls.sort()\n    if ls[1] + ls[2] >= a:\n        cost += a\n    else:\n        cost += ls[1] + ls[2]\n    if ls[1] + ls[2] >= b:\n        cost += b\n    else:\n        cost += ls[1] + ls[2]\n    if ls[0] + ls[1] >= c:\n        cost += c\n    else:\n        cost += ls[0] + ls[1]\n    print(cost)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    ls = []\n    for i in range(n):\n        ls.append(int(sys.stdin.readline()))\n\n    if a < b < c:\n        a, b, c = c, b, a\n\n    dp = [[[float(\"inf\") for i in range(101)] for j in range(101)] for k in range(101)]\n    dp[0][0][0] = 0\n\n    for l in ls:\n        for i in range(a+1):\n            for j in range(b+1):\n                for k in range(c+1):\n                    if dp[i][j][k] != float(\"inf\"):\n                        dp[i][j][k] += 1\n                        dp[i][j][k+l] = min(dp[i][j][k+l], dp[i][j][k] + (l-1))\n                        dp[i][j+l][k] = min(dp[i][j+l][k], dp[i][j][k] + (l-1))\n                        dp[i+l][j][k] = min(dp[i+l][j][k], dp[i][j][k] + (l-1))\n                        dp[i+l][j+l][k] = min(dp[i+l][j+l][k], dp[i][j][k] + 10 + (l-2))\n                        dp[i+l][j][k+l] = min(dp[i+l][j][k+l], dp[i][j][k] + 10 + (l-2))\n                        dp[i][j+l][k+l] = min(dp[i][j+l][k+l], dp[i][j][k] + 10 + (l-2))\n\n    print(dp[a][b][c])\n\n\nif __name__ == '__main__':\n    main()"]