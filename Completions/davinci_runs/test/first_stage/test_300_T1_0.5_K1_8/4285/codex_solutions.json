["", "\nimport sys\n\ndef readline():\n    return sys.stdin.readline()\n\ndef main():\n    n = int(readline())\n    s = readline()\n    MOD = 10**9 + 7\n\n    cnt = [0] * 26\n    for c in s:\n        if c == '?':\n            cnt[ord(c) - ord('a')] += 1\n        else:\n            cnt[ord(c) - ord('a')] += 1\n    # print(cnt)\n\n    # dp[i][j][k] = the number of ways to insert i 'a's, j 'b's and k 'c's\n    dp = [[[0] * (n+1) for _ in range(n+1)] for _ in range(n+1)]\n    dp[0][0][0] = 1\n    for a in range(n+1):\n        for b in range(n+1):\n            for c in range(n+1):\n                if a < n:\n                    dp[a+1][b][c] += dp[a][b][c]\n                if b < n:\n                    dp[a][b+1][c] += dp[a][b][c]\n                if c < n:\n                    dp[a][b][c+1] += dp[a][b][c]\n                dp[a][b][c] %= MOD\n\n    # print(dp)\n\n    ans = dp[cnt[ord('a')-ord('a')]][cnt[ord('b')-ord('a')]][cnt[ord('c')-ord('a')]]\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    \"\"\"\n    1. Read input\n    2. Calculate number of subsequences\n    3. Output result\n    \"\"\"\n    # 1. Read input\n    n = int(input())\n    s = input()\n\n    # 2. Calculate number of subsequences\n    # TODO: implement this\n\n    # 3. Output result\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport random\nimport time\nimport math\n\nclass Timer:\n    def __enter__(self):\n        self.start = time.clock()\n        return self\n\n    def __exit__(self, *args):\n        self.end = time.clock()\n        self.interval = self.end - self.start\n\n\ndef solve(s):\n    n = len(s)\n    d = [0] * n\n    for i in range(n):\n        if s[i] == '?':\n            d[i] = 3\n        else:\n            d[i] = 1\n    for i in range(1, n):\n        d[i] *= d[i - 1]\n\n    res = 0\n    for i in range(n - 2):\n        if s[i] == 'a' or s[i] == '?':\n            for j in range(i + 1, n - 1):\n                if s[j] == 'b' or s[j] == '?':\n                    for k in range(j + 1, n):\n                        if s[k] == 'c' or s[k] == '?':\n                            res += d[i] * d[j - i - 1] * d[n - k - 1]\n    return res % (10 ** 9 + 7)\n\n\ndef main():\n    sys.stdin = open('input.txt')\n    n = int(input())\n    s = input()\n    print(solve(s))\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n\ndef solve(n, s):\n    # count the number of a, b and c\n    a = 0\n    b = 0\n    c = 0\n    for i in range(n):\n        if s[i] == 'a':\n            a += 1\n        elif s[i] == 'b':\n            b += 1\n        elif s[i] == 'c':\n            c += 1\n    \n    # count the number of question mark\n    q = n - a - b - c\n    \n    # calculate the number of subsequences 'abc'\n    ans = a * b * c\n    for i in range(q):\n        ans = (ans * 3) % 1000000007\n    \n    return ans\n\nif __name__ == '__main__':\n    sys.exit(main())", "\n\ndef solution():\n    # Solution here\n    n = int(input())\n    s = input()\n    # print(n, s)\n\n    # count the number of question marks\n    k = 0\n    for i in range(n):\n        if s[i] == '?':\n            k += 1\n    # print(k)\n\n    # count the number of subsequences \"abc\" in the original string\n    cnt = 0\n    for i in range(n - 2):\n        if s[i] == 'a' and s[i + 1] == 'b' and s[i + 2] == 'c':\n            cnt += 1\n    # print(cnt)\n\n    # count the number of subsequences \"abc\" in all strings we can obtain if we replace\n    # all question marks with letters \"a\", \"b\" and \"c\"\n    res = 3 ** k * cnt\n\n    # print the result modulo $10^{9} + 7$\n    print(res % (10 ** 9 + 7))\n\n\nsolution()", "\n\n#-----Solution-----\n\n#This is a solution for the problem, but it is too slow.\ndef solution(string):\n    string = string.replace('?', 'abc')\n    total = 0\n    for i in string:\n        for j in string:\n            for k in string:\n                if i+j+k == 'abc':\n                    total += 1\n    return total\n\n#This is the solution for the problem.\ndef solution(s):\n    n = len(s)\n    mod = 10**9 + 7\n    dp = [[0] * 3 for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        if s[i] == '?':\n            dp[i][0] = dp[i - 1][0] * 3\n            dp[i][1] = dp[i - 1][0] + dp[i - 1][1] * 3\n            dp[i][2] = dp[i - 1][1] + dp[i - 1][2] * 3\n        elif s[i] == 'a':\n            dp[i][0] = dp[i - 1][0]\n            dp[i][1] = dp[i - 1][0]\n            dp[i][2] = dp[i - 1][1]\n        elif s[i] == 'b':\n            dp[i][0] = 0\n            dp[i][1] = dp[i - 1][0]\n            dp[i][2] = dp[i - 1][1]\n        elif s[i] == 'c':\n            dp[i][0] = 0\n            dp[i][1] = 0\n            dp[i][2] = dp[i - 1][1]\n    return dp[-1][2] % mod", "\n\n\n#Solution\n\ndef find_subsequences_abc(n, s):\n    MOD = 10**9 + 7\n    cnt_a, cnt_b, cnt_c = 0, 0, 0\n    for c in s:\n        if c == 'a':\n            cnt_a = (cnt_a + 1) % MOD\n        elif c == 'b':\n            cnt_b = (cnt_b + cnt_a) % MOD\n        elif c == 'c':\n            cnt_c = (cnt_c + cnt_b) % MOD\n    return cnt_c\n\n\nn = int(input())\ns = input()\nprint(find_subsequences_abc(n, s))"]