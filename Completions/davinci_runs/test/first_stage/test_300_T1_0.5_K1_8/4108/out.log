2022-04-19 22:03:20.253108 """
You are given strings S and T consisting of lowercase English letters.
You can perform the following operation on S any number of times:
Operation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.
Determine if S and T can be made equal by performing the operation zero or more times.

-----Constraints-----
 - 1 \leq |S| \leq 2 \times 10^5
 - |S| = |T|
 - S and T consists of lowercase English letters.

-----Input-----
Input is given from Standard Input in the following format:
S
T

-----Output-----
If S and T can be made equal, print Yes; otherwise, print No.

-----Sample Input-----
azzel
apple

-----Sample Output-----
Yes

azzel can be changed to apple, as follows:
 - Choose e as c_1 and l as c_2. azzel becomes azzle.
 - Choose z as c_1 and p as c_2. azzle becomes apple.
"""
2022-04-19 22:03:20.253121 --------------------------
2022-04-19 22:03:20.253234 using api key gabby
2022-04-19 22:03:41.643966 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ns = input()\nt = input()\n\nif sorted(list(s)) == sorted(list(t)):\n    print(\"Yes\")\nelse:\n    print(\"No\")"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nS = input()\nT = input()\n\nif sorted(S) == sorted(T):\n    print('Yes')\nelse:\n    print('No')"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    t = input()\n    if len(s) != len(t):\n        print(\"No\")\n        return\n    s_dict = {}\n    t_dict = {}\n    for i in range(len(s)):\n        if s[i] in s_dict:\n            s_dict[s[i]] += 1\n        else:\n            s_dict[s[i]] = 1\n        if t[i] in t_dict:\n            t_dict[t[i]] += 1\n        else:\n            t_dict[t[i]] = 1\n    for key in s_dict:\n        if key not in t_dict:\n            print(\"No\")\n            return\n        if s_dict[key] != t_dict[key]:\n            print(\"No\")\n            return\n    print(\"Yes\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    s = input()\n    t = input()\n    if len(s) != len(t):\n        print('No')\n        exit()\n    if s == t:\n        print('Yes')\n        exit()\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            break\n    else:\n        print('No')\n        exit()\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        if s[i] != t[0]:\n            print('No')\n            exit()\n        s = s.replace(s[i], t[0], 1)\n        if s == t:\n            print('Yes')\n            exit()\n        if s.count(t[0]) > 1:\n            print('No')\n            exit()\n        s = s.replace(t[0], t[1], 1)\n        if s == t:\n            print('Yes')\n            exit()\n    print('No')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ns = input()\nt = input()\n\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(t[i])\n    else:\n        d[s[i]] = [t[i]]\n\nfor v in d.values():\n    if len(set(v)) != 1:\n        print(\"No\")\n        exit()\nprint(\"Yes\")"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN = int(input())\nS = input()\nT = input()\n\nS_set = set(S)\nT_set = set(T)\nS_dict = {}\nT_dict = {}\n\nfor s in S_set:\n    S_dict[s] = S.count(s)\nfor t in T_set:\n    T_dict[t] = T.count(t)\n\nif sorted(S_dict.items()) == sorted(T_dict.items()):\n    print('Yes')\nelse:\n    print('No')"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nS = input()\nT = input()\n\nif len(S) != len(T):\n    print(\"No\")\n    exit()\n\ns = set(S)\nt = set(T)\n\nif len(s) != len(t):\n    print(\"No\")\n    exit()\n\nif len(s) == 1:\n    print(\"Yes\")\n    exit()\n\nfor i in range(len(S)):\n    if S[i] == T[i]:\n        continue\n    else:\n        if S[i] in T[i:]:\n            T = T[:i] + T[i:].replace(S[i], T[i])\n        elif T[i] in S[i:]:\n            S = S[:i] + S[i:].replace(T[i], S[i])\n        else:\n            print(\"No\")\n            exit()\n\nif S == T:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n#---Functions---\ndef check(S,T):\n    if S == T:\n        return True\n    else:\n        return False\n\ndef replace(S,T):\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            S = S.replace(S[i],T[i])\n    return S\n\n#---Main---\nS = input()\nT = input()\n\nif check(S,T) == True:\n    print(\"Yes\")\nelse:\n    S = replace(S,T)\n    if check(S,T) == True:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    }
  ],
  "created": 1650405800,
  "id": "cmpl-4yqEKHqQVCTYbtHZMQAbNtDXCWWmF",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:03:41.644304 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ns = input()\nt = input()\n\nif sorted(list(s)) == sorted(list(t)):\n    print(\"Yes\")\nelse:\n    print(\"No\")"
}
2022-04-19 22:03:41.644340 REASON stop
2022-04-19 22:03:41.659937 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nS = input()\nT = input()\n\nif sorted(S) == sorted(T):\n    print('Yes')\nelse:\n    print('No')"
}
2022-04-19 22:03:41.660069 REASON stop
2022-04-19 22:03:41.694134 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    t = input()\n    if len(s) != len(t):\n        print(\"No\")\n        return\n    s_dict = {}\n    t_dict = {}\n    for i in range(len(s)):\n        if s[i] in s_dict:\n            s_dict[s[i]] += 1\n        else:\n            s_dict[s[i]] = 1\n        if t[i] in t_dict:\n            t_dict[t[i]] += 1\n        else:\n            t_dict[t[i]] = 1\n    for key in s_dict:\n        if key not in t_dict:\n            print(\"No\")\n            return\n        if s_dict[key] != t_dict[key]:\n            print(\"No\")\n            return\n    print(\"Yes\")\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:03:41.694287 REASON stop
2022-04-19 22:03:41.724066 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    s = input()\n    t = input()\n    if len(s) != len(t):\n        print('No')\n        exit()\n    if s == t:\n        print('Yes')\n        exit()\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            break\n    else:\n        print('No')\n        exit()\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        if s[i] != t[0]:\n            print('No')\n            exit()\n        s = s.replace(s[i], t[0], 1)\n        if s == t:\n            print('Yes')\n            exit()\n        if s.count(t[0]) > 1:\n            print('No')\n            exit()\n        s = s.replace(t[0], t[1], 1)\n        if s == t:\n            print('Yes')\n            exit()\n    print('No')\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:03:41.724213 REASON stop
2022-04-19 22:03:41.754478 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ns = input()\nt = input()\n\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(t[i])\n    else:\n        d[s[i]] = [t[i]]\n\nfor v in d.values():\n    if len(set(v)) != 1:\n        print(\"No\")\n        exit()\nprint(\"Yes\")"
}
2022-04-19 22:03:41.754650 REASON stop
2022-04-19 22:03:41.768919 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN = int(input())\nS = input()\nT = input()\n\nS_set = set(S)\nT_set = set(T)\nS_dict = {}\nT_dict = {}\n\nfor s in S_set:\n    S_dict[s] = S.count(s)\nfor t in T_set:\n    T_dict[t] = T.count(t)\n\nif sorted(S_dict.items()) == sorted(T_dict.items()):\n    print('Yes')\nelse:\n    print('No')"
}
2022-04-19 22:03:41.769109 REASON stop
2022-04-19 22:03:41.792135 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nS = input()\nT = input()\n\nif len(S) != len(T):\n    print(\"No\")\n    exit()\n\ns = set(S)\nt = set(T)\n\nif len(s) != len(t):\n    print(\"No\")\n    exit()\n\nif len(s) == 1:\n    print(\"Yes\")\n    exit()\n\nfor i in range(len(S)):\n    if S[i] == T[i]:\n        continue\n    else:\n        if S[i] in T[i:]:\n            T = T[:i] + T[i:].replace(S[i], T[i])\n        elif T[i] in S[i:]:\n            S = S[:i] + S[i:].replace(T[i], S[i])\n        else:\n            print(\"No\")\n            exit()\n\nif S == T:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
}
2022-04-19 22:03:41.792282 REASON stop
2022-04-19 22:03:41.815439 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n#---Functions---\ndef check(S,T):\n    if S == T:\n        return True\n    else:\n        return False\n\ndef replace(S,T):\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            S = S.replace(S[i],T[i])\n    return S\n\n#---Main---\nS = input()\nT = input()\n\nif check(S,T) == True:\n    print(\"Yes\")\nelse:\n    S = replace(S,T)\n    if check(S,T) == True:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
}
2022-04-19 22:03:41.815695 REASON stop
