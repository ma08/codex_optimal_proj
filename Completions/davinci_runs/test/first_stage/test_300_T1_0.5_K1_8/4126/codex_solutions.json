["\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\nS = input()\n\nif is_palindrome(S) and is_palindrome(S[:(len(S)-1)//2]) and is_palindrome(S[(len(S)+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef is_strong_palindrome(s):\n    return is_palindrome(s) and is_palindrome(s[:len(s) // 2]) and is_palindrome(s[len(s) // 2 + 1:])\n\n\ns = input()\nprint('Yes' if is_strong_palindrome(s) else 'No')", "\n\ns = input() # 3 <= len(s) <= 99\n\nif s == s[::-1] and s[:len(s)//2] == s[:len(s)//2][::-1] and s[len(s)//2+1:] == s[len(s)//2+1:][::-1]:\n    print('Yes')\nelse:\n    print('No')", "\n\ns = input()\n\nif s == s[::-1]:\n  if s[:int(len(s)/2)] == s[:int(len(s)/2)][::-1]:\n    if s[int((len(s)+3)/2)-1:] == s[int((len(s)+3)/2)-1:][::-1]:\n      print(\"Yes\")\nelse:\n  print(\"No\")", "\n\ns = input()\nn = len(s)\nif s == s[::-1] and s[:n//2] == s[:n//2][::-1] and s[n//2+1:] == s[n//2+1:][::-1]:\n    print('Yes')\nelse:\n    print('No')", "\n\nimport sys\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef is_strong_palindrome(s):\n    return (is_palindrome(s) and\n            is_palindrome(s[0:((len(s)-1)//2)]) and\n            is_palindrome(s[((len(s)+3)//2)-1:]))\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    if is_strong_palindrome(s):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()", "\n\n# A string S of an odd length is said to be a strong palindrome if and only if all of the following conditions are satisfied:\n#  - S is a palindrome.\n#  - Let N be the length of S. The string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome.\n#  - The string consisting of the (N+3)/2-st through N-th characters of S is a palindrome.\n\n# Determine whether S is a strong palindrome.\n\n# -----Constraints-----\n#  - S consists of lowercase English letters.\n#  - The length of S is an odd number between 3 and 99 (inclusive).\n\n# -----Input-----\n# Input is given from Standard Input in the following format:\n# S\n\n# -----Output-----\n# If S is a strong palindrome, print Yes;\n# otherwise, print No.\n\n# -----Sample Input-----\n# akasaka\n\n# -----Sample Output-----\n# Yes\n\n#  - S is akasaka.\n#  - The string formed by the 1-st through the 3-rd characters is aka.\n#  - The string formed by the 5-th through the 7-th characters is aka.\n# All of these are palindromes, so S is a strong palindrome.\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#  IkaLog\n#  ======\n#  Copyright (C) 2015 Takeshi HASEGAWA\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\nimport sys\nimport cv2\n\n# Returns True if the specified image is blank.\ndef is_blank_image(img):\n    if img is None:\n        return True\n\n    if img.size == 0:\n        return True\n\n    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    ret, img_b = cv2.threshold(img_gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n\n    #print('img_b.shape %s %s' % (img_b.shape[0], img_b.shape[1]))\n    if (img_b.shape[0] * img_b.shape[1] == 0):\n        return True\n\n    if (img_b.shape[0] == 1) and (img_b.shape[1] == 1):\n        return True\n\n    return False\n\ndef is_palindrome(line):\n    line_len = len(line)\n    for i in range(0, line_len):\n        if line[i] != line[line_len - i - 1]:\n            return False\n    return True\n\ndef is_strong_palindrome(line):\n    line_len = len(line)\n    if (line_len % 2) == 0:\n        return False\n    if not is_palindrome(line):\n        return False\n    if not is_palindrome(line[0:int(line_len / 2)]):\n        return False\n    if not is_palindrome(line[int((line_len + 3) / 2) - 1:line_len]):\n        return False\n\n    return True\n\nif __name__ == '__main__':\n    line = sys.stdin.readline().strip()\n    if is_strong_palindrome(line):\n        print('Yes')\n    else:\n        print('No')", "\n\ns = input()\n\nif s[0:int((len(s)-1)/2)] == s[0:int((len(s)-1)/2)][::-1] and \\\n    s[int((len(s)+3)/2)-1:len(s)] == s[int((len(s)+3)/2)-1:len(s)][::-1] and \\\n    s == s[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"]