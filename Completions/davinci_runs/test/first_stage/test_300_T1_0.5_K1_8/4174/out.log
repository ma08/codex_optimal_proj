2022-04-19 22:43:50.859649 """
A ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 \leq i \leq N+1) at coordinate D_i = D_{i-1} + L_{i-1}.
How many times will the ball make a bounce where the coordinate is at most X?

-----Constraints-----
 - 1 \leq N \leq 100
 - 1 \leq L_i \leq 100
 - 1 \leq X \leq 10000
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N X
L_1 L_2 ... L_{N-1} L_N

-----Output-----
Print the number of times the ball will make a bounce where the coordinate is at most X.

-----Sample Input-----
3 6
3 4 5

-----Sample Output-----
2

The ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.
"""
2022-04-19 22:43:50.859664 --------------------------
2022-04-19 22:43:50.859773 using api key sourya
2022-04-19 22:44:01.556760 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, x = map(int, input().split())\nl = map(int, input().split())\n\nbounce = 0\nd = 0\n\nfor i in range(n):\n    if d <= x:\n        bounce += 1\n    d += l[i]\n\nif d <= x:\n    bounce += 1\n\nprint(bounce)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN, X = map(int, input().split())\nL = list(map(int, input().split()))\n\ncurrent = 0\ncount = 0\nfor i in range(N):\n    current += L[i]\n    if current <= X:\n        count += 1\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\n\nn, x = map(int, stdin.readline().split())\nli = list(map(int, stdin.readline().split()))\n\nans = 0\nfor i, l in enumerate(li):\n    if x - l >= 0:\n        ans += 1\n        x -= l\n    else:\n        break\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn, x = map(int, input().split())\nl = list(map(int, input().split()))\n\ncnt = 1\nfor i in range(n):\n    if cnt > x:\n        break\n    cnt += l[i]\n\nprint(i+1)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, x = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = 0\n    count = 0\n    for i in range(n):\n        d += l[i]\n        if d <= x:\n            count += 1\n        else:\n            break\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, x = map(int, input().split())\nl = list(map(int, input().split()))\n\nd = 0\ncount = 0\nfor i in l:\n    d += i\n    if d <= x:\n        count += 1\n\nprint(count + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn,x = map(int,input().split())\nl = list(map(int,input().split()))\n\ncount = 0\nfor i in range(n):\n    if x - l[i] >= 0:\n        count += 1\n        x -= l[i]\n    else:\n        break\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# get inputs\nn, x = map(int, input().split())\nl = list(map(int, input().split()))\n\n# create list of coordinates\ncoordinates = [0]\nfor i in range(n):\n    coordinates.append(coordinates[i] + l[i])\n\n# count the number of bounces where the coordinate is at most x\ncount = 0\nfor coordinate in coordinates:\n    if coordinate <= x:\n        count += 1\n\nprint(count)"
    }
  ],
  "created": 1650408230,
  "id": "cmpl-4yqrWo61yBgQTTcTzezUWNdHj1jSH",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:44:01.557181 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, x = map(int, input().split())\nl = map(int, input().split())\n\nbounce = 0\nd = 0\n\nfor i in range(n):\n    if d <= x:\n        bounce += 1\n    d += l[i]\n\nif d <= x:\n    bounce += 1\n\nprint(bounce)"
}
2022-04-19 22:44:01.557249 REASON stop
2022-04-19 22:44:01.558216 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN, X = map(int, input().split())\nL = list(map(int, input().split()))\n\ncurrent = 0\ncount = 0\nfor i in range(N):\n    current += L[i]\n    if current <= X:\n        count += 1\nprint(count)"
}
2022-04-19 22:44:01.558326 REASON stop
2022-04-19 22:44:01.559000 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\n\nn, x = map(int, stdin.readline().split())\nli = list(map(int, stdin.readline().split()))\n\nans = 0\nfor i, l in enumerate(li):\n    if x - l >= 0:\n        ans += 1\n        x -= l\n    else:\n        break\nprint(ans)"
}
2022-04-19 22:44:01.559094 REASON stop
2022-04-19 22:44:01.570595 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn, x = map(int, input().split())\nl = list(map(int, input().split()))\n\ncnt = 1\nfor i in range(n):\n    if cnt > x:\n        break\n    cnt += l[i]\n\nprint(i+1)"
}
2022-04-19 22:44:01.570744 REASON stop
2022-04-19 22:44:01.571392 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, x = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = 0\n    count = 0\n    for i in range(n):\n        d += l[i]\n        if d <= x:\n            count += 1\n        else:\n            break\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:44:01.571489 REASON stop
2022-04-19 22:44:01.586147 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, x = map(int, input().split())\nl = list(map(int, input().split()))\n\nd = 0\ncount = 0\nfor i in l:\n    d += i\n    if d <= x:\n        count += 1\n\nprint(count + 1)"
}
2022-04-19 22:44:01.586291 REASON stop
2022-04-19 22:44:01.587257 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn,x = map(int,input().split())\nl = list(map(int,input().split()))\n\ncount = 0\nfor i in range(n):\n    if x - l[i] >= 0:\n        count += 1\n        x -= l[i]\n    else:\n        break\n\nprint(count)"
}
2022-04-19 22:44:01.587370 REASON stop
2022-04-19 22:44:01.589300 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# get inputs\nn, x = map(int, input().split())\nl = list(map(int, input().split()))\n\n# create list of coordinates\ncoordinates = [0]\nfor i in range(n):\n    coordinates.append(coordinates[i] + l[i])\n\n# count the number of bounces where the coordinate is at most x\ncount = 0\nfor coordinate in coordinates:\n    if coordinate <= x:\n        count += 1\n\nprint(count)"
}
2022-04-19 22:44:01.589544 REASON stop
