2022-04-19 21:03:27.862119 """
Vova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.

The current state of the wall can be respresented by a sequence $a$ of $n$ integers, with $a_i$ being the height of the $i$-th part of the wall.

Vova can only use $2 \times 1$ bricks to put in the wall (he has infinite supply of them, however).

Vova can put bricks only horizontally on the neighbouring parts of the wall of equal height. It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).

Note that Vova can't put bricks vertically.

Vova is a perfectionist, so he considers the wall completed when:  all parts of the wall has the same height;  the wall has no empty spaces inside it. 

Can Vova complete the wall using any amount of bricks (possibly zero)?


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of parts in the wall.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$) — the initial heights of the parts of the wall.


-----Output-----

Print "YES" if Vova can complete the wall using any amount of bricks (possibly zero).

Print "NO" otherwise.


-----Examples-----
Input
5
2 1 1 2 5

Output
YES

Input
3
4 5 3

Output
NO

Input
2
10 10

Output
YES



-----Note-----

In the first example Vova can put a brick on parts 2 and 3 to make the wall $[2, 2, 2, 2, 5]$ and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it $[5, 5, 5, 5, 5]$.

In the second example Vova can put no bricks in the wall.

In the third example the wall is already complete.
"""
2022-04-19 21:03:27.862138 --------------------------
2022-04-19 21:03:27.862238 using api key sourya
2022-04-19 21:04:06.658536 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nmin_a = min(a)\nmax_a = max(a)\n\nif min_a == max_a:\n    print('YES')\nelse:\n    print('NO')"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif len(set(a)) == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif len(set(a)) == 1:\n    print('YES')\nelse:\n    print('NO')"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef is_completed(wall):\n    \"\"\"\n    >>> is_completed([1, 1, 1, 1, 1])\n    True\n    >>> is_completed([1, 1, 2, 1, 1])\n    False\n    >>> is_completed([1, 2, 1, 2, 1])\n    False\n    \"\"\"\n    for i in range(len(wall) - 1):\n        if wall[i] != wall[i + 1]:\n            return False\n    return True\n\ndef complete_the_wall(wall):\n    \"\"\"\n    >>> complete_the_wall([2, 1, 1, 2, 5])\n    [5, 5, 5, 5, 5]\n    >>> complete_the_wall([4, 5, 3])\n    [4, 5, 3]\n    >>> complete_the_wall([10, 10])\n    [10, 10]\n    \"\"\"\n    while not is_completed(wall):\n        for i in range(len(wall) - 1):\n            if wall[i] == wall[i + 1]:\n                wall[i] += 1\n                wall[i + 1] += 1\n    return wall\n\n\nif __name__ == '__main__':\n    n = int(input())\n    wall = list(map(int, input().split()))\n    print(\"YES\" if is_completed(complete_the_wall(wall)) else \"NO\")"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef vova_wall(n, a):\n    \"\"\"\n    :param n: number of parts in the wall\n    :param a: initial heights of the parts of the wall\n    :return: YES if Vova can complete the wall using any amount of bricks (possibly zero).\n    \"\"\"\n    # check if the wall is already complete\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 2:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 3:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 4:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 5:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 6:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 7:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 8:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 9:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 10:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    print(vova_wall(n, a))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    Vova's Wall\n    \"\"\"\n    n_parts = int(input())\n    heights = list(map(int, input().split()))\n    # print(n_parts, heights)\n    # print(max(heights) - min(heights))\n    if max(heights) - min(heights) > 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# check if all heights are the same\nif len(set(a)) == 1:\n    print(\"YES\")\nelse:\n    # check if there are any gaps\n    for i in range(n-1):\n        if a[i] != a[i+1]:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# check if no empty spaces\nif a[0] != a[-1]:\n    print(\"NO\")\n    exit()\n\n# check if all parts are the same height\nfor i in range(1, len(a)):\n    if a[i] != a[i-1]:\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")"
    }
  ],
  "created": 1650402208,
  "id": "cmpl-4ypIOQxSLfuFfG3wbsXJ1OJzKJNcI",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:04:06.658878 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nmin_a = min(a)\nmax_a = max(a)\n\nif min_a == max_a:\n    print('YES')\nelse:\n    print('NO')"
}
2022-04-19 21:04:06.658919 REASON stop
2022-04-19 21:04:06.659530 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif len(set(a)) == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"
}
2022-04-19 21:04:06.659621 REASON stop
2022-04-19 21:04:06.660020 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif len(set(a)) == 1:\n    print('YES')\nelse:\n    print('NO')"
}
2022-04-19 21:04:06.660068 REASON stop
2022-04-19 21:04:06.661533 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef is_completed(wall):\n    \"\"\"\n    >>> is_completed([1, 1, 1, 1, 1])\n    True\n    >>> is_completed([1, 1, 2, 1, 1])\n    False\n    >>> is_completed([1, 2, 1, 2, 1])\n    False\n    \"\"\"\n    for i in range(len(wall) - 1):\n        if wall[i] != wall[i + 1]:\n            return False\n    return True\n\ndef complete_the_wall(wall):\n    \"\"\"\n    >>> complete_the_wall([2, 1, 1, 2, 5])\n    [5, 5, 5, 5, 5]\n    >>> complete_the_wall([4, 5, 3])\n    [4, 5, 3]\n    >>> complete_the_wall([10, 10])\n    [10, 10]\n    \"\"\"\n    while not is_completed(wall):\n        for i in range(len(wall) - 1):\n            if wall[i] == wall[i + 1]:\n                wall[i] += 1\n                wall[i + 1] += 1\n    return wall\n\n\nif __name__ == '__main__':\n    n = int(input())\n    wall = list(map(int, input().split()))\n    print(\"YES\" if is_completed(complete_the_wall(wall)) else \"NO\")"
}
2022-04-19 21:04:06.661597 REASON stop
2022-04-19 21:04:06.662760 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef vova_wall(n, a):\n    \"\"\"\n    :param n: number of parts in the wall\n    :param a: initial heights of the parts of the wall\n    :return: YES if Vova can complete the wall using any amount of bricks (possibly zero).\n    \"\"\"\n    # check if the wall is already complete\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 2:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 3:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 4:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 5:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 6:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 7:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 8:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 9:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 10:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    print(vova_wall(n, a))"
}
2022-04-19 21:04:06.662848 REASON stop
2022-04-19 21:04:06.663782 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    Vova's Wall\n    \"\"\"\n    n_parts = int(input())\n    heights = list(map(int, input().split()))\n    # print(n_parts, heights)\n    # print(max(heights) - min(heights))\n    if max(heights) - min(heights) > 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 21:04:06.663855 REASON stop
2022-04-19 21:04:06.664728 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# check if all heights are the same\nif len(set(a)) == 1:\n    print(\"YES\")\nelse:\n    # check if there are any gaps\n    for i in range(n-1):\n        if a[i] != a[i+1]:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")"
}
2022-04-19 21:04:06.664791 REASON stop
2022-04-19 21:04:06.665636 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# check if no empty spaces\nif a[0] != a[-1]:\n    print(\"NO\")\n    exit()\n\n# check if all parts are the same height\nfor i in range(1, len(a)):\n    if a[i] != a[i-1]:\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")"
}
2022-04-19 21:04:06.665794 REASON stop
