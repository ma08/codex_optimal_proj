["\n\ndef is_completed(wall):\n    \"\"\"\n    >>> is_completed([1, 1, 1, 1, 1])\n    True\n    >>> is_completed([1, 1, 2, 1, 1])\n    False\n    >>> is_completed([1, 2, 1, 2, 1])\n    False\n    \"\"\"\n    for i in range(len(wall) - 1):\n        if wall[i] != wall[i + 1]:\n            return False\n    return True\n\ndef complete_the_wall(wall):\n    \"\"\"\n    >>> complete_the_wall([2, 1, 1, 2, 5])\n    [5, 5, 5, 5, 5]\n    >>> complete_the_wall([4, 5, 3])\n    [4, 5, 3]\n    >>> complete_the_wall([10, 10])\n    [10, 10]\n    \"\"\"\n    while not is_completed(wall):\n        for i in range(len(wall) - 1):\n            if wall[i] == wall[i + 1]:\n                wall[i] += 1\n                wall[i + 1] += 1\n    return wall\n\n\nif __name__ == '__main__':\n    n = int(input())\n    wall = list(map(int, input().split()))\n    print(\"YES\" if is_completed(complete_the_wall(wall)) else \"NO\")", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# check if no empty spaces\nif a[0] != a[-1]:\n    print(\"NO\")\n    exit()\n\n# check if all parts are the same height\nfor i in range(1, len(a)):\n    if a[i] != a[i-1]:\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nmin_a = min(a)\nmax_a = max(a)\n\nif min_a == max_a:\n    print('YES')\nelse:\n    print('NO')", "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif len(set(a)) == 1:\n    print('YES')\nelse:\n    print('NO')", "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif len(set(a)) == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "\n\ndef vova_wall(n, a):\n    \"\"\"\n    :param n: number of parts in the wall\n    :param a: initial heights of the parts of the wall\n    :return: YES if Vova can complete the wall using any amount of bricks (possibly zero).\n    \"\"\"\n    # check if the wall is already complete\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 2:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 3:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 4:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 5:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 6:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 7:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 8:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 9:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 10:\n        # check if the wall has no empty spaces inside it\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    print(vova_wall(n, a))", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# check if all heights are the same\nif len(set(a)) == 1:\n    print(\"YES\")\nelse:\n    # check if there are any gaps\n    for i in range(n-1):\n        if a[i] != a[i+1]:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")", "\n\ndef main():\n    \"\"\"\n    Vova's Wall\n    \"\"\"\n    n_parts = int(input())\n    heights = list(map(int, input().split()))\n    # print(n_parts, heights)\n    # print(max(heights) - min(heights))\n    if max(heights) - min(heights) > 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"]