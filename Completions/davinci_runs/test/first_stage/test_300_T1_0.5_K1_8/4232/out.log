2022-04-19 23:13:37.201132 """
You are given a sequence of integers of length $n$ and integer number $k$. You should print any integer number $x$ in the range of $[1; 10^9]$ (i.e. $1 \le x \le 10^9$) such that exactly $k$ elements of given sequence are less than or equal to $x$.

Note that the sequence can contain equal elements.

If there is no such $x$, print "-1" (without quotes).


-----Input-----

The first line of the input contains integer numbers $n$ and $k$ ($1 \le n \le 2 \cdot 10^5$, $0 \le k \le n$). The second line of the input contains $n$ integer numbers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$) â€” the sequence itself.


-----Output-----

Print any integer number $x$ from range $[1; 10^9]$ such that exactly $k$ elements of given sequence is less or equal to $x$.

If there is no such $x$, print "-1" (without quotes).


-----Examples-----
Input
7 4
3 7 5 1 10 3 20

Output
6
Input
7 2
3 7 5 1 10 3 20

Output
-1



-----Note-----

In the first example $5$ is also a valid answer because the elements with indices $[1, 3, 4, 6]$ is less than or equal to $5$ and obviously less than or equal to $6$.

In the second example you cannot choose any number that only $2$ elements of the given sequence will be less than or equal to this number because $3$ elements of the given sequence will be also less than or equal to this number.
"""
2022-04-19 23:13:37.201151 --------------------------
2022-04-19 23:13:37.201259 using api key sourya
2022-04-19 23:14:08.686045 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport bisect\n\ndef solve(n, k, a):\n    a.sort()\n    if k == 0:\n        return 1\n    elif k == n:\n        return a[-1]\n    else:\n        l = 0\n        r = n - 1\n        while l < r:\n            m = (l + r) // 2\n            if k <= m:\n                r = m\n            else:\n                l = m + 1\n        return a[l]\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\nfrom bisect import bisect_left\nfrom typing import List\n\nfrom algorithms.binary_search import binary_search\n\n\ndef find_k_th_element(lst: List[int], k: int) -> int:\n    \"\"\"\n    >>> find_k_th_element([3, 7, 5, 1, 10, 3, 20], 4)\n    6\n    >>> find_k_th_element([3, 7, 5, 1, 10, 3, 20], 2)\n    -1\n    \"\"\"\n    lst = sorted(lst)\n    if k == 0:\n        return -1\n    elif k == len(lst):\n        return lst[-1]\n    else:\n        return lst[k - 1]\n\n\ndef find_k_th_element_with_binary_search(lst: List[int], k: int) -> int:\n    \"\"\"\n    >>> find_k_th_element_with_binary_search([3, 7, 5, 1, 10, 3, 20], 4)\n    6\n    >>> find_k_th_element_with_binary_search([3, 7, 5, 1, 10, 3, 20], 2)\n    -1\n    \"\"\"\n    lst = sorted(lst)\n    if k == 0:\n        return -1\n    elif k == len(lst):\n        return lst[-1]\n    else:\n        return binary_search(lst, k)\n\n\ndef find_k_th_element_with_bisect(lst: List[int], k: int) -> int:\n    \"\"\"\n    >>> find_k_th_element_with_bisect([3, 7, 5, 1, 10, 3, 20], 4)\n    6\n    >>> find_k_th_element_with_bisect([3, 7, 5, 1, 10, 3, 20], 2)\n    -1\n    \"\"\"\n    lst = sorted(lst)\n    if k == 0:\n        return -1\n    elif k == len(lst):\n        return lst[-1]\n    else:\n        return bisect_left(lst, lst[k - 1]) + 1\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    lst = list(map(int, input().split()))\n    print(find_k_th_element_with_bisect(lst, k))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\ndef func(x):\n    return sum(1 for e in a if e <= x)\n\ndef binary_search(l, r):\n    while l <= r:\n        m = (l + r) // 2\n        if func(m) == k:\n            return m\n        elif func(m) > k:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\n\nprint(binary_search(1, 10**9))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    #print(a)\n    max_value = a[k-1]\n    min_value = a[k]\n    if k == 0:\n        print(1)\n    elif k == n:\n        print(a[k-1])\n    else:\n        if max_value == min_value:\n            print(-1)\n        else:\n            print(max_value)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(a[-1])\n        return\n    if a[k-1] == a[k]:\n        print(-1)\n        return\n    print(a[k-1])\n    return\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nif n - k < k:\n    k = n - k\n\nif k == 0:\n    print(a[-1])\nelse:\n    print(a[k - 1])"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\narr = sorted(arr)\n\nif k == 0:\n    print(1)\nelif k == n:\n    print(arr[-1])\nelse:\n    if arr[k-1] == arr[k]:\n        print(-1)\n    else:\n        print(arr[k-1])"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\n#This solution is based on binary search\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\n#Sorts the array\narr.sort()\n\n#Sets the left and right bounds\nleft = 1\nright = 10**9\n\n#Sets the value to -1\nvalue = -1\n\n#While the left bound is less than the right bound\nwhile left <= right:\n    #Sets the middle value\n    mid = (left + right) // 2\n\n    #Sets the count to 0\n    count = 0\n\n    #For each element in the array\n    for i in arr:\n        #If the element is less than or equal to the middle value\n        if i <= mid:\n            #Increment the count\n            count += 1\n\n    #If the count is equal to the k value\n    if count == k:\n        #Set the value to the middle value\n        value = mid\n        #Break the loop\n        break\n    #If the count is less than the k value\n    elif count < k:\n        #Set the left bound to the middle value + 1\n        left = mid + 1\n    #If the count is greater than the k value\n    else:\n        #Set the right bound to the middle value - 1\n        right = mid - 1\n\n#Print the value\nprint(value)"
    }
  ],
  "created": 1650410017,
  "id": "cmpl-4yrKLEmMZEfyKkpJXmhvTSBPCX4Gv",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 23:14:08.686378 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport bisect\n\ndef solve(n, k, a):\n    a.sort()\n    if k == 0:\n        return 1\n    elif k == n:\n        return a[-1]\n    else:\n        l = 0\n        r = n - 1\n        while l < r:\n            m = (l + r) // 2\n            if k <= m:\n                r = m\n            else:\n                l = m + 1\n        return a[l]\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))"
}
2022-04-19 23:14:08.686421 REASON stop
2022-04-19 23:14:08.687042 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\nfrom bisect import bisect_left\nfrom typing import List\n\nfrom algorithms.binary_search import binary_search\n\n\ndef find_k_th_element(lst: List[int], k: int) -> int:\n    \"\"\"\n    >>> find_k_th_element([3, 7, 5, 1, 10, 3, 20], 4)\n    6\n    >>> find_k_th_element([3, 7, 5, 1, 10, 3, 20], 2)\n    -1\n    \"\"\"\n    lst = sorted(lst)\n    if k == 0:\n        return -1\n    elif k == len(lst):\n        return lst[-1]\n    else:\n        return lst[k - 1]\n\n\ndef find_k_th_element_with_binary_search(lst: List[int], k: int) -> int:\n    \"\"\"\n    >>> find_k_th_element_with_binary_search([3, 7, 5, 1, 10, 3, 20], 4)\n    6\n    >>> find_k_th_element_with_binary_search([3, 7, 5, 1, 10, 3, 20], 2)\n    -1\n    \"\"\"\n    lst = sorted(lst)\n    if k == 0:\n        return -1\n    elif k == len(lst):\n        return lst[-1]\n    else:\n        return binary_search(lst, k)\n\n\ndef find_k_th_element_with_bisect(lst: List[int], k: int) -> int:\n    \"\"\"\n    >>> find_k_th_element_with_bisect([3, 7, 5, 1, 10, 3, 20], 4)\n    6\n    >>> find_k_th_element_with_bisect([3, 7, 5, 1, 10, 3, 20], 2)\n    -1\n    \"\"\"\n    lst = sorted(lst)\n    if k == 0:\n        return -1\n    elif k == len(lst):\n        return lst[-1]\n    else:\n        return bisect_left(lst, lst[k - 1]) + 1\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    lst = list(map(int, input().split()))\n    print(find_k_th_element_with_bisect(lst, k))"
}
2022-04-19 23:14:08.687144 REASON stop
2022-04-19 23:14:08.687535 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\ndef func(x):\n    return sum(1 for e in a if e <= x)\n\ndef binary_search(l, r):\n    while l <= r:\n        m = (l + r) // 2\n        if func(m) == k:\n            return m\n        elif func(m) > k:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\n\nprint(binary_search(1, 10**9))"
}
2022-04-19 23:14:08.687597 REASON stop
2022-04-19 23:14:08.710246 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    #print(a)\n    max_value = a[k-1]\n    min_value = a[k]\n    if k == 0:\n        print(1)\n    elif k == n:\n        print(a[k-1])\n    else:\n        if max_value == min_value:\n            print(-1)\n        else:\n            print(max_value)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 23:14:08.710387 REASON stop
2022-04-19 23:14:08.726100 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(a[-1])\n        return\n    if a[k-1] == a[k]:\n        print(-1)\n        return\n    print(a[k-1])\n    return\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 23:14:08.726237 REASON stop
2022-04-19 23:14:08.727064 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nif n - k < k:\n    k = n - k\n\nif k == 0:\n    print(a[-1])\nelse:\n    print(a[k - 1])"
}
2022-04-19 23:14:08.727154 REASON stop
2022-04-19 23:14:08.730353 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\narr = sorted(arr)\n\nif k == 0:\n    print(1)\nelif k == n:\n    print(arr[-1])\nelse:\n    if arr[k-1] == arr[k]:\n        print(-1)\n    else:\n        print(arr[k-1])"
}
2022-04-19 23:14:08.730456 REASON stop
2022-04-19 23:14:08.731234 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\n#This solution is based on binary search\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\n#Sorts the array\narr.sort()\n\n#Sets the left and right bounds\nleft = 1\nright = 10**9\n\n#Sets the value to -1\nvalue = -1\n\n#While the left bound is less than the right bound\nwhile left <= right:\n    #Sets the middle value\n    mid = (left + right) // 2\n\n    #Sets the count to 0\n    count = 0\n\n    #For each element in the array\n    for i in arr:\n        #If the element is less than or equal to the middle value\n        if i <= mid:\n            #Increment the count\n            count += 1\n\n    #If the count is equal to the k value\n    if count == k:\n        #Set the value to the middle value\n        value = mid\n        #Break the loop\n        break\n    #If the count is less than the k value\n    elif count < k:\n        #Set the left bound to the middle value + 1\n        left = mid + 1\n    #If the count is greater than the k value\n    else:\n        #Set the right bound to the middle value - 1\n        right = mid - 1\n\n#Print the value\nprint(value)"
}
2022-04-19 23:14:08.731456 REASON stop
