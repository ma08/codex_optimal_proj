2022-04-19 21:01:46.443190 """
Polycarp is going to participate in the contest. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \% 2 = m_2 \% 2$, where $x \% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.

Polycarp wants to know the time of the midpoint of the contest. For example, if the contest lasts from $10:00$ to $11:00$ then the answer is $10:30$, if the contest lasts from $11:10$ to $11:12$ then the answer is $11:11$.


-----Input-----

The first line of the input contains two integers $h_1$ and $m_1$ in the format hh:mm.

The second line of the input contains two integers $h_2$ and $m_2$ in the same format (hh:mm).

It is guaranteed that $0 \le h_1, h_2 \le 23$ and $0 \le m_1, m_2 \le 59$.

It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \% 2 = m_2 \% 2$, where $x \% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.


-----Output-----

Print two integers $h_3$ and $m_3$ ($0 \le h_3 \le 23, 0 \le m_3 \le 59$) corresponding to the midpoint of the contest in the format hh:mm. Print each number as exactly two digits (prepend a number with leading zero if needed), separate them with ':'.


-----Examples-----
Input
10:00
11:00

Output
10:30

Input
11:10
11:12

Output
11:11

Input
01:02
03:02

Output
02:02
"""
2022-04-19 21:01:46.443199 --------------------------
2022-04-19 21:01:46.443303 using api key gabby
2022-04-19 21:02:14.992768 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\n#!/usr/bin/python3\n\na, b = map(int, input().split(':'))\nc, d = map(int, input().split(':'))\n\nif a == c:\n    if (b + d) % 2 == 0:\n        print('{}:{}'.format(a, (b + d) // 2))\n    else:\n        print('{}:{}'.format(a, (b + d) // 2 + 1))\nelse:\n    if (b + d) % 2 == 0:\n        print('{}:{}'.format((a + c) // 2, (b + d) // 2))\n    else:\n        print('{}:{}'.format((a + c) // 2, (b + d) // 2 + 1))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    h1, m1 = map(int, input().split(':'))\n    h2, m2 = map(int, input().split(':'))\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    t = (t1 + t2) // 2\n    h = t // 60\n    m = t % 60\n    print('{:02d}:{:02d}'.format(h, m))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef find_midpoint(start_hour, start_minute, end_hour, end_minute):\n    start_time = start_hour * 60 + start_minute\n    end_time = end_hour * 60 + end_minute\n    midpoint = (start_time + end_time) / 2\n    if midpoint % 2 == 1:\n        midpoint += 1\n    mid_hour = midpoint / 60\n    mid_minute = midpoint % 60\n    return mid_hour, mid_minute\n\n\ndef main():\n    start_hour, start_minute = map(int, raw_input().split(':'))\n    end_hour, end_minute = map(int, raw_input().split(':'))\n    mid_hour, mid_minute = find_midpoint(start_hour, start_minute, end_hour, end_minute)\n    print '%02d:%02d' % (mid_hour, mid_minute)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# TODO: write your solution here\nh1, m1 = input().split(':')\nh2, m2 = input().split(':')\n\nm = int(m1) + int(m2)\nh = int(h1) + int(h2)\n\nif m >= 60:\n    m = m - 60\n    h = h + 1\n\nif h >= 24:\n    h = h - 24\n\nif m % 2 == 0:\n    m = m / 2\nelse:\n    m = (m + 1) / 2\n\nprint(\"{0:02d}:{1:02d}\".format(h, m))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    time1 = input()\n    time2 = input()\n    time1_list = time1.split(':')\n    time2_list = time2.split(':')\n    time1_list = [int(i) for i in time1_list]\n    time2_list = [int(i) for i in time2_list]\n    time1_minutes = time1_list[0] * 60 + time1_list[1]\n    time2_minutes = time2_list[0] * 60 + time2_list[1]\n    midpoint = (time1_minutes + time2_minutes) / 2\n    midpoint_hours = midpoint // 60\n    midpoint_minutes = midpoint % 60\n    if midpoint_hours < 10:\n        midpoint_hours = '0' + str(midpoint_hours)\n    else:\n        midpoint_hours = str(midpoint_hours)\n    if midpoint_minutes < 10:\n        midpoint_minutes = '0' + str(midpoint_minutes)\n    else:\n        midpoint_minutes = str(midpoint_minutes)\n    print(midpoint_hours + ':' + midpoint_minutes)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"main\"\"\"\n    start_time = input()\n    end_time = input()\n    start_hour, start_min = start_time.split(':')\n    end_hour, end_min = end_time.split(':')\n    start_hour = int(start_hour)\n    start_min = int(start_min)\n    end_hour = int(end_hour)\n    end_min = int(end_min)\n    if end_hour == start_hour:\n        if start_min == 0 and end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour, start_min))\n        elif start_min == 0 or end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour, (start_min+end_min)//2))\n        else:\n            print(\"{:02d}:{:02d}\".format(start_hour, (start_min+end_min)//2))\n    elif end_hour == start_hour+1:\n        if start_min == 0 and end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour, start_min))\n        elif start_min == 0 or end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour, (start_min+end_min)//2))\n        else:\n            print(\"{:02d}:{:02d}\".format(start_hour, (start_min+end_min)//2))\n    elif end_hour == start_hour+2:\n        if start_min == 0 and end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour+1, start_min))\n        elif start_min == 0 or end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour+1, (start_min+end_min)//2))\n        else:\n            print(\"{:02d}:{:02d}\".format(start_hour+1, (start_min+end_min)//2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nh1, m1 = map(int, input().split(\":\"))\nh2, m2 = map(int, input().split(\":\"))\n\nif m1 % 2 == 0:\n    m1 += 1\nelse:\n    m1 -= 1\n\nif m1 < 0:\n    h1 -= 1\n    m1 = 59\nelif m1 > 59:\n    h1 += 1\n    m1 = 0\n\nif m1 % 2 == 0:\n    m1 += 1\nelse:\n    m1 -= 1\n\nif m1 < 0:\n    h1 -= 1\n    m1 = 59\nelif m1 > 59:\n    h1 += 1\n    m1 = 0\n\nif m2 % 2 == 0:\n    m2 += 1\nelse:\n    m2 -= 1\n\nif m2 < 0:\n    h2 -= 1\n    m2 = 59\nelif m2 > 59:\n    h2 += 1\n    m2 = 0\n\nif m2 % 2 == 0:\n    m2 += 1\nelse:\n    m2 -= 1\n\nif m2 < 0:\n    h2 -= 1\n    m2 = 59\nelif m2 > 59:\n    h2 += 1\n    m2 = 0\n\nprint(h1, m1)\nprint(h2, m2)\n\nif h1 == h2 and m1 == m2:\n    print(\"{:02d}:{:02d}\".format(h1, m1))\nelse:\n    print(\"{:02d}:{:02d}\".format(h1, m1))\n    print(\"{:02d}:{:02d}\".format(h2, m2))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nh1, m1 = input().split(\":\")\nh2, m2 = input().split(\":\")\n\nh1 = int(h1)\nh2 = int(h2)\nm1 = int(m1)\nm2 = int(m2)\n\nif m1 == m2:\n    h3 = h1 + (h2 - h1) // 2\n    m3 = m1\nelse:\n    h3 = h1 + (h2 - h1) // 2\n    m3 = m1 + (m2 - m1) // 2\n    if m3 >= 60:\n        h3 += 1\n        m3 -= 60\n\nprint(\"%02d:%02d\" % (h3, m3))"
    }
  ],
  "created": 1650402106,
  "id": "cmpl-4ypGk1ebRPcT3LuewexCVc7yOktSP",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:02:14.993077 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\n#!/usr/bin/python3\n\na, b = map(int, input().split(':'))\nc, d = map(int, input().split(':'))\n\nif a == c:\n    if (b + d) % 2 == 0:\n        print('{}:{}'.format(a, (b + d) // 2))\n    else:\n        print('{}:{}'.format(a, (b + d) // 2 + 1))\nelse:\n    if (b + d) % 2 == 0:\n        print('{}:{}'.format((a + c) // 2, (b + d) // 2))\n    else:\n        print('{}:{}'.format((a + c) // 2, (b + d) // 2 + 1))"
}
2022-04-19 21:02:14.993180 REASON stop
2022-04-19 21:02:14.993684 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    h1, m1 = map(int, input().split(':'))\n    h2, m2 = map(int, input().split(':'))\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    t = (t1 + t2) // 2\n    h = t // 60\n    m = t % 60\n    print('{:02d}:{:02d}'.format(h, m))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:02:14.993748 REASON stop
2022-04-19 21:02:14.994185 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef find_midpoint(start_hour, start_minute, end_hour, end_minute):\n    start_time = start_hour * 60 + start_minute\n    end_time = end_hour * 60 + end_minute\n    midpoint = (start_time + end_time) / 2\n    if midpoint % 2 == 1:\n        midpoint += 1\n    mid_hour = midpoint / 60\n    mid_minute = midpoint % 60\n    return mid_hour, mid_minute\n\n\ndef main():\n    start_hour, start_minute = map(int, raw_input().split(':'))\n    end_hour, end_minute = map(int, raw_input().split(':'))\n    mid_hour, mid_minute = find_midpoint(start_hour, start_minute, end_hour, end_minute)\n    print '%02d:%02d' % (mid_hour, mid_minute)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:02:14.994248 REASON stop
2022-04-19 21:02:15.018718 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# TODO: write your solution here\nh1, m1 = input().split(':')\nh2, m2 = input().split(':')\n\nm = int(m1) + int(m2)\nh = int(h1) + int(h2)\n\nif m >= 60:\n    m = m - 60\n    h = h + 1\n\nif h >= 24:\n    h = h - 24\n\nif m % 2 == 0:\n    m = m / 2\nelse:\n    m = (m + 1) / 2\n\nprint(\"{0:02d}:{1:02d}\".format(h, m))"
}
2022-04-19 21:02:15.018852 REASON stop
2022-04-19 21:02:15.019572 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    time1 = input()\n    time2 = input()\n    time1_list = time1.split(':')\n    time2_list = time2.split(':')\n    time1_list = [int(i) for i in time1_list]\n    time2_list = [int(i) for i in time2_list]\n    time1_minutes = time1_list[0] * 60 + time1_list[1]\n    time2_minutes = time2_list[0] * 60 + time2_list[1]\n    midpoint = (time1_minutes + time2_minutes) / 2\n    midpoint_hours = midpoint // 60\n    midpoint_minutes = midpoint % 60\n    if midpoint_hours < 10:\n        midpoint_hours = '0' + str(midpoint_hours)\n    else:\n        midpoint_hours = str(midpoint_hours)\n    if midpoint_minutes < 10:\n        midpoint_minutes = '0' + str(midpoint_minutes)\n    else:\n        midpoint_minutes = str(midpoint_minutes)\n    print(midpoint_hours + ':' + midpoint_minutes)\n\nmain()"
}
2022-04-19 21:02:15.019656 REASON stop
2022-04-19 21:02:15.030992 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"main\"\"\"\n    start_time = input()\n    end_time = input()\n    start_hour, start_min = start_time.split(':')\n    end_hour, end_min = end_time.split(':')\n    start_hour = int(start_hour)\n    start_min = int(start_min)\n    end_hour = int(end_hour)\n    end_min = int(end_min)\n    if end_hour == start_hour:\n        if start_min == 0 and end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour, start_min))\n        elif start_min == 0 or end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour, (start_min+end_min)//2))\n        else:\n            print(\"{:02d}:{:02d}\".format(start_hour, (start_min+end_min)//2))\n    elif end_hour == start_hour+1:\n        if start_min == 0 and end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour, start_min))\n        elif start_min == 0 or end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour, (start_min+end_min)//2))\n        else:\n            print(\"{:02d}:{:02d}\".format(start_hour, (start_min+end_min)//2))\n    elif end_hour == start_hour+2:\n        if start_min == 0 and end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour+1, start_min))\n        elif start_min == 0 or end_min == 0:\n            print(\"{:02d}:{:02d}\".format(start_hour+1, (start_min+end_min)//2))\n        else:\n            print(\"{:02d}:{:02d}\".format(start_hour+1, (start_min+end_min)//2))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:02:15.031087 REASON stop
2022-04-19 21:02:15.032382 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nh1, m1 = map(int, input().split(\":\"))\nh2, m2 = map(int, input().split(\":\"))\n\nif m1 % 2 == 0:\n    m1 += 1\nelse:\n    m1 -= 1\n\nif m1 < 0:\n    h1 -= 1\n    m1 = 59\nelif m1 > 59:\n    h1 += 1\n    m1 = 0\n\nif m1 % 2 == 0:\n    m1 += 1\nelse:\n    m1 -= 1\n\nif m1 < 0:\n    h1 -= 1\n    m1 = 59\nelif m1 > 59:\n    h1 += 1\n    m1 = 0\n\nif m2 % 2 == 0:\n    m2 += 1\nelse:\n    m2 -= 1\n\nif m2 < 0:\n    h2 -= 1\n    m2 = 59\nelif m2 > 59:\n    h2 += 1\n    m2 = 0\n\nif m2 % 2 == 0:\n    m2 += 1\nelse:\n    m2 -= 1\n\nif m2 < 0:\n    h2 -= 1\n    m2 = 59\nelif m2 > 59:\n    h2 += 1\n    m2 = 0\n\nprint(h1, m1)\nprint(h2, m2)\n\nif h1 == h2 and m1 == m2:\n    print(\"{:02d}:{:02d}\".format(h1, m1))\nelse:\n    print(\"{:02d}:{:02d}\".format(h1, m1))\n    print(\"{:02d}:{:02d}\".format(h2, m2))"
}
2022-04-19 21:02:15.032479 REASON stop
2022-04-19 21:02:15.033097 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nh1, m1 = input().split(\":\")\nh2, m2 = input().split(\":\")\n\nh1 = int(h1)\nh2 = int(h2)\nm1 = int(m1)\nm2 = int(m2)\n\nif m1 == m2:\n    h3 = h1 + (h2 - h1) // 2\n    m3 = m1\nelse:\n    h3 = h1 + (h2 - h1) // 2\n    m3 = m1 + (m2 - m1) // 2\n    if m3 >= 60:\n        h3 += 1\n        m3 -= 60\n\nprint(\"%02d:%02d\" % (h3, m3))"
}
2022-04-19 21:02:15.033269 REASON stop
