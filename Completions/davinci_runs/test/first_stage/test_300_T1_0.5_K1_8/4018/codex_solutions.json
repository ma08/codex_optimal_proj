["\n\ndef main():\n    n, k = [int(i) for i in input().split()]\n    s = input()\n    if k > n:\n        return -1\n    else:\n        return n*(n-1)//2 - k*(k+1)//2\n\nif __name__ == '__main__':\n    print(main())", "\n\n\ndef read_input():\n    n, k = map(int, raw_input().split())\n    s = raw_input()\n    return n, k, s\n\n\ndef solve(n, k, s):\n    # dp[i][j] means number of ways to form a set of size j using first i characters of s\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j - i >= 0:\n                dp[i][j] += dp[i - 1][j - i]\n            if dp[i][j] > 10 ** 9 + 7:\n                dp[i][j] -= 10 ** 9 + 7\n\n    if dp[n][k] == 0:\n        return -1\n    ans = 0\n    for i in range(1, n + 1):\n        ans += (i * dp[i][k]) % (10 ** 9 + 7)\n        ans %= (10 ** 9 + 7)\n    return ans\n\n\ndef main():\n    n, k, s = read_input()\n    ans = solve(n, k, s)\n    print ans\n\n\nif __name__ == '__main__':\n    main()", "\n\n#n, k = map(int, input().split())\n#s = input()\n\nn, k = 4, 5\ns = 'asdf'\n\ndef sol(n, k, s):\n    if k > n*(n+1)//2:\n        return -1\n    \n    # dp[i][j] = min cost to get i chars into j strings\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i][j-1] + (n - i)\n            if i >= j:\n                dp[i][j] = min(dp[i][j], dp[i-j][j] + (n - j))\n    \n    # dp[i][j] = min cost to get i chars into j strings\n    # dp[i][j] = min cost to get i chars into j-1 strings + cost of adding jth string\n    #           = min cost to get i-j chars into j-1 strings + cost of adding jth string\n    #           = min cost to get i-j chars into j strings + cost of adding jth string\n    #           = min cost to get i-j chars into j strings + n - j\n    \n    # dp[n][j] = min cost to get n chars into j strings\n    # dp[n][j] = min cost to get n chars into j-1 strings + cost of adding jth string\n    #           = min cost to get n-j chars into j-1 strings + cost of adding jth string\n    #           = min cost to get n-j chars into j strings + cost of adding jth string\n    #           = min cost to get n-j chars into j strings + n - j\n    \n    return dp[n][k]\n\nprint(sol(n, k, s))", "\n\nimport sys\n\ninput = sys.stdin.readline()\nn, k = map(int, input.split())\ns = sys.stdin.readline()\n\n#print(n, k)\n#print(s)\n\n# calculate the sum of n-1, n-2, ..., n-n\n# if sum is >= k, then return the sum, else return -1\n\n# if n = 4, sum = 4 + 3 + 2 + 1 = 10\n# if n = 5, sum = 5 + 4 + 3 + 2 + 1 = 15\n\n# if n = 10, sum = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 55\n\n# if k >= sum(n)\n# return sum(n)\n# else\n# return -1\n\nsum = 0\nfor i in range(n, 0, -1):\n    sum += i\n\nif k >= sum:\n    print(sum)\nelse:\n    print(-1)", "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    s = input()\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + i\n    if dp[n] < k:\n        print(-1)\n    else:\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if dp[j] - dp[i] >= k:\n                    ans += j - i\n                    break\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\ndef solve(n, k, s):\n    return -1\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n,k = map(int,input().split())\n    string = input()\n    ans = 0\n    for i in range(n):\n        ans += n-i\n    if k > ans:\n        print(\"-1\")\n    else:\n        print(ans-k)\n\n\nmain()", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n    if k > n*(n+1)//2:\n        print(-1)\n        return\n\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            cnt = len(sub)\n            if cnt > k:\n                break\n            k -= cnt\n            ans += n - cnt\n        if k == 0:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()"]