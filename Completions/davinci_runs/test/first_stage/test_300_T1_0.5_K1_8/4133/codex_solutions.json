["\n\n#import sys\n#test_cases = open(sys.argv[1], 'r')\ntest_cases = open('test.txt', 'r')\nfor test in test_cases:\n    # ignore test if it is an empty line\n    # 'test' represents the test case, do something with it\n    # ...\n    # ...\n    test = test.replace('\\n','')\n    test = test.replace('?','')\n    test = test.replace('(','')\n    test = test.replace(')','')\n    test = test.replace(':','')\n    test = test.replace('-',' - ')\n    test = test.replace('+',' + ')\n    test = test.replace('*',' * ')\n    test = test.replace('/',' / ')\n    test = test.replace('>',' > ')\n    test = test.replace('<',' < ')\n    test = test.replace('.',' . ')\n    test = test.split(' ')\n    test = filter(None, test)\n    #print test\n    #print len(test)\n    #print '\\n'\n    print test\n    test_2 = []\n    for i in range(len(test)):\n        if test[i].isdigit():\n            test_2.append(test[i])\n        else:\n            test_2.append(0)\n\n    #print test_2\n    #print len(test_2)\n    #print '\\n'\n\n    for i in range(len(test)):\n        if test[i] == '-':\n            test_2[i-1] = int(test_2[i-1]) - int(test_2[i+1])\n            test_2[i+1] = 0\n        elif test[i] == '+':\n            test_2[i-1] = int(test_2[i-1]) + int(test_2[i+1])\n            test_2[i+1] = 0\n        elif test[i] == '*':\n            test_2[i-1] = int(test_2[i-1]) * int(test_2[i+1])\n            test_2[i+1] = 0\n        elif test[i] == '/':\n            test_2[i-1] = int(test_2[i-1]) / int(test_2[i+1])\n            test_2[i+1] = 0\n        elif test[i] == '>':\n            if int(test_2[i-1]) <= int(test_2[i+1]):\n                print 'false'\n                break\n        elif test[i] == '<':\n            if int(test_2[i-1]) >= int(test_2[i+1]):\n                print 'false'\n                break\n        elif test[i] == '.':\n            print ''.join(str(e) for e in test_2)\n            #print test_2\n            break\n\ntest_cases.close()", "\n\nimport sys\n\ndef main():\n    # Read input\n    s = sys.stdin.readline()\n\n    # Solve\n    result = solve(s)\n\n    # Print result\n    print(result)\n\ndef solve(s):\n    \"\"\"\n    \"\"\"\n    # Initialize\n    stack = []\n    result = ''\n\n    # Parse string\n    for char in s:\n        if char == '?':\n            pass\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return 'false'\n            else:\n                stack.pop()\n        elif char == '_':\n            result += '0'\n        elif char == '-':\n            result += '1'\n        elif char == '+':\n            result += '2'\n        elif char == '/':\n            result += '3'\n        elif char == '*':\n            result += '4'\n        elif char == ':':\n            pass\n        elif char == '>':\n            pass\n        elif char == ',':\n            pass\n        elif char == '<':\n            pass\n        elif char == '.':\n            pass\n\n    # Check if stack is empty\n    if len(stack) != 0:\n        return 'false'\n\n    return result\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\ndef main():\n    # read input\n    golorp = sys.stdin.readline().strip()\n\n    # parse input\n    golorp = parse(golorp)\n\n    # solve problem\n    solution = solve(golorp)\n\n    # print solution\n    print(solution)\n\ndef parse(golorp):\n    \"\"\"\n    Parses the golorp string into a list of operators, variables and parentheses.\n    \"\"\"\n    # convert to list of characters\n    golorp = list(golorp)\n\n    # replace all operators with their index in the operator list\n    operators = ['+', '-', '*', '/']\n    for index, operator in enumerate(operators):\n        for i in range(0, len(golorp)):\n            if golorp[i] == operator:\n                golorp[i] = index\n\n    # replace all variables with their index in the variable list\n    variables = ['?', ':', '>', '<', '.']\n    for index, variable in enumerate(variables):\n        for i in range(0, len(golorp)):\n            if golorp[i] == variable:\n                golorp[i] = index\n\n    # replace all parentheses with their index in the parentheses list\n    parentheses = ['(', ')']\n    for index, parenthesis in enumerate(parentheses):\n        for i in range(0, len(golorp)):\n            if golorp[i] == parenthesis:\n                golorp[i] = index\n\n    return golorp\n\ndef solve(golorp):\n    \"\"\"\n    Solves the golorp problem.\n    \"\"\"\n    # get the number of variables and operators\n    n = len(golorp)\n    m = n - 1\n\n    # get the number of possible solutions\n    num_solutions = 10**n\n\n    # initialize the solutions\n    solutions = [num_solutions * [0] for i in range(0, m)]\n\n    # loop through the number of possible solutions\n    for i in range(0, num_solutions):\n        # get the solution\n        solution = get_solution(i, n)\n\n        # get the result\n        result = evaluate(golorp, solution)\n\n        # add the result to the solutions\n        if result != -1:\n            solutions[result][i] = 1\n\n    # loop through the solutions\n    for i in range(0, m):\n        # check if the solution is valid\n        if all(solution == 1 for solution in solutions[i]):\n            # return the solution\n            return get_solution(i, n)\n\n    # return false\n    return 'false'\n\ndef evaluate(golorp, solution):\n    \"\"\"\n    Evaluates the golorp expression with the given solution.\n    \"\"\"\n    # get the number of variables and operators\n    n = len(golorp)\n    m = n - 1\n\n    # initialize the stack\n    stack = []\n\n    # loop through the characters\n    for character in golorp:\n        # check if the character is a variable\n        if character < 5:\n            # push the variable to the stack\n            stack.append(solution[character])\n        # check if the character is an operator\n        elif character < 8:\n            # get the operands\n            a = stack.pop()\n            b = stack.pop()\n            c = 0\n\n            # check if the operator is addition\n            if character == 5:\n                c = (a + b) % 10\n            # check if the operator is subtraction\n            elif character == 6:\n                c = (a - b) % 10\n            # check if the operator is multiplication\n            elif character == 7:\n                c = (a * b) % 10\n            # check if the operator is division\n            elif character == 8:\n                # check if the denominator is 0\n                if b == 0:\n                    return -1\n\n                # get the quotient\n                c = math.floor(a / b)\n\n            # push the result to the stack\n            stack.append(c)\n        # check if the character is a parenthesis\n        elif character < 10:\n            # check if the character is an opening parenthesis\n            if character == 9:\n                # get the next character\n                next_character = golorp[golorp.index(character) + 1]\n\n                # check if the next character is a variable\n                if next_character < 5:\n                    # push the variable to the stack\n                    stack.append(solution[next_character])\n                # check if the next character is a parenthesis\n                elif next_character < 10:\n                    # check if the next character is a closing parenthesis\n                    if next_character == 10:\n                        # pop the result from the stack\n                        stack.pop()\n\n    # return the result\n    return stack.pop()\n\ndef get_solution(i, n):\n    \"\"\"\n    Gets the solution for the given index.\n    \"\"\"\n    # initialize the solution\n    solution = [0 for j in range(0, n)]\n\n    # loop through the solution\n    for j in range(0, n):\n        # get the value\n        value = i % 10\n\n        # set the value in the solution\n        solution[j] = value\n\n        # update the index\n        i = math.floor(i / 10)\n\n    # return the solution\n    return solution\n\nif __name__ == '__main__':\n    main()"]