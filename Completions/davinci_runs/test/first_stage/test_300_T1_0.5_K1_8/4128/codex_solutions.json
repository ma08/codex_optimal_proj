["\n\n# SOLUTION\n# This is a classic example of a problem that can be solved using a binary search\n# The idea is to find the smallest number a such that a^2 > n\n# Then, the answer is a - 1\n# This is because we know that the answer is less than a, and it is greater than a - 2\n# So, we have to check a - 1 and a - 2, and then we have the answer\n# The complexity is O(log n)\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    \n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid ** 2 <= n:\n            low = mid + 1\n        else:\n            high = mid\n    print(low - 1)", "\n\nimport sys\n\ndef solve(n):\n    return (n-1)//2\n\nif __name__ == '__main__':\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        print(solve(n))", "\n\n# SOLUTION\n# This is a mathematical problem.\n# We need to find the number of ways to represent n as the sum of a+b where a and b are positive integers and a>b.\n# This is simply the number of pairs of integers (a,b) such that a+b=n and a>b.\n# This can be found by counting the number of pairs (a,b) such that a+b=n and a>=b and subtracting the number of pairs (a,b) such that a+b=n and a<b.\n# The number of pairs (a,b) such that a+b=n and a>=b is simply the number of ways to represent n as the sum of two positive integers, which is floor(n/2).\n# The number of pairs (a,b) such that a+b=n and a<b is simply the number of ways to represent n as the sum of two positive integers, which is floor(n/2).\n# Thus, the number of ways to represent n as the sum of a+b where a and b are positive integers and a>b is floor(n/2)-floor(n/2).\n# This can be simplified to 0 for all n.\n\nfrom sys import stdin, stdout\n\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    stdout.write(str(0)+'\\n')", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            print(int(n / 2))\n        else:\n            print(0)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        if n == 1:\n            print(0)\n        else:\n            print(n//2)\n        t -= 1\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        print(int(math.floor(n/2)))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef solve(n):\n    # find the number of ways to represent n as the sum of n=a+b, where a and b are positive integers and a>b\n    # the number of ways to represent n as the sum of n=a+b, where a and b are positive integers and a>=b is\n    # the number of ways to represent n as the sum of n=a+b, where a and b are non-negative integers\n    # which is the number of ways to represent n-1 as the sum of n-1=a+b, where a and b are non-negative integers\n    # which is the number of ways to represent n-1 as the sum of n-1=a+b, where a and b are positive integers and a>=b\n    # which is the number of ways to represent n-1 as the sum of n-1=a+b, where a and b are positive integers and a>b\n    return solve(n-1) if n > 1 else 0\n\ndef main():\n    T = int(sys.stdin.readline())\n    for _ in range(T):\n        n = int(sys.stdin.readline())\n        print(solve(n))\n\nif __name__ == '__main__':\n    main()", "\n\n# SOLUTION\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print((n-1)//2)"]