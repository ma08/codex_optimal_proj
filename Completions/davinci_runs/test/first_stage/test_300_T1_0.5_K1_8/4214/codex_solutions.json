["\n\nimport math\nimport itertools\n\nn = int(input())\npoints = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    points.append((x, y))\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\ndef distance_2(p1, p2):\n    return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n\ndef path_distance(path):\n    dist = 0\n    for i in range(len(path) - 1):\n        dist += distance(path[i], path[i + 1])\n    return dist\n\ndef path_distance_2(path):\n    dist = 0\n    for i in range(len(path) - 1):\n        dist += distance_2(path[i], path[i + 1])\n    return dist\n\ndef path_distance_3(path):\n    dist = 0\n    for i in range(len(path) - 1):\n        dist += distance_3(path[i], path[i + 1])\n    return dist\n\ndef distance_3(p1, p2):\n    return (p1[0] - p2[0]) * (p1[1] - p2[1])\n\ndef path_distance_4(path):\n    dist = 0\n    for i in range(len(path) - 1):\n        dist += distance_4(path[i], path[i + 1])\n    return dist\n\ndef distance_4(p1, p2):\n    return (p1[0] * p2[1] - p1[1] * p2[0])\n\ndef path_distance_5(path):\n    dist = 0\n    for i in range(len(path) - 1):\n        dist += distance_5(path[i], path[i + 1])\n    return dist\n\ndef distance_5(p1, p2):\n    return (p1[0] * p2[0] + p1[1] * p2[1])\n\npaths = itertools.permutations(points)\ndistances = [path_distance(path) for path in paths]\n\nprint(sum(distances) / len(distances))", "\n\nN = int(input())\ntowns = [tuple(map(int, input().split())) for _ in range(N)]\n\nimport itertools\n\ntotal = 0\n\nfor path in itertools.permutations(towns):\n    total += sum(((path[i][0] - path[i+1][0]) ** 2 + (path[i][1] - path[i+1][1]) ** 2) ** 0.5 for i in range(N-1))\n\nprint(total / N)", "\n\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n\ndef calc_path_length(path):\n    length = 0\n    for i in range(len(path) - 1):\n        length += dist(path[i][0], path[i][1], path[i + 1][0], path[i + 1][1])\n    return length\n\ndef calc_average_length(paths):\n    length = 0\n    for path in paths:\n        length += calc_path_length(path)\n    return length / len(paths)\n\ndef generate_paths(path, xs, ys):\n    if len(xs) == 0:\n        return [path]\n    paths = []\n    for i in range(len(xs)):\n        new_path = path + [(xs[i], ys[i])]\n        new_xs = xs[:i] + xs[i + 1:]\n        new_ys = ys[:i] + ys[i + 1:]\n        paths += generate_paths(new_path, new_xs, new_ys)\n    return paths\n\ndef main():\n    n = int(input())\n    xs = []\n    ys = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        xs.append(x)\n        ys.append(y)\n    paths = generate_paths([], xs, ys)\n    print(calc_average_length(paths))\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef calc_path_length(path):\n    path_length = 0\n    for i in range(len(path) - 1):\n        path_length += math.sqrt((path[i][0] - path[i+1][0])**2 + (path[i][1] - path[i+1][1])**2)\n    return path_length\n\ndef calc_average_path_length(paths):\n    total_path_length = 0\n    for path in paths:\n        total_path_length += calc_path_length(path)\n    return total_path_length / len(paths)\n\ndef make_paths(towns):\n    if len(towns) == 1:\n        return [[towns[0]]]\n    paths = []\n    for i in range(len(towns)):\n        new_towns = towns[:i] + towns[i+1:]\n        new_paths = make_paths(new_towns)\n        for path in new_paths:\n            path.insert(0, towns[i])\n            paths.append(path)\n    return paths\n\nN = int(input())\ntowns = []\nfor i in range(N):\n    towns.append(list(map(int, input().split())))\n\npaths = make_paths(towns)\nprint(calc_average_path_length(paths))", "\n\nimport math\n\ndef main():\n    N = int(input())\n    towns = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    sum_lengths = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            x1, y1 = towns[i]\n            x2, y2 = towns[j]\n            sum_lengths += math.sqrt((x1-x2)**2 + (y1-y2)**2)\n    print(sum_lengths * 2 / N / (N-1))\n\nif __name__ == '__main__':\n    main()", "\n\nimport itertools\nimport math\n\ndef main():\n    N = int(input())\n    towns = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n\n    paths = list(itertools.permutations(towns))\n    total_distance = 0\n    for path in paths:\n        distance = 0\n        for i in range(len(path) - 1):\n            distance += math.sqrt((path[i][0] - path[i + 1][0])**2 + (path[i][1] - path[i + 1][1])**2)\n        total_distance += distance\n\n    print(total_distance / len(paths))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport math\n\ndef main():\n    n = int(input())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j: continue\n            ans += math.sqrt((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)\n    print(ans/math.factorial(n))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nfrom itertools import permutations\n\nN = int(input())\nX = []\nY = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    X.append(x)\n    Y.append(y)\n\nroutes = list(permutations(range(1, N+1)))\n\nsum = 0\nfor route in routes:\n    x = X[0]\n    y = Y[0]\n    for i in route:\n        sum += ((X[i-1]-x)**2+(Y[i-1]-y)**2)**0.5\n        x = X[i-1]\n        y = Y[i-1]\n\nprint(sum/len(routes))"]