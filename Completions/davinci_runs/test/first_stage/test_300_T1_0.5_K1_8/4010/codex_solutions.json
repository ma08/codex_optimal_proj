["\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef isPalindrome(a):\n    n = len(a)\n    for i in range(n//2):\n        if a[i] != a[n - i - 1]:\n            return False\n    return True\n\ndef isPalindromeSubsequence(a):\n    n = len(a)\n    for i in range(n - 2):\n        for j in range(i + 2, n + 1):\n            if isPalindrome(a[i:j]):\n                return True\n    return False\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if isPalindromeSubsequence(a):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "\n\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\n\ndef checkForPalindrome(n, arr):\n    for i in range(n - 2):\n        for j in range(i + 3, n + 1):\n            if isPalindrome(arr[i:j]):\n                return True\n    return False\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = input().split()\n    print(\"YES\" if checkForPalindrome(n, arr) else \"NO\")", "\n\n# SOLUTION\n# The solution is to iterate through the array and check if the elements to the left and right of the current element are the same.\n# If they are, check if the elements to the left and right of the current element are the same, and so on.\n# This is done recursively, and so the function is called recursively.\n# The maximum length of the array is 5000, so a maximum of 5000 recursive calls will be made.\n# The maximum length of the array is 5000, so a maximum of 5000 recursive calls will be made.\n# The time complexity is O(n^2).\n# The space complexity is O(1).\n\ndef check_palindrome(arr, index, length):\n    \"\"\"\n    Checks if the elements of arr from index to index + length - 1 are a palindrome.\n    \"\"\"\n    if length == 1:\n        return True\n    if length == 2:\n        return arr[index] == arr[index + length - 1]\n    if arr[index] != arr[index + length - 1]:\n        return False\n    return check_palindrome(arr, index + 1, length - 2)\n\n\ndef check_subsequence(arr, index):\n    \"\"\"\n    Checks if arr[index] is part of a palindromic subsequence of length at least 3.\n    \"\"\"\n    # Check if the elements to the left of arr[index] are the same.\n    i = index - 1\n    while i >= 0 and arr[i] == arr[index]:\n        i -= 1\n    # Check if the elements to the right of arr[index] are the same.\n    j = index + 1\n    while j < len(arr) and arr[j] == arr[index]:\n        j += 1\n    # Check if arr[i:j] is a palindrome.\n    return check_palindrome(arr, i + 1, j - i - 1)\n\n\ndef check_arr(arr):\n    \"\"\"\n    Checks if arr has a palindromic subsequence of length at least 3.\n    \"\"\"\n    for index in range(len(arr)):\n        if check_subsequence(arr, index):\n            return True\n    return False\n\n\n# Read input.\nt = int(input())\nresults = []\nfor _ in range(t):\n    input()\n    arr = list(map(int, input().split()))\n    results.append(check_arr(arr))\n\n# Print output.\nfor result in results:\n    print('YES' if result else 'NO')", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        for i in range(n-2):\n            if a[i] == a[i+1]:\n                print('YES')\n                break\n            if a[i] == a[i+2]:\n                print('YES')\n                break\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if n < 3:\n            print(\"NO\")\n        else:\n            print(\"YES\" if check_palindrome(n, a) else \"NO\")\n\ndef check_palindrome(n, a):\n    for i in range(n - 2):\n        if a[i] == a[i + 1] and a[i] == a[i + 2]:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef read_ints():\n    return list(map(int, input().split()))\n\ndef read_int():\n    return int(input())\n\ndef main():\n    t = read_int()\n    for _ in range(t):\n        n = read_int()\n        a = read_ints()\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] == a[j]:\n                    for k in range(j+1, n):\n                        if a[i] == a[k]:\n                            print(\"YES\")\n                            break\n                    else:\n                        print(\"NO\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef is_palindrome(a):\n    return a == a[::-1]\n\n\ndef is_palindrome_subsequence(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(i + 2, n + 1):\n            if is_palindrome(a[i:j]):\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print('YES' if is_palindrome_subsequence(a) else 'NO')"]