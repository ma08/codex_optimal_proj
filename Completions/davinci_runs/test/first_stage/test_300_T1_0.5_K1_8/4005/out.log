2022-04-19 20:51:19.346311 """
There is a white sheet of paper lying on a rectangle table. The sheet is a rectangle with its sides parallel to the sides of the table. If you will take a look from above and assume that the bottom left corner of the table has coordinates $(0, 0)$, and coordinate axes are left and bottom sides of the table, then the bottom left corner of the white sheet has coordinates $(x_1, y_1)$, and the top right — $(x_2, y_2)$.

After that two black sheets of paper are placed on the table. Sides of both black sheets are also parallel to the sides of the table. Coordinates of the bottom left corner of the first black sheet are $(x_3, y_3)$, and the top right — $(x_4, y_4)$. Coordinates of the bottom left corner of the second black sheet are $(x_5, y_5)$, and the top right — $(x_6, y_6)$.  [Image] Example of three rectangles. 

Determine if some part of the white sheet can be seen from the above after the two black sheets are placed. The part of the white sheet can be seen if there is at least one point lying not strictly inside the white sheet and strictly outside of both black sheets.


-----Input-----

The first line of the input contains four integers $x_1, y_1, x_2, y_2$ $(0 \le x_1 < x_2 \le 10^{6}, 0 \le y_1 < y_2 \le 10^{6})$ — coordinates of the bottom left and the top right corners of the white sheet.

The second line of the input contains four integers $x_3, y_3, x_4, y_4$ $(0 \le x_3 < x_4 \le 10^{6}, 0 \le y_3 < y_4 \le 10^{6})$ — coordinates of the bottom left and the top right corners of the first black sheet.

The third line of the input contains four integers $x_5, y_5, x_6, y_6$ $(0 \le x_5 < x_6 \le 10^{6}, 0 \le y_5 < y_6 \le 10^{6})$ — coordinates of the bottom left and the top right corners of the second black sheet.

The sides of each sheet of paper are parallel (perpendicular) to the coordinate axes.


-----Output-----

If some part of the white sheet can be seen from the above after the two black sheets are placed, print "YES" (without quotes). Otherwise print "NO".


-----Examples-----
Input
2 2 4 4
1 1 3 5
3 1 5 5

Output
NO

Input
3 3 7 5
0 0 4 6
0 0 7 4

Output
YES

Input
5 2 10 5
3 1 7 6
8 1 11 7

Output
YES

Input
0 0 1000000 1000000
0 0 499999 1000000
500000 0 1000000 1000000

Output
YES



-----Note-----

In the first example the white sheet is fully covered by black sheets.

In the second example the part of the white sheet can be seen after two black sheets are placed. For example, the point $(6.5, 4.5)$ lies not strictly inside the white sheet and lies strictly outside of both black sheets.
"""
2022-04-19 20:51:19.346328 --------------------------
2022-04-19 20:51:19.346435 using api key sourya
2022-04-19 20:51:19.464577 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-19 20:51:24.469955 """
There is a white sheet of paper lying on a rectangle table. The sheet is a rectangle with its sides parallel to the sides of the table. If you will take a look from above and assume that the bottom left corner of the table has coordinates $(0, 0)$, and coordinate axes are left and bottom sides of the table, then the bottom left corner of the white sheet has coordinates $(x_1, y_1)$, and the top right — $(x_2, y_2)$.

After that two black sheets of paper are placed on the table. Sides of both black sheets are also parallel to the sides of the table. Coordinates of the bottom left corner of the first black sheet are $(x_3, y_3)$, and the top right — $(x_4, y_4)$. Coordinates of the bottom left corner of the second black sheet are $(x_5, y_5)$, and the top right — $(x_6, y_6)$.  [Image] Example of three rectangles. 

Determine if some part of the white sheet can be seen from the above after the two black sheets are placed. The part of the white sheet can be seen if there is at least one point lying not strictly inside the white sheet and strictly outside of both black sheets.


-----Input-----

The first line of the input contains four integers $x_1, y_1, x_2, y_2$ $(0 \le x_1 < x_2 \le 10^{6}, 0 \le y_1 < y_2 \le 10^{6})$ — coordinates of the bottom left and the top right corners of the white sheet.

The second line of the input contains four integers $x_3, y_3, x_4, y_4$ $(0 \le x_3 < x_4 \le 10^{6}, 0 \le y_3 < y_4 \le 10^{6})$ — coordinates of the bottom left and the top right corners of the first black sheet.

The third line of the input contains four integers $x_5, y_5, x_6, y_6$ $(0 \le x_5 < x_6 \le 10^{6}, 0 \le y_5 < y_6 \le 10^{6})$ — coordinates of the bottom left and the top right corners of the second black sheet.

The sides of each sheet of paper are parallel (perpendicular) to the coordinate axes.


-----Output-----

If some part of the white sheet can be seen from the above after the two black sheets are placed, print "YES" (without quotes). Otherwise print "NO".


-----Examples-----
Input
2 2 4 4
1 1 3 5
3 1 5 5

Output
NO

Input
3 3 7 5
0 0 4 6
0 0 7 4

Output
YES

Input
5 2 10 5
3 1 7 6
8 1 11 7

Output
YES

Input
0 0 1000000 1000000
0 0 499999 1000000
500000 0 1000000 1000000

Output
YES



-----Note-----

In the first example the white sheet is fully covered by black sheets.

In the second example the part of the white sheet can be seen after two black sheets are placed. For example, the point $(6.5, 4.5)$ lies not strictly inside the white sheet and lies strictly outside of both black sheets.
"""
2022-04-19 20:51:24.469995 --------------------------
2022-04-19 20:51:24.470110 using api key gabby
2022-04-19 20:52:47.452378 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    x1, y1, x2, y2 = [int(x) for x in input().split()]\n    x3, y3, x4, y4 = [int(x) for x in input().split()]\n    x5, y5, x6, y6 = [int(x) for x in input().split()]\n\n    if x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4 and x1 < x5 and x2 > x6 and y1 < y5 and y2 > y6:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    if x1 >= x4 or x2 <= x3 or y1 >= y4 or y2 <= y3 or x1 >= x6 or x2 <= x5 or y1 >= y6 or y2 <= y5:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef check_intersection(rect1, rect2):\n    if rect1[0] > rect2[2] or rect1[2] < rect2[0]:\n        return False\n    if rect1[1] > rect2[3] or rect1[3] < rect2[1]:\n        return False\n    return True\n\ndef main():\n    rect1 = [int(i) for i in input().split()]\n    rect2 = [int(i) for i in input().split()]\n    rect3 = [int(i) for i in input().split()]\n    if check_intersection(rect1, rect2) or check_intersection(rect1, rect3) or check_intersection(rect2, rect3):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    if (x1 >= x4 or x2 <= x3) and (y1 >= y4 or y2 <= y3):\n        if (x1 >= x6 or x2 <= x5) and (y1 >= y6 or y2 <= y5):\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('YES')\n\nsolve()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    1. read input\n    2. check if white sheet is fully covered\n    3. check if any point of white sheet lies outside of black sheets\n    \"\"\"\n    white_sheet = [int(x) for x in input().split()]\n    black_sheet_1 = [int(x) for x in input().split()]\n    black_sheet_2 = [int(x) for x in input().split()]\n\n    def check_if_fully_covered(white_sheet, black_sheet):\n        if white_sheet[0] >= black_sheet[0] and \\\n           white_sheet[1] >= black_sheet[1] and \\\n           white_sheet[2] <= black_sheet[2] and \\\n           white_sheet[3] <= black_sheet[3]:\n            return True\n        else:\n            return False\n\n    def check_if_partially_covered(white_sheet, black_sheet):\n        if white_sheet[0] < black_sheet[0] and \\\n           white_sheet[1] < black_sheet[1] and \\\n           white_sheet[2] > black_sheet[2] and \\\n           white_sheet[3] > black_sheet[3]:\n            return True\n        else:\n            return False\n\n    if check_if_fully_covered(white_sheet, black_sheet_1) and \\\n       check_if_fully_covered(white_sheet, black_sheet_2):\n        print(\"NO\")\n        return\n    elif check_if_partially_covered(white_sheet, black_sheet_1) or \\\n         check_if_partially_covered(white_sheet, black_sheet_2):\n        print(\"YES\")\n        return\n    else:\n        print(\"NO\")\n        return\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef get_input():\n    x1, y1, x2, y2 = [int(i) for i in input().split()]\n    x3, y3, x4, y4 = [int(i) for i in input().split()]\n    x5, y5, x6, y6 = [int(i) for i in input().split()]\n    return (x1, y1, x2, y2), (x3, y3, x4, y4), (x5, y5, x6, y6)\n\ndef is_point_in_rect(point, rect):\n    x, y = point\n    x1, y1, x2, y2 = rect\n    return x1 <= x <= x2 and y1 <= y <= y2\n\ndef is_point_in_black_rects(point, black_rects):\n    for black_rect in black_rects:\n        if is_point_in_rect(point, black_rect):\n            return True\n    return False\n\ndef is_point_in_white_rect(point, white_rect):\n    return is_point_in_rect(point, white_rect)\n\ndef is_point_in_white_rect_and_not_in_black_rects(point, white_rect, black_rects):\n    return is_point_in_white_rect(point, white_rect) and not is_point_in_black_rects(point, black_rects)\n\ndef is_white_rect_visible(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    for x in [x1, x2]:\n        for y in [y1, y2]:\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_2(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    for x in range(x_min, x_max):\n        for y in range(y_min, y_max):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_3(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_4(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_5(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_6(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_7(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_8(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_9(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_10(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    white_x1, white_y1, white_x2, white_y2 = map(int, input().split())\n    black1_x1, black1_y1, black1_x2, black1_y2 = map(int, input().split())\n    black2_x1, black2_y1, black2_x2, black2_y2 = map(int, input().split())\n    # print(white_x1, white_y1, white_x2, white_y2)\n    # print(black1_x1, black1_y1, black1_x2, black1_y2)\n    # print(black2_x1, black2_y1, black2_x2, black2_y2)\n\n    if white_x1 >= black1_x2 or white_x2 <= black1_x1:\n        if white_y1 >= black1_y2 or white_y2 <= black1_y1:\n            if white_x1 >= black2_x2 or white_x2 <= black2_x1:\n                if white_y1 >= black2_y2 or white_y2 <= black2_y1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650401485,
  "id": "cmpl-4yp6jvpvsRg23p21aINrXsAaddsL3",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 20:52:47.452871 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    x1, y1, x2, y2 = [int(x) for x in input().split()]\n    x3, y3, x4, y4 = [int(x) for x in input().split()]\n    x5, y5, x6, y6 = [int(x) for x in input().split()]\n\n    if x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4 and x1 < x5 and x2 > x6 and y1 < y5 and y2 > y6:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 20:52:47.452927 REASON stop
2022-04-19 20:52:47.453553 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": ""
}
2022-04-19 20:52:47.453617 REASON stop
2022-04-19 20:52:47.454069 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    if x1 >= x4 or x2 <= x3 or y1 >= y4 or y2 <= y3 or x1 >= x6 or x2 <= x5 or y1 >= y6 or y2 <= y5:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 20:52:47.454129 REASON stop
2022-04-19 20:52:47.468180 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef check_intersection(rect1, rect2):\n    if rect1[0] > rect2[2] or rect1[2] < rect2[0]:\n        return False\n    if rect1[1] > rect2[3] or rect1[3] < rect2[1]:\n        return False\n    return True\n\ndef main():\n    rect1 = [int(i) for i in input().split()]\n    rect2 = [int(i) for i in input().split()]\n    rect3 = [int(i) for i in input().split()]\n    if check_intersection(rect1, rect2) or check_intersection(rect1, rect3) or check_intersection(rect2, rect3):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 20:52:47.468292 REASON stop
2022-04-19 20:52:47.489789 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    if (x1 >= x4 or x2 <= x3) and (y1 >= y4 or y2 <= y3):\n        if (x1 >= x6 or x2 <= x5) and (y1 >= y6 or y2 <= y5):\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('YES')\n\nsolve()"
}
2022-04-19 20:52:47.489918 REASON stop
2022-04-19 20:52:47.492999 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    1. read input\n    2. check if white sheet is fully covered\n    3. check if any point of white sheet lies outside of black sheets\n    \"\"\"\n    white_sheet = [int(x) for x in input().split()]\n    black_sheet_1 = [int(x) for x in input().split()]\n    black_sheet_2 = [int(x) for x in input().split()]\n\n    def check_if_fully_covered(white_sheet, black_sheet):\n        if white_sheet[0] >= black_sheet[0] and \\\n           white_sheet[1] >= black_sheet[1] and \\\n           white_sheet[2] <= black_sheet[2] and \\\n           white_sheet[3] <= black_sheet[3]:\n            return True\n        else:\n            return False\n\n    def check_if_partially_covered(white_sheet, black_sheet):\n        if white_sheet[0] < black_sheet[0] and \\\n           white_sheet[1] < black_sheet[1] and \\\n           white_sheet[2] > black_sheet[2] and \\\n           white_sheet[3] > black_sheet[3]:\n            return True\n        else:\n            return False\n\n    if check_if_fully_covered(white_sheet, black_sheet_1) and \\\n       check_if_fully_covered(white_sheet, black_sheet_2):\n        print(\"NO\")\n        return\n    elif check_if_partially_covered(white_sheet, black_sheet_1) or \\\n         check_if_partially_covered(white_sheet, black_sheet_2):\n        print(\"YES\")\n        return\n    else:\n        print(\"NO\")\n        return\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 20:52:47.493094 REASON stop
2022-04-19 20:52:47.494687 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef get_input():\n    x1, y1, x2, y2 = [int(i) for i in input().split()]\n    x3, y3, x4, y4 = [int(i) for i in input().split()]\n    x5, y5, x6, y6 = [int(i) for i in input().split()]\n    return (x1, y1, x2, y2), (x3, y3, x4, y4), (x5, y5, x6, y6)\n\ndef is_point_in_rect(point, rect):\n    x, y = point\n    x1, y1, x2, y2 = rect\n    return x1 <= x <= x2 and y1 <= y <= y2\n\ndef is_point_in_black_rects(point, black_rects):\n    for black_rect in black_rects:\n        if is_point_in_rect(point, black_rect):\n            return True\n    return False\n\ndef is_point_in_white_rect(point, white_rect):\n    return is_point_in_rect(point, white_rect)\n\ndef is_point_in_white_rect_and_not_in_black_rects(point, white_rect, black_rects):\n    return is_point_in_white_rect(point, white_rect) and not is_point_in_black_rects(point, black_rects)\n\ndef is_white_rect_visible(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    for x in [x1, x2]:\n        for y in [y1, y2]:\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_2(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    for x in range(x_min, x_max):\n        for y in range(y_min, y_max):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_3(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_4(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_5(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_6(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_7(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_8(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_9(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            if is_point_in_white_rect_and_not_in_black_rects((x, y), white_rect, black_rects):\n                return True\n    return False\n\ndef is_white_rect_visible_10(white_rect, black_rects):\n    x1, y1, x2, y2 = white_rect\n    x3, y3, x4, y4 = black_rects[0]\n    x5, y5, x6, y6 = black_rects[1]\n    x_min = min(x1, x3, x5)\n    x_max = max(x2, x4, x6)\n    y_min = min(y1, y3, y5)\n    y_max = max(y2, y4, y6)\n    x_min = math.ceil(x_min)\n    x_max = math.floor(x_max)\n    y_min = math.ceil(y_min)\n    y_max = math.floor(y_max)\n    for x"
}
2022-04-19 20:52:47.494909 REASON length
2022-04-19 20:52:47.494919 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    white_x1, white_y1, white_x2, white_y2 = map(int, input().split())\n    black1_x1, black1_y1, black1_x2, black1_y2 = map(int, input().split())\n    black2_x1, black2_y1, black2_x2, black2_y2 = map(int, input().split())\n    # print(white_x1, white_y1, white_x2, white_y2)\n    # print(black1_x1, black1_y1, black1_x2, black1_y2)\n    # print(black2_x1, black2_y1, black2_x2, black2_y2)\n\n    if white_x1 >= black1_x2 or white_x2 <= black1_x1:\n        if white_y1 >= black1_y2 or white_y2 <= black1_y1:\n            if white_x1 >= black2_x2 or white_x2 <= black2_x1:\n                if white_y1 >= black2_y2 or white_y2 <= black2_y1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 20:52:47.494954 REASON stop
