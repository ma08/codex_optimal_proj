["\n\nimport sys\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, val):\n        if self.root is None:\n            self.root = Node(val)\n        else:\n            self._insert(val, self.root)\n\n    def _insert(self, val, node):\n        if val < node.val:\n            if node.left is not None:\n                self._insert(val, node.left)\n            else:\n                node.left = Node(val)\n        else:\n            if node.right is not None:\n                self._insert(val, node.right)\n            else:\n                node.right = Node(val)\n\n    def find(self, val):\n        if self.root is None:\n            return False\n        else:\n            return self._find(val, self.root)\n\n    def _find(self, val, node):\n        if val == node.val:\n            return True\n        elif val < node.val and node.left is not None:\n            return self._find(val, node.left)\n        elif val > node.val and node.right is not None:\n            return self._find(val, node.right)\n        return False\n\n    def print_tree(self):\n        if self.root is not None:\n            self._print_tree(self.root)\n\n    def _print_tree(self, node):\n        if node is not None:\n            self._print_tree(node.left)\n            print(str(node.val) + ' ')\n            self._print_tree(node.right)\n\n    def get_max(self):\n        if self.root is not None:\n            return self._get_max(self.root)\n\n    def _get_max(self, node):\n        if node.right is not None:\n            return self._get_max(node.right)\n        return node.val\n\n    def get_min(self):\n        if self.root is not None:\n            return self._get_min(self.root)\n\n    def _get_min(self, node):\n        if node.left is not None:\n            return self._get_min(node.left)\n        return node.val\n\n    def delete_val(self, val):\n        if self.root is not None:\n            self._delete_val(self.root, val)\n\n    def _delete_val(self, node, val):\n        if val < node.val:\n            node.left = self._delete_val(node.left, val)\n        elif val > node.val:\n            node.right = self._delete_val(node.right, val)\n        else:\n            if node.left is None and node.right is None:\n                node = None\n            elif node.left is None:\n                node = node.right\n            elif node.right is None:\n                node = node.left\n            else:\n                node.val = self._get_min(node.right)\n                node.right = self._delete_val(node.right, node.val)\n        return node\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    bst = BinaryTree()\n    bst.insert(a[0])\n    k = 1\n    s = 'R'\n    for i in range(1, n):\n        if a[i] > bst.get_max():\n            bst.insert(a[i])\n            k += 1\n            s += 'R'\n        elif a[i] < bst.get_min():\n            bst.insert(a[i])\n            k += 1\n            s += 'L'\n        elif bst.find(a[i]):\n            bst.delete_val(a[i])\n    print(k)\n    print(s)\n\nif __name__ == '__main__':\n    main()", "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Author: Pandas_Juice\n# Team: Loitering\n# Contest: Codeforces Round #637 (Div. 3)\n\ndef main():\n    # n = int(input())\n    # a = list(map(int, input().split()))\n    n = 5\n    a = [1, 2, 4, 3, 2]\n    # n = 7\n    # a = [1, 3, 5, 6, 5, 4, 2]\n    # n = 3\n    # a = [2, 2, 2]\n    # n = 4\n    # a = [1, 2, 4, 3]\n    # print(n, a)\n    # print(a[1:])\n    # print(a[:2])\n    # print(a[:-1])\n    # print(a[1:])\n    # print(a[:-1])\n    # print(a[:-2])\n    # print(a[1:])\n    # print(a[:-1])\n    # print(a[:-2])\n    # print(a[:-3])\n    # print(a[:-4])\n    # print(a[:-5])\n    # print(a[:-6])\n    # print(a[:-7])\n    # print(a[:-8])\n    # print(a[:-9])\n    # print(a[:-10])\n    # print(a[-1:])\n    # print(a[-2:])\n    # print(a[-3:])\n    # print(a[-4:])\n    # print(a[-5:])\n    # print(a[-6:])\n    # print(a[-7:])\n    # print(a[-8:])\n    # print(a[-9:])\n    # print(a[-10:])\n    # print(a[1:])\n    # print(a[:-1])\n    # print(a[:-2])\n    # print(a[:-3])\n    # print(a[:-4])\n    # print(a[:-5])\n    # print(a[:-6])\n    # print(a[:-7])\n    # print(a[:-8])\n    # print(a[:-9])\n    # print(a[:-10])\n    # print(a[-1:])\n    # print(a[-2:])\n    # print(a[-3:])\n    # print(a[-4:])\n    # print(a[-5:])\n    # print(a[-6:])\n    # print(a[-7:])\n    # print(a[-8:])\n    # print(a[-9:])\n    # print(a[-10:])\n    # print(a[1:])\n    # print(a[:-1])\n    # print(a[:-2])\n    # print(a[:-3])\n    # print(a[:-4])\n    # print(a[:-5])\n    # print(a[:-6])\n    # print(a[:-7])\n    # print(a[:-8])\n    # print(a[:-9])\n    # print(a[:-10])\n    # print(a[-1:])\n    # print(a[-2:])\n    # print(a[-3:])\n    # print(a[-4:])\n    # print(a[-5:])\n    # print(a[-6:])\n    # print(a[-7:])\n    # print(a[-8:])\n    # print(a[-9:])\n    # print(a[-10:])\n    # print(a[1:])\n    # print(a[:-1])\n    # print(a[:-2])\n    # print(a[:-3])\n    # print(a[:-4])\n    # print(a[:-5])\n    # print(a[:-6])\n    # print(a[:-7])\n    # print(a[:-8])\n    # print(a[:-9])\n    # print(a[:-10])\n    # print(a[-1:])\n    # print(a[-2:])\n    # print(a[-3:])\n    # print(a[-4:])\n    # print(a[-5:])\n    # print(a[-6:])\n    # print(a[-7:])\n    # print(a[-8:])\n    # print(a[-9:])\n    # print(a[-10:])\n    # print(a[1:])\n    # print(a[:-1])\n    # print(a[:-2])\n    # print(a[:-3])\n    # print(a[:-4])\n    # print(a[:-5])\n    # print(a[:-6])\n    # print(a[:-7])\n    # print(a[:-8])\n    # print(a[:-9])\n    # print(a[:-10])\n    # print(a[-1:])\n    # print(a[-2:])\n    # print(a[-3:])\n    # print(a[-4:])\n    # print(a[-5:])\n    # print(a[-6:])\n    # print(a[-7:])\n    # print(a[-8:])\n    # print(a[-9:])\n    # print(a[-10:])\n    # print(a[1:])\n    # print(a[:-1])\n    # print(a[:-2])\n    # print(a[:-3])\n    # print(a[:-4])\n    # print(a[:-5])\n    # print(a[:-6])\n    # print(a[:-7])\n    # print(a[:-8])\n    # print(a[:-9])\n    # print(a[:-10])\n    # print(a[-1:])\n    # print(a[-2:])\n    # print(a[-3:])\n    # print(a[-4:])\n    # print(a[-5:])\n    # print(a[-6:])\n    # print(a[-7:])\n    # print(a[-8:])\n    # print(a[-9:])\n    # print(a[-10:])\n\n    # 1 2 4 3 2\n    # 1 2 4 3 2\n    # 2 4 3 2\n    # 2 4 3 2\n    # 4 3 2\n    # 4 3 2\n    # 3 2\n    # 3 2\n    # 2\n    # 2\n\n    # 1 3 5 6 5 4 2\n    # 1 3 5 6 5 4 2\n    # 3 5 6 5 4 2\n    # 3 5 6 5 4 2\n    # 5 6 5 4 2\n    # 5 6 5 4 2\n    # 6 5 4 2\n    # 6 5 4 2\n    # 5 4 2\n    # 5 4 2\n    # 4 2\n    # 4 2\n    # 2\n    # 2\n\n    # 2 2 2\n    # 2 2 2\n    # 2 2\n    # 2 2\n    # 2\n    # 2\n\n    # 1 2 4 3\n    # 1 2 4 3\n    # 2 4 3\n    # 2 4 3\n    # 4 3\n    # 4 3\n    # 3\n    # 3\n\n    ans = []\n    for i in range(len(a)):\n        if i == 0:\n            if a[i+1] > a[i]:\n                ans.append('L')\n            else:\n                ans.append('R')\n        elif i == len(a)-1:\n            if a[i-1] > a[i]:\n                ans.append('L')\n            else:\n                ans.append('R')\n        else:\n            if a[i-1] > a[i]:\n                ans.append('L')\n            else:\n                ans.append('R')\n    print(ans)\n    print(len(ans))\n    print(''.join(ans))\n\nif __name__ == '__main__':\n    main()", "\n\n# TODO:\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(n)\n\n\nif __name__ == '__main__':\n    main()", "\n\n# Solution\n\n# Solution approach\n'''\nIterate over the array, keeping track of the max value seen so far.\nIf the current element is greater than the max value, increment the answer\nand update the max value.\n\nNow, the array is sorted in decreasing order.\nIterate over the array again, keeping track of the max value seen so far.\nIf the current element is greater than the max value, increment the answer\nand update the max value.\n\nIf there are multiple answers, you can print any.\n'''\n\n\n# Code\n## Read input as specified in the question.\n## Print output as specified in the question.\nn = int(input())\na = [int(x) for x in input().strip().split(' ')]\n\nmax_val = -1\nans = 0\n\nfor i in range(n):\n    if a[i] > max_val:\n        max_val = a[i]\n        ans += 1\n\na.sort(reverse=True)\n\nmax_val = -1\n\nfor i in range(n):\n    if a[i] > max_val:\n        max_val = a[i]\n        ans += 1\n\nprint(ans)\n\nfor i in range(n):\n    if a[i] > max_val:\n        print(\"L\", end='')\n        max_val = a[i]\n    else:\n        print(\"R\", end='')", "\n\ndef get_max_increase_sequence(a):\n    \"\"\"\n    >>> get_max_increase_sequence([1, 2, 4, 3, 2])\n    (4, 'LRRR')\n    >>> get_max_increase_sequence([1, 3, 5, 6, 5, 4, 2])\n    (6, 'LRLRRR')\n    >>> get_max_increase_sequence([2, 2, 2])\n    (1, 'R')\n    >>> get_max_increase_sequence([1, 2, 4, 3])\n    (4, 'LLRR')\n    \"\"\"\n    n = len(a)\n    l = [0] * n\n    r = [0] * n\n    l[0] = 1\n    r[n - 1] = 1\n    for i in range(1, n):\n        l[i] = l[i - 1]\n        if a[i] > a[i - 1]:\n            l[i] += 1\n        r[n - i - 1] = r[n - i]\n        if a[n - i - 1] < a[n - i]:\n            r[n - i - 1] += 1\n    m = 0\n    res = ''\n    for i in range(n):\n        if l[i] + r[i] - 1 > m:\n            m = l[i] + r[i] - 1\n            res = 'L' * l[i] + 'R' * (r[i] - 1)\n    return m, res\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\nimport sys\nn=int(sys.stdin.readline())\na=[int(i) for i in sys.stdin.readline().split()]\n\nl=[]\nr=[]\nans=[]\n\nfor i in a:\n    if len(l)==0 or i>l[-1]:\n        l.append(i)\n    else:\n        r.append(i)\n\nwhile len(l)>0:\n    ans.append(l.pop())\n    if len(r)>0:\n        ans.append(r.pop())\n\nprint(len(ans))\nfor i in ans:\n    if i==l[-1]:\n        print(\"L\",end=\"\")\n    else:\n        print(\"R\",end=\"\")", "\n\nimport sys\n\ndef solve(a):\n    n = len(a)\n    l = []\n    r = []\n    for i in range(n):\n        if l and a[i] <= l[-1]:\n            l.append(a[i])\n        else:\n            l.append(l[-1])\n        if r and a[n-i-1] <= r[-1]:\n            r.append(a[n-i-1])\n        else:\n            r.append(r[-1])\n    r = r[::-1]\n    l = l[::-1]\n    #print(l, r)\n    ans = 0\n    s = \"\"\n    for i in range(n):\n        if l[i] < r[i]:\n            ans += 1\n            s += 'L'\n        elif l[i] > r[i]:\n            ans += 1\n            s += 'R'\n        else:\n            if i == n-1:\n                ans += 1\n                s += 'R'\n            else:\n                ans += 2\n                s += 'LR'\n    return ans, s\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans, s = solve(a)\n    print(ans)\n    print(s)\n\nif __name__ == '__main__':\n    main()"]