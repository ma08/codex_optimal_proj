["\n\nN,M,X = list(map(int, input().split()))\nC = []\nA = []\nfor i in range(N):\n    c, a = list(map(int, input().split()))\n    C.append(c)\n    A.append(a)\n\n#dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u672c\u3092\u8aad\u3093\u3067\u3001j\u756a\u76ee\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u6700\u5c0f\u306e\u304a\u91d1\n#dp[i][j] = min(dp[i-1][j], dp[i-1][j-a[i][j]]+c[i])\ndp = [[float('inf')]*(M+1) for i in range(N+1)]\ndp[0][0] = 0\nfor i in range(1,N+1):\n    for j in range(M+1):\n        if j == 0:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = min(dp[i-1][j], dp[i-1][j-A[i-1][j-1]]+C[i-1])\n\nif dp[N][M] == float('inf'):\n    print('-1')\nelse:\n    print(dp[N][M])", "\n\nimport heapq\n\ndef main():\n    N,M,X = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    C = [int(input()) for _ in range(N)]\n\n    dp = [float(\"inf\")] * (2**M)\n    dp[0] = 0\n    for i in range(N):\n        _dp = dp.copy()\n        for j in range(2**M):\n            for k in range(M):\n                if A[i][k] + (j >> k) % 2 >= X:\n                    heapq.heappush(_dp, dp[j] + C[i])\n        dp = _dp\n\n    if dp[-1] == float(\"inf\"):\n        print(-1)\n    else:\n        print(dp[-1])\n\n\nif __name__ == \"__main__\":\n    main()", "\nN,M,X = list(map(int,input().split()))\n\nA = [list(map(int,input().split())) for _ in range(N)]\nC = list(map(int,input().split()))\n\ninf = 10**18\nans = inf\nfor i in range(2**N):\n    cost = 0\n    algo = [0]*M\n    for j in range(N):\n        if (i>>j)&1:\n            cost += C[j]\n            for k in range(M):\n                algo[k]+=A[j][k]\n    if all(x>=X for x in algo):\n        ans = min(ans,cost)\n\nif ans==inf:\n    print(-1)\nelse:\n    print(ans)", "\n\ndef main():\n    N, M, X=map(int, input().split())\n    A=[]\n    C=[]\n    for _ in range(N):\n        A.append(list(map(int, input().split())))\n    for _ in range(N):\n        C.append(int(input()))\n    inf=float(\"inf\")\n    dp=[[[inf for _ in range(X+1)] for _ in range(M+1)] for _ in range(N+1)]\n    dp[0][0][0]=0\n    for i in range(N):\n        for j in range(M):\n            for k in range(X):\n                if dp[i][j][k]==inf:\n                    continue\n                dp[i+1][j][k]=min(dp[i+1][j][k], dp[i][j][k])\n                dp[i+1][j+1][k+A[i][j]]=min(dp[i+1][j+1][k+A[i][j]], dp[i][j][k]+C[i])\n    ans=inf\n    for i in range(M):\n        ans=min(ans, dp[N][i][X-1])\n    if ans==inf:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__==\"__main__\":\n    main()", "\n\nN,M,X = map(int,input().split())\n\nA = [list(map(int,input().split())) for _ in range(N)]\n\nC = [int(input()) for _ in range(N)]\n\nINF = 10**9\n\ndp = [INF for _ in range(2**N)]\n\ndp[0] = 0\n\nfor s in range(2**N):\n    for i in range(N):\n        if s>>i&1:\n            continue\n        flag = True\n        for j in range(M):\n            if dp[s|1<<i] > dp[s]+C[i] and dp[s]+C[i] < INF:\n                dp[s|1<<i] = dp[s]+C[i]\n            if dp[s|1<<i] < INF and dp[s|1<<i]+A[i][j] < X:\n                flag = False\n        if flag:\n            print(dp[s|1<<i])\n            exit()\n\nprint(-1)", "\n\n\ndef main():\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    x = list(map(int, input().split()))\n\n    # \u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b8c\u74a7\u306b\u7406\u89e3\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u672c\u306e\u6570\n    need = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > 0:\n                need[j] += 1\n\n    # \u5404\u672c\u306e\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7406\u89e3\u5ea6\u306e\u5408\u8a08\n    total = [0] * m\n    for i in range(n):\n        for j in range(m):\n            total[j] += a[i][j]\n\n    # \u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3001\u5b8c\u74a7\u306b\u7406\u89e3\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u672c\u306e\u6570\u3092\u8d85\u3048\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    for i in range(m):\n        if total[i] < x[i]:\n            print(-1)\n            return\n\n    # \u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3001\u5b8c\u74a7\u306b\u7406\u89e3\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u672c\u306e\u6570\u306b\u9054\u3059\u308b\u307e\u3067\u3001\u4fa1\u683c\u304c\u6700\u3082\u4f4e\u3044\u672c\u3092\u8cb7\u3046\n    ans = 0\n    for i in range(m):\n        cost = [0] * n\n        for j in range(n):\n            cost[j] = c[j] // a[j][i]\n        index = cost.index(min(cost))\n        ans += c[index]\n        # \u5b8c\u74a7\u306b\u7406\u89e3\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u672c\u306e\u6570\u306b\u9054\u3059\u308b\u307e\u3067\u3001\u4fa1\u683c\u304c\u6700\u3082\u4f4e\u3044\u672c\u3092\u8cb7\u3046\n        for j in range(need[i] - 1):\n            c[index] += a[index][i]\n            ans += c[index]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()", "\n\nN,M,X=map(int,input().split())\nC=[]\nA=[]\nfor i in range(N):\n    c,*a=map(int,input().split())\n    C.append(c)\n    A.append(a)\n\nINF=10**18\ndp=[[INF for _ in range(M+1)] for _ in range(N+1)]\ndp[0][0]=0\n\nfor i in range(N):\n    for j in range(M+1):\n        if j==0:\n            dp[i+1][j]=min(dp[i+1][j],dp[i][j]+C[i])\n        else:\n            if dp[i][j-1]<=X:\n                dp[i+1][j]=min(dp[i+1][j],dp[i][j-1]+C[i])\n            else:\n                dp[i+1][j]=min(dp[i+1][j],dp[i][j]+C[i])\n\nans=INF\nfor i in range(M+1):\n    if dp[N][i]<=X:\n        ans=min(ans,dp[N][i])\n\nif ans==INF:\n    print(-1)\nelse:\n    print(ans)", "\n\n# Input\nN, M, X = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(N)]\nC = list(map(int, input().split()))\n\n# Solve\nINF = float('inf')\ndp = [INF] * (2 ** M)\ndp[0] = 0\nfor s in range(2 ** M):\n    for i in range(N):\n        n_s = s\n        for j in range(M):\n            if s >> j & 1 == 0 and A[i][j] > 0:\n                n_s += 2 ** j\n        dp[n_s] = min(dp[n_s], dp[s] + C[i])\n\nans = dp[-1]\nif ans == INF:\n    print(-1)\nelse:\n    print(ans)"]