2022-04-19 23:24:01.025546 """
You are given an array $s$ consisting of $n$ integers.

You have to find any array $t$ of length $k$ such that you can cut out maximum number of copies of array $t$ from array $s$.

Cutting out the copy of $t$ means that for each element $t_i$ of array $t$ you have to find $t_i$ in $s$ and remove it from $s$. If for some $t_i$ you cannot find such element in $s$, then you cannot cut out one more copy of $t$. The both arrays can contain duplicate elements.

For example, if $s = [1, 2, 3, 2, 4, 3, 1]$ and $k = 3$ then one of the possible answers is $t = [1, 2, 3]$. This array $t$ can be cut out $2$ times.   To cut out the first copy of $t$ you can use the elements $[1, \underline{\textbf{2}}, 3, 2, 4, \underline{\textbf{3}}, \underline{\textbf{1}}]$ (use the highlighted elements). After cutting out the first copy of $t$ the array $s$ can look like $[1, 3, 2, 4]$.  To cut out the second copy of $t$ you can use the elements $[\underline{\textbf{1}}, \underline{\textbf{3}}, \underline{\textbf{2}}, 4]$. After cutting out the second copy of $t$ the array $s$ will be $[4]$. 

Your task is to find such array $t$ that you can cut out the copy of $t$ from $s$ maximum number of times. If there are multiple answers, you may choose any of them.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 2 \cdot 10^5$) — the number of elements in $s$ and the desired number of elements in $t$, respectively.

The second line of the input contains exactly $n$ integers $s_1, s_2, \dots, s_n$ ($1 \le s_i \le 2 \cdot 10^5$).


-----Output-----

Print $k$ integers — the elements of array $t$ such that you can cut out maximum possible number of copies of this array from $s$. If there are multiple answers, print any of them. The required array $t$ can contain duplicate elements. All the elements of $t$ ($t_1, t_2, \dots, t_k$) should satisfy the following condition: $1 \le t_i \le 2 \cdot 10^5$.


-----Examples-----
Input
7 3
1 2 3 2 4 3 1

Output
1 2 3 

Input
10 4
1 3 1 3 10 3 7 7 12 3

Output
7 3 1 3

Input
15 2
1 2 1 1 1 2 1 1 2 1 2 1 1 1 1

Output
1 1 



-----Note-----

The first example is described in the problem statement.

In the second example the only answer is $[7, 3, 1, 3]$ and any its permutations. It can be shown that you cannot choose any other array such that the maximum number of copies you can cut out would be equal to $2$.

In the third example the array $t$ can be cut out $5$ times.
"""
2022-04-19 23:24:01.025562 --------------------------
2022-04-19 23:24:01.025662 using api key sourya
2022-04-19 23:24:42.816595 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    s = [int(x) for x in input().split()]\n    d = dict()\n    for x in s:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    t = []\n    for i in range(k):\n        m = 0\n        for x in d:\n            if d[x] > m:\n                m = d[x]\n                y = x\n        t.append(y)\n        d[y] = 0\n    print(' '.join([str(x) for x in t]))\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    input_list = sys.stdin.readlines()\n    #input_list = [\"15 2\\n\", \"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\\n\"]\n    #input_list = [\"10 4\\n\", \"1 3 1 3 10 3 7 7 12 3\\n\"]\n    #input_list = [\"7 3\\n\", \"1 2 3 2 4 3 1\\n\"]\n    input_list = [x.strip() for x in input_list]\n    input_list = [[int(y) for y in x.split()] for x in input_list]\n    print(input_list)\n    #print(input_list)\n    n = input_list[0][0]\n    k = input_list[0][1]\n    s = input_list[1]\n    #print(n, k, s)\n    #print(s)\n    d = {}\n    for i in s:\n        if i in d: d[i] += 1\n        else: d[i] = 1\n    #print(d)\n    d = sorted(d.items(), key = lambda x: x[1], reverse = True)\n    #print(d)\n    answer = [d[i][0] for i in range(k)]\n    print(' '.join(str(x) for x in answer))\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = [0 for i in range(200001)]\n    for i in range(n):\n        dp[a[i]] += 1\n    for i in range(1, 200001):\n        dp[i] += dp[i-1]\n    ans = []\n    for i in range(k):\n        if dp[a[n-i-1]] - dp[a[n-i-1]-1] > 0:\n            ans.append(a[n-i-1])\n            dp[a[n-i-1]] -= 1\n        else:\n            j = n-i-1\n            while j >= 0 and dp[a[j]] - dp[a[j]-1] == 0:\n                j -= 1\n            ans.append(a[j])\n            dp[a[j]] -= 1\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport numpy as np\n\ndef solution(n, k, s):\n    d = {}\n    for i in range(n):\n        if s[i] in d:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    d = sorted(d.items(), key = lambda x: x[1], reverse = True)\n    t = []\n    for i in range(k):\n        t.append(d[i][0])\n    return t\n\nn, k = [int(x) for x in input().split()]\ns = [int(x) for x in input().split()]\n\nt = solution(n, k, s)\nprint(*t)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    t = [0 for _ in range(k)]\n    for i in range(k):\n        t[i] = max(s)\n        s.remove(t[i])\n\n    print(\" \".join(map(str, t)))\n\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef find_max_indices(l, max_size):\n    l_size = len(l)\n    indices = []\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices.append(i)\n        else:\n            min_index = min(indices)\n            if l[i] > l[min_index]:\n                indices.remove(min_index)\n                indices.append(i)\n    return indices\n\n\ndef find_max_indices_dict(l, max_size):\n    l_size = len(l)\n    indices = {}\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices[i] = l[i]\n        else:\n            min_index = min(indices, key=indices.get)\n            if l[i] > indices[min_index]:\n                del indices[min_index]\n                indices[i] = l[i]\n    return indices\n\n\ndef find_max_indices_dict_sorted(l, max_size):\n    l_size = len(l)\n    indices = {}\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices[i] = l[i]\n        else:\n            for j in sorted(indices, key=indices.get):\n                if l[i] > indices[j]:\n                    del indices[j]\n                    indices[i] = l[i]\n                    break\n    return indices\n\n\ndef find_max_indices_dict_sorted_bisect(l, max_size):\n    l_size = len(l)\n    indices = {}\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices[i] = l[i]\n        else:\n            for j in sorted(indices, key=indices.get):\n                if l[i] > indices[j]:\n                    del indices[j]\n                    indices[i] = l[i]\n                    break\n    return indices\n\n\ndef find_max_indices_dict_sorted_bisect_bis(l, max_size):\n    l_size = len(l)\n    indices = {}\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices[i] = l[i]\n        else:\n            for j in sorted(indices, key=indices.get):\n                if l[i] > indices[j]:\n                    del indices[j]\n                    indices[i] = l[i]\n                    break\n    return indices\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    s_count = Counter(s)\n    s_max = max(s_count.values())\n    s_max_indices = find_max_indices(s_count.values(), k)\n    s_max_indices_dict = find_max_indices_dict(s_count.values(), k)\n    s_max_indices_dict_sorted = find_max_indices_dict_sorted(s_count.values(), k)\n    s_max_indices_dict_sorted_bisect = find_max_indices_dict_sorted_bisect(s_count.values(), k)\n    s_max_indices_dict_sorted_bisect_bis = find_max_indices_dict_sorted_bisect_bis(s_count.values(), k)\n    print(s_max_indices_dict_sorted_bisect_bis)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# Solution\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\n\ncounts = {}\nfor x in s:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n\nsorted_counts = sorted(counts.items(), key=lambda kv: kv[1], reverse=True)\n\nfor i in range(k):\n    print(sorted_counts[i][0], end=' ')"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n#https://codeforces.com/gym/101958/problem/C\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\n\nfrom collections import Counter\n\nc = Counter(s)\n\nfor i in range(k):\n    print(c.most_common()[0][0])\n    c[c.most_common()[0][0]] -= 1"
    }
  ],
  "created": 1650410641,
  "id": "cmpl-4yrUPl07AlApfEUYUVwof0Il0ulXi",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 23:24:42.817069 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    s = [int(x) for x in input().split()]\n    d = dict()\n    for x in s:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    t = []\n    for i in range(k):\n        m = 0\n        for x in d:\n            if d[x] > m:\n                m = d[x]\n                y = x\n        t.append(y)\n        d[y] = 0\n    print(' '.join([str(x) for x in t]))\n\nmain()"
}
2022-04-19 23:24:42.817115 REASON stop
2022-04-19 23:24:42.817710 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    input_list = sys.stdin.readlines()\n    #input_list = [\"15 2\\n\", \"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\\n\"]\n    #input_list = [\"10 4\\n\", \"1 3 1 3 10 3 7 7 12 3\\n\"]\n    #input_list = [\"7 3\\n\", \"1 2 3 2 4 3 1\\n\"]\n    input_list = [x.strip() for x in input_list]\n    input_list = [[int(y) for y in x.split()] for x in input_list]\n    print(input_list)\n    #print(input_list)\n    n = input_list[0][0]\n    k = input_list[0][1]\n    s = input_list[1]\n    #print(n, k, s)\n    #print(s)\n    d = {}\n    for i in s:\n        if i in d: d[i] += 1\n        else: d[i] = 1\n    #print(d)\n    d = sorted(d.items(), key = lambda x: x[1], reverse = True)\n    #print(d)\n    answer = [d[i][0] for i in range(k)]\n    print(' '.join(str(x) for x in answer))\n\nmain()"
}
2022-04-19 23:24:42.817781 REASON stop
2022-04-19 23:24:42.818176 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = [0 for i in range(200001)]\n    for i in range(n):\n        dp[a[i]] += 1\n    for i in range(1, 200001):\n        dp[i] += dp[i-1]\n    ans = []\n    for i in range(k):\n        if dp[a[n-i-1]] - dp[a[n-i-1]-1] > 0:\n            ans.append(a[n-i-1])\n            dp[a[n-i-1]] -= 1\n        else:\n            j = n-i-1\n            while j >= 0 and dp[a[j]] - dp[a[j]-1] == 0:\n                j -= 1\n            ans.append(a[j])\n            dp[a[j]] -= 1\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 23:24:42.818230 REASON stop
2022-04-19 23:24:42.837483 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport numpy as np\n\ndef solution(n, k, s):\n    d = {}\n    for i in range(n):\n        if s[i] in d:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    d = sorted(d.items(), key = lambda x: x[1], reverse = True)\n    t = []\n    for i in range(k):\n        t.append(d[i][0])\n    return t\n\nn, k = [int(x) for x in input().split()]\ns = [int(x) for x in input().split()]\n\nt = solution(n, k, s)\nprint(*t)"
}
2022-04-19 23:24:42.837635 REASON stop
2022-04-19 23:24:42.851256 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    t = [0 for _ in range(k)]\n    for i in range(k):\n        t[i] = max(s)\n        s.remove(t[i])\n\n    print(\" \".join(map(str, t)))\n\n\nmain()"
}
2022-04-19 23:24:42.851401 REASON stop
2022-04-19 23:24:42.853008 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef find_max_indices(l, max_size):\n    l_size = len(l)\n    indices = []\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices.append(i)\n        else:\n            min_index = min(indices)\n            if l[i] > l[min_index]:\n                indices.remove(min_index)\n                indices.append(i)\n    return indices\n\n\ndef find_max_indices_dict(l, max_size):\n    l_size = len(l)\n    indices = {}\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices[i] = l[i]\n        else:\n            min_index = min(indices, key=indices.get)\n            if l[i] > indices[min_index]:\n                del indices[min_index]\n                indices[i] = l[i]\n    return indices\n\n\ndef find_max_indices_dict_sorted(l, max_size):\n    l_size = len(l)\n    indices = {}\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices[i] = l[i]\n        else:\n            for j in sorted(indices, key=indices.get):\n                if l[i] > indices[j]:\n                    del indices[j]\n                    indices[i] = l[i]\n                    break\n    return indices\n\n\ndef find_max_indices_dict_sorted_bisect(l, max_size):\n    l_size = len(l)\n    indices = {}\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices[i] = l[i]\n        else:\n            for j in sorted(indices, key=indices.get):\n                if l[i] > indices[j]:\n                    del indices[j]\n                    indices[i] = l[i]\n                    break\n    return indices\n\n\ndef find_max_indices_dict_sorted_bisect_bis(l, max_size):\n    l_size = len(l)\n    indices = {}\n    for i in range(l_size):\n        if len(indices) < max_size:\n            indices[i] = l[i]\n        else:\n            for j in sorted(indices, key=indices.get):\n                if l[i] > indices[j]:\n                    del indices[j]\n                    indices[i] = l[i]\n                    break\n    return indices\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    s_count = Counter(s)\n    s_max = max(s_count.values())\n    s_max_indices = find_max_indices(s_count.values(), k)\n    s_max_indices_dict = find_max_indices_dict(s_count.values(), k)\n    s_max_indices_dict_sorted = find_max_indices_dict_sorted(s_count.values(), k)\n    s_max_indices_dict_sorted_bisect = find_max_indices_dict_sorted_bisect(s_count.values(), k)\n    s_max_indices_dict_sorted_bisect_bis = find_max_indices_dict_sorted_bisect_bis(s_count.values(), k)\n    print(s_max_indices_dict_sorted_bisect_bis)"
}
2022-04-19 23:24:42.853122 REASON stop
2022-04-19 23:24:42.853882 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# Solution\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\n\ncounts = {}\nfor x in s:\n    if x in counts:\n        counts[x] += 1\n    else:\n        counts[x] = 1\n\nsorted_counts = sorted(counts.items(), key=lambda kv: kv[1], reverse=True)\n\nfor i in range(k):\n    print(sorted_counts[i][0], end=' ')"
}
2022-04-19 23:24:42.853974 REASON stop
2022-04-19 23:24:42.855627 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n#https://codeforces.com/gym/101958/problem/C\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\n\nfrom collections import Counter\n\nc = Counter(s)\n\nfor i in range(k):\n    print(c.most_common()[0][0])\n    c[c.most_common()[0][0]] -= 1"
}
2022-04-19 23:24:42.855832 REASON stop
