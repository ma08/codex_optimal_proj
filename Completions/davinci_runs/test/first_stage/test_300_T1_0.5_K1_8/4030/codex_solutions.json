["\n\n# SOLUTION\nn = int(input())\ns = input()\n\ncolors = [1] * n\n\nfor i in range(1, n):\n    if s[i] == s[i-1]:\n        colors[i] = colors[i-1]\n    else:\n        colors[i] = colors[i-1] + 1\n\nprint(colors[-1])\nprint(*colors)", "\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\n# count the number of each character\n# if there are more than 2 characters, the answer is 2\n# if there are 2 characters, the answer is 1\n# if there is 1 character, the answer is 1\n# in any case, the answer is the number of distinct characters\n\nc = Counter(s)\n\nif len(c) == 1:\n    print(1)\n    print(' '.join([str(1)] * n))\nelif len(c) == 2:\n    print(1)\n    for i in range(n):\n        if c[s[i]] == 1:\n            print(2, end=' ')\n        else:\n            print(1, end=' ')\n    print()\nelse:\n    print(2)\n    for i in range(n):\n        if c[s[i]] == 1:\n            print(2, end=' ')\n        else:\n            print(1, end=' ')\n    print()", "\n\nn = int(input())\ns = input()\n\n# Because we can swap any two neighboring characters of the string that are colored different colors.\n# We can just sort the string by character.\n# Then we can color the string by the sorted order.\ns = sorted(s)\n\n# Because we can swap any two neighboring characters of the string that are colored different colors.\n# We can just color the string by the sorted order.\n# Then we can sort the string by color.\nc = [0] * n\nfor i in range(n):\n    c[i] = s.index(s[i]) + 1\n\nprint(max(c))\nprint(*c)", "\n\n#-----SOLUTION-----\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\ns = input()\n\nans = [1] * n\nfor i in range(1, n):\n    if s[i] == s[i-1]:\n        ans[i] = ans[i-1]\n    else:\n        ans[i] = ans[i-1] + 1\nprint(max(ans))\nprint(*ans)", "\n\nimport sys\n\ndef main():\n    \"\"\"\n    The main function that reads input and calls the other functions\n    \"\"\"\n    n = int(sys.stdin.readline())\n    string = sys.stdin.readline().rstrip()\n    solution = string_sorting(n, string)\n    print(len(solution))\n    print(*solution)\n\ndef string_sorting(n, string):\n    \"\"\"\n    Takes the number of characters and the string and returns the solution\n    \"\"\"\n    solution = [1]\n    for i in range(1, n):\n        if string[i] != string[i - 1]:\n            solution.append(solution[i - 1] + 1)\n        else:\n            solution.append(solution[i - 1])\n    return solution\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\ns = input()\n\nc = [0] * n\nres = 1\nprev = s[0]\nfor i, v in enumerate(s):\n    if v == prev:\n        c[i] = c[i - 1]\n    else:\n        c[i] = c[i - 1] + 1\n        res = c[i]\n    prev = v\n\n\nprint(res)\nprint(*c)", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n\n    # the sorted string and the number of swaps needed to sort it\n    sorted_str, num_swaps = sort_string(s)\n\n    # the minimum number of colors needed to sort the string\n    min_colors = len(set(sorted_str))\n\n    # the coloring of the string\n    coloring = get_coloring(sorted_str, min_colors)\n\n    # print the results\n    print(min_colors)\n    print(' '.join(map(str, coloring)))\n\n\ndef sort_string(s):\n    \"\"\"\n    Returns the sorted string and the number of swaps needed to sort it.\n    \"\"\"\n    # the sorted string\n    sorted_str = sorted(s)\n\n    # the number of swaps needed to sort it\n    num_swaps = 0\n\n    # the number of swaps needed to sort the string\n    # will be the sum of the distances of each letter to its sorted position\n    for i in range(len(s)):\n        num_swaps += abs(i - sorted_str.index(s[i]))\n\n    return (sorted_str, num_swaps)\n\n\ndef get_coloring(sorted_str, min_colors):\n    \"\"\"\n    Returns the coloring of the string.\n    \"\"\"\n    # the coloring of the string\n    coloring = [None] * len(sorted_str)\n\n    # the color of the current letter\n    curr_color = 1\n\n    # the first letter of the current color\n    first_letter = sorted_str[0]\n\n    # the color of the first letter\n    coloring[0] = curr_color\n\n    # iterate through the sorted string\n    for i in range(1, len(sorted_str)):\n        # if the current letter is the same as the first letter of the current color\n        if sorted_str[i] == first_letter:\n            # increment the current color\n            curr_color = (curr_color + 1) % min_colors\n            # if the current color is 0, set it to the minimum color\n            if curr_color == 0:\n                curr_color = min_colors\n            # set the first letter of the current color to the current letter\n            first_letter = sorted_str[i]\n        # set the color of the current letter to the current color\n        coloring[i] = curr_color\n\n    return coloring\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom collections import defaultdict\n\ndef main():\n    n = int(input())\n    s = input()\n\n    # count the number of times each character appears\n    counts = defaultdict(int)\n    for c in s:\n        counts[c] += 1\n\n    # build the coloring\n    coloring = []\n    for c in s:\n        if counts[c] == 0:\n            continue\n        counts[c] -= 1\n        coloring.append(c)\n    print(len(coloring))\n    print(*coloring)\n\n\nif __name__ == \"__main__\":\n    main()"]