["\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n\"\"\"\ndp[i][j] means the maximum total profit, if we solve the first i problems in j days.\n\ndp[i][j] = max(dp[i-1][j], max(dp[i-k][j-1], dp[i-k-1][j-1], ..., dp[i-2][j-1], dp[i-1][j-1]) + max(a[i-k], a[i-k+1], ..., a[i-1]))\n\"\"\"\ndp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\n# max_sum[i] means the maximum sum of the last i numbers.\nmax_sum = [0 for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    max_sum[i] = max(max_sum[i-1], 0) + a[i-1]\n    for j in range(1, k+1):\n        if i >= j:\n            dp[i][j] = max(dp[i-1][j], max_sum[i] - max_sum[i-j])\n\nans = dp[n][k]\n\nres = [0 for _ in range(k)]\ni, j = n, k\nwhile i > 0:\n    while i >= j and dp[i][j] == dp[i-1][j]:\n        i -= 1\n    if i < j:\n        break\n    res[j-1] += 1\n    i -= j\n\nprint(ans)\nprint(' '.join(map(str, res)))", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n+1)\nfor i in range(n):\n    dp[i+1] = max(dp[i], a[i])\n\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i], dp[i+1])\n\ndp = [0] + dp\n\ndp2 = [0] * (n+1)\nfor i in range(1, n+1):\n    dp2[i] = dp2[i-1] + dp[i]\n\nif k == 1:\n    print(dp2[n])\n    print(n)\nelse:\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            dp[i] = max(dp[i], dp2[j] - dp2[i-1])\n    dp = [0] + dp\n\n    dp2 = [0] * (n+1)\n    for i in range(1, n+1):\n        dp2[i] = dp2[i-1] + dp[i]\n\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            dp[i] = max(dp[i], dp2[j] - dp2[i-1])\n    dp = [0] + dp\n\n    dp2 = [0] * (n+1)\n    for i in range(1, n+1):\n        dp2[i] = dp2[i-1] + dp[i]\n\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            dp[i] = max(dp[i], dp2[j] - dp2[i-1])\n    dp = [0] + dp\n\n    for i in range(n-1, -1, -1):\n        dp[i] = max(dp[i], dp[i+1])\n\n    print(dp[1])\n\n    curr = 1\n    while k > 0:\n        if k == 1:\n            print(n-curr+1)\n            break\n        else:\n            for i in range(curr+1, n+1):\n                if dp[curr] == dp[i+1] + dp2[i] - dp2[curr-1]:\n                    print(i-curr+1)\n                    curr = i+1\n                    k -= 1\n                    break", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * (n + 1) for _ in range(k + 1)]\n\nfor i in range(1, k + 1):\n    for j in range(n + 1):\n        if j == 0:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n            for p in range(1, j + 1):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - p] + max(a[j - p:j]))\n\nprint(dp[k][n])\n\nans = []\nj = n\ni = k\nwhile i > 0:\n    if dp[i][j] != dp[i - 1][j]:\n        for p in range(1, j + 1):\n            if dp[i - 1][j - p] + max(a[j - p:j]) == dp[i][j]:\n                ans.append(p)\n                j -= p\n                break\n    else:\n        ans.append(0)\n    i -= 1\n\nprint(*ans[::-1])", "\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(1,n+1):\n        dp[1][i] = sum(a[:i])\n    for i in range(2,k+1):\n        for j in range(i,n+1):\n            dp[i][j] = max(dp[i][j-1],dp[i-1][j-1]+a[j-1])\n    for i in range(k,0,-1):\n        for j in range(n,0,-1):\n            if dp[i][j] != dp[i][j-1]:\n                print(j-1,end=' ')\n                break\n    print()\n    print(dp[k][n])\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i] = max profit for the first i problems,\n    # where the last problem is the last problem of the last day\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        # [i - k, i] is the last k problems\n        # dp[i - k - 1] is the max profit for the first i - k - 1 problems,\n        # where the last problem is the last problem of the last day\n        # dp[i - k] is the max profit for the first i - k problems,\n        # where the last problem is the last problem of the last day\n        # so dp[i - k - 1] <= dp[i - k]\n        dp[i] = max(dp[i - k - 1], dp[i - k]) + max(a[i - k:i])\n\n    # print(dp)\n    print(dp[n])\n\n    # reconstruct the order of the problems\n    # that gives the max profit\n    # (if there are multiple answers, this will be one of them)\n    ans = []\n    i = n\n    while i > 0:\n        if dp[i - 1] < dp[i]:\n            ans.append(i - k)\n            i -= k\n        else:\n            i -= 1\n    ans.reverse()\n    k = 0\n    for i in range(1, len(ans)):\n        print(ans[i] - ans[i - 1], end=' ')\n    print(n - ans[-1])\n\nif __name__ == '__main__':\n    main()", "\n\ndef solve(arr, k):\n    if k == 1:\n        return sum(arr)\n    if k == len(arr):\n        return max(arr)\n    dp = [[0 for _ in range(len(arr)+1)] for _ in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(i, len(arr)+1):\n            if i == 1:\n                dp[i][j] = sum(arr[:j])\n            else:\n                m = 0\n                for l in range(j-1, i-2, -1):\n                    m = max(m, dp[i-1][l])\n                    dp[i][j] = max(dp[i][j], m+sum(arr[l:j]))\n    return dp[k][len(arr)]\n\ndef main():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(arr, k))\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef solve(n, k, a):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    s = [0] * (n + 1)\n    for i in range(1, n + 1):\n        s[i] = s[i - 1] + a[i - 1]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j > i:\n                continue\n            dp[i][j] = dp[i - 1][j]\n            for l in range(j - 1, i):\n                dp[i][j] = max(dp[i][j], dp[l][j - 1] + s[i] - s[l])\n    return dp[n][k]\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))\n\n\nif __name__ == '__main__':\n    main()"]