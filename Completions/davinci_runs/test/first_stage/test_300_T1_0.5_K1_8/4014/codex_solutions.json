["", "\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c))\n    exams.sort()\n    ans = [0] * n\n    for i, exam in enumerate(exams):\n        s, d, c = exam\n        if d - s < c:\n            return -1\n        for j in range(s, d - c):\n            if ans[j] == 0:\n                ans[j] = i + 1\n            else:\n                return -1\n        for j in range(d - c, d):\n            if ans[j] == 0:\n                ans[j] = m + 1\n            else:\n                return -1\n    return ' '.join(map(str, ans))\n\nprint(main())", "\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, input().split())))\n    exams.sort(key=lambda x: x[1])\n    days = [0] * n\n    for exam in exams:\n        days[exam[1]-1] = m + 1\n        for i in range(exam[0] - 1, exam[0] + exam[2] - 1):\n            if days[i] == 0:\n                days[i] = exam[0]\n            else:\n                if days[i] != exam[0]:\n                    print(-1)\n                    return\n    print(' '.join(map(str, days)))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    \"\"\"\n    \u601d\u8def\uff1a\u4ece\u7b2c\u4e00\u5929\u5f00\u59cb\uff0c\u904d\u5386\u6bcf\u4e00\u5929\uff0c\u6bcf\u4e00\u5929\u53ea\u80fd\u6709\u4e00\u4e2a\u6d3b\u52a8\uff0c\u5373\u8003\u8bd5\u3001\u4f11\u606f\u3001\u51c6\u5907\u8003\u8bd5\uff0c\u5176\u4e2d\u8003\u8bd5\u65e5\u671f\u548c\u51c6\u5907\u8003\u8bd5\u65e5\u671f\u90fd\u662f\u5df2\u77e5\u7684\uff0c\n    \u53ea\u8981\u6bcf\u5929\u53ea\u6709\u4e00\u4e2a\u6d3b\u52a8\uff0c\u7136\u540e\u628a\u6bcf\u5929\u7684\u6d3b\u52a8\u8bb0\u5f55\u4e0b\u6765\uff0c\u6700\u540e\u770b\u6bcf\u4e00\u4e2a\u8003\u8bd5\u662f\u5426\u90fd\u53ef\u4ee5\u51c6\u5907\u597d\u3002\n    \"\"\"\n    n, m = map(int, input().split())\n    days = [0] * n\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        for j in range(s-1, d-1):\n            if days[j] == 0:\n                days[j] = c\n            elif days[j] != c:\n                print(-1)\n                return\n\n    for i in range(n):\n        if days[i] == 0:\n            days[i] = m+1\n        else:\n            days[i] = days[i]\n    print(*days)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c))\n\n    exams.sort()\n    schedule = [0] * n\n    for s, d, c in exams:\n        for i in range(s, d):\n            if schedule[i]:\n                print(-1)\n                return\n            schedule[i] = c\n\n    print(*schedule)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    result = [0] * n\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c))\n    exams.sort(key=lambda x: x[1])\n    for i in range(m):\n        s, d, c = exams[i]\n        days_left = c\n        for j in range(s - 1, d):\n            if result[j] == 0:\n                result[j] = i + 1\n                days_left -= 1\n        if days_left > 0:\n            print(-1)\n            exit()\n    for i in range(m):\n        s, d, c = exams[i]\n        for j in range(s - 1, d):\n            if result[j] == i + 1:\n                result[j] = m + 1\n    print(*result)", "\n\nfrom collections import defaultdict\n\nclass Graph(object):\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.graph = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n\n    def _dfs(self, u, visited):\n        stack = [u]\n        while stack:\n            u = stack.pop()\n            if u not in visited:\n                visited.add(u)\n                stack.extend(self.graph[u])\n        return visited\n\n    def is_cyclic(self):\n        visited = set()\n\n        for u in self.graph:\n            if u not in visited:\n                visited = self._dfs(u, visited)\n        return len(visited) != self.n + self.m + 2\n\n\ndef main():\n    n, m = map(int, input().split())\n    g = Graph(n, m)\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        g.add_edge(0, i + 1)\n        g.add_edge(i + 1, i + m + 1)\n        g.add_edge(i + m + 1, n + m + 1)\n\n        for j in range(s, d):\n            g.add_edge(i + 1, j + m + 1)\n    if g.is_cyclic():\n        print(-1)\n        return\n    ans = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if i + m + 1 in g.graph[j + 1]:\n                ans[i] = j + 1\n    for i in range(m):\n        if n + m + 1 in g.graph[i + m + 1]:\n            ans[d - 1] = m + 1\n    print(*ans)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    # Read the input data.\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    s = []\n    d = []\n    c = []\n    for i in range(m):\n        si, di, ci = [int(x) for x in sys.stdin.readline().split()]\n        s.append(si)\n        d.append(di)\n        c.append(ci)\n\n    # Compute the answer.\n    answer = [-1] * n\n    for i in range(m):\n        # Check if there are enough days to prepare.\n        if d[i] - s[i] < c[i]:\n            print(-1)\n            return\n\n        # Check if there is a day to pass the exam.\n        if d[i] - s[i] == c[i]:\n            print(-1)\n            return\n\n        # Prepare for the exam.\n        for j in range(c[i]):\n            answer[s[i] + j - 1] = i + 1\n\n        # Pass the exam.\n        answer[d[i] - 1] = m + 1\n\n    # Print the answer.\n    for i in range(n):\n        print(answer[i], end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()"]