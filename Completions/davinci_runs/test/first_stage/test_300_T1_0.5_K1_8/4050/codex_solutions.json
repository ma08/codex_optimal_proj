["\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ndef solve():\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n    dp_dict = {}\n    for i in range(1, n+1):\n        if dp[i] not in dp_dict:\n            dp_dict[dp[i]] = []\n        dp_dict[dp[i]].append(i)\n    ans = []\n    for _, v in dp_dict.items():\n        if len(v) > 1:\n            for i in range(len(v)-1):\n                ans.append((v[i], v[i+1]-1))\n    ans.sort(key=lambda x: x[1]-x[0], reverse=True)\n    print(len(ans))\n    for i in ans:\n        print(i[0], i[1])\n\nsolve()", "\n\ndef solve(a):\n    n = len(a)\n    sums = [0] * n\n    sums[0] = a[0]\n    for i in range(1, n):\n        sums[i] = sums[i-1] + a[i]\n\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = [0] * n\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            dp[i][i+1] = 1\n\n    for i in range(n):\n        for j in range(i+2, n):\n            if sums[j] - sums[i] == a[i] * (j-i+1):\n                dp[i][j] = 1\n\n    for i in range(n):\n        for j in range(i+2, n):\n            for k in range(i, j):\n                if dp[i][k] == 1 and dp[k+1][j] == 1:\n                    dp[i][j] = 1\n                    break\n\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] == 1:\n                print(i+1, j+1)\n\nn = int(input())\na = list(map(int, input().split()))\nsolve(a)", "\n\nn = int(input())\narr = list(map(int, input().split()))\n\nmemo = {}\n\ndef solve(i, j, curr):\n    if (i, j) in memo:\n        return memo[(i, j)]\n\n    if i == j:\n        return [(i, j)]\n\n    ans = []\n    if arr[i] == curr:\n        ans += solve(i+1, j, curr)\n    if arr[j] == curr:\n        ans += solve(i, j-1, curr)\n\n    for k in range(i+1, j):\n        if arr[k] == curr:\n            left = solve(i, k-1, curr)\n            right = solve(k+1, j, curr)\n            ans += left + right\n            break\n\n    memo[(i, j)] = ans\n    return ans\n\n\nans = solve(0, n-1, arr[0])\nprint(len(ans))\nfor a in ans:\n    print(a[0]+1, a[1]+1)", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef find_max_blocks(a, n):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i+1, j+1))\n    blocks = sorted(blocks, key=lambda x: x[1]-x[0])\n    # print(blocks)\n    sums = {}\n    for i in range(n):\n        sums[i] = {}\n        sums[i][i] = a[i]\n        for j in range(i+1, n):\n            sums[i][j] = sums[i][j-1] + a[j]\n    # print(sums)\n    result = []\n    for block in blocks:\n        if block[1] - block[0] + 1 <= len(result):\n            break\n        if block in result:\n            continue\n        block_sum = sums[block[0]-1][block[1]-1]\n        # print(block, block_sum)\n        if block_sum not in sums:\n            sums[block_sum] = []\n        sums[block_sum].append(block)\n        for sum_block in sums[block_sum]:\n            if sum_block[0] <= block[0] and sum_block[1] >= block[1]:\n                result.append(block)\n                break\n    # print(sums)\n    return result\n\nresult = find_max_blocks(a, n)\nprint(len(result))\nfor r in result:\n    print(r[0], r[1])", "\n\ndef blocks(arr):\n    blocks = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            blocks.append((i+1, j))\n    return blocks\n\ndef sum_block(block, arr):\n    s = 0\n    for i in range(block[0]-1, block[1]):\n        s += arr[i]\n    return s\n\ndef find_sets(arr):\n    sets = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sets.append((i+1, j))\n    return sets\n\ndef is_disjoint(b1, b2):\n    return b1[0] > b2[1] or b2[0] > b1[1]\n\ndef is_valid(sets, arr):\n    sums = []\n    for s in sets:\n        sums.append(sum_block(s, arr))\n    return len(set(sums)) == 1\n\ndef is_maximal(sets, blocks, arr):\n    for b in blocks:\n        if b not in sets and is_disjoint(b, sets[0]) and is_disjoint(b, sets[1]) and is_valid(sets+[b], arr):\n            return False\n    return True\n\ndef main():\n    n = int(input())\n    arr = [int(x) for x in input().strip().split()]\n    blocks = blocks(arr)\n    sets = find_sets(arr)\n    valid_sets = []\n    for i in range(len(sets)):\n        for j in range(i+1, len(sets)):\n            if is_disjoint(sets[i], sets[j]) and is_valid(sets[i:j+1], arr) and is_maximal(sets[i:j+1], blocks, arr):\n                valid_sets.append(sets[i:j+1])\n    print(len(valid_sets[0]))\n    for s in valid_sets[0]:\n        print(s[0], s[1])\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\n\nif s % n == 0:\n    s = s // n\n    count = 1\n    b = []\n\n    for i in range(n):\n        if i == 0:\n            b.append([a[i]])\n\n        elif a[i] == s and sum(b[-1]) == s:\n            count += 1\n            b.append([a[i]])\n\n        else:\n            b[-1].append(a[i])\n\n    print(count)\n    for i in range(count):\n        print(i + 1, i + 1)\n\nelse:\n    print(1)\n    print(1, n)", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u044b\u0445 \u0441\u0443\u043c\u043c\u0430\u0445\n# \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 a[0], a[1], ..., a[i] \u0440\u0430\u0432\u043d\u0430\n# a[0] + a[1] + ... + a[i]\nprefix_sum = [0] * (n + 1)\nfor i in range(1, n + 1):\n    prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n# \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0430\u0440\u044b \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 (l, r) \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043b\u043e\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 a[l], a[l + 1], ..., a[r]\n# \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0432\u043d\u043e 0\ncount = [[0] * (n + 1) for _ in range(n + 1)]\n\n# \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0430\u0440\u044b \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 (l, r) \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 a[l], a[l + 1], ..., a[r]\n# \u0431\u044b\u043b\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043b\u043e\u043a\u043e\u0432\nprev = [[0] * (n + 1) for _ in range(n + 1)]\n\n# \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 (l, r)\nfor l in range(n - 1, -1, -1):\n    for r in range(l + 1, n + 1):\n        # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 a[l], a[l + 1], ..., a[r]\n        s = prefix_sum[r] - prefix_sum[l]\n        # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043c\u0435\u0436\u0434\u0443 l \u0438 r\n        for i in range(l + 1, r):\n            # \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 a[l], a[l + 1], ..., a[i] \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 a[i + 1], a[i + 2], ..., a[r]\n            if prefix_sum[i] - prefix_sum[l] == prefix_sum[r] - prefix_sum[i]:\n                # \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043b\u043e\u043a\u043e\u0432 \u043d\u0430 1\n                count[l][r] = count[l][i] + count[i][r] + 1\n                # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441\n                prev[l][r] = i\n                break\n\n# \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u0443 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 (l, r), \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043b\u043e\u043a\u043e\u0432\nmax_l, max_r = 0, 0\nfor l in range(n):\n    for r in range(l + 1, n + 1):\n        if count[l][r] > count[max_l][max_r]:\n            max_l, max_r = l, r\n\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043b\u043e\u043a\u043e\u0432\nprint(count[max_l][max_r] + 1)\n\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0431\u043b\u043e\u043a\u0438\nwhile max_l < max_r:\n    print(max_l + 1, max_r)\n    max_l, max_r = prev[max_l][max_r], max_l", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = [0]*(n+1)\nfor i in range(1, n+1):\n    s[i] = s[i-1] + a[i-1]\n\nm = {}\nfor i in range(n):\n    for j in range(i+1, n+1):\n        m[(i, j)] = s[j] - s[i]\n\nm = sorted(m.items(), key=lambda x: x[1])\n\nans = []\ni = 0\nwhile i < len(m):\n    j = i\n    while j < len(m) and m[i][1] == m[j][1]:\n        j += 1\n    ans.append([])\n    for k in range(i, j):\n        if ans[-1] == []:\n            ans[-1].append(m[k][0])\n        else:\n            if m[k][0][0] > ans[-1][-1][1]:\n                ans[-1].append(m[k][0])\n    i = j\n\nprint(len(ans))\nfor i in ans:\n    for j in i:\n        print(j[0]+1, j[1])"]