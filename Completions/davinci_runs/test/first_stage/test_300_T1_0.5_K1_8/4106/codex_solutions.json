["\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum sum of values of reposted pictures for the first i pictures with j reposts\ndp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, x+1):\n        # if we don't repost the i-th picture, then we can repost any number of pictures from the first i-1 pictures\n        dp[i][j] = dp[i-1][j]\n        # if we repost the i-th picture, then we can repost at most j-1 pictures from the first i-1 pictures\n        for p in range(1, min(i, j)):\n            # if the i-th picture is the first picture in a segment of length k\n            if i-p < k:\n                dp[i][j] = max(dp[i][j], dp[i-p-1][j-p] + a[i-1])\n            # if the i-th picture is not the first picture in a segment of length k\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-p][j-p] + a[i-1])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])", "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement\n# and he has already reposted j pictures in the first i pictures.\ndp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, min(i, x)+1):\n        # if we don't repost the i-th picture\n        dp[i][j] = dp[i-1][j]\n        # if we repost the i-th picture\n        dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n        # if we repost the i-th picture and some pictures in the previous k-1 pictures\n        for l in range(max(j-1, 1), min(i-k+1, x)):\n            dp[i][j] = max(dp[i][j], dp[i-k][l] + a[i-1])\n\nprint(dp[n][x] if dp[n][x] != 0 else -1)", "\n\ndef solve(n, k, x, a):\n    \"\"\"\n    >>> solve(5, 2, 3, [5, 1, 3, 10, 1])\n    18\n    >>> solve(6, 1, 5, [10, 30, 30, 70, 10, 10])\n    -1\n    >>> solve(4, 3, 1, [1, 100, 1, 1])\n    100\n    \"\"\"\n    if x < n - k + 1:\n        return -1\n    if n == x:\n        return sum(a)\n    # k <= n - k + 1 <= x\n    # a = [5, 1, 3, 10, 1]\n    # k = 2\n    # x = 3\n    # n = 5\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - k] + a[j])\n    dp = [[0] * (n + 1) for _ in range(x + 1)]\n    for i in range(1, x + 1):\n        for j in range(1, n + 1):\n            if i == 1:\n                dp[i][j] = dp[i][j - 1] + a[j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][max(j - k, 0)] + a[j - 1])\n    return dp[x][n]\n\n\nif __name__ == '__main__':\n    n, k, x = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    print(solve(n, k, x, a))", "\n\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    dp = [[0] * (x + 1) for _ in range(n)]\n\n    dp[0][1] = a[0]\n    dp[1][1] = max(dp[0][1], a[1])\n\n    for i in range(2, n):\n        for j in range(1, x + 1):\n            dp[i][j] = dp[i - 1][j]\n            for p in range(max(0, i - k), i):\n                dp[i][j] = max(dp[i][j], dp[p][j - 1] + sum(a[p:i + 1]))\n\n    if dp[-1][x] > 0:\n        print(dp[-1][x])\n    else:\n        print(-1)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for j in range(x + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, x + 1):\n        if i < k:\n            dp[i][j] = max(dp[i - 1][j], a[i - 1])\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i - k][j - 1] + a[i - 1])\n\nprint(dp[n][x])", "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\nif x < k:\n    print(-1)\n    quit()\n\ndp = [0] * (n+1)\nfor i in range(n):\n    dp[i+1] = max(dp[i], dp[i-k+1] + a[i])\n\nprint(dp[-1])", "\n\nimport sys\nimport math\nfrom collections import deque\n\ndef get_input():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    return n, k, x, a\n\ndef get_max_sum(n, k, x, a):\n    if k * x > n:\n        return -1\n\n    # if k = 1, then we repost all pictures\n    if k == 1:\n        return sum(a)\n\n    # if k = n, then we repost the most beautiful picture\n    if k == n:\n        return max(a)\n\n    # reposting the most beautiful pictures\n    a_max = [max(a[i:i+k]) for i in range(n-k+1)]\n\n    # a_max_sum[i] is the sum of the first i most beautiful pictures\n    a_max_sum = [0]\n    for i in range(len(a_max)):\n        a_max_sum.append(a_max_sum[i] + a_max[i])\n\n    # we repost the first x most beautiful pictures\n    return a_max_sum[x]\n\ndef main():\n    n, k, x, a = get_input()\n    print(get_max_sum(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n, k, x = [int(i) for i in sys.stdin.readline().split()]\n    arr = [int(i) for i in sys.stdin.readline().split()]\n    if x < k:\n        print(-1)\n        return\n    if x == n:\n        print(sum(arr))\n        return\n    arr.sort()\n    print(sum(arr[n-x:]))\n\nif __name__ == \"__main__\":\n    main()"]