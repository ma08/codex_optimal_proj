2022-04-19 22:02:21.795965 """
The only difference between easy and hard versions is the constraints.

Vova likes pictures with kittens. The news feed in the social network he uses can be represented as an array of $n$ consecutive pictures (with kittens, of course). Vova likes all these pictures, but some are more beautiful than the others: the $i$-th picture has beauty $a_i$.

Vova wants to repost exactly $x$ pictures in such a way that:   each segment of the news feed of at least $k$ consecutive pictures has at least one picture reposted by Vova;  the sum of beauty values of reposted pictures is maximum possible. 

For example, if $k=1$ then Vova has to repost all the pictures in the news feed. If $k=2$ then Vova can skip some pictures, but between every pair of consecutive pictures Vova has to repost at least one of them.

Your task is to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described above, or say that there is no way to satisfy all conditions.


-----Input-----

The first line of the input contains three integers $n, k$ and $x$ ($1 \le k, x \le n \le 200$) — the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$), where $a_i$ is the beauty of the $i$-th picture.


-----Output-----

Print -1 if there is no way to repost some pictures to satisfy all the conditions in the problem statement.

Otherwise print one integer — the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement.


-----Examples-----
Input
5 2 3
5 1 3 10 1

Output
18

Input
6 1 5
10 30 30 70 10 10

Output
-1

Input
4 3 1
1 100 1 1

Output
100
"""
2022-04-19 22:02:21.795988 --------------------------
2022-04-19 22:02:21.796091 using api key sourya
2022-04-19 22:02:47.559556 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    dp = [[0] * (x + 1) for _ in range(n)]\n\n    dp[0][1] = a[0]\n    dp[1][1] = max(dp[0][1], a[1])\n\n    for i in range(2, n):\n        for j in range(1, x + 1):\n            dp[i][j] = dp[i - 1][j]\n            for p in range(max(0, i - k), i):\n                dp[i][j] = max(dp[i][j], dp[p][j - 1] + sum(a[p:i + 1]))\n\n    if dp[-1][x] > 0:\n        print(dp[-1][x])\n    else:\n        print(-1)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for j in range(x + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, x + 1):\n        if i < k:\n            dp[i][j] = max(dp[i - 1][j], a[i - 1])\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i - k][j - 1] + a[i - 1])\n\nprint(dp[n][x])"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement\n# and he has already reposted j pictures in the first i pictures.\ndp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, min(i, x)+1):\n        # if we don't repost the i-th picture\n        dp[i][j] = dp[i-1][j]\n        # if we repost the i-th picture\n        dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n        # if we repost the i-th picture and some pictures in the previous k-1 pictures\n        for l in range(max(j-1, 1), min(i-k+1, x)):\n            dp[i][j] = max(dp[i][j], dp[i-k][l] + a[i-1])\n\nprint(dp[n][x] if dp[n][x] != 0 else -1)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nfrom collections import deque\n\ndef get_input():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    return n, k, x, a\n\ndef get_max_sum(n, k, x, a):\n    if k * x > n:\n        return -1\n\n    # if k = 1, then we repost all pictures\n    if k == 1:\n        return sum(a)\n\n    # if k = n, then we repost the most beautiful picture\n    if k == n:\n        return max(a)\n\n    # reposting the most beautiful pictures\n    a_max = [max(a[i:i+k]) for i in range(n-k+1)]\n\n    # a_max_sum[i] is the sum of the first i most beautiful pictures\n    a_max_sum = [0]\n    for i in range(len(a_max)):\n        a_max_sum.append(a_max_sum[i] + a_max[i])\n\n    # we repost the first x most beautiful pictures\n    return a_max_sum[x]\n\ndef main():\n    n, k, x, a = get_input()\n    print(get_max_sum(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k, x = [int(i) for i in sys.stdin.readline().split()]\n    arr = [int(i) for i in sys.stdin.readline().split()]\n    if x < k:\n        print(-1)\n        return\n    if x == n:\n        print(sum(arr))\n        return\n    arr.sort()\n    print(sum(arr[n-x:]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\nif x < k:\n    print(-1)\n    quit()\n\ndp = [0] * (n+1)\nfor i in range(n):\n    dp[i+1] = max(dp[i], dp[i-k+1] + a[i])\n\nprint(dp[-1])"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef solve(n, k, x, a):\n    \"\"\"\n    >>> solve(5, 2, 3, [5, 1, 3, 10, 1])\n    18\n    >>> solve(6, 1, 5, [10, 30, 30, 70, 10, 10])\n    -1\n    >>> solve(4, 3, 1, [1, 100, 1, 1])\n    100\n    \"\"\"\n    if x < n - k + 1:\n        return -1\n    if n == x:\n        return sum(a)\n    # k <= n - k + 1 <= x\n    # a = [5, 1, 3, 10, 1]\n    # k = 2\n    # x = 3\n    # n = 5\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - k] + a[j])\n    dp = [[0] * (n + 1) for _ in range(x + 1)]\n    for i in range(1, x + 1):\n        for j in range(1, n + 1):\n            if i == 1:\n                dp[i][j] = dp[i][j - 1] + a[j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][max(j - k, 0)] + a[j - 1])\n    return dp[x][n]\n\n\nif __name__ == '__main__':\n    n, k, x = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    print(solve(n, k, x, a))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum sum of values of reposted pictures for the first i pictures with j reposts\ndp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, x+1):\n        # if we don't repost the i-th picture, then we can repost any number of pictures from the first i-1 pictures\n        dp[i][j] = dp[i-1][j]\n        # if we repost the i-th picture, then we can repost at most j-1 pictures from the first i-1 pictures\n        for p in range(1, min(i, j)):\n            # if the i-th picture is the first picture in a segment of length k\n            if i-p < k:\n                dp[i][j] = max(dp[i][j], dp[i-p-1][j-p] + a[i-1])\n            # if the i-th picture is not the first picture in a segment of length k\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-p][j-p] + a[i-1])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])"
    }
  ],
  "created": 1650405741,
  "id": "cmpl-4yqDN8kqLN5r1BuNQSb4571pW18ba",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:02:47.559893 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    dp = [[0] * (x + 1) for _ in range(n)]\n\n    dp[0][1] = a[0]\n    dp[1][1] = max(dp[0][1], a[1])\n\n    for i in range(2, n):\n        for j in range(1, x + 1):\n            dp[i][j] = dp[i - 1][j]\n            for p in range(max(0, i - k), i):\n                dp[i][j] = max(dp[i][j], dp[p][j - 1] + sum(a[p:i + 1]))\n\n    if dp[-1][x] > 0:\n        print(dp[-1][x])\n    else:\n        print(-1)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:02:47.560009 REASON stop
2022-04-19 22:02:47.560589 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for j in range(x + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, x + 1):\n        if i < k:\n            dp[i][j] = max(dp[i - 1][j], a[i - 1])\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i - k][j - 1] + a[i - 1])\n\nprint(dp[n][x])"
}
2022-04-19 22:02:47.560661 REASON stop
2022-04-19 22:02:47.561139 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement\n# and he has already reposted j pictures in the first i pictures.\ndp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, min(i, x)+1):\n        # if we don't repost the i-th picture\n        dp[i][j] = dp[i-1][j]\n        # if we repost the i-th picture\n        dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n        # if we repost the i-th picture and some pictures in the previous k-1 pictures\n        for l in range(max(j-1, 1), min(i-k+1, x)):\n            dp[i][j] = max(dp[i][j], dp[i-k][l] + a[i-1])\n\nprint(dp[n][x] if dp[n][x] != 0 else -1)"
}
2022-04-19 22:02:47.561205 REASON stop
2022-04-19 22:02:47.579193 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nfrom collections import deque\n\ndef get_input():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    return n, k, x, a\n\ndef get_max_sum(n, k, x, a):\n    if k * x > n:\n        return -1\n\n    # if k = 1, then we repost all pictures\n    if k == 1:\n        return sum(a)\n\n    # if k = n, then we repost the most beautiful picture\n    if k == n:\n        return max(a)\n\n    # reposting the most beautiful pictures\n    a_max = [max(a[i:i+k]) for i in range(n-k+1)]\n\n    # a_max_sum[i] is the sum of the first i most beautiful pictures\n    a_max_sum = [0]\n    for i in range(len(a_max)):\n        a_max_sum.append(a_max_sum[i] + a_max[i])\n\n    # we repost the first x most beautiful pictures\n    return a_max_sum[x]\n\ndef main():\n    n, k, x, a = get_input()\n    print(get_max_sum(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:02:47.579334 REASON stop
2022-04-19 22:02:47.580133 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k, x = [int(i) for i in sys.stdin.readline().split()]\n    arr = [int(i) for i in sys.stdin.readline().split()]\n    if x < k:\n        print(-1)\n        return\n    if x == n:\n        print(sum(arr))\n        return\n    arr.sort()\n    print(sum(arr[n-x:]))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:02:47.580238 REASON stop
2022-04-19 22:02:47.599881 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\nif x < k:\n    print(-1)\n    quit()\n\ndp = [0] * (n+1)\nfor i in range(n):\n    dp[i+1] = max(dp[i], dp[i-k+1] + a[i])\n\nprint(dp[-1])"
}
2022-04-19 22:02:47.600017 REASON stop
2022-04-19 22:02:47.600660 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef solve(n, k, x, a):\n    \"\"\"\n    >>> solve(5, 2, 3, [5, 1, 3, 10, 1])\n    18\n    >>> solve(6, 1, 5, [10, 30, 30, 70, 10, 10])\n    -1\n    >>> solve(4, 3, 1, [1, 100, 1, 1])\n    100\n    \"\"\"\n    if x < n - k + 1:\n        return -1\n    if n == x:\n        return sum(a)\n    # k <= n - k + 1 <= x\n    # a = [5, 1, 3, 10, 1]\n    # k = 2\n    # x = 3\n    # n = 5\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - k] + a[j])\n    dp = [[0] * (n + 1) for _ in range(x + 1)]\n    for i in range(1, x + 1):\n        for j in range(1, n + 1):\n            if i == 1:\n                dp[i][j] = dp[i][j - 1] + a[j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][max(j - k, 0)] + a[j - 1])\n    return dp[x][n]\n\n\nif __name__ == '__main__':\n    n, k, x = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    print(solve(n, k, x, a))"
}
2022-04-19 22:02:47.600777 REASON stop
2022-04-19 22:02:47.601424 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum sum of values of reposted pictures for the first i pictures with j reposts\ndp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, x+1):\n        # if we don't repost the i-th picture, then we can repost any number of pictures from the first i-1 pictures\n        dp[i][j] = dp[i-1][j]\n        # if we repost the i-th picture, then we can repost at most j-1 pictures from the first i-1 pictures\n        for p in range(1, min(i, j)):\n            # if the i-th picture is the first picture in a segment of length k\n            if i-p < k:\n                dp[i][j] = max(dp[i][j], dp[i-p-1][j-p] + a[i-1])\n            # if the i-th picture is not the first picture in a segment of length k\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-p][j-p] + a[i-1])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])"
}
2022-04-19 22:02:47.601597 REASON stop
