["\n\n# Solution\n\nn, m = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\n\nans = 0\nfor i in range(n):\n    for j in range(m):\n        ans += abs(a[i][j] - (i * m + j + 1))\nprint(ans // 2)", "\n\nimport sys\n\ndef get_input():\n    n, m = [int(i) for i in input().split()]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(i) for i in input().split()])\n    return n, m, matrix\n\n\ndef get_matrix_value(row, column):\n    return (row - 1) * m + column\n\n\ndef get_required_value(row, column):\n    return matrix[row - 1][column - 1]\n\n\ndef get_required_row(value):\n    return (value - 1) // m + 1\n\n\ndef get_required_column(value):\n    return (value - 1) % m + 1\n\n\ndef get_move_cost(row, column, value):\n    if value == get_matrix_value(row, column):\n        return 0\n    required_row = get_required_row(value)\n    required_column = get_required_column(value)\n    if required_row == row:\n        return 1\n    if required_column == column:\n        return 2\n    return 3\n\n\ndef get_cost_for_row(row):\n    return sum([get_move_cost(row, column, get_required_value(row, column)) for column in range(1, m + 1)])\n\n\ndef get_cost_for_column(column):\n    return sum([get_move_cost(row, column, get_required_value(row, column)) for row in range(1, n + 1)])\n\n\ndef get_cost():\n    return sum([get_cost_for_row(row) for row in range(1, n + 1)]) + sum([get_cost_for_column(column) for column in range(1, m + 1)])\n\n\nif __name__ == \"__main__\":\n    n, m, matrix = get_input()\n    print(get_cost())", "\n\n\ndef main():\n    n, m = int(input()), int(input())\n    matrix = [[int(x) for x in input().split()] for _ in range(n)]\n    move = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == (i * m + j + 1):\n                continue\n            else:\n                for k in range(m):\n                    if matrix[i][j] == (i * m + k + 1):\n                        move += k - j\n                        for l in range(k, j, -1):\n                            matrix[i][l] = matrix[i][l - 1]\n                        matrix[i][j] = (i * m + j + 1)\n                        break\n    print(move)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\n# Solution\n\nn, m = map(int, input().split())\n\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nans = 0\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != (i * m + j + 1):\n            ans += 1\n\nprint(ans)", "\n\ndef main():\n    n, m = map(int, input().split())\n    A = list()\n    for i in range(n):\n        A.append(list(map(int, input().split())))\n    \n    ans = 0\n    for j in range(m):\n        for i in range(n):\n            if A[i][j] != (i * m) + j + 1:\n                ans += 1\n                for k in range(i+1, n):\n                    if A[k][j] == (i * m) + j + 1:\n                        A[i][j], A[k][j] = A[k][j], A[i][j]\n                        break\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n# print(a)\n\nres = 0\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != (i * m + j + 1):\n            for k in range(j + 1, m):\n                if a[i][k] == (i * m + j + 1):\n                    for x in range(k, j, -1):\n                        a[i][x], a[i][x - 1] = a[i][x - 1], a[i][x]\n                        res += 1\n                    break\n            else:\n                print(-1)\n                exit()\n\nprint(res)", "\n\n# SOLUTION\ndef min_moves(matrix):\n    n, m = len(matrix), len(matrix[0])\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != i * m + j + 1:\n                moves += 1\n                for k in range(n):\n                    if matrix[k][j] == i * m + j + 1:\n                        matrix[k][j] = matrix[i][j]\n                        break\n    return moves\n\nn, m = map(int, input().split())\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\nprint(min_moves(matrix))"]