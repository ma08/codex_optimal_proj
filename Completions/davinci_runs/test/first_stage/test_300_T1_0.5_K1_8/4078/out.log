2022-04-19 21:41:35.321211 """
The only difference between easy and hard versions is a number of elements in the array.

You are given an array $a$ consisting of $n$ integers. The value of the $i$-th element of the array is $a_i$.

You are also given a set of $m$ segments. The $j$-th segment is $[l_j; r_j]$, where $1 \le l_j \le r_j \le n$.

You can choose some subset of the given set of segments and decrease values on each of the chosen segments by one (independently). For example, if the initial array $a = [0, 0, 0, 0, 0]$ and the given segments are $[1; 3]$ and $[2; 4]$ then you can choose both of them and the array will become $b = [-1, -2, -2, -1, 0]$.

You have to choose some subset of the given segments (each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array $a$ and obtain the array $b$ then the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ will be maximum possible.

Note that you can choose the empty set.

If there are multiple answers, you can print any.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n \le 300, 0 \le m \le 300$) — the length of the array $a$ and the number of segments, respectively.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^6 \le a_i \le 10^6$), where $a_i$ is the value of the $i$-th element of the array $a$.

The next $m$ lines are contain two integers each. The $j$-th of them contains two integers $l_j$ and $r_j$ ($1 \le l_j \le r_j \le n$), where $l_j$ and $r_j$ are the ends of the $j$-th segment.


-----Output-----

In the first line of the output print one integer $d$ — the maximum possible value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ if $b$ is the array obtained by applying some subset of the given segments to the array $a$.

In the second line of the output print one integer $q$ ($0 \le q \le m$) — the number of segments you apply.

In the third line print $q$ distinct integers $c_1, c_2, \dots, c_q$ in any order ($1 \le c_k \le m$) — indices of segments you apply to the array $a$ in such a way that the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ of the obtained array $b$ is maximum possible.

If there are multiple answers, you can print any.


-----Examples-----
Input
5 4
2 -2 3 1 2
1 3
4 5
2 5
1 3

Output
6
2
1 4 

Input
5 4
2 -2 3 1 4
3 5
3 4
2 4
2 5

Output
7
2
3 2 

Input
1 0
1000000

Output
0
0




-----Note-----

In the first example the obtained array $b$ will be $[0, -4, 1, 1, 2]$ so the answer is $6$.

In the second example the obtained array $b$ will be $[2, -3, 1, -1, 4]$ so the answer is $7$.

In the third example you cannot do anything so the answer is $0$.
"""
2022-04-19 21:41:35.321231 --------------------------
2022-04-19 21:41:35.321344 using api key sourya
2022-04-19 21:42:58.966248 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# Read in the input\nraw_input = sys.stdin.read()\ntokens = raw_input.split()\n\nn = int(tokens[0])\nm = int(tokens[1])\n\na = list(map(int, tokens[2:2+n]))\n\nl = [None] * m\nr = [None] * m\n\nfor i in range(m):\n    l[i] = int(tokens[2+n+2*i])\n    r[i] = int(tokens[2+n+2*i+1])\n\n# This is the maximum possible value for the difference\n# of the min and max elements in the array.\nd = 0\n\n# This is the number of segments to apply.\nq = 0\n\n# This is the list of segments to apply.\nc = []\n\n# This is the index of the segment that is currently\n# being considered.\ni = 0\n\n# This is the index of the element in the array that\n# is currently being considered.\nj = 0\n\n# This is the current minimum element in the array.\nmin = a[0]\n\n# This is the current maximum element in the array.\nmax = a[0]\n\n# Find the maximum value for the difference of the min\n# and max elements in the array.\nwhile i < m:\n    # If the current element is in the current segment,\n    # then update the min and max values.\n    if j >= l[i] and j <= r[i]:\n        if a[j] < min:\n            min = a[j]\n        if a[j] > max:\n            max = a[j]\n    # If the current element is not in the current segment,\n    # then check if adding the current segment would increase\n    # the maximum difference of the min and max elements.\n    else:\n        # If the current segment is within the current min and max\n        # values, then adding the current segment would not increase\n        # the maximum difference of the min and max elements.\n        if min <= a[l[i]-1] and a[r[i]-1] <= max:\n            pass\n        # Otherwise, adding the current segment would increase the\n        # maximum difference of the min and max elements.\n        else:\n            # If the current difference of the min and max elements\n            # is less than the maximum difference of the min and max\n            # elements, then update the maximum difference and the\n            # list of segments to apply.\n            if max - min < max - a[l[i]-1] + a[r[i]-1] - min:\n                d = max - a[l[i]-1] + a[r[i]-1] - min\n                q = 1\n                c = [i+1]\n            # If the current difference of the min and max elements\n            # is equal to the maximum difference of the min and max\n            # elements, then add the current segment to the list of\n            # segments to apply.\n            elif max - min == max - a[l[i]-1] + a[r[i]-1] - min:\n                q += 1\n                c.append(i+1)\n        # Move on to the next segment.\n        i += 1\n    # Move on to the next element in the array.\n    j += 1\n\n# Print out the results.\nprint(d)\nprint(q)\nfor i in range(q):\n    print(c[i], end='')\n    if i < q-1:\n        print(' ', end='')\nprint()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, raw_input().split())\n    a = map(int, raw_input().split())\n\n    l = [0] * n\n    r = [0] * n\n    for i in range(m):\n        ll, rr = map(int, raw_input().split())\n        l[ll-1] += 1\n        r[rr-1] += 1\n\n    for i in range(1, n):\n        l[i] += l[i-1]\n        r[i] += r[i-1]\n\n    r.reverse()\n\n    for i in range(n-1, 0, -1):\n        r[i-1] += r[i]\n\n    r.reverse()\n\n    d = 0\n    for i in range(n):\n        d = max(d, abs(a[i] + l[i] - r[i]))\n\n    print d\n    print 0\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef read_ints():\n  temp = input().split()\n  temp = [int(t) for t in temp]\n  return temp\n\ndef read_tuple(convert_func):\n  temp = input().split()\n  temp = [convert_func(t) for t in temp]\n  return tuple(temp)\n\ndef read_int():\n  temp = input().split()\n  return int(temp[0])\n\ndef max_diff(a, b):\n  return max(a) - min(a)\n\ndef solve():\n  n, m = read_tuple(int)\n  a = read_ints()\n  segments = [read_tuple(int) for _ in range(m)]\n\n  # print(n, m)\n  # print(a)\n  # print(segments)\n\n  max_diffs = [0] * m\n  for i in range(m):\n    segment = segments[i]\n    l, r = segment\n    max_diffs[i] = max_diff(a[l-1:r])\n\n  # print(max_diffs)\n\n  max_diff_val = max(max_diffs)\n  max_diff_indices = []\n  for i in range(m):\n    if max_diffs[i] == max_diff_val:\n      max_diff_indices.append(i+1)\n\n  print(max_diff_val)\n  print(len(max_diff_indices))\n  print(' '.join([str(i) for i in max_diff_indices]))\n\nsolve()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\nimport os\nimport heapq\nimport math\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    segs = []\n    for i in range(m):\n        l, r = [int(x) for x in input().split()]\n        segs.append([l, r])\n    segs = sorted(segs, key=lambda x: (x[1] - x[0], x[0]))\n    #print(segs)\n    mn = min(a)\n    mx = max(a)\n    ans = mx - mn\n    print(ans)\n    if ans == 0:\n        print(0)\n        return\n    used = [False for _ in range(m)]\n    for i in range(m):\n        if not used[i] and a[segs[i][0]-1] == mn and a[segs[i][1]-1] == mx:\n            used[i] = True\n            break\n        if not used[i] and a[segs[i][0]-1] == mn:\n            for j in range(i+1, m):\n                if not used[j] and a[segs[j][1]-1] == mx:\n                    used[j] = True\n                    break\n            used[i] = True\n            break\n        if not used[i] and a[segs[i][1]-1] == mx:\n            for j in range(i+1, m):\n                if not used[j] and a[segs[j][0]-1] == mn:\n                    used[j] = True\n                    break\n            used[i] = True\n            break\n    print(used.count(True))\n    for i in range(m):\n        if used[i]:\n            print(i+1, end=' ')\n    print()\n    #print(used)\n    #print(segs)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef print_ans(d, q, lst):\n    print(d)\n    print(q)\n    print(*lst)\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    r = []\n    for i in range(m):\n        l_i, r_i = map(int, input().split())\n        l.append(l_i)\n        r.append(r_i)\n\n    # \u89e3\u8aacAC\n    # \u6b63\u3057\u304f\u306f\u300c\u5168\u3066\u306e\u8981\u7d20\u3092\u540c\u3058\u5024\u306b\u3059\u308b\u300d\u3053\u3068\u3092\u8003\u3048\u308b\n    # \u3053\u308c\u306f\u300c\u5168\u3066\u306e\u8981\u7d20\u3092\u6700\u5927\u5024\u306b\u3059\u308b\u300d\u3068\u540c\u7fa9\n    # \u3053\u306e\u3068\u304d\u3001\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u306b\u306f\u3001\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u3092\u77e5\u308b\u300d\u3068\u300c\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u300d\u306e2\u3064\u304c\u5fc5\u8981\n    # \u3053\u306e2\u3064\u3092\u77e5\u308b\u306b\u306f\u3001\u6b8b\u308a\u3092\u5168\u30660\u306b\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u304c\u5fc5\u8981\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u3092\u6c42\u3081\u308b\u306b\u306f\u3001\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u304c\u5fc5\u8981\n    # \u3053\u308c\u3089\u306e\u4f4d\u7f6e\u306f\u3001\u533a\u9593\u306e\u5de6\u7aef\u3068\u53f3\u7aef\u3092\u8a18\u9332\u3057\u3066\u304a\u3051\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u4f4d\u7f6e\u3092\u8a18\u9332\u3057\u3066\u304a\u3044\u305f\u3089\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u306f\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u3068\u540c\u7fa9\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u306f\u3001\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u304c\u6700\u5927\u3067\u3042\u308b\u3088\u3046\u306a\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u306f\u3001\u533a\u9593\u306e\u5de6\u7aef\u3068\u53f3\u7aef\u3092\u8a18\u9332\u3057\u3066\u304a\u3044\u305f\u3082\u306e\u3092\u4f7f\u3048\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u305f\u3089\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u306f\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u3068\u540c\u7fa9\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u306f\u3001\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u304c\u6700\u5927\u3067\u3042\u308b\u3088\u3046\u306a\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u306f\u3001\u533a\u9593\u306e\u5de6\u7aef\u3068\u53f3\u7aef\u3092\u8a18\u9332\u3057\u3066\u304a\u3044\u305f\u3082\u306e\u3092\u4f7f\u3048\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u305f\u3089\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n\n    # \u4ee5\u4e0a\u3088\u308a\u3001\u533a\u9593\u306e\u5de6\u7aef\u3068\u53f3\u7aef\u3092\u8a18\u9332\u3057\u3066\u304a\u3044\u305f\u3082\u306e\u3092\u4f7f\u3048\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# Input\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\n# Preprocessing\nfor i in range(m):\n    l, r = map(int, input().split())\n    l -= 1\n    r -= 1\n\n    a[l] -= 1\n    if r < n - 1:\n        a[r + 1] += 1\n\n# Calculate\nfor i in range(1, n):\n    a[i] += a[i - 1]\n\n# Output\nprint(max(a) - min(a))\nprint(0)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": ""
    }
  ],
  "created": 1650404495,
  "id": "cmpl-4yptHS0Nz361nHjQSfiMtHEw2nwJF",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:42:58.966740 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# Read in the input\nraw_input = sys.stdin.read()\ntokens = raw_input.split()\n\nn = int(tokens[0])\nm = int(tokens[1])\n\na = list(map(int, tokens[2:2+n]))\n\nl = [None] * m\nr = [None] * m\n\nfor i in range(m):\n    l[i] = int(tokens[2+n+2*i])\n    r[i] = int(tokens[2+n+2*i+1])\n\n# This is the maximum possible value for the difference\n# of the min and max elements in the array.\nd = 0\n\n# This is the number of segments to apply.\nq = 0\n\n# This is the list of segments to apply.\nc = []\n\n# This is the index of the segment that is currently\n# being considered.\ni = 0\n\n# This is the index of the element in the array that\n# is currently being considered.\nj = 0\n\n# This is the current minimum element in the array.\nmin = a[0]\n\n# This is the current maximum element in the array.\nmax = a[0]\n\n# Find the maximum value for the difference of the min\n# and max elements in the array.\nwhile i < m:\n    # If the current element is in the current segment,\n    # then update the min and max values.\n    if j >= l[i] and j <= r[i]:\n        if a[j] < min:\n            min = a[j]\n        if a[j] > max:\n            max = a[j]\n    # If the current element is not in the current segment,\n    # then check if adding the current segment would increase\n    # the maximum difference of the min and max elements.\n    else:\n        # If the current segment is within the current min and max\n        # values, then adding the current segment would not increase\n        # the maximum difference of the min and max elements.\n        if min <= a[l[i]-1] and a[r[i]-1] <= max:\n            pass\n        # Otherwise, adding the current segment would increase the\n        # maximum difference of the min and max elements.\n        else:\n            # If the current difference of the min and max elements\n            # is less than the maximum difference of the min and max\n            # elements, then update the maximum difference and the\n            # list of segments to apply.\n            if max - min < max - a[l[i]-1] + a[r[i]-1] - min:\n                d = max - a[l[i]-1] + a[r[i]-1] - min\n                q = 1\n                c = [i+1]\n            # If the current difference of the min and max elements\n            # is equal to the maximum difference of the min and max\n            # elements, then add the current segment to the list of\n            # segments to apply.\n            elif max - min == max - a[l[i]-1] + a[r[i]-1] - min:\n                q += 1\n                c.append(i+1)\n        # Move on to the next segment.\n        i += 1\n    # Move on to the next element in the array.\n    j += 1\n\n# Print out the results.\nprint(d)\nprint(q)\nfor i in range(q):\n    print(c[i], end='')\n    if i < q-1:\n        print(' ', end='')\nprint()"
}
2022-04-19 21:42:58.966797 REASON stop
2022-04-19 21:42:58.967467 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, raw_input().split())\n    a = map(int, raw_input().split())\n\n    l = [0] * n\n    r = [0] * n\n    for i in range(m):\n        ll, rr = map(int, raw_input().split())\n        l[ll-1] += 1\n        r[rr-1] += 1\n\n    for i in range(1, n):\n        l[i] += l[i-1]\n        r[i] += r[i-1]\n\n    r.reverse()\n\n    for i in range(n-1, 0, -1):\n        r[i-1] += r[i]\n\n    r.reverse()\n\n    d = 0\n    for i in range(n):\n        d = max(d, abs(a[i] + l[i] - r[i]))\n\n    print d\n    print 0\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:42:58.967537 REASON stop
2022-04-19 21:42:58.967981 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef read_ints():\n  temp = input().split()\n  temp = [int(t) for t in temp]\n  return temp\n\ndef read_tuple(convert_func):\n  temp = input().split()\n  temp = [convert_func(t) for t in temp]\n  return tuple(temp)\n\ndef read_int():\n  temp = input().split()\n  return int(temp[0])\n\ndef max_diff(a, b):\n  return max(a) - min(a)\n\ndef solve():\n  n, m = read_tuple(int)\n  a = read_ints()\n  segments = [read_tuple(int) for _ in range(m)]\n\n  # print(n, m)\n  # print(a)\n  # print(segments)\n\n  max_diffs = [0] * m\n  for i in range(m):\n    segment = segments[i]\n    l, r = segment\n    max_diffs[i] = max_diff(a[l-1:r])\n\n  # print(max_diffs)\n\n  max_diff_val = max(max_diffs)\n  max_diff_indices = []\n  for i in range(m):\n    if max_diffs[i] == max_diff_val:\n      max_diff_indices.append(i+1)\n\n  print(max_diff_val)\n  print(len(max_diff_indices))\n  print(' '.join([str(i) for i in max_diff_indices]))\n\nsolve()"
}
2022-04-19 21:42:58.968035 REASON stop
2022-04-19 21:42:58.991988 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": ""
}
2022-04-19 21:42:58.992105 REASON stop
2022-04-19 21:42:59.015346 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\nimport os\nimport heapq\nimport math\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    segs = []\n    for i in range(m):\n        l, r = [int(x) for x in input().split()]\n        segs.append([l, r])\n    segs = sorted(segs, key=lambda x: (x[1] - x[0], x[0]))\n    #print(segs)\n    mn = min(a)\n    mx = max(a)\n    ans = mx - mn\n    print(ans)\n    if ans == 0:\n        print(0)\n        return\n    used = [False for _ in range(m)]\n    for i in range(m):\n        if not used[i] and a[segs[i][0]-1] == mn and a[segs[i][1]-1] == mx:\n            used[i] = True\n            break\n        if not used[i] and a[segs[i][0]-1] == mn:\n            for j in range(i+1, m):\n                if not used[j] and a[segs[j][1]-1] == mx:\n                    used[j] = True\n                    break\n            used[i] = True\n            break\n        if not used[i] and a[segs[i][1]-1] == mx:\n            for j in range(i+1, m):\n                if not used[j] and a[segs[j][0]-1] == mn:\n                    used[j] = True\n                    break\n            used[i] = True\n            break\n    print(used.count(True))\n    for i in range(m):\n        if used[i]:\n            print(i+1, end=' ')\n    print()\n    #print(used)\n    #print(segs)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 21:42:59.015496 REASON stop
2022-04-19 21:42:59.016674 5 {
  "finish_reason": "length",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef print_ans(d, q, lst):\n    print(d)\n    print(q)\n    print(*lst)\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    r = []\n    for i in range(m):\n        l_i, r_i = map(int, input().split())\n        l.append(l_i)\n        r.append(r_i)\n\n    # \u89e3\u8aacAC\n    # \u6b63\u3057\u304f\u306f\u300c\u5168\u3066\u306e\u8981\u7d20\u3092\u540c\u3058\u5024\u306b\u3059\u308b\u300d\u3053\u3068\u3092\u8003\u3048\u308b\n    # \u3053\u308c\u306f\u300c\u5168\u3066\u306e\u8981\u7d20\u3092\u6700\u5927\u5024\u306b\u3059\u308b\u300d\u3068\u540c\u7fa9\n    # \u3053\u306e\u3068\u304d\u3001\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u306b\u306f\u3001\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u3092\u77e5\u308b\u300d\u3068\u300c\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u300d\u306e2\u3064\u304c\u5fc5\u8981\n    # \u3053\u306e2\u3064\u3092\u77e5\u308b\u306b\u306f\u3001\u6b8b\u308a\u3092\u5168\u30660\u306b\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u304c\u5fc5\u8981\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u3092\u6c42\u3081\u308b\u306b\u306f\u3001\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u304c\u5fc5\u8981\n    # \u3053\u308c\u3089\u306e\u4f4d\u7f6e\u306f\u3001\u533a\u9593\u306e\u5de6\u7aef\u3068\u53f3\u7aef\u3092\u8a18\u9332\u3057\u3066\u304a\u3051\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u4f4d\u7f6e\u3092\u8a18\u9332\u3057\u3066\u304a\u3044\u305f\u3089\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u306f\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u3068\u540c\u7fa9\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u306f\u3001\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u304c\u6700\u5927\u3067\u3042\u308b\u3088\u3046\u306a\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u306f\u3001\u533a\u9593\u306e\u5de6\u7aef\u3068\u53f3\u7aef\u3092\u8a18\u9332\u3057\u3066\u304a\u3044\u305f\u3082\u306e\u3092\u4f7f\u3048\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u305f\u3089\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u306f\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u3068\u540c\u7fa9\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u306f\u3001\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u3053\u306e\u300c\u6700\u5927\u5024\u30680\u306e\u8ddd\u96e2\u300d\u304c\u6700\u5927\u3067\u3042\u308b\u3088\u3046\u306a\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u306f\u3001\u533a\u9593\u306e\u5de6\u7aef\u3068\u53f3\u7aef\u3092\u8a18\u9332\u3057\u3066\u304a\u3044\u305f\u3082\u306e\u3092\u4f7f\u3048\u3070\u3088\u3044\n    # \u3053\u308c\u3089\u306e\u300c\u6700\u5927\u5024\u306e\u4f4d\u7f6e\u300d\u3068\u300c0\u306e\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u305f\u3089\u3001\u300c\u6700\u5927\u5024\u30680\u306e\u5dee\u5206\u300d\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n\n    # \u4ee5\u4e0a\u3088\u308a\u3001\u533a\u9593\u306e\u5de6\u7aef\u3068\u53f3\u7aef\u3092\u8a18\u9332\u3057\u3066\u304a\u3044\u305f\u3082\u306e\u3092\u4f7f\u3048\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u3092\u5f15\u3051\u3070\u3088\u3044\n    # \u5de6\u7aef\u306e\u6700\u5927\u5024\u3068\u53f3\u7aef\u306e\u6700\u5927\u5024\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3092\u5f15\u3051"
}
2022-04-19 21:42:59.016875 REASON length
2022-04-19 21:42:59.016887 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# Input\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\n# Preprocessing\nfor i in range(m):\n    l, r = map(int, input().split())\n    l -= 1\n    r -= 1\n\n    a[l] -= 1\n    if r < n - 1:\n        a[r + 1] += 1\n\n# Calculate\nfor i in range(1, n):\n    a[i] += a[i - 1]\n\n# Output\nprint(max(a) - min(a))\nprint(0)"
}
2022-04-19 21:42:59.016930 REASON stop
2022-04-19 21:42:59.017893 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": ""
}
2022-04-19 21:42:59.018058 REASON stop
