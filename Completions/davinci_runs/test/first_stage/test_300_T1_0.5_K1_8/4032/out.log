2022-04-19 21:10:19.579143 """
Mishka started participating in a programming contest. There are $n$ problems in the contest. Mishka's problem-solving skill is equal to $k$.

Mishka arranges all problems from the contest into a list. Because of his weird principles, Mishka only solves problems from one of the ends of the list. Every time, he chooses which end (left or right) he will solve the next problem from. Thus, each problem Mishka solves is either the leftmost or the rightmost problem in the list.

Mishka cannot solve a problem with difficulty greater than $k$. When Mishka solves the problem, it disappears from the list, so the length of the list decreases by $1$. Mishka stops when he is unable to solve any problem from any end of the list.

How many problems can Mishka solve?


-----Input-----

The first line of input contains two integers $n$ and $k$ ($1 \le n, k \le 100$) — the number of problems in the contest and Mishka's problem-solving skill.

The second line of input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 100$), where $a_i$ is the difficulty of the $i$-th problem. The problems are given in order from the leftmost to the rightmost in the list.


-----Output-----

Print one integer — the maximum number of problems Mishka can solve.


-----Examples-----
Input
8 4
4 2 3 1 5 1 6 4

Output
5

Input
5 2
3 1 2 1 3

Output
0

Input
5 100
12 34 55 43 21

Output
5



-----Note-----

In the first example, Mishka can solve problems in the following order: $[4, 2, 3, 1, 5, 1, 6, 4] \rightarrow [2, 3, 1, 5, 1, 6, 4] \rightarrow [2, 3, 1, 5, 1, 6] \rightarrow [3, 1, 5, 1, 6] \rightarrow [1, 5, 1, 6] \rightarrow [5, 1, 6]$, so the number of solved problems will be equal to $5$.

In the second example, Mishka can't solve any problem because the difficulties of problems from both ends are greater than $k$.

In the third example, Mishka's solving skill is so amazing that he can solve all the problems.
"""
2022-04-19 21:10:19.579171 --------------------------
2022-04-19 21:10:19.579271 using api key sourya
2022-04-19 21:10:32.771052 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\nproblems = list(map(int, input().split()))\n\nleft = 0\nright = len(problems) - 1\n\nsolved = 0\n\nwhile left <= right:\n    if problems[left] <= k:\n        solved += 1\n        left += 1\n    elif problems[right] <= k:\n        solved += 1\n        right -= 1\n    else:\n        break\n\nprint(solved)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\nproblems = list(map(int, input().split()))\n\ndef solve(problems, k):\n    if not problems:\n        return 0\n    if problems[0] <= k:\n        return 1 + solve(problems[1:], k)\n    elif problems[-1] <= k:\n        return 1 + solve(problems[:-1], k)\n    else:\n        return 0\n\nprint(solve(problems, k))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\ndiffs = list(map(int, input().split()))\n\nleft, right = 0, n-1\n\nwhile left <= right and diffs[left] <= k:\n    left += 1\nwhile left <= right and diffs[right] <= k:\n    right -= 1\n\nprint(left + n - 1 - right)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\nproblems = list(map(int, input().split()))\n\nleft = 0\nright = n - 1\n\nsolved = 0\n\nwhile left <= right:\n    if problems[left] <= k and problems[right] <= k:\n        solved += 1\n        left += 1\n        right -= 1\n    elif problems[left] <= k:\n        solved += 1\n        left += 1\n    elif problems[right] <= k:\n        solved += 1\n        right -= 1\n    else:\n        break\n\nprint(solved)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nl, r = 0, n - 1\nans = 0\n\nwhile l <= r:\n    if a[l] <= k:\n        l += 1\n        ans += 1\n    elif a[r] <= k:\n        r -= 1\n        ans += 1\n    else:\n        break\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\n\nleft, right = 0, n-1\nans = 0\nwhile left <= right:\n    if a[left] <= k:\n        ans += 1\n        left += 1\n    elif a[right] <= k:\n        ans += 1\n        right -= 1\n    else:\n        break\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"Mishka and the Contest\"\"\"\n    num_problems, solving_skill = map(int, input().split())\n    problems = list(map(int, input().split()))\n    problems_solved = 0\n    while problems:\n        if problems[0] <= solving_skill:\n            problems.pop(0)\n            problems_solved += 1\n        elif problems[-1] <= solving_skill:\n            problems.pop()\n            problems_solved += 1\n        else:\n            break\n    print(problems_solved)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    left = 0\n    right = n-1\n    count = 0\n    while left <= right:\n        if arr[left] <= k:\n            count += 1\n            left += 1\n        elif arr[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650402619,
  "id": "cmpl-4ypP1VtnMrfYah6rWCq3FMrOTczEm",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:10:32.771439 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\nproblems = list(map(int, input().split()))\n\nleft = 0\nright = len(problems) - 1\n\nsolved = 0\n\nwhile left <= right:\n    if problems[left] <= k:\n        solved += 1\n        left += 1\n    elif problems[right] <= k:\n        solved += 1\n        right -= 1\n    else:\n        break\n\nprint(solved)"
}
2022-04-19 21:10:32.771481 REASON stop
2022-04-19 21:10:32.772072 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\nproblems = list(map(int, input().split()))\n\ndef solve(problems, k):\n    if not problems:\n        return 0\n    if problems[0] <= k:\n        return 1 + solve(problems[1:], k)\n    elif problems[-1] <= k:\n        return 1 + solve(problems[:-1], k)\n    else:\n        return 0\n\nprint(solve(problems, k))"
}
2022-04-19 21:10:32.772136 REASON stop
2022-04-19 21:10:32.772788 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\ndiffs = list(map(int, input().split()))\n\nleft, right = 0, n-1\n\nwhile left <= right and diffs[left] <= k:\n    left += 1\nwhile left <= right and diffs[right] <= k:\n    right -= 1\n\nprint(left + n - 1 - right)"
}
2022-04-19 21:10:32.772874 REASON stop
2022-04-19 21:10:32.797341 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\nproblems = list(map(int, input().split()))\n\nleft = 0\nright = n - 1\n\nsolved = 0\n\nwhile left <= right:\n    if problems[left] <= k and problems[right] <= k:\n        solved += 1\n        left += 1\n        right -= 1\n    elif problems[left] <= k:\n        solved += 1\n        left += 1\n    elif problems[right] <= k:\n        solved += 1\n        right -= 1\n    else:\n        break\n\nprint(solved)"
}
2022-04-19 21:10:32.797472 REASON stop
2022-04-19 21:10:32.798274 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nl, r = 0, n - 1\nans = 0\n\nwhile l <= r:\n    if a[l] <= k:\n        l += 1\n        ans += 1\n    elif a[r] <= k:\n        r -= 1\n        ans += 1\n    else:\n        break\n\nprint(ans)"
}
2022-04-19 21:10:32.798407 REASON stop
2022-04-19 21:10:32.813660 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\n\nleft, right = 0, n-1\nans = 0\nwhile left <= right:\n    if a[left] <= k:\n        ans += 1\n        left += 1\n    elif a[right] <= k:\n        ans += 1\n        right -= 1\n    else:\n        break\n\nprint(ans)"
}
2022-04-19 21:10:32.813781 REASON stop
2022-04-19 21:10:32.819709 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"Mishka and the Contest\"\"\"\n    num_problems, solving_skill = map(int, input().split())\n    problems = list(map(int, input().split()))\n    problems_solved = 0\n    while problems:\n        if problems[0] <= solving_skill:\n            problems.pop(0)\n            problems_solved += 1\n        elif problems[-1] <= solving_skill:\n            problems.pop()\n            problems_solved += 1\n        else:\n            break\n    print(problems_solved)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:10:32.819846 REASON stop
2022-04-19 21:10:32.820910 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    left = 0\n    right = n-1\n    count = 0\n    while left <= right:\n        if arr[left] <= k:\n            count += 1\n            left += 1\n        elif arr[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:10:32.821111 REASON stop
