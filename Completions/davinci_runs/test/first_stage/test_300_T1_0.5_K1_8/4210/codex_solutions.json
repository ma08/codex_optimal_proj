["\n\nfrom sys import stdin\n\nn, k = [int(x) for x in stdin.readline().split()]\na = [int(x) for x in stdin.readline().split()]\n\n# a = [45, 1, 10, 12, 11, 7]\n# n, k = 6, 11\n\n# a = [2, 78, 4, 10]\n# n, k = 4, 2\n\n# a = [3, 7, 19, 3, 3]\n# n, k = 5, 2\n\n\ndef get_digits(a):\n    return len(str(a))\n\n\ndef concatenate(a, b):\n    return int(str(a) + str(b))\n\n\ndef is_divisible(a, b, k):\n    return concatenate(a, b) % k == 0\n\n\ndef get_divisors(k):\n    divisors = []\n\n    for i in range(1, k + 1):\n        if k % i == 0:\n            divisors.append(i)\n\n    return divisors\n\n\ndef get_counts(a):\n    counts = {}\n\n    for num in a:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            counts[num] += 1\n\n    return counts\n\n\ndef get_count_of_pairs_with_divisors(a, k):\n    \"\"\"\n    Return count of pairs of numbers that when concatenated are divisible by k\n    \"\"\"\n    a_counts = get_counts(a)\n    k_divisors = get_divisors(k)\n\n    count = 0\n\n    for divisor in k_divisors:\n        divisor_count = 0\n        for num, num_count in a_counts.items():\n            if num % divisor == 0:\n                divisor_count += num_count\n\n        count += (divisor_count * (divisor_count - 1)) / 2\n\n    return count\n\n\ndef get_count_of_pairs_without_divisors(a, k):\n    \"\"\"\n    Return count of pairs of numbers that when concatenated are not divisible by k\n    \"\"\"\n    count = 0\n\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if not is_divisible(a[i], a[j], k):\n                count += 1\n\n    return count\n\n\ndef get_count_of_pairs(a, k):\n    \"\"\"\n    Return count of pairs of numbers that when concatenated are divisible by k\n    \"\"\"\n    return get_count_of_pairs_with_divisors(a, k) + get_count_of_pairs_without_divisors(a, k)\n\n\nprint(int(get_count_of_pairs(a, k)))", "\nimport sys\nsys.setrecursionlimit(10000)\n\ndef main():\n    n, k = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n\n    def is_divisible(x, y):\n        return int(str(x) + str(y)) % k == 0\n\n    def count_divisible(i):\n        total = 0\n        for j in range(i):\n            if is_divisible(a[i], a[j]):\n                total += 1\n        return total + count_divisible(i + 1) if i < n - 1 else 0\n\n    print(count_divisible(0))\n\n\nif __name__ == '__main__':\n    main()", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n):\n    for j in range(n):\n        if i==j:\n            continue\n        if (str(a[i])+str(a[j])) % k == 0:\n            count += 1\n\nprint(count)", "\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if int(str(a[i]) + str(a[j])) % k == 0:\n                res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if (a[i] * 10 ** len(str(a[j])) + a[j]) % k == 0:\n                    ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n# Solution\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nmod_counts = [0] * k\nfor x in a:\n    mod_counts[x % k] += 1\n\ncount = 0\nif mod_counts[0] > 1:\n    count += mod_counts[0] * (mod_counts[0] - 1) // 2\nfor i in range(1, k // 2 + 1):\n    if i == k - i:\n        count += mod_counts[i] * (mod_counts[i] - 1) // 2\n    else:\n        count += mod_counts[i] * mod_counts[k - i]\n\nprint(count)", "\n\ndef main():\n    \"\"\"\n    We need to find the number of pairs of numbers that are divisible by k\n    when concatenated.\n    \"\"\"\n    n, k = map(int, input().split())\n    nums = map(int, input().split())\n\n    # Map each number to its remainder when divided by k\n    rems = {}\n    for num in nums:\n        rem = num % k\n        if rem not in rems:\n            rems[rem] = 0\n        rems[rem] += 1\n\n    # Count the number of pairs that are divisible by k\n    count = 0\n    for rem in rems:\n        count += ((rems[rem] * (rems[rem] - 1)) // 2)\n\n    # Count the number of pairs with the same remainder\n    if 0 in rems:\n        count += ((rems[0] * (rems[0] - 1)) // 2)\n\n    for i in range(1, k):\n        if i in rems and (k - i) in rems:\n            count += (rems[i] * rems[k - i])\n\n    print(count)\n\nif __name__ == '__main__':\n    main()"]