2022-04-19 23:29:29.577826 """
There are N points in a D-dimensional space.
The coordinates of the i-th point are (X_{i1}, X_{i2}, ..., X_{iD}).
The distance between two points with coordinates (y_1, y_2, ..., y_D) and (z_1, z_2, ..., z_D) is \sqrt{(y_1 - z_1)^2 + (y_2 - z_2)^2 + ... + (y_D - z_D)^2}.
How many pairs (i, j) (i < j) are there such that the distance between the i-th point and the j-th point is an integer?

-----Constraints-----
 - All values in input are integers.
 - 2 \leq N \leq 10
 - 1 \leq D \leq 10
 - -20 \leq X_{ij} \leq 20
 - No two given points have the same coordinates. That is, if i \neq j, there exists k such that X_{ik} \neq X_{jk}.

-----Input-----
Input is given from Standard Input in the following format:
N D
X_{11} X_{12} ... X_{1D}
X_{21} X_{22} ... X_{2D}
\vdots
X_{N1} X_{N2} ... X_{ND}

-----Output-----
Print the number of pairs (i, j) (i < j) such that the distance between the i-th point and the j-th point is an integer.

-----Sample Input-----
3 2
1 2
5 5
-2 8

-----Sample Output-----
1

The number of pairs with an integer distance is one, as follows:
 - The distance between the first point and the second point is \sqrt{|1-5|^2 + |2-5|^2} = 5, which is an integer.
 - The distance between the second point and the third point is \sqrt{|5-(-2)|^2 + |5-8|^2} = \sqrt{58}, which is not an integer.
 - The distance between the third point and the first point is \sqrt{|-2-1|^2+|8-2|^2} = 3\sqrt{5}, which is not an integer.
"""
2022-04-19 23:29:29.577838 --------------------------
2022-04-19 23:29:29.577961 using api key derek
2022-04-19 23:29:46.857544 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nfrom math import sqrt\n\n# read input\nN, D = map(int, sys.stdin.readline().split())\n\npoints = []\nfor _ in range(N):\n    points.append(list(map(int, sys.stdin.readline().split())))\n\n# brute force\ncount = 0\nfor i in range(N):\n    for j in range(i):\n        dist = 0\n        for k in range(D):\n            dist += (points[i][k] - points[j][k])**2\n        dist = sqrt(dist)\n        if dist == int(dist):\n            count += 1\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n#import sys\n#import math\n\n\ndef main():\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    #print(n, d)\n    #print(points)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = 0\n            for k in range(d):\n                dist += (points[i][k] - points[j][k]) ** 2\n            if dist ** 0.5 == int(dist ** 0.5):\n                ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    # Get input\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n\n    # Calculate all possible distances\n    distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances.append(math.sqrt(sum([(points[i][k] - points[j][k])**2 for k in range(d)])))\n\n    # Count distances that are integers\n    integer_count = 0\n    for distance in distances:\n        if distance == int(distance):\n            integer_count += 1\n\n    # Print result\n    print(integer_count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, d = map(int, input().strip().split())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, input().strip().split())))\n\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k])**2\n            if distance ** 0.5 == int(distance ** 0.5):\n                result += 1\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\nimport itertools\nimport math\n\ndef get_strings():\n    N, D = map(int, input().split(\" \"))\n    points = []\n    for i in range(N):\n        points.append(list(map(int, input().split(\" \"))))\n    return N, D, points\n\ndef main():\n    N, D, points = get_strings()\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k]) ** 2\n            dist = math.sqrt(dist)\n            if dist == int(dist):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport math\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    N, D = map(int, lines[0].split())\n    points = [list(map(int, line.split())) for line in lines[1:]]\n    print(count_pairs_with_integer_distance(points))\n\ndef count_pairs_with_integer_distance(points):\n    counter = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if is_integer(get_distance(points[i], points[j])):\n                counter += 1\n    return counter\n\ndef get_distance(point1, point2):\n    sum = 0\n    for dim in range(len(point1)):\n        sum += (point1[dim] - point2[dim]) ** 2\n    return math.sqrt(sum)\n\ndef is_integer(num):\n    return num.is_integer()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = sum(map(lambda x: (x[0]-x[1])**2, zip(points[i], points[j])))\n            if math.sqrt(dist).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, d = map(int, input().split())\n    x = []\n    for i in range(n):\n        x.append(list(map(int, input().split())))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = 0\n            for k in range(d):\n                dist += (x[i][k] - x[j][k]) ** 2\n            if dist ** 0.5 == int(dist ** 0.5):\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650410969,
  "id": "cmpl-4yrZhESLzwtvyztm37M8MvLG5xlht",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 23:29:46.857875 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nfrom math import sqrt\n\n# read input\nN, D = map(int, sys.stdin.readline().split())\n\npoints = []\nfor _ in range(N):\n    points.append(list(map(int, sys.stdin.readline().split())))\n\n# brute force\ncount = 0\nfor i in range(N):\n    for j in range(i):\n        dist = 0\n        for k in range(D):\n            dist += (points[i][k] - points[j][k])**2\n        dist = sqrt(dist)\n        if dist == int(dist):\n            count += 1\n\nprint(count)"
}
2022-04-19 23:29:46.857912 REASON stop
2022-04-19 23:29:46.858875 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n#import sys\n#import math\n\n\ndef main():\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    #print(n, d)\n    #print(points)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = 0\n            for k in range(d):\n                dist += (points[i][k] - points[j][k]) ** 2\n            if dist ** 0.5 == int(dist ** 0.5):\n                ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 23:29:46.858956 REASON stop
2022-04-19 23:29:46.859431 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    # Get input\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n\n    # Calculate all possible distances\n    distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances.append(math.sqrt(sum([(points[i][k] - points[j][k])**2 for k in range(d)])))\n\n    # Count distances that are integers\n    integer_count = 0\n    for distance in distances:\n        if distance == int(distance):\n            integer_count += 1\n\n    # Print result\n    print(integer_count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:29:46.859497 REASON stop
2022-04-19 23:29:46.862240 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, d = map(int, input().strip().split())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, input().strip().split())))\n\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k])**2\n            if distance ** 0.5 == int(distance ** 0.5):\n                result += 1\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:29:46.862324 REASON stop
2022-04-19 23:29:46.877645 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\nimport itertools\nimport math\n\ndef get_strings():\n    N, D = map(int, input().split(\" \"))\n    points = []\n    for i in range(N):\n        points.append(list(map(int, input().split(\" \"))))\n    return N, D, points\n\ndef main():\n    N, D, points = get_strings()\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k]) ** 2\n            dist = math.sqrt(dist)\n            if dist == int(dist):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:29:46.877789 REASON stop
2022-04-19 23:29:46.888031 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport math\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    N, D = map(int, lines[0].split())\n    points = [list(map(int, line.split())) for line in lines[1:]]\n    print(count_pairs_with_integer_distance(points))\n\ndef count_pairs_with_integer_distance(points):\n    counter = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if is_integer(get_distance(points[i], points[j])):\n                counter += 1\n    return counter\n\ndef get_distance(point1, point2):\n    sum = 0\n    for dim in range(len(point1)):\n        sum += (point1[dim] - point2[dim]) ** 2\n    return math.sqrt(sum)\n\ndef is_integer(num):\n    return num.is_integer()\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:29:46.888183 REASON stop
2022-04-19 23:29:46.889031 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = sum(map(lambda x: (x[0]-x[1])**2, zip(points[i], points[j])))\n            if math.sqrt(dist).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:29:46.889144 REASON stop
2022-04-19 23:29:46.890072 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, d = map(int, input().split())\n    x = []\n    for i in range(n):\n        x.append(list(map(int, input().split())))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = 0\n            for k in range(d):\n                dist += (x[i][k] - x[j][k]) ** 2\n            if dist ** 0.5 == int(dist ** 0.5):\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 23:29:46.890265 REASON stop
