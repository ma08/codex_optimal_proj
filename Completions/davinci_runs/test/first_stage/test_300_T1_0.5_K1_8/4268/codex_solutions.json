["\n\nimport math\n\ndef main():\n    # Get input\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n\n    # Calculate all possible distances\n    distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances.append(math.sqrt(sum([(points[i][k] - points[j][k])**2 for k in range(d)])))\n\n    # Count distances that are integers\n    integer_count = 0\n    for distance in distances:\n        if distance == int(distance):\n            integer_count += 1\n\n    # Print result\n    print(integer_count)\n\nif __name__ == '__main__':\n    main()", "\n\n#import sys\n#import math\n\n\ndef main():\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    #print(n, d)\n    #print(points)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = 0\n            for k in range(d):\n                dist += (points[i][k] - points[j][k]) ** 2\n            if dist ** 0.5 == int(dist ** 0.5):\n                ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport math\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    N, D = map(int, lines[0].split())\n    points = [list(map(int, line.split())) for line in lines[1:]]\n    print(count_pairs_with_integer_distance(points))\n\ndef count_pairs_with_integer_distance(points):\n    counter = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if is_integer(get_distance(points[i], points[j])):\n                counter += 1\n    return counter\n\ndef get_distance(point1, point2):\n    sum = 0\n    for dim in range(len(point1)):\n        sum += (point1[dim] - point2[dim]) ** 2\n    return math.sqrt(sum)\n\ndef is_integer(num):\n    return num.is_integer()\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, d = map(int, input().split())\n    x = []\n    for i in range(n):\n        x.append(list(map(int, input().split())))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = 0\n            for k in range(d):\n                dist += (x[i][k] - x[j][k]) ** 2\n            if dist ** 0.5 == int(dist ** 0.5):\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, d = map(int, input().strip().split())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, input().strip().split())))\n\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k])**2\n            if distance ** 0.5 == int(distance ** 0.5):\n                result += 1\n    print(result)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = sum(map(lambda x: (x[0]-x[1])**2, zip(points[i], points[j])))\n            if math.sqrt(dist).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\nimport itertools\nimport math\n\ndef get_strings():\n    N, D = map(int, input().split(\" \"))\n    points = []\n    for i in range(N):\n        points.append(list(map(int, input().split(\" \"))))\n    return N, D, points\n\ndef main():\n    N, D, points = get_strings()\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k]) ** 2\n            dist = math.sqrt(dist)\n            if dist == int(dist):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nfrom math import sqrt\n\n# read input\nN, D = map(int, sys.stdin.readline().split())\n\npoints = []\nfor _ in range(N):\n    points.append(list(map(int, sys.stdin.readline().split())))\n\n# brute force\ncount = 0\nfor i in range(N):\n    for j in range(i):\n        dist = 0\n        for k in range(D):\n            dist += (points[i][k] - points[j][k])**2\n        dist = sqrt(dist)\n        if dist == int(dist):\n            count += 1\n\nprint(count)"]