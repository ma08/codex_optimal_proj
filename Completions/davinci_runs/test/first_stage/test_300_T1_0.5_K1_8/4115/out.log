2022-04-19 22:07:15.024237 """
Takahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.
Given is a string S. Find the minimum number of hugs needed to make S palindromic.

-----Constraints-----
 - S is a string consisting of lowercase English letters.
 - The length of S is between 1 and 100 (inclusive).

-----Input-----
Input is given from Standard Input in the following format:
S

-----Output-----
Print the minimum number of hugs needed to make S palindromic.

-----Sample Input-----
redcoder

-----Sample Output-----
1

For example, we can change the fourth character to o and get a palindrome redooder.
"""
2022-04-19 22:07:15.024250 --------------------------
2022-04-19 22:07:15.024355 using api key derek
2022-04-19 22:07:15.204575 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-19 22:07:20.209948 """
Takahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.
Given is a string S. Find the minimum number of hugs needed to make S palindromic.

-----Constraints-----
 - S is a string consisting of lowercase English letters.
 - The length of S is between 1 and 100 (inclusive).

-----Input-----
Input is given from Standard Input in the following format:
S

-----Output-----
Print the minimum number of hugs needed to make S palindromic.

-----Sample Input-----
redcoder

-----Sample Output-----
1

For example, we can change the fourth character to o and get a palindrome redooder.
"""
2022-04-19 22:07:20.209989 --------------------------
2022-04-19 22:07:20.210103 using api key derek
2022-04-19 22:07:32.602199 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ns = input()\n\ndef palindrome(s):\n    if len(s) == 1:\n        return 0\n    elif len(s) == 2:\n        if s[0] == s[1]:\n            return 0\n        else:\n            return 1\n    else:\n        if s[0] == s[-1]:\n            return palindrome(s[1:-1])\n        else:\n            return min(palindrome(s[1:]), palindrome(s[:-1])) + 1\n\nprint(palindrome(s))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ns = input()\n\nif len(s) == 1:\n    print(0)\n    exit()\n\nans = 0\nfor i in range(int(len(s) / 2)):\n    if s[i] != s[-i - 1]:\n        ans += 1\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nS = input()\n\ndef isPalindrome(S):\n    for i in range(int(len(S)/2)):\n        if S[i] != S[len(S)-i-1]:\n            return False\n    return True\n\ndef minHugs(S):\n    if isPalindrome(S):\n        return 0\n    else:\n        for i in range(int(len(S)/2)):\n            if S[i] != S[len(S)-i-1]:\n                return min(minHugs(S[:i]+S[len(S)-i-1]+S[i+1:]), minHugs(S[:len(S)-i-1]+S[i]+S[len(S)-i:]))+1\n        return 1\n\nprint(minHugs(S))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    length = len(s)\n    if length % 2 == 0:\n        print(length - 1)\n    else:\n        print(length)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ns = list(input())\nn = len(s)\nans = 0\n\nfor i in range(n//2):\n    if s[i] != s[n-1-i]:\n        ans += 1\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\n\ndef main():\n    \"\"\"\n    \u30e1\u30a4\u30f3\u51e6\u7406\n    \"\"\"\n    s = sys.stdin.readline().rstrip()\n    if s == s[::-1]:\n        print(0)\n    else:\n        print(1)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\ndef main():\n    S = input()\n    if isPalindrome(S):\n        print(0)\n    else:\n        if S[0] == S[-1]:\n            print(1)\n        else:\n            print(2)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650406040,
  "id": "cmpl-4yqICxQ1C9fgOVkfbdweRLmu6Y5JN",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:07:32.602524 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ns = input()\n\ndef palindrome(s):\n    if len(s) == 1:\n        return 0\n    elif len(s) == 2:\n        if s[0] == s[1]:\n            return 0\n        else:\n            return 1\n    else:\n        if s[0] == s[-1]:\n            return palindrome(s[1:-1])\n        else:\n            return min(palindrome(s[1:]), palindrome(s[:-1])) + 1\n\nprint(palindrome(s))"
}
2022-04-19 22:07:32.602563 REASON stop
2022-04-19 22:07:32.603080 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ns = input()\n\nif len(s) == 1:\n    print(0)\n    exit()\n\nans = 0\nfor i in range(int(len(s) / 2)):\n    if s[i] != s[-i - 1]:\n        ans += 1\n\nprint(ans)"
}
2022-04-19 22:07:32.603138 REASON stop
2022-04-19 22:07:32.603631 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nS = input()\n\ndef isPalindrome(S):\n    for i in range(int(len(S)/2)):\n        if S[i] != S[len(S)-i-1]:\n            return False\n    return True\n\ndef minHugs(S):\n    if isPalindrome(S):\n        return 0\n    else:\n        for i in range(int(len(S)/2)):\n            if S[i] != S[len(S)-i-1]:\n                return min(minHugs(S[:i]+S[len(S)-i-1]+S[i+1:]), minHugs(S[:len(S)-i-1]+S[i]+S[len(S)-i:]))+1\n        return 1\n\nprint(minHugs(S))"
}
2022-04-19 22:07:32.603695 REASON stop
2022-04-19 22:07:32.637853 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    length = len(s)\n    if length % 2 == 0:\n        print(length - 1)\n    else:\n        print(length)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:07:32.637978 REASON stop
2022-04-19 22:07:32.654661 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ns = list(input())\nn = len(s)\nans = 0\n\nfor i in range(n//2):\n    if s[i] != s[n-1-i]:\n        ans += 1\n\nprint(ans)"
}
2022-04-19 22:07:32.654786 REASON stop
2022-04-19 22:07:32.655854 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)"
}
2022-04-19 22:07:32.655947 REASON stop
2022-04-19 22:07:32.656692 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\n\ndef main():\n    \"\"\"\n    \u30e1\u30a4\u30f3\u51e6\u7406\n    \"\"\"\n    s = sys.stdin.readline().rstrip()\n    if s == s[::-1]:\n        print(0)\n    else:\n        print(1)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:07:32.656939 REASON stop
2022-04-19 22:07:32.657620 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\ndef main():\n    S = input()\n    if isPalindrome(S):\n        print(0)\n    else:\n        if S[0] == S[-1]:\n            print(1)\n        else:\n            print(2)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:07:32.657685 REASON stop
