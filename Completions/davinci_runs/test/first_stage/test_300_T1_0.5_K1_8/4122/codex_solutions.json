["\n\ndef main():\n    H, n = map(int, input().split())\n    d = list(map(int, input().split()))\n    d.append(H)\n    d.sort()\n    # print(d)\n    if d[0] > 0:\n        print(-1)\n        return\n    if d[0] == 0:\n        print(1)\n        return\n    if d[0] == d[-1]:\n        print(H//d[0] + 1)\n        return\n    ans = 0\n    for i in range(n):\n        if d[i] < 0:\n            ans += d[i]\n    ans = -ans\n    # print(ans)\n    if ans <= H:\n        print(ans)\n        return\n    if d[0] < 0:\n        print(-1)\n        return\n    for i in range(n):\n        if d[i] >= 0:\n            ans = d[i]\n            break\n    ans = ans * (H//ans) + 1\n    print(ans)\n    return\n\nif __name__ == '__main__':\n    main()", "\n\nH, n = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nif H < 0:\n    print(0)\n    exit(0)\n\n# dp[i] = the number of rounds after which the monster is dead\ndp = [0 for _ in range(n)]\ndp[0] = d[0]\nfor i in range(1, n):\n    dp[i] = max(dp[i - 1] + d[i], d[i])\n\nif dp[-1] < 0:\n    print(-1)\nelse:\n    print(H // dp[-1] * n + (H % dp[-1] - 1) // d[-1] + 1)", "\ndef main():\n    h, n = map(int, input().split())\n    d = list(map(int, input().split()))\n    for i in range(n):\n        h += d[i]\n        if h <= 0:\n            print(i+1)\n            break\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# First attempt\n# Read input\nh, n = map(int, input().split())\nd = [int(i) for i in input().split()]\n\n# Initialize the monster's current health\ncurr_h = h\n\n# Iterate through the list of damage values\nfor i in range(n):\n    # Calculate the new health\n    curr_h += d[i]\n    # If the monster's health is <= 0, print the current round and break\n    if curr_h <= 0:\n        print(i + 1)\n        break\n# Else, print -1 (no round will kill the monster)\nelse:\n    print(-1)\n\n# Second attempt\n# Read input\nh, n = map(int, input().split())\nd = [int(i) for i in input().split()]\n\n# Initialize the monster's current health\ncurr_h = h\n\n# Iterate through the list of damage values\nfor i in range(n):\n    # Calculate the new health\n    curr_h += d[i]\n    # If the monster's health is <= 0, print the current round and break\n    if curr_h <= 0:\n        print(i + 1)\n        break\n# Else, print -1 (no round will kill the monster)\nelse:\n    print(-1)", "\n\nH, n = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nif H <= 0:\n    print(1)\n    exit()\n\nh = H\nfor i in range(n):\n    h += d[i]\n    if h <= 0:\n        print(i + 1)\n        exit()\n\nprint(-1)", "\n\ndef main():\n    h, n = map(int, input().split())\n    d = list(map(int, input().split()))\n    if h <= 0:\n        print(0)\n        return\n    if sum(d) >= 0:\n        print(-1)\n        return\n    for i in range(n):\n        h += d[i]\n        if h <= 0:\n            print(i+1)\n            return\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef solve(H, n, d):\n    \"\"\"\n    >>> solve(1000, 6, [-100, -200, -300, 125, 77, -4])\n    9\n    >>> solve(1000000000000, 5, [-1, 0, 0, 0, 0])\n    4999999999996\n    >>> solve(10, 4, [-3, -6, 5, 4])\n    -1\n    \"\"\"\n    k = 0\n    while H > 0:\n        if k == n:\n            k = 0\n        H += d[k]\n        k += 1\n    if H <= 0:\n        return k\n    else:\n        return -1\n\nif __name__ == \"__main__\":\n    H, n = map(int, sys.stdin.readline().strip().split(' '))\n    d = map(int, sys.stdin.readline().strip().split(' '))\n    print solve(H, n, d)", "\n\nimport sys\n\nH, n = [int(x) for x in sys.stdin.readline().split()]\nd = [int(x) for x in sys.stdin.readline().split()]\n\nh = H\nfor i in range(n):\n    h += d[i]\n    if h <= 0:\n        print(i+1)\n        break\nelse:\n    print(-1)"]