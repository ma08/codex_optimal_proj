["\n\n\ndef main():\n    n, d, k = map(int, input().split())\n    if d == 1:\n        if n > 1:\n            print(\"YES\")\n            for i in range(2, n+1):\n                print(1, i)\n        else:\n            print(\"NO\")\n    else:\n        if n > d * k:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            a = []\n            for i in range(1, n+1):\n                if i % k == 0:\n                    a.append(i)\n                else:\n                    a.append(i - (i % k))\n            for i in range(1, n):\n                print(a[i], i+1)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport numpy as np\n\ndef main():\n    n, d, k = map(int, sys.stdin.readline().split())\n    if d == 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(1, i + 1)\n    elif d == 2:\n        if n == 2:\n            print(\"YES\")\n            print(1, 2)\n        else:\n            print(\"NO\")\n    elif d == 3:\n        if n <= k + 1:\n            print(\"YES\")\n            for i in range(1, n):\n                print(1, i + 1)\n        else:\n            print(\"NO\")\n    elif d == 4:\n        if n <= 2 * k + 1:\n            print(\"YES\")\n            for i in range(1, n):\n                print(1, i + 1)\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()", "\nfrom collections import deque\n\nn, d, k = map(int, input().split())\n\nif d == 1:\n    print(\"YES\")\n    for i in range(2, n + 1):\n        print(i, 1)\nelif d == 2:\n    if n == 2:\n        print(\"YES\")\n    elif n == 3:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n    else:\n        print(\"NO\")\nelif d == 3:\n    if n == 3:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n    elif n == 4:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n    elif n == 5:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n    elif n == 6:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n    elif n == 7:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n    elif n == 8:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n    elif n == 9:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n    elif n == 10:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n        print(2, 10)\n    else:\n        print(\"NO\")\nelif d == 4:\n    if n == 4:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n    elif n == 5:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(1, 5)\n    elif n == 6:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n    elif n == 7:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n    elif n == 8:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n    elif n == 9:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n    elif n == 10:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n        print(2, 10)\n    else:\n        print(\"NO\")\nelif d == 5:\n    if n == 5:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n    elif n == 6:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n    elif n == 7:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n    elif n == 8:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n    elif n == 9:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n    elif n == 10:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n        print(2, 10)\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")", "\n\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\n\n\nclass Graph:\n    def __init__(self, n, edges):\n        self.n = n\n        self.edges = edges\n        self.adj = defaultdict(set)\n        for u, v in edges:\n            self.adj[u].add(v)\n            self.adj[v].add(u)\n\n    def is_connected(self):\n        visited = set()\n\n        def dfs(u):\n            visited.add(u)\n            for v in self.adj[u]:\n                if v not in visited:\n                    dfs(v)\n\n        dfs(1)\n        return len(visited) == self.n\n\n    def is_tree(self):\n        return len(self.edges) == self.n - 1 and self.is_connected()\n\n    def is_valid_degree(self, k):\n        for u in range(1, self.n + 1):\n            if len(self.adj[u]) > k:\n                return False\n        return True\n\n    def is_valid_diameter(self, d):\n        def dfs(u, p, path_len):\n            nonlocal max_path_len\n            max_path_len = max(max_path_len, path_len)\n            for v in self.adj[u]:\n                if v != p:\n                    dfs(v, u, path_len + 1)\n\n        max_path_len = 0\n        dfs(1, None, 0)\n        return max_path_len <= d\n\n\ndef main():\n    n, d, k = map(int, input().split())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    g = Graph(n, edges)\n    if g.is_tree() and g.is_valid_degree(k) and g.is_valid_diameter(d):\n        print('YES')\n        for u, v in g.edges:\n            print(u, v)\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, d, k = map(int, sys.stdin.readline().split())\n    if d > (n - 1):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(1, n):\n            print(i + 1, i)\n\nif __name__ == '__main__':\n    main()", "\n\n# \u6811\u7684\u76f4\u5f84\u662f\u6700\u5927\u7684\u8ddd\u79bb\n# \u6811\u7684\u5ea6\u662f\u6bcf\u4e2a\u70b9\u7684\u8fde\u901a\u6570\n# \u6c42\u6811\u7684\u76f4\u5f84\u4e3ad\uff0c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e0d\u8d85\u8fc7k\u7684\u6811\n# \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51faNO\uff0c\u5982\u679c\u5b58\u5728\uff0c\u8f93\u51faYES\uff0c\u7136\u540e\u8f93\u51fa\u8fb9\u7684\u4fe1\u606f\n\nimport sys\n\ndef main():\n    n, d, k = map(int, sys.stdin.readline().strip().split())\n\n    if n == 1:\n        print('YES')\n        return\n    if d == 1:\n        if k >= n - 1:\n            print('YES')\n            for i in range(1, n):\n                print(i + 1, i)\n            return\n        else:\n            print('NO')\n            return\n    if d == 2:\n        if k >= n - 2:\n            print('YES')\n            for i in range(1, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            return\n        else:\n            print('NO')\n            return\n    if d == 3:\n        if k >= n - 2:\n            print('YES')\n            for i in range(2, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            return\n        else:\n            print('NO')\n            return\n    if d == 4:\n        if k >= n - 3:\n            print('YES')\n            for i in range(3, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            print(2, 1)\n            return\n        else:\n            print('NO')\n            return\n    if d == 5:\n        if k >= n - 3:\n            print('YES')\n            for i in range(4, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            print(2, 1)\n            print(3, 2)\n            return\n        else:\n            print('NO')\n            return\n    if d >= 6:\n        if k >= n - 4:\n            print('YES')\n            for i in range(5, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            print(2, 1)\n            print(3, 2)\n            print(4, 3)\n            return\n        else:\n            print('NO')\n            return\n\n\nif __name__ == '__main__':\n    main()", "\n\nn, d, k = map(int, input().split())\n\nif d == 1:\n    print(\"YES\")\n    for i in range(2, n+1):\n        print(1, i)\nelif d == 2:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 3:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 4:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    elif k >= n / 3:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        for i in range(5, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 5:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    elif k >= n / 3:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        for i in range(5, n+1):\n            print(1, i)\n    elif k >= n / 4:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        print(\"5 3\")\n        for i in range(6, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 6:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    elif k >= n / 3:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        for i in range(5, n+1):\n            print(1, i)\n    elif k >= n / 4:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        print(\"5 3\")\n        for i in range(6, n+1):\n            print(1, i)\n    elif k >= n / 5:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        print(\"5 3\")\n        print(\"6 3\")\n        for i in range(7, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")"]