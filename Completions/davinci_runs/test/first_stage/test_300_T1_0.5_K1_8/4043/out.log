2022-04-19 21:20:24.385228 """
You are given three integers $n$, $d$ and $k$.

Your task is to construct an undirected tree on $n$ vertices with diameter $d$ and degree of each vertex at most $k$, or say that it is impossible.

An undirected tree is a connected undirected graph with $n - 1$ edges.

Diameter of a tree is the maximum length of a simple path (a path in which each vertex appears at most once) between all pairs of vertices of this tree.

Degree of a vertex is the number of edges incident to this vertex (i.e. for a vertex $u$ it is the number of edges $(u, v)$ that belong to the tree, where $v$ is any other vertex of a tree).


-----Input-----

The first line of the input contains three integers $n$, $d$ and $k$ ($1 \le n, d, k \le 4 \cdot 10^5$).


-----Output-----

If there is no tree satisfying the conditions above, print only one word "NO" (without quotes).

Otherwise in the first line print "YES" (without quotes), and then print $n - 1$ lines describing edges of a tree satisfying the conditions above. Vertices of the tree must be numbered from $1$ to $n$. You can print edges and vertices connected by an edge in any order. If there are multiple answers, print any of them.1


-----Examples-----
Input
6 3 3

Output
YES
3 1
4 1
1 2
5 2
2 6

Input
6 2 3

Output
NO

Input
10 4 3

Output
YES
2 9
2 10
10 3
3 1
6 10
8 2
4 3
5 6
6 7

Input
8 5 3

Output
YES
2 5
7 2
3 7
3 1
1 6
8 7
4 3
"""
2022-04-19 21:20:24.385238 --------------------------
2022-04-19 21:20:24.385340 using api key sourya
2022-04-19 21:21:50.091772 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.adj = [[] for _ in range(n)]\n\n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n\n    def bfs(self, u):\n        dist = [0] * self.n\n        dist[u] = 1\n        q = [u]\n        while q:\n            u = q.pop()\n            for v in self.adj[u]:\n                if dist[v] == 0:\n                    dist[v] = dist[u] + 1\n                    q.append(v)\n        return max(dist)\n\n    def diameter(self):\n        return max(self.bfs(u) for u in range(self.n))\n\n    def max_degree(self):\n        return max(len(adj) for adj in self.adj)\n\n\ndef construct_tree(n, d, k):\n    if d == 1:\n        if n <= k + 1:\n            g = Graph(n)\n            for u in range(1, n):\n                g.add_edge(u, u + 1)\n            return g\n    elif d == 2:\n        if n <= k + 2:\n            g = Graph(n)\n            for u in range(1, n - 1):\n                g.add_edge(u, u + 1)\n            g.add_edge(1, n - 1)\n            g.add_edge(1, n)\n            return g\n    elif d == 3:\n        if n == 3:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            return g\n        elif n == 4:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            return g\n        elif n == 5:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            return g\n        elif n == 6:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            return g\n        elif n == 7:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            return g\n        elif n == 8:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            return g\n        elif n == 9:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            return g\n        elif n == 10:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            return g\n        elif n == 11:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            return g\n        elif n == 12:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            return g\n        elif n == 13:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            return g\n        elif n == 14:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            return g\n        elif n == 15:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            return g\n        elif n == 16:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            g.add_edge(15, 16)\n            return g\n        elif n == 17:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            g.add_edge(15, 16)\n            g.add_edge(16, 17)\n            return g\n        elif n == 18:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            g.add_edge(15, 16)\n            g.add_edge(16, 17)\n            g.add_edge(17, 18)\n            return g\n        elif n == 19:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            g.add_edge(15, 16)\n            g.add_edge(16, 17)\n            g.add_edge(17, 18)\n            g.add_edge(18, 19)\n            return g\n        elif n == 20:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, d, k = map(int, sys.stdin.readline().split())\n    if d > (n - 1):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(1, n):\n            print(i + 1, i)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\n\n\nclass Graph:\n    def __init__(self, n, edges):\n        self.n = n\n        self.edges = edges\n        self.adj = defaultdict(set)\n        for u, v in edges:\n            self.adj[u].add(v)\n            self.adj[v].add(u)\n\n    def is_connected(self):\n        visited = set()\n\n        def dfs(u):\n            visited.add(u)\n            for v in self.adj[u]:\n                if v not in visited:\n                    dfs(v)\n\n        dfs(1)\n        return len(visited) == self.n\n\n    def is_tree(self):\n        return len(self.edges) == self.n - 1 and self.is_connected()\n\n    def is_valid_degree(self, k):\n        for u in range(1, self.n + 1):\n            if len(self.adj[u]) > k:\n                return False\n        return True\n\n    def is_valid_diameter(self, d):\n        def dfs(u, p, path_len):\n            nonlocal max_path_len\n            max_path_len = max(max_path_len, path_len)\n            for v in self.adj[u]:\n                if v != p:\n                    dfs(v, u, path_len + 1)\n\n        max_path_len = 0\n        dfs(1, None, 0)\n        return max_path_len <= d\n\n\ndef main():\n    n, d, k = map(int, input().split())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    g = Graph(n, edges)\n    if g.is_tree() and g.is_valid_degree(k) and g.is_valid_diameter(d):\n        print('YES')\n        for u, v in g.edges:\n            print(u, v)\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# \u6811\u7684\u76f4\u5f84\u662f\u6700\u5927\u7684\u8ddd\u79bb\n# \u6811\u7684\u5ea6\u662f\u6bcf\u4e2a\u70b9\u7684\u8fde\u901a\u6570\n# \u6c42\u6811\u7684\u76f4\u5f84\u4e3ad\uff0c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e0d\u8d85\u8fc7k\u7684\u6811\n# \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51faNO\uff0c\u5982\u679c\u5b58\u5728\uff0c\u8f93\u51faYES\uff0c\u7136\u540e\u8f93\u51fa\u8fb9\u7684\u4fe1\u606f\n\nimport sys\n\ndef main():\n    n, d, k = map(int, sys.stdin.readline().strip().split())\n\n    if n == 1:\n        print('YES')\n        return\n    if d == 1:\n        if k >= n - 1:\n            print('YES')\n            for i in range(1, n):\n                print(i + 1, i)\n            return\n        else:\n            print('NO')\n            return\n    if d == 2:\n        if k >= n - 2:\n            print('YES')\n            for i in range(1, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            return\n        else:\n            print('NO')\n            return\n    if d == 3:\n        if k >= n - 2:\n            print('YES')\n            for i in range(2, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            return\n        else:\n            print('NO')\n            return\n    if d == 4:\n        if k >= n - 3:\n            print('YES')\n            for i in range(3, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            print(2, 1)\n            return\n        else:\n            print('NO')\n            return\n    if d == 5:\n        if k >= n - 3:\n            print('YES')\n            for i in range(4, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            print(2, 1)\n            print(3, 2)\n            return\n        else:\n            print('NO')\n            return\n    if d >= 6:\n        if k >= n - 4:\n            print('YES')\n            for i in range(5, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            print(2, 1)\n            print(3, 2)\n            print(4, 3)\n            return\n        else:\n            print('NO')\n            return\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, d, k = map(int, input().split())\n\nif d == 1:\n    print(\"YES\")\n    for i in range(2, n+1):\n        print(1, i)\nelif d == 2:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 3:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 4:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    elif k >= n / 3:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        for i in range(5, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 5:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    elif k >= n / 3:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        for i in range(5, n+1):\n            print(1, i)\n    elif k >= n / 4:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        print(\"5 3\")\n        for i in range(6, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 6:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    elif k >= n / 3:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        for i in range(5, n+1):\n            print(1, i)\n    elif k >= n / 4:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        print(\"5 3\")\n        for i in range(6, n+1):\n            print(1, i)\n    elif k >= n / 5:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        print(\"5 3\")\n        print(\"6 3\")\n        for i in range(7, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, d, k = map(int, input().split())\n    if d == 1:\n        if n > 1:\n            print(\"YES\")\n            for i in range(2, n+1):\n                print(1, i)\n        else:\n            print(\"NO\")\n    else:\n        if n > d * k:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            a = []\n            for i in range(1, n+1):\n                if i % k == 0:\n                    a.append(i)\n                else:\n                    a.append(i - (i % k))\n            for i in range(1, n):\n                print(a[i], i+1)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\nimport numpy as np\n\ndef main():\n    n, d, k = map(int, sys.stdin.readline().split())\n    if d == 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(1, i + 1)\n    elif d == 2:\n        if n == 2:\n            print(\"YES\")\n            print(1, 2)\n        else:\n            print(\"NO\")\n    elif d == 3:\n        if n <= k + 1:\n            print(\"YES\")\n            for i in range(1, n):\n                print(1, i + 1)\n        else:\n            print(\"NO\")\n    elif d == 4:\n        if n <= 2 * k + 1:\n            print(\"YES\")\n            for i in range(1, n):\n                print(1, i + 1)\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\nfrom collections import deque\n\nn, d, k = map(int, input().split())\n\nif d == 1:\n    print(\"YES\")\n    for i in range(2, n + 1):\n        print(i, 1)\nelif d == 2:\n    if n == 2:\n        print(\"YES\")\n    elif n == 3:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n    else:\n        print(\"NO\")\nelif d == 3:\n    if n == 3:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n    elif n == 4:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n    elif n == 5:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n    elif n == 6:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n    elif n == 7:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n    elif n == 8:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n    elif n == 9:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n    elif n == 10:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n        print(2, 10)\n    else:\n        print(\"NO\")\nelif d == 4:\n    if n == 4:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n    elif n == 5:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(1, 5)\n    elif n == 6:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n    elif n == 7:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n    elif n == 8:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n    elif n == 9:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n    elif n == 10:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n        print(2, 10)\n    else:\n        print(\"NO\")\nelif d == 5:\n    if n == 5:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n    elif n == 6:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n    elif n == 7:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n    elif n == 8:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n    elif n == 9:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n    elif n == 10:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n        print(2, 10)\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")"
    }
  ],
  "created": 1650403224,
  "id": "cmpl-4ypYmie1qh0DuLvww2GnYN96qhfje",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 21:21:50.092335 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.adj = [[] for _ in range(n)]\n\n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n\n    def bfs(self, u):\n        dist = [0] * self.n\n        dist[u] = 1\n        q = [u]\n        while q:\n            u = q.pop()\n            for v in self.adj[u]:\n                if dist[v] == 0:\n                    dist[v] = dist[u] + 1\n                    q.append(v)\n        return max(dist)\n\n    def diameter(self):\n        return max(self.bfs(u) for u in range(self.n))\n\n    def max_degree(self):\n        return max(len(adj) for adj in self.adj)\n\n\ndef construct_tree(n, d, k):\n    if d == 1:\n        if n <= k + 1:\n            g = Graph(n)\n            for u in range(1, n):\n                g.add_edge(u, u + 1)\n            return g\n    elif d == 2:\n        if n <= k + 2:\n            g = Graph(n)\n            for u in range(1, n - 1):\n                g.add_edge(u, u + 1)\n            g.add_edge(1, n - 1)\n            g.add_edge(1, n)\n            return g\n    elif d == 3:\n        if n == 3:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            return g\n        elif n == 4:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            return g\n        elif n == 5:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            return g\n        elif n == 6:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            return g\n        elif n == 7:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            return g\n        elif n == 8:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            return g\n        elif n == 9:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            return g\n        elif n == 10:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            return g\n        elif n == 11:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            return g\n        elif n == 12:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            return g\n        elif n == 13:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            return g\n        elif n == 14:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            return g\n        elif n == 15:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            return g\n        elif n == 16:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            g.add_edge(15, 16)\n            return g\n        elif n == 17:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            g.add_edge(15, 16)\n            g.add_edge(16, 17)\n            return g\n        elif n == 18:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            g.add_edge(15, 16)\n            g.add_edge(16, 17)\n            g.add_edge(17, 18)\n            return g\n        elif n == 19:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11)\n            g.add_edge(11, 12)\n            g.add_edge(12, 13)\n            g.add_edge(13, 14)\n            g.add_edge(14, 15)\n            g.add_edge(15, 16)\n            g.add_edge(16, 17)\n            g.add_edge(17, 18)\n            g.add_edge(18, 19)\n            return g\n        elif n == 20:\n            g = Graph(n)\n            g.add_edge(1, 2)\n            g.add_edge(2, 3)\n            g.add_edge(3, 4)\n            g.add_edge(3, 5)\n            g.add_edge(4, 6)\n            g.add_edge(5, 7)\n            g.add_edge(6, 8)\n            g.add_edge(7, 9)\n            g.add_edge(9, 10)\n            g.add_edge(10, 11"
}
2022-04-19 21:21:50.092426 REASON length
2022-04-19 21:21:50.092434 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, d, k = map(int, sys.stdin.readline().split())\n    if d > (n - 1):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(1, n):\n            print(i + 1, i)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:21:50.092506 REASON stop
2022-04-19 21:21:50.093344 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\n\n\nclass Graph:\n    def __init__(self, n, edges):\n        self.n = n\n        self.edges = edges\n        self.adj = defaultdict(set)\n        for u, v in edges:\n            self.adj[u].add(v)\n            self.adj[v].add(u)\n\n    def is_connected(self):\n        visited = set()\n\n        def dfs(u):\n            visited.add(u)\n            for v in self.adj[u]:\n                if v not in visited:\n                    dfs(v)\n\n        dfs(1)\n        return len(visited) == self.n\n\n    def is_tree(self):\n        return len(self.edges) == self.n - 1 and self.is_connected()\n\n    def is_valid_degree(self, k):\n        for u in range(1, self.n + 1):\n            if len(self.adj[u]) > k:\n                return False\n        return True\n\n    def is_valid_diameter(self, d):\n        def dfs(u, p, path_len):\n            nonlocal max_path_len\n            max_path_len = max(max_path_len, path_len)\n            for v in self.adj[u]:\n                if v != p:\n                    dfs(v, u, path_len + 1)\n\n        max_path_len = 0\n        dfs(1, None, 0)\n        return max_path_len <= d\n\n\ndef main():\n    n, d, k = map(int, input().split())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    g = Graph(n, edges)\n    if g.is_tree() and g.is_valid_degree(k) and g.is_valid_diameter(d):\n        print('YES')\n        for u, v in g.edges:\n            print(u, v)\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:21:50.093432 REASON stop
2022-04-19 21:21:50.093978 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# \u6811\u7684\u76f4\u5f84\u662f\u6700\u5927\u7684\u8ddd\u79bb\n# \u6811\u7684\u5ea6\u662f\u6bcf\u4e2a\u70b9\u7684\u8fde\u901a\u6570\n# \u6c42\u6811\u7684\u76f4\u5f84\u4e3ad\uff0c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e0d\u8d85\u8fc7k\u7684\u6811\n# \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51faNO\uff0c\u5982\u679c\u5b58\u5728\uff0c\u8f93\u51faYES\uff0c\u7136\u540e\u8f93\u51fa\u8fb9\u7684\u4fe1\u606f\n\nimport sys\n\ndef main():\n    n, d, k = map(int, sys.stdin.readline().strip().split())\n\n    if n == 1:\n        print('YES')\n        return\n    if d == 1:\n        if k >= n - 1:\n            print('YES')\n            for i in range(1, n):\n                print(i + 1, i)\n            return\n        else:\n            print('NO')\n            return\n    if d == 2:\n        if k >= n - 2:\n            print('YES')\n            for i in range(1, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            return\n        else:\n            print('NO')\n            return\n    if d == 3:\n        if k >= n - 2:\n            print('YES')\n            for i in range(2, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            return\n        else:\n            print('NO')\n            return\n    if d == 4:\n        if k >= n - 3:\n            print('YES')\n            for i in range(3, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            print(2, 1)\n            return\n        else:\n            print('NO')\n            return\n    if d == 5:\n        if k >= n - 3:\n            print('YES')\n            for i in range(4, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            print(2, 1)\n            print(3, 2)\n            return\n        else:\n            print('NO')\n            return\n    if d >= 6:\n        if k >= n - 4:\n            print('YES')\n            for i in range(5, n - 1):\n                print(i + 1, i)\n            print(n, n - 1)\n            print(1, n)\n            print(2, 1)\n            print(3, 2)\n            print(4, 3)\n            return\n        else:\n            print('NO')\n            return\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:21:50.094046 REASON stop
2022-04-19 21:21:50.121684 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, d, k = map(int, input().split())\n\nif d == 1:\n    print(\"YES\")\n    for i in range(2, n+1):\n        print(1, i)\nelif d == 2:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 3:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 4:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    elif k >= n / 3:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        for i in range(5, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 5:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    elif k >= n / 3:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        for i in range(5, n+1):\n            print(1, i)\n    elif k >= n / 4:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        print(\"5 3\")\n        for i in range(6, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")\nelif d == 6:\n    if k >= n - 1:\n        print(\"YES\")\n        for i in range(2, n+1):\n            print(1, i)\n    elif k >= n / 2:\n        print(\"YES\")\n        print(\"3 1\")\n        for i in range(4, n+1):\n            print(1, i)\n    elif k >= n / 3:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        for i in range(5, n+1):\n            print(1, i)\n    elif k >= n / 4:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        print(\"5 3\")\n        for i in range(6, n+1):\n            print(1, i)\n    elif k >= n / 5:\n        print(\"YES\")\n        print(\"3 1\")\n        print(\"4 3\")\n        print(\"5 3\")\n        print(\"6 3\")\n        for i in range(7, n+1):\n            print(1, i)\n    else:\n        print(\"NO\")"
}
2022-04-19 21:21:50.121818 REASON stop
2022-04-19 21:21:50.144364 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, d, k = map(int, input().split())\n    if d == 1:\n        if n > 1:\n            print(\"YES\")\n            for i in range(2, n+1):\n                print(1, i)\n        else:\n            print(\"NO\")\n    else:\n        if n > d * k:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            a = []\n            for i in range(1, n+1):\n                if i % k == 0:\n                    a.append(i)\n                else:\n                    a.append(i - (i % k))\n            for i in range(1, n):\n                print(a[i], i+1)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 21:21:50.144493 REASON stop
2022-04-19 21:21:50.145864 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\nimport numpy as np\n\ndef main():\n    n, d, k = map(int, sys.stdin.readline().split())\n    if d == 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(1, i + 1)\n    elif d == 2:\n        if n == 2:\n            print(\"YES\")\n            print(1, 2)\n        else:\n            print(\"NO\")\n    elif d == 3:\n        if n <= k + 1:\n            print(\"YES\")\n            for i in range(1, n):\n                print(1, i + 1)\n        else:\n            print(\"NO\")\n    elif d == 4:\n        if n <= 2 * k + 1:\n            print(\"YES\")\n            for i in range(1, n):\n                print(1, i + 1)\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 21:21:50.146006 REASON stop
2022-04-19 21:21:50.153240 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\nfrom collections import deque\n\nn, d, k = map(int, input().split())\n\nif d == 1:\n    print(\"YES\")\n    for i in range(2, n + 1):\n        print(i, 1)\nelif d == 2:\n    if n == 2:\n        print(\"YES\")\n    elif n == 3:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n    else:\n        print(\"NO\")\nelif d == 3:\n    if n == 3:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n    elif n == 4:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n    elif n == 5:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n    elif n == 6:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n    elif n == 7:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n    elif n == 8:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n    elif n == 9:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n    elif n == 10:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n        print(2, 10)\n    else:\n        print(\"NO\")\nelif d == 4:\n    if n == 4:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n    elif n == 5:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(1, 5)\n    elif n == 6:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n    elif n == 7:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n    elif n == 8:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n    elif n == 9:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n    elif n == 10:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n        print(2, 10)\n    else:\n        print(\"NO\")\nelif d == 5:\n    if n == 5:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n    elif n == 6:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n    elif n == 7:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n    elif n == 8:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n    elif n == 9:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n    elif n == 10:\n        print(\"YES\")\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(1, 6)\n        print(2, 7)\n        print(3, 8)\n        print(1, 9)\n        print(2, 10)\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")"
}
2022-04-19 21:21:50.153468 REASON stop
