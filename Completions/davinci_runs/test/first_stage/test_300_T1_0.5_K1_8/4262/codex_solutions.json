["\nimport itertools\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    perms = list(itertools.permutations(range(1, N + 1)))\n    print(abs(perms.index(tuple(P)) - perms.index(tuple(Q))))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n\n    p_index = 0\n    q_index = 0\n\n    for i in range(n):\n        if p[i] == i + 1:\n            p_index += 1\n        if q[i] == i + 1:\n            q_index += 1\n\n    print(abs(p_index - q_index))\n\nif __name__ == '__main__':\n    main()", "\n\n#N = int(input())\n#P = list(map(int, input().split()))\n#Q = list(map(int, input().split()))\n\nN = 3\nP = [1, 3, 2]\nQ = [3, 1, 2]\n\n#print(N)\n#print(P)\n#print(Q)\n\nimport math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef nPr(n, r):\n    return factorial(n) / factorial(n - r)\n\ndef permutation_index(permutation):\n    index = 0\n    n = len(permutation)\n    for i in range(n):\n        index += nPr(n - i - 1, 1) * permutation[i]\n    return index\n\nprint(abs(permutation_index(P) - permutation_index(Q)))", "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    p_index = 0\n    q_index = 0\n    for i in range(1, n+1):\n        if p.index(i) > p_index:\n            p_index = p.index(i)\n        if q.index(i) > q_index:\n            q_index = q.index(i)\n    print(abs(p_index - q_index))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n\tn = int(input())\n\tp = list(map(int, input().split()))\n\tq = list(map(int, input().split()))\n\tcount = 0\n\tfor i in range(n):\n\t\tif p[i] != q[i]:\n\t\t\tcount += 1\n\tprint(count-1)\n\nif __name__ == '__main__':\n\tmain()", "\n\n# This solution is not optimal, but it works.\n# I'm sure there's a better way to do this, but I don't know it, so I'll just leave this here.\n\nn = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\np_index = 0\nq_index = 0\n\nfor i in range(1, n + 1):\n    if p[i - 1] == i:\n        p_index += 1\n    if q[i - 1] == i:\n        q_index += 1\n\nprint(abs(p_index - q_index))", "\n\n\"\"\"\n\u6761\u4ef6\u3092\u6e80\u305f\u3059\u9806\u5217\u306e\u6570\u306fN!\u901a\u308a\u3002\n\u9806\u5217P,Q\u306f\u305d\u308c\u305e\u308ca,b\u756a\u76ee\u306b\u5c0f\u3055\u3044\u9806\u5217\u3067\u3042\u308b\u3002\n\u3053\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059a,b\u306e\u7d44\u307f\u5408\u308f\u305b\u306fN!\u901a\u308a\u3042\u308b\u3002\n\u3053\u306e\u3046\u3061\u3001a-b\u304c\u6700\u5c0f\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\u3002\n\"\"\"\n\n# N!\u901a\u308a\u306e\u5168\u3066\u306e\u9806\u5217\u3092\u751f\u6210\u3002\n# \u305d\u308c\u305e\u308c\u306e\u9806\u5217\u306b\u5bfe\u3057\u3066\u3001\u9806\u5217P,Q\u304c\u305d\u308c\u305e\u308ca,b\u756a\u76ee\u306b\u5c0f\u3055\u3044\u9806\u5217\u3067\u3042\u308b\u304b\u3092\u5224\u5b9a\u3002\n# \u305d\u308c\u305e\u308c\u306e\u9806\u5217\u306b\u3064\u3044\u3066\u3001a-b\u3092\u8a08\u7b97\u3002\n# a-b\u304c\u6700\u5c0f\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\u3002\n\n# \u5165\u529b\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# \u9806\u5217\u306e\u751f\u6210\npermutations = [list(i) for i in permutations(range(1, N+1))]\n\n# a-b\u3092\u8a08\u7b97\nab_list = []\nfor i in permutations:\n    a = b = 0\n    for j in range(N):\n        if i[j] < P[j]:\n            a += 1\n        if i[j] < Q[j]:\n            b += 1\n    ab_list.append(abs(a-b))\n\n# a-b\u304c\u6700\u5c0f\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\nprint(min(ab_list))", "\n\nfrom itertools import permutations\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\npermutations = list(permutations(range(1, N + 1)))\n\nprint(abs(permutations.index(P) - permutations.index(Q)))"]