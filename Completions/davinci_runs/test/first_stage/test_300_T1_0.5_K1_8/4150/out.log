2022-04-19 22:29:09.755601 """
There are $n$ students standing in a row. Two coaches are forming two teams â€” the first coach chooses the first team and the second coach chooses the second team.

The $i$-th student has integer programming skill $a_i$. All programming skills are distinct and between $1$ and $n$, inclusive.

Firstly, the first coach will choose the student with maximum programming skill among all students not taken into any team, and $k$ closest students to the left of him and $k$ closest students to the right of him (if there are less than $k$ students to the left or to the right, all of them will be chosen). All students that are chosen leave the row and join the first team. Secondly, the second coach will make the same move (but all students chosen by him join the second team). Then again the first coach will make such move, and so on. This repeats until the row becomes empty (i. e. the process ends when each student becomes to some team).

Your problem is to determine which students will be taken into the first team and which students will be taken into the second team.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 2 \cdot 10^5$) â€” the number of students and the value determining the range of chosen students during each move, respectively.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le n$), where $a_i$ is the programming skill of the $i$-th student. It is guaranteed that all programming skills are distinct.


-----Output-----

Print a string of $n$ characters; $i$-th character should be 1 if $i$-th student joins the first team, or 2 otherwise.


-----Examples-----
Input
5 2
2 4 5 3 1

Output
11111

Input
5 1
2 1 3 5 4

Output
22111

Input
7 1
7 2 1 3 5 4 6

Output
1121122

Input
5 1
2 4 5 3 1

Output
21112



-----Note-----

In the first example the first coach chooses the student on a position $3$, and the row becomes empty (all students join the first team).

In the second example the first coach chooses the student on position $4$, and the row becomes $[2, 1]$ (students with programming skills $[3, 4, 5]$ join the first team). Then the second coach chooses the student on position $1$, and the row becomes empty (and students with programming skills $[1, 2]$ join the second team).

In the third example the first coach chooses the student on position $1$, and the row becomes $[1, 3, 5, 4, 6]$ (students with programming skills $[2, 7]$ join the first team). Then the second coach chooses the student on position $5$, and the row becomes $[1, 3, 5]$ (students with programming skills $[4, 6]$ join the second team). Then the first coach chooses the student on position $3$, and the row becomes $[1]$ (students with programming skills $[3, 5]$ join the first team). And then the second coach chooses the remaining student (and the student with programming skill $1$ joins the second team).

In the fourth example the first coach chooses the student on position $3$, and the row becomes $[2, 1]$ (students with programming skills $[3, 4, 5]$ join the first team). Then the second coach chooses the student on position $1$, and the row becomes empty (and students with programming skills $[1, 2]$ join the second team).
"""
2022-04-19 22:29:09.755630 --------------------------
2022-04-19 22:29:09.755734 using api key derek
2022-04-19 22:30:42.799509 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    a_map = {a[i]: i for i in range(n)}\n    a.sort()\n    ans = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            ans[a_map[a[i]]] = 1\n        else:\n            ans[a_map[a[i]]] = 2\n    print(\"\".join([str(x) for x in ans]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n\n    def get_max(a):\n        m = 0\n        for i in range(n):\n            if a[i] > a[m]:\n                m = i\n        return m\n\n    def get_min(a):\n        m = 0\n        for i in range(n):\n            if a[i] < a[m]:\n                m = i\n        return m\n\n    def get_left(m):\n        return max(0, m - k)\n\n    def get_right(m):\n        return min(n - 1, m + k)\n\n    def update(a, m, c):\n        for i in range(get_left(m), get_right(m) + 1):\n            if a[i] != 0:\n                ans[i] = c\n        return a[:get_left(m)] + a[get_right(m) + 1:]\n\n    c = 1\n    while a:\n        m = get_max(a)\n        a = update(a, m, c)\n        c = 3 - c\n\n    print(''.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# first, find the max skill\nmax_skill = max(a)\n\n# then, find the index of the max skill\nmax_skill_index = a.index(max_skill) + 1\n\n# then, find the left and right indices\nleft_index = max_skill_index - k\nright_index = max_skill_index + k\n\n# then, find the left and right elements\nleft_elements = a[:left_index]\nright_elements = a[right_index:]\n\n# then, find the left and right elements that aren't max skill\nleft_elements_not_max = [i for i in left_elements if i != max_skill]\nright_elements_not_max = [i for i in right_elements if i != max_skill]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list\nleft_elements_not_max_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max]\nright_elements_not_max_not_left = [i for i in right_elements_not_max if i not in left_elements_not_max]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and are in the other list\nleft_elements_not_max_not_right_in_right = [i for i in left_elements_not_max if i in right_elements_not_max]\nright_elements_not_max_not_left_in_left = [i for i in right_elements_not_max if i in left_elements_not_max]\n\n# then, determine which elements are in the left and which are in the right\nleft_elements_not_max_not_right_in_right_left = left_elements_not_max_not_right_in_right[:(len(left_elements_not_max_not_right_in_right) // 2) + len(left_elements_not_max_not_right_in_right) % 2]\nright_elements_not_max_not_right_in_right_right = left_elements_not_max_not_right_in_right[(len(left_elements_not_max_not_right_in_right) // 2) + len(left_elements_not_max_not_right_in_right) % 2:]\nleft_elements_not_max_not_left_in_left_left = right_elements_not_max_not_left_in_left[:(len(right_elements_not_max_not_left_in_left) // 2) + len(right_elements_not_max_not_left_in_left) % 2]\nright_elements_not_max_not_left_in_left_right = right_elements_not_max_not_left_in_left[(len(right_elements_not_max_not_left_in_left) // 2) + len(right_elements_not_max_not_left_in_left) % 2:]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and aren't in the other list\nleft_elements_not_max_not_right_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max and i not in right_elements_not_max_not_left_in_left_right]\nright_elements_not_max_not_left_not_left = [i for i in right_elements_not_max if i not in left_elements_not_max and i not in left_elements_not_max_not_right_in_right_left]\n\n# then, determine which elements are in the left and which are in the right\nleft_elements_not_max_not_right_not_right_left = left_elements_not_max_not_right_not_right[:(len(left_elements_not_max_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right) % 2]\nright_elements_not_max_not_right_not_right_right = left_elements_not_max_not_right_not_right[(len(left_elements_not_max_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right) % 2:]\nleft_elements_not_max_not_left_not_left_left = right_elements_not_max_not_left_not_left[:(len(right_elements_not_max_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left) % 2]\nright_elements_not_max_not_left_not_left_right = right_elements_not_max_not_left_not_left[(len(right_elements_not_max_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left) % 2:]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and aren't in the other list and aren't in the other list\nleft_elements_not_max_not_right_not_right_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max and i not in right_elements_not_max_not_left_in_left_right and i not in right_elements_not_max_not_left_not_left_right]\nright_elements_not_max_not_left_not_left_not_left = [i for i in right_elements_not_max if i not in left_elements_not_max and i not in left_elements_not_max_not_right_in_right_left and i not in left_elements_not_max_not_right_not_right_left]\n\n# then, determine which elements are in the left and which are in the right\nleft_elements_not_max_not_right_not_right_not_right_left = left_elements_not_max_not_right_not_right_not_right[:(len(left_elements_not_max_not_right_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right_not_right) % 2]\nright_elements_not_max_not_right_not_right_not_right_right = left_elements_not_max_not_right_not_right_not_right[(len(left_elements_not_max_not_right_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right_not_right) % 2:]\nleft_elements_not_max_not_left_not_left_not_left_left = right_elements_not_max_not_left_not_left_not_left[:(len(right_elements_not_max_not_left_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left_not_left) % 2]\nright_elements_not_max_not_left_not_left_not_left_right = right_elements_not_max_not_left_not_left_not_left[(len(right_elements_not_max_not_left_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left_not_left) % 2:]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and aren't in the other list and aren't in the other list and aren't in the other list\nleft_elements_not_max_not_right_not_right_not_right_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max and i not in right_elements_not_max_not_left_in_left_right and i not in right_elements_not_max_not_left_not_left_right and i not in right_elements_not_max_not_left_not_left_not_left_right]\nright_elements_not_max_not_left_not_left_not_left_not_left = [i for i in right_elements_not_max if i not in left_elements_not_max and i not in left_elements_not_max_not_right_in_right_left and i not in left_elements_not_max_not_right_not_right_left and i not in left_elements_not_max_not_right_not_right_not_right_left]\n\n# then, determine which elements are in the left and which are in the right\nleft_elements_not_max_not_right_not_right_not_right_not_right_left = left_elements_not_max_not_right_not_right_not_right_not_right[:(len(left_elements_not_max_not_right_not_right_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right_not_right_not_right) % 2]\nright_elements_not_max_not_right_not_right_not_right_not_right_right = left_elements_not_max_not_right_not_right_not_right_not_right[(len(left_elements_not_max_not_right_not_right_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right_not_right_not_right) % 2:]\nleft_elements_not_max_not_left_not_left_not_left_not_left_left = right_elements_not_max_not_left_not_left_not_left_not_left[:(len(right_elements_not_max_not_left_not_left_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left_not_left_not_left) % 2]\nright_elements_not_max_not_left_not_left_not_left_not_left_right = right_elements_not_max_not_left_not_left_not_left_not_left[(len(right_elements_not_max_not_left_not_left_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left_not_left_not_left) % 2:]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and aren't in the other list and aren't in the other list and aren't in the other list and aren't in the other list\nleft_elements_not_max_not_right_not_right_not_right_not_right_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max and i not in right_elements_not_max_not_left_in_left_right and i not in right_elements_not_max_not_left_not_left_right and i not in right_elements_not_max_not_left_not_left_not_left_right and i not in right_elements_not_max_not_left_not_left_not_left_not_left_"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# Solution\nimport sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nfirst_team = [0]*n\nsecond_team = [0]*n\n\na_sorted = sorted(a)\n\nfor i in range(n):\n    index = a.index(a_sorted[i])\n    if index-k >= 0:\n        left = index-k\n    else:\n        left = 0\n    if index+k <= n-1:\n        right = index+k\n    else:\n        right = n-1\n    if i%2 == 0:\n        first_team[left:right+1] = [1]*(right-left+1)\n    else:\n        second_team[left:right+1] = [1]*(right-left+1)\n    a = a[:left] + a[right+1:]\n\nfor i in range(n):\n    if first_team[i] == 1:\n        print(1, end='')\n    else:\n        print(2, end='')\nprint()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport bisect\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# a = [2, 4, 5, 3, 1]\n# n = 5\n# k = 2\n\n# a = [2, 1, 3, 5, 4]\n# n = 5\n# k = 1\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# n = 7\n# k = 1\n\n# a = [2, 4, 5, 3, 1]\n# n = 5\n# k = 1\n\nteam = [0] * n\n\n# print(a)\nwhile len(a) > 0:\n    # print(a)\n    max_skill = max(a)\n    max_skill_index = a.index(max_skill)\n    left_k = min(max_skill_index, k)\n    right_k = min(n - 1 - max_skill_index, k)\n    # print(left_k, right_k)\n    for i in range(max_skill_index - left_k, max_skill_index + right_k + 1):\n        team[i] = 1\n    for i in range(max_skill_index - left_k, max_skill_index + right_k + 1):\n        a.remove(bisect.bisect_left(a, a[i]))\n\nprint(\"\".join(map(str, team)))"
    },
    {
      "finish_reason": "length",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# first coach chooses the student with maximum programming skill\n# among all students not taken into any team, and $k$ closest students to the left of him and $k$ closest students to the right of him\n\n# if there are less than $k$ students to the left or to the right, all of them will be chosen\n\n# first coach chooses the student with maximum programming skill\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\na = [2, 1, 3, 5, 4]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 1, 3, 5, 4]\n# a = [2, 4, 5, 3, 1]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3,"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# 1 <= k <= n <= 200000\n# 1 <= a <= n\n# distinct\n# a = [2, 4, 5, 3, 1]\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    team = [0] * n\n    for i in range(n):\n        ai = a[i]\n        if team[i] == 0:\n            team[i] = 1\n            left = max(0, i - k)\n            right = min(n - 1, i + k)\n            for j in range(left, right + 1):\n                if j != i and a[j] < ai:\n                    team[j] = 1\n    for i in range(n):\n        if team[i] == 0:\n            team[i] = 2\n            left = max(0, i - k)\n            right = min(n - 1, i + k)\n            for j in range(left, right + 1):\n                if j != i and a[j] < ai:\n                    team[j] = 2\n    print(''.join(map(str, team)))\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650407349,
  "id": "cmpl-4yqdJrham9zA66ReCchSAuaCygAw8",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-19 22:30:42.800060 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    a_map = {a[i]: i for i in range(n)}\n    a.sort()\n    ans = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            ans[a_map[a[i]]] = 1\n        else:\n            ans[a_map[a[i]]] = 2\n    print(\"\".join([str(x) for x in ans]))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:30:42.800120 REASON stop
2022-04-19 22:30:42.801281 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n\n    def get_max(a):\n        m = 0\n        for i in range(n):\n            if a[i] > a[m]:\n                m = i\n        return m\n\n    def get_min(a):\n        m = 0\n        for i in range(n):\n            if a[i] < a[m]:\n                m = i\n        return m\n\n    def get_left(m):\n        return max(0, m - k)\n\n    def get_right(m):\n        return min(n - 1, m + k)\n\n    def update(a, m, c):\n        for i in range(get_left(m), get_right(m) + 1):\n            if a[i] != 0:\n                ans[i] = c\n        return a[:get_left(m)] + a[get_right(m) + 1:]\n\n    c = 1\n    while a:\n        m = get_max(a)\n        a = update(a, m, c)\n        c = 3 - c\n\n    print(''.join(map(str, ans)))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-19 22:30:42.801399 REASON stop
2022-04-19 22:30:42.801914 2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# first, find the max skill\nmax_skill = max(a)\n\n# then, find the index of the max skill\nmax_skill_index = a.index(max_skill) + 1\n\n# then, find the left and right indices\nleft_index = max_skill_index - k\nright_index = max_skill_index + k\n\n# then, find the left and right elements\nleft_elements = a[:left_index]\nright_elements = a[right_index:]\n\n# then, find the left and right elements that aren't max skill\nleft_elements_not_max = [i for i in left_elements if i != max_skill]\nright_elements_not_max = [i for i in right_elements if i != max_skill]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list\nleft_elements_not_max_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max]\nright_elements_not_max_not_left = [i for i in right_elements_not_max if i not in left_elements_not_max]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and are in the other list\nleft_elements_not_max_not_right_in_right = [i for i in left_elements_not_max if i in right_elements_not_max]\nright_elements_not_max_not_left_in_left = [i for i in right_elements_not_max if i in left_elements_not_max]\n\n# then, determine which elements are in the left and which are in the right\nleft_elements_not_max_not_right_in_right_left = left_elements_not_max_not_right_in_right[:(len(left_elements_not_max_not_right_in_right) // 2) + len(left_elements_not_max_not_right_in_right) % 2]\nright_elements_not_max_not_right_in_right_right = left_elements_not_max_not_right_in_right[(len(left_elements_not_max_not_right_in_right) // 2) + len(left_elements_not_max_not_right_in_right) % 2:]\nleft_elements_not_max_not_left_in_left_left = right_elements_not_max_not_left_in_left[:(len(right_elements_not_max_not_left_in_left) // 2) + len(right_elements_not_max_not_left_in_left) % 2]\nright_elements_not_max_not_left_in_left_right = right_elements_not_max_not_left_in_left[(len(right_elements_not_max_not_left_in_left) // 2) + len(right_elements_not_max_not_left_in_left) % 2:]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and aren't in the other list\nleft_elements_not_max_not_right_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max and i not in right_elements_not_max_not_left_in_left_right]\nright_elements_not_max_not_left_not_left = [i for i in right_elements_not_max if i not in left_elements_not_max and i not in left_elements_not_max_not_right_in_right_left]\n\n# then, determine which elements are in the left and which are in the right\nleft_elements_not_max_not_right_not_right_left = left_elements_not_max_not_right_not_right[:(len(left_elements_not_max_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right) % 2]\nright_elements_not_max_not_right_not_right_right = left_elements_not_max_not_right_not_right[(len(left_elements_not_max_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right) % 2:]\nleft_elements_not_max_not_left_not_left_left = right_elements_not_max_not_left_not_left[:(len(right_elements_not_max_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left) % 2]\nright_elements_not_max_not_left_not_left_right = right_elements_not_max_not_left_not_left[(len(right_elements_not_max_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left) % 2:]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and aren't in the other list and aren't in the other list\nleft_elements_not_max_not_right_not_right_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max and i not in right_elements_not_max_not_left_in_left_right and i not in right_elements_not_max_not_left_not_left_right]\nright_elements_not_max_not_left_not_left_not_left = [i for i in right_elements_not_max if i not in left_elements_not_max and i not in left_elements_not_max_not_right_in_right_left and i not in left_elements_not_max_not_right_not_right_left]\n\n# then, determine which elements are in the left and which are in the right\nleft_elements_not_max_not_right_not_right_not_right_left = left_elements_not_max_not_right_not_right_not_right[:(len(left_elements_not_max_not_right_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right_not_right) % 2]\nright_elements_not_max_not_right_not_right_not_right_right = left_elements_not_max_not_right_not_right_not_right[(len(left_elements_not_max_not_right_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right_not_right) % 2:]\nleft_elements_not_max_not_left_not_left_not_left_left = right_elements_not_max_not_left_not_left_not_left[:(len(right_elements_not_max_not_left_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left_not_left) % 2]\nright_elements_not_max_not_left_not_left_not_left_right = right_elements_not_max_not_left_not_left_not_left[(len(right_elements_not_max_not_left_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left_not_left) % 2:]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and aren't in the other list and aren't in the other list and aren't in the other list\nleft_elements_not_max_not_right_not_right_not_right_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max and i not in right_elements_not_max_not_left_in_left_right and i not in right_elements_not_max_not_left_not_left_right and i not in right_elements_not_max_not_left_not_left_not_left_right]\nright_elements_not_max_not_left_not_left_not_left_not_left = [i for i in right_elements_not_max if i not in left_elements_not_max and i not in left_elements_not_max_not_right_in_right_left and i not in left_elements_not_max_not_right_not_right_left and i not in left_elements_not_max_not_right_not_right_not_right_left]\n\n# then, determine which elements are in the left and which are in the right\nleft_elements_not_max_not_right_not_right_not_right_not_right_left = left_elements_not_max_not_right_not_right_not_right_not_right[:(len(left_elements_not_max_not_right_not_right_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right_not_right_not_right) % 2]\nright_elements_not_max_not_right_not_right_not_right_not_right_right = left_elements_not_max_not_right_not_right_not_right_not_right[(len(left_elements_not_max_not_right_not_right_not_right_not_right) // 2) + len(left_elements_not_max_not_right_not_right_not_right_not_right) % 2:]\nleft_elements_not_max_not_left_not_left_not_left_not_left_left = right_elements_not_max_not_left_not_left_not_left_not_left[:(len(right_elements_not_max_not_left_not_left_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left_not_left_not_left) % 2]\nright_elements_not_max_not_left_not_left_not_left_not_left_right = right_elements_not_max_not_left_not_left_not_left_not_left[(len(right_elements_not_max_not_left_not_left_not_left_not_left) // 2) + len(right_elements_not_max_not_left_not_left_not_left_not_left) % 2:]\n\n# then, find the left and right elements that aren't max skill and aren't in the other list and aren't in the other list and aren't in the other list and aren't in the other list and aren't in the other list\nleft_elements_not_max_not_right_not_right_not_right_not_right_not_right = [i for i in left_elements_not_max if i not in right_elements_not_max and i not in right_elements_not_max_not_left_in_left_right and i not in right_elements_not_max_not_left_not_left_right and i not in right_elements_not_max_not_left_not_left_not_left_right and i not in right_elements_not_max_not_left_not_left_not_left_not_left_"
}
2022-04-19 22:30:42.802026 REASON length
2022-04-19 22:30:42.802034 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# Solution\nimport sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nfirst_team = [0]*n\nsecond_team = [0]*n\n\na_sorted = sorted(a)\n\nfor i in range(n):\n    index = a.index(a_sorted[i])\n    if index-k >= 0:\n        left = index-k\n    else:\n        left = 0\n    if index+k <= n-1:\n        right = index+k\n    else:\n        right = n-1\n    if i%2 == 0:\n        first_team[left:right+1] = [1]*(right-left+1)\n    else:\n        second_team[left:right+1] = [1]*(right-left+1)\n    a = a[:left] + a[right+1:]\n\nfor i in range(n):\n    if first_team[i] == 1:\n        print(1, end='')\n    else:\n        print(2, end='')\nprint()"
}
2022-04-19 22:30:42.802065 REASON stop
2022-04-19 22:30:42.828207 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport bisect\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# a = [2, 4, 5, 3, 1]\n# n = 5\n# k = 2\n\n# a = [2, 1, 3, 5, 4]\n# n = 5\n# k = 1\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# n = 7\n# k = 1\n\n# a = [2, 4, 5, 3, 1]\n# n = 5\n# k = 1\n\nteam = [0] * n\n\n# print(a)\nwhile len(a) > 0:\n    # print(a)\n    max_skill = max(a)\n    max_skill_index = a.index(max_skill)\n    left_k = min(max_skill_index, k)\n    right_k = min(n - 1 - max_skill_index, k)\n    # print(left_k, right_k)\n    for i in range(max_skill_index - left_k, max_skill_index + right_k + 1):\n        team[i] = 1\n    for i in range(max_skill_index - left_k, max_skill_index + right_k + 1):\n        a.remove(bisect.bisect_left(a, a[i]))\n\nprint(\"\".join(map(str, team)))"
}
2022-04-19 22:30:42.828340 REASON stop
2022-04-19 22:30:42.855203 5 {
  "finish_reason": "length",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# first coach chooses the student with maximum programming skill\n# among all students not taken into any team, and $k$ closest students to the left of him and $k$ closest students to the right of him\n\n# if there are less than $k$ students to the left or to the right, all of them will be chosen\n\n# first coach chooses the student with maximum programming skill\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\na = [2, 1, 3, 5, 4]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 1, 3, 5, 4]\n# a = [2, 4, 5, 3, 1]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n\n# a = [2, 1, 3, 5, 4]\n# a = [7, 2, 1, 3, 5, 4, 6]\n# a = [2, 4, 5, 3, 1]\n# a = [2, 1, 3,"
}
2022-04-19 22:30:42.855362 REASON length
2022-04-19 22:30:42.855373 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# 1 <= k <= n <= 200000\n# 1 <= a <= n\n# distinct\n# a = [2, 4, 5, 3, 1]\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k closest to the left and right\n# 3. repeat until the row is empty\n\n\n# 1. find the max\n# 2. find the k"
}
2022-04-19 22:30:42.855486 REASON length
2022-04-19 22:30:42.855492 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    team = [0] * n\n    for i in range(n):\n        ai = a[i]\n        if team[i] == 0:\n            team[i] = 1\n            left = max(0, i - k)\n            right = min(n - 1, i + k)\n            for j in range(left, right + 1):\n                if j != i and a[j] < ai:\n                    team[j] = 1\n    for i in range(n):\n        if team[i] == 0:\n            team[i] = 2\n            left = max(0, i - k)\n            right = min(n - 1, i + k)\n            for j in range(left, right + 1):\n                if j != i and a[j] < ai:\n                    team[j] = 2\n    print(''.join(map(str, team)))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-19 22:30:42.855635 REASON stop
