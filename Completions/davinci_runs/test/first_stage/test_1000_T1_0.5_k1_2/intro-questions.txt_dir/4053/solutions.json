["n = int(input())\n\n\ndef test(a, s):\n    k = [''] * len(a)\n    d = {}\n    for i in range(len(a)):\n        tof = True\n        if a[i] == s[:len(a[i])]:\n            if a[i] not in d:\n                d[a[i]] = 'P'\n                tof = False\n                k[i] = 'P'\n        if not tof:\n            continue\n        if a[i] == s[len(s) - len(a[i]):]:\n            if a[i] not in d or d[a[i]] == 'P':\n                d[a[i]] = 'S'\n                tof = False\n                k[i] = 'S'\n        if tof:\n            return [-1]\n    return k\n        \n\n\nk = ['', '', '', '']\na = []\nfor i in range(2 * n - 2):\n    s = input()\n    a.append(s)\n    if len(s) == 1:\n        if k[0] == '':\n            k[0] = s\n        else:\n            k[1] = s\n    if len(s) == n - 1:\n        if k[2] == '':\n            k[2] = s\n        else:\n            k[3] = s\nm = k[2] + k[0]\nr = test(a, m)\nif r != [-1]:\n    for i in r:\n        print(i, end='')\n    return\nm = k[2] + k[1]\nr = test(a, m)\nif r != [-1]:\n    for i in r:\n        print(i, end='')\n    return\nm = k[3] + k[0]\nr = test(a, m)\nif r != [-1]:\n    for i in r:\n        print(i, end='')\n    return\nm = k[3] + k[1]\nr = test(a, m)\nif r != [-1]:\n    for i in r:\n        print(i, end='')\n\n", "n = int(input())\na = []\nfe = -1\nse = -1\nfor i in range(2*n - 2):\n    s = input()\n    if len(s) == n - 1:\n        if fe == -1:\n            fe = i\n        else:\n            se = i\n    a.append(s)\nfl = True\ns = a[fe] + a[se][-1]\nb = [''] * len(a)\npr = [False] * n\nsu = [False] * n\nfor i in range(len(a)):\n    #pr\n    flp = False\n    ss = a[i]\n    if not pr[len(ss) - 1]:\n        if s[:len(ss)] == ss:\n            b[i] = 'P'\n            pr[len(ss) - 1] = True\n            flp = True\n    if not flp:\n        if not su[-len(ss)]:\n            if s[-len(ss):] == ss:\n                b[i] = 'S'\n                su[-len(ss)] = True\n                flp = True\n    if not flp:\n        fl = False\n        break\nif not fl:\n    s = a[se] + a[fe][-1]\n    pr = [False] * n\n    su = [False] * n\n    for i in range(len(a)):\n        #pr\n        flp = False\n        ss = a[i]\n        if not pr[len(ss) - 1]:\n            if s[:len(ss)] == ss:\n                b[i] = 'P'\n                pr[len(ss) - 1] = True\n                flp = True\n        if not flp:\n            if not su[-len(ss)]:\n                if s[-len(ss):] == ss:\n                    b[i] = 'S'\n                    su[-len(ss)] = True\n                    flp = True\nfor i in b:\n    print(i, end = '')\n                \n            \n", "n=int(input())\nAB=[input() for i in range(2*n-2)]\n\nABSORT=sorted(AB,key=lambda x:len(x),reverse=True)\n\nCANDI=[]\n\nif ABSORT[0][1:]==ABSORT[1][:-1]:\n    CANDI.append(ABSORT[0]+ABSORT[1][-1])\n\nif ABSORT[1][1:]==ABSORT[0][:-1]:\n    CANDI.append(ABSORT[1]+ABSORT[0][-1])\n\nif CANDI[0]==CANDI[-1]:\n    CANDI=[CANDI[0]]\n\nfor c in CANDI:\n    for s in AB:\n        ls=len(s)\n\n        if c[:ls]==s or c[-ls:]==s:\n            continue\n        else:\n            break\n    else:\n        DE=c\n        break\n\n\nDEAB=[(AB[i],i) for i in range(2*n-2)]\nDEAB.sort(key=lambda x:len(x[0]))\n\nANSLIST=[None]*(2*n-2)\nfor i in range(n-1):\n    s,si=DEAB[2*i]\n    t,ti=DEAB[2*i+1]\n    ls=len(s)\n\n    if DE[:ls]==s and DE[-ls:]==t:\n        ANSLIST[si]=\"P\"\n        ANSLIST[ti]=\"S\"\n    else:\n        ANSLIST[si]=\"S\"\n        ANSLIST[ti]=\"P\"\n\nfor a in ANSLIST:\n    print(a,end=\"\")\n\nprint()\n\n\n", "n = int(input())\ns = []\nfor i in range(2*n-2):\n\ts.append(input().strip())\n\nx,y = [x for x in s if len(x) == n-1]\n\ndef check(x,y,s,n):\n\tfull = x+y[-1]\n\ttaga = [0]*(n)\n\ttagb = [0]*(n)\n\tresult = [0]*(2*n-2)\n\tfor i in range(len(s)):\n\t\tp = s[i]\n\t\tif full.startswith(p) and taga[len(p)] == 0:\n\t\t\ttaga[len(p)] = 1\n\t\t\tresult[i] = 'P'\n\t\telif full.endswith(p) and tagb[len(p)] == 0:\n\t\t\ttagb[len(p)] = 1\n\t\t\tresult[i] = 'S'\n\tif 0 in result:\n\t\treturn False,result\n\treturn True,result\n\n\nr,rr =check(x,y,s,n)\nif r:\n\t# print(rr)\n\tprint(''.join(rr))\nelse:\n\tr,rr = check(y,x,s,n)\n\t# print(rr)\n\tprint(''.join(rr))\n\n", "def main():\n    n = int(input())\n    ain = [input() for _ in range(2*n - 2)]\n    a = sorted(ain, key=lambda x: len(x), reverse=True)\n\n    s1 = a[0] + a[1][-1]\n    d = { k: [] for k in a }\n\n    next = False\n    for i in range(1, n):\n        try:\n            d[s1[:i]].append('P')\n            d[s1[-i:]].append('S')\n        except KeyError:\n            next = True\n\n    if not next:\n        result = []\n        for e in ain:\n            if not d[e]:\n                break\n            result.append(d[e][0])\n            d[e].pop(0)\n        else:\n            print(''.join(result))\n            return\n\n    s1 = a[1] + a[0][-1]\n    d = { k: [] for k in a }\n\n    for i in range(1, n):\n        d[s1[:i]].append('P')\n        d[s1[-i:]].append('S')\n\n    result = []\n    for e in ain:\n        if not d[e]:\n            break\n        result.append(d[e][0])\n        d[e].pop(0)\n    else:\n        print(''.join(result))\n        return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\ndict1={}\narr=[]\nspr=[]\nfor i in range(2*n-2):\n    s=str(input())\n    try:\n        dict1[s]+=1\n    except:\n        KeyError\n        dict1[s]=1\n    arr.append(s)\n    if(len(s)==n-1):\n        spr.append(s)\nflag=0\ntemp=\"\"\narr1=[0]*(2*n-2)\nfor i in range(n-1):\n    temp+=spr[0][i]\n    tempflag=0\n    for j in range(2*n-2):\n        if(arr[j]==temp and arr1[j]==0):\n            arr1[j]=1\n            tempflag=1\n            break\n    if(tempflag==0):\n        flag=1\n        break\n    #print(*arr1)\nif(flag==0):\n    temp=''\n    for i in range(n-2,-1,-1):\n        temp=spr[1][i]+temp\n        tempflag=0\n        for j in range(2*n-2):\n            if(arr[j]==temp and arr1[j]==0):\n                arr1[j]=-1\n                tempflag=1\n                break\n        if(tempflag==0):\n            flag=1\n            break\nif(flag==0):\n    s1=\"\"\n    for i in arr1:\n        if(i==1):\n            s1+='P'\n        elif(i==-1):\n            s1+='S'\n    print(s1)\n\nelse:\n    temp=\"\"\n    arr1=[0]*(2*n-2)\n    for i in range(n-1):\n        temp+=spr[1][i]\n        tempflag=0\n        for j in range(2*n-2):\n            if(arr[j]==temp and arr1[j]==0):\n                arr1[j]=1\n                tempflag=1\n                break\n        if(tempflag==0):\n            flag=1\n            break\n    temp=\"\"\n    if(flag==0):\n        for i in range(n-2,-1,-1):\n            temp=spr[0][i]+temp\n            tempflag=0\n            for j in range(2*n-2):\n                if(arr[j]==temp and arr1[j]==0):\n                    arr1[j]=-1\n                    tempflag=1\n                    break\n            if(tempflag==0):\n                flag=1\n                break\n    s1=\"\"\n    for i in arr1:\n        if(i==1):\n            s1+='P'\n        else:\n            s1+='S'\n    print(s1)\n#print(*arr1)\n", "n = int(input())\na = []\nd = []\nfor i in range(2 * n - 2):\n    b = input()\n    a.append(b)\n    if len(b) == n-1:\n        d.append(b)\ns1 = d[0] + d[1][-1]\ns2 = d[1] + d[0][-1]\n\ndef ans(s):\n    l = ['' for _ in range(2 * n - 2)]\n    for i in range(2 * n - 2):\n        if l[i] != '': continue\n        m1 = i\n        m2 = -1\n        for j in range(i + 1, 2 * n - 2):\n            if len(a[j]) == len(a[i]):\n                m2 = j\n                break\n        if s.startswith(a[i]) and s.endswith(a[j]):\n            l[i] = 'P'\n            l[j] = 'S'\n        elif s.startswith(a[j]) and s.endswith(a[i]):\n            l[j] = 'P'\n            l[i] = 'S'\n    if any(i == '' for i in l):\n        return None\n    return ''.join(l)\n\ns = ans(s1)\nif s:\n    print(s)\nelse:\n    print(ans(s2))\n", "n = int(input())\nall = [input() for _ in range(2 * n - 2)]\nimp = []\nans = [0 for _ in range(2 * n - 2)]\npr = []\nfor a in all:\n    if len(a) == n - 1:\n        imp.append(a)\n\nok = True\nfor i in range(2 * n - 2):\n    is1, is2 = False, False\n    if imp[0].find(all[i]) == 0:\n        is1 = True\n    if imp[1].rfind(all[i]) == len(imp[1]) - len(all[i]):\n        is2 = True\n\n    if not is1 and not is2:\n        ok = False\n        continue\n\n    if is1 and is2:\n        if all[i] in pr:\n            is1 = False\n        else:\n            is2 = False\n\n    if is1:\n        ans[i] = 1\n        pr.append(all[i])\n    else:\n        ans[i] = 2\n\nif not ok:\n    imp[0], imp[1] = imp[1], imp[0]\n    ans = [0 for _ in range(2 * n - 2)]\n    pr = []\n\n    for i in range(2 * n - 2):\n        is1, is2 = False, False\n        if imp[0].find(all[i]) == 0:\n            is1 = True\n        if imp[1].rfind(all[i]) == len(imp[1]) - len(all[i]):\n            is2 = True\n\n        if is1 and is2:\n            if all[i] in pr:\n                is1 = False\n            else:\n                is2 = False\n\n        if is1:\n            ans[i] = 1\n            pr.append(all[i])\n        else:\n            ans[i] = 2\n\nfor i in range(2 * n - 2):\n    if ans[i] == 1:\n        print('P', end='')\n    else:\n        print('S', end='')\nprint()", "import sys\nfrom math import floor, ceil\n\ninput = sys.stdin.readline\n\nn = int(input())\n\nq = {}\nfor i in range(2*n - 2):\n    curr = input().strip()\n    if len(curr) not in q.keys():\n        q[len(curr)] = []\n    q[len(curr)].append((curr, i))\n\npre = q[1][0][0]\nsuf = q[1][1][0]\nans = [0 for i in range(2*n-2)]\nans[q[1][0][1]] = 'P'\nans[q[1][1][1]] = 'S'\n\nvalid = True\nfor i in range(2, n):\n    first = q[i][0]\n    second = q[i][1]\n    # assuming first is prefix and second is suffix\n    if (first[0][:-1] == pre) and (second[0][1:] == suf):\n        ans[first[1]] = 'P'\n        ans[second[1]] = 'S'\n        pre = first[0]\n        suf = second[0]\n    elif (first[0][1:] == suf) and (second[0][:-1] == pre):\n        ans[first[1]] = 'S'\n        ans[second[1]] = 'P'\n        suf = first[0]\n        pre = second[0]\n    else:\n        valid = False\n        break\n\nif not valid:\n    pre = q[1][1][0]\n    suf = q[1][0][0]\n    ans = [0 for i in range(2*n-2)]\n    ans[q[1][0][1]] = 'S'\n    ans[q[1][1][1]] = 'P'\n\n    valid = True\n    for i in range(2, n):\n        first = q[i][0]\n        second = q[i][1]\n        # assuming first is prefix and second is suffix\n        if (first[0][:-1] == pre) and (second[0][1:] == suf):\n            ans[first[1]] = 'P'\n            ans[second[1]] = 'S'\n            pre = first[0]\n            suf = second[0]\n        elif (first[0][1:] == suf) and (second[0][:-1] == pre):\n            ans[first[1]] = 'S'\n            ans[second[1]] = 'P'\n            suf = first[0]\n            pre = second[0]\n        else:\n            valid = False\n            break\nprint(''.join([str(x) for x in ans]))", "\ndef check(string, arr):\n    tmp = []\n    for i in range(1, len(string)):\n        tmp.append(string[:i])\n        tmp.append(string[i:])\n    tmp = sorted(tmp)\n    narr = sorted(arr)\n    return tmp == narr\n\nsize = int(input())\nvalues = []\ntokens = []\n\nfor _ in range(2 * size - 2):\n    values.append(input())\n\nfor value in values:\n    if len(value) == size - 1:\n        tokens.append(value)\n\nif check(tokens[0] + tokens[1][-1], values):\n    origin = tokens[0] + tokens[1][-1]\nelse:\n    origin = tokens[1] + tokens[0][-1]\n\nanswer = ''\nwas = set()\n\nfor value in values:\n    if origin.startswith(value) and not value in was:\n        answer += 'P'\n    else:\n        answer += 'S'\n    was.add(value)\n\nprint(answer)\n", "n = int(input())\na = [(input(), q) for q in range(2*n-2)]\nanswer = ['S']*(2*n-2)\na.sort(key=lambda x: (len(x[0]), x))\na1, a = [q[1] for q in a], [q[0] for q in a]\nif len(a) == 2:\n    print('PS')\nelse:\n    s = [a[-1]+a[0], a[-1]+a[1], a[-2]+a[0], a[-2]+a[1]]\n    ans = 0\n    for q in range(4):\n        d = []\n        for q1 in range(1, n):\n            d.append(s[q][:q1])\n        for q1 in range(n-1, 0, -1):\n            d.append(s[q][q1:])\n        if sorted(d, key=lambda x: (len(x), x)) == a:\n            ans = q\n    s = s[ans]\n    f = [1]*(2*n-2)\n    for q in range(1, n):\n        if f[2*q-2] and a[2*q-2] == s[:q]:\n            f[2*q-2] = 0\n            answer[a1[2*q-2]] = 'P'\n        else:\n            f[2 * q - 1] = 0\n            answer[a1[2 * q - 1]] = 'P'\n    print(*answer, sep='')\n", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[42]:\n\n\nimport math\nn=int(input())\nfixes=[]\nfor i in range(2*n-2):\n    fixes.append(input())\n\n\n# In[82]:\n\n\nfixessorted=[[] for i in range(n-1)]\n\n\n# In[83]:\n\n\nfor i in fixes:\n    fixessorted[len(i)-1].append(i)\n\n\n# In[84]:\n\n\nprefixes={}\nsuffixes={}\n\n\n# In[85]:\n\n\npslist=[0 for i in range(2*n-2)]\n\n\n# In[86]:\n\n\ntestprefix=fixessorted[n-2][0]\ntest=0\ntestsuffix=fixessorted[n-2][1]\nfor i in range(0,n-1):\n    if  testprefix[:n-1-i]  in fixessorted[n-2-i]:\n        prefixes[testprefix[:n-1-i]]=1\n        fixessorted[n-2-i].remove(testprefix[:n-1-i])    \n            \n    else:\n        test=1\n            \nfor i in range(0,n-1):\n    #print( testsuffix[i:])\n    #print(fixessorted[n-2-i])\n    if  testsuffix[i:]  in fixessorted[n-2-i]:\n        suffixes[testsuffix[i+1:]]=1\n            \n            \n    else:\n        test=1            \n            \n#print(test)            \n            \nif test==1:\n    \n    fixessorted=[[] for i in range(n-1)]\n    for i in fixes:\n        fixessorted[len(i)-1].append(i)\n    \n    testprefix=fixessorted[n-2][1]\n    prefixes={}\n    for i in range(0,n-1):\n        if  testprefix[:n-1-i]  in fixessorted[n-2-i]:\n            prefixes[testprefix[:n-1-i]]=1\n\n\n# In[87]:\n\n\nfor i in range(2*n-2):\n    if fixes[i] in prefixes:\n        pslist[i]=\"P\"\n        del prefixes[fixes[i]]\n    else:\n        pslist[i]='S'\n\n\n# In[88]:\n\n\nprint(''.join(pslist))\n\n\n# In[ ]:\n\n\n", "def mi():\n\treturn list(map(int, input().split()))\n'''\n\n'''\nn = int(input())\na = [[] for i in range(n-1)]\naa = [0]*(2*n-2)\nba = [0]*(2*n-2)\nfor i in range(2*n-2):\n\ts = input()\n\ta[len(s)-1].append(s)\n\taa[i] = s\n\tba[2*n-3-i] = s\ns1 = ['0']*n\ns2 = ['0']*n\ns1[0] = a[0][0]\ns1[-1] = a[0][1]\ns2[0] = a[0][1]\ns2[-1] = a[0][0]\nnoans1 = False\nnoans2 = False\nt1a = [0]*(2*n-2)\nt2a = [0]*(2*n-2)\nt1a[aa.index(a[0][0])] = 'P'\nt1a[2*n-3-ba.index(a[0][1])] = 'S'\nt2a[aa.index(a[0][0])] = 'S'\nt2a[2*n-3-ba.index(a[0][1])] = 'P'\n# print (aa, ba)\n# print (a[1])\nfor i in range(1,n-1):\n\tent1 = False\n\t# print (t1a)\n\tt1 = ''.join(s1)\n\tt2 = ''.join(s2)\n\t# print (t1, a[i][0][:-1], a[i][1][1:], a[i][0], a[i][1])\n\tif t1.startswith(a[i][0][:-1]) and t1.endswith(a[i][1][1:]):\n\t\tent1 = True\n\t\ts1[i] = a[i][0][-1]\n\t\ts1[n-1-i] = a[i][1][0]\n\t\t# print (aa.index(a[i][0]), a[i][0])\n\t\t# print (2*n-3-ba.index(a[i][1]), a[i][1])\n\t\tt1a[aa.index(a[i][0])] = 'P'\n\t\tt1a[2*n-3-ba.index(a[i][1])] = 'S'\n\t\t# print (2*n-3-ba.index(a[i][1]))\n\telif t1.startswith(a[i][1][:-1]) and t1.endswith(a[i][0][1:]):\n\t\tent1 = True\n\t\ts1[i] = a[i][1][-1]\n\t\ts1[n-1-i] = a[i][0][0]\n\t\tt1a[aa.index(a[i][0])] = 'S'\n\t\t# print (aa.index(a[i][1]), a[i][1])\n\t\tt1a[2*n-3-ba.index(a[i][1])] = 'P'\n\t\t# print (2*n-3-ba.index(a[i][0]), a[i][0])\n\tif ent1==False:\n\t\tnoans1 = True\n\tent2 = False\n\tif t2.startswith(a[i][0][:-1]) and t2.endswith(a[i][1][1:]):\n\t\tent2 = True\n\t\ts2[i] = a[i][0][-1]\n\t\ts2[n-1-i] = a[i][1][0]\n\t\t# print (aa.index(a[i][0]), a[i][0])\n\t\t# print (n-1-ba.index(a[i][1]), a[i][1])\n\t\tt2a[aa.index(a[i][0])] = 'P'\n\t\tt2a[2*n-3-ba.index(a[i][1])] = 'S'\n\telif t2.startswith(a[i][1][:-1]) and t2.endswith(a[i][0][1:]):\n\t\tent2 = True\n\t\ts2[i] = a[i][1][-1]\n\t\ts2[n-1-i] = a[i][0][0]\n\t\t# print (aa.index(a[i][1]), a[i][1])\n\t\t# print (n-1-ba.index(a[i][0]), a[i][0])\n\t\tt2a[aa.index(a[i][0])] = 'S'\n\t\tt2a[2*n-3-ba.index(a[i][1])] = 'P'\n\tif ent2==False:\n\t\tnoans2 = True\n# print (s1, noans1, s2, noans2)\n# print (t1a, t2a)\nif noans1:\n\tprint(''.join(t2a))\nelse:\n\tprint(''.join(t1a))\n", "import sys\nn = int(input())\nres = ''\narr = []\nprsu = []\nfor i in range(2 * n - 2):\n    s = input()\n    arr.append(s)\n    if len(s) == n - 1:\n        prsu.append(s)\npos_pr = 0\npos_su = 0\nfor x in arr:\n    if x == prsu[0][:len(x)]:\n        pos_pr += 1\n    if x == prsu[1][n-len(x):]:\n        pos_su += 1\nif pos_su >= n - 1 and pos_pr >= n - 1:\n    prsu.reverse()\nkek = [''] * len(arr)\nab_su = [0] * len(arr)\nab_pr = [0] * len(arr)\nfor i in range(len(arr)):\n    if arr[i] == prsu[0][:len(arr[i])] and arr[i] != prsu[1][n - len(arr[i]) - 1:]:\n        kek[i] = \"P\"\n        ab_pr[len(arr[i]) - 1] = 1\n    if arr[i] != prsu[0][:len(arr[i])] and arr[i] == prsu[1][n - len(arr[i]) - 1:]:\n        kek[i] = 'S'\n        ab_su[len(arr[i]) - 1] = 1\nfor i in range(len(arr)):\n    if kek[i] == '':\n        if not ab_pr[len(arr[i]) - 1]:\n            kek[i] = 'P'\n            ab_pr[len(arr[i]) - 1] = 1\n        else:\n            kek[i] = 'S'\n            ab_su[len(arr[i]) - 1] = 1\nright = True\nfor i in range(len(kek)):\n    if kek[i] == 'P' and prsu[0][:len(arr[i])] != arr[i]:\n        right = False\n    if kek[i] == 'S' and arr[i] != prsu[1][n - len(arr[i]) - 1:]:\n        right = False\nif right:\n    print(''.join(kek))\n    return\n\n\nprsu.reverse()\nkek = [''] * len(arr)\nab_su = [0] * len(arr)\nab_pr = [0] * len(arr)\nfor i in range(len(arr)):\n    if arr[i] == prsu[0][:len(arr[i])] and arr[i] != prsu[1][n - len(arr[i]) - 1:]:\n        kek[i] = \"P\"\n        ab_pr[len(arr[i]) - 1] = 1\n    if arr[i] != prsu[0][:len(arr[i])] and arr[i] == prsu[1][n - len(arr[i]) - 1:]:\n        kek[i] = 'S'\n        ab_su[len(arr[i]) - 1] = 1\nfor i in range(len(arr)):\n    if kek[i] == '':\n        if not ab_pr[len(arr[i]) - 1]:\n            kek[i] = 'P'\n            ab_pr[len(arr[i]) - 1] = 1\n        else:\n            kek[i] = 'S'\n            ab_su[len(arr[i]) - 1] = 1\nprint(''.join(kek))\n", "length = int(input())\nnum = 2*length-2\nall_lst = []\nlongest = []\nfor i in range(num):\n  string = input()\n  all_lst.append(string)\n  if(len(string) == length -1):\n    longest.append(string)\ncand_a = longest[0][0] + longest[1]\ncand_b = longest[1][0] + longest[0]\ncand_a_lst = []\nfor i in range(length-1):\n  cand_a_lst.append(cand_a[:i+1])\n  cand_a_lst.append(cand_a[i+1:])\nans = []\ncount = [0 for i in range(length-1)]\nx, y = sorted(cand_a_lst), sorted(all_lst)\nif(x == y):\n  for mem in all_lst:\n    if(mem == cand_a[:len(mem)] and count[len(mem)-1]==0):\n      #print(mem + \" \" + cand_a[:len(mem)])\n      ans.append(\"P\")\n      count[len(mem)-1] = 1\n    else:\n      #print(mem + \" \" + cand_a[length-len(mem):])\n      ans.append(\"S\")\nelse:\n  for mem in all_lst:\n    if(mem == cand_b[:len(mem)] and count[len(mem)-1]==0):\n      #print(mem + \" \" + cand_a[:len(mem)])\n      ans.append(\"P\")\n      count[len(mem)-1] = 1\n    else:\n      #print(mem + \" \" + cand_a[length-len(mem):])\n      ans.append(\"S\")\nprint(\"\".join(ans))", "def f(s):\n    X = \"\"\n    k = []\n    '''for i in L:\n        l = len(i)\n        if s[n-l:] in k:\n            X += \"S\"\n        elif s[:l] == s[n-l:]:\n            k.append(s[:l])\n            X += \"P\"\n        else:\n            if s[:l] == i:\n                X += \"P\"\n                continue\n            if s[n-l:] == i:\n                X += \"S\"\n                continue\n            return 0\n    if len(X) == 2*n-2:\n        print(X)\n        return 1'''\n    for i in L:\n        l = len(i)\n        if l in k:\n            if s[:l] == s[n-l:]:\n                X += \"S\"\n            else:\n                if s[:l] == i:\n                    X += \"P\"\n                elif s[n-l:] == i:\n                    X += \"S\"\n                else:\n                    return 0\n        else:\n            k.append(l)\n            if s[:l] == i:\n                X += \"P\"\n            elif s[n-l:] == i:\n                X += \"S\"\n            else:\n                return 0\n    print(X)\n    return 1\n\nn = int(input())\nL = []\nfor i in range(2*n-2):\n    L.append(input())\nP = sorted(L,key= len)\nfor i in [P[0],P[1]]:\n    for j in [P[2*n-3],P[2*n-4]]:\n        if f(i+j):\n            quit()\n        if f(j+i):\n            quit()", "n = int(input())\n\nlst = []\n\nfor i in range((2*n)-2):\n    curr = str(input())\n    lst.append([i,curr])\n    \nlst.sort(key=lambda val: len(val[1]),reverse = True)\n\nword1 = lst[0][1] + lst[1][1][-1]\nword2 = lst[1][1] + lst[0][1][-1]\nbool1 = True\nbool2 = True\n\nsp1 = [0 for i in range((2*n)-2)]\nsp1[0] = 'P'\nsp1[1] = 'S'\nsp2 = [0 for i in range((2*n)-2)]\nsp2[0] = 'S'\nsp2[1] = 'P'\n\nfor i in range(2,(2*n)-2,2):\n    curr1 = lst[i][1]\n    curr2 = lst[i+1][1]\n#    print(curr1,\" \",curr2,word1[:n-int(i/2)-1],word1[int(i/2)+1:])\n    if curr1 == word1[:n-int(i/2)-1] and curr2 == word1[int(i/2)+1:]:\n        sp1[i] = 'P'\n        sp1[i+1] = 'S'\n##        print(\"yes1\\n\")\n##        print(sp1,sp2)\n    elif curr2 == word1[:n-int(i/2)-1] and curr1 == word1[int(i/2)+1:]:\n        sp1[i] = 'S'\n        sp1[i+1] = 'P'\n##        print(\"yes2\\n\")\n    if curr1 == word2[:n-int(i/2)-1] and curr2 == word2[int(i/2)+1:]:\n        sp2[i] = 'P'\n        sp2[i+1] = 'S'\n##        print(\"yes3\\n\")\n    elif curr2 == word2[:n-int(i/2)-1] and curr1 == word2[int(i/2)+1:]:\n        sp2[i] = 'S'\n        sp2[i+1] = 'P'\n##        print(\"yes4\\n\")\n\nfor i in sp1:\n    if i == 0:\n        bool1 = False\n        break\nfor i in sp2:\n    if i == 0:\n        bool2 = False\n##print(sp1,sp2)\nif bool1:\n    ans = ''\n    newl = []\n    for j in range(len(lst)):\n        newl.append(lst[j]+[sp1[j]])\n    newl.sort(key=lambda val: val[0])\n    for j in newl:\n        ans = ans + j[2]\n    print(ans)\nelif bool2:\n    ans = ''\n    newl = []\n    for j in range(len(lst)):\n        newl.append(lst[j]+[sp2[j]])\n    newl.sort(key=lambda val: val[0])\n    for j in newl:\n        ans = ans + j[2]\n    print(ans)\n    \n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\nsp = [[]for i in range(n)]\nns = []\nfor i in range(2*n-2):\n    s = input()\n    sp[len(s)].append(s)\n    ns.append(s)\ns1 = sp[n-1][0] + sp[n-1][1][-1]\ns2 = sp[n-1][1][0] + sp[n-1][0]\n\nss = [s1, s2]\ncorrect_s = ''\nres = True\nii = 0\ncorrect_s = ss[ii]\nfor i in range(1, n):\n    if correct_s[:i] == sp[i][0] and correct_s[-i:] == sp[i][1]:\n        continue\n    if correct_s[:i] == sp[i][1] and correct_s[-i:] == sp[i][0]:\n        continue\n    res = False\n    break\nif res: pass\nelse: correct_s = ss[1]\nans = ''\nf = [0]*n\nfor s in ns:\n    if f[len(s)] == 0:\n        if correct_s[:len(s)] == s: \n            ans += 'P'\n            f[len(s)] = 1\n        else: \n            ans += 'S'\n            f[len(s)] = 2\n    else:\n        res = 'P' if f[len(s)] == 2 else 'S'\n        ans += res\nprint(ans)\n    \n", "from collections import defaultdict\n\nn = int(input())\ntc = (2 * n) - 2\n\ntotal = []\nfor _ in range(tc):\n    string = input().strip()\n    total.append((string, _))\n\n# sort by strings\ntotal.sort(key=lambda x: x[0])\n# sort by length now\ntotal.sort(key=lambda x: len(x[0]))\n\nx1 = total[tc-2][0]\nx2 = total[tc-1][0]\n\nans = x1 + x2[-1]\nans1 = x2 + x1[-1]\n\nif x1[1:] == x2[:-1]:\n    pass     \nelse:\n    ans, ans1 = ans1, ans\n    \nalt = False\n\nans_dict = defaultdict()\nfor i in range(0, tc, 2):\n\n    str1 = total[i][0]\n    str2 = total[i+1][0]\n\n    idx1 = total[i][1]\n    idx2 = total[i+1][1]\n\n    assert(len(str1) == len(str2))\n\n    if str1 == ans[:len(str1)] and str2 == ans[-len(str1):]:\n        ans_dict[idx1] = 'P'\n        ans_dict[idx2] = 'S'\n    elif str2 == ans[:len(str1)] and str1 == ans[-len(str1):]:\n        ans_dict[idx1] = 'S'\n        ans_dict[idx2] = 'P'\n    else:\n        alt = True\n\nif alt == True:\n    ans = ans1\n    # do again\n    for i in range(0, tc, 2):\n        str1 = total[i][0]\n        str2 = total[i+1][0]\n\n        idx1 = total[i][1]\n        idx2 = total[i+1][1]\n\n        # assert(len(str1) == len(str2))\n\n        if str1 == ans[:len(str1)] and str2 == ans[-len(str1):]:\n            ans_dict[idx1] = 'P'\n            ans_dict[idx2] = 'S'\n        elif str2 == ans[:len(str1)] and str1 == ans[-len(str1):]:\n            ans_dict[idx1] = 'S'\n            ans_dict[idx2] = 'P'\n    \n\nfor i in range(0, tc):\n    print(ans_dict[i], end='')\nprint()\n"]