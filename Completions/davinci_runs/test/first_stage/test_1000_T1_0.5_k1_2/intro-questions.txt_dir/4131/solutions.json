["import bisect\n\nn,m = map(int,input().split())\n\nQ = []\nP = [[] for _ in range(n)]\nfor i in range(m):\n    p,y = map(int,input().split())\n    Q.append([p,y])\n    P[p-1].append(y)\n\nP_1 = [sorted(l) for l in P]\n\nfor p,y in Q:\n    a = str(p).zfill(6)\n    b = str(bisect.bisect(P_1[p-1], y)).zfill(6)\n    print(a+b)", "from bisect import bisect_left\nn,m = map(int, input().split())\npy = []\nl = [[] for _ in range(n+1)]\nfor _ in range(m):\n  p,y = map(int, input().split())\n  l[p].append(y)\n  py.append((p,y))\n  \nfor i in l: i.sort()\n\nfor p,y in py:\n  s = str(p)\n  t = str(bisect_left(l[p],y)+1)\n  ans = \"0\"*(6-len(s))+s + \"0\"*(6-len(t))+t\n  print(ans)", "n, m = list(map(int, input().split()))\np_y = []\nfor i in range(m):\n    p, y = list(map(int, input().split()))\n    p_y.append([p, y, i])\n\np_y.sort()\n# print(p_y)\n\nres = [0] * m\norder = 0\nfor i in range(m):\n    ken, _, index = p_y[i]\n    if ken != p_y[i - 1][0] and i > 0:\n        order = 1\n    else:\n        order += 1\n    res[index] = [ken, order]\n\n\n# print(res)\n\nfor i in range(m):\n    ken = str(res[i][0]).zfill(6)\n    order = str(res[i][1]).zfill(6)\n    print((ken + order))\n", "from collections import defaultdict\n\n\nN, M = list(map(int, input().split()))\nPY = [list(map(int, input().split())) for _ in range(M)]\n\ndi = defaultdict(list)\n\nfor i, py in enumerate(PY):\n    di[py[0]].append([py[1], i])\n\nans = [\"\" for _ in range(M)]\n\nfor k, v in list(di.items()):\n    v.sort()\n\n    for j, yi in enumerate(v):\n        s = str(k).zfill(6)\n        t = str(j + 1).zfill(6)\n        ans[yi[1]] = s + t\n\nprint((\"\\n\".join(ans)))\n", "n,m=map(int,input().split())\n\n\ncitylis=[[] for i in range(n)]\nfor i in range(1,m+1):\n  pi,yi=map(int,input().split())\n  citylis[pi-1].append([i,yi])\n\nfor i in range(n):\n  if len(citylis[i])!=0:\n    citylis[i].sort(key=lambda x:x[1])\n\nlis=[]\nfor i in range(n):\n  for j in range(len(citylis[i])):\n    cityposi=str(i+1)\n    cityposi=\"0\"*(6-len(cityposi))+cityposi\n    ordernum=str(j+1)\n    ordernum=\"0\"*(6-len(ordernum))+ordernum\n    lis.append([citylis[i][j][0],cityposi+ordernum])\n\nlis.sort(key=lambda x:x[0])\nfor i in range(m):\n  print(lis[i][1])", "from collections import defaultdict\nimport bisect\nN,M = map(int, input().split())\ndic = defaultdict(list)\ncities = []\nfor _ in range(M):\n  p,y = map(int,input().split())\n  cities.append([p,y])\nfor item in sorted(cities):\n  dic[item[0]].append(item[1])\nfor item in cities:\n  print(\"%06d%06d\"%(item[0],bisect.bisect(dic[item[0]],item[1])))", "from collections import defaultdict\n\nn, m = list(map(int, input().split()))\nprefecture = [[] for _ in range(n+1)]\ntpl_lst=[]\nfor i in range(m):\n    p, y = list(map(int, input().split()))\n    prefecture[p].append(y)\n    tpl_lst.append((p,y))\n\nfor p in prefecture:\n    if len(p)>=2:\n        p.sort()\n\nd = defaultdict(list)\nfor idx, pre in enumerate(prefecture):\n    if len(pre)>=1:\n        for i, year in enumerate(pre):\n            d[(idx, year)]=[idx, i+1]\n\nfor tpl in tpl_lst:\n    id = d[tpl][0]*(10**6) + d[tpl][1]\n    id = str(id)\n    id = \"0\"*(12-len(id)) + id\n    print(id)\n#print(prefecture)\n", "import math\n\nn, m = map(int, input().split(\" \"))\npyL = sorted([[i] + list(map(int,\n                             input().split(\" \"))) for i in range(m)],\n             key=lambda x: x[2])\n\nli = [1] * (n + 1)\n\nfor i in range(len(pyL)):\n    index, p, y = pyL[i]\n    pyL[i].append(str(p).zfill(6) + str(li[p]).zfill(6))\n    li[p] += 1\n\nfor py in sorted(pyL, key=lambda x: x[0]):\n    print(py[3])", "N, M = list(map(int, input().split()))\nli = [0] * M\n\nfor i in range(M):\n    P, Y = list(map(int, input().split()))\n    li[i] = (P, Y)\n\nli2 = sorted(li)\n\ns = '000000'\ntmp = 0\ncnt = 1\ndic = {}\nfor i in li2:\n    if tmp == i[0]:\n        cnt += 1\n    else:\n        cnt = 1\n        tmp = i[0]\n\n    s1 = s[0:6-len(str(i[0]))] + str(i[0])\n    s2 = s[0:6-len(str(cnt))] + str(cnt)\n    s3 = s1 + s2\n    dic[i] = s3\n\nfor i in li:\n    print((dic[i]))\n", "from collections import deque\nn,m = list(map(int,input().split()))\nprefs = [{} for _ in range(n)]\ncities = deque()\nfor i in range(m):\n    p, y = list(map(int,input().split()))\n    prefs[p-1][y] = -1\n    cities.append((p,y))\n\nfor p in prefs:\n    years = list(p.keys())\n    years.sort()\n    for y in range(len(years)):\n        p[years[y]] = y+1\n\n\nfor _ in range(m):\n    p, y = cities.popleft()\n    cid = prefs[p-1][y] + p * 1000000\n    print((\"{:0=12}\".format(cid)))\n", "n, m = map(int, input().split())\npy = [list(map(int, input().split())) for i in range(m)]\n\nipy = [[0, 0, 0]]\nfor i in range(m):\n    ipy.append([i] + py[i])\nipy = sorted(ipy, key=lambda x: (x[1], x[2]))\nfor i in range(1, m+1):\n    if ipy[i][1] != ipy[i-1][1]:\n        cnt = 0\n    cnt += 1\n    ipy[i].append(str(ipy[i][1]).zfill(6) + str(cnt).zfill(6))\nipy = sorted(ipy)\nfor i in range(1, m+1):\n    print(ipy[i][3])", "n,m = map(int,input().split())\npy = [[i+1]+list(map(int,input().split())) for i in range(m)]\npysort = sorted(py,key=lambda x:(x[1],x[2]))\n\nj = 1\ncnt = 0\nfor i in range(m):\n    while True:\n        if pysort[i][1] == j:\n            cnt += 1\n            #pysort[i] += [f\"{pysort[i][1]}:{cnt}\"]\n            pysort[i] += [str(pysort[i][1]).zfill(6)+str(cnt).zfill(6)]\n            break\n        else:\n            cnt = 0\n            j += 1\n\npysortsort = sorted(pysort,key=lambda x:x[0])\n[print(a[3]) for a in pysortsort]", "n, m = list(map(int, input().split()))\npy = []\n\nfor i in range(m):\n    _p, _y = list(map(int, input().split()))\n    py.append([_p, _y, i])\n\npy = sorted(py, key=lambda x: (x[0], x[1]))\nans = []\np = -1\nx = 1\n\nfor i in range(m):\n    if p != py[i][0]:\n        x = 1\n        p = py[i][0]\n    else:\n        x += 1\n\n    pid = str(py[i][0]).zfill(6)\n    xid = str(x).zfill(6)\n    ans.append([pid+xid, py[i][2]])\n\nans = sorted(ans, key=lambda x: x[1])\n\nfor a, i in ans:\n    print(a)\n\n", "import bisect\nn,m = map(int,input().split())\nx = [list() for i in range(n)]\np = []\ny = []\nfor i in range(m):\n  s,t = map(int,input().split())\n  p.append(s)\n  y.append(t)\n  x[s-1].append(t)\nfor i in range(n):\n  x[i].sort()\n  \nfor i in range(m):\n  index = bisect.bisect_left(x[p[i]-1],y[i])\n  print(\"{:06}{:06}\".format(p[i],index+1))", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep 15 01:01:58 2020\n\n@author: liang\n\"\"\"\n#\u30bc\u30ed\u30d1\u30c7\u30a3\u30f3\u30b0\uff0b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n#str(1).zfill(6) + str(a.index(2) + 1).zfill(6)\n#index(x) \u304c\u91cd\u3044 => index\u3092\u4f7f\u308f\u306a\u304f\u3066\u826f\u3044\u3088\u3046\u306b\u3059\u308b\n\nN, M = map(int, input().split())\n#d = [list() for _ in range(N)]\ndic = dict()\ndic2 = dict()\nP = list()\n\n#insert O(M)\nfor i in range(M):\n    p, y = map(int,input().split())\n    #d[p-1].append(y)\n    if p not in dic.keys():\n        dic[p] = [y]\n    else:\n        dic[p].append(y)\n    P.append((p,y))\n\n#year sort O(N log N) => \u91cd\u3044\u3000dict\u4f7f\u7528\n#for i in range(N):\n#    d[i].sort()\nfor key in dic.keys():\n    dic[key].sort()\n\nfor key in dic.keys():\n    for i in range(len(dic[key])):\n        dic2[dic[key][i]] = i+1\n#search O(M)***\nfor i in range(M):\n    p, y = P[i]\n    #ans = str(p).zfill(6)+str(d[p-1].index(y)+1).zfill(6)\n    # zfill \u91cd\u3044\uff1f\n    ans = ''\n    ans += '0'*( 6 - len(str(p))) + str(p)\n    #t = dic[p].index(y)+1\n    t = dic2[y]\n    ans += '0'*( 6 - len(str(t))) + str(t)\n    print(ans)", "class City:\n    def __init__(self, prefecture, year):\n        self.prefecture = prefecture\n        self.year = year\n        self.order = None\n\n    def __eq__(self, other):\n        if self.year == other.year:\n            return True\n        return False\n\n    def __le__(self, other):\n        if self.year <= other.year:\n            return True\n        return False\n\n    def __lt__(self, other):\n        if self.year < other.year:\n            return True\n        return False\n\n    def __ge__(self, other):\n        if self.year >= other.year:\n            return True\n        return False\n\n    def __gt__(self, other):\n        if self.year > other.year:\n            return True\n        return False\n\n\ncities = []\nn,m=[int(i) for i in input().split()]\nprefecture=[[] for i in range(n+1)]\n\n\n\nfor i in range(m):\n    p,y=[int(j) for j in input().split()]\n    new_city=City(p, y)\n    cities.append(new_city)\n    prefecture[p].append(new_city)\n\nfor pref_list in prefecture:\n    pref_list.sort()\n    for i ,pref in enumerate(pref_list):\n        pref.order=i+1\n\nfor city in cities:\n    print((str(city.prefecture).zfill(6)+str(city.order).zfill(6)))\n\n\n", "n,m=list(map(int,input().split()))\npref=[[] for _ in range(n+1)]\npy = [[i]+list(map(int,input().split())) for i in range(m)]\npy.sort(key=lambda x: (x[1],x[2]))\nans=list()\nnow=0\ncnt=0\nfor x in py:\n  cnt = 1 if now != x[1] else cnt + 1\n  now = x[1]\n  ans.append([x[0],x[1],cnt])\nans.sort(key=lambda x:x[0])\nfor x in ans:\n  print((str(x[1]).zfill(6)+str(x[2]).zfill(6)))\n\n\n", "import sys\nfrom collections import deque\n\n\nstdin = sys.stdin\ndef ns(): return stdin.readline().rstrip()\ndef ni(): return int(stdin.readline().rstrip())\ndef nm(): return list(map(int, stdin.readline().split()))\ndef nl(): return list(map(int, stdin.readline().split()))\n\n\ndef main():\n    n, m = nm()\n    Y = [deque() for _ in range(n)]\n    Y_id = []\n    order = []\n    for i in range(m):\n        p, y = nm()\n        Y[p - 1].append(y)\n        order.append(p)\n\n    for y in Y:\n        d = {}\n        for i, y_s in enumerate(sorted(y)):\n            d[y_s] = i + 1\n        Y_id += [d]\n\n    for o in order:\n        print(('{:06}'.format(o) +\n              '{:06}'.format(Y_id[o - 1][Y[o - 1].popleft()])))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import collections\nimport bisect\nn,m=map(int,input().split())\np=[[int(j) for j in input().split()] for i in range(m)]\na=collections.defaultdict(list)\nfor x,y in sorted(p):\n    a[x]+=[y]\nfor x,y in p:\n    z=bisect.bisect(a[x],y)\n    print(\"%06d%06d\"%(x,z))", "from collections import defaultdict\n(n, m), *q = [[*list(map(int, i.split()))] for i in open(0)]\nd = defaultdict(list)\nfor k, v in q:\n    d[k].append(v)\nc = defaultdict(dict)\nfor k, v in list(d.items()):\n    for i, j in enumerate(sorted(v)):\n        c[k][j] = i + 1\nfor p, y in q:\n    print((\"{:0>6}{:0>6}\".format(p, c[p][y])))\n", "import sys\nimport math\nimport itertools\nimport collections\nfrom collections import deque\nfrom collections import defaultdict\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\nMOD2 = 998244353\nINF = float('inf')\ninput = lambda: sys.stdin.readline().strip()\n\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\ndef main():\n\n    N, M = NMI()\n        \n    PY = [[m,NLI()] for m in range(M)]\n    \n    PY = list(sorted(list(sorted(PY,key = lambda x : x[1][1])),key = lambda x : x[1][0]))\n    \n\n    \n    city = PY[0][1][0]\n    cnt = 0\n\n    for m in range(M):\n        if PY[m][1][0] == city:\n            cnt += 1\n        else:\n            city = PY[m][1][0]\n            cnt = 1\n            \n        PY[m][1] = str(PY[m][1][0]).zfill(6) + str(cnt).zfill(6)\n    \n    PY = list(sorted(PY))\n    \n    \n    for m in range(M):\n        print(PY[m][1])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nfrom collections import defaultdict\n\n(n, m), *q = [[*list(map(int, i.split()))] for i in sys.stdin]\nd = defaultdict(list)\nfor k, v in q:\n    d[k].append(v)\nc = defaultdict(dict)\nfor k, v in list(d.items()):\n    for i, j in enumerate(sorted(v)):\n        c[k][j] = i + 1\nfor p, y in q:\n    print((\"{:0>6}{:0>6}\".format(p, c[p][y])))\n", "N, M = [int(x) for x in input().split()]\nC = [0 for _ in range(N)]\nV = []\nIDs = []\nfor i in range(M):\n    P, Y = [int(x) for x in input().split()]\n    V.append([Y, P, i])\nV.sort()\nfor v in V:\n    C[v[1] - 1] += 1\n    x = C[v[1] - 1]\n    IDs.append(f\"{v[2]:06d}{v[1]:06d}{x:06d}\")\nIDs.sort()\nfor i in IDs:\n    print((i[6:]))\n", "N, M = list(map(int, input().split()))\nPY = [list(map(int, input().split())) + [i] for i in range(M)]\n\nPY.sort(key=lambda x:x[1])\nans = []\ncnt = [0] * N\nfor p, y, i in PY:\n  ans.append((\"{0:06d}\".format(p)+\"{0:06d}\".format(cnt[p-1]+1), i))\n  cnt[p-1] += 1\nans.sort(key=lambda x:x[1])\nfor a in ans:\n  print((a[0]))\n\n\n", "n, m = list(map(int, input().split()))\n\norder = [[] for i in range(n + 1)]\nid_perf_map = [-1 for i in range(m + 1)]\n\nfor i in range(1, m + 1):\n    p, y = list(map(int, input().split()))\n    id_perf_map[i] = p\n    order[p].append((i, y))\n\nid_num_map = [-1 for i in range(m + 1)]\n\nfor i in range(1, n + 1):\n    order[i] = list(sorted(order[i], key=lambda x: x[1]))\n    for idx, (city_id, _) in enumerate(order[i]):\n        id_num_map[city_id] = idx + 1\n\nfor i in range(1, m + 1):\n    print(('{:06}{:06}'.format(id_perf_map[i], id_num_map[i])))\n\n", "import bisect\n\nn,m=list(map(int,input().split()))\n\nans=[]\n\nre=[[] for _ in range(n)]\n\n\n\nfor _ in range(m):\n  a=list(map(int,input().split()))\n  re[a[0]-1].append(a[1])\n  ans.append(a)\n  \nd=[]\nfor f in re:\n  sor=[]\n  \n  new=sorted(list(set(f)))\n  \n  for i in f:\n    c=bisect.bisect_left(new,i)\n    sor.append(c+1)\n    \n  d.append(sor)\n    \n  \nfor x in ans:\n  p=x[0]\n  q=d[p-1].pop(0)\n  print((str('{:0=6}'.format(p))+str('{:0=6}'.format(q))))\n  \n\n", "\nn,m = map(int, input().split())\npyl = [ [] for _ in range(n+1) ]\n\nfor i in range(m):\n    p,y = map(int, input().split())\n    pyl[p].append((y,i))\n\nans = ['']*m\nfor p, yil in enumerate(pyl):\n    top = str(p).zfill(6)\n    yil.sort()\n    for order,(y,i) in enumerate(yil):\n        bottom = order+1\n        bottom = str(bottom).zfill(6)\n        ans[i] = top+bottom\n\nfor a in ans:\n    print(a)", "N, M = map(int, input().split())\n\np_dict = {}\n\nfor i in range(M):\n  p, y = map(int, input().split())\n  if p not in p_dict.keys():\n    p_dict[p] = [[y, p, i]]\n  else:\n    p_dict[p].append([y, p, i])\n  \nans = []\nfor p in p_dict.keys():\n  p_dict[p].sort()\n  for i in range(len(p_dict[p])):\n    p_dict[p][i].append(i + 1)\n    ans.append(p_dict[p][i])\n    \nans.sort(key=lambda x: x[2])\nfor y, p, oi, si in ans:\n  print(\"{:06d}{:06d}\".format(p, si))", "n, m = map(int,input().split())\nnumbers = [{} for _ in range(n)]\n\nfor i in range(m):\n    p, y = map(int,input().split())\n    numbers[p-1][i] = y #p\u3067\u770c\u3092\u6307\u5b9a\u3057\u3066\u3001i\u3067\u9806\u756a\u306e\u60c5\u5831\u3092\u4fdd\u3064\n\nanswers = {}\n\nfor i in range(n):\n    number = numbers[i]\n    if len(number) == 0:\n        continue\n    new_number = sorted(number.items(), key = lambda x : x[1]) #x[1]\u3067\u8a95\u751f\u306d\u3093\u3067\u30bd\u30fc\u30c8\n    cnt = 1\n    for num in new_number:\n        answers[num[0]] = (6-len(str(i+1)))*'0' + str(i+1) + (6-len(str(cnt)))*'0' + str(cnt)\n        cnt += 1\n\nanswer = sorted(answers.items(), key = lambda x : x[0])\n\nfor i in answer:\n    print(i[1])", "N, M = list(map(int, input().split()))\n\nC = []\nfor i in range(M):\n    p, y = list(map(int, input().split()))\n    C.append([i, p, y])\nC.sort(key=lambda x: (x[1], x[2]))\n\nans = []\nk = C[0][1]\nn = 1\nfor i in range(M):\n    city = C[i][1]\n    if k != city:\n        k = city\n        n = 1\n    number = f'{city:06}{n:06}'\n    ans.append([C[i][0], number])\n    n += 1\nans.sort(key=lambda x: x[0])\nfor i in range(M):\n    print((ans[i][1]))\n", "from collections import defaultdict\nN, M = list(map(int, input().split()))\nL = []\nA = []\nfor _ in range(M):\n    p, y = list(map(int, input().split()))\n    L.append([p, y])\n    A.append([p, y])\n\nL.sort(key=lambda x: x[1])\n\nans_d = defaultdict()\ndp = [0] * (N + 1)\nfor i, v in enumerate(L):\n    # k = 6 - len(str(v[0]))\n    s = ''\n    if (dp[v[0]] != 0):\n        l_dp = 6 - len(str(dp[v[0]] + 1))\n        for j in range(l_dp):\n            s += '0'\n\n        s += str(dp[v[0]] + 1)\n        dp[v[0]] += 1\n    else:\n        l_dp = 6 - len(str(dp[v[0]] + 1))\n        for j in range(l_dp):\n            s += '0'\n        s += str(dp[v[0]] + 1)\n        dp[v[0]] += 1\n    k = str(v[0]) + ' ' + str(v[1])\n    ans_d[k] = s\n\nfor i in A:\n    m = str(i[0]) + ' ' + str(i[1])\n    k = 6 - len(str(i[0]))\n    s = ''\n    for j in range(k):\n        s += '0'\n    s += str(i[0])\n    print((s + ans_d[m]))\n", "N,M = map(int,input().split())\nP = [list(map(int,input().split())) for i in range(M)]\nfor i in range(M):\n    P[i].append(i)\nP.sort(key=lambda x: x[1])\nB = [1]*N\n\nfor i in range(M):\n    P[i] += \"0\"*(6 - len(str(P[i][0]))) + str(P[i][0]) + \"0\"*(6 - len(str(B[P[i][0]-1]))) + str(B[P[i][0]-1]),\n    B[P[i][0]-1] += 1\n    \nP.sort(key=lambda x: x[2])\nfor i in range(M):\n    print(P[i][3])", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N, M = MI()\n    L = []\n    \n    for i in range(M):\n        temp = [i]+LI()\n        L.append(temp)\n    L.sort(key = lambda x: x[2])\n    L.sort(key = lambda x: x[1])\n    ans = [0]*M\n    D = defaultdict(int)\n    for a,b,c in L:\n        D[b]+=1\n        c = D[b]\n        ans[a] = str(b).zfill(6)+str(c).zfill(6)\n    \n    for i in ans:\n        print(i)\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import defaultdict\n \n \nN, M = map(int, input().split())\nPY = [list(map(int, input().split())) for _ in range(M)]\n \ndi = defaultdict(list)\n \nfor i, py in enumerate(PY):\n    di[py[0]].append([py[1], i])\n \nans = [\"\" for _ in range(M)]\n \nfor k, v in di.items():\n    v.sort()\n \n    for j, yi in enumerate(v):\n        s = str(k).zfill(6)\n        t = str(j + 1).zfill(6)\n        ans[yi[1]] = s + t\n \nprint(\"\\n\".join(ans))", "n,m=map(int,input().split())\nd=[0]*m\nK=[[] for i in range(n)]\nfor i in range(m):\n  p,y=map(int,input().split())\n  K[p-1].append((i,y))\nfor i in range(n):\n  K[i].sort(key=lambda x: x[1])\n  c=1\n  for a,b in K[i]:\n    ken=str(i+1)\n    t=str(c)\n    d[a]=str('0'*(6-len(ken)))+ken+str('0'*(6-len(t)))+t\n    c+=1\nfor i in d:\n  print(i)", "N, M = list(map(int, input().split()))\nkeep = [[] for i in range(N)]\nkeep2 = []\n\n\nfor i in range(M):\n    p, y = list(map(int, input().split()))\n    keep[p - 1].append([i, p, y])\n\n\nfor i in range(N):\n    keep[i] = sorted(keep[i], key=lambda x: x[2])\n\nfor i in range(N):\n    biggest = len(keep[i])\n    j = 0\n    while j < biggest:\n        keep[i][j][2] = j + 1\n        j += 1\n    keep2 += keep[i]\n\nkeep2 = sorted(keep2, key=lambda x: x[0])\n\nfor i in range(M):\n    ans = ''\n    ans += '0' * (6 - len(str(keep2[i][1]))) + str(keep2[i][1])\n    ans += '0' * (6 - len(str(keep2[i][2]))) + str(keep2[i][2])\n    print(ans)\n", "N, M = list(map(int, input().split()))\nPY = []\nfor i in range(M):\n    PY.append([i] + list(map(int, input().split())))\n\nPY.sort(key=lambda x: x[2])\nans = []\nC = [0] * (N+1)\nfor i, P, Y in PY:\n    C[P] += 1\n    ans.append([i, '{:0=6}{:0=6}'.format(P, C[P])])\nans.sort()\nfor i, a in ans:\n    print(a)\n", "N,M=map(int,input().split())\nA=[]\nfor i in range(M):\n    P,Y=map(int,input().split())\n    A.append([P,Y,i])\n\nans=[\"\"]*M\nA=sorted(A, key=lambda x: x[1])\nA=sorted(A,key=lambda x:x[0])\n\nnow=A[0][0]\ncnt=1\nfor i in range(M):\n    pref=str(A[i][0])\n    \n    if A[i][0]!=now:\n        cnt=1\n    year=str(cnt)\n    now=A[i][0]\n    cnt+=1\n\n    ans[A[i][2]]=pref.zfill(6)+year.zfill(6)\n\nfor i in range(M):\n    print(ans[i])", "N,M = map(int,input().split())\npy = [list(map(int,input().split()))+[i] for i in range(M)]\npy.sort()\nP = py[0][0]\nc = 0\nans = []\nfor p,y,i in py:\n    if p == P:\n        c += 1\n    else:\n        P = p\n        c = 1\n    ansc = str(c)\n    ansp = str(p)\n    anser = \"0\" * (6-len(ansp)) + ansp + \"0\" *(6-len(ansc)) + ansc\n    ans.append([i,anser])\nans.sort()\nfor i,anser in ans:\n    print(anser)", "N, M = list(map(int, input().split()))\nPY = [list(map(int, input().split())) + [i] for i in range(M)]\n\nsortPY = sorted(PY, key=lambda x: x[1])\nprefec = [0]*(N+1)\nres = []\nfor p, y, i in sortPY:\n    prefec[p] += 1\n    strp = str(p)\n    ID = '0'*(6-len(strp)) + strp + '0'*(6-len(str(prefec[p]))) + str(prefec[p])\n    res.append([ID, i])\n\nsortres = sorted(res, key=lambda x: x[1])\nfor i in range(M):\n    print((sortres[i][0]))\n", "N,M=map(int,input().split())\nPY=[list(map(int,input().split())) for i in range(M)]\nPYI=sorted([(p,y,i) for i,(p,y) in enumerate(PY)])\nr=['']*M\na,b=0,0\nfor p,y,i in PYI:\n    if a!=p:\n        a,b=p,1\n    else:\n        b+=1\n    r[i]=str(p).zfill(6)+str(b).zfill(6)\nprint(*r,sep='\\n')", "def __starting_point():\n\tn,m = list(map(int,input().split()))\n\n\tA = []\n\tfor i in range(m):\n\t\ta,b = list(map(int,input().split()))\n\t\tA.append([a,b,i,\"\"])\n\n\t#\u5404\u5185\u90e8\u914d\u5217\u3067\u30bd\u30fc\u30c8\u3059\u308b\n\tB = sorted(A,key=lambda x:(x[0],x[1]))\n\n\tno = 1\n\ttmp = 0\n\tfor b in B:\n\t\tif tmp == b[0]:\n\t\t\tno += 1\n\t\telse:\n\t\t\ttmp = b[0]\n\t\t\tno = 1\n\n\t\t#\u5e02\u901a\u756a\n\t\tcityno = str(b[0]).zfill(6) + str(no).zfill(6)\n\t\tb[3] = cityno\n\n\t#\u518d\u30bd\u30fc\u30c8\u3059\u308b\n\tC = sorted(B,key=lambda x:(x[2]))\n\t\n\tfor c in C:\n\t\tprint((c[3]))\n\n__starting_point()", "N, M = list(map(int, input().split()))\nP = [0] * M\nfor i in range(M):\n    P[i] = list(map(int, input().split())) + [i + 1]\n\nP = sorted(P, key = lambda x: x[1])\nP = sorted(P, key = lambda x: x[0])\n\na = P[0][0]\nc = 0\nfor i in range(M):\n    #print(P[i])\n    if P[i][0] == a:\n        c += 1\n        P[i].append(c)\n    else:\n        c = 1\n        a = P[i][0]\n        P[i].append(c)\n    #print(P[i])\n\nP = sorted(P, key = lambda x: x[2])\nfor i in range(M):\n    s = str(P[i][0]).zfill(6)\n    ss = str(P[i][3]).zfill(6)\n    print((s + ss))\n\n\n", "import bisect\nn,m = map(int, input().split(\" \"))\npy = [list(map(int, input().split(\" \"))) for i in range(m)]\nn_py = sorted(py)\na = [[] for i in range(n+1)]\nfor i,j in py:\n  a[i].append(j)\nfor i in range(1, n+1):\n  a[i] = sorted(a[i])\n#print(a)\n#print(py)\nfor i, j in py:\n  ix, ij = map(str, [i, bisect.bisect(a[i], j)])\n  \n  print(\"0\"*(6-len(ix))+ ix + \"0\"*(6-len(ij))+ij)", "n,m = map(int, input().split())\nab = [list(map(int, input().split())) for _ in range(m)]\n\nfor i in range(m):\n    ab[i].append(i)\n\nab_l = sorted(ab, key=lambda x: x[1])\nab_ll = sorted(ab_l, key=lambda x: x[0])\n\ntemp = 1\nfor j in range(m):\n    if j==0 or ab_ll[j][0] != ab_ll[j-1][0]:\n        temp = 1\n    else:\n        temp +=1\n    ab_ll[j].append(temp)\n\nab_lll = sorted(ab_ll, key=lambda x: x[2])\n\nfor i in range(m):\n    print(str(ab_lll[i][0]).zfill(6)+str(ab_lll[i][3]).zfill(6))", "n, m = map(int, input().split())\n\npy = []\nfor i in range(m):\n    p, y = map(int, input().split())\n    py.append([i, p, y])\ncnt = [0] * (n + 1)\n\nsorted_py = sorted(py, key = lambda x: (x[1], x[2]))\nfor i in range(m):\n    cnt[sorted_py[i][1]] += 1\n    city_id = str(sorted_py[i][1]).zfill(6)+str(cnt[sorted_py[i][1]]).zfill(6)\n    sorted_py[i].append(city_id)\n\nsorted_py = sorted(sorted_py, key = lambda x: x[0])\nfor i in range(m):\n    print(sorted_py[i][3])", "n,m=list(map(int,input().split()))\npre=[[] for i in range(n)]\npre_num=[[] for i in range(n)]\ncity=[]\n\nfor i in range(m):\n  #p\u306e\u770c\u306b\u5c5e\u3057\u3066y\u5e74\u306b\u3067\u304d\u305f\n  p,y=list(map(int,input().split()))\n  pre[p-1].append(y)\n  city.append(p-1)\n\nfrom bisect import bisect_right\n\nfor i in range(n):\n  town=sorted(pre[i])\n  for j in range(len(town)):\n    pre_num[i].append(bisect_right(town,pre[i][j]))\n\ncnt=[0 for i in range(n)]\nfor i in city:\n  print((str(i+1).zfill(6)+str(pre_num[i][cnt[i]]).zfill(6)))\n  cnt[i]+=1\n  \n\n\n  \n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep 15 01:01:58 2020\n\n@author: liang\n\"\"\"\n#\u30bc\u30ed\u30d1\u30c7\u30a3\u30f3\u30b0\uff0b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n#str(1).zfill(6) + str(a.index(2) + 1).zfill(6)\n#index(x) \u304c\u91cd\u3044 => index\u3092\u4f7f\u308f\u306a\u304f\u3066\u826f\u3044\u3088\u3046\u306b\u3059\u308b\n\nN, M = map(int, input().split())\n#d = [list() for _ in range(N)]\ndic = dict()\ndic2 = dict()\nP = list()\n\n#insert O(M)\nfor i in range(M):\n    p, y = map(int,input().split())\n    #d[p-1].append(y)\n    if p not in dic.keys():\n        dic[p] = [y]\n    else:\n        dic[p].append(y)\n    P.append((p,y))\n\n#year sort O(N log N) => \u91cd\u3044\u3000dict\u4f7f\u7528\n#for i in range(N):\n#    d[i].sort()\nfor key in dic.keys():\n    dic[key].sort()\n\nfor key in dic.keys():\n    for i in range(len(dic[key])):\n        dic2[dic[key][i]] = i+1\n#search O(M)***\nfor i in range(M):\n    p, y = P[i]\n    ans = str(p).zfill(6)+str(dic2[y]).zfill(6)\n    \"\"\"\n    # zfill \u91cd\u3044\uff1f\n    ans = ''\n    ans += '0'*( 6 - len(str(p))) + str(p)\n    #t = dic[p].index(y)+1\n    t = dic2[y]\n    ans += '0'*( 6 - len(str(t))) + str(t)\n    \"\"\"\n    print(ans)", "def make_code(prifacture_num, city_num):\n    s1 = str(prifacture_num)\n    while len(s1) != 6:\n        s1 = '0' + s1\n    s2 = str(city_num)\n    while len(s2) != 6:\n        s2 = '0' + s2\n    return s1 + s2\n\n\nprifacture_cnt, city_cnt = list(map(int, input().split()))\ndata = [list(map(int, input().split())) for i in range(city_cnt)]\ncity_data = []\n\nfor i in range(city_cnt):\n    city_data.append([data[i][0], data[i][1], i])\n\ncity_data.sort()\ncity_code = []\nprifacture = city_data[0][0]\ncnt = 0\nfor city in city_data:\n    if prifacture == city[0]:\n        cnt+=1\n        s = make_code(prifacture, cnt)\n        city_code.append([city[2], s])\n    else:\n        cnt = 1\n        prifacture = city[0]\n        s = make_code(prifacture, cnt)\n        city_code.append([city[2], s])\n\ncity_code.sort()\nfor num,code in city_code:\n    print(code)\n", "import sys\nfrom operator import itemgetter\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, M, *PY = map(int, read().split())\n    city = [(p, y, i) for i, (p, y) in enumerate(zip(*[iter(PY)] * 2))]\n\n    city.sort(key=itemgetter(1))\n\n    counter = [0] * (N + 1)\n    ans = [0] * M\n    for p, y, i in city:\n        counter[p] += 1\n        ans[i] = f\"{p:>06}{counter[p]:>06}\"\n\n    print(*ans, sep='\\n')\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    import sys\n    input = sys.stdin.readline\n    \n    N,M = map(int,input().split())\n    PY = [[i]+list(map(int,input().split())) for i in range(M)]\n\n    PY = sorted(PY,key = lambda x:(x[1],x[2]))\n    \n    ans_li = ['0'*12]*M\n    town_dict = {}\n\n    for idx,p,y in PY:\n        x = town_dict.get(p,1)\n\n        id_ = ('{:6d}'.format(p)+'{:6d}'.format(x)).replace(' ','0')\n        ans_li[idx] = id_\n\n        town_dict[p] = town_dict.get(p,1)+1\n\n    print('\\n'.join(ans_li))\n    \ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\n#= int(input())\n#= input()\nN, M = map(int, input().split())\nPY = [list(map(int, input().split())) for _ in range(M)]\n\niPY = [[i] + PY[i] for i in range(M)]\n\niPY.sort(key=lambda x: (x[1], x[2]))\n\nans = []\ncnt = 1\nlast = -1\nfor i, p, y in iPY:\n    if p == last:\n        cnt += 1\n    else:\n        last = p\n        cnt = 1\n\n    ans.append([i, str(p).zfill(6) + str(cnt).zfill(6)])\n\nans.sort()\n\nfor a in ans:\n    print(a[1])", "class Info:\n  def __init__(self, num, p, y, id):\n    self.num = num\n    self.p = p\n    self.y = y\n    self.id = id\n    \nn, m = map(int, input().split())\ninfo = [Info(0, 0, 0, '')]\nfor num in range(1, m + 1):\n  p, y = map(int, input().split())\n  info.append(Info(num, p, y, ''))\n\ninfo = sorted(info, key=lambda x: (x.p, x.y))\n\ncnt = 1\nfor i in range(1, m + 1):\n  if info[i].p != info[i-1].p:\n    cnt = 1\n  else:\n    cnt += 1\n  info[i].id = \"{0:06d}{1:06d}\".format(info[i].p, cnt)\n\ninfo = sorted(info, key=lambda x: x.num)\ninfo.pop(0)\n\nfor x in info:\n  print(x.id)", "N, M = list(map(int, input().split()))\nPY = [list(map(int, input().split())) + [i] + [0] for i in range(M)]\n\nPY_sorted = sorted(PY, key=lambda a: (a[0], a[1]))\nPY_sorted[0][3] = str(PY_sorted[0][0]).zfill(6) + str(1).zfill(6)\n#print(PY_sorted)\ncnt = 1\nfor i in range(1, M):\n    cnt += 1\n    if PY_sorted[i][0] != PY_sorted[i - 1][0]:\n        cnt = 1\n        PY_sorted[i][3] = str(PY_sorted[i][0]).zfill(6) + str(cnt).zfill(6)\n    else:\n        PY_sorted[i][3] = str(PY_sorted[i][0]).zfill(6) + str(cnt).zfill(6)\n#print(PY_sorted)\nans = sorted(PY_sorted, key=lambda a: a[2])\nfor a in ans:\n    print((a[3]))\n\n", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\ndef main():\n    n,m = i_map()\n    l = []\n    for i in range(m):\n        p,y = i_map()\n        l.append([i,p,y,0])\n\n    l.sort(key = lambda x :(x[1], x[2]))\n    ken = l[0][1]\n    cnt = 1\n\n    for i in l:\n        if i[1] == ken:\n            i[3] = cnt\n            cnt += 1\n        else:\n            i[3] = 1\n            cnt = 2\n            ken = i[1]\n    l.sort(key = lambda x:x[0])\n\n    ans = []\n    for i in l:\n        ans.append(str(i[1]).zfill(6) + str(i[3]).zfill(6))\n    for i in ans:\n        print(i)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m=map(int,input().split())\nc=[[] for _ in range(n)]\nfor i in range(m):\n    p,y=map(int,input().split())\n    c[p-1].append([i,y])\nans=[0]*m\nfor i in range(n):\n    c[i].sort(key=lambda x:x[1])\n    for j in range(len(c[i])):\n        ID=str(i+1).zfill(6)+str(j+1).zfill(6)\n        ans[c[i][j][0]]=ID\nprint(*ans,sep=\"\\n\")", "n,m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(m)]\nb = [[] for _ in range(n+1)]\nfor i in range(m):\n    b[a[i][0]].append((a[i][1],i+1))\n#print(b)\nfor i in range(1,n+1):\n    b[i].sort()\nans = [\".\"]*m\nfor i in range(1,n+1):\n    for j in range(len(b[i])):\n        ans[b[i][j][1]-1] = \"0\"*(6-len(str(i))) + str(i) + \"0\"*(6-len(str(j+1))) + str(j+1)\nprint(*ans, sep=\"\\n\")", "def main():\n    import bisect\n    n,m = list(map(int,input().split()))\n    d = [[] for i in range(n)]\n    ans = [0 for i in range(m)]\n    for i in range(m):\n        p,y = list(map(int,input().split()))\n        d[p-1].append((y,i))\n    for i,d_ in enumerate(d):\n        d_.sort()\n        for c, d__ in enumerate(d_):\n            ans[d__[1]] = str(i+1).zfill(6) + str(c+1).zfill(6)\n    for i in range(m):\n        print((ans[i]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, M = list(map(int, input().split()))\n\nno = {}\nken = [[] for i in range(N)]\nfor i in range(M):\n    p, y = list(map(int, input().split()))\n    no[i] = str(p)+'_'+str(y)\n    ken[p-1].append(y)\n\nans = {}\nfor i in range(N):\n    ken[i].sort()\n    for j in range(len(ken[i])):\n        ans[str(i+1)+'_'+str(ken[i][j])] = str(i+1).zfill(6) + str(j+1).zfill(6)\n\nfor i in range(M):\n    print((ans[no[i]]))\n", "n, m = list(map(int, input().split()))\ncity = []\n\nfor i in range(m):\n    a = list(map(int, input().split()))+[i]\n    city.append(a)\ncity.sort(key=lambda x: x[1])\n\ncount = [1 for _ in range(n)]\nfor k in range(m):\n    city[k].append(count[city[k][0]-1])\n    count[city[k][0]-1] += 1\ncity.sort(key=lambda x: x[2])\n\nfor i in city:\n    print((str(i[0]).zfill(6)+str(i[-1]).zfill(6)))\n", "n,m = map(int,input().split())\nL = []\nfor i in range(m):\n    li = list(map(int,input().split()))\n    L.append(li)\n\nli = []\nfor i,j in enumerate(L):\n    li.append(j+[i])\nli.sort(key = lambda x:(x[0],x[1]))\n\nli.append([0,0,0])\n\nk,r = li[0][0],1\nfor i in range(m):\n    if li[i][0] == k:\n        if li[i+1][1] == li[i][1]:\n            li[i][1] = r\n            li[i+1][1] = r\n        else:\n            li[i][1] = r\n            r +=1\n    else:\n        k = li[i][0]\n        r = 1\n        li[i][1] = r\n        r +=1\n\nli.pop()\n\nli.sort(key = lambda x:x[2])\n\nfor i in range(m):\n    print(\"{:06d}\".format(li[i][0])+\"{:06d}\".format(li[i][1]))", "from bisect import bisect_left\nn,m = map(int, input().split())\n\nl = [[] for _ in range(n)]\ncity = []\nfor i in range(m):\n  p,y = map(int, input().split())\n  city.append([p,y])\n  l[p-1].append(y)\n\nfor i in l: i.sort()\nfor i in city:\n  ans = \"\"\n  ans += \"0\"*(6-len(str(i[0])))+str(i[0])\n  t = str(bisect_left(l[i[0]-1], i[1]) + 1)\n  ans += \"0\"*(6-len(t))+t\n  print(ans)", "n,m=map(int, input().split())\nalist=[]\nfor i in range(m):\n  p,y=map(int, input().split())\n  alist.append([i+1,p,y])\nalist.sort(key=lambda x: x[2])\nblist=[0]*(n+1)\nans=[0]*m\nfor i in range(m):\n  blist[alist[i][1]]+=1\n  ans1='0'*(6-len(str(alist[i][1])))\n  ans2=str(alist[i][1])\n  ans3='0'*(6-len(str(blist[alist[i][1]])))\n  ans4=str(blist[alist[i][1]])\n  ans[alist[i][0]-1]=ans1+ans2+ans3+ans4\nfor i in range(m):\n  print(ans[i])", "N,M = list(map(int,input().split()))\nD = [[]for _ in range(N)]#\u5143\u306e\u5165\u529b\u9806\u3068\u8a2d\u7acb\u5e74\u6570\u3092\u770c\u3054\u3068\u306b\u4fdd\u6301\u3059\u308b\u30ea\u30b9\u30c8\n\nfor i in range(M):\n    p,y = list(map(int,input().split()))\n    D[p-1].append((y,i))\nans = [0]*M\n#print(D)\n\nfor i,d in enumerate(D):\n    #print(i,d)\n    d.sort()\n    for k,(y,j)in enumerate(d):\n        #print(k,(y,j))\n        ans[j]=str(i+1).zfill(6)+str(k+1).zfill(6)\n\nprint(('\\n'.join(ans)))\n\n\n", "N,M=map(int,input().split())\npy=[list(map(int,input().split()))for _ in range(M)]\nepy=list(enumerate(py))\nP=[[]for _ in range(N+1)]\nfor x in epy:\n    P[x[1][0]].append(x)\n\ni=1\nans=[]\nwhile i<=N:\n    L=P[i]\n    L.sort(key=lambda x:x[1])\n    j=0\n    while j<len(L):\n        L[j][1][1]=j+1\n        ans.append(L[j])\n        j+=1\n    i+=1\nans.sort()\n\nfor e,py in ans:\n    p,y=map(str,py)\n    p='0'*(6-len(p))+p\n    y='0'*(6-len(y))+y\n    print(p+y)", "n,m=list(map(int,input().split()))\nken=[1 for i in range(n+1)]\ninf=[[] for i in range(m)]\ndef f(x):\n    m=0\n    while x>0:\n        m+=1\n        x=x//10\n    return m\n\nfor i in range(m):\n    p,y=list(map(int,input().split()))\n    inf[i].append(i+1)\n    inf[i].append(p)\n    inf[i].append(y)\ninf=sorted(inf, key=lambda x: x[2])\n\nfor i in range(m):\n    inf[i].append(ken[inf[i][1]])\n    ken[inf[i][1]]+=1\ninf=sorted(inf)\n\n\nfor i in range(m):\n    ans=\"\"\n    p=inf[i][1]\n    y=inf[i][3]\n    for j in range(6-f(p)):\n        ans+=\"0\"\n    ans=ans+str(p)\n    \n    for j in range(6-f(y)):\n        ans=ans+\"0\"\n    ans=ans+str(y)\n    print(ans)\n    \n    \n    \n    \n    \n\n\n\n    \n        \n        \n        \n          \n", "N,M=map(int,input().split())\nA=[[] for i in range(N)]\nfor i in range(M):\n  a,b=map(int,input().split())\n  A[a-1].append((b,i))\nans=[0]*M\nfor i in range(N):\n  d=sorted(A[i])\n  n=len(d)\n  for j in range(n):\n    a,b=d[j]\n    D=str(i+1)\n    E=str(j+1)\n    r=D.zfill(6)+E.zfill(6)\n    ans[b]=r\nfor i in ans:\n  print(i)", "import numpy as np\n\nN,M=map(int,input().strip().split())\nPY=np.array([list(map(int,input().strip().split())) for _ in range(M)])\n\nl=[[] for n in range(N)]\nfor m in range(M):\n    l[PY[m,0]-1].append(PY[m,1])\n\ndp={}\nfor n in range(N):\n    if l[n]:\n        l[n].sort()\n        for i in range(len(l[n])):\n            city=\"000000\"+str(n+1)\n            num=\"000000\"+str(i+1)\n            dp[(n,l[n][i]-1)]=str(city[-6:]+num[-6:])\nfor m in range(M):\n    print(dp[(PY[m,0]-1,PY[m,1]-1)])", "n, m = list(map(int, input().split()))\ncities = []\n\nfor i in range(m):\n    p, y = list(map(int, input().split()))\n    cities.append([p, y, i])\n\nsorted_cities = sorted(cities, key=lambda x: (x[0], x[1]))\ncnt = 1\nans = []\nfor i in range(m-1):\n    p_id = str(sorted_cities[i][0]).rjust(6, '0')\n    c_id = str(cnt).rjust(6, '0')\n    ans.append([sorted_cities[i][2], p_id+c_id])\n    if sorted_cities[i][0] != sorted_cities[i+1][0]:\n        cnt = 1\n    else:\n        cnt += 1\n\np_id = str(sorted_cities[m-1][0]).rjust(6, '0')\nc_id = str(cnt).rjust(6, '0')\nans.append([sorted_cities[m-1][2], p_id+c_id])\nans.sort()\n\nfor id in ans:\n    print((id[1]))\n\n", "from collections import defaultdict\nfrom bisect import bisect\n\nN, M = list(map(int, input().split()))\np = [tuple(map(int, input().split())) for _ in range(M)]\na = defaultdict(list)\nfor x, y in sorted(p):\n    a[x] += [y]\n\nfor x, y in p:\n    z = bisect(a[x], y)\n    print((\"%06d%06d\"%(x, z)))\n", "n, m = map(int, input().split())\n\nP = []\nY = []\nI = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    P.append(a)\n    Y.append(b)\n    I.append(i)\n\nZ = zip(P, Y, I)\nZ = sorted(Z)\nP, Y, I = zip(*Z)\n\nN = []\nc = P[0]\nd = 1\nfor i in range(m):\n    if c == P[i]:\n        N.append(\"{0:06d}{1:06d}\".format(c, d))\n        d += 1\n    else:\n        c = P[i]\n        d = 1\n        N.append(\"{0:06d}{1:06d}\".format(c, d))\n        d += 1\n\nZ = zip(I, N)\nZ = sorted(Z)\nI, N = zip(*Z)\nfor i in N:\n    print(i)", "def main():\n    n,m=map(int,input().split())\n    l=[tuple(map(int,input().split())) for _ in range(m)]\n    py=sorted(l, key=lambda x: (x[0],x[1]))\n    d={}\n    i = 1\n    prev=0\n    for p,y in py:\n        if prev != p:\n            i = 1\n            prev = p\n        d[(p,y)] = \"{:0>6}\".format(p)+\"{:0>6}\".format(i)\n        i += 1\n    for x in l:\n        print(d[x])\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import defaultdict\nfrom bisect import bisect\nn,m=map(int,input().split())\nl=[tuple(map(int,input().split())) for _ in range(m)]\na=defaultdict(list)\nfor x,y in sorted(l):\n    a[x]+=[y]\n\nfor x,y in l:\n    z=bisect(a[x],y)\n    print('%06d%06d'%(x,z))", "n, m = list(map(int, input().split()))\nps = [[] for _ in range(n)]\n\nfor i in range(m):\n    p, y = list(map(int, input().split()))\n    ps[p-1].append((y, i))\n\nfor i in range(n):\n    ps[i] = sorted(ps[i])\n\n    pstr = str(i+1).zfill(6)\n\n    for j in range(len(ps[i])):\n        ps[i][j] = (pstr + str(j+1).zfill(6), ps[i][j][1])\n\nps = [city for sub in ps for city in sub]\nps = sorted(ps, key = lambda x: x[1])\n\nfor city in ps:\n    print(city[0])", "n,m = map(int,input().split())\nl = [[] for i in range(m)]\nfor i in range(m):\n    a,b = map(int,input().split())\n    l[i] = [a,b,i]\nl = list(sorted(l,key=lambda x: (x[0], x[1])))\nans = [[] for i in range(m)]\nx = 0\ny = 1\nfor i in range(m):\n    if x != l[i][0]:\n        x = l[i][0]\n        y = 1\n    else:\n        y += 1\n    a = str(x).zfill(6)\n    b = str(y).zfill(6)\n    ans[i] = [a+b,l[i][2]]\nans = list(sorted(ans,key=lambda x: x[1]))\nfor i in range(m):\n    print(ans[i][0])", "# author:  Taichicchi\n# created: 11.10.2020 10:28:32\n\nimport sys\n\nn, m = list(map(int, input().split()))\n\nls = [[i] + list(map(int, input().split())) for i in range(m)]\n\nls.sort(key=lambda x: x[2])\nd = dict(list(zip(list(range(1, n + 1)), [0 for i in range(n)])))\n\n\nfor i in range(m):\n    ls[i].append(d[ls[i][1]] + 1)\n    d[ls[i][1]] += 1\n    ls[i].append(str(ls[i][1]).zfill(6) + str(ls[i][3]).zfill(6))\n\nls.sort(key=lambda x: x[0])\n\nfor l in ls:\n    print((l[-1]))\n", "n,m=map(int,input().split())\nPY=[list(map(int,input().split())) for _ in range(m)]\nfor i in range(m):\n    PY[i].append(i)\npy=sorted(PY)\nans=[None]*m\n#print(py,PY)\ntmp_y=1\nfor i in range(m):\n    if i>0:\n        if py[i][0]!=py[i-1][0]:\n            tmp_y=1\n        else:\n            tmp_y+=1\n    ans_l=\"0\"*(6-len(str(py[i][0])))+str(py[i][0])\n    ans_r=\"0\"*(6-len(str(tmp_y)))+str(tmp_y)\n    #print(ans_l+ans_r)\n    ans[py[i][2]]=ans_l+ans_r\n[print(i) for i in ans]", "n, m = list(map(int, input().split()))\np_y = []\nfor i in range(m):\n    p, y = list(map(int, input().split()))\n    p_y.append([p, y, i])\n\np_y_sorted = sorted(p_y)\nli_id = []\nprev_p = -1\ncnt = 1\n\nfor i in p_y_sorted:\n    if(prev_p != i[0]):\n        prev_p = i[0]\n        cnt = 1\n    id = str(i[0]).zfill(6) + str(cnt).zfill(6)\n    li_id.append([i[2], id])\n    cnt += 1\n\nli_id_sorted = sorted(li_id)\n\nfor i in li_id_sorted:\n    print((i[1]))\n\n", "import bisect\nn,m = map(int,input().split())\nx = [list() for i in range(n)]\np = []\ny = []\nfor i in range(m):\n  s,t = map(int,input().split())\n  p.append(s)\n  y.append(t)\n  x[s-1].append(t)\nfor i in range(n):\n  x[i].sort()\n  \nfor i in range(m):\n  index = bisect.bisect_left(x[p[i]-1],y[i])\n  print(\"{:06}{:06}\".format(p[i],index+1))", "n, m = list(map(int, input().split()))\ncity = [list(map(int, input().split())) for _ in range(m)]\npref = [[] for _ in range(n+1)]\n\nans = []\n\nfor i, c in enumerate(city):\n    pref[c[0]].append([i, c[1]])\n\nfor i in range(n):\n    pref[i + 1].sort(key=lambda x: x[1])\n    for j in range(len(pref[i + 1])):\n        ans.append([pref[i+1][j][0], str(i+1).zfill(6) + str(j+1).zfill(6)])\n\nans.sort(key=lambda x: x[0])\n\nfor c in ans:\n    print((c[1]))\n", "n, m = list(map(int, input().split()))\n\nc = [0] * (n+1)\n\npy = []\n\nfor i in range(m):\n    py.append(list(map(int, input().split())) + [i])\n\npy.sort(key=lambda x:x[1])\n\na = [\"\"] * m\n\nfor p, y, i in py:\n    c[p] += 1\n    x = c[p]\n    z = str(p * 1000000 + x)\n    #print(a)\n    if len(z) < 12:\n        a[i] = \"0\" * (12-len(z)) + z\n    else:\n        a[i] = z\n\nfor x in a:\n    print(x)", "n,m=list(map(int,input().split()))\n\nans=[]\n\nre=[[] for _ in range(n)]\n\n\n\nfor _ in range(m):\n  a=list(map(int,input().split()))\n  re[a[0]-1].append(a[1])\n  ans.append(a)\n  \nd={}\nfor f in re:\n  new=sorted(f)\n  \n  for i in range(len(new)):\n    d[new[i]]=i+1\n  \nfor x in ans:\n  p=x[0]\n  q=d[x[1]]\n  print((str('{:0=6}'.format(p))+str('{:0=6}'.format(q))))\n  \n\n", "N,M=list(map(int,input().split()))\nnumbers=[{} for n in range(N)]\nfor m in range(M):\n    P,Y=list(map(int,input().split()))\n    numbers[P-1][m]=Y\nanswers={}\nfor n in range(N):\n    number=numbers[n]\n    if len(number)==0:\n        continue\n    new_number=sorted(list(number.items()), key=lambda x:x[1])\n    suuji=1\n    for num in new_number:\n        answers[num[0]]=(6-len(str(n+1)))*'0'+str(n+1)+(6-len(str(suuji)))*'0'+str(suuji)\n        suuji+=1\nanswer=sorted(list(answers.items()), key=lambda x:x[0])\nfor ans in answer:\n    print((ans[1]))\n", "N, M = map(int, input().split())\ncnt = [0]*N\nhistory = []\nres = ['']*M\n\nfor i in range(M):\n    P, Y = map(int, input().split())\n    history.append((Y, P - 1, i))\n\nhistory.sort()\n\nfor i in range(M):\n    cnt[history[i][1]] += 1\n    res[history[i][2]] = str(history[i][1] + 1).zfill(6) + str(cnt[history[i][1]]).zfill(6)\n\nfor i in range(M):\n    print(res[i])", "n,m = map(int,input().split())\np_dict = {}\nans = []\nfor i in range(m):\n    p,y = map(int,input().split())\n    if p not in p_dict.keys():\n        p_dict[p] = [[y,p,i]]\n    else:\n        p_dict[p].append([y,p,i])\n\nfor p in p_dict.keys():\n    p_dict[p].sort()\n    for i in range(len(p_dict[p])):\n        p_dict[p][i].append(i+1)\n        ans.append(p_dict[p][i])\n\nans.sort(key=lambda x: x[2])  \nfor y, p, oi, si in ans:  \n    print(\"{:06d}{:06d}\".format(p, si)) ", "def digit6(n):\n  return (\"000000\" + str(n))[-6:]\n\ndef main():\n  N, M = list(map(lambda n: int(n), input().split(\" \")))\n  CITY = []\n  for i in range(M):\n    tmp = input().split(\" \")\n    CITY.append({\n      \"pref\": int(tmp[0]),\n      \"year\": int(tmp[1]),\n      \"no\": i + 1\n    })\n    \n  CITY.sort(key=lambda c: (c[\"pref\"], c[\"year\"]))\n  \n  order = 0\n  pref = \"\"\n  for c in CITY:\n    if pref != c[\"pref\"]:\n      pref = c[\"pref\"]\n      order = 1\n    else:\n      order += 1\n    c[\"id\"] = digit6(pref) + digit6(order)\n  \n  CITY.sort(key=lambda c: c[\"no\"])\n  for i in range(len(CITY)):\n    print(CITY[i][\"id\"])\n      \n    \n  \nmain()", "N,M=list(map(int,input().split()))\nPY=[[list(map(int,input().split())),i] for i in range(M)]\nPY.sort()\ncnt=[0 for i in range(N+1)]\nans=[]\nfor i in range(M):\n    cnt[PY[i][0][0]]+=1\n    ans.append([PY[i][1],str(PY[i][0][0]).zfill(6)+str(cnt[PY[i][0][0]]).zfill(6)])\nans.sort()\nfor i in range(M):\n    print((ans[i][1]))\n", "n,m = map(int,input().split())\nls = [[] for _ in range(n+1)]\ndi = []\nfor i in range(m):\n    a,b = map(int,input().split())\n    ls[a].append([b,i+1])\nfor j in range(n+1):\n    if ls[j] != []:\n        ls[j].sort(key=lambda x :x[0])\n        for k in range(len(ls[j])):\n            di.append([ls[j][k][1],str(10**12+j*10**6+k+1)[1:]])\ndi.sort(key=lambda x :x[0])\nfor l in range(m):\n    print(di[l][1])", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N, M, PY):\n    ken = [0] * (N + 1)\n    PY = [PY[i] + [i] for i in range(M)]\n    PY.sort(key=lambda x: x[1])\n    for i in range(M):\n        p, y, s = PY[i]\n        ken[p] += 1\n        PY[i].append(ken[p])\n    PY.sort(key=lambda x: x[2])\n    for p, y, s, n in PY:\n        print((('000000' + str(p))[-6:] + ('000000' + str(n))[-6:]))\n\n\ndef __starting_point():\n    N, M = list(map(int, input().split()))\n    PY = [[int(i) for i in input().split()] for _ in range(M)]\n    solve(N, M, PY)\n\n    # # test\n    # from random import randint, sample\n    # from func import random_str\n    # N, M = 10 ** 5, 10 ** 5\n    # PY = sample([[randint(1, 5), 10 ** 8 - i] for i in range(M)], M)\n    # solve(N, M, PY)\n\n__starting_point()", "#!/usr/bin/env python3\n(n, m), *q = [[*list(map(int, i.split()))] for i in open(0)]\ns = sorted(q)\nd = {}\nfor k, v in s:\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\nc = {}\nfor k, v in list(d.items()):\n    i = 0\n    if k not in c:\n        c[k] = {}\n    while i < len(v):\n        i += 1\n        c[k][v[~-i]] = str(i)\nfor p, y in q:\n    pn = \"00000\" + str(p)\n    cn = \"00000\" + c[p][y]\n    print((pn[-6:] + cn[-6:]))\n", "N,M=map(int,input().split())\nd={}\nPY=[]\nimport bisect\nfor _ in range(M):\n    p,y=map(int,input().split())\n    PY.append((p,y))\n    t=d.get(p, [0])\n    i=bisect.bisect_left(t,y)\n    t.insert(i,y)\n    d[p]=t\n    \ndx={}\nfor k, v in d.items():\n    for i in range(len(v)):\n        dx[(k,v[i])]=i\n        \nfor p,y in PY:\n    print(str(p).zfill(6)+str(dx[(p,y)]).zfill(6))", "from operator import itemgetter\n\nn, m = map(int, input().split())\nyp = []\nfor i in range(m):\n  p_, y_ = map(int, input().split())\n  yp.append([y_, p_, i+1])\npy = sorted(yp)\nken = [0]*n\nres = []\nfor i in range(m):\n  ken[py[i][1]-1] += 1\n  p, q, r = py[i][1], ken[py[i][1]-1], py[i][2]\n  res.append([p, q, r])\n#print(yp)\n#print(py)\n\nres.sort(key=itemgetter(2))\n#print(res)\nfor i in range(m):\n  ans1 = [0]*(6-len(str(res[i][0])))\n  ans1.append(res[i][0])\n  ans2 = [0]*(6-len(str(res[i][1])))\n  ans2.append(res[i][1])\n  print(*ans1, *ans2, sep='')", "n,m = map(int,input().split())\na = []\nfor i in range(m):\n    x,y = map(int,input().split())\n    a.append([x,y])\nb = a.copy()\nc = sorted(b, key=lambda x:(x[0],x[1]))\nd = [{}for i in range(10**5+1)]\ncount = 1\ns = '%d' % c[0][0]\ns = s.zfill(6)\ns2 = '%d' % count\ns2 = s2.zfill(6)\n\nd1 = {c[0][1]:s+s2}\nfor i in range(1,m):\n    if c[i][0] == c[i-1][0]:\n        count +=1\n        s2 = '%d' % count\n        s2 = s2.zfill(6)\n        d1[c[i][1]] = s+s2\n    else:\n        d[c[i-1][0]] = d1\n        count = 1\n        s = '%d' % c[i][0]\n        s = s.zfill(6)\n        s2 = '%d' % count\n        s2 = s2.zfill(6)\n        d1 = {c[i][1]:s+s2}\nd[c[-1][0]] = (d1)\nfor i in range(m):\n    d2 = d[a[i][0]]\n    print(d2.get(a[i][1]))"]