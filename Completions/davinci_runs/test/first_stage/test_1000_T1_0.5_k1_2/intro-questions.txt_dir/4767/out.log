2022-04-09 22:05:45.940911 """
We’re working on a new super-computer, built to unleash the hidden computing powers of all eight dimensions of reality. The secret to utilizing more dimensions turns out to be to use counting registers of different sizes. In particular, we have eight registers, counting cyclically modulo the different primes $2$, $3$, $5$, $7$, $11$, $13$, $17$, $19$. A size $p$ register stores a value between $0$ and $p-1$ (inclusive). 

The only operation available is an “increment” operation. When it is performed, the size $2$ register is increased by $1$. If this increment causes overflow (i.e., if the old value was $1$) the value is reset to $0$, and the size $3$ is incremented. If this causes overflow the size $3$ register is reset to $0$ and the size $5$ register is incremented, and so on. If this goes all the way to the last register and the size $19$ register overflows, the computer blows up.

In order not to destroy the computer in testing, we need to build a program to check the safety of doing increment operations before we perform them. Given the current state of the registers, you need to compute how many more operations can safely be performed before the computer blows up.

-----Input-----
The input consists of a single line containing eight integers $v_2$, $v_3$, $v_5$, $v_7$, $v_{11}$, $v_{13}$, $v_{17}$, $v_{19}$ indicating the current values of the registers. The value of the size $p$ register is always between $0$ and $p-1$ (inclusive).

-----Output-----
Ouput a single line containing an integer $N$, the number of additional operations that can be performed without the computer blowing up.

-----Examples-----
Sample Input 1:
0 0 4 6 10 12 16 18
Sample Output 1:
5

Sample Input 2:
1 2 4 6 10 12 16 18
Sample Output 2:
0
"""
2022-04-09 22:05:45.940934 --------------------------
2022-04-09 22:06:17.541495 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649556346,
  "id": "cmpl-4vHFSg2Aquw5RJ39a0AwLdV3FiKVo",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 22:06:17.541864 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()"
}
2022-04-09 22:06:17.541926 REASON stop
2022-04-09 22:06:17.542780 test/intro-questions.txt_dir/4767/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4767/solutions.json'
2022-04-09 22:06:17.542807 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()"
}
2022-04-09 22:06:17.542868 REASON stop
2022-04-09 22:06:17.543163 test/intro-questions.txt_dir/4767/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4767/solutions.json'
2022-04-09 22:06:17.543200 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 22:06:17.543309 REASON stop
2022-04-09 22:06:17.543589 test/intro-questions.txt_dir/4767/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4767/solutions.json'
2022-04-09 22:06:17.543618 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()"
}
2022-04-09 22:06:17.543688 REASON stop
2022-04-09 22:06:17.544108 test/intro-questions.txt_dir/4767/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4767/solutions.json'
2022-04-09 22:06:17.544142 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()"
}
2022-04-09 22:06:17.544225 REASON stop
2022-04-09 22:06:17.544653 test/intro-questions.txt_dir/4767/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4767/solutions.json'
2022-04-09 22:06:17.544681 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()"
}
2022-04-09 22:06:17.544760 REASON stop
2022-04-09 22:06:17.544998 test/intro-questions.txt_dir/4767/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4767/solutions.json'
2022-04-09 22:06:17.545011 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:06:17.545053 REASON stop
2022-04-09 22:06:17.545291 test/intro-questions.txt_dir/4767/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4767/solutions.json'
2022-04-09 22:06:17.545303 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:06:17.545354 REASON stop
2022-04-09 22:06:17.545893 test/intro-questions.txt_dir/4767/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4767/solutions.json'
