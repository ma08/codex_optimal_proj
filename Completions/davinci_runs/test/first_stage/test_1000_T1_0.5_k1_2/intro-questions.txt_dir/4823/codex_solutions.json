["\n\n#This solution is a little bit different than the one in the book.\n#The book uses a dictionary to keep track of how many of each rank\n#there is in the hand. I decided to use a list instead.\n\n#The input is a string with the hand.\nhand = input()\n\n#This list will keep track of how many of each rank there is in the hand\nhandCount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n#This for loop will add one to the appropriate index of the list\n#depending on the rank of the card.\nfor i in range(0, 5):\n    if hand[3*i] == 'A':\n        handCount[0] += 1\n    elif hand[3*i] == '2':\n        handCount[1] += 1\n    elif hand[3*i] == '3':\n        handCount[2] += 1\n    elif hand[3*i] == '4':\n        handCount[3] += 1\n    elif hand[3*i] == '5':\n        handCount[4] += 1\n    elif hand[3*i] == '6':\n        handCount[5] += 1\n    elif hand[3*i] == '7':\n        handCount[6] += 1\n    elif hand[3*i] == '8':\n        handCount[7] += 1\n    elif hand[3*i] == '9':\n        handCount[8] += 1\n    elif hand[3*i] == 'T':\n        handCount[9] += 1\n    elif hand[3*i] == 'J':\n        handCount[10] += 1\n    elif hand[3*i] == 'Q':\n        handCount[11] += 1\n    elif hand[3*i] == 'K':\n        handCount[12] += 1\n\n#This for loop will find the maximum value in the handCount list,\n#which is the strength of the hand.\nstrength = 0\nfor i in range(0, 13):\n    if handCount[i] > strength:\n        strength = handCount[i]\n\n#The strength is printed.\nprint(strength)", "\n\n#input\ncards = input().split()\n\n#creates a dictionary of the ranks of the cards\nrank = {'A':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0, 'T':0, 'J':0, 'Q':0, 'K':0}\nfor i in range(5):\n    rank[cards[i][0]] += 1\n    \n#prints the maximum value of the dictionary\nprint(max(rank.values()))", "\n\nfrom collections import Counter\n\nhand = input().split()\nstrength = max(Counter(hand).values())\nprint(strength)", "\n\ndef get_hand_strength(hand):\n    ranks = [card[0] for card in hand]\n    return max([ranks.count(rank) for rank in ranks])\n\ndef main():\n    hand = input().split()\n    print(get_hand_strength(hand))\n\nmain()", "\n\ndef main():\n    # Read input\n    s = input()\n    # Split input into list of cards\n    cards = s.split()\n    # Initialize dictionary to count number of cards of each rank\n    rank_count = {}\n    # Iterate through cards\n    for card in cards:\n        # Get rank of current card\n        rank = card[0]\n        # If there are no cards of this rank, initialize count to 1\n        if rank not in rank_count:\n            rank_count[rank] = 1\n        # If there are cards of this rank, increment count\n        else:\n            rank_count[rank] += 1\n    # Get maximum count\n    max_count = max(rank_count.values())\n    # Output maximum count\n    print(max_count)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef card_to_value(card):\n    return '23456789TJQKA'.index(card[0])\n\ndef card_to_suit(card):\n    return 'CDHS'.index(card[1])\n\ndef is_flush(cards):\n    suit = card_to_suit(cards[0])\n    for card in cards[1:]:\n        if suit != card_to_suit(card):\n            return False\n    return True\n\ndef is_straight(cards):\n    values = [card_to_value(card) for card in cards]\n    values.sort()\n    if values[0] == 0:\n        values.append(14)\n    for i in range(1, len(values)):\n        if values[i] - values[i-1] != 1:\n            return False\n    return True\n\ndef is_four_of_a_kind(cards):\n    values = [card_to_value(card) for card in cards]\n    values.sort()\n    if values[0] == values[1] == values[2] == values[3]:\n        return True\n    if values[1] == values[2] == values[3] == values[4]:\n        return True\n    return False\n\ndef is_three_of_a_kind(cards):\n    values = [card_to_value(card) for card in cards]\n    values.sort()\n    if values[0] == values[1] == values[2]:\n        return True\n    if values[1] == values[2] == values[3]:\n        return True\n    if values[2] == values[3] == values[4]:\n        return True\n    return False\n\ndef is_two_pair(cards):\n    values = [card_to_value(card) for card in cards]\n    values.sort()\n    if values[0] == values[1] and values[2] == values[3]:\n        return True\n    if values[0] == values[1] and values[3] == values[4]:\n        return True\n    if values[1] == values[2] and values[3] == values[4]:\n        return True\n    return False\n\ndef is_pair(cards):\n    values = [card_to_value(card) for card in cards]\n    values.sort()\n    if values[0] == values[1]:\n        return True\n    if values[1] == values[2]:\n        return True\n    if values[2] == values[3]:\n        return True\n    if values[3] == values[4]:\n        return True\n    return False\n\ndef get_highest_card(cards):\n    values = [card_to_value(card) for card in cards]\n    values.sort()\n    return values[-1]\n\ndef get_strength(cards):\n    if is_flush(cards) and is_straight(cards):\n        return 8\n    if is_four_of_a_kind(cards):\n        return 7\n    if is_flush(cards):\n        return 6\n    if is_straight(cards):\n        return 5\n    if is_three_of_a_kind(cards):\n        return 4\n    if is_two_pair(cards):\n        return 3\n    if is_pair(cards):\n        return 2\n    return 1\n\ndef get_tiebreaker(cards):\n    if is_flush(cards) and is_straight(cards):\n        return get_highest_card(cards)\n    if is_four_of_a_kind(cards):\n        return get_highest_card(cards)\n    if is_flush(cards):\n        return get_highest_card(cards)\n    if is_straight(cards):\n        return get_highest_card(cards)\n    if is_three_of_a_kind(cards):\n        return get_highest_card(cards)\n    if is_two_pair(cards):\n        values = [card_to_value(card) for card in cards]\n        values.sort()\n        if values[0] == values[1] and values[2] == values[3]:\n            return values[0] + values[2]\n        if values[0] == values[1] and values[3] == values[4]:\n            return values[0] + values[3]\n        if values[1] == values[2] and values[3] == values[4]:\n            return values[1] + values[3]\n    if is_pair(cards):\n        values = [card_to_value(card) for card in cards]\n        values.sort()\n        if values[0] == values[1]:\n            return values[0]\n        if values[1] == values[2]:\n            return values[1]\n        if values[2] == values[3]:\n            return values[2]\n        if values[3] == values[4]:\n            return values[3]\n    return get_highest_card(cards)\n\ncards = input().split()\nprint(get_strength(cards), get_tiebreaker(cards))", "\n\ncards = input().split()\n\ncounts = {}\n\nfor card in cards:\n    if card[0] in counts.keys():\n        counts[card[0]] += 1\n    else:\n        counts[card[0]] = 1\n\nprint(max(counts.values()))", "\n\nfrom collections import Counter\n\nranks = [card[0] for card in input().split()]\n\nresult = 0\n\nfor rank, count in Counter(ranks).items():\n    if count > result:\n        result = count\n\nprint(result)"]