2022-04-09 20:54:13.758944 """
You are given a string S of length N consisting of lowercase English letters.
We will cut this string at one position into two strings X and Y.
Here, we would like to maximize the number of different letters contained in both X and Y.
Find the largest possible number of different letters contained in both X and Y when we cut the string at the optimal position.

-----Constraints-----
 - 2 \leq N \leq 100
 - |S| = N
 - S consists of lowercase English letters.

-----Input-----
Input is given from Standard Input in the following format:
N
S

-----Output-----
Print the largest possible number of different letters contained in both X and Y.

-----Sample Input-----
6
aabbca

-----Sample Output-----
2

If we cut the string between the third and fourth letters into X = aab and Y = bca, the letters contained in both X and Y are a and b.
There will never be three or more different letters contained in both X and Y, so the answer is 2.
"""
2022-04-09 20:54:13.758980 --------------------------
2022-04-09 20:54:29.273760 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef solve(s):\n    return len(set(s[:len(s)//2]) & set(s[len(s)//2:]))\n\nprint(solve(input()))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN = int(input())\nS = input()\n\ndef main():\n    # s_list = [s for s in S]\n    # print(s_list)\n    # print(s_list[:3])\n    # print(s_list[3:])\n    # print(set(s_list[:3]))\n    # print(set(s_list[3:]))\n    # print(set(s_list[:3]) & set(s_list[3:]))\n    # print(len(set(s_list[:3]) & set(s_list[3:])))\n    # print(set(s_list[:4]) & set(s_list[4:]))\n    # print(len(set(s_list[:4]) & set(s_list[4:])))\n    ans = 0\n    for i in range(1, N):\n        ans = max(ans, len(set(S[:i]) & set(S[i:])))\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649552054,
  "id": "cmpl-4vG8EcdYAE54aeCN2BoAoHrBo8l51",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:54:29.274181 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef solve(s):\n    return len(set(s[:len(s)//2]) & set(s[len(s)//2:]))\n\nprint(solve(input()))"
}
2022-04-09 20:54:29.274284 REASON stop
2022-04-09 20:54:29.287480 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN = int(input())\nS = input()\n\ndef main():\n    # s_list = [s for s in S]\n    # print(s_list)\n    # print(s_list[:3])\n    # print(s_list[3:])\n    # print(set(s_list[:3]))\n    # print(set(s_list[3:]))\n    # print(set(s_list[:3]) & set(s_list[3:]))\n    # print(len(set(s_list[:3]) & set(s_list[3:])))\n    # print(set(s_list[:4]) & set(s_list[4:]))\n    # print(len(set(s_list[:4]) & set(s_list[4:])))\n    ans = 0\n    for i in range(1, N):\n        ans = max(ans, len(set(S[:i]) & set(S[i:])))\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 20:54:29.287581 REASON stop
