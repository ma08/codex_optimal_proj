2022-04-09 21:02:26.403838 """
Takahashi participated in a contest on AtCoder.
The contest had N problems.
Takahashi made M submissions during the contest.
The i-th submission was made for the p_i-th problem and received the verdict S_i (AC or WA).
The number of Takahashi's correct answers is the number of problems on which he received an AC once or more.
The number of Takahashi's penalties is the sum of the following count for the problems on which he received an AC once or more: the number of WAs received before receiving an AC for the first time on that problem.
Find the numbers of Takahashi's correct answers and penalties.

-----Constraints-----
 - N, M, and p_i are integers.
 - 1 \leq N \leq 10^5
 - 0 \leq M \leq 10^5
 - 1 \leq p_i \leq N
 - S_i is AC or WA.

-----Input-----
Input is given from Standard Input in the following format:
N M
p_1 S_1
:
p_M S_M

-----Output-----
Print the number of Takahashi's correct answers and the number of Takahashi's penalties.

-----Sample Input-----
2 5
1 WA
1 AC
2 WA
2 AC
2 WA

-----Sample Output-----
2 2

In his second submission, he received an AC on the first problem for the first time. Before this, he received one WA on this problem.
In his fourth submission, he received an AC on the second problem for the first time. Before this, he received one WA on this problem.
Thus, he has two correct answers and two penalties.
"""
2022-04-09 21:02:26.403855 --------------------------
2022-04-09 21:02:41.478002 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom collections import defaultdict\n\ndef main(N, M, p, S):\n    acs = defaultdict(int)\n    penalties = defaultdict(int)\n    for i in range(M):\n        if S[i] == 'AC':\n            if acs[p[i]] == 0:\n                acs[p[i]] = 1\n        else:\n            penalties[p[i]] += 1\n    ac_count = sum(acs.values())\n    penalty_count = sum([penalties[i] for i in penalties if acs[i] == 1])\n    print(ac_count, penalty_count)\n\nif __name__ == '__main__':\n    N, M = map(int, input().split())\n    p = [0]*M\n    S = [0]*M\n    for i in range(M):\n        p[i], S[i] = input().split()\n    main(N, M, p, S)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# -----Input Part-----\nN, M = map(int, input().split())\n\n# -----Process Part-----\nresult = [0] * N\npenalty = [0] * N\n\nfor i in range(M):\n    p, S = input().split()\n    p = int(p) - 1\n    if S == \"AC\" and result[p] == 0:\n        result[p] = 1\n    elif S == \"WA\" and result[p] == 0:\n        penalty[p] += 1\n\n# -----Output Part-----\nprint(sum(result), sum(penalty))"
    }
  ],
  "created": 1649552547,
  "id": "cmpl-4vGGBfpoUMVcsT1HzuQiO0Q0IZxSz",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:02:41.478210 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom collections import defaultdict\n\ndef main(N, M, p, S):\n    acs = defaultdict(int)\n    penalties = defaultdict(int)\n    for i in range(M):\n        if S[i] == 'AC':\n            if acs[p[i]] == 0:\n                acs[p[i]] = 1\n        else:\n            penalties[p[i]] += 1\n    ac_count = sum(acs.values())\n    penalty_count = sum([penalties[i] for i in penalties if acs[i] == 1])\n    print(ac_count, penalty_count)\n\nif __name__ == '__main__':\n    N, M = map(int, input().split())\n    p = [0]*M\n    S = [0]*M\n    for i in range(M):\n        p[i], S[i] = input().split()\n    main(N, M, p, S)"
}
2022-04-09 21:02:41.478260 REASON stop
2022-04-09 21:02:41.479428 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# -----Input Part-----\nN, M = map(int, input().split())\n\n# -----Process Part-----\nresult = [0] * N\npenalty = [0] * N\n\nfor i in range(M):\n    p, S = input().split()\n    p = int(p) - 1\n    if S == \"AC\" and result[p] == 0:\n        result[p] = 1\n    elif S == \"WA\" and result[p] == 0:\n        penalty[p] += 1\n\n# -----Output Part-----\nprint(sum(result), sum(penalty))"
}
2022-04-09 21:02:41.479490 REASON stop
