2022-04-09 20:18:53.051125 """
On a two-dimensional plane, there are N red points and N blue points.
The coordinates of the i-th red point are (a_i, b_i), and the coordinates of the i-th blue point are (c_i, d_i).
A red point and a blue point can form a friendly pair when, the x-coordinate of the red point is smaller than that of the blue point, and the y-coordinate of the red point is also smaller than that of the blue point.
At most how many friendly pairs can you form? Note that a point cannot belong to multiple pairs.

-----Constraints-----
 - All input values are integers.
 - 1 \leq N \leq 100
 - 0 \leq a_i, b_i, c_i, d_i < 2N
 - a_1, a_2, ..., a_N, c_1, c_2, ..., c_N are all different.
 - b_1, b_2, ..., b_N, d_1, d_2, ..., d_N are all different.

-----Input-----
Input is given from Standard Input in the following format:
N
a_1 b_1
a_2 b_2
:
a_N b_N
c_1 d_1
c_2 d_2
:
c_N d_N

-----Output-----
Print the maximum number of friendly pairs.

-----Sample Input-----
3
2 0
3 1
1 3
4 2
0 4
5 5

-----Sample Output-----
2

For example, you can pair (2, 0) and (4, 2), then (3, 1) and (5, 5).
"""
2022-04-09 20:18:53.051144 --------------------------
2022-04-09 20:19:07.387241 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)"
    }
  ],
  "created": 1649549933,
  "id": "cmpl-4vFa1ZTkSv8gOQG0nocHONSNai6E8",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:19:07.387497 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 20:19:07.387562 REASON stop
2022-04-09 20:19:07.399669 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)"
}
2022-04-09 20:19:07.399785 REASON stop
