2022-04-09 21:23:18.717240 """
=====Problem Statement=====
You are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.

=====Input Format=====
The first line contains N, the number of lines in the XML document.
The next N lines follow containing the XML document.

=====Output Format=====
Output a single line, the integer value of the maximum level of nesting in the XML document.
"""
2022-04-09 21:23:18.717265 --------------------------
2022-04-09 21:23:29.552120 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml =  xml + input() + \"\\n\"\n    tree = xml.strip()\n    depth = depth(tree)\n    print(depth)"
    }
  ],
  "created": 1649553799,
  "id": "cmpl-4vGaNjvOMkTaeBL5kJZLkqSXT03Nn",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:23:29.552525 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))"
}
2022-04-09 21:23:29.552602 REASON stop
2022-04-09 21:23:29.565309 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml =  xml + input() + \"\\n\"\n    tree = xml.strip()\n    depth = depth(tree)\n    print(depth)"
}
2022-04-09 21:23:29.565948 REASON stop
