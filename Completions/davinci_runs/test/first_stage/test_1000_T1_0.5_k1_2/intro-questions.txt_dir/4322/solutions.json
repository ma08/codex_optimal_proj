["# AC\nimport sys\n\n\nclass Main:\n    def __init__(self):\n        self.buff = None\n        self.index = 0\n\n    def __next__(self):\n        if self.buff is None or self.index == len(self.buff):\n            self.buff = self.next_line()\n            self.index = 0\n        val = self.buff[self.index]\n        self.index += 1\n        return val\n\n    def next_line(self, _map=str):\n        return list(map(_map, sys.stdin.readline().split()))\n\n    def next_int(self):\n        return int(next(self))\n\n    def solve(self):\n        n = self.next_int()\n        x = sorted([self.next_int() for _ in range(0, n)])\n        ml = -1\n        _i = 0\n        _j = 0\n        j = 0\n        for i in range(0, n):\n            j = max(j, i)\n            while j + 1 < n and x[j + 1] == x[i]:\n                j += 1\n            while j + 2 < n and x[j + 2] == x[j] + 1:\n                j += 2\n                while j + 1 < n and x[j + 1] == x[j]:\n                    j += 1\n            jj = j\n            if j + 1 < n and x[j + 1] == x[j] + 1:\n                jj += 1\n            if jj - i > ml:\n                ml = jj - i\n                _i = i\n                _j = jj\n        a = []\n        b = []\n        i = _i\n        while i <= _j:\n            a.append(x[i])\n            i += 1\n            while i <= _j and x[i] == a[-1]:\n                b.append(x[i])\n                i += 1\n        print(ml + 1)\n        print(' '.join([str(x) for x in (a + b[::-1])]))\n\n\ndef __starting_point():\n    Main().solve()\n\n__starting_point()", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"Codeforces Round #555 (Div. 3)\n\nProblem F. Maximum Balanced Circle\n\n:author:         Kitchen Tong\n:mail:    kctong529@gmail.com\n\nPlease feel free to contact me if you have any question\nregarding the implementation below.\n\"\"\"\n\n__version__ = '0.1'\n__date__ = '2019-04-26'\n\nimport sys\n\n\ndef solve(n, a):\n    max_a = max(a)\n    counter = [0 for i in range(max_a+1)]\n    for ai in a:\n        counter[ai] += 1\n    best_group = []\n    best_total = 0\n    curr = 1\n    while curr <= max_a:\n        if counter[curr] > 0:\n            curr_group = [curr]\n            curr_total = counter[curr]\n            curr += 1\n            if curr > max_a:\n                break\n            while counter[curr] > 1:\n                curr_group.append(curr)\n                curr_total += counter[curr]\n                curr += 1\n                if curr > max_a:\n                    break\n            if curr > max_a:\n                break\n            if counter[curr] > 0:\n                curr_group.append(curr)\n                curr_total += counter[curr]\n            if curr_total > best_total:\n                best_group = curr_group\n                best_total = curr_total\n        else:\n            curr += 1\n    if curr_total > best_total:\n        best_group = curr_group\n        best_total = curr_total\n\n    seq = best_group\n    for i in best_group[::-1]:\n        seq += [i] * (counter[i] - 1)\n    return (best_total, seq)\n\ndef main(argv=None):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total, seq = solve(n, a)\n    print(total)\n    print(' '.join(map(str, seq)))\n    return 0\n\ndef __starting_point():\n    STATUS = main()\n    return(STATUS)\n\n\n__starting_point()", "rint = lambda: int(input())\nrmint = lambda: map(int, input().split())\nrlist = lambda: list(rmint())\n\nn = rint()\na = [0, 0] * (10 ** 5 + 1)\nfor c in rlist(): a[c] += 1\npr = 0; t = 0; ans = 0; g = 0\nfor i in range(1, 2 * 10 ** 5 + 1):\n    if a[i] < 2:\n        t = 0\n        pr = a[i]\n    else:\n        t += a[i]\n    nx = a[i+1]\n    if pr + t + nx > ans:\n        ans = pr + t + nx\n        g = i\nr = g+1; l = g+1\nwhile a[l-1] > 1: l -= 1\nwhile a[r] > 1: r += 1\nprint(ans)\n# print(l,r)\ndef out(x,y=1):\n    while y:\n        print(x,end=' ')\n        y -= 1\nfor i in range(l,r): out(i)\nout(r,a[r])\nfor i in range(r-1,l-1,-1): out(i,a[i]-1)\nout(l-1,a[l-1])\n", "kk=lambda:map(int,input().split())\n# k2=lambda:map(lambda x:int(x)-1, input().split())\nll=lambda:list(kk())\nn = int(input())\nd = {}\nfor v in kk():\n\tif v not in d: d[v] = 0\n\td[v]+=1\nk = list(d.keys())\nk.sort()\ni = 0\nm = 0\nwhile i < len(k):\n\tstart =x= k[i]\n\ttotal = d[start]\n\twhile i+1 < len(k) and k[i]+1 == k[i+1]:\n\t\ti+=1\n\t\ttotal+=d[k[i]]\n\t\tif d[k[i]] == 1:\n\t\t\tif total > m: m,mi = total,(start, k[i])\n\t\t\tbreak\n\telse: \n\t\ti+=1\n\t\tif total > m: m,mi = total,(start, k[i-1])\nprint(m)\ntbp = []\nfor i in range(mi[0], mi[1]+1):\n\ttbp.extend([i]*(d[i]-1))\nprint()\nfor i in range(mi[1], mi[0]-1, -1):\n\ttbp.append(i)\nprint(*tbp)", "kk=lambda:map(int,input().split())\nll=lambda:list(kk())\nn = int(input())\nd = {}\nfor v in kk():\n\tif v not in d: d[v] = 0\n\td[v]+=1\nk = list(d.keys())\nk.sort()\ni = 0\nm = 0\nwhile i < len(k):\n\tstart =x= k[i]\n\ttotal = d[start]\n\twhile i+1 < len(k) and k[i]+1 == k[i+1]:\n\t\ti+=1\n\t\ttotal+=d[k[i]]\n\t\tif d[k[i]] == 1:\n\t\t\tif total > m: m,mi = total,(start, k[i])\n\t\t\tbreak\n\telse: \n\t\ti+=1\n\t\tif total > m: m,mi = total,(start, k[i-1])\nprint(m)\ntbp = []\nfor i in range(mi[0], mi[1]+1):\n\ttbp.extend([i]*(d[i]-1))\nprint()\nfor i in range(mi[1], mi[0]-1, -1):\n\ttbp.append(i)\nprint(*tbp)", "n=int(input())\na=list(map(int,input().split()))\ncnt=[0]*(200005)\nfor i in range(0,n):\n    cnt[a[i]]+=1\nans=0\nansl=0\nansr=0\nl=1\nN=200001\nwhile (l<=N):\n    if cnt[l]==0:\n        l+=1\n    else:\n        r=l\n        now=0\n        while (r<=N):\n            if cnt[r]==0:\n                r-=1\n                break\n            elif cnt[r]==1 and l!=r:\n                now+=cnt[r]\n                break\n            else:\n                now+=cnt[r]\n                r+=1\n        if now>ans:\n            ansl=l\n            ansr=r\n            ans=now\n        #print(l,r,now)\n        if l==r:\n            l=r+1\n        else:\n            l=r\nseq=[]\nfor i in range(ansl,ansr+1):\n    seq.append(i)\n    cnt[i]-=1\nfor i in range(ansr,ansl-1,-1):\n    while cnt[i]>0:\n        seq.append(i)\n        cnt[i]-=1\nprint(len(seq))\nfor i in seq:\n    print(i,end=\" \")\n            \n", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\nn=int(input())\nA=Counter(list(map(int,input().split())))\nM=max(A)\n\nDP0=[0]*(M+1)\nDP1=[0]*(M+1)\n\nfor i in range(M+1):\n    if A[i]>=2 and A[i-1]>=2:\n        DP0[i]=DP0[i-1]+A[i]\n\n    elif A[i]>=2 and A[i-1]==1:\n        DP0[i]=1+A[i]\n\n    elif A[i]>=2 and A[i-1]==0:\n        DP0[i]=A[i]\n\n    elif A[i]==1:\n        DP0[i]=1\n\n    if A[i]>=2:\n        DP1[i]=DP0[i]\n    elif A[i]==1:\n        DP1[i]=DP0[i-1]+1\n\nANS=max(DP1)\nprint(ANS)\n\nBIG=DP1.index(ANS)\nfor i in range(BIG-1,-1,-1):\n    if A[i]==1:\n        SMALL=i\n        break\n    if A[i]==0:\n        SMALL=i+1\n        break\n\nANSLIST=list(range(SMALL,BIG+1))\n\nfor i in range(BIG,SMALL-1,-1):\n    for k in range(A[i]-1):\n        ANSLIST.append(i)\n\nprint(*ANSLIST)\n", "n=int(input())\na=list(map(int,input().split()))\ncnt=[0]*(200005)\nfor i in range(0,n):\n    cnt[a[i]]+=1\nans=0\nansl=0\nansr=0\nl=1\nN=200001\nwhile (l<=N):\n    if cnt[l]==0:\n        l+=1\n    else:\n        r=l\n        now=0\n        while (r<=N):\n            if cnt[r]==0:\n                r-=1\n                break\n            elif cnt[r]==1 and l!=r:\n                now+=cnt[r]\n                break\n            else:\n                now+=cnt[r]\n                r+=1\n        if now>ans:\n            ansl=l\n            ansr=r\n            ans=now\n        #print(l,r,now)\n        if l==r:\n            l=r+1\n        else:\n            l=r\nseq=[]\nfor i in range(ansl,ansr+1):\n    seq.append(i)\n    cnt[i]-=1\nfor i in range(ansr,ansl-1,-1):\n    while cnt[i]>0:\n        seq.append(i)\n        cnt[i]-=1\nprint(len(seq))\nfor i in seq:\n    print(i,end=\" \")\n            \n", "n = int(input())\n\na = [int(x) for x in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\n    return\n\na.sort()\n\nb = [a[0]]\ncnt = [0]*(200*1000+1)\n\ncnt[a[0]]+=1\nfor i in range(1,n):\n    cnt[a[i]]+=1\n    if a[i-1] != a[i]:\n        b.append(a[i])\n\nl=0\nr=1\nans = cnt[a[0]]\n\ni=0\nwhile i < len(b):\n    j=i+1\n    su = cnt[b[i]]\n    while j<len(b) and b[j]-b[j-1]==1 and cnt[b[j]]>=2:\n        su+=cnt[b[j]]\n        j+=1\n    tmp = j\n    if j<len(b) and b[j]-b[j-1] == 1:\n        su+=cnt[b[j]]\n        j+=1\n    if ans<su:\n        ans = su\n        l = i\n        r = j\n    i=tmp\n\n\nprint(ans)\nfor i in range(l,r):\n    print(b[i],end = ' ')\nfor i in range(r-1,l-1,-1):\n    for j in range(0,cnt[b[i]]-1):\n        print(b[i],end = ' ')\n", "n = int(input())\na = [int(x) for x in input().split()]\nc =[0]*2*100007\ns =[0]*2*100007\nresult=0\ndis=0\nresult_list=[]\nfor i in a:\n    c[i]+=1\nfor i in range(len(c)):\n    if c[i]>0:\n        s[i]=c[i]\n        result=c[i]\n        dis=i\n        break\nfor i in range(dis+1,len(c)):\n    if c[i]>1:\n        s[i]=max(s[i-1]+c[i],c[i-1]+c[i])\n    else:\n        s[i]=0\nfor i in range(1,len(s)):\n    if c[i]+s[i-1]>result:\n        result=c[i]+s[i-1]\n        dis=i\n    if c[i]+c[i-1]>result:\n        result=c[i]+c[i-1]\n        dis=i\nfor i in range(dis-1,-1,-1):\n    if c[i]==1:\n        pos=i\n        break\n    if c[i]==0:\n        pos=i+1\n        break\nprint(result)\nfor i in range(pos,dis+1):\n    print(i,end=\" \")\nfor i in range(dis,pos-1,-1):\n    for j in range(1,c[i]):\n        print(i,end=\" \")\n    ", "import io\nimport os\nfrom collections import defaultdict\nfrom sys import stdin, stdout\n#input = stdin.readline\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sorted(set(a))\n\n    d = {}\n    for val in s:\n        d[val] = 0\n\n    for val in a:\n        d[val] += 1\n\n    max_len = 1\n    res = [a[0]]\n\n    # len 2\n    for j in range(len(s)-1):\n        if d[s[j]] == 1 and d[s[j+1]] == 1 and s[j+1]-s[j]==1:\n            max_len = 2\n            res = [s[j], s[j+1]]\n            break\n\n    # len > 2\n    start = 0\n    while start < len(s) and d[s[start]] == 1:\n        start += 1\n\n    while start < len(s):\n        if start < len(s):\n            l = start\n            r = start\n            while l > 0 and d[s[l-1]] > 1 and s[l]-s[l-1]==1:\n                l -= 1\n            while r < len(s)-1 and d[s[r+1]] > 1 and s[r+1]-s[r]==1:\n                r += 1\n\n            if l > 0 and s[l]-s[l-1] == 1:\n                l -= 1\n            if r < len(s)-1 and s[r+1]-s[r] == 1:\n                r += 1\n\n            total = 0\n            for j in range(l, r+1):\n                total += d[s[j]]\n\n            if total > max_len:\n                max_len = total\n                res = []\n                for j in range(l, r+1):\n                    res.append(s[j])\n                    d[s[j]] -= 1\n                for j in range(r, l-1, -1):\n                    while d[s[j]] > 0:\n                        res.append(s[j])\n                        d[s[j]] -= 1\n            start = r+1\n            while start < len(s) and d[s[start]] == 1:\n                start += 1\n\n    print(len(res))\n    print(*res)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def unique(a):\n    if len(a) == 0:\n        return a\n\n    i = 1\n    j = 1\n    last = a[0]\n    while j < len(a):\n        if a[j] > last:\n            last = a[j]\n            a[i], a[j] = a[j], a[i]\n            i += 1\n        j += 1\n\n    return a[:i]\n\ndef expand(cir):\n    e = []\n    for i in range(len(cir)):\n        e.append(cir[i][0])\n    for i in range(-1, -len(cir) - 1, -1):\n        for _ in range(cir[i][1] - 1):\n            e.append(cir[i][0])\n\n    return e\n\n\nn = int(input())\na = list(map(int, input().split(' ')))\n\nc = dict()\nfor x in a:\n    if x in c:\n        c[x] += 1\n    else:\n        c[x] = 1\n\na.sort()\na = unique(a)\nn = len(a)\n\ncir = []\ncirsize = 0\n\ni = 0\nwhile i < n:\n    j = i + 1\n    while j < n and a[j] == a[j - 1] + 1 and c[a[j]] > 1:\n        j += 1\n    if j < n and a[j] == a[j - 1] + 1:\n        j += 1\n    \n    sz = 0\n    for p in range(i, j):\n        sz += c[a[p]]\n    if sz > cirsize:\n        cir.clear()\n        for p in range(i, j):\n            cir.append((a[p], c[a[p]]))\n        cirsize = sz\n    \n    if c[a[j - 1]] == 1 and i != j - 1:\n        i = j - 1\n    else:\n        i = j\n\nprint(cirsize)\nprint(*expand(cir))\n", "rint = lambda: int(input())\nrmint = lambda: map(int,input().split())\nrlist = lambda: list(rmint())\n\nn = rint()\nlst = rlist()\n\ncnt = {}\nfor nb in lst:\n    if nb not in cnt :\n        cnt[nb] = 1\n    else:\n        cnt[nb] +=1 \narr = sorted(list(cnt.keys()))\nN = len(arr)\n\n\n# print(N,arr, cnt)\nleft, right, k = 0, 0, cnt[arr[0]]\nleft_best, right_best, k_best = 0, 0, cnt[arr[0]]\n\nwhile right < N:\n    while right + 1 < N and arr[right+1] == arr[right] +1 and cnt[arr[right]] >=2:\n        right = right +1\n        k += cnt[arr[right]]\n\n    if k_best  < k:\n        left_best, right_best, k_best = left, right, k\n\n    if right +1 >= N:\n        break\n    elif arr[right+1] != arr[right] + 1 :\n        left = right+1\n        right = right +1\n        k = cnt[arr[left]]\n    else:\n        left = right\n        right = right+1\n        k = cnt[arr[left]] +  cnt[arr[right]]\n\n# print(left_best, right_best, k_best,\"___________\")\nprint(k_best)\nfor idx in range(left_best, right_best+1):\n    print((str(arr[idx]) + \" \") * (cnt[arr[idx]]-1), end = \"\")\n\nfor idx in range(right_best, left_best-1,-1):\n    print((str(arr[idx]))+\" \", end= \"\")\nprint(\"\")\n", "def create(s, e, cnt):\n    arr = []\n    for i in range(s, e+1):\n        arr.extend([i for _ in range(cnt[i]-1)])\n    arr.extend(list(range(e, s-1,-1)))\n    return arr\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef solve(a):\n    cnt = [0] * 200001\n    for x in a:\n        cnt[x]+=1\n    \n    block = [] \n    max_  = 0 \n    i = 0\n    s, e = None, None\n\n    while i<len(cnt):\n        if cnt[i]>1:\n            s=i\n            while i+1<len(cnt) and cnt[i+1]>1:\n                i+=1\n        \n            e=i\n            if s>=1 and cnt[s-1]>0:\n                s-=1\n            if e+1<len(cnt) and cnt[e+1]>0:\n                e+=1\n            \n            block.append([s, e])\n            i=e+1\n        else:\n            i+=1\n            \n    pos=-1\n    for i, [s, e] in enumerate(block):\n        sum_ = 0\n        for j in range(s, e+1):\n            sum_+=cnt[j]\n        \n        if max_ < sum_:\n            max_ = sum_\n            pos  = i\n            \n    if max_ >= 2:\n        arr = create(block[pos][0], block[pos][1], cnt)\n        return len(arr), ' '.join([str(x) for x in arr])\n    else:\n        for i in range(1, 200000):\n            if cnt[i] == 1 and cnt[i+1] == 1:\n                return 2, str(i)+' '+str(i+1)\n        return 1, str(a[0])\n    \nlength, arr = solve(a)\n\nprint(length)\nprint(arr)", "def solve():\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    ans = (1, 0)\n    cur = [a[0]]\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            ans = max(ans, (len(cur), i - 1))\n            cur.clear()\n        elif a[i - 1] < a[i] and (i == n - 1 or a[i] < a[i + 1]):\n            cur.append(a[i])\n            ans = max(ans, (len(cur), i))\n            cur.clear()\n        cur.append(a[i])\n    ans = max(ans, (len(cur), n - 1))\n    print(ans[0])\n    ans1 = []\n    ans2 = []\n    for i in a[ans[1]-ans[0]+1:ans[1]+1]:\n        if not ans1 or ans1[-1] != i:\n            ans1.append(i)\n        else:\n            ans2.append(i)\n    print(*(ans1 + ans2[::-1]))\n\n\nfor _ in range(1):\n    solve()\n", "import sys\nfrom collections import namedtuple\nfrom itertools import groupby\ninput = sys.stdin.readline\n\ndef main():\n    Data = namedtuple('Data', ['arr', 'l', 'r'])\n\n    _ = int(input())\n    a = list(map(int, input().split()))\n\n    f = [ [0, 0] for i in range(max(a) + 2) ]\n\n    for x in a:\n        f[x][0] = x\n        f[x][1] += 1\n\n    best = 0\n    opt = None\n\n    for k, v in groupby(f, key = lambda x: 1 if x[1] else 0):\n        if not k:\n            continue\n\n        v = list(v)\n        i = lst = len(v) - 1\n        t = [0] * (len(v) + 1)\n\n        while i >= 0:\n            t[i] = t[i + 1] + v[i][1]\n\n            if t[i] - t[lst + 1] > best:\n                best = t[i] - t[lst + 1]\n                opt = Data(v, i, lst)\n\n            if v[i][1] == 1:\n                lst = i\n\n            i -= 1\n\n    ans = []\n\n    for i in range(opt.l, opt.r + 1):\n        ans.append(opt.arr[i][0])\n        opt.arr[i][1] -= 1\n\n    for i in range(opt.r, opt.l - 1, -1):\n        while opt.arr[i][1]:\n            ans.append(opt.arr[i][0])\n            opt.arr[i][1] -= 1\n\n    print(len(ans))\n    print(\" \".join(map(str, ans)))\n\nmain()\n"]