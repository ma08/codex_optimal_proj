2022-04-09 19:36:43.232740 """
There are $n$ people in a row. The height of the $i$-th person is $a_i$. You can choose any subset of these people and try to arrange them into a balanced circle.

A balanced circle is such an order of people that the difference between heights of any adjacent people is no more than $1$. For example, let heights of chosen people be $[a_{i_1}, a_{i_2}, \dots, a_{i_k}]$, where $k$ is the number of people you choose. Then the condition $|a_{i_j} - a_{i_{j + 1}}| \le 1$ should be satisfied for all $j$ from $1$ to $k-1$ and the condition $|a_{i_1} - a_{i_k}| \le 1$ should be also satisfied. $|x|$ means the absolute value of $x$. It is obvious that the circle consisting of one person is balanced.

Your task is to choose the maximum number of people and construct a balanced circle consisting of all chosen people. It is obvious that the circle consisting of one person is balanced so the answer always exists.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of people.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 2 \cdot 10^5$), where $a_i$ is the height of the $i$-th person.


-----Output-----

In the first line of the output print $k$ — the number of people in the maximum balanced circle.

In the second line print $k$ integers $res_1, res_2, \dots, res_k$, where $res_j$ is the height of the $j$-th person in the maximum balanced circle. The condition $|res_{j} - res_{j + 1}| \le 1$ should be satisfied for all $j$ from $1$ to $k-1$ and the condition $|res_{1} - res_{k}| \le 1$ should be also satisfied.


-----Examples-----
Input
7
4 3 5 1 2 2 1

Output
5
2 1 1 2 3

Input
5
3 7 5 1 5

Output
2
5 5 

Input
3
5 1 4

Output
2
4 5 

Input
7
2 2 3 2 1 2 2

Output
7
1 2 2 2 2 3 2
"""
2022-04-09 19:36:43.232763 --------------------------
2022-04-09 19:36:53.937274 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    heights = [int(x) for x in sys.stdin.readline().strip().split()]\n    heights.sort()\n    balanced = []\n    last = None\n    for h in heights:\n        if last is None or abs(h - last) <= 1:\n            balanced.append(h)\n            last = h\n    print(len(balanced))\n    print(' '.join(map(str, balanced)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1)\n        print(a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')"
    }
  ],
  "created": 1649547403,
  "id": "cmpl-4vEvDHOLf1vWm71wYA1tx6f5SXmBx",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 19:36:53.937494 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    heights = [int(x) for x in sys.stdin.readline().strip().split()]\n    heights.sort()\n    balanced = []\n    last = None\n    for h in heights:\n        if last is None or abs(h - last) <= 1:\n            balanced.append(h)\n            last = h\n    print(len(balanced))\n    print(' '.join(map(str, balanced)))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 19:36:53.937539 REASON stop
2022-04-09 19:36:53.938593 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1)\n        print(a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')"
}
2022-04-09 19:36:53.938658 REASON stop
