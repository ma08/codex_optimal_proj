["A,S,C=map(str,input().split())\nprint(\"A\"+S[0]+\"C\")", "s=input()\nprint(\"A\"+s[8]+\"C\")", "print(('A' + input().split()[1][0] + 'C'))\n", "a,b,c=map(str,input().split())\nprint('A'+b[0]+'C')", "lst = list(map(str, input().split()))\nprint(lst[0][0] + lst[1][0] + lst[2][0])", "arr = list(input().split())\nprint(arr[0][0] + arr[1][0] + arr[2][0])", "s = input().split()\nprint(\"A\" + s[1][0] + \"C\")", "s=input().split()\ns=[s[i][0] for i in range(len(s))]\nprint(\"\".join(s))", "x=input()\nprint((\"A\"+x[8]+\"C\"))\n", "S = input()\ns = 'A'+S[8].upper() + 'C'\nprint(s)", "s = input().split()\nprint('A'+ s[1][0].upper() +'C')", "a,b,c=input().split()\nprint(a[0]+b[0]+c[0])", "a=list(input().split())\nprint(a[0][0]+a[1][0]+a[2][0])", "a,b,c=map(str,input().split())\nprint(\"A\"+b[0]+\"C\")", "a, b, c = input().split()\n\nprint((a[0] + b[0] + c[0]))\n", "a,b,c = input().split()\n\nprint((a[0]+b[0]+c[0]).upper())", "from sys import stdin, stdout\nfrom time import perf_counter\n\nimport sys\nsys.setrecursionlimit(10**9)\nmod = 10**9+7\n\n# import sys\n# sys.stdout = open(\"e:/python/cp/output.txt\",\"w\")\n# sys.stdin = open(\"e:/python/cp/input.txt\",\"r\")\n\ns = input()\nprint(f\"A{s[8].upper()}C\")", "#!/usr/bin/env python3\n\ndef main():\n    a, s, c = input().split()\n    print((a[0] + s[0] + c[0]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s1, s2, s3 = input().split()\nprint((s1[0] + s2[0] + s3[0]))\n", "s = input().split()\nprint(s[0][0]+s[1][0]+s[2][0])", "print(f'A{input()[8]}C')", "a,s,c=input().split()\nprint(\"A\" + s[0].upper() + \"C\")", "a, b, c = input().split()\nprint(a[0] + b[0] + c[0])", "a,b,c=input().split()\nx=b[0]\nA=[]\nA.append('A')\nA.append(x)\nA.append('C')\nprint(''.join(A))", "s = list(map(str, input().split()))\n\nprint((s[0][0] + s[1][0] + s[2][0]))\n", "a, b, c = list(map(list, input().split()))\n\nprint(\"A\" + b[0] + \"C\")", "def solve():\n    print('A'+input()[8]+'C')\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "a,b,c,=input().split()\nprint((a[0]+b[0]+c[0]))\n", "a,x,c = input().split()\n\nprint('A'+x[0]+'C')", "a,s,t = map(str,input().split())\nprint(\"A\"+s[0]+\"C\")", "a, b, c = list(map(str, input().split()))\nprint((a[0] + b[0] + c[0]))\n", "print(\"A\"+input()[8]+\"C\")", "s = input()\nprint((\"A\" + s[8] + \"C\"))\n", "l = list(input().split())\nprint(\"A\" + l[1][0] + \"C\")", "s = list(input().split())\nn = s[1]\nprint(\"A\" + n[0] + \"C\")", "s=input().split()\n\nprint((\"A\"+s[1][0]+\"C\"))\n", "from sys import stdin, stdout\nfrom time import perf_counter\n\nimport sys\nsys.setrecursionlimit(10**9)\nmod = 10**9+7\n\ns = input()\nprint(f\"A{s[8].upper()}C \")", "a = input().split()\nb=[]\n\nfor i in range(3):\n  b.append(a[i][0])\n  \nprint(b[0]+b[1]+b[2])", "a = list(map(str,input().split()))\nmidle = list(a[1])\nprint(\"A\"+midle[0]+\"C\")", "a,b,c=input().split()\nprint(a[0]+b[0]+c[0])", "A = list(map(str, input().split()))\nprint(A[0][0] + A[1][0] + A[2][0])", "a = input().split()\nprint(*[h[0] for h in a], sep='')\n", "a,s,c=map(str,input().split())\nprint((\"A\"+s[0]+\"C\"))", "s = input()\nprint((\"A\"+s[8]+\"C\"))\n", "a,b,c=input().split()\nprint(a[0]+b[0]+c[0])", "def iroha():\n    head, string, heel = list(map(str, input().split()))\n    headC = head[0]\n    Capital = string[0]\n    heelC = heel[0]\n    print((headC + Capital + heelC))\n\ndef __starting_point():\n    iroha()\n\n\n__starting_point()", "print(*[i[0] for i in input().split()],sep='')", "S = input()\nprint(\"A\"+S[8]+\"C\")", "s = input().split()[1]\nprint(\"A\"+s[0]+\"C\")", "a,b,c=input().split()\nprint('A'+b[0]+'C')", "#\n# abc048 a\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"AtCoder Beginner Contest\"\"\"\n        output = \"\"\"ABC\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"AtCoder Snuke Contest\"\"\"\n        output = \"\"\"ASC\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"AtCoder X Contest\"\"\"\n        output = \"\"\"AXC\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    S = list(input().split())\n\n    print((\"A\"+S[1][0]+\"C\"))\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "s = input().split()\nprint(\"A\", s[1][0], \"C\", sep=\"\")\n", "a = list(input().split())\nprint(\"A\"+a[1][0]+\"C\")", "a, b, c = input().split()\n\nprint(('A' + b[0] + 'C'))\n", "\"\"\"\nABC048 A - AtCoder *** Contest\nhttps://atcoder.jp/contests/abc048/tasks/abc048_a\n\"\"\"\na,b,c = input().split()\nprint((a[0]+b[0]+c[0]))\n", "def __starting_point():\n\tstr = input()\n\ta,b,c = str.split()\n\tprint(a[0]+b[0]+c[0])\n__starting_point()", "print((\"\".join(s[0] for s in input().split())))\n", "x = input()[8]\nprint(\"A\"+x+\"C\")", "lst=input().split()\nx=lst[1]\nprint('A'+x[0]+'C')", "s = input()\nprint(\"A\" + s[8] + \"C\") ", "a,b,c =input().split()\nprint('A' + b[0] + 'C')", "names = input().split()\nprint(\"\".join([a[0] for a in names]))", "A,B,C=input().split()\nprint(\"A\"+B[0]+\"C\")", "S = input().split()\nprint(S[0][0]+S[1][0]+S[2][0])", "s = list(input().split())\nprint(\"A\" + s[1][0] + \"C\")", "print(f\"A%sC\"%input()[8])", "a,b,c = input().split()\n\nprint(a[0]+b[0]+c[0])", "print(''.join([s[0] for s in input().split()]))", "a = list(map(str, input().split()))\nprint(a[0][0] + a[1][0] + a[2][0])", "_, s, _ = input().split()\nprint((\"A\" + s[0] + \"C\"))\n", "a,s,c=map(str,input().split())\n\nprint('A'+s[0]+'C')", "a,b,c=list(map(str,input().split()))\nprint((a[0]+b[0]+c[0]))\n", "a,b,c=input().split()\nprint('A'+b[0]+'C')", "a,b,c = input().split(\" \")\nprint(f\"A{b[0]}C\")", "s = input()\nstrs = s.split(' ')\nc = strs[1][0].upper()\n\nans = \"{}{}{}\".format(strs[0][0], c, strs[2][0])\nprint(ans)", "#48\nS=input().split()\ns=S[1]\nrev_s=list(s)\nprint('A'+rev_s[0]+'C')", "a,b,c=input().split()\nprint(\"A\"+b[0]+\"C\")", "from sys import stdin, stdout\nfrom time import perf_counter\n\nimport sys\nsys.setrecursionlimit(10**9)\nmod = 10**9+7\n\n# import sys\n# sys.stdout = open(\"e:/python/cp/output.txt\",\"w\")\n# sys.stdin = open(\"e:/python/cp/input.txt\",\"r\")\n\n\n\ns = input()\n# print(F\"Atcoder {s.title()} Contest\")\n\n# print(f\"A{s[0].upper()}C \")\nprint(f\"A{s[8].upper()}C\")", "a,b,c =input().split()\n\nprint(\"A\"+ b[0] + \"C\")", "s=input().split()\ns2=s[1]\n\nprint(\"A\"+s2[0]+\"C\")", "import sys, math\nfrom itertools import combinations as c, product as p\nfrom collections import deque\nsys.setrecursionlimit(10**9)\n\n\ndef si(): return input()\ndef ii(): return int(input())\ndef fi(): return float(input())\ndef lstr(): return input().split()\ndef lint(): return list(map(int, input().split()))\ndef lint_dec(): return list([int(x) - 1 for x in input().split()])\ndef lnstr(n): return [input() for _ in range(n)]\ndef lnint(n): return [int(input()) for _ in range(n)]\ndef lint_list(n): return [lint() for _ in range(n)]\n\n\n\n############################################################\nprint(('A' + lstr()[1][0] + 'C'))\n", "title = list(map(str, input().split()))\nprint('A'+title[1][0]+'C')", "a, x, c = input().split()\nprint('A' + x[0] + 'C')", "s = input().split()\nprint(f\"A{s[1][0]}C\")", "a, b, c = map(str, input().split())\nprint(a[0] + b[0] + c[0])", "a, b, c = input().split()\nprint(\"A\" + b[0] + \"C\")", "AtCoder, s, Contest = input().split()\nprint(AtCoder[0] + s[0] + Contest[0])", "x,y,z = input().split()\nprint(x[0]+y[0]+z[0])", "a,b,c=input().split()\nprint(\"A\"+b[0]+\"C\")", "a,b,c=map(str,input().split())\nprint(\"A\"+b[0]+\"C\")", "title = input().split(\" \")\nname = title[1]\nfst = list(name)\nprint((\"A\"+fst[0]+\"C\"))\n", "a,b,c=input().split()\nprint(a[0]+b[0]+c[0])", "a = map(str, input().split())\nname_list = list(a)\nprint('{}{}{}'.format(name_list[0][0], name_list[1][0], name_list[2][0]))", "s, a, b = map(str, input().split())\nprint(\"A\" + a[0] + \"C\")", "A, x, C = list(map(str, input().split()))\nS = 'A' + x[0].upper() + 'C'\nprint(S)", "a,b,c = map(str,input().split())\n\nprint('A'+b[0]+'C')", "a,b,c = list(input().split())\n\nprint(a[0] + b[0] + c[0])", "a, b, c = input().split()\nprint(a[0] + b[0] + c[0])", "S=list(map(str,input().split()))\nprint(\"A\"+S[1][0]+\"C\")"]