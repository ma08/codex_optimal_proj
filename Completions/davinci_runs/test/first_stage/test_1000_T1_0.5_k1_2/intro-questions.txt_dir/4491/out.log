2022-04-09 20:26:08.628328 """
We have a 2 \times N grid. We will denote the square at the i-th row and j-th column (1 \leq i \leq 2, 1 \leq j \leq N) as (i, j).
You are initially in the top-left square, (1, 1).
You will travel to the bottom-right square, (2, N), by repeatedly moving right or down.
The square (i, j) contains A_{i, j} candies.
You will collect all the candies you visit during the travel.
The top-left and bottom-right squares also contain candies, and you will also collect them.
At most how many candies can you collect when you choose the best way to travel?

-----Constraints-----
 - 1 \leq N \leq 100
 - 1 \leq A_{i, j} \leq 100 (1 \leq i \leq 2, 1 \leq j \leq N)

-----Input-----
Input is given from Standard Input in the following format:
N
A_{1, 1} A_{1, 2} ... A_{1, N}
A_{2, 1} A_{2, 2} ... A_{2, N}

-----Output-----
Print the maximum number of candies that can be collected.

-----Sample Input-----
5
3 2 2 4 1
1 2 2 2 1

-----Sample Output-----
14

The number of collected candies will be maximized when you:
 - move right three times, then move down once, then move right once.
"""
2022-04-09 20:26:08.628347 --------------------------
2022-04-09 20:26:24.971893 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(2)]\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[1][i]\n    print(max(dp[0][N - 1], dp[1][N - 1]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    candies_1 = [int(x) for x in input().split()]\n    candies_2 = [int(x) for x in input().split()]\n\n    dp = [[0] * (n+1) for _ in range(2)]\n\n    dp[0][1] = candies_1[0]\n    dp[1][1] = candies_2[0]\n    for j in range(2, n+1):\n        dp[0][j] = max(dp[0][j-1], dp[1][j-1]) + candies_1[j-1]\n        dp[1][j] = max(dp[0][j-1], dp[1][j-1]) + candies_2[j-1]\n\n    print(max(dp[0][n], dp[1][n]))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649550369,
  "id": "cmpl-4vFh3KOOqij7oTksxzMDV1muvURnb",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:26:24.972097 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(2)]\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[1][i]\n    print(max(dp[0][N - 1], dp[1][N - 1]))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:26:24.972143 REASON stop
2022-04-09 20:26:25.011303 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    candies_1 = [int(x) for x in input().split()]\n    candies_2 = [int(x) for x in input().split()]\n\n    dp = [[0] * (n+1) for _ in range(2)]\n\n    dp[0][1] = candies_1[0]\n    dp[1][1] = candies_2[0]\n    for j in range(2, n+1):\n        dp[0][j] = max(dp[0][j-1], dp[1][j-1]) + candies_1[j-1]\n        dp[1][j] = max(dp[0][j-1], dp[1][j-1]) + candies_2[j-1]\n\n    print(max(dp[0][n], dp[1][n]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 20:26:25.011400 REASON stop
