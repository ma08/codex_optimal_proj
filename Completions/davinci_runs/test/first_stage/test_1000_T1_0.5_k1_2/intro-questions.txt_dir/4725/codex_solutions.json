["\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()", "\n\n#The idea is to find the most frequent character, and then delete all other characters.\n\n#If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n#If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n#The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    word = input()\n    if len(set(word)) <= 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input) - 2)\n            return\n        else:\n            print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()", "\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\nprint(min_erase(input()))"]