2022-04-09 20:55:35.219888 """
We have N sticks with negligible thickness.
The length of the i-th stick is A_i.
Snuke wants to select four different sticks from these sticks and form a rectangle (including a square), using the sticks as its sides.
Find the maximum possible area of the rectangle.

-----Constraints-----
 - 4 \leq N \leq 10^5
 - 1 \leq A_i \leq 10^9
 - A_i is an integer.

-----Input-----
Input is given from Standard Input in the following format:
N
A_1 A_2 ... A_N

-----Output-----
Print the maximum possible area of the rectangle.
If no rectangle can be formed, print 0.

-----Sample Input-----
6
3 1 2 4 2 1

-----Sample Output-----
2

1 \times 2 rectangle can be formed.
"""
2022-04-09 20:55:35.219921 --------------------------
2022-04-09 20:55:49.397620 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nans = 0\n\nfor i in range(n - 3):\n    for j in range(i + 1, n - 2):\n        if a[i] == a[j]:\n            continue\n        k = j + 1\n        while k < n - 1 and a[i] != a[k]:\n            k += 1\n        if k == n - 1:\n            continue\n        for l in range(k + 1, n):\n            if a[i] != a[l] and a[j] != a[l]:\n                ans = max(ans, a[i] * a[j])\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# \u8fba\u306e\u9577\u3055\u304c\u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\na.sort()\n\n# 4\u672c\u306e\u8fba\u3092\u9078\u3076\u306e\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u304c\u7570\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\n# \u5148\u982d\u304b\u30892\u672c\u306e\u8fba\u3068\u3001\u672b\u5c3e\u304b\u30892\u672c\u306e\u8fba\u3092\u9078\u3076\n# \u305d\u308c\u305e\u308c\u306e\u8fba\u306e\u9577\u3055\u306e\u7a4d\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\nprint(max(a[0]*a[1], a[-2]*a[-1]))"
    }
  ],
  "created": 1649552135,
  "id": "cmpl-4vG9XYZo3C2G8ALcHrc8XYSOxvi6i",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:55:49.397782 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nans = 0\n\nfor i in range(n - 3):\n    for j in range(i + 1, n - 2):\n        if a[i] == a[j]:\n            continue\n        k = j + 1\n        while k < n - 1 and a[i] != a[k]:\n            k += 1\n        if k == n - 1:\n            continue\n        for l in range(k + 1, n):\n            if a[i] != a[l] and a[j] != a[l]:\n                ans = max(ans, a[i] * a[j])\n\nprint(ans)"
}
2022-04-09 20:55:49.397824 REASON stop
2022-04-09 20:55:49.398768 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# \u8fba\u306e\u9577\u3055\u304c\u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\na.sort()\n\n# 4\u672c\u306e\u8fba\u3092\u9078\u3076\u306e\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u304c\u7570\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\n# \u5148\u982d\u304b\u30892\u672c\u306e\u8fba\u3068\u3001\u672b\u5c3e\u304b\u30892\u672c\u306e\u8fba\u3092\u9078\u3076\n# \u305d\u308c\u305e\u308c\u306e\u8fba\u306e\u9577\u3055\u306e\u7a4d\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\nprint(max(a[0]*a[1], a[-2]*a[-1]))"
}
2022-04-09 20:55:49.398839 REASON stop
