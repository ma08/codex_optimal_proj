["S = input()\nT = input()\n\ns = [[] for i in range(26)]\nt = [[] for i in range(26)]\n\nfor i in range(len(S)):\n    s[ord(S[i])-97].append(i)\n    t[ord(T[i])-97].append(i)\n\ns = sorted(s)\nt = sorted(t)\nif s == t:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "S=input()\nT=input()\nd=[[] for i in range(26)]\nfor i,c in enumerate(S):\n    d[ord(c)-ord('a')].append(i)\nd2=[[]for i in range(26)]\nfor i,c in enumerate(T):\n    d2[ord(c)-ord('a')].append(i)\nprint(['No','Yes'][set((tuple(x) for x in d))==set((tuple(x) for x in d2))])", "S = input()\nT = input()\n\nchk1 = [[] for _ in range(26)]\nchk2 = [[] for _ in range(26)]\nfor i in range(len(S)):\n    s1 = ord(S[i]) - 97\n    s2 = ord(T[i]) - 97\n    if len(chk1[s1]) == 0:\n        chk1[s1].append(T[i])\n    else:\n        if chk1[s1][0] == T[i]:\n            pass\n        else:\n            print('No')\n            return\n    if len(chk2[s2]) == 0:\n        chk2[s2].append(S[i])\n    else:\n        if chk2[s2][0] == S[i]:\n            pass\n        else:\n            print('No')\n            return    \nprint('Yes')", "from collections import Counter\nS = str(input())\nT = str(input())\n\ns = Counter(S)\nt = Counter(T)\n\nif sorted(s.values()) == sorted(t.values()):\n  print('Yes')\nelse:\n  print('No')", "import sys\nfrom collections import Counter\n\n\ndef main():\n    s = input()\n    t = input()\n    s_count = [0]*26\n    t_count = [0]*26\n    for i in range(ord(\"a\"), ord(\"z\")+1):\n        s_count[i-97] = s.count(chr(i))\n        t_count[i-97] = t.count(chr(i))\n    s_count.sort()\n    t_count.sort()\n    if s_count == t_count:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s = input()\nt = input()\n\nsl = list(s)\ntl = list(t)\n\nfrom collections import Counter\nsc = Counter(sl)\ntc = Counter(tl)\n\nsp =[]\ntp =[]\n\nalp = \"abcdefghijklmnopqrstuvwxyz\"\n\nfor i in alp:\n    sp.append(sc[i])\n    tp.append(tc[i])\n\nsps =sorted(sp)\ntps = sorted(tp)\n\nfor i,j in zip (sps,tps):\n    if i ==j:\n        pass\n    else:\n        print(\"No\")\n        return\nprint(\"Yes\")", "s = input()\nt = input()\n# s\u3068t\u306e\u6587\u5b57\u304c\u4e00\u5bfe\u4e00\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308c\u3070\u826f\u3044\nds = {}\ndt = {}\n\nans = 'Yes'\nfor S,T in zip(s,t):\n    if S in ds:\n        if ds[S] != T:\n            ans = 'No'\n            break\n    else:\n        ds[S] = T\n    \n    if T in dt:\n        if dt[T] != S:\n            ans = 'No'\n            break\n    else:\n        dt[T] = S\n\nprint(ans)", "from collections import Counter\ns = list(input())\nt = list(input())\n\ns_count = Counter(s)\nt_count = Counter(t)\n\n# s,t\u305d\u308c\u305e\u308c\u306e\u5404\u6587\u5b57\u306e\u51fa\u73fe\u56de\u6570\u304c\u540c\u3058\u3067\u3042\u308c\u3070\u4e00\u81f4\u3055\u305b\u3089\u308c\u308b\nif sorted(s_count.values()) == sorted(t_count.values()): print(\"Yes\")\nelse: print(\"No\")", "s = input()\nt = input()\n\nl_s = [[] for _ in range(26)]\n\nfor i, x in enumerate(s):\n    l_s[ord(x) - 97].append(i)\n\nl_t = [[] for _ in range(26)]\nfor i, x in enumerate(t):\n    l_t[ord(x) - 97].append(i)\n\nfor l in l_s:\n    if len(l) > 0:\n        if l_t[ord(t[l[0]]) - 97] != l:\n            print('No')\n            return\n\nprint('Yes')", "from collections import Counter\ns = [i for i in str(input())]\nt = [h for h in str(input())]\ns1 = Counter(s).most_common()\nt1 = Counter(t).most_common()\nif len(s1) != len(t1):\n    print('No')\nelse:\n    z = 'Yes'\n    for j in range(len(s1)):\n        if s1[j][1] != t1[j][1]:\n            z = 'No'\n            break\n    print(z)", "import collections\n\nA = input()\nB = input()\n\nA_c = collections.Counter(A)\nB_c = collections.Counter(B)\nA_c = list(A_c.values())\nB_c = list(B_c.values())\n\nA_c = list(A_c)\nB_c = list(B_c)\nA_c.sort()\nB_c.sort()\nif A_c == B_c:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "s = list(input())\nt = list(input())\nn = len(s)\n\ns_par = [i for i in range(n + 1)]\nt_par = [i for i in range(n + 1)]\n\nfor i in range(n):\n    for j in range(i):\n        if s[i] == s[j]:\n            s_par[i] = s_par[j]\n            break\n            \nfor i in range(n):\n    for j in range(i):\n        if t[i] == t[j]:\n            t_par[i] = t_par[j]\n            break\n            \nif s_par == t_par:\n    print('Yes')\nelse:\n    print('No')", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(S, T):\n    alp = 'abcdefghijklmnopqrstuvwxyz'\n    N = len(S)\n    S_same = [[] for _ in range(N)]\n    S_alphabet = {s: [] for s in alp}\n    T_same = [[] for _ in range(N)]\n    T_alphabet = {s: [] for s in alp}\n    for i in range(N):\n        S_alphabet[S[i]].append(i)\n        T_alphabet[T[i]].append(i)\n    for s in alp:\n        stmp = S_alphabet[s]\n        ttmp = T_alphabet[s]\n        if len(stmp) > 0:\n            S_same[stmp[0]] = stmp.copy()\n        if len(ttmp) > 0:\n            T_same[ttmp[0]] = ttmp.copy()\n    for i in range(N):\n        if len(S_same[i]) > 1:\n            for ss in S_same[i][1:]:\n                if T[S_same[i][0]] != T[ss]:\n                    print('No')\n                    return\n        if len(T_same[i]) > 1:\n            for tt in T_same[i][1:]:\n                if S[T_same[i][0]] != S[tt]:\n                    print('No')\n                    return\n    print('Yes')\n\n\ndef __starting_point():\n    S = input()\n    T = input()\n    solve(S, T)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n\n__starting_point()", "import sys\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    S = input()\n    T = input()\n    dictS =dict()\n    dictT =dict()\n\n    for i in range(len(S)):\n        if S[i] in dictS:\n            if dictS[S[i]] !=T[i]:\n                print(\"No\")\n                return\n        else:\n            dictS[S[i]] =T[i]\n\n        if T[i] in dictT:\n            if dictT[T[i]] !=S[i]:\n                print(\"No\")\n                return\n        else:\n            dictT[T[i]] =S[i]\n\n    print(\"Yes\")\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# chokudai\u3092redcorder\u306b\u3059\u308b\u306e\u306f\u306a\u3093\u3068\u306a\u304f\u3067\u304d\u305d\u3046\u306a\u304d\u304c\u3059\u308b\u304c\u306a\u3093\u3067\u3067\u304d\u306a\u3044\u306e\u3060\u308d\u3046\u304b\n# c->r, r->c = rhokudai\n# i->r, r->I = ihokudar\n# \u305f\u3057\u304b\u306b\u51fa\u6765\u306a\u304b\u3063\u305f\n# \u3064\u307e\u308a\u76ee\u7684\u306e\u6587\u5b57\u306b\u3067\u304d\u308b\u306e\u306f\u305b\u3044\u305c\u30441\u56de\u307e\u3067\n# \uff082\u56de\u76ee\u4ee5\u964d\u306f\u305d\u308c\u3088\u308a\u524d\u306b\u5909\u5316\u3055\u305b\u305f\u6587\u5b57\u306b\u5f71\u97ff\u304c\u51fa\u308b\uff09\n# \u306a\u306e\u3067\u3001\u5404\u6587\u5b57\u306e\u767b\u5834\u56de\u6570\u3092\u51fa\u3057\u3001\u305d\u306e\u6570\u3060\u3051\u3067\u6bd4\u8f03\u3059\u308b\ns, t = list(input()), list(input())\nsd, td = {}, {}\nfor sv in s:\n    if sv not in sd:\n        sd[sv] = 1\n    else:\n        sd[sv] += 1\nfor tv in t:\n    if tv not in td:\n        td[tv] = 1\n    else:\n        td[tv] += 1\nss, ts = sorted(sd.values()), sorted(td.values())\nif ss == ts:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "import collections \ns = input()\nt = input()\nsc = sorted(collections.Counter(s).values())\ntc = sorted(collections.Counter(t).values())\n\n\nfor i in range(len(sc)):\n  if sc[i] != tc[i]:\n    print(\"No\")\n    return\nprint(\"Yes\")\n", "S=list(input())\nT=list(input())\nprint(\"Yes\" if len(set(S))==len(set(T))==len(set(zip(S,T))) else \"No\")", "S = input()\nT = input()\ns = sorted(map(S.count, set(S)))\nt = sorted(map(T.count, set(T)))\nprint((\"Yes\" if(s == t) else \"No\"))\n", "s = input()\nt = input()\nx = []\ny = []\nfor i in range(len(s)):\n    if s[i] not in x:\n        x.append(s[i])\n    if t[i] not in y:\n        y.append(t[i])\nfor i in range(len(x)):\n    s = s.replace(x[i], str(i))\nfor i in range(len(y)):\n    t = t.replace(y[i], str(i))\nif s == t:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "S=input()\nT=input()\nN=len(S)\nd=dict()\nfor i in range(N):\n    if S[i] not in list(d.keys()):\n        if T[i] in list(d.values()):\n            print(\"No\")\n            break\n        d[S[i]]=T[i]\n    else:\n        if d[S[i]]!=T[i]:\n            print(\"No\")\n            break\nelse:\n    print(\"Yes\")\n", "s = input()\nt = input()\n\ncycle_to = [''] * 26\ncycle_from = [''] * 26\n\nfor i in range(len(s)):\n    if cycle_to[ord(s[i]) - 97] == t[i]:\n        continue\n    if cycle_to[ord(s[i]) - 97] == '':\n        cycle_to[ord(s[i]) - 97] = t[i]\n    else:\n        print('No')\n        break\n    \n    if cycle_from[ord(t[i]) - 97] == s[i]:\n        continue\n    if cycle_from[ord(t[i]) - 97] == '':\n        cycle_from[ord(t[i]) - 97] = s[i]\n    else:\n        print('No')\n        break\nelse:\n    print('Yes')", "S = input()\nT = input()\nS_cnt = sorted(S.count(c) for c in set(S))\nT_cnt = sorted(T.count(c) for c in set(T))\nprint(\"Yes\") if S_cnt == T_cnt else print(\"No\")\n", "import collections\nS = list(input())\nT = list(input())\n \ncntS = collections.Counter(S)\ncntT = collections.Counter(T)\n \nif len(cntS) != len(cntT):\n    print('No')\n    return\nelse:\n    valS = list(cntS.values())\n    valT = list(cntT.values())\n\n    if valS != valT:\n            print('No')\n            return\nprint('Yes')", "import collections\nS = list(input())\nT = list(input())\ncounterS = collections.Counter(S)\ncounterT = collections.Counter(T)\nScou = list(counterS.values())\nTcou = list(counterT.values())\nScou.sort()\nTcou.sort()\nif Scou == Tcou:\n    print('Yes')\nelse:\n    print('No')\n", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    s = input()\n    t = input()\n    import string\n\n    l = string.ascii_lowercase\n\n    for i in l:\n        trial = set()\n        for k,j in enumerate(s):\n            if i == j:\n                trial.add(t[k])\n                if len(trial) > 1:\n                    print(\"No\")\n                    return\n        trial = set()\n        for k,j in enumerate(t):\n            if i == j:\n                trial.add(s[k])\n                if len(trial) > 1:\n                    print(\"No\")\n                    return\n\n    print(\"Yes\")\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S = input()\nT = input()\nlength = len(S)\nkeep_S = [[] for i in range(26)]  # ord(T[i])\u306b\u5bfe\u5fdc\u3059\u308b S \u3092\u683c\u7d0d\nkeep_T = [[] for i in range(26)]  # ord(S[i])\u306b\u5bfe\u5fdc\u3059\u308b T \u3092\u683c\u7d0d\n\nfor i in range(length):\n\n    num_S = ord(T[i]) - ord('a')\n    num_T = ord(S[i]) - ord('a')\n\n    if S[i] in keep_S[num_S]:\n        continue\n    else:\n        keep_S[num_S].append(S[i])\n\n    if T[i] in keep_T[num_T]:\n        continue\n    else:\n        keep_T[num_T].append(T[i])\n\n\nfor i in range(26):\n    if (len(keep_T[i]) > 1) | (len(keep_S[i]) > 1):\n        print('No')\n        return\nprint('Yes')\n", "import bisect,collections,copy,itertools,math,string\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ndef main():\n\n\n    s = S()\n    t = S()\n    \n    dic1 = collections.defaultdict(str)\n    dic2 = collections.defaultdict(str)\n    \n    for i in range(len(s)):\n        if dic1[t[i]] == \"\":\n            dic1[t[i]] = s[i]\n        else:\n            if dic1[t[i]] != s[i]:\n                print(\"No\")\n                return\n\n        if dic2[s[i]] == \"\":\n            dic2[s[i]] = t[i]\n        else:\n            if dic2[s[i]] != t[i]:\n                print(\"No\")\n                return\n        \n    print(\"Yes\")\n\nmain()\n", "import sys\nfrom collections import Counter\n\ninput = sys.stdin.readline\n\n\ndef main():\n    S = input().rstrip()\n    T = input().rstrip()\n\n    c_S = Counter(S)\n    c_T = Counter(T)\n    count_S = list(c_S.values())\n    count_T = list(c_T.values())\n    count_S.sort()\n    count_T.sort()\n    is_same = True\n    for s, t in zip(count_S, count_T):\n        if s != t:\n            is_same = False\n            break\n\n    ans = \"Yes\" if is_same else \"No\"\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\n\ns = input()\nt = input()\n\nc1 = Counter(s).most_common()\nc2 = Counter(t).most_common()\n\nfor x, y in zip(c1, c2):\n    if x[1] != y[1]:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")", "import sys\n\n\nstdin = sys.stdin\ndef ns(): return stdin.readline().rstrip()\ndef ni(): return int(stdin.readline().rstrip())\ndef nm(): return list(map(int, stdin.readline().split()))\ndef nl(): return list(map(int, stdin.readline().split()))\n\n\ndef main():\n    s = input()\n    t = input()\n    S = sorted(map(s.count, set(s)))\n    T = sorted(map(t.count, set(t)))\n    print((\"Yes\" if S == T else \"No\"))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s=list(input())\nt=list(input())\n\nn=len(s)\nch=0\nch1=0\nans=0\n\nd={}\nd1={}\n\nst=1\nst1=1\n\ns_new=[]\nt_new=[]\n\nfor i in range(n):\n  if s[i] not in d:\n    d[s[i]]=st\n    st+=1\n    \nfor g in range(n):\n  if t[g] not in d1:\n    d1[t[g]]=st1\n    st1+=1\n    \nfor h in range(n):\n  s_new.append(d[s[h]])\n  t_new.append(d1[t[h]])\n  \nif s_new==t_new:\n  print('Yes')\nelse:\n  print('No')\n", "S = input()\nT = input()\n\nalph = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\nS_counter = []\nT_counter = []\nfor i in alph:\n    S_counter.append(S.count(i))\n    T_counter.append(T.count(i))\n\nS_counter.sort()\nT_counter.sort()\n\nif S_counter == T_counter:\n    print('Yes')\nelse:\n    print('No')\n", "import collections\n\nS = input()\nT = input()\n\nS_c = sorted(list(collections.Counter(S).values()))\nT_c = sorted(list(collections.Counter(T).values()))\n\nprint(\"Yes\" if S_c == T_c else \"No\")", "import collections\nS = list(input())\nT = list(input())\nif sorted(collections.Counter(S).values()) == sorted(collections.Counter(T).values()):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "S = input()\nT = input()\n\nC_S = [None for _ in range(26)]\nC_T = [None for _ in range(26)]\n\nok = True\nfor i in range(len(S)):\n    if not C_S[ord(S[i]) - ord('a')]:\n        C_S[ord(S[i]) - ord('a')] = T[i]\n    else:\n        if C_S[ord(S[i]) - ord('a')] != T[i]:\n            ok = False\n            break\n    if not C_T[ord(T[i]) - ord('a')]:\n        C_T[ord(T[i]) - ord('a')] = S[i]\n    else:\n        if C_T[ord(T[i]) - ord('a')] != S[i]:\n            ok = False\n            break\nif ok:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "def p(S):\n    D={}\n    for i in range(len(S)):\n        a=S[i]\n        if a in D:\n            D[a].add(i)\n        else:\n            D[a]={i}\n    return D\nS=input()\nT=input()\n\nA=sorted(p(S).values())\nB=sorted(p(T).values())\n\nif A==B:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "import collections\nS = input()\nT = input()\nif sorted(collections.Counter(S).values()) == sorted(collections.Counter(T).values()):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "from collections import Counter\n\ns = list(input())\nt = list(input())\n\nsc = Counter(s).values()\ntc = Counter(t).values()\n\nsl = Counter(sc)\ntl = Counter(tc)\n\nif sl == tl:\n    print('Yes')\nelse:\n    print('No')", "S = input()\nT = input()\nN = len(S)\ncount = 0\nR_1 = [-1 for i in range(26)]\nR_2 = [-1 for i in range(26)]\n\nanswer = \"Yes\"\nfor i in range(N):\n    r1 = ord(S[i]) - 97\n    r2 = ord(T[i]) - 97\n    if R_1[r1] >= 0:\n        if r2 != R_1[r1]:\n            answer = \"No\"\n            break\n    if R_2[r2] >= 0:\n        if r1 != R_2[r2]:\n            answer = \"No\"\n            break\n    if R_1[r1] < 0:\n        R_1[r1] = r2\n    if R_2[r2] < 0:\n        R_2[r2] = r1\nprint(answer)", "from collections import Counter\n\ns = input()\nt = input()\n# s\u3068t\u306e\u6587\u5b57\u5217\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u6607\u9806\u306b\u30bd\u30fc\u30c8\nss = sorted(Counter(s).values())\nst = sorted(Counter(t).values())\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u7a2e\u985e\u6570\u3068\u8981\u7d20\u6570\u304c\u540c\u3058\u306a\u3089Yes\nprint(\"Yes\") if ss == st else print(\"No\")\n", "S = input()\nT = input()\nU = [[i,j] for i,j in zip(S,T)]\nU.sort()\ns = U[0][0]\nt = U[0][1]\nfor i,j in U:\n    if  i != s:\n        s = i\n        t = j\n    elif j != t:\n        print(\"No\")\n        return\nU.sort(key=lambda x:x[1])\ns = U[0][0]\nt = U[0][1]\nfor i,j in U:\n    if j != t:\n        s = i\n        t = j\n    elif i != s:\n        print(\"No\")\n        return\nprint(\"Yes\")", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef solve(S, T):\n    d = dict()\n    for s, t in zip(S, T):\n        if s in d and d[s] != t:\n            return False\n        else:\n            d[s] = t\n\n    return True\n\n\ndef main():\n    S = readline().strip()\n    T = readline().strip()\n\n    if solve(S, T) and solve(T, S):\n        print('Yes')\n    else:\n        print('No')\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s = input()\nt = input()\ncs = []\nct = []\nfor i in range(97,97+26):\n  cs.append(s.count(chr(i)))\n  ct.append(t.count(chr(i)))\nif sorted(cs) == sorted(ct):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "from collections import Counter\n\ns = input()\nt = input()\n\na = Counter(s)\nb = Counter(t)\n\nc = list(a.values())\nd = list(b.values())\n\nprint('Yes') if c == d else print('No')", "import collections\na = list(input())\nb = list(input())\nA = collections.Counter(a)\nB = collections.Counter(b)\nAlist = list(A.values())\nBlist = list(B.values())\nAsort = sorted(Alist)\nBsort = sorted(Blist)\nif Asort == Bsort:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "\"\"\"\n\u5fc5\u8981\u5341\u5206\u6761\u4ef6\n\uff11\uff09S\u306e\u4e2d\u306e\u540c\u3058\u6587\u5b57\u304c\u3001T\u306e\u5225\u306e\u6587\u5b57\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\n\uff12\uff09T\u306e\u4e2d\u306e\u540c\u3058\u6587\u5b57\u304c\u3001S\u306e\u5225\u306e\u6587\u5b57\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\n\"\"\"\n\ns = input()\nt = input()\n\ndict_st = {}\ndict_ts = {}\n\nfor x, y in zip(s, t):\n    if x not in dict_st:\n        dict_st[x] = y\n    else:\n        if dict_st[x] != y:\n            print('No')\n            break\n    \n    if y not in dict_ts:\n        dict_ts[y] = x\n    else:\n        if dict_ts[y] != x:\n            print('No')\n            break\nelse:\n    print('Yes')\n", "S = input()\nT = input()\n\nconvert = dict()\n\n# \u5909\u63db\u5143\u306e\u91cd\u8907\u30c1\u30a7\u30c3\u30af\uff1f\nflg = True\nfor s, t in zip(S, T):\n    if s in convert and convert[s] != t:\n        flg = False\n        break\n    convert[s] = t\n\n# \u5909\u63db\u5148\u306e\u91cd\u8907\u30c1\u30a7\u30c3\u30af\nafter = list(convert.values())\nif len(after) != len(set(after)):\n    flg = False\n\nif flg:\n    print('Yes')\nelse:\n    print('No')\n", "s = input()\nt = input()\n\ndef char_list(s):\n    l = [0] * 26\n    for x in s:\n        i = ord(x) - ord(\"a\")\n        l[i] += 1\n    l.sort()\n    return l\n\nl1 = char_list(s)\nl2 = char_list(t)\n\nif l1 == l2:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "from collections import Counter\ns = Counter(input())\nt = Counter(input())\n\nans = \"Yes\"\nfor x,y in zip(s.items(), t.items()):\n    if x[1] != y[1]:\n        ans = \"No\"\nprint(ans)", "S = input()\nT = input()\nans = 'Yes'\ndic1,dic2 = {},{}\n\nfor i,j in zip(S,T):\n    if i in dic1:\n        if dic1[i] != j:\n            ans = 'No'\n    else:\n        dic1[i] = j\n        \n    if j in dic2:\n        if dic2[j] != i:\n            ans = 'No'\n    else:\n        dic2[j] = i\n\n#print(dic1)\n#print(dic2)\nprint(ans)", "S = input()\nT = input()\nN = len(S)\n# S\u304b\u3089T\u306e\u5909\u63db\nd1 = {}\n# T\u304b\u3089S\u306e\u5909\u63db\nd2 = {}\n\nfor i in range(N):\n    if S[i] not in d1:\n        d1[S[i]] = T[i]\n    else:\n        if d1[S[i]] != T[i]:\n            print(\"No\")\n            return\n        else:\n            pass\n\n    if T[i] not in d2:\n        d2[T[i]] = S[i]\n    else:\n        if d2[T[i]] != S[i]:\n            print(\"No\")\n            return\n        else:\n            pass\nprint(\"Yes\")\n", "s=list(input())\nt=list(input())\ncnt1=[[] for _ in range(26)]\ncnt2=[[] for _ in range(26)]\nfor i in range(len(s)):\n    num1=ord(s[i])-97\n    num2=ord(t[i])-97\n    if t[i] not in cnt1[num1]:\n        cnt1[num1].append(t[i])\n    if s[i] not in cnt2[num2]:\n        cnt2[num2].append(s[i])\nans=0\nfor i in range(26):\n    if len(cnt1[i])>1:\n        ans=1\n        break\n    if len(cnt2[i])>1:\n        ans=1\n        break\nif ans==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "import numpy as np\nS    = np.array(list(input()))\nT    = np.array(list(input()))\nN    = len(S)\nSSrt = np.sort(S)\nTSrt = np.sort(T)\nSArg = np.argsort(S)\nTArg = np.argsort(T)\nSAgT = S[TArg]\nTAgS = T[SArg]\n\nSBef = ''\nTBef = ''\nSFlag = True\nfor ST in range(0,N):\n    SNow = SSrt[ST]\n    TNow = TAgS[ST]\n    if SBef==SNow:\n        if TBef!=TNow:\n            SFlag = False\n            break\n    SBef = SNow\n    TBef = TNow\n        \nSBef = ''\nTBef = ''\nTFlag = True\nfor TT in range(0,N):\n    SNow = SAgT[TT]\n    TNow = TSrt[TT]\n    if TBef==TNow:\n        if SBef!=SNow:\n            TFlag = False\n            break\n    SBef = SNow\n    TBef = TNow\n        \nif SFlag and TFlag:\n    print('Yes')\nelse:\n    print('No')", "from collections import defaultdict\n\ns = input()\nt = input()\n\ndicts = defaultdict(int)\ndictt = defaultdict(int)\n\ncs = []\nct = []\n\nfor i in range(len(s)):\n    dicts[s[i]] += 1\n    dictt[t[i]] += 1\n    cs.append(dicts[s[i]])\n    ct.append(dictt[t[i]])\n\n\nif cs == ct:\n    print('Yes')\nelse:\n    print('No')", "import sys\n\n\ndef IN_I(): return int(sys.stdin.readline().rstrip())\ndef IN_LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef IN_S(): return sys.stdin.readline().rstrip()\ndef IN_LS(): return list(sys.stdin.readline().rstrip().split())\n\n\nS = IN_S()\nT = IN_S()\n\nd1 = dict()\nd2 = dict()\n\nlen_s = len(S)\n\nfor i in range(len_s):\n    a = S[i]\n    b = T[i]\n    if (a in d1 and d1[a] != b) or (b in d2 and d2[b] != a):\n        print('No')\n        return\n    d1[a] = b\n    d2[b] = a\n\nprint('Yes')\n", "from collections import Counter\ns=input()\nt=input()\nlist_S=Counter(s)\nlist_T=Counter(t)\n\nif sorted(list_S.values()) == sorted(list_T.values()):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "from collections import defaultdict\ns = input()\nt = input()\nn = len(s)\n\nd = defaultdict(str)\n# \u30c0\u30e1\u306a\u5834\u5408\n# 1. \u540c\u3058t\u304c\u9055\u3046s\u306b\u5bfe\u5fdc\n# 2. \u540c\u3058s\u304c\u9055\u3046t\u306b\u5bfe\u5fdc\nfor i in range(n):\n    if d[t[i]] == \"\":\n        d[t[i]] = s[i]\n    elif d[t[i]] != s[i]:\n        print(\"No\")\n        return\nd.clear()\nfor i in range(n):\n    if d[s[i]] == \"\":\n        d[s[i]] = t[i]\n    elif d[s[i]] != t[i]:\n        print(\"No\")\n        return\n\nprint(\"Yes\")\n", "from collections import Counter\ns = input()\nt = input()\n#\u6587\u5b57\u306e\u9806\u756a\u5165\u308c\u66ff\u3048\u306f\u53ef\u80fd\n#\u6587\u5b57\u306e\u500b\u6570\u306f\u5897\u3084\u305b\u306a\u3044\n#\u7d50\u5c40\u306faabbb\u306a\u30892,3\u306b\u306a\u308b\n#abcdb\u306a\u3089a:1,b:2,c:1,d:1\ns_dict = Counter(s)\nt_dict = Counter(t)\ns_val = list(s_dict.values())\nt_val = list(t_dict.values())\ns_val.sort()\nt_val.sort()\nif s_val == t_val:\n    print('Yes')\nelse:\n    print('No')\n\n", "import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef main():\n    S = SI()\n    T = SI()\n    D = defaultdict(str)\n    for s, t in zip(S, T):\n        if D[s] == \"\":\n            D[s] = t\n        if D[s] != t:\n            print(\"No\")\n            return\n    if len(set(D.keys())) != len(set(D.values())):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n\ndef __starting_point():\n    main()\n__starting_point()", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep 30 03:40:29 2020\n\n@author: liang\n\"\"\"\n\nA = list()\nB = list()\nfor i in range(26):\n    A.append(list())\n    B.append(list())\nS = input()\nT = input()\ndef solve():\n    for i in range(len(S)):\n            index = ord(S[i]) - ord(\"a\")\n            A[index].append(i)\n            \n    for a_lis in A:\n        flag = False\n        if a_lis:\n            tmp = T[a_lis[0]]\n        for t in a_lis:\n            if T[t] != tmp:\n                flag = True\n        if flag:\n            print(\"No\")\n            return\n        \n    for i in range(len(T)):\n            index = ord(T[i]) - ord(\"a\")\n            B[index].append(i)\n   \n    for b_lis in B :\n        flag = False\n        if b_lis:\n            tmp = S[b_lis[0]]\n        for t in b_lis:\n            if S[t] != tmp:\n                flag = True\n        if flag:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n    #print(B)\n    return \n\nsolve()", "s = input()\nt = input()\ns = sorted(map(s.count,set(s)))\nt = sorted(map(t.count,set(t)))\nprint(\"Yes\" if s==t else \"No\")", "S=input()\nT=input()\n\nD1={}\nD2={}\n\nans=1\nfor s,t in zip(S,T):\n    x=D1.get(t, '')\n    if x=='':\n        D1[t]=s\n    else:\n        if x!=s:\n            ans=0\n            break\n            \n    x=D2.get(s, '')\n    if x=='':\n        D2[s]=t\n    else:\n        if x!=t:\n            ans=0\n            break\n\nprint('Yes' if ans else 'No')", "s = input()\nt = input()\n\ns_map = [[] for i in range(26)]\nt_map = [[] for i in range(26)]\nn = len(s)\n\nfor i in range(n):\n    si = ord(s[i]) - ord(\"a\")\n    ti = ord(t[i]) - ord(\"a\")\n    \n    s_map[si].append(i)\n    t_map[ti].append(i)\n\ns_map = sorted(s_map)\nt_map = sorted(t_map)\n\nif s_map == t_map:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n# print(s_map)\n# print(t_map)\n", "s = input()\nt = input()\n\ndef f(x):\n    dic = {}\n    for c in x:\n        if c in dic:\n            dic[c] += 1\n        else:\n            dic[c] = 1\n    return dic\n\nd1 = f(s)\nd2 = f(t)\nl1 = [i for i in d1.values()]\nl2 = [i for i in d2.values()]\nl1.sort()\nl2.sort()\n\nif l1 == l2:\n    print('Yes')\nelse:\n    print('No')", "s = list(input())\nt = list(input())\nn = len(s)\n\ns_par = [i for i in range(n + 1)]\nt_par = [i for i in range(n + 1)]\n\ndef operation(x, par):\n    for i in range(n):\n        for j in range(i):\n            if x[i] == x[j]:\n                par[i] = par[j]\n                break\n    return par\n\nif operation(s, s_par) == operation(t, t_par):\n    print('Yes')\nelse:\n    print('No')", "S = input()\nT = input()\nN = len(S)\n\nchr_from = {}\nchr_to = {}\n\nflg = True\n\nfor i in range(N):\n    if T[i] in chr_to:\n        if S[i] not in chr_from:\n            chr_to[T[i]] += 1\n    else:\n        chr_to[T[i]] = 1\n    \n    if S[i] in chr_from:\n        if chr_from[S[i]] != T[i]:\n            flg = False\n    else:\n        chr_from[S[i]] = T[i]\n\nfor val in chr_to.values():\n    if val > 1:\n        flg = False\n\n\nprint(['No', 'Yes'][flg])", "from collections import Counter\ns=Counter(list(input()))\nt=Counter(list(input()))\ns1,t1=sorted(list(s.values())),sorted(list(t.values()))\nprint(\"Yes\" if s1==t1 else \"No\")", "import sys\n \ninput = sys.stdin.readline\nS = input().strip()\nT = input().strip()\n \n# S -> T\nindex_s = {}\n# T -> S\nindex_t = {}\nfor i in range(len(S)):\n    if T[i] in index_t:\n        if index_t[T[i]] != S[i]:\n            print(\"No\")\n            return\n    else:\n        index_t[T[i]] = S[i]\n\n    if S[i] in index_s:\n        if index_s[S[i]] != T[i]:\n            print(\"No\")\n            return\n    else:\n        index_s[S[i]] = T[i]\n \nprint(\"Yes\")", "s = input()\nt = input()\nn = len(s)\nx = []\ny = []\n\nfor i in range(n):\n    if s[i] not in x:\n        x.append(s[i])\n    if t[i] not in y:\n        y.append(t[i])\n\nfor i in range(len(x)):\n    s = s.replace(x[i], str(i))\nfor i in range(len(y)):\n    t = t.replace(y[i], str(i))\nprint('Yes' if s == t else 'No')", "from collections import defaultdict\n\nS = input()\nT = input()\n\ndictS = defaultdict(int)\ndictT = defaultdict(int)\ndictS[S[0]] = dictT[T[0]] = 1\nn = 2\n\nfor i in range(1, len(S)):\n    if dictS[S[i]] == dictT[T[i]]:\n        if dictS[S[i]] == 0:\n            dictS[S[i]] = dictT[T[i]] = n\n            n += 1\n    else:\n        print('No')\n        break\nelse:\n    print('Yes')", "s = input()\nt = input()\nd = []\nfor l in [s, t]:\n    ptr = 0\n    dct = dict()\n    for c in l:\n        if c not in list(dct.keys()):\n            dct[c] = chr(ord(\"A\")+ptr)\n            ptr += 1\n    d.append([dct[c] for c in l])\n\nprint((\"Yes\" if \"\".join(d[0]) == \"\".join(d[1]) else \"No\"))\n", "import sys\ns = list(input())\nt = list(input())\na = [-1 for _ in range(26)]\nb = [-1 for _ in range(26)]\n\nfor i in range(len(s)):\n    num0, num1 = a[ord(s[i])-97], b[ord(t[i])-97]\n    if num0 >= 0:\n        if chr(num0+97) != t[i]:\n            print('No')\n            return\n    else:\n        a[ord(s[i])-97] = ord(t[i])-97\n        \n    if num1 >= 0:\n        if chr(num1+97) != s[i]:\n            print('No')\n            return\n    else:\n        b[ord(t[i])-97] = ord(s[i])-97\n            \nprint('Yes')\n", "s = input()\nt = input()\nx = []\ny = []\nfor i in range(len(s)):\n    if s[i] not in x:\n        x.append(s[i])\n    if t[i] not in y:\n        y.append(t[i])\nfor i in range(len(x)):\n    s = s.replace(x[i], str(i))\nfor i in range(len(y)):\n    t = t.replace(y[i], str(i))\nif s == t:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "s=list(input())\nt=list(input())\nn=len(s)\na=[s.count(chr(97+i)) for i in range(26)]\nb=[t.count(chr(97+i)) for i in range(26)]\nif all(a[ord(s[i])-97]==b[ord(t[i])-97] for i in range(n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n", "def solve():\n    S=input()\n    n=len(S)\n    S1=[1]\n    k=1\n    for i in range(1,n):\n        if S[i] not in S[:i]:\n            k+=1\n            S1.append(k)\n        else:\n            num=S1[S.find(S[i])]\n            S1.append(num)\n    return S1\n\nS1=solve()\nT1=solve()\n\nif S1==T1:\n    print('Yes')\nelse:\n    print('No')", "s = input()\nt = input()\n\ndict_st = {}\ndict_ts = {}\n\nfor x, y in zip(s, t):\n    if x not in dict_st:\n        dict_st[x] = y\n    else:\n        if dict_st[x] != y:\n            print(\"No\")\n            break\n\n    if y not in dict_ts:\n        dict_ts[y] = x\n    else:\n        if dict_ts[y] != x:\n            print(\"No\")\n            break\nelse:\n    print(\"Yes\")\n", "S,T = input(),input()\n\nd = [None]*26\nflag = True\nfor s,t in zip(S,T):\n    s = ord(s)-ord('a')\n    t = ord(t)-ord('a')\n    if d[s] is None:\n        d[s] = t\n    elif d[s] != t:\n        flag = False\n        break\n\nif not flag:\n    print('No')\nelif len(set(v for v in d if v is not None)) != sum(int(v is not None) for v in d):\n    print('No')\nelse:\n    print('Yes')", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\ndics = defaultdict(str)\ndict = defaultdict(str)\ns = input()\nt = input()\nfor i in range(len(s)):\n    if dics[s[i]]:\n        if dics[s[i]] == t[i]:\n            pass\n        else:\n            print('No')\n            return\n    else:\n        dics[s[i]] = t[i]\n    if dict[t[i]]:\n        if dict[t[i]] == s[i]:\n            pass\n        else:\n            print('No')\n            return\n    else:\n        dict[t[i]] = s[i]\nprint('Yes')\n", "S = input()\nT = input()\ns_let = [0]*26\nt_let = [0]*26\nans = \"Yes\"\n\nfor i in range(len(S)):\n  s_let[ord(S[i])-ord(\"a\")] += 1\nfor j in range(len(T)):\n  t_let[ord(T[j])-ord(\"a\")] += 1\n\ns_let.sort()\nt_let.sort()\n\nfor k in range(26):\n  if s_let[k] != t_let[k]:\n    ans = \"No\"\n\nprint(ans)", "s=input()\nt=input()\nsset=set()\ntset=set()\nj=1\nalp={}\nds=[0]*len(s)\nfor i in range(len(s)):\n  if not s[i] in sset:\n    alp[s[i]]=j\n    ds[i]=j\n    sset.add(s[i])\n    j+=1\n  else:\n    ds[i]=alp[s[i]]\nj=1\nalp={}\ndt=[0]*len(t)\nfor i in range(len(t)):\n  if not t[i] in tset:\n    alp[t[i]]=j\n    dt[i]=j\n    tset.add(t[i])\n    j+=1\n  else:\n    dt[i]=alp[t[i]]\nfor i in range(len(s)):\n  if ds[i]!=dt[i]:\n    print('No')\n    return\nprint('Yes')", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(S, T):\n    N = len(S)\n    S_check = [0] * N\n    T_check = [0] * N\n    for i in range(N):\n        if S_check[i] == 0:\n            S_check[i] = 1\n            for j in range(i + 1, N):\n                if S[i] == S[j]:\n                    S_check[j] = 1\n                    if T[i] != T[j]:\n                        print('No')\n                        return\n        if T_check[i] == 0:\n            T_check[i] = 1\n            for j in range(i + 1, N):\n                if T[i] == T[j]:\n                    T_check[j] = 1\n                    if S[i] != S[j]:\n                        print('No')\n                        return\n    print('Yes')\n\n\ndef __starting_point():\n    S = input()\n    T = input()\n    solve(S, T)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # S = 'abcdefghijklmnopqrstuvwxyz' * (2 * 10 ** 5 // 26 + 1)\n    # T = 'abcdefghijklmnopqrstuvwxyz' * (2 * 10 ** 5 // 26 + 1)\n    # solve(S, T)\n\n__starting_point()", "import sys\n\ninput = sys.stdin.readline\n\nS = input()\nS = S.replace('\\n','')\ns_list = list(S)\n\nT = input()\nT = T.replace('\\n','')\nt_list = list(T)\n\nalpha_dict = {}\nt_diff_count = [0 for i in range(27)]\ns_diff_count = [0 for i in range(27)]\n\nfor i,c in enumerate(range(ord('a'),ord('z')+1)):\n    alpha_dict[chr(c)] = i \n\nfor i,s in enumerate(s_list):\n    #if not s == t_list[i]:\n    number = alpha_dict[s_list[i]]\n    s_diff_count[number] += 1\n    number = alpha_dict[t_list[i]]\n    t_diff_count[number] += 1\n\nfor i,s in enumerate(s_list):\n    number = alpha_dict[s_list[i]]\n    s_count = s_diff_count[number] \n    number = alpha_dict[t_list[i]]\n    t_count = t_diff_count[number]\n    if not s_count == t_count:\n        if t_count >= 2:\n            print(\"No\")\n            return\n        if s_count >= 2:\n            print(\"No\")\n            return\nprint(\"Yes\")    \n", "from collections import Counter\ns = input()\nt = input()\n\ns_count = Counter(s)\nt_count = Counter(t)\nif sorted(s_count.values()) == sorted(t_count.values()): print(\"Yes\")\nelse: print(\"No\")", "S=input()\nT=input()\n\ndict_S={}\ndict_T={}\n\nfor x, y in zip(S, T):\n    if x not in dict_S:\n        dict_S[x] = y\n    else:\n        if dict_S[x] != y:\n            print(\"No\")\n            return\n\n    if y not in dict_T:\n        dict_T[y] = x\n    else:\n        if dict_T[y] != x:\n            print(\"No\")\n            return\n\n\nprint(\"Yes\")", "s=input()\nt=input()\nn=len(s)\nf=0\na=[[] for i in range(26)]\nfor i in range(n):\n    \n    if len(a[ord(s[i])-97])==0:\n        a[ord(s[i])-97].append(t[i])\n    else:\n        if a[ord(s[i])-97][0]!=t[i]:\n            f=1\nx=[a[i][0] for i in range(26) if len(a[i])==1]\nif len(x)!=len(set(x)):\n    f=1\nprint((\"Yes\" if f==0 else \"No\"))\n\n    \n", "s = input()\nt = input()\n\nsc = {}\ntc = {}\n\nfor i in range(len(s)):\n    if s[i] in sc:\n        sc[s[i]].append(i)\n    else:\n        sc[s[i]] = [i]\n\n    if t[i] in tc:\n        tc[t[i]].append(i)\n    else:\n        tc[t[i]] = [i]\n\nsc = list(sc.values())\ntc = list(tc.values())\n\nprint(\"Yes\" if sc == tc else \"No\")", "s = input()\nt = input()\nsl = len(s)\nss = \"\"\nused = [False]*26\ncnt = 0\nfor i in range(sl):\n    if used[(ord(s[i])-97)%26]:\n        ss += str(used[(ord(s[i])-97)%26])\n    else:\n        cnt += 1\n        ss += str(cnt)\n        used[(ord(s[i])-97)%26] = cnt\n\nused = [False]*26\ntt = \"\"\ncnt = 0\nfor i in range(sl):\n    if used[(ord(t[i])-97)%26]:\n        tt += str(used[(ord(t[i])-97)%26])\n    else:\n        cnt += 1\n        tt += str(cnt)\n        used[(ord(t[i])-97)%26] = cnt\n\nif ss==tt:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    S = input().rstrip()\n    T = input().rstrip()\n    L = [[S[i],T[i]] for i in range(len(S))]\n    L.sort(key = lambda x: x[0])\n    D = defaultdict(int)\n    D2 = defaultdict(int)\n    for a, b in L:\n        if (D[a] == 0 or D[a] == b) and (D2[b] == 0 or D2[b] == a):\n            D[a]=b\n            D2[b]=a\n        else:\n            print(\"No\")\n            return\n    print(\"Yes\")\n    \n    \ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\nfrom collections import Counter\nx = lambda : sorted(Counter(input()).values())\nprint(('YNeos'[x()!=x()::2]))\n", "s = input()\nt = input()\nmemo = {}\nans = 'Yes'\nfor i in range(len(s)):\n    if s[i] in memo:\n        if t[i] != memo[s[i]]:\n            ans = 'No'\n            break\n    else:\n        memo[s[i]] = t[i]\na = list(memo.values())\nb = list(set(a))\nif len(b) != len(a):\n    ans = 'No'\nprint(ans)", "from collections import Counter\nS = list(input())\nT = list(input())\nchange = [-1]*27\nans = \"Yes\"\nfor i in range(len(S)):\n    s = ord(S[i])-97\n    if S[i] == T[i]:\n        change[s] = s\n    elif change[s] == -1:\n        change[s] = ord(T[i])-97\n    else:\n        t = ord(T[i])-97\n        if change[s] != t:\n            ans = \"No\"\n            break\nchange=Counter(change)\ndel change[-1]\nfor i in change.values():\n    if i==1:\n        continue\n    else:\n        ans=\"No\"\nprint(ans)", "s=list(input())\nt=list(input())\nn=len(s)\ndef get_count_list(s):\n    alphabets=\"abcdefghijklmnopqrstuvwxyz\"\n    ans={}\n    for alphabet in alphabets:\n        ans[alphabet]=[]\n    for i in range(n):\n        ans[s[i]].append(i)\n    return ans\n\n\ndef get_index2alpha(s):\n    ans={}\n    for i in range(n):\n        ans[i]=s[i]\n    return ans\n\ns_count=get_count_list(s)\nt_count=get_count_list(t)\ns_index=get_index2alpha(s)\nt_index=get_index2alpha(t)\n\nans=0\n\ns_set=set(s)\n\n\nfor i in range(n):\n    s_alpha=s_index[i]\n    t_alpha = t_index[i]\n    if s_alpha in s_set:\n        s_set.remove(s_alpha)\n        if not s_count[s_alpha]==t_count[t_alpha]:\n            ans+=1\n\nif ans==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "s = input()\nt = input()\n\nsc = [0] * 26\ntc = [0] * 26\n\nfor i in range(len(s)):\n    sc[ord(s[i]) - ord('a')] += 1\n    tc[ord(t[i]) - ord('a')] += 1\n\nsc.sort()\ntc.sort()\n\nif tuple(sc) == tuple(tc):\n    print('Yes')\nelse:\n    print('No')\n", "import sys\n# import math\n# import bisect\n# import numpy as np\n# from decimal import Decimal\n# from numba import njit, i8, u1, b1 #JIT compiler\n# from itertools import combinations, product\nfrom collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_ints2(x):   return map(lambda num: int(num) - x, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef GCD(a: int, b: int) -> int: return b if a%b==0 else GCD(b, a%b)\ndef LCM(a: int, b: int) -> int: return (a * b) // GCD(a, b)\n\ndef Main():\n    s = read_str()\n    t = read_str()\n\n    s_lis = sorted(Counter(s).values())\n    t_lis = sorted(Counter(t).values())\n    \n    if s_lis == t_lis:\n        print('Yes')\n    else:\n        print('No')\n\ndef __starting_point():\n    Main()\n__starting_point()", "S = input()\nT = input()\n\ntrans_dict = {}\n\nfor i in range(len(S)):\n    s = S[i]\n    t = T[i]\n\n    if s in trans_dict:\n        if not trans_dict[s] == t:\n            print('No')\n            return\n    else:\n        trans_dict[s] = t\n\nif len(list(trans_dict.values())) == len(set(trans_dict.values())):\n    print('Yes')\nelse:\n    print('No')\n", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[16]:\n\n\nS = input()\nT = input()\n\n\n# In[20]:\n\n\nmydict = {}\nfor i in range(len(S)):\n    if S[i] in mydict:\n        if T[i] != mydict[S[i]]:\n            ans = \"No\"\n            break\n    else:\n        mydict[S[i]] = T[i]\nelse:\n    a = list(mydict.values())\n    b = list(set(a))\n    if len(b) != len(a):\n        ans = \"No\"\n    else:\n        ans = \"Yes\"\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n"]