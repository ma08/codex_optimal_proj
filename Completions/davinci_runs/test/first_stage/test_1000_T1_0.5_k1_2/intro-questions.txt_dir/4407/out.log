2022-04-09 20:00:52.313412 """
Polycarp has $n$ coins, the value of the $i$-th coin is $a_i$. It is guaranteed that all the values are integer powers of $2$ (i.e. $a_i = 2^d$ for some non-negative integer number $d$).

Polycarp wants to know answers on $q$ queries. The $j$-th query is described as integer number $b_j$. The answer to the query is the minimum number of coins that is necessary to obtain the value $b_j$ using some subset of coins (Polycarp can use only coins he has). If Polycarp can't obtain the value $b_j$, the answer to the $j$-th query is -1.

The queries are independent (the answer on the query doesn't affect Polycarp's coins).


-----Input-----

The first line of the input contains two integers $n$ and $q$ ($1 \le n, q \le 2 \cdot 10^5$) — the number of coins and the number of queries.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ — values of coins ($1 \le a_i \le 2 \cdot 10^9$). It is guaranteed that all $a_i$ are integer powers of $2$ (i.e. $a_i = 2^d$ for some non-negative integer number $d$).

The next $q$ lines contain one integer each. The $j$-th line contains one integer $b_j$ — the value of the $j$-th query ($1 \le b_j \le 10^9$).


-----Output-----

Print $q$ integers $ans_j$. The $j$-th integer must be equal to the answer on the $j$-th query. If Polycarp can't obtain the value $b_j$ the answer to the $j$-th query is -1.


-----Example-----
Input
5 4
2 4 8 2 4
8
5
14
10

Output
1
-1
3
2
"""
2022-04-09 20:00:52.313436 --------------------------
2022-04-09 20:01:04.035978 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, q = map(int, input().split())\ncoins = list(map(int, input().split()))\ncoins.sort()\n\nfor _ in range(q):\n    a = int(input())\n    res = 0\n    while a > 0:\n        if a in coins:\n            res += 1\n            break\n        elif a % 2 == 0:\n            a = a // 2\n            res += 1\n        else:\n            res = -1\n            break\n    print(res)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nfrom math import log2\n\ndef main():\n    n,q = map(int,input().split())\n    arr = list(map(int,input().split()))\n    for _ in range(q):\n        b = int(input())\n        i = 0\n        if b in arr:\n            print(1)\n            continue\n        if b == 1:\n            print(-1)\n            continue\n        if b%2 == 1:\n            print(-1)\n            continue\n        while i < b:\n            i += arr[i]\n        if i == b:\n            print(int(log2(b))+1)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649548852,
  "id": "cmpl-4vFIaqTACVhO0BPLLyVehuv2bIM7b",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:01:04.036192 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, q = map(int, input().split())\ncoins = list(map(int, input().split()))\ncoins.sort()\n\nfor _ in range(q):\n    a = int(input())\n    res = 0\n    while a > 0:\n        if a in coins:\n            res += 1\n            break\n        elif a % 2 == 0:\n            a = a // 2\n            res += 1\n        else:\n            res = -1\n            break\n    print(res)"
}
2022-04-09 20:01:04.036239 REASON stop
2022-04-09 20:01:04.038068 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nfrom math import log2\n\ndef main():\n    n,q = map(int,input().split())\n    arr = list(map(int,input().split()))\n    for _ in range(q):\n        b = int(input())\n        i = 0\n        if b in arr:\n            print(1)\n            continue\n        if b == 1:\n            print(-1)\n            continue\n        if b%2 == 1:\n            print(-1)\n            continue\n        while i < b:\n            i += arr[i]\n        if i == b:\n            print(int(log2(b))+1)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:01:04.038150 REASON stop
