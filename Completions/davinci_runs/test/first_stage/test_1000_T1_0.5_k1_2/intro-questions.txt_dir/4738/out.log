2022-04-09 21:43:56.994164 """
Define a $k$-periodic string as follows:

A string $s$ is $k$-periodic if the length of the string $|s|$ is a multiple of $k$, and if you chop the string up into $|s|/k$ substrings of length $k$, then each of those substrings (except the first) is the same as the previous substring, but with its last character moved to the front.

For example, the following string is $3$-periodic:abccabbcaabc

The above string can break up into substrings abc, cab, bca, and abc, and each substring (except the first) is a right-rotation of the previous substring (abc -> cab -> bca -> abc)

Given a string, determine the smallest k for which the string is k-periodic.

-----Input-----
Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The single line of input contains a string $s$ ($1 \le |s| \le 100$) consisting only of lowercase letters.

-----Output-----
Output the integer $k$, which is the smallest $k$ for which the input string is $k$-periodic.

-----Examples-----
Sample Input 1:
aaaaaaaa
Sample Output 1:
1

Sample Input 2:
abbaabbaabba
Sample Output 2:
2

Sample Input 3:
abcdef
Sample Output 3:
6
"""
2022-04-09 21:43:56.994184 --------------------------
2022-04-09 21:44:22.281065 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef kPeriodicString(s):\n    if len(s) == 1:\n        return 1\n    for k in range(1, int(len(s)/2) + 1):\n        if s[:k] == s[k:k*2]:\n            return k\n    return len(s)\n\nprint(kPeriodicString(input()))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef k_periodic(s):\n    k = 1\n    while k < len(s):\n        if s[:-k] == s[k:]:\n            return k\n        k += 1\n    return len(s)\n\nprint(k_periodic(input()))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ns = input()\n\n# The smallest k for which s is k-periodic is the largest integer k' such that s[i] == s[i+k'] for all i\n# in the range [0, len(s)-k'].\n\n# To find this k', we can use a sliding window of size k' and check that all the characters are the same.\n\n# If a window of size k' satisfies the property, then any window of size > k' will also satisfy the property.\n# Thus, we can use binary search to find the largest k' that satisfies the property.\n\ndef is_periodic(k):\n    for i in range(0, len(s)-k):\n        if s[i] != s[i+k]:\n            return False\n    return True\n\nlo = 1\nhi = len(s)\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    if is_periodic(mid):\n        lo = mid + 1\n    else:\n        hi = mid\nprint(lo-1)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    string = sys.stdin.readline().strip()\n    for i in range(1, len(string)):\n        if string[:i] * (len(string) // i) == string:\n            print(i)\n            break\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    k = 1\n    while k <= len(s):\n        if s[:k] * (len(s) // k) == s:\n            print(k)\n            break\n        k += 1\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef get_k(s):\n    for k in range(1, len(s) + 1):\n        if len(s) % k == 0:\n            for i in range(k, len(s), k):\n                if s[i:i+k] != s[i-k:i][-1] + s[i-k:i][:-1]:\n                    break\n            else:\n                return k\n    return len(s)\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(get_k(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ns = input()\n\ndef is_k_periodic(s,k):\n    if len(s)%k != 0:\n        return False\n    else:\n        for i in range(1,len(s)//k):\n            if s[i*k-1] != s[i*k]:\n                return False\n        return True\n\nk = 1\nwhile not is_k_periodic(s,k):\n    k += 1\nprint(k)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    k = 1\n\n    while k <= len(s):\n        if len(s) % k == 0:\n            i = k\n            while i < len(s):\n                if s[i] != s[i-k]:\n                    break\n                i += 1\n            if i == len(s):\n                break\n        k += 1\n    print(k)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649555037,
  "id": "cmpl-4vGuLEcWQcnc4pY2a0mQzMBXEduR7",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:44:22.281403 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef kPeriodicString(s):\n    if len(s) == 1:\n        return 1\n    for k in range(1, int(len(s)/2) + 1):\n        if s[:k] == s[k:k*2]:\n            return k\n    return len(s)\n\nprint(kPeriodicString(input()))"
}
2022-04-09 21:44:22.281443 REASON stop
2022-04-09 21:44:22.320440 test/intro-questions.txt_dir/4738/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4738/solutions.json'
2022-04-09 21:44:22.320522 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef k_periodic(s):\n    k = 1\n    while k < len(s):\n        if s[:-k] == s[k:]:\n            return k\n        k += 1\n    return len(s)\n\nprint(k_periodic(input()))"
}
2022-04-09 21:44:22.320660 REASON stop
2022-04-09 21:44:22.321415 test/intro-questions.txt_dir/4738/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4738/solutions.json'
2022-04-09 21:44:22.321473 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ns = input()\n\n# The smallest k for which s is k-periodic is the largest integer k' such that s[i] == s[i+k'] for all i\n# in the range [0, len(s)-k'].\n\n# To find this k', we can use a sliding window of size k' and check that all the characters are the same.\n\n# If a window of size k' satisfies the property, then any window of size > k' will also satisfy the property.\n# Thus, we can use binary search to find the largest k' that satisfies the property.\n\ndef is_periodic(k):\n    for i in range(0, len(s)-k):\n        if s[i] != s[i+k]:\n            return False\n    return True\n\nlo = 1\nhi = len(s)\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    if is_periodic(mid):\n        lo = mid + 1\n    else:\n        hi = mid\nprint(lo-1)"
}
2022-04-09 21:44:22.321558 REASON stop
2022-04-09 21:44:22.322164 test/intro-questions.txt_dir/4738/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4738/solutions.json'
2022-04-09 21:44:22.322235 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    string = sys.stdin.readline().strip()\n    for i in range(1, len(string)):\n        if string[:i] * (len(string) // i) == string:\n            print(i)\n            break\n\nmain()"
}
2022-04-09 21:44:22.322368 REASON stop
2022-04-09 21:44:22.323091 test/intro-questions.txt_dir/4738/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4738/solutions.json'
2022-04-09 21:44:22.323142 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    k = 1\n    while k <= len(s):\n        if s[:k] * (len(s) // k) == s:\n            print(k)\n            break\n        k += 1\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 21:44:22.323272 REASON stop
2022-04-09 21:44:22.323634 test/intro-questions.txt_dir/4738/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4738/solutions.json'
2022-04-09 21:44:22.323648 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef get_k(s):\n    for k in range(1, len(s) + 1):\n        if len(s) % k == 0:\n            for i in range(k, len(s), k):\n                if s[i:i+k] != s[i-k:i][-1] + s[i-k:i][:-1]:\n                    break\n            else:\n                return k\n    return len(s)\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(get_k(s))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 21:44:22.323873 REASON stop
2022-04-09 21:44:22.324356 test/intro-questions.txt_dir/4738/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4738/solutions.json'
2022-04-09 21:44:22.324419 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ns = input()\n\ndef is_k_periodic(s,k):\n    if len(s)%k != 0:\n        return False\n    else:\n        for i in range(1,len(s)//k):\n            if s[i*k-1] != s[i*k]:\n                return False\n        return True\n\nk = 1\nwhile not is_k_periodic(s,k):\n    k += 1\nprint(k)"
}
2022-04-09 21:44:22.324521 REASON stop
2022-04-09 21:44:22.324808 test/intro-questions.txt_dir/4738/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4738/solutions.json'
2022-04-09 21:44:22.324816 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    k = 1\n\n    while k <= len(s):\n        if len(s) % k == 0:\n            i = k\n            while i < len(s):\n                if s[i] != s[i-k]:\n                    break\n                i += 1\n            if i == len(s):\n                break\n        k += 1\n    print(k)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 21:44:22.324841 REASON stop
2022-04-09 21:44:22.324970 test/intro-questions.txt_dir/4738/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4738/solutions.json'
