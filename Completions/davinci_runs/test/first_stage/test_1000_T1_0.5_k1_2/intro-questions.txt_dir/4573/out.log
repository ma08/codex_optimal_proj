2022-04-09 20:55:06.410022 """
When l is an odd number, the median of l numbers a_1, a_2, ..., a_l is the (\frac{l+1}{2})-th largest value among a_1, a_2, ..., a_l.
You are given N numbers X_1, X_2, ..., X_N, where N is an even number.
For each i = 1, 2, ..., N, let the median of X_1, X_2, ..., X_N excluding X_i, that is, the median of X_1, X_2, ..., X_{i-1}, X_{i+1}, ..., X_N be B_i.
Find B_i for each i = 1, 2, ..., N.

-----Constraints-----
 - 2 \leq N \leq 200000
 - N is even.
 - 1 \leq X_i \leq 10^9
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N
X_1 X_2 ... X_N

-----Output-----
Print N lines.
The i-th line should contain B_i.

-----Sample Input-----
4
2 4 4 3

-----Sample Output-----
4
3
3
4

 - Since the median of X_2, X_3, X_4 is 4, B_1 = 4.
 - Since the median of X_1, X_3, X_4 is 3, B_2 = 3.
 - Since the median of X_1, X_2, X_4 is 3, B_3 = 3.
 - Since the median of X_1, X_2, X_3 is 4, B_4 = 4.
"""
2022-04-09 20:55:06.410082 --------------------------
2022-04-09 20:55:34.778011 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN = int(input())\nX = list(map(int, input().split()))\n\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\nimport heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649552106,
  "id": "cmpl-4vG94T8wdtk5Ii4NUyC1zI1iQeK0o",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:55:34.778241 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN = int(input())\nX = list(map(int, input().split()))\n\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))"
}
2022-04-09 20:55:34.778295 REASON stop
2022-04-09 20:55:34.779500 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\nimport heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:55:34.779639 REASON stop
