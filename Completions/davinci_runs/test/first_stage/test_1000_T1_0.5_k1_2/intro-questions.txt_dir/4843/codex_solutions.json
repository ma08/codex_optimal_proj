["\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")", "\n\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')", "\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")", "\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")", "\ndef check_queens(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == \"__main__\":\n    main()", "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == \"__main__\":\n    main()"]