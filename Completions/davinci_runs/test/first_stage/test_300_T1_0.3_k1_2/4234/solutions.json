["n = int(input())\ns = input()\nt = ''\nlst = '1'\nfor i in s:\n\tif lst == '1':\n\t\tlst = i\n\t\tnw = ''\n\telse:\n\t\tif lst != i:\n\t\t\tt += lst\n\t\t\tt += i\n\t\t\tlst = '1'\nprint (len(s) - len(t))\nprint (t)", "n = int(input())\ns = input().strip()\n\na = ''\nfor i in range(n):\n    if len(a) < 2 or a[-2:] != s[i] * 2:\n        a += s[i]\n\nb = ''\nfor i in range(len(a)):\n    if len(b) & 1:\n        if a[i] != b[-1]:\n            b += a[i]\n    else:\n        b += a[i]\n\nif len(b) & 1:\n    b = b[:-1]\nprint(n - len(b))\nprint(b)\n", "n = int(input())\ns = input() + \"K\"\ncount = 0\nans = []\ni = 0\nwhile i < n:\n    if s[i] == s[i + 1]:\n        count += 1\n        i += 1\n    else:\n        ans.append(s[i])\n        ans.append(s[i + 1])\n        i += 2\nif ans[-1] == \"K\":\n    ans.pop()\n    ans.pop()\n    count += 1\nprint(count)\nprint(\"\".join(ans))\n", "n=int(input())\na=input()\ns=[]\ni=1\nst=0\nwhile i<n:\n    if a[st]!=a[i]:\n        s.append(a[st])\n        s.append(a[i])\n        st=i+1\n        i=i+2\n    else:\n        i+=1\nprint(n-len(s))\nprint(''.join(s))\n", "n=int(input())\nS=input()\n\nfrom collections import deque\nQUE=deque(S)\nANS=[]\n\nwhile QUE:\n    if len(QUE)==1:\n        QUE.pop()\n        break\n    if QUE[0]==QUE[1]:\n        QUE.popleft()\n    elif QUE[0]!=QUE[1]:\n        x=QUE.popleft()\n        y=QUE.popleft()\n        ANS.append(x)\n        ANS.append(y)\n\nprint(n-len(ANS))\nprint(\"\".join(ANS))\n        \n", "n=int(input())\ns=input()\nl1=[]\nfor c in s:\n    if len(l1)==0:\n        l1.append(c)\n    else :\n        if len(l1)%2==1:\n            if l1[-1]==c:\n                continue\n            else :\n                l1.append(c)\n        else :\n            l1.append(c)\n            \nif len(l1)%2==0:\n    print(n-len(l1))\n    print(''.join(l1))\nelse :\n    print(n-len(l1)+1)\n    print(''.join(str(l1[i]) for i in range(0,len(l1)-1)))", "def main():\n    from sys import stdin, stdout\n\n    def read():\n        return stdin.readline().rstrip('\\n')\n\n    def read_array(sep=None, maxsplit=-1):\n        return read().split(sep, maxsplit)\n\n    def read_int():\n        return int(read())\n\n    def read_int_array(sep=None, maxsplit=-1):\n        return [int(a) for a in read_array(sep, maxsplit)]\n\n    def write(*args, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in args) + end)\n\n    def write_array(array, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in array) + end)\n\n    n = read_int()\n    s = read()\n    out = []\n    for ch in s:\n        if not out or out[-1] != ch or len(out) % 2 == 0:\n            out.append(ch)\n    if len(out) % 2:\n        out.pop()\n    write(n - len(out))\n    write(''.join(out))\n\nmain()\n", "n = int(input())\nuse = [True for i in range(n)]\ns = input()\nnow = 0\nflag = 0\nfor i in range(1, n):\n    if flag == 1:\n        flag = 0\n        continue\n    if s[now] == s[i]:\n        use[i] = False\n    else:\n        flag = 1\n        now = i+1\nans = \"\"\nfor i in range(n):\n    if use[i]:\n        ans += s[i]\nif len(ans) % 2 == 1:\n    ans = ans[:-1]\n\nprint(n-len(ans))\nprint(ans)\n", "n = int(input())\nA = list(input())\nu0 = 0\nu1 = 1\nans = []\nwhile u1 < n:\n    if A[u0] == A[u1]:\n        u1 += 1\n    else:\n        u0 = u1 + 1\n        ans.append(A[u1 - 1])\n        ans.append(A[u1])\n        u1 += 2\nprint(n - len(ans))\nprint(''.join(ans))", "n=int(input())\ns=input()\nans=''\nv=[0]*n\nflag=True\nfor i in range(n-1):\n    if flag:\n        if s[i]==s[i+1]:\n            v[i]=1\n        else:\n            flag=False\n    else:\n        flag=not flag\nfor i in range(n):\n    if v[i]==0:\n        ans+=s[i]\nif len(ans)%2:\n    ans=ans[:-1]\nprint(n-len(ans))\nprint(ans)", "n = int(input())\nst = input()\nind = 0\nkol = 0\nnew = \"\"\ni = 0\nwhile i < n:\n\tnew += st[i]\n\tj = i + 1\n\twhile j < n and st[j] == st[i] and ind % 2 == 0:\n\t\tj += 1\n\t\tkol += 1\n\ti = j\n\tind += 1\nif len(new) % 2 == 1:\n\tnew = new[:-1]\n\tkol += 1\nprint(kol)\nprint(new)\n", "import math\nimport bisect\nimport heapq\nfrom collections import defaultdict\n\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, x, y = egcd(b % a, a)\n        return (g, y - (b // a) * x, x)\n\n\ndef mulinv(b, n):\n    g, x, _ = egcd(b, n)\n    if g == 1:\n        return x % n\n\n\n\ndef isprime(n):\n    for d in range(2, int(math.sqrt(n))+1):\n        if n % d == 0:\n            return False\n    return True\n\n\ndef argsort(ls):\n    return sorted(list(range(len(ls))), key=ls.__getitem__)\n\n\ndef f(p=0):\n    if p == 1:\n        return list(map(int, input().split()))\n    elif p == 2:\n        return list(map(int, input().split()))\n    elif p == 3:\n        return list(input())\n    else:\n        return int(input())\n\nn = f()\ns = f(3)\nres = []\ni = 0\nwhile(i<n-1):\n    while(i<n-1 and s[i]==s[i+1]):\n        i+=1\n    if i==n-1:\n        break\n    if s[i]!=s[i+1]:\n        res.append(s[i])\n        res.append(s[i+1])\n    else:\n        res.append(s[i])\n    i+=2\n\nif len(res)%2==0:\n    print(n-len(res))\n    print(''.join(res))\nelse:\n    print(n-len(res)+1)\n    print(''.join(res[:-1]))\n", "n = int(input())\nstring = input()\nans = string[0]\ncount = 0\nindex = []\nfor q in range(1, n):\n    if len(ans) % 2 == 1:\n        if ans[-1] != string[q]:\n            ans += string[q]\n        else:\n            count+=1\n    else:\n        ans+=string[q]\n\nif len(ans)%2!=0:\n    print(count + 1)\n    print(ans[:-1])\nelse:\n    print(count)\n    print(ans)", "#codeforces1165C_live\ngi = lambda : list(map(int,input().strip().split()))\nn, = gi()\ns = list(input())\nst = []\nfor e in s:\n\tif st and st[-1] == e and len(st)%2:\n\t\tst.pop()\n\t\tst.append(e)\n\telse:\n\t\tst.append(e)\nif len(st)%2:\n\tst.pop()\nprint(n - len(st))\nprint(\"\".join(st))", "def go():\n    n = int(input())\n    a = [i for i in input()]\n    if n == 1:\n        return '1\\n'\n    i = 1\n    while i < n:\n        if a[i] == a[i - 1]:\n            a[i - 1] = None\n            i += 1\n        else:\n            i += 2\n    a = ''.join(i for i in a if i is not None)\n    if len(a) % 2 == 1:\n        a = a[:-1]\n    return '{}\\n{}'.format(n - len(a), a)\n\nprint(go())\n", "import os\nimport sys\n\ndef log(*args, **kwargs):\n    if os.environ.get('CODEFR'):\n        print(*args, **kwargs)\n\n\nn = int(input())\ns = input()\n\n\nresult = ''\ni = 0\nwhile i < n - 1:\n    j = i + 1\n    while j != n:\n        if s[i] != s[j]:\n            result += s[i]+s[j]\n            i = j + 1\n            break\n        j += 1\n    if j == n:\n        break\n\nprint(n-len(result))\nprint(result)\n    \n", "def main():\n    n = int(input())\n    s = input()\n    stack = []\n    ans = 0\n    for i in range(n):\n        stack.append((s[i], len(stack)))\n        if len(stack) > 1:\n            if stack[-2][0] == stack[-1][0] and stack[-2][1] % 2 == 0:\n                ans += 1\n                stack.pop()\n    if len(stack) % 2 == 0:\n        print(ans)\n        for i in range(len(stack)):\n            print(stack[i][0], end='')\n    else:\n        print(ans + 1)\n        for i in range(len(stack) - 1):\n            print(stack[i][0], end='')\n\n\n\nmain()\n", "n = int(input())\ns = input()\ncount = 0\ngood = ''\ni = 0\nwhile i < len(s)-1:\n    if s[i] == s[i+1]:\n        count += 1\n        i += 1\n    else:\n        good += s[i:i+2]\n        i += 2\nif i == len(s)-1:\n    count += 1\nprint(count)\nprint(good)", "n=int(input())\ns=list(input())\ns.append(0)\nx=s[0]\ntot=''\nfor i in range(n):\n    if s[i]!=x:\n        tot+=x+s[i]\n        x=s[i+1]\nprint(n-len(tot))\nprint(tot)\n    \n", "n = int(input())\ns = list(input())\n\nres = []\n\nl = 0\nr = 1\nwhile r < n:\n    if s[l] != s[r]:\n        res += [s[l], s[r]]\n        l = r + 1\n        r = l + 1\n    else:\n        r += 1\n\nk = n - len(res)\n\nprint(k)\nprint(*res, sep='')\n", "n = int(input())\ns = input()\n\nres = []\n\ni = 0\n\nops = 0\nwhile i < n:\n    # is bad\n    if i + 1 == n or s[i] == s[i + 1]:\n        ops += 1\n        i += 1\n    else:\n        res += [s[i], s[i + 1]]\n        i += 2\n\nprint(ops)\nprint(''.join(res))", "n = int(input())\ns = input()\no = 0\nrem = set()\nfor i, c in enumerate(s):\n    if (i ^ o) & 1: continue\n    if i == n - 1:\n        rem.add(i)\n        break\n    if s[i] == s[i + 1]:\n        rem.add(i)\n        o ^= 1\nres = ''.join(s[i] for i in range(n) if i not in rem)\nprint(len(rem))\nprint(res)", "n = int(input())\na = input()\n\nans = 0\nx = True\nb = []\nfor i in range(n-1):\n\tif x:\n\t\tif a[i]==a[i+1]:\n\t\t\tb.append(i)#+ans)\n\t\t\tans+=1\n\t\t\tx = not x\n\tx = not x\n\nif (n-ans)%2:\n\tb.append(n-1)\n\tans+=1\n\n#print(b)\nprint(ans)\nb = set(b)\nfor i in range(n):\n\tif i not in b:\n\t\tprint(a[i],end='')\n\n\n\n\n", "n = int(input())\ns = input().strip()\nprev = s[0]\nans = [s[0]]\nk = 0\nfor i in range(1, n):\n    if (k+i) % 2 == 1 and s[i] == prev:\n        k += 1\n        continue\n    else:\n        ans.append(s[i])\n        prev = s[i]\nif len(ans)%2 == 1:\n    ans.pop()\nprint(n - len(ans))\nprint(''.join(ans))", "n = int(input())\ns = list(input())\n\n\ni = 0\nj = 1\nwhile j < len(s):\n    while j < len(s) and s[i] == s[j]:\n        s[j] = ''\n        j += 1\n\n    i = j + 1\n    j += 2\n\nif (len(s) - s.count('')) % 2 == 1:\n    i = n - 1\n    while i >= 0 and s[i] == '':\n        i -= 1\n    s[i] = ''\n\nprint(s.count(''))\nprint(''.join(s))\n"]