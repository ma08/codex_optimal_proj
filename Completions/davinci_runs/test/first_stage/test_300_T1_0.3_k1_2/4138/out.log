2022-04-18 20:45:32.340642 """
The only difference between the easy and the hard versions is the maximum value of $k$.

You are given an infinite sequence of form "112123123412345$\dots$" which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from $1$ to $1$, the second one — from $1$ to $2$, the third one — from $1$ to $3$, $\dots$, the $i$-th block consists of all numbers from $1$ to $i$. 

So the first $56$ elements of the sequence are "11212312341234512345612345671234567812345678912345678910". Elements of the sequence are numbered from one. For example, the $1$-st element of the sequence is $1$, the $3$-rd element of the sequence is $2$, the $20$-th element of the sequence is $5$, the $38$-th element is $2$, the $56$-th element of the sequence is $0$.

Your task is to answer $q$ independent queries. In the $i$-th query you are given one integer $k_i$. Calculate the digit at the position $k_i$ of the sequence.


-----Input-----

The first line of the input contains one integer $q$ ($1 \le q \le 500$) — the number of queries.

The $i$-th of the following $q$ lines contains one integer $k_i$ $(1 \le k_i \le 10^{18})$ — the description of the corresponding query.


-----Output-----

Print $q$ lines. In the $i$-th line print one digit $x_i$ $(0 \le x_i \le 9)$ — the answer to the query $i$, i.e. $x_i$ should be equal to the element at the position $k_i$ of the sequence.


-----Examples-----
Input
5
1
3
20
38
56

Output
1
2
5
2
0

Input
4
2132
506
999999999999999999
1000000000000000000

Output
8
2
4
1



-----Note-----

Answers on queries from the first example are described in the problem statement.
"""
2022-04-18 20:45:32.340680 --------------------------
2022-04-18 20:45:53.510921 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    n = 1\n    while k > n:\n        k -= n\n        n += 1\n    return str(n)[k-1]\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# Solution\n\nq = int(input())\n\nfor i in range(q):\n    k = int(input())\n    if k == 1:\n        print(1)\n    else:\n        n = 1\n        while k > n * (n + 1) // 2:\n            n += 1\n        k -= n * (n - 1) // 2\n        print(str(n - k + 1)[-1])"
    }
  ],
  "created": 1650314732,
  "id": "cmpl-4ySXUETrHNXtA6KReeOvAzYuEIxJz",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 20:45:53.511223 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    n = 1\n    while k > n:\n        k -= n\n        n += 1\n    return str(n)[k-1]\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 20:45:53.511258 REASON stop
2022-04-18 20:45:53.551277 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# Solution\n\nq = int(input())\n\nfor i in range(q):\n    k = int(input())\n    if k == 1:\n        print(1)\n    else:\n        n = 1\n        while k > n * (n + 1) // 2:\n            n += 1\n        k -= n * (n - 1) // 2\n        print(str(n - k + 1)[-1])"
}
2022-04-18 20:45:53.551433 REASON stop
