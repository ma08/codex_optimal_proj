2022-04-18 20:15:04.801176 """
Polycarp wrote on the board a string $s$ containing only lowercase Latin letters ('a'-'z'). This string is known for you and given in the input.

After that, he erased some letters from the string $s$, and he rewrote the remaining letters in any order. As a result, he got some new string $t$. You have to find it with some additional information.

Suppose that the string $t$ has length $m$ and the characters are numbered from left to right from $1$ to $m$. You are given a sequence of $m$ integers: $b_1, b_2, \ldots, b_m$, where $b_i$ is the sum of the distances $|i-j|$ from the index $i$ to all such indices $j$ that $t_j > t_i$ (consider that 'a'<'b'<...<'z'). In other words, to calculate $b_i$, Polycarp finds all such indices $j$ that the index $j$ contains a letter that is later in the alphabet than $t_i$ and sums all the values $|i-j|$.

For example, if $t$ = "abzb", then:  since $t_1$='a', all other indices contain letters which are later in the alphabet, that is: $b_1=|1-2|+|1-3|+|1-4|=1+2+3=6$;  since $t_2$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_2=|2-3|=1$;  since $t_3$='z', then there are no indexes $j$ such that $t_j>t_i$, thus $b_3=0$;  since $t_4$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_4=|4-3|=1$. 

Thus, if $t$ = "abzb", then $b=[6,1,0,1]$.

Given the string $s$ and the array $b$, find any possible string $t$ for which the following two requirements are fulfilled simultaneously:  $t$ is obtained from $s$ by erasing some letters (possibly zero) and then writing the rest in any order;  the array, constructed from the string $t$ according to the rules above, equals to the array $b$ specified in the input data. 


-----Input-----

The first line contains an integer $q$ ($1 \le q \le 100$) — the number of test cases in the test. Then $q$ test cases follow.

Each test case consists of three lines:  the first line contains string $s$, which has a length from $1$ to $50$ and consists of lowercase English letters;  the second line contains positive integer $m$ ($1 \le m \le |s|$), where $|s|$ is the length of the string $s$, and $m$ is the length of the array $b$;  the third line contains the integers $b_1, b_2, \dots, b_m$ ($0 \le b_i \le 1225$). 

It is guaranteed that in each test case an answer exists.


-----Output-----

Output $q$ lines: the $k$-th of them should contain the answer (string $t$) to the $k$-th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.


-----Example-----
Input
4
abac
3
2 1 0
abc
1
0
abba
3
1 0 1
ecoosdcefr
10
38 13 24 14 11 5 3 24 17 0

Output
aac
b
aba
codeforces



-----Note-----

In the first test case, such strings $t$ are suitable: "aac', "aab".

In the second test case, such trings $t$ are suitable: "a", "b", "c".

In the third test case, only the string $t$ equals to "aba" is suitable, but the character 'b' can be from the second or third position.
"""
2022-04-18 20:15:04.801222 --------------------------
2022-04-18 20:15:32.390124 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# def get_b(s):\n#     b = []\n#     for i in range(len(s)):\n#         b.append(sum([abs(i-j) for j in range(len(s)) if s[j] > s[i]]))\n#     return b\n\n# def get_s(b):\n#     s = ''\n#     for i in range(len(b)):\n#         s += chr(ord('a')+i)\n#     return s\n\n# def get_t(s, b):\n#     t = ''\n#     for i in range(len(b)):\n#         t += s[b[i]]\n#     return t\n\n# for _ in range(int(input())):\n#     s = input()\n#     m = int(input())\n#     b = [int(i) for i in input().split()]\n#     print(get_t(s, b))\n\n\ndef get_t(s, b):\n    t = ''\n    for i in range(len(b)):\n        t += s[b[i]]\n    return t\n\nfor _ in range(int(input())):\n    s = input()\n    m = int(input())\n    b = [int(i) for i in input().split()]\n    print(get_t(s, b))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n    # iterate over test cases\n    for i in range(t):\n        # read the string\n        s = input()\n        # read the length of the array\n        m = int(input())\n        # read the array\n        b = [int(x) for x in input().split()]\n        # check if the length of the array is equal to the length of the string\n        if len(b) != len(s):\n            # if not, then print an error message\n            print(\"ERROR!\")\n            # exit the program\n            exit()\n        # create an empty string\n        t = \"\"\n        # iterate over the array\n        for j in range(len(b)):\n            # check if the value of the array is equal to zero\n            if b[j] == 0:\n                # if so, then add the character to the string\n                t += s[j]\n            # otherwise\n            else:\n                # iterate over the string\n                for k in range(len(s)):\n                    # check if the character of the string is greater than the character of the string\n                    if ord(s[k]) > ord(s[j]):\n                        # if so, then subtract the value of the array\n                        b[j] -= abs(j - k)\n                # check if the value of the array is equal to zero\n                if b[j] == 0:\n                    # if so, then add the character to the string\n                    t += s[j]\n        # print the string\n        print(t)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650312904,
  "id": "cmpl-4yS40e5kUoFxg0PZcPlYbADIMr3d8",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 20:15:32.390406 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# def get_b(s):\n#     b = []\n#     for i in range(len(s)):\n#         b.append(sum([abs(i-j) for j in range(len(s)) if s[j] > s[i]]))\n#     return b\n\n# def get_s(b):\n#     s = ''\n#     for i in range(len(b)):\n#         s += chr(ord('a')+i)\n#     return s\n\n# def get_t(s, b):\n#     t = ''\n#     for i in range(len(b)):\n#         t += s[b[i]]\n#     return t\n\n# for _ in range(int(input())):\n#     s = input()\n#     m = int(input())\n#     b = [int(i) for i in input().split()]\n#     print(get_t(s, b))\n\n\ndef get_t(s, b):\n    t = ''\n    for i in range(len(b)):\n        t += s[b[i]]\n    return t\n\nfor _ in range(int(input())):\n    s = input()\n    m = int(input())\n    b = [int(i) for i in input().split()]\n    print(get_t(s, b))"
}
2022-04-18 20:15:32.390446 REASON stop
2022-04-18 20:15:32.417733 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n    # iterate over test cases\n    for i in range(t):\n        # read the string\n        s = input()\n        # read the length of the array\n        m = int(input())\n        # read the array\n        b = [int(x) for x in input().split()]\n        # check if the length of the array is equal to the length of the string\n        if len(b) != len(s):\n            # if not, then print an error message\n            print(\"ERROR!\")\n            # exit the program\n            exit()\n        # create an empty string\n        t = \"\"\n        # iterate over the array\n        for j in range(len(b)):\n            # check if the value of the array is equal to zero\n            if b[j] == 0:\n                # if so, then add the character to the string\n                t += s[j]\n            # otherwise\n            else:\n                # iterate over the string\n                for k in range(len(s)):\n                    # check if the character of the string is greater than the character of the string\n                    if ord(s[k]) > ord(s[j]):\n                        # if so, then subtract the value of the array\n                        b[j] -= abs(j - k)\n                # check if the value of the array is equal to zero\n                if b[j] == 0:\n                    # if so, then add the character to the string\n                    t += s[j]\n        # print the string\n        print(t)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 20:15:32.417927 REASON stop
