2022-04-20 03:22:23.650293 """
Given are positive integers N, M, Q, and Q quadruples of integers ( a_i , b_i , c_i , d_i ).
Consider a sequence A satisfying the following conditions:
 - A is a sequence of N positive integers.
 - 1 \leq A_1 \leq A_2 \le \cdots \leq A_N \leq M.
Let us define a score of this sequence as follows:
 - The score is the sum of d_i over all indices i such that A_{b_i} - A_{a_i} = c_i. (If there is no such i, the score is 0.)
Find the maximum possible score of A.

-----Constraints-----
 - All values in input are integers.
 - 2 ≤ N ≤ 10
 - 1 \leq M \leq 10
 - 1 \leq Q \leq 50
 - 1 \leq a_i < b_i \leq N ( i = 1, 2, ..., Q )
 - 0 \leq c_i \leq M - 1 ( i = 1, 2, ..., Q )
 - (a_i, b_i, c_i) \neq (a_j, b_j, c_j) (where i \neq j)
 - 1 \leq d_i \leq 10^5 ( i = 1, 2, ..., Q )

-----Input-----
Input is given from Standard Input in the following format:
N M Q
a_1 b_1 c_1 d_1
:
a_Q b_Q c_Q d_Q

-----Output-----
Print the maximum possible score of A.

-----Sample Input-----
3 4 3
1 3 3 100
1 2 2 10
2 3 2 10

-----Sample Output-----
110

When A = \{1, 3, 4\}, its score is 110. Under these conditions, no sequence has a score greater than 110, so the answer is 110.
"""
2022-04-20 03:22:23.650314 --------------------------
2022-04-20 03:22:23.650480 using api key gabby
2022-04-20 03:23:46.521927 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# read input\nN, M, Q = map(int, sys.stdin.readline().split())\n\n# initialize\na = [[0 for _ in range(M)] for _ in range(N)]\n\n# read input\nfor _ in range(Q):\n    ai, bi, ci, di = map(int, sys.stdin.readline().split())\n    a[bi-1][ci] += di\n    if ai > 1:\n        a[ai-2][ci] -= di\n\n# calculate\nfor i in range(N):\n    for j in range(M):\n        if i > 0:\n            a[i][j] += a[i-1][j]\n\n# print\nprint(max(a[N-1]))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m, q = map(int, input().split())\n    a = [0] * n\n    for i in range(q):\n        ai, bi, ci, di = map(int, input().split())\n        a[bi - 1] += di\n        if ai > 1:\n            a[ai - 2] -= di\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        a[i] = ans\n    print(max(a))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# N, M, Q = map(int, input().split())\n# a, b, c, d = [], [], [], []\n# for i in range(Q):\n#     a_i, b_i, c_i, d_i = map(int, input().split())\n#     a.append(a_i)\n#     b.append(b_i)\n#     c.append(c_i)\n#     d.append(d_i)\n\nN, M, Q = 3, 4, 3\na = [1, 1, 2]\nb = [3, 2, 3]\nc = [3, 2, 2]\nd = [100, 10, 10]\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u30af\u30a8\u30ea\u3092\u898b\u3066\u3001j\u3092\u4f5c\u308b\u3068\u304d\u306e\u6700\u5927\u5024\ndp = [[0 for _ in range(M+1)] for _ in range(N+1)]\n\nfor i in range(Q):\n    for j in range(M+1):\n        if j - c[i] >= 0:\n            dp[b[i]][j] = max(dp[b[i]][j], dp[a[i]][j-c[i]] + d[i])\n\nprint(max(dp[N]))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(Q)]\n    dp = [[0]*(M+1) for _ in range(N+1)]\n    for a, b, c, d in abcd:\n        dp[a][c] += d\n        dp[b][c] -= d\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            dp[i][j] += dp[i-1][j]\n    print(max(sum(dp[i]) for i in range(1, N+1)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "\n\nN, M, Q = map(int, input().split())\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 a_i, b_i, c_i \u306b\u3064\u3044\u3066\u3001d_i \u304c\u6700\u5927\u306e\u3082\u306e\u304c\u4e0a\u306b\u6765\u308b\nquery = []\nfor _ in range(Q):\n    a, b, c, d = map(int, input().split())\n    query.append((a, b, c, d))\nquery.sort(key=lambda x: (x[0], x[2], -x[3]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 a_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[0], x[1], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 b_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[1], x[0], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 b_i \u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[1], x[2], x[0]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 c_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[2], x[0], x[1]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 c_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[2], x[1], x[0]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[0], x[1], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[1], x[0], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[2], x[0], x[1]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[2], x[1], x[0]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[1], x[2], x[0]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[0], x[2], x[1]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[0], x[1], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, m, q = map(int, input().split())\n\n# \u521d\u671f\u5316\ndp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n# \u5165\u529b\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    dp[b][c] += d\n\n# \u7d2f\u7a4d\u548c\nfor i in range(n + 1):\n    for j in range(m):\n        dp[i][j + 1] += dp[i][j]\n\nfor j in range(m + 1):\n    for i in range(n):\n        dp[i + 1][j] += dp[i][j]\n\n# \u51fa\u529b\nans = 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        ans = max(ans, dp[i][j] - dp[i][j - 1] - dp[i - 1][j] + dp[i - 1][j - 1])\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n    for _ in range(q):\n        ai, bi, ci, di = map(int, sys.stdin.readline().split())\n        a[bi][ci] += di\n        if ai > 0:\n            a[ai][ci] -= di\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] += a[i][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] += a[i - 1][j]\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ans = max(ans, a[i][j])\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n    for _ in range(q):\n        ai, bi, ci, di = map(int, sys.stdin.readline().split())\n        a[bi][ci] += di\n        if ai > 1:\n            a[ai - 1][ci + 1] -= di\n\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] += a[i][j - 1] + a[i - 1][j] - a[i - 1][j - 1]\n            ans = max(ans, a[i][j])\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650424943,
  "id": "cmpl-4yvD58gh2rAX9exs9GegigP6uq5cU",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:23:46.524874 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# read input\nN, M, Q = map(int, sys.stdin.readline().split())\n\n# initialize\na = [[0 for _ in range(M)] for _ in range(N)]\n\n# read input\nfor _ in range(Q):\n    ai, bi, ci, di = map(int, sys.stdin.readline().split())\n    a[bi-1][ci] += di\n    if ai > 1:\n        a[ai-2][ci] -= di\n\n# calculate\nfor i in range(N):\n    for j in range(M):\n        if i > 0:\n            a[i][j] += a[i-1][j]\n\n# print\nprint(max(a[N-1]))"
}
2022-04-20 03:23:46.524996 REASON stop
2022-04-20 03:23:46.526322 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m, q = map(int, input().split())\n    a = [0] * n\n    for i in range(q):\n        ai, bi, ci, di = map(int, input().split())\n        a[bi - 1] += di\n        if ai > 1:\n            a[ai - 2] -= di\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        a[i] = ans\n    print(max(a))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:23:46.526461 REASON stop
2022-04-20 03:23:46.527203 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# N, M, Q = map(int, input().split())\n# a, b, c, d = [], [], [], []\n# for i in range(Q):\n#     a_i, b_i, c_i, d_i = map(int, input().split())\n#     a.append(a_i)\n#     b.append(b_i)\n#     c.append(c_i)\n#     d.append(d_i)\n\nN, M, Q = 3, 4, 3\na = [1, 1, 2]\nb = [3, 2, 3]\nc = [3, 2, 2]\nd = [100, 10, 10]\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u30af\u30a8\u30ea\u3092\u898b\u3066\u3001j\u3092\u4f5c\u308b\u3068\u304d\u306e\u6700\u5927\u5024\ndp = [[0 for _ in range(M+1)] for _ in range(N+1)]\n\nfor i in range(Q):\n    for j in range(M+1):\n        if j - c[i] >= 0:\n            dp[b[i]][j] = max(dp[b[i]][j], dp[a[i]][j-c[i]] + d[i])\n\nprint(max(dp[N]))"
}
2022-04-20 03:23:46.527293 REASON stop
2022-04-20 03:23:46.553218 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(Q)]\n    dp = [[0]*(M+1) for _ in range(N+1)]\n    for a, b, c, d in abcd:\n        dp[a][c] += d\n        dp[b][c] -= d\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            dp[i][j] += dp[i-1][j]\n    print(max(sum(dp[i]) for i in range(1, N+1)))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:23:46.553386 REASON stop
2022-04-20 03:23:46.572533 4 {
  "finish_reason": "length",
  "index": 4,
  "logprobs": null,
  "text": "\n\nN, M, Q = map(int, input().split())\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 a_i, b_i, c_i \u306b\u3064\u3044\u3066\u3001d_i \u304c\u6700\u5927\u306e\u3082\u306e\u304c\u4e0a\u306b\u6765\u308b\nquery = []\nfor _ in range(Q):\n    a, b, c, d = map(int, input().split())\n    query.append((a, b, c, d))\nquery.sort(key=lambda x: (x[0], x[2], -x[3]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 a_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[0], x[1], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 b_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[1], x[0], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 b_i \u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[1], x[2], x[0]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 c_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[2], x[0], x[1]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 c_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (x[2], x[1], x[0]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[0], x[1], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[1], x[0], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[2], x[0], x[1]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[2], x[1], x[0]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[1], x[2], x[0]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[0], x[2], x[1]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3076\nquery.sort(key=lambda x: (-x[3], x[0], x[1], x[2]))\n\n# \u5404\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001a_i, b_i, c_i \u304c\u540c\u3058\u3082\u306e\u3092\u307e\u3068\u3081\u308b\n# \u307e\u3068\u3081\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u3001d_i \u304c\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001a_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u305d\u306e\u4e2d\u3067\u3001c_i \u304c\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3079\u308b\n# \u3053\u308c\u3067\u3001\u540c\u3058 d_i \u306b\u3064\u3044\u3066\u3001b_i \u304c\u5c0f\u3055\u3044\u9806\u306b"
}
2022-04-20 03:23:46.572808 REASON length
2022-04-20 03:23:46.572839 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, m, q = map(int, input().split())\n\n# \u521d\u671f\u5316\ndp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n# \u5165\u529b\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    dp[b][c] += d\n\n# \u7d2f\u7a4d\u548c\nfor i in range(n + 1):\n    for j in range(m):\n        dp[i][j + 1] += dp[i][j]\n\nfor j in range(m + 1):\n    for i in range(n):\n        dp[i + 1][j] += dp[i][j]\n\n# \u51fa\u529b\nans = 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        ans = max(ans, dp[i][j] - dp[i][j - 1] - dp[i - 1][j] + dp[i - 1][j - 1])\nprint(ans)"
}
2022-04-20 03:23:46.572924 REASON stop
2022-04-20 03:23:46.573835 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n    for _ in range(q):\n        ai, bi, ci, di = map(int, sys.stdin.readline().split())\n        a[bi][ci] += di\n        if ai > 0:\n            a[ai][ci] -= di\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] += a[i][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] += a[i - 1][j]\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ans = max(ans, a[i][j])\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:23:46.573929 REASON stop
2022-04-20 03:23:46.575241 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m, q = map(int, sys.stdin.readline().split())\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n    for _ in range(q):\n        ai, bi, ci, di = map(int, sys.stdin.readline().split())\n        a[bi][ci] += di\n        if ai > 1:\n            a[ai - 1][ci + 1] -= di\n\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] += a[i][j - 1] + a[i - 1][j] - a[i - 1][j - 1]\n            ans = max(ans, a[i][j])\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:23:46.575483 REASON stop
