2022-04-20 03:53:28.444289 """
When Mr. X is away from home, he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.
You, the smartwatch, has found N routes to his home.
If Mr. X uses the i-th of these routes, he will get home in time t_i at cost c_i.
Find the smallest cost of a route that takes not longer than time T.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 100
 - 1 \leq T \leq 1000
 - 1 \leq c_i \leq 1000
 - 1 \leq t_i \leq 1000
 - The pairs (c_i, t_i) are distinct.

-----Input-----
Input is given from Standard Input in the following format:
N T
c_1 t_1
c_2 t_2
:
c_N t_N

-----Output-----
Print the smallest cost of a route that takes not longer than time T.
If there is no route that takes not longer than time T, print TLE instead.

-----Sample Input-----
3 70
7 60
1 80
4 50

-----Sample Output-----
4

 - The first route gets him home at cost 7.
 - The second route takes longer than time T = 70.
 - The third route gets him home at cost 4.
Thus, the cost 4 of the third route is the minimum.
"""
2022-04-20 03:53:28.444310 --------------------------
2022-04-20 03:53:28.444471 using api key sourya
2022-04-20 03:53:37.285320 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN, T = map(int, input().split())\n\ncost = 1001\nfor i in range(N):\n    c, t = map(int, input().split())\n    if t <= T:\n        cost = min(cost, c)\n\nif cost == 1001:\n    print(\"TLE\")\nelse:\n    print(cost)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, t = map(int, input().split())\nroutes = [list(map(int, input().split())) for _ in range(n)]\n\nroutes.sort(key=lambda x: x[1])\n\nfor i in range(len(routes)):\n    if routes[i][1] <= t:\n        print(routes[i][0])\n        exit()\nprint('TLE')"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, t = map(int, input().split())\ncosts = []\nfor i in range(n):\n    c, ti = map(int, input().split())\n    costs.append((c, ti))\n\ncosts.sort()\n\nfor i in range(n):\n    if costs[i][1] <= t:\n        print(costs[i][0])\n        break\nelse:\n    print(\"TLE\")"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn, t = map(int, input().split())\n\ncosts = []\nfor _ in range(n):\n    c, ti = map(int, input().split())\n    if ti <= t:\n        costs.append(c)\n\nif len(costs) == 0:\n    print(\"TLE\")\nelse:\n    print(min(costs))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, t = map(int, input().split())\ncosts = []\nfor i in range(n):\n    c, ti = map(int, input().split())\n    costs.append((c, ti))\n\ncosts.sort(key=lambda x: x[1])\n\nfor i in range(n):\n    if costs[i][1] <= t:\n        print(costs[i][0])\n        exit()\n\nprint(\"TLE\")"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, t = map(int, sys.stdin.readline().split())\n    routes = []\n    for _ in range(n):\n        c, t_i = map(int, sys.stdin.readline().split())\n        routes.append((c, t_i))\n    routes.sort(key=lambda x: x[1])\n    for c, t_i in routes:\n        if t_i <= t:\n            print(c)\n            return\n    print('TLE')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, t = map(int, input().split())\n\nmin_cost = float('inf')\nfor _ in range(n):\n    cost, time = map(int, input().split())\n    if time <= t:\n        min_cost = min(min_cost, cost)\n\nif min_cost == float('inf'):\n    print('TLE')\nelse:\n    print(min_cost)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\nN, T = map(int, sys.stdin.readline().split())\n\ncost = []\ntime = []\nfor i in range(N):\n    c, t = map(int, sys.stdin.readline().split())\n    cost.append(c)\n    time.append(t)\n\nfor i in range(N):\n    if time[i] <= T:\n        print(cost[i])\n        sys.exit()\n\nprint(\"TLE\")"
    }
  ],
  "created": 1650426808,
  "id": "cmpl-4yvhAG6djum2U10ALIpIUCkqB1J4X",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:53:37.285731 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN, T = map(int, input().split())\n\ncost = 1001\nfor i in range(N):\n    c, t = map(int, input().split())\n    if t <= T:\n        cost = min(cost, c)\n\nif cost == 1001:\n    print(\"TLE\")\nelse:\n    print(cost)"
}
2022-04-20 03:53:37.285807 REASON stop
2022-04-20 03:53:37.286906 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, t = map(int, input().split())\nroutes = [list(map(int, input().split())) for _ in range(n)]\n\nroutes.sort(key=lambda x: x[1])\n\nfor i in range(len(routes)):\n    if routes[i][1] <= t:\n        print(routes[i][0])\n        exit()\nprint('TLE')"
}
2022-04-20 03:53:37.287014 REASON stop
2022-04-20 03:53:37.287717 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, t = map(int, input().split())\ncosts = []\nfor i in range(n):\n    c, ti = map(int, input().split())\n    costs.append((c, ti))\n\ncosts.sort()\n\nfor i in range(n):\n    if costs[i][1] <= t:\n        print(costs[i][0])\n        break\nelse:\n    print(\"TLE\")"
}
2022-04-20 03:53:37.287815 REASON stop
2022-04-20 03:53:37.288986 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn, t = map(int, input().split())\n\ncosts = []\nfor _ in range(n):\n    c, ti = map(int, input().split())\n    if ti <= t:\n        costs.append(c)\n\nif len(costs) == 0:\n    print(\"TLE\")\nelse:\n    print(min(costs))"
}
2022-04-20 03:53:37.289064 REASON stop
2022-04-20 03:53:37.290521 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, t = map(int, input().split())\ncosts = []\nfor i in range(n):\n    c, ti = map(int, input().split())\n    costs.append((c, ti))\n\ncosts.sort(key=lambda x: x[1])\n\nfor i in range(n):\n    if costs[i][1] <= t:\n        print(costs[i][0])\n        exit()\n\nprint(\"TLE\")"
}
2022-04-20 03:53:37.290605 REASON stop
2022-04-20 03:53:37.291497 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, t = map(int, sys.stdin.readline().split())\n    routes = []\n    for _ in range(n):\n        c, t_i = map(int, sys.stdin.readline().split())\n        routes.append((c, t_i))\n    routes.sort(key=lambda x: x[1])\n    for c, t_i in routes:\n        if t_i <= t:\n            print(c)\n            return\n    print('TLE')\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:53:37.291586 REASON stop
2022-04-20 03:53:37.292448 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, t = map(int, input().split())\n\nmin_cost = float('inf')\nfor _ in range(n):\n    cost, time = map(int, input().split())\n    if time <= t:\n        min_cost = min(min_cost, cost)\n\nif min_cost == float('inf'):\n    print('TLE')\nelse:\n    print(min_cost)"
}
2022-04-20 03:53:37.292530 REASON stop
2022-04-20 03:53:37.293479 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\nN, T = map(int, sys.stdin.readline().split())\n\ncost = []\ntime = []\nfor i in range(N):\n    c, t = map(int, sys.stdin.readline().split())\n    cost.append(c)\n    time.append(t)\n\nfor i in range(N):\n    if time[i] <= T:\n        print(cost[i])\n        sys.exit()\n\nprint(\"TLE\")"
}
2022-04-20 03:53:37.293683 REASON stop
