["\n\nN, M = map(int, input().split())\nL = [0] * M\nR = [0] * M\nfor i in range(M):\n    L[i], R[i] = map(int, input().split())\n\n# print(N, M)\n# print(L)\n# print(R)\n\n# \u5404\u30b2\u30fc\u30c8\u306b\u3064\u3044\u3066\u3001ID\u30ab\u30fc\u30c9\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u30ea\u30b9\u30c8\u306e\u8981\u7d20\u6570\u306fN+1\u306b\u3059\u308b\n# 0\u756a\u76ee\u306f\u30c0\u30df\u30fc\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\ngate_list = [[0] * (N + 1) for i in range(M)]\nfor i in range(M):\n    for j in range(L[i], R[i] + 1):\n        gate_list[i][j] = 1\n\n# print(gate_list)\n\n# \u5404ID\u30ab\u30fc\u30c9\u306b\u3064\u3044\u3066\u3001\u5404\u30b2\u30fc\u30c8\u3092\u901a\u308b\u304b\u3069\u3046\u304b\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u30ea\u30b9\u30c8\u306e\u8981\u7d20\u6570\u306fM+1\u306b\u3059\u308b\n# 0\u756a\u76ee\u306f\u30c0\u30df\u30fc\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\nid_list = [[0] * (M + 1) for i in range(N + 1)]\nfor i in range(N + 1):\n    for j in range(M):\n        if gate_list[j][i] == 1:\n            id_list[i][j + 1] = 1\n\n# print(id_list)\n\n# \u5404ID\u30ab\u30fc\u30c9\u306b\u3064\u3044\u3066\u3001\u3059\u3079\u3066\u306e\u30b2\u30fc\u30c8\u3092\u901a\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\n# \u3059\u3079\u3066\u306e\u30b2\u30fc\u30c8\u3092\u901a\u308bID\u30ab\u30fc\u30c9\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\ncount = 0\nfor i in range(1, N + 1):\n    for j in range(1, M + 1):\n        if id_list[i][j] == 0:\n            break\n    else:\n        count += 1\n\nprint(count)", "\n\n# input\nn, m = map(int, input().split())\nl = []\nr = []\nfor i in range(m):\n    li, ri = map(int, input().split())\n    l.append(li)\n    r.append(ri)\n\n# solve\nans = 0\nfor i in range(n):\n    flag = True\n    for j in range(m):\n        if l[j] <= i <= r[j]:\n            flag = False\n    if flag:\n        ans += 1\n\n# output\nprint(ans)", "\n\nn, m = map(int, input().split())\n\n# Create a list of length n+1, where the i-th element is the number of gates that can be passed by the i-th ID card\n# Initially, all elements are 0\nid_cards = [0] * (n+1)\n\nfor i in range(m):\n    l, r = map(int, input().split())\n    # Increase the number of gates that can be passed by the l-th ID card by 1\n    id_cards[l] += 1\n    # Decrease the number of gates that can be passed by the (r+1)-th ID card by 1\n    id_cards[r+1] -= 1\n\n# Create a list of length n+1, where the i-th element is the number of gates that can be passed by the i-th ID card\n# Initially, all elements are 0\nid_cards_sum = [0] * (n+1)\n\n# Compute the cumulative sum of the list id_cards\nfor i in range(n):\n    id_cards_sum[i+1] = id_cards_sum[i] + id_cards[i+1]\n\n# Print the number of ID cards that allow us to pass all the gates alone\nprint(id_cards_sum.count(m))", "\n\nn, m = map(int, input().split())\n\nl = []\nr = []\nfor i in range(m):\n    l.append(int(input().split()[0]))\n    r.append(int(input().split()[1]))\n\nl_max = max(l)\nr_min = min(r)\n\nif r_min < l_max:\n    print(0)\nelse:\n    print(r_min - l_max + 1)", "\n\nN, M = map(int, input().split())\n\nL = [0] * (N + 1)\nR = [0] * (N + 1)\n\nfor i in range(M):\n    l, r = map(int, input().split())\n    L[l] += 1\n    R[r] += 1\n\nfor i in range(1, N + 1):\n    L[i] += L[i - 1]\n    R[i] += R[i - 1]\n\nans = 0\nfor i in range(1, N + 1):\n    if L[i] == R[i]:\n        ans += 1\n\nprint(ans)"]