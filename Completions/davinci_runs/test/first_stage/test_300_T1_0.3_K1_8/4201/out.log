2022-04-20 03:13:30.628923 """
We have a grid of H rows and W columns of squares. The color of the square at the i-th row from the top and the j-th column from the left (1 \leq i \leq H, 1 \leq j \leq W) is given to you as a character c_{i,j}: the square is white if c_{i,j} is ., and black if c_{i,j} is #.
Consider doing the following operation:
 - Choose some number of rows (possibly zero), and some number of columns (possibly zero). Then, paint red all squares in the chosen rows and all squares in the chosen columns.
You are given a positive integer K. How many choices of rows and columns result in exactly K black squares remaining after the operation? Here, we consider two choices different when there is a row or column chosen in only one of those choices.

-----Constraints-----
 - 1 \leq H, W \leq 6
 - 1 \leq K \leq HW
 - c_{i,j} is . or #.

-----Input-----
Input is given from Standard Input in the following format:
H W K
c_{1,1}c_{1,2}...c_{1,W}
c_{2,1}c_{2,2}...c_{2,W}
:
c_{H,1}c_{H,2}...c_{H,W}

-----Output-----
Print an integer representing the number of choices of rows and columns satisfying the condition.

-----Sample Input-----
2 3 2
..#
###

-----Sample Output-----
5

Five choices below satisfy the condition.
 - The 1-st row and 1-st column
 - The 1-st row and 2-nd column
 - The 1-st row and 3-rd column
 - The 1-st and 2-nd column
 - The 3-rd column
"""
2022-04-20 03:13:30.628945 --------------------------
2022-04-20 03:13:30.629114 using api key gabby
2022-04-20 03:14:51.952778 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef count_black_squares(c, h, w, k):\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if c[i][j] == '#':\n                count += 1\n    return count\n\ndef count_black_squares_in_row(c, h, w, k, row):\n    count = 0\n    for j in range(w):\n        if c[row][j] == '#':\n            count += 1\n    return count\n\ndef count_black_squares_in_col(c, h, w, k, col):\n    count = 0\n    for i in range(h):\n        if c[i][col] == '#':\n            count += 1\n    return count\n\ndef count_black_squares_in_row_col(c, h, w, k, row, col):\n    count = 0\n    for i in range(h):\n        if c[i][col] == '#':\n            count += 1\n    for j in range(w):\n        if c[row][j] == '#':\n            count += 1\n    if c[row][col] == '#':\n        count -= 1\n    return count\n\ndef main():\n    h, w, k = map(int, sys.stdin.readline().split())\n    c = []\n    for i in range(h):\n        c.append(list(sys.stdin.readline().strip()))\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if count_black_squares_in_row_col(c, h, w, k, i, j) == k:\n                count += 1\n    for i in range(h):\n        if count_black_squares_in_row(c, h, w, k, i) == k:\n            count += 1\n    for j in range(w):\n        if count_black_squares_in_col(c, h, w, k, j) == k:\n            count += 1\n    if count_black_squares(c, h, w, k) == k:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    h, w, k = map(int, input().split())\n    c = [list(input()) for _ in range(h)]\n\n    # dp[i][j][k] := i\u884c\u76ee\u307e\u3067\u898b\u3066\u3001j\u5217\u76ee\u307e\u3067\u898b\u3066\u3001k\u500b\u306e\u9ed2\u30de\u30b9\u3092\u6b8b\u3059\u3068\u304d\u306e\u30d1\u30bf\u30fc\u30f3\u6570\n    dp = [[[0] * (h*w+1) for _ in range(w+1)] for _ in range(h+1)]\n    dp[0][0][0] = 1\n\n    for i in range(h):\n        for j in range(w):\n            for k in range(h*w+1):\n                if c[i][j] == '.':\n                    dp[i+1][j+1][k] += dp[i][j+1][k] + dp[i+1][j][k]\n                else:\n                    dp[i+1][j+1][k] += dp[i][j+1][k] + dp[i+1][j][k] - dp[i][j][k]\n                    if k > 0:\n                        dp[i+1][j+1][k-1] += dp[i][j][k]\n\n    print(dp[h][w][k])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    H, W, K = map(int, sys.stdin.readline().split())\n    C = [list(sys.stdin.readline().strip()) for _ in range(H)]\n    ans = 0\n    for i in range(2**H):\n        for j in range(2**W):\n            cnt = 0\n            for h in range(H):\n                for w in range(W):\n                    if ((i >> h) & 1) == 0 and ((j >> w) & 1) == 0 and C[h][w] == '#':\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    H, W, K = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().rstrip() for _ in range(H)]\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n   "
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\n# input\nh, w, k = map(int, input().split())\nc = [list(input()) for _ in range(h)]\n\n# dp\ndp = [[0] * w for _ in range(h)]\ndp[0][0] = 1 if c[0][0] == '.' else 0\nfor i in range(1, h):\n    dp[i][0] = dp[i-1][0] + 1 if c[i][0] == '.' else 0\nfor j in range(1, w):\n    dp[0][j] = dp[0][j-1] + 1 if c[0][j] == '.' else 0\nfor i in range(1, h):\n    for j in range(1, w):\n        dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + 1 if c[i][j] == '.' else 0\n\n# count\nans = 0\nfor i in range(h):\n    for j in range(w):\n        for x in range(i, h):\n            for y in range(j, w):\n                if dp[x][y] - dp[i-1][y] - dp[x][j-1] + dp[i-1][j-1] == k:\n                    ans += 1\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    h, w, k = map(int, sys.stdin.readline().split())\n    c = [list(sys.stdin.readline().rstrip()) for _ in range(h)]\n\n    ans = 0\n    for i in range(1 << h):\n        for j in range(1 << w):\n            cnt = 0\n            for y in range(h):\n                for x in range(w):\n                    if (i >> y) & 1 or (j >> x) & 1:\n                        if c[y][x] == '#':\n                            cnt += 1\n            if cnt == k:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    H, W, K = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().rstrip() for i in range(H)]\n    print(solve(H, W, K, grid))\n\ndef solve(H, W, K, grid):\n    count = 0\n    for i in range(1 << H):\n        for j in range(1 << W):\n            if check(i, j, H, W, K, grid):\n                count += 1\n    return count\n\ndef check(i, j, H, W, K, grid):\n    c = 0\n    for x in range(H):\n        for y in range(W):\n            if (i >> x) & 1 or (j >> y) & 1:\n                if grid[x][y] == '#':\n                    c += 1\n    return c == K\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    h, w, k = map(int, input().split())\n    c = []\n    for i in range(h):\n        c.append(input())\n    ans = 0\n    for i in range(2**h):\n        for j in range(2**w):\n            cnt = 0\n            for x in range(h):\n                for y in range(w):\n                    if (i >> x) & 1 == 1:\n                        cnt += 1\n                    elif (j >> y) & 1 == 1:\n                        cnt += 1\n                    elif c[x][y] == '#':\n                        cnt += 1\n            if cnt == k:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650424410,
  "id": "cmpl-4yv4UpbVKkKJGID8eq4X8TPN9GJcW",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:14:51.953505 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef count_black_squares(c, h, w, k):\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if c[i][j] == '#':\n                count += 1\n    return count\n\ndef count_black_squares_in_row(c, h, w, k, row):\n    count = 0\n    for j in range(w):\n        if c[row][j] == '#':\n            count += 1\n    return count\n\ndef count_black_squares_in_col(c, h, w, k, col):\n    count = 0\n    for i in range(h):\n        if c[i][col] == '#':\n            count += 1\n    return count\n\ndef count_black_squares_in_row_col(c, h, w, k, row, col):\n    count = 0\n    for i in range(h):\n        if c[i][col] == '#':\n            count += 1\n    for j in range(w):\n        if c[row][j] == '#':\n            count += 1\n    if c[row][col] == '#':\n        count -= 1\n    return count\n\ndef main():\n    h, w, k = map(int, sys.stdin.readline().split())\n    c = []\n    for i in range(h):\n        c.append(list(sys.stdin.readline().strip()))\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if count_black_squares_in_row_col(c, h, w, k, i, j) == k:\n                count += 1\n    for i in range(h):\n        if count_black_squares_in_row(c, h, w, k, i) == k:\n            count += 1\n    for j in range(w):\n        if count_black_squares_in_col(c, h, w, k, j) == k:\n            count += 1\n    if count_black_squares(c, h, w, k) == k:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:14:51.953620 REASON stop
2022-04-20 03:14:51.954956 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    h, w, k = map(int, input().split())\n    c = [list(input()) for _ in range(h)]\n\n    # dp[i][j][k] := i\u884c\u76ee\u307e\u3067\u898b\u3066\u3001j\u5217\u76ee\u307e\u3067\u898b\u3066\u3001k\u500b\u306e\u9ed2\u30de\u30b9\u3092\u6b8b\u3059\u3068\u304d\u306e\u30d1\u30bf\u30fc\u30f3\u6570\n    dp = [[[0] * (h*w+1) for _ in range(w+1)] for _ in range(h+1)]\n    dp[0][0][0] = 1\n\n    for i in range(h):\n        for j in range(w):\n            for k in range(h*w+1):\n                if c[i][j] == '.':\n                    dp[i+1][j+1][k] += dp[i][j+1][k] + dp[i+1][j][k]\n                else:\n                    dp[i+1][j+1][k] += dp[i][j+1][k] + dp[i+1][j][k] - dp[i][j][k]\n                    if k > 0:\n                        dp[i+1][j+1][k-1] += dp[i][j][k]\n\n    print(dp[h][w][k])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:14:51.955047 REASON stop
2022-04-20 03:14:51.955801 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    H, W, K = map(int, sys.stdin.readline().split())\n    C = [list(sys.stdin.readline().strip()) for _ in range(H)]\n    ans = 0\n    for i in range(2**H):\n        for j in range(2**W):\n            cnt = 0\n            for h in range(H):\n                for w in range(W):\n                    if ((i >> h) & 1) == 0 and ((j >> w) & 1) == 0 and C[h][w] == '#':\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:14:51.955896 REASON stop
2022-04-20 03:14:51.978335 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    H, W, K = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().rstrip() for _ in range(H)]\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n    # 6. Choose only columns\n    # 7. Choose only rows and columns\n\n    # 1. Choose rows\n    # 2. Choose columns\n    # 3. Choose both\n    # 4. Choose none\n    # 5. Choose only rows\n   "
}
2022-04-20 03:14:51.978623 REASON length
2022-04-20 03:14:51.978647 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\n# input\nh, w, k = map(int, input().split())\nc = [list(input()) for _ in range(h)]\n\n# dp\ndp = [[0] * w for _ in range(h)]\ndp[0][0] = 1 if c[0][0] == '.' else 0\nfor i in range(1, h):\n    dp[i][0] = dp[i-1][0] + 1 if c[i][0] == '.' else 0\nfor j in range(1, w):\n    dp[0][j] = dp[0][j-1] + 1 if c[0][j] == '.' else 0\nfor i in range(1, h):\n    for j in range(1, w):\n        dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + 1 if c[i][j] == '.' else 0\n\n# count\nans = 0\nfor i in range(h):\n    for j in range(w):\n        for x in range(i, h):\n            for y in range(j, w):\n                if dp[x][y] - dp[i-1][y] - dp[x][j-1] + dp[i-1][j-1] == k:\n                    ans += 1\nprint(ans)"
}
2022-04-20 03:14:51.978716 REASON stop
2022-04-20 03:14:51.979652 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    h, w, k = map(int, sys.stdin.readline().split())\n    c = [list(sys.stdin.readline().rstrip()) for _ in range(h)]\n\n    ans = 0\n    for i in range(1 << h):\n        for j in range(1 << w):\n            cnt = 0\n            for y in range(h):\n                for x in range(w):\n                    if (i >> y) & 1 or (j >> x) & 1:\n                        if c[y][x] == '#':\n                            cnt += 1\n            if cnt == k:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:14:51.979752 REASON stop
2022-04-20 03:14:51.984861 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    H, W, K = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().rstrip() for i in range(H)]\n    print(solve(H, W, K, grid))\n\ndef solve(H, W, K, grid):\n    count = 0\n    for i in range(1 << H):\n        for j in range(1 << W):\n            if check(i, j, H, W, K, grid):\n                count += 1\n    return count\n\ndef check(i, j, H, W, K, grid):\n    c = 0\n    for x in range(H):\n        for y in range(W):\n            if (i >> x) & 1 or (j >> y) & 1:\n                if grid[x][y] == '#':\n                    c += 1\n    return c == K\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:14:51.984976 REASON stop
2022-04-20 03:14:51.988276 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    h, w, k = map(int, input().split())\n    c = []\n    for i in range(h):\n        c.append(input())\n    ans = 0\n    for i in range(2**h):\n        for j in range(2**w):\n            cnt = 0\n            for x in range(h):\n                for y in range(w):\n                    if (i >> x) & 1 == 1:\n                        cnt += 1\n                    elif (j >> y) & 1 == 1:\n                        cnt += 1\n                    elif c[x][y] == '#':\n                        cnt += 1\n            if cnt == k:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:14:51.988525 REASON stop
