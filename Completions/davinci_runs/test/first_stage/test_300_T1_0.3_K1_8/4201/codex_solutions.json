["\n\nimport sys\n\ndef main():\n    H, W, K = map(int, sys.stdin.readline().split())\n    C = [list(sys.stdin.readline().strip()) for _ in range(H)]\n    ans = 0\n    for i in range(2**H):\n        for j in range(2**W):\n            cnt = 0\n            for h in range(H):\n                for w in range(W):\n                    if ((i >> h) & 1) == 0 and ((j >> w) & 1) == 0 and C[h][w] == '#':\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    h, w, k = map(int, input().split())\n    c = []\n    for i in range(h):\n        c.append(input())\n    ans = 0\n    for i in range(2**h):\n        for j in range(2**w):\n            cnt = 0\n            for x in range(h):\n                for y in range(w):\n                    if (i >> x) & 1 == 1:\n                        cnt += 1\n                    elif (j >> y) & 1 == 1:\n                        cnt += 1\n                    elif c[x][y] == '#':\n                        cnt += 1\n            if cnt == k:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    h, w, k = map(int, input().split())\n    c = [list(input()) for _ in range(h)]\n\n    # dp[i][j][k] := i\u884c\u76ee\u307e\u3067\u898b\u3066\u3001j\u5217\u76ee\u307e\u3067\u898b\u3066\u3001k\u500b\u306e\u9ed2\u30de\u30b9\u3092\u6b8b\u3059\u3068\u304d\u306e\u30d1\u30bf\u30fc\u30f3\u6570\n    dp = [[[0] * (h*w+1) for _ in range(w+1)] for _ in range(h+1)]\n    dp[0][0][0] = 1\n\n    for i in range(h):\n        for j in range(w):\n            for k in range(h*w+1):\n                if c[i][j] == '.':\n                    dp[i+1][j+1][k] += dp[i][j+1][k] + dp[i+1][j][k]\n                else:\n                    dp[i+1][j+1][k] += dp[i][j+1][k] + dp[i+1][j][k] - dp[i][j][k]\n                    if k > 0:\n                        dp[i+1][j+1][k-1] += dp[i][j][k]\n\n    print(dp[h][w][k])\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\n# input\nh, w, k = map(int, input().split())\nc = [list(input()) for _ in range(h)]\n\n# dp\ndp = [[0] * w for _ in range(h)]\ndp[0][0] = 1 if c[0][0] == '.' else 0\nfor i in range(1, h):\n    dp[i][0] = dp[i-1][0] + 1 if c[i][0] == '.' else 0\nfor j in range(1, w):\n    dp[0][j] = dp[0][j-1] + 1 if c[0][j] == '.' else 0\nfor i in range(1, h):\n    for j in range(1, w):\n        dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + 1 if c[i][j] == '.' else 0\n\n# count\nans = 0\nfor i in range(h):\n    for j in range(w):\n        for x in range(i, h):\n            for y in range(j, w):\n                if dp[x][y] - dp[i-1][y] - dp[x][j-1] + dp[i-1][j-1] == k:\n                    ans += 1\nprint(ans)", "\n\nimport sys\n\ndef main():\n    h, w, k = map(int, sys.stdin.readline().split())\n    c = [list(sys.stdin.readline().rstrip()) for _ in range(h)]\n\n    ans = 0\n    for i in range(1 << h):\n        for j in range(1 << w):\n            cnt = 0\n            for y in range(h):\n                for x in range(w):\n                    if (i >> y) & 1 or (j >> x) & 1:\n                        if c[y][x] == '#':\n                            cnt += 1\n            if cnt == k:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef count_black_squares(c, h, w, k):\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if c[i][j] == '#':\n                count += 1\n    return count\n\ndef count_black_squares_in_row(c, h, w, k, row):\n    count = 0\n    for j in range(w):\n        if c[row][j] == '#':\n            count += 1\n    return count\n\ndef count_black_squares_in_col(c, h, w, k, col):\n    count = 0\n    for i in range(h):\n        if c[i][col] == '#':\n            count += 1\n    return count\n\ndef count_black_squares_in_row_col(c, h, w, k, row, col):\n    count = 0\n    for i in range(h):\n        if c[i][col] == '#':\n            count += 1\n    for j in range(w):\n        if c[row][j] == '#':\n            count += 1\n    if c[row][col] == '#':\n        count -= 1\n    return count\n\ndef main():\n    h, w, k = map(int, sys.stdin.readline().split())\n    c = []\n    for i in range(h):\n        c.append(list(sys.stdin.readline().strip()))\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if count_black_squares_in_row_col(c, h, w, k, i, j) == k:\n                count += 1\n    for i in range(h):\n        if count_black_squares_in_row(c, h, w, k, i) == k:\n            count += 1\n    for j in range(w):\n        if count_black_squares_in_col(c, h, w, k, j) == k:\n            count += 1\n    if count_black_squares(c, h, w, k) == k:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    H, W, K = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().rstrip() for i in range(H)]\n    print(solve(H, W, K, grid))\n\ndef solve(H, W, K, grid):\n    count = 0\n    for i in range(1 << H):\n        for j in range(1 << W):\n            if check(i, j, H, W, K, grid):\n                count += 1\n    return count\n\ndef check(i, j, H, W, K, grid):\n    c = 0\n    for x in range(H):\n        for y in range(W):\n            if (i >> x) & 1 or (j >> y) & 1:\n                if grid[x][y] == '#':\n                    c += 1\n    return c == K\n\nif __name__ == '__main__':\n    main()"]