2022-04-20 01:35:20.798217 """
You are given two strings $s$ and $t$. Both strings have length $n$ and consist of lowercase Latin letters. The characters in the strings are numbered from $1$ to $n$.

You can successively perform the following move any number of times (possibly, zero):  swap any two adjacent (neighboring) characters of $s$ (i.e. for any $i = \{1, 2, \dots, n - 1\}$ you can swap $s_i$ and $s_{i + 1})$. 

You can't apply a move to the string $t$. The moves are applied to the string $s$ one after another.

Your task is to obtain the string $t$ from the string $s$. Find any way to do it with at most $10^4$ such moves.

You do not have to minimize the number of moves, just find any sequence of moves of length $10^4$ or less to transform $s$ into $t$.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 50$) — the length of strings $s$ and $t$.

The second line of the input contains the string $s$ consisting of $n$ lowercase Latin letters.

The third line of the input contains the string $t$ consisting of $n$ lowercase Latin letters.


-----Output-----

If it is impossible to obtain the string $t$ using moves, print "-1".

Otherwise in the first line print one integer $k$ — the number of moves to transform $s$ to $t$. Note that $k$ must be an integer number between $0$ and $10^4$ inclusive.

In the second line print $k$ integers $c_j$ ($1 \le c_j < n$), where $c_j$ means that on the $j$-th move you swap characters $s_{c_j}$ and $s_{c_j + 1}$.

If you do not need to apply any moves, print a single integer $0$ in the first line and either leave the second line empty or do not print it at all.


-----Examples-----
Input
6
abcdef
abdfec

Output
4
3 5 4 5 

Input
4
abcd
accd

Output
-1



-----Note-----

In the first example the string $s$ changes as follows: "abcdef" $\rightarrow$ "abdcef" $\rightarrow$ "abdcfe" $\rightarrow$ "abdfce" $\rightarrow$ "abdfec".

In the second example there is no way to transform the string $s$ into the string $t$ through any allowed moves.
"""
2022-04-20 01:35:20.798233 --------------------------
2022-04-20 01:35:20.798337 using api key gabby
2022-04-20 01:36:44.494731 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    # Read the input data.\n    n = int(input())\n    s = input()\n    t = input()\n\n    # Initialize the number of moves.\n    moves = 0\n\n    # Initialize the list of moves.\n    moves_list = []\n\n    # Initialize the index of the last swap.\n    last_swap = 0\n\n    # Initialize the index of the current swap.\n    current_swap = 0\n\n    # Initialize the index of the next swap.\n    next_swap = 0\n\n    # Initialize the index of the current character.\n    i = 0\n\n    # Initialize the index of the next character.\n    j = 0\n\n    # Initialize the index of the current character in the target string.\n    k = 0\n\n    # Initialize the index of the next character in the target string.\n    l = 0\n\n    # Initialize the index of the current character in the list of moves.\n    m = 0\n\n    # Initialize the index of the next character in the list of moves.\n    n = 0\n\n    # Initialize the index of the current character in the list of moves.\n    p = 0\n\n    # Initialize the index of the next character in the list of moves.\n    q = 0\n\n    # Initialize the index of the current character in the list of moves.\n    r = 0\n\n    # Initialize the index of the next character in the list of moves.\n    s = 0\n\n    # Initialize the index of the current character in the list of moves.\n    t = 0\n\n    # Initialize the index of the next character in the list of moves.\n    u = 0\n\n    # Initialize the index of the current character in the list of moves.\n    v = 0\n\n    # Initialize the index of the next character in the list of moves.\n    w = 0\n\n    # Initialize the index of the current character in the list of moves.\n    x = 0\n\n    # Initialize the index of the next character in the list of moves.\n    y = 0\n\n    # Initialize the index of the current character in the list of moves.\n    z = 0\n\n    # Initialize the index of the next character in the list of moves.\n    aa = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ab = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ac = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ad = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ae = 0\n\n    # Initialize the index of the current character in the list of moves.\n    af = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ag = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ah = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ai = 0\n\n    # Initialize the index of the current character in the list of moves.\n    aj = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ak = 0\n\n    # Initialize the index of the current character in the list of moves.\n    al = 0\n\n    # Initialize the index of the next character in the list of moves.\n    am = 0\n\n    # Initialize the index of the current character in the list of moves.\n    an = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ao = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ap = 0\n\n    # Initialize the index of the next character in the list of moves.\n    aq = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ar = 0\n\n    # Initialize the index of the next character in the list of moves.\n    as_ = 0\n\n    # Initialize the index of the current character in the list of moves.\n    at = 0\n\n    # Initialize the index of the next character in the list of moves.\n    au = 0\n\n    # Initialize the index of the current character in the list of moves.\n    av = 0\n\n    # Initialize the index of the next character in the list of moves.\n    aw = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ax = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ay = 0\n\n    # Initialize the index of the current character in the list of moves.\n    az = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ba = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bb = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bc = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bd = 0\n\n    # Initialize the index of the next character in the list of moves.\n    be = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bf = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bg = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bh = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bi = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bj = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bk = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bl = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bm = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bn = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bo = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bp = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bq = 0\n\n    # Initialize the index of the current character in the list of moves.\n    br = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bs = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bt = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bu = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bv = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bw = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bx = 0\n\n    # Initialize the index of the next character in the list of moves.\n    by = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bz = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ca = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cb = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cc = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cd = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ce = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cf = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cg = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ch = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ci = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cj = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ck = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cl = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cm = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cn = 0\n\n    # Initialize the index of the next character in the list of moves.\n    co = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cp = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cq = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cr = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cs = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ct = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cu = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cv = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cw = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cx = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cy = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cz = 0\n\n    # Initialize the index of the next character in the list of moves.\n    da = 0\n\n    # Initialize the index of the current character in the list of moves.\n    db = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dc = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dd = 0\n\n    # Initialize the index of the next character in the list of moves.\n    de = 0\n\n    # Initialize the index of the current character in the list of moves.\n    df = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dg = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dh = 0\n\n    # Initialize the index of the next character in the list of moves.\n    di = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dj = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dk = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dl = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dm = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dn = 0\n\n    # Initialize the index of the next character in the list of moves.\n    do_ = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dp = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dq = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dr = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ds = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dt = 0\n\n    # Initialize the index of the next character in the list of moves.\n    du = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dv = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dw = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dx = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dy = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dz = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ea = 0\n\n    # Initialize the index of the current character in the list of moves.\n    eb = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ec = 0\n\n    # Initialize the index of the current character in"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef get_swaps(s, t):\n    swaps = []\n    for i in range(n):\n        if s[i] != t[i]:\n            for j in range(i+1, n):\n                if s[j] == t[i]:\n                    swaps.append(j)\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                    break\n            else:\n                return -1\n    return swaps\n\nswaps = get_swaps(s, t)\nif swaps == -1:\n    print(-1)\nelse:\n    print(len(swaps))\n    print(*swaps)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    1 <= n <= 50\n    1 <= k <= 10^4\n    \"\"\"\n    n = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        print(0)\n    else:\n        print(1)\n        print(1)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    t = input()\n    moves = []\n    for i in range(n):\n        if s[i] != t[i]:\n            for j in range(i+1,n):\n                if s[j] == t[i]:\n                    moves.append(j)\n                    s = s[:j] + s[j-1] + s[j] + s[j+1:]\n                    break\n    if s == t:\n        print(len(moves))\n        print(*moves)\n    else:\n        print(-1)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\nif s == t:\n    print(0)\nelse:\n    print(-1)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    t = input()\n    moves = []\n    i = 0\n    while i < n:\n        if s[i] == t[i]:\n            i += 1\n        else:\n            j = s[i:].find(t[i]) + i\n            while j > i:\n                moves.append(j)\n                s = s[:j-1] + s[j] + s[j-1] + s[j+1:]\n                j -= 1\n    if s == t:\n        print(len(moves))\n        print(*moves)\n    else:\n        print(-1)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    t = input()\n    \n    if s == t:\n        print(0)\n        return\n    \n    moves = 0\n    for i in range(n):\n        if s[i] != t[i]:\n            moves += 1\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                    break\n            else:\n                print(-1)\n                return\n    \n    print(moves)\n    for i in range(n):\n        if s[i] != t[i]:\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    print(i + 1, end=' ')\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                    break\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i):\n    return s[:i] + s[i+1] + s[i] + s[i+2:]\n\ndef solve(s, t):\n    if s == t:\n        return 0\n    for i in range(n-1):\n        if s[i] != t[i]:\n            s = swap(s, i)\n            return 1 + solve(s, t)\n    return -1\n\nprint(solve(s, t))"
    }
  ],
  "created": 1650418520,
  "id": "cmpl-4ytXUTKxcHxwXAhiPraXtVPmVhM6T",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 01:36:44.495244 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    # Read the input data.\n    n = int(input())\n    s = input()\n    t = input()\n\n    # Initialize the number of moves.\n    moves = 0\n\n    # Initialize the list of moves.\n    moves_list = []\n\n    # Initialize the index of the last swap.\n    last_swap = 0\n\n    # Initialize the index of the current swap.\n    current_swap = 0\n\n    # Initialize the index of the next swap.\n    next_swap = 0\n\n    # Initialize the index of the current character.\n    i = 0\n\n    # Initialize the index of the next character.\n    j = 0\n\n    # Initialize the index of the current character in the target string.\n    k = 0\n\n    # Initialize the index of the next character in the target string.\n    l = 0\n\n    # Initialize the index of the current character in the list of moves.\n    m = 0\n\n    # Initialize the index of the next character in the list of moves.\n    n = 0\n\n    # Initialize the index of the current character in the list of moves.\n    p = 0\n\n    # Initialize the index of the next character in the list of moves.\n    q = 0\n\n    # Initialize the index of the current character in the list of moves.\n    r = 0\n\n    # Initialize the index of the next character in the list of moves.\n    s = 0\n\n    # Initialize the index of the current character in the list of moves.\n    t = 0\n\n    # Initialize the index of the next character in the list of moves.\n    u = 0\n\n    # Initialize the index of the current character in the list of moves.\n    v = 0\n\n    # Initialize the index of the next character in the list of moves.\n    w = 0\n\n    # Initialize the index of the current character in the list of moves.\n    x = 0\n\n    # Initialize the index of the next character in the list of moves.\n    y = 0\n\n    # Initialize the index of the current character in the list of moves.\n    z = 0\n\n    # Initialize the index of the next character in the list of moves.\n    aa = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ab = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ac = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ad = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ae = 0\n\n    # Initialize the index of the current character in the list of moves.\n    af = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ag = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ah = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ai = 0\n\n    # Initialize the index of the current character in the list of moves.\n    aj = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ak = 0\n\n    # Initialize the index of the current character in the list of moves.\n    al = 0\n\n    # Initialize the index of the next character in the list of moves.\n    am = 0\n\n    # Initialize the index of the current character in the list of moves.\n    an = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ao = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ap = 0\n\n    # Initialize the index of the next character in the list of moves.\n    aq = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ar = 0\n\n    # Initialize the index of the next character in the list of moves.\n    as_ = 0\n\n    # Initialize the index of the current character in the list of moves.\n    at = 0\n\n    # Initialize the index of the next character in the list of moves.\n    au = 0\n\n    # Initialize the index of the current character in the list of moves.\n    av = 0\n\n    # Initialize the index of the next character in the list of moves.\n    aw = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ax = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ay = 0\n\n    # Initialize the index of the current character in the list of moves.\n    az = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ba = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bb = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bc = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bd = 0\n\n    # Initialize the index of the next character in the list of moves.\n    be = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bf = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bg = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bh = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bi = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bj = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bk = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bl = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bm = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bn = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bo = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bp = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bq = 0\n\n    # Initialize the index of the current character in the list of moves.\n    br = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bs = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bt = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bu = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bv = 0\n\n    # Initialize the index of the next character in the list of moves.\n    bw = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bx = 0\n\n    # Initialize the index of the next character in the list of moves.\n    by = 0\n\n    # Initialize the index of the current character in the list of moves.\n    bz = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ca = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cb = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cc = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cd = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ce = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cf = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cg = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ch = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ci = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cj = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ck = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cl = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cm = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cn = 0\n\n    # Initialize the index of the next character in the list of moves.\n    co = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cp = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cq = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cr = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cs = 0\n\n    # Initialize the index of the current character in the list of moves.\n    ct = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cu = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cv = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cw = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cx = 0\n\n    # Initialize the index of the next character in the list of moves.\n    cy = 0\n\n    # Initialize the index of the current character in the list of moves.\n    cz = 0\n\n    # Initialize the index of the next character in the list of moves.\n    da = 0\n\n    # Initialize the index of the current character in the list of moves.\n    db = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dc = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dd = 0\n\n    # Initialize the index of the next character in the list of moves.\n    de = 0\n\n    # Initialize the index of the current character in the list of moves.\n    df = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dg = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dh = 0\n\n    # Initialize the index of the next character in the list of moves.\n    di = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dj = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dk = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dl = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dm = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dn = 0\n\n    # Initialize the index of the next character in the list of moves.\n    do_ = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dp = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dq = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dr = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ds = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dt = 0\n\n    # Initialize the index of the next character in the list of moves.\n    du = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dv = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dw = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dx = 0\n\n    # Initialize the index of the next character in the list of moves.\n    dy = 0\n\n    # Initialize the index of the current character in the list of moves.\n    dz = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ea = 0\n\n    # Initialize the index of the current character in the list of moves.\n    eb = 0\n\n    # Initialize the index of the next character in the list of moves.\n    ec = 0\n\n    # Initialize the index of the current character in"
}
2022-04-20 01:36:44.495350 REASON length
2022-04-20 01:36:44.495358 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef get_swaps(s, t):\n    swaps = []\n    for i in range(n):\n        if s[i] != t[i]:\n            for j in range(i+1, n):\n                if s[j] == t[i]:\n                    swaps.append(j)\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                    break\n            else:\n                return -1\n    return swaps\n\nswaps = get_swaps(s, t)\nif swaps == -1:\n    print(-1)\nelse:\n    print(len(swaps))\n    print(*swaps)"
}
2022-04-20 01:36:44.495386 REASON stop
2022-04-20 01:36:44.495829 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    1 <= n <= 50\n    1 <= k <= 10^4\n    \"\"\"\n    n = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        print(0)\n    else:\n        print(1)\n        print(1)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:36:44.495889 REASON stop
2022-04-20 01:36:44.496318 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    t = input()\n    moves = []\n    for i in range(n):\n        if s[i] != t[i]:\n            for j in range(i+1,n):\n                if s[j] == t[i]:\n                    moves.append(j)\n                    s = s[:j] + s[j-1] + s[j] + s[j+1:]\n                    break\n    if s == t:\n        print(len(moves))\n        print(*moves)\n    else:\n        print(-1)\n\nmain()"
}
2022-04-20 01:36:44.496374 REASON stop
2022-04-20 01:36:44.523490 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\nt = input()\n\nif s == t:\n    print(0)\nelse:\n    print(-1)"
}
2022-04-20 01:36:44.523615 REASON stop
2022-04-20 01:36:44.544377 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    t = input()\n    moves = []\n    i = 0\n    while i < n:\n        if s[i] == t[i]:\n            i += 1\n        else:\n            j = s[i:].find(t[i]) + i\n            while j > i:\n                moves.append(j)\n                s = s[:j-1] + s[j] + s[j-1] + s[j+1:]\n                j -= 1\n    if s == t:\n        print(len(moves))\n        print(*moves)\n    else:\n        print(-1)\n\nmain()"
}
2022-04-20 01:36:44.544504 REASON stop
2022-04-20 01:36:44.545537 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    t = input()\n    \n    if s == t:\n        print(0)\n        return\n    \n    moves = 0\n    for i in range(n):\n        if s[i] != t[i]:\n            moves += 1\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                    break\n            else:\n                print(-1)\n                return\n    \n    print(moves)\n    for i in range(n):\n        if s[i] != t[i]:\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    print(i + 1, end=' ')\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                    break\n    \nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:36:44.545647 REASON stop
2022-04-20 01:36:44.564543 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\nt = input()\n\ndef swap(s, i):\n    return s[:i] + s[i+1] + s[i] + s[i+2:]\n\ndef solve(s, t):\n    if s == t:\n        return 0\n    for i in range(n-1):\n        if s[i] != t[i]:\n            s = swap(s, i)\n            return 1 + solve(s, t)\n    return -1\n\nprint(solve(s, t))"
}
2022-04-20 01:36:44.564830 REASON stop
