["\n\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a, b, k = map(int, input().split())\n    g = gcd(a, b)\n    print(math.floor(g / math.pow(2, math.floor(math.log2(g)) - k + 1)))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    a, b, k = map(int, sys.stdin.readline().split())\n    nums = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            nums.append(i)\n    print(nums[-k])\n\nif __name__ == '__main__':\n    main()", "\n\na, b, k = map(int, input().split())\n\n# Find the greatest common divisor (gcd) of a and b\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Find the least common multiple (lcm) of a and b\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n# Find all the common divisors of a and b\ndef common_divisors(a, b):\n    gcd_ab = gcd(a, b)\n    divisors = []\n    for i in range(1, gcd_ab + 1):\n        if gcd_ab % i == 0:\n            divisors.append(i)\n    return divisors\n\n# Find the k-th largest common divisor of a and b\ndef kth_largest_common_divisor(a, b, k):\n    divisors = common_divisors(a, b)\n    return divisors[-k]\n\nprint(kth_largest_common_divisor(a, b, k))", "\n\nimport sys\n\ndef main():\n    a, b, k = map(int, sys.stdin.readline().split())\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    print(divisors[-k])\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    a, b, k = map(int, input().split())\n    divisors = []\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    print(divisors[-k])\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    a, b, k = map(int, sys.stdin.readline().split())\n    divisors = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    print(divisors[-k])\n\nif __name__ == '__main__':\n    main()"]