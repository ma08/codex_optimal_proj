2022-04-20 02:01:12.212269 """
Takahashi has many red balls and blue balls. Now, he will place them in a row.
Initially, there is no ball placed.
Takahashi, who is very patient, will do the following operation 10^{100} times:
 - Place A blue balls at the end of the row of balls already placed. Then, place B red balls at the end of the row.
How many blue balls will be there among the first N balls in the row of balls made this way?

-----Constraints-----
 - 1 \leq N \leq 10^{18}
 - A, B \geq 0
 - 0 < A + B \leq 10^{18}
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N A B

-----Output-----
Print the number of blue balls that will be there among the first N balls in the row of balls.

-----Sample Input-----
8 3 4

-----Sample Output-----
4

Let b denote a blue ball, and r denote a red ball. The first eight balls in the row will be bbbrrrrb, among which there are four blue balls.
"""
2022-04-20 02:01:12.212278 --------------------------
2022-04-20 02:01:12.212378 using api key derek
2022-04-20 02:02:34.149922 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, a, b = map(int, input().split())\n\nif n <= a:\n    print(n)\nelse:\n    print(a + (n - a) // (a + b) * a - (n - a) % (a + b) if (n - a) % (a + b) < a else a + (n - a) // (a + b) * a)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    n, a, b = map(int, input().split())\n    g = math.gcd(a, b)\n    a //= g\n    b //= g\n    print(n // (a + b) * a)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    n, a, b = map(int, input().split())\n    if a == b:\n        print(n // (a + b) * a)\n    else:\n        print(math.ceil(n / (a + b)) * min(a, b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn, a, b = map(int, input().split())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef blue_balls(n, a, b):\n    return n // lcm(a, b) * a\n\nprint(min(blue_balls(n, a, b), n))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, a, b = map(int, sys.stdin.readline().split())\n    if n <= a:\n        print(n)\n    else:\n        print(a)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, A, B = map(int, input().split())\n    print(N // (A + B) * A + min(N % (A + B), A))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport math\n\nN, A, B = map(int, input().split())\n\nif A + B == 0:\n    print(0)\nelif A == 0:\n    print(0)\nelif B == 0:\n    print(N)\nelse:\n    # N = A * x + B * y\n    # A * x + B * y = N\n    # x = N / A - B / A * y\n    # x = N / A - B / A * (N / B - A / B * x)\n    # x = N / A - B / A * (N / B - A / B * (N / A - B / A * y))\n    # x = N / A - B / A * (N / B - A / B * (N / A - B / A * (N / B - A / B * x)))\n    # x = N / A - B / A * (N / B - A / B * (N / A - B / A * (N / B - A / B * (N / A - B / A * y))))\n    # x = N / A - B / A * (N / B - A / B * (N / A - B / A * (N / B - A / B * (N / A - B / A * (N / B - A / B * x)))))\n    # ...\n    # x
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, a, b = map(int, sys.stdin.readline().split())\n    if a == 0:\n        print(0)\n        return\n    if b == 0:\n        print(n)\n        return\n    if n <= a:\n        print(n)\n        return\n    if n <= a + b:\n        print(a)\n        return\n    # n > a + b\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b)"
    }
  ],
  "created": 1650420072,
  "id": "cmpl-4ytwWdSJ2tQclvSXh0Atb5IEIzTOI",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 02:02:34.150402 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, a, b = map(int, input().split())\n\nif n <= a:\n    print(n)\nelse:\n    print(a + (n - a) // (a + b) * a - (n - a) % (a + b) if (n - a) % (a + b) < a else a + (n - a) // (a + b) * a)"
}
2022-04-20 02:02:34.150452 REASON stop
2022-04-20 02:02:34.150923 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    n, a, b = map(int, input().split())\n    g = math.gcd(a, b)\n    a //= g\n    b //= g\n    print(n // (a + b) * a)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:02:34.150975 REASON stop
2022-04-20 02:02:34.151432 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    n, a, b = map(int, input().split())\n    if a == b:\n        print(n // (a + b) * a)\n    else:\n        print(math.ceil(n / (a + b)) * min(a, b))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:02:34.151493 REASON stop
2022-04-20 02:02:34.198862 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn, a, b = map(int, input().split())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef blue_balls(n, a, b):\n    return n // lcm(a, b) * a\n\nprint(min(blue_balls(n, a, b), n))"
}
2022-04-20 02:02:34.199006 REASON stop
2022-04-20 02:02:34.199886 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, a, b = map(int, sys.stdin.readline().split())\n    if n <= a:\n        print(n)\n    else:\n        print(a)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:02:34.199978 REASON stop
2022-04-20 02:02:34.201655 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, A, B = map(int, input().split())\n    print(N // (A + B) * A + min(N % (A + B), A))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:02:34.201738 REASON stop
2022-04-20 02:02:34.203294 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport math\n\nN, A, B = map(int, input().split())\n\nif A + B == 0:\n    print(0)\nelif A == 0:\n    print(0)\nelif B == 0:\n    print(N)\nelse:\n    # N = A * x + B * y\n    # A * x + B * y = N\n    # x = N / A - B / A * y\n    # x = N / A - B / A * (N / B - A / B * x)\n    # x = N / A - B / A * (N / B - A / B * (N / A - B / A * y))\n    # x = N / A - B / A * (N / B - A / B * (N / A - B / A * (N / B - A / B * x)))\n    # x = N / A - B / A * (N / B - A / B * (N / A - B / A * (N / B - A / B * (N / A - B / A * y))))\n    # x = N / A - B / A * (N / B - A / B * (N / A - B / A * (N / B - A / B * (N / A - B / A * (N / B - A / B * x)))))\n    # ...\n    # x
}
2022-04-20 02:02:34.203387 REASON length
2022-04-20 02:02:34.203395 7 {
  "finish_reason": "length",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, a, b = map(int, sys.stdin.readline().split())\n    if a == 0:\n        print(0)\n        return\n    if b == 0:\n        print(n)\n        return\n    if n <= a:\n        print(n)\n        return\n    if n <= a + b:\n        print(a)\n        return\n    # n > a + b\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b) * (a + b) + ...\n    # n = a + b + (a + b) * (a + b) + (a + b) * (a + b)"
}
2022-04-20 02:02:34.203580 REASON length
