2022-04-20 02:03:26.806293 """
Polycarp wrote on the board a string $s$ containing only lowercase Latin letters ('a'-'z'). This string is known for you and given in the input.

After that, he erased some letters from the string $s$, and he rewrote the remaining letters in any order. As a result, he got some new string $t$. You have to find it with some additional information.

Suppose that the string $t$ has length $m$ and the characters are numbered from left to right from $1$ to $m$. You are given a sequence of $m$ integers: $b_1, b_2, \ldots, b_m$, where $b_i$ is the sum of the distances $|i-j|$ from the index $i$ to all such indices $j$ that $t_j > t_i$ (consider that 'a'<'b'<...<'z'). In other words, to calculate $b_i$, Polycarp finds all such indices $j$ that the index $j$ contains a letter that is later in the alphabet than $t_i$ and sums all the values $|i-j|$.

For example, if $t$ = "abzb", then:  since $t_1$='a', all other indices contain letters which are later in the alphabet, that is: $b_1=|1-2|+|1-3|+|1-4|=1+2+3=6$;  since $t_2$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_2=|2-3|=1$;  since $t_3$='z', then there are no indexes $j$ such that $t_j>t_i$, thus $b_3=0$;  since $t_4$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_4=|4-3|=1$. 

Thus, if $t$ = "abzb", then $b=[6,1,0,1]$.

Given the string $s$ and the array $b$, find any possible string $t$ for which the following two requirements are fulfilled simultaneously:  $t$ is obtained from $s$ by erasing some letters (possibly zero) and then writing the rest in any order;  the array, constructed from the string $t$ according to the rules above, equals to the array $b$ specified in the input data. 


-----Input-----

The first line contains an integer $q$ ($1 \le q \le 100$) — the number of test cases in the test. Then $q$ test cases follow.

Each test case consists of three lines:  the first line contains string $s$, which has a length from $1$ to $50$ and consists of lowercase English letters;  the second line contains positive integer $m$ ($1 \le m \le |s|$), where $|s|$ is the length of the string $s$, and $m$ is the length of the array $b$;  the third line contains the integers $b_1, b_2, \dots, b_m$ ($0 \le b_i \le 1225$). 

It is guaranteed that in each test case an answer exists.


-----Output-----

Output $q$ lines: the $k$-th of them should contain the answer (string $t$) to the $k$-th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.


-----Example-----
Input
4
abac
3
2 1 0
abc
1
0
abba
3
1 0 1
ecoosdcefr
10
38 13 24 14 11 5 3 24 17 0

Output
aac
b
aba
codeforces



-----Note-----

In the first test case, such strings $t$ are suitable: "aac', "aab".

In the second test case, such trings $t$ are suitable: "a", "b", "c".

In the third test case, only the string $t$ equals to "aba" is suitable, but the character 'b' can be from the second or third position.
"""
2022-04-20 02:03:26.806311 --------------------------
2022-04-20 02:03:26.806415 using api key derek
2022-04-20 02:03:26.919846 in retry 8 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 02:03:31.924972 """
Polycarp wrote on the board a string $s$ containing only lowercase Latin letters ('a'-'z'). This string is known for you and given in the input.

After that, he erased some letters from the string $s$, and he rewrote the remaining letters in any order. As a result, he got some new string $t$. You have to find it with some additional information.

Suppose that the string $t$ has length $m$ and the characters are numbered from left to right from $1$ to $m$. You are given a sequence of $m$ integers: $b_1, b_2, \ldots, b_m$, where $b_i$ is the sum of the distances $|i-j|$ from the index $i$ to all such indices $j$ that $t_j > t_i$ (consider that 'a'<'b'<...<'z'). In other words, to calculate $b_i$, Polycarp finds all such indices $j$ that the index $j$ contains a letter that is later in the alphabet than $t_i$ and sums all the values $|i-j|$.

For example, if $t$ = "abzb", then:  since $t_1$='a', all other indices contain letters which are later in the alphabet, that is: $b_1=|1-2|+|1-3|+|1-4|=1+2+3=6$;  since $t_2$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_2=|2-3|=1$;  since $t_3$='z', then there are no indexes $j$ such that $t_j>t_i$, thus $b_3=0$;  since $t_4$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_4=|4-3|=1$. 

Thus, if $t$ = "abzb", then $b=[6,1,0,1]$.

Given the string $s$ and the array $b$, find any possible string $t$ for which the following two requirements are fulfilled simultaneously:  $t$ is obtained from $s$ by erasing some letters (possibly zero) and then writing the rest in any order;  the array, constructed from the string $t$ according to the rules above, equals to the array $b$ specified in the input data. 


-----Input-----

The first line contains an integer $q$ ($1 \le q \le 100$) — the number of test cases in the test. Then $q$ test cases follow.

Each test case consists of three lines:  the first line contains string $s$, which has a length from $1$ to $50$ and consists of lowercase English letters;  the second line contains positive integer $m$ ($1 \le m \le |s|$), where $|s|$ is the length of the string $s$, and $m$ is the length of the array $b$;  the third line contains the integers $b_1, b_2, \dots, b_m$ ($0 \le b_i \le 1225$). 

It is guaranteed that in each test case an answer exists.


-----Output-----

Output $q$ lines: the $k$-th of them should contain the answer (string $t$) to the $k$-th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.


-----Example-----
Input
4
abac
3
2 1 0
abc
1
0
abba
3
1 0 1
ecoosdcefr
10
38 13 24 14 11 5 3 24 17 0

Output
aac
b
aba
codeforces



-----Note-----

In the first test case, such strings $t$ are suitable: "aac', "aab".

In the second test case, such trings $t$ are suitable: "a", "b", "c".

In the third test case, only the string $t$ equals to "aba" is suitable, but the character 'b' can be from the second or third position.
"""
2022-04-20 02:03:31.925010 --------------------------
2022-04-20 02:03:31.925132 using api key sourya
2022-04-20 02:04:58.963766 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(s, b):\n    n = len(s)\n    m = len(b)\n    if n < m:\n        return None\n    if n == m:\n        if b == [0] * m:\n            return s\n        else:\n            return None\n    if n == m + 1:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        else:\n            return None\n    if n == m + 2:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        else:\n            return None\n    if n == m + 3:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        else:\n            return None\n    if n == m + 4:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        else:\n            return None\n    if n == m + 5:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        else:\n            return None\n    if n == m + 6:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        else:\n            return None\n    if n == m + 7:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        elif b[6] == 0:\n            return s[6] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[7:], b[6:])\n        else:\n            return None\n    if n == m + 8:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        elif b[6] == 0:\n            return s[6] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[7:], b[6:])\n        elif b[7] == 0:\n            return s[7] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[8:], b[7:])\n        else:\n            return None\n    if n == m + 9:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        elif b[6] == 0:\n            return s[6] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[7:], b[6:])\n        elif b[7] == 0:\n            return s[7] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[8:], b[7:])\n        elif b[8] == 0:\n            return s[8] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[9:], b[8:])\n        else:\n            return None\n    if n == m + 10:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        elif b[6] == 0:\n            return s[6] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[7:], b[6:])\n        elif b[7] == 0:\n            return s[7] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[8:], b[7:])\n        elif b[8] == 0:\n            return s[8] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[9:], b[8:])\n        elif b[9] == 0:\n            return s[9] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[10:], b[9:])\n        else:\n            return None\n    if n == m + 11:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        t = []\n        for i in range(m):\n            if b[i] == 0:\n                t.append(s[i])\n            else:\n                t.append(s[i])\n                t.append(s[b[i]-1])\n        print(''.join(t))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(s, m, b):\n    if m == 1:\n        return s[0]\n    if m == 2:\n        if b[0] == 0:\n            return s[0] + s[1]\n        else:\n            return s[1] + s[0]\n    if m == 3:\n        if b[0] == 0:\n            return s[0] + s[1] + s[2]\n        if b[1] == 0:\n            return s[1] + s[0] + s[2]\n        if b[2] == 0:\n            return s[2] + s[0] + s[1]\n        if b[0] == 1:\n            return s[0] + s[2] + s[1]\n        if b[1] == 1:\n            return s[1] + s[2] + s[0]\n        if b[2] == 1:\n            return s[2] + s[1] + s[0]\n        if b[0] == 2:\n            return s[0] + s[1] + s[2]\n        if b[1] == 2:\n            return s[1] + s[0] + s[2]\n        if b[2] == 2:\n            return s[2] + s[0] + s[1]\n    if m == 4:\n        if b[0] == 0:\n            return s[0] + s[1] + s[2] + s[3]\n        if b[1] == 0:\n            return s[1] + s[0] + s[2] + s[3]\n        if b[2] == 0:\n            return s[2] + s[0] + s[1] + s[3]\n        if b[3] == 0:\n            return s[3] + s[0] + s[1] + s[2]\n        if b[0] == 1:\n            return s[0] + s[2] + s[1] + s[3]\n        if b[1] == 1:\n            return s[1] + s[2] + s[0] + s[3]\n        if b[2] == 1:\n            return s[2] + s[1] + s[0] + s[3]\n        if b[3] == 1:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 2:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 2:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 2:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 2:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 3:\n            return s[0] + s[2] + s[1] + s[3]\n        if b[1] == 3:\n            return s[1] + s[2] + s[0] + s[3]\n        if b[2] == 3:\n            return s[2] + s[1] + s[0] + s[3]\n        if b[3] == 3:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 4:\n            return s[0] + s[2] + s[1] + s[3]\n        if b[1] == 4:\n            return s[1] + s[2] + s[0] + s[3]\n        if b[2] == 4:\n            return s[2] + s[1] + s[0] + s[3]\n        if b[3] == 4:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 5:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 5:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 5:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 5:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 6:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 6:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 6:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 6:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 7:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 7:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 7:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 7:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 8:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 8:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 8:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 8:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 9:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 9:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 9:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 9:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 10:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 10:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 10:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 10:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 11:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 11:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 11:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 11:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 12:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 12:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 12:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 12:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 13:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 13:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 13:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 13:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 14:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 14:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 14:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 14:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 15:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 15:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 15:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 15:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 16:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 16:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 16:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 16:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 17:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 17:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 17:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 17:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 18:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 18:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 18:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 18:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 19:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 19:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 19:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 19:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 20"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        if m == 1:\n            print(s[0])\n            continue\n        if m == 2:\n            if b[0] == 0 and b[1] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 3:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 4:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 5:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 6:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 7:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 8:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 9:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 10:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 11:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 12:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 13:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 14:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 15:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 16:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 17:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 18:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 19:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 20:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0 and b[19] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 21:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0 and b[19] == 0 and b[20] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 22:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0 and b[19] == 0 and b[20] == 0 and b[21] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 23:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0 and b[19] == 0 and b[20] == 0 and b[21] == 0 and b[22] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 24:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# def solve(s, b):\n#     s = list(s)\n#     b = list(b)\n#     if len(s) == 1:\n#         return s[0]\n#     if len(s) == 2:\n#         if b[0] == 0:\n#             return s[0] + s[1]\n#         else:\n#             return s[1] + s[0]\n#     for i in range(len(b)):\n#         if b[i] == 0:\n#             continue\n#         for j in range(len(b)):\n#             if b[j] == 0:\n#                 continue\n#             if i == j:\n#                 continue\n#             if b[i] == b[j]:\n#                 if s[i] == s[j]:\n#                     continue\n#                 if s[i] > s[j]:\n#                     s[i], s[j] = s[j], s[i]\n#                     b[i], b[j] = b[j], b[i]\n#                 else:\n#                     continue\n#             if b[i] > b[j]:\n#                 s[i], s[j] = s[j], s[i]\n#                 b[i], b[j] = b[j], b[i]\n#     return \"\".join(s)\n\ndef solve(s, b):\n    s = list(s)\n    b = list(b)\n    if len(s) == 1:\n        return s[0]\n    if len(s) == 2:\n        if b[0] == 0:\n            return s[0] + s[1]\n        else:\n            return s[1] + s[0]\n    for i in range(len(b)):\n        if b[i] == 0:\n            continue\n        for j in range(len(b)):\n            if b[j] == 0:\n                continue\n            if i == j:\n                continue\n            if b[i] == b[j]:\n                if s[i] == s[j]:\n                    continue\n                if s[i] > s[j]:\n                    s[i], s[j] = s[j], s[i]\n                    b[i], b[j] = b[j], b[i]\n                else:\n                    continue\n            if b[i] > b[j]:\n                s[i], s[j] = s[j], s[i]\n                b[i], b[j] = b[j], b[i]\n    return \"\".join(s)\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = [int(x) for x in input().split()]\n        print(solve(s, b))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# SOLUTION\nq = int(input())\n\nfor _ in range(q):\n    s = input()\n    m = int(input())\n    b = list(map(int, input().split()))\n    \n    t = ''\n    for i in range(m):\n        if b[i] == 0:\n            t += s[i]\n        else:\n            t += s[i+b[i]]\n    \n    print(t)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(s, b):\n    n = len(s)\n    t = [''] * n\n    for i in range(n):\n        if b[i] == 0:\n            t[i] = s[i]\n        else:\n            t[i] = '.'\n    for i in range(n):\n        if t[i] == '.':\n            for j in range(n):\n                if s[j] == '.':\n                    continue\n                cnt = 0\n                for k in range(n):\n                    if t[k] != '.' and s[j] < t[k]:\n                        cnt += abs(k - i)\n                if cnt == b[i]:\n                    t[i] = s[j]\n                    s[j] = '.'\n                    break\n    return ''.join(t)\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = list(input())\n        m = int(input())\n        b = list(map(int, input().split()))\n        print(solve(s, b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef get_input():\n    \"\"\"\n    Gets input from stdin and returns a list of strings\n    \"\"\"\n    lines = []\n    for line in sys.stdin:\n        lines.append(line.strip())\n    return lines\n\ndef get_test_cases(lines):\n    \"\"\"\n    Returns a list of test cases\n    \"\"\"\n    test_cases = []\n    for i in range(1, len(lines), 3):\n        test_cases.append((lines[i], lines[i + 1], lines[i + 2]))\n    return test_cases\n\ndef get_test_case_results(test_cases):\n    \"\"\"\n    Returns a list of test case results\n    \"\"\"\n    results = []\n    for test_case in test_cases:\n        results.append(get_test_case_result(test_case))\n    return results\n\ndef get_test_case_result(test_case):\n    \"\"\"\n    Returns the result of a test case\n    \"\"\"\n    s, m, b = test_case\n    b = b.split(\" \")\n    b = [int(i) for i in b]\n    return get_result(s, m, b)\n\ndef get_result(s, m, b):\n    \"\"\"\n    Returns the result of a test case\n    \"\"\"\n    t = []\n    for i in range(len(b)):\n        t.append(get_letter(s, b[i]))\n        s = s.replace(t[i], \"\")\n    return \"\".join(t)\n\ndef get_letter(s, b):\n    \"\"\"\n    Returns a letter from s that is greater than the other letters\n    \"\"\"\n    for i in range(len(s)):\n        if b == get_b(s, i):\n            return s[i]\n    return \"\"\n\ndef get_b(s, i):\n    \"\"\"\n    Returns the value of b for a given s and i\n    \"\"\"\n    b = 0\n    for j in range(len(s)):\n        if s[j] > s[i]:\n            b += abs(i - j)\n    return b\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    lines = get_input()\n    test_cases = get_test_cases(lines)\n    results = get_test_case_results(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650420211,
  "id": "cmpl-4ytylyko1gkHlBgA2hjjzFDyJibrS",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 02:04:58.964307 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(s, b):\n    n = len(s)\n    m = len(b)\n    if n < m:\n        return None\n    if n == m:\n        if b == [0] * m:\n            return s\n        else:\n            return None\n    if n == m + 1:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        else:\n            return None\n    if n == m + 2:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        else:\n            return None\n    if n == m + 3:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        else:\n            return None\n    if n == m + 4:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        else:\n            return None\n    if n == m + 5:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        else:\n            return None\n    if n == m + 6:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        else:\n            return None\n    if n == m + 7:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        elif b[6] == 0:\n            return s[6] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[7:], b[6:])\n        else:\n            return None\n    if n == m + 8:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        elif b[6] == 0:\n            return s[6] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[7:], b[6:])\n        elif b[7] == 0:\n            return s[7] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[8:], b[7:])\n        else:\n            return None\n    if n == m + 9:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        elif b[6] == 0:\n            return s[6] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[7:], b[6:])\n        elif b[7] == 0:\n            return s[7] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[8:], b[7:])\n        elif b[8] == 0:\n            return s[8] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[9:], b[8:])\n        else:\n            return None\n    if n == m + 10:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0] + s[1] + s[2] + s[4:], b[3:])\n        elif b[4] == 0:\n            return s[4] + solve(s[0] + s[1] + s[2] + s[3] + s[5:], b[4:])\n        elif b[5] == 0:\n            return s[5] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[6:], b[5:])\n        elif b[6] == 0:\n            return s[6] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[7:], b[6:])\n        elif b[7] == 0:\n            return s[7] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[8:], b[7:])\n        elif b[8] == 0:\n            return s[8] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[9:], b[8:])\n        elif b[9] == 0:\n            return s[9] + solve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[10:], b[9:])\n        else:\n            return None\n    if n == m + 11:\n        if b[0] == 0:\n            return s[0] + solve(s[1:], b[1:])\n        elif b[1] == 0:\n            return s[1] + solve(s[0] + s[2:], b[1:])\n        elif b[2] == 0:\n            return s[2] + solve(s[0] + s[1] + s[3:], b[2:])\n        elif b[3] == 0:\n            return s[3] + solve(s[0"
}
2022-04-20 02:04:58.964380 REASON length
2022-04-20 02:04:58.964399 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        t = []\n        for i in range(m):\n            if b[i] == 0:\n                t.append(s[i])\n            else:\n                t.append(s[i])\n                t.append(s[b[i]-1])\n        print(''.join(t))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:04:58.964426 REASON stop
2022-04-20 02:04:58.964959 2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(s, m, b):\n    if m == 1:\n        return s[0]\n    if m == 2:\n        if b[0] == 0:\n            return s[0] + s[1]\n        else:\n            return s[1] + s[0]\n    if m == 3:\n        if b[0] == 0:\n            return s[0] + s[1] + s[2]\n        if b[1] == 0:\n            return s[1] + s[0] + s[2]\n        if b[2] == 0:\n            return s[2] + s[0] + s[1]\n        if b[0] == 1:\n            return s[0] + s[2] + s[1]\n        if b[1] == 1:\n            return s[1] + s[2] + s[0]\n        if b[2] == 1:\n            return s[2] + s[1] + s[0]\n        if b[0] == 2:\n            return s[0] + s[1] + s[2]\n        if b[1] == 2:\n            return s[1] + s[0] + s[2]\n        if b[2] == 2:\n            return s[2] + s[0] + s[1]\n    if m == 4:\n        if b[0] == 0:\n            return s[0] + s[1] + s[2] + s[3]\n        if b[1] == 0:\n            return s[1] + s[0] + s[2] + s[3]\n        if b[2] == 0:\n            return s[2] + s[0] + s[1] + s[3]\n        if b[3] == 0:\n            return s[3] + s[0] + s[1] + s[2]\n        if b[0] == 1:\n            return s[0] + s[2] + s[1] + s[3]\n        if b[1] == 1:\n            return s[1] + s[2] + s[0] + s[3]\n        if b[2] == 1:\n            return s[2] + s[1] + s[0] + s[3]\n        if b[3] == 1:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 2:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 2:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 2:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 2:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 3:\n            return s[0] + s[2] + s[1] + s[3]\n        if b[1] == 3:\n            return s[1] + s[2] + s[0] + s[3]\n        if b[2] == 3:\n            return s[2] + s[1] + s[0] + s[3]\n        if b[3] == 3:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 4:\n            return s[0] + s[2] + s[1] + s[3]\n        if b[1] == 4:\n            return s[1] + s[2] + s[0] + s[3]\n        if b[2] == 4:\n            return s[2] + s[1] + s[0] + s[3]\n        if b[3] == 4:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 5:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 5:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 5:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 5:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 6:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 6:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 6:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 6:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 7:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 7:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 7:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 7:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 8:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 8:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 8:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 8:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 9:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 9:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 9:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 9:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 10:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 10:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 10:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 10:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 11:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 11:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 11:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 11:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 12:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 12:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 12:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 12:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 13:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 13:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 13:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 13:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 14:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 14:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 14:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 14:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 15:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 15:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 15:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 15:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 16:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 16:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 16:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 16:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 17:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 17:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 17:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 17:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 18:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 18:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 18:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 18:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 19:\n            return s[0] + s[3] + s[1] + s[2]\n        if b[1] == 19:\n            return s[1] + s[3] + s[0] + s[2]\n        if b[2] == 19:\n            return s[2] + s[3] + s[0] + s[1]\n        if b[3] == 19:\n            return s[3] + s[2] + s[0] + s[1]\n        if b[0] == 20"
}
2022-04-20 02:04:58.965076 REASON length
2022-04-20 02:04:58.965083 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        if m == 1:\n            print(s[0])\n            continue\n        if m == 2:\n            if b[0] == 0 and b[1] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 3:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 4:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 5:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 6:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 7:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 8:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 9:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 10:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 11:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 12:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 13:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 14:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 15:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 16:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 17:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 18:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 19:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 20:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0 and b[19] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 21:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0 and b[19] == 0 and b[20] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 22:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0 and b[19] == 0 and b[20] == 0 and b[21] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 23:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and b[18] == 0 and b[19] == 0 and b[20] == 0 and b[21] == 0 and b[22] == 0:\n                print(s)\n                continue\n            else:\n                print(\"IMPOSSIBLE\")\n                continue\n        if m == 24:\n            if b[0] == 0 and b[1] == 0 and b[2] == 0 and b[3] == 0 and b[4] == 0 and b[5] == 0 and b[6] == 0 and b[7] == 0 and b[8] == 0 and b[9] == 0 and b[10] == 0 and b[11] == 0 and b[12] == 0 and b[13] == 0 and b[14] == 0 and b[15] == 0 and b[16] == 0 and b[17] == 0 and"
}
2022-04-20 02:04:58.965158 REASON length
2022-04-20 02:04:58.965164 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# def solve(s, b):\n#     s = list(s)\n#     b = list(b)\n#     if len(s) == 1:\n#         return s[0]\n#     if len(s) == 2:\n#         if b[0] == 0:\n#             return s[0] + s[1]\n#         else:\n#             return s[1] + s[0]\n#     for i in range(len(b)):\n#         if b[i] == 0:\n#             continue\n#         for j in range(len(b)):\n#             if b[j] == 0:\n#                 continue\n#             if i == j:\n#                 continue\n#             if b[i] == b[j]:\n#                 if s[i] == s[j]:\n#                     continue\n#                 if s[i] > s[j]:\n#                     s[i], s[j] = s[j], s[i]\n#                     b[i], b[j] = b[j], b[i]\n#                 else:\n#                     continue\n#             if b[i] > b[j]:\n#                 s[i], s[j] = s[j], s[i]\n#                 b[i], b[j] = b[j], b[i]\n#     return \"\".join(s)\n\ndef solve(s, b):\n    s = list(s)\n    b = list(b)\n    if len(s) == 1:\n        return s[0]\n    if len(s) == 2:\n        if b[0] == 0:\n            return s[0] + s[1]\n        else:\n            return s[1] + s[0]\n    for i in range(len(b)):\n        if b[i] == 0:\n            continue\n        for j in range(len(b)):\n            if b[j] == 0:\n                continue\n            if i == j:\n                continue\n            if b[i] == b[j]:\n                if s[i] == s[j]:\n                    continue\n                if s[i] > s[j]:\n                    s[i], s[j] = s[j], s[i]\n                    b[i], b[j] = b[j], b[i]\n                else:\n                    continue\n            if b[i] > b[j]:\n                s[i], s[j] = s[j], s[i]\n                b[i], b[j] = b[j], b[i]\n    return \"\".join(s)\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = [int(x) for x in input().split()]\n        print(solve(s, b))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:04:58.965197 REASON stop
2022-04-20 02:04:58.965660 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# SOLUTION\nq = int(input())\n\nfor _ in range(q):\n    s = input()\n    m = int(input())\n    b = list(map(int, input().split()))\n    \n    t = ''\n    for i in range(m):\n        if b[i] == 0:\n            t += s[i]\n        else:\n            t += s[i+b[i]]\n    \n    print(t)"
}
2022-04-20 02:04:58.965722 REASON stop
2022-04-20 02:04:58.992769 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(s, b):\n    n = len(s)\n    t = [''] * n\n    for i in range(n):\n        if b[i] == 0:\n            t[i] = s[i]\n        else:\n            t[i] = '.'\n    for i in range(n):\n        if t[i] == '.':\n            for j in range(n):\n                if s[j] == '.':\n                    continue\n                cnt = 0\n                for k in range(n):\n                    if t[k] != '.' and s[j] < t[k]:\n                        cnt += abs(k - i)\n                if cnt == b[i]:\n                    t[i] = s[j]\n                    s[j] = '.'\n                    break\n    return ''.join(t)\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = list(input())\n        m = int(input())\n        b = list(map(int, input().split()))\n        print(solve(s, b))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:04:58.993001 REASON stop
2022-04-20 02:04:58.993686 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef get_input():\n    \"\"\"\n    Gets input from stdin and returns a list of strings\n    \"\"\"\n    lines = []\n    for line in sys.stdin:\n        lines.append(line.strip())\n    return lines\n\ndef get_test_cases(lines):\n    \"\"\"\n    Returns a list of test cases\n    \"\"\"\n    test_cases = []\n    for i in range(1, len(lines), 3):\n        test_cases.append((lines[i], lines[i + 1], lines[i + 2]))\n    return test_cases\n\ndef get_test_case_results(test_cases):\n    \"\"\"\n    Returns a list of test case results\n    \"\"\"\n    results = []\n    for test_case in test_cases:\n        results.append(get_test_case_result(test_case))\n    return results\n\ndef get_test_case_result(test_case):\n    \"\"\"\n    Returns the result of a test case\n    \"\"\"\n    s, m, b = test_case\n    b = b.split(\" \")\n    b = [int(i) for i in b]\n    return get_result(s, m, b)\n\ndef get_result(s, m, b):\n    \"\"\"\n    Returns the result of a test case\n    \"\"\"\n    t = []\n    for i in range(len(b)):\n        t.append(get_letter(s, b[i]))\n        s = s.replace(t[i], \"\")\n    return \"\".join(t)\n\ndef get_letter(s, b):\n    \"\"\"\n    Returns a letter from s that is greater than the other letters\n    \"\"\"\n    for i in range(len(s)):\n        if b == get_b(s, i):\n            return s[i]\n    return \"\"\n\ndef get_b(s, i):\n    \"\"\"\n    Returns the value of b for a given s and i\n    \"\"\"\n    b = 0\n    for j in range(len(s)):\n        if s[j] > s[i]:\n            b += abs(i - j)\n    return b\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    lines = get_input()\n    test_cases = get_test_cases(lines)\n    results = get_test_case_results(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:04:58.993775 REASON stop
