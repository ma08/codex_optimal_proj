["\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(float, sys.stdin.readline().strip().split())\n        points.append((x, y))\n    points.sort()\n    #print(points)\n    max_dist = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = math.sqrt((points[i][0]-points[j][0])**2 + (points[i][1]-points[j][1])**2)\n            if dist > max_dist:\n                max_dist = dist\n    print(\"{:.3f}\".format(max_dist))\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef main():\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(float, input().split())\n        points.append((x, y))\n    points.sort()\n    print(solve(points))\n\ndef solve(points):\n    n = len(points)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if x1 == x2:\n                continue\n            for k in range(j + 1, n):\n                x3, y3 = points[k]\n                if x1 == x3 or x2 == x3:\n                    continue\n                if (y1 - y2) / (x1 - x2) == (y1 - y3) / (x1 - x3):\n                    continue\n                ans = max(ans, area(points[i], points[j], points[k]))\n    return ans\n\ndef area(p1, p2, p3):\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append(list(map(float, input().split())))\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    print(calculate_angle(points))\n\ndef calculate_angle(points):\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[-1]\n    a = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    b = math.sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2)\n    c = math.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2)\n    return math.degrees(math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b)))\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef get_angle(x1, y1, x2, y2):\n    if x1 == x2:\n        if y1 > y2:\n            return math.pi/2\n        else:\n            return 3*math.pi/2\n    else:\n        if x1 > x2:\n            return math.atan((y1-y2)/(x1-x2)) + math.pi\n        else:\n            return math.atan((y1-y2)/(x1-x2))\n\ndef get_angle_diff(a1, a2):\n    if a1 >= a2:\n        return a1 - a2\n    else:\n        return 2*math.pi - a2 + a1\n\ndef get_max_angle(x, y):\n    max_angle = 0\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            angle = get_angle_diff(get_angle(x[i], y[i], x[j], y[j]), get_angle(x[i], y[i], x[i+1], y[i+1]))\n            if angle > max_angle:\n                max_angle = angle\n    return max_angle\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        xi, yi = map(float, input().split())\n        x.append(xi)\n        y.append(yi)\n    x.append(x[0])\n    y.append(y[0])\n    print(round(get_max_angle(x, y), 3))", "\n\ndef main():\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(float, input().split())\n        points.append([x, y])\n    points.sort()\n    min_angle = math.pi\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                angle = math.acos((points[j][0] - points[i][0]) * (points[k][0] - points[i][0]) + (points[j][1] - points[i][1]) * (points[k][1] - points[i][1]))\n                if angle < min_angle:\n                    min_angle = angle\n    print(min_angle)\n\nif __name__ == '__main__':\n    main()"]