["\n\nimport sys\n\ndef main():\n    n, h, l, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # dp[i][j] = number of good times if Vova goes to sleep at time j after i-th sleep\n    dp = [[0 for j in range(h)] for i in range(n)]\n\n    # base case\n    for i in range(l, r+1):\n        dp[0][i] = 1\n\n    for i in range(1, n):\n        for j in range(h):\n            if j < a[i]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][(j-a[i]+1)%h])\n\n    # print(dp)\n    print(max(dp[n-1]))\n\nif __name__ == '__main__':\n    main()", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ns = 0\nc = 0\n\nfor i in range(n):\n    s += a[i]\n    if l <= s % h <= r:\n        c += 1\n    if s % h < l:\n        s -= 1\n\nprint(c)", "\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i][j] = the maximum number of good sleeping times Vova can obtain if he acts optimally and the time is j\n    dp = [[0 for j in range(h)] for i in range(n)]\n\n    # base case\n    dp[0][a[0] - 1] = 1\n    dp[0][a[0]] = 1\n\n    for i in range(1, n):\n        for j in range(h):\n            if dp[i - 1][j] == 0:\n                continue\n\n            # if the time is j, then the next time is (j + a[i] - 1) % h\n            next_time = (j + a[i] - 1) % h\n            if l <= next_time <= r:\n                dp[i][next_time] = max(dp[i][next_time], dp[i - 1][j] + 1)\n            else:\n                dp[i][next_time] = max(dp[i][next_time], dp[i - 1][j])\n\n            # if the time is j, then the next time is (j + a[i]) % h\n            next_time = (j + a[i]) % h\n            if l <= next_time <= r:\n                dp[i][next_time] = max(dp[i][next_time], dp[i - 1][j] + 1)\n            else:\n                dp[i][next_time] = max(dp[i][next_time], dp[i - 1][j])\n\n    print(max(dp[n - 1]))\n\n\nif __name__ == '__main__':\n    main()", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if l <= (a[i] - 1) % h <= r:\n        ans += 1\n    elif l <= a[i] % h <= r:\n        ans += 1\n\nprint(ans)", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for i in range(h)] for j in range(n)]\n\ndp[0][a[0] - 1] = 1\ndp[0][a[0]] = 1\n\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i]])\n        if j - a[i] - 1 >= 0:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i] - 1])\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)", "\n\nimport sys\n\ndef main():\n    n, h, l, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    dp = [[0] * h for _ in range(n)]\n    dp[0][a[0] - 1] = 1\n    dp[0][a[0]] = 1\n    for i in range(1, n):\n        for j in range(h):\n            if j + a[i] < h:\n                dp[i][j + a[i]] = max(dp[i][j + a[i]], dp[i - 1][j] + 1)\n            if j + a[i] - 1 < h:\n                dp[i][j + a[i] - 1] = max(dp[i][j + a[i] - 1], dp[i - 1][j] + 1)\n    print(max(dp[n - 1][l:r + 1]))\n\nif __name__ == '__main__':\n    main()", "\n\n# Solution\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * h\ndp[0] = 1\n\nfor i in range(n):\n    new_dp = [0] * h\n    for j in range(h):\n        new_dp[(j + a[i]) % h] += dp[j]\n    dp = new_dp\n\nans = 0\nfor i in range(l, r + 1):\n    ans += dp[i]\nprint(ans)", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = 1 if l <= a[0] <= r else 0\ndp[0][1] = 1 if l <= a[0] - 1 <= r else 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0] + 1 if l <= a[i] <= r else 0, dp[i - 1][1] + 1 if l <= a[i] <= r else 0)\n    dp[i][1] = max(dp[i - 1][0] + 1 if l <= a[i] - 1 <= r else 0, dp[i - 1][1] + 1 if l <= a[i] - 1 <= r else 0)\n\nprint(max(dp[-1]))"]