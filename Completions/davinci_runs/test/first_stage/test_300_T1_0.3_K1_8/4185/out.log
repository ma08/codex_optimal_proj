2022-04-20 03:06:20.964552 """
You are given a rectangular matrix of size $n \times m$ consisting of integers from $1$ to $2 \cdot 10^5$.

In one move, you can:  choose any element of the matrix and change its value to any integer between $1$ and $n \cdot m$, inclusive;  take any column and shift it one cell up cyclically (see the example of such cyclic shift below). 

A cyclic shift is an operation such that you choose some $j$ ($1 \le j \le m$) and set $a_{1, j} := a_{2, j}, a_{2, j} := a_{3, j}, \dots, a_{n, j} := a_{1, j}$ simultaneously. [Image] Example of cyclic shift of the first column 

You want to perform the minimum number of moves to make this matrix look like this: $\left. \begin{array}{|c c c c|} \hline 1 & {2} & {\ldots} & {m} \\{m + 1} & {m + 2} & {\ldots} & {2m} \\{\vdots} & {\vdots} & {\ddots} & {\vdots} \\{(n - 1) m + 1} & {(n - 1) m + 2} & {\ldots} & {nm} \\ \hline \end{array} \right.$ 

In other words, the goal is to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \dots, a_{n, m} = n \cdot m$ (i.e. $a_{i, j} = (i - 1) \cdot m + j$) with the minimum number of moves performed.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n, m \le 2 \cdot 10^5, n \cdot m \le 2 \cdot 10^5$) — the size of the matrix.

The next $n$ lines contain $m$ integers each. The number at the line $i$ and position $j$ is $a_{i, j}$ ($1 \le a_{i, j} \le 2 \cdot 10^5$).


-----Output-----

Print one integer — the minimum number of moves required to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \dots, a_{n, m} = n \cdot m$ ($a_{i, j} = (i - 1)m + j$).


-----Examples-----
Input
3 3
3 2 1
1 2 3
4 5 6

Output
6

Input
4 3
1 2 3
4 5 6
7 8 9
10 11 12

Output
0

Input
3 4
1 6 3 4
5 10 7 8
9 2 11 12

Output
2



-----Note-----

In the first example, you can set $a_{1, 1} := 7, a_{1, 2} := 8$ and $a_{1, 3} := 9$ then shift the first, the second and the third columns cyclically, so the answer is $6$. It can be shown that you cannot achieve a better answer.

In the second example, the matrix is already good so the answer is $0$.

In the third example, it is enough to shift the second column cyclically twice to obtain a good matrix, so the answer is $2$.
"""
2022-04-20 03:06:20.964589 --------------------------
2022-04-20 03:06:20.964772 using api key sourya
2022-04-20 03:06:21.136375 in retry 8 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 03:06:26.137124 """
You are given a rectangular matrix of size $n \times m$ consisting of integers from $1$ to $2 \cdot 10^5$.

In one move, you can:  choose any element of the matrix and change its value to any integer between $1$ and $n \cdot m$, inclusive;  take any column and shift it one cell up cyclically (see the example of such cyclic shift below). 

A cyclic shift is an operation such that you choose some $j$ ($1 \le j \le m$) and set $a_{1, j} := a_{2, j}, a_{2, j} := a_{3, j}, \dots, a_{n, j} := a_{1, j}$ simultaneously. [Image] Example of cyclic shift of the first column 

You want to perform the minimum number of moves to make this matrix look like this: $\left. \begin{array}{|c c c c|} \hline 1 & {2} & {\ldots} & {m} \\{m + 1} & {m + 2} & {\ldots} & {2m} \\{\vdots} & {\vdots} & {\ddots} & {\vdots} \\{(n - 1) m + 1} & {(n - 1) m + 2} & {\ldots} & {nm} \\ \hline \end{array} \right.$ 

In other words, the goal is to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \dots, a_{n, m} = n \cdot m$ (i.e. $a_{i, j} = (i - 1) \cdot m + j$) with the minimum number of moves performed.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n, m \le 2 \cdot 10^5, n \cdot m \le 2 \cdot 10^5$) — the size of the matrix.

The next $n$ lines contain $m$ integers each. The number at the line $i$ and position $j$ is $a_{i, j}$ ($1 \le a_{i, j} \le 2 \cdot 10^5$).


-----Output-----

Print one integer — the minimum number of moves required to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \dots, a_{n, m} = n \cdot m$ ($a_{i, j} = (i - 1)m + j$).


-----Examples-----
Input
3 3
3 2 1
1 2 3
4 5 6

Output
6

Input
4 3
1 2 3
4 5 6
7 8 9
10 11 12

Output
0

Input
3 4
1 6 3 4
5 10 7 8
9 2 11 12

Output
2



-----Note-----

In the first example, you can set $a_{1, 1} := 7, a_{1, 2} := 8$ and $a_{1, 3} := 9$ then shift the first, the second and the third columns cyclically, so the answer is $6$. It can be shown that you cannot achieve a better answer.

In the second example, the matrix is already good so the answer is $0$.

In the third example, it is enough to shift the second column cyclically twice to obtain a good matrix, so the answer is $2$.
"""
2022-04-20 03:06:26.137179 --------------------------
2022-04-20 03:06:26.137350 using api key derek
2022-04-20 03:07:50.708806 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != (i * m + j + 1):\n                cnt += 1\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += min(abs(a[i][j] - (i * m + j + 1)), abs(a[i][j] - (i * m + j + 1) + n * m))\n    print(ans // 2)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(x) for x in sys.stdin.readline().split()])\n    #print(matrix)\n    #print(n, m)\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i*m+j+1):\n                moves += 1\n                for k in range(n):\n                    if matrix[k][j] == (i*m+j+1):\n                        matrix[k][j] = matrix[i][j]\n                        matrix[i][j] = (i*m+j+1)\n                        break\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    matrix = [[int(x) for x in sys.stdin.readline().split()] for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m + j + 1):\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != (i * m + j + 1):\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == (i * m + j + 1):\n                continue\n            for k in range(i, n):\n                if a[k][j] == (i * m + j + 1):\n                    for l in range(k, i, -1):\n                        a[l][j], a[l - 1][j] = a[l - 1][j], a[l][j]\n                        ans += 1\n                    break\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\n\nmatrix = [list(map(int, input().split())) for _ in range(n)]\n\n# print(matrix)\n\n# print(matrix[0])\n# print(matrix[1])\n# print(matrix[2])\n# print(matrix[3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print("
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, sys.stdin.readline().split())))\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == (i * m + j + 1):\n                continue\n            for k in range(i, n):\n                if matrix[k][j] == (i * m + j + 1):\n                    for l in range(k, i, -1):\n                        matrix[l][j], matrix[l-1][j] = matrix[l-1][j], matrix[l][j]\n                        ans += 1\n                    break\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650423986,
  "id": "cmpl-4yuxetlaSWyUm0TJ57JIOIPDo3OVz",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:07:50.709490 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != (i * m + j + 1):\n                cnt += 1\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:07:50.709584 REASON stop
2022-04-20 03:07:50.710337 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += min(abs(a[i][j] - (i * m + j + 1)), abs(a[i][j] - (i * m + j + 1) + n * m))\n    print(ans // 2)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:07:50.710418 REASON stop
2022-04-20 03:07:50.711049 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(x) for x in sys.stdin.readline().split()])\n    #print(matrix)\n    #print(n, m)\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i*m+j+1):\n                moves += 1\n                for k in range(n):\n                    if matrix[k][j] == (i*m+j+1):\n                        matrix[k][j] = matrix[i][j]\n                        matrix[i][j] = (i*m+j+1)\n                        break\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:07:50.711133 REASON stop
2022-04-20 03:07:50.724646 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    matrix = [[int(x) for x in sys.stdin.readline().split()] for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m + j + 1):\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:07:50.724833 REASON stop
2022-04-20 03:07:50.763339 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != (i * m + j + 1):\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:07:50.763506 REASON stop
2022-04-20 03:07:50.764797 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == (i * m + j + 1):\n                continue\n            for k in range(i, n):\n                if a[k][j] == (i * m + j + 1):\n                    for l in range(k, i, -1):\n                        a[l][j], a[l - 1][j] = a[l - 1][j], a[l][j]\n                        ans += 1\n                    break\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:07:50.764939 REASON stop
2022-04-20 03:07:50.765668 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\n\nmatrix = [list(map(int, input().split())) for _ in range(n)]\n\n# print(matrix)\n\n# print(matrix[0])\n# print(matrix[1])\n# print(matrix[2])\n# print(matrix[3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print(matrix[2][2])\n# print(matrix[3][2])\n\n# print(matrix[0][3])\n# print(matrix[1][3])\n# print(matrix[2][3])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[0][1])\n# print(matrix[0][2])\n# print(matrix[0][3])\n\n# print(matrix[1][0])\n# print(matrix[1][1])\n# print(matrix[1][2])\n# print(matrix[1][3])\n\n# print(matrix[2][0])\n# print(matrix[2][1])\n# print(matrix[2][2])\n# print(matrix[2][3])\n\n# print(matrix[3][0])\n# print(matrix[3][1])\n# print(matrix[3][2])\n# print(matrix[3][3])\n\n# print(matrix[0][0])\n# print(matrix[1][0])\n# print(matrix[2][0])\n# print(matrix[3][0])\n\n# print(matrix[0][1])\n# print(matrix[1][1])\n# print(matrix[2][1])\n# print(matrix[3][1])\n\n# print(matrix[0][2])\n# print(matrix[1][2])\n# print("
}
2022-04-20 03:07:50.765970 REASON length
2022-04-20 03:07:50.765986 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, sys.stdin.readline().split())))\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == (i * m + j + 1):\n                continue\n            for k in range(i, n):\n                if matrix[k][j] == (i * m + j + 1):\n                    for l in range(k, i, -1):\n                        matrix[l][j], matrix[l-1][j] = matrix[l-1][j], matrix[l][j]\n                        ans += 1\n                    break\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:07:50.766047 REASON stop
