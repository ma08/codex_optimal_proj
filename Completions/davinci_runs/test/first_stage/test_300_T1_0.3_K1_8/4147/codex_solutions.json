["\n\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(n)]\n\n    # dp[i][j][k] = i\u756a\u76ee\u307e\u3067\u306e\u6728\u3092\u4f7f\u3063\u3066\u3001\u9577\u3055j\u306e\u6728\u3092\u4f5c\u308b\u306e\u306b\u5fc5\u8981\u306aMP\u306e\u6700\u5c0f\u5024\n    dp = [[[float('inf') for _ in range(a+1)] for _ in range(b+1)] for _ in range(c+1)]\n    dp[0][0][0] = 0\n\n    for i in range(n):\n        for j in range(a+1):\n            for k in range(b+1):\n                for l in range(c+1):\n                    if dp[j][k][l] != float('inf'):\n                        # \u62e1\u5f35\u9b54\u6cd5\n                        if j+l[i] <= a:\n                            dp[j+l[i]][k][l] = min(dp[j+l[i]][k][l], dp[j][k][l] + 1)\n                        # \u77ed\u7e2e\u9b54\u6cd5\n                        if j+l[i]-1 <= a:\n                            dp[j+l[i]-1][k][l] = min(dp[j+l[i]-1][k][l], dp[j][k][l] + 1)\n                        # \u5408\u6210\u9b54\u6cd5\n                        if j+k+l[i] <= a:\n                            dp[j+k+l[i]][k][l] = min(dp[j+k+l[i]][k][l], dp[j][k][l] + 10)\n                        if j+k+l[i]-1 <= a:\n                            dp[j+k+l[i]-1][k][l] = min(dp[j+k+l[i]-1][k][l], dp[j][k][l] + 10)\n                        if j+l[i]+k-1 <= a:\n                            dp[j+l[i]+k-1][k][l] = min(dp[j+l[i]+k-1][k][l], dp[j][k][l] + 10)\n                        if j+l[i]+k-2 <= a:\n                            dp[j+l[i]+k-2][k][l] = min(dp[j+l[i]+k-2][k][l], dp[j][k][l] + 10)\n\n    print(dp[a][b][c])\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nN, A, B, C = map(int, lines[0].split())\nl = list(map(int, lines[1:N+1]))\n\ndef dfs(i, a, b, c, mp):\n    if i == N:\n        if a == 0 and b == 0 and c == 0:\n            return mp\n        else:\n            return float('inf')\n    res = float('inf')\n    # Extension Magic\n    res = min(res, dfs(i+1, a-l[i], b, c, mp+1))\n    # Shortening Magic\n    if l[i] >= 2:\n        res = min(res, dfs(i+1, a, b, c, mp+1))\n    # Composition Magic\n    if a >= l[i]:\n        res = min(res, dfs(i+1, a-l[i], b, c, mp+10))\n    if b >= l[i]:\n        res = min(res, dfs(i+1, a, b-l[i], c, mp+10))\n    if c >= l[i]:\n        res = min(res, dfs(i+1, a, b, c-l[i], mp+10))\n    return res\n\nprint(dfs(0, A, B, C, 0))", "\n\nfrom itertools import combinations\n\ndef main():\n    N, A, B, C = map(int, input().split())\n    l = [int(input()) for i in range(N)]\n    ans = float('inf')\n    for a, b, c in combinations(l, 3):\n        mp = 0\n        if a < A:\n            mp += A - a\n        if b < B:\n            mp += B - b\n        if c < C:\n            mp += C - c\n        ans = min(ans, mp)\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    num_bamboos, A, B, C = map(int, input().split())\n    bamboos = []\n    for i in range(num_bamboos):\n        bamboos.append(int(input()))\n    bamboos.sort()\n    bamboos.reverse()\n    dp = [[[0 for k in range(C+1)] for j in range(B+1)] for i in range(A+1)]\n    for i in range(A+1):\n        for j in range(B+1):\n            for k in range(C+1):\n                if i == 0 and j == 0 and k == 0:\n                    dp[i][j][k] = 0\n                else:\n                    dp[i][j][k] = float(\"inf\")\n                    if i > 0:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i-1][j][k] + 1)\n                    if j > 0:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i][j-1][k] + 1)\n                    if k > 0:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i][j][k-1] + 1)\n                    if i > 0 and j > 0:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i-1][j-1][k] + 10)\n                    if i > 0 and k > 0:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i-1][j][k-1] + 10)\n                    if j > 0 and k > 0:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i][j-1][k-1] + 10)\n                    for l in range(num_bamboos):\n                        if i > 0 and bamboos[l] >= i:\n                            dp[i][j][k] = min(dp[i][j][k], dp[i-bamboos[l]][j][k])\n                        if j > 0 and bamboos[l] >= j:\n                            dp[i][j][k] = min(dp[i][j][k], dp[i][j-bamboos[l]][k])\n                        if k > 0 and bamboos[l] >= k:\n                            dp[i][j][k] = min(dp[i][j][k], dp[i][j][k-bamboos[l]])\n    print(dp[A][B][C])\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    N, A, B, C = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(N)]\n    l.sort(reverse=True)\n    l.append(0)\n    l.append(0)\n    dp = [[[float('inf')] * (N+2) for _ in range(N+2)] for _ in range(N+2)]\n    dp[0][0][0] = 0\n    for i in range(N+1):\n        for j in range(N+1):\n            for k in range(N+1):\n                if i < N and dp[i][j][k] != float('inf'):\n                    dp[i+1][j][k] = min(dp[i+1][j][k], dp[i][j][k] + 10)\n                    dp[i+1][j+1][k] = min(dp[i+1][j+1][k], dp[i][j][k] + 1)\n                    dp[i+1][j][k+1] = min(dp[i+1][j][k+1], dp[i][j][k] + 1)\n                if j < N and dp[i][j][k] != float('inf'):\n                    dp[i][j+1][k] = min(dp[i][j+1][k], dp[i][j][k] + 10)\n                if k < N and dp[i][j][k] != float('inf'):\n                    dp[i][j][k+1] = min(dp[i][j][k+1], dp[i][j][k] + 10)\n    ans = float('inf')\n    for i in range(N+1):\n        for j in range(N+1):\n            for k in range(N+1):\n                if l[i] + l[j] + l[k] == A + B + C and dp[i][j][k] != float('inf'):\n                    ans = min(ans, dp[i][j][k])\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = list(map(int, sys.stdin.readlines()))\n    l.sort()\n    l.reverse()\n    ans = 0\n    for i in range(n):\n        if l[i] == a:\n            a = -1\n        elif l[i] == b:\n            b = -1\n        elif l[i] == c:\n            c = -1\n        elif l[i] > a:\n            ans += l[i] - a\n            a = -1\n        elif l[i] > b:\n            ans += l[i] - b\n            b = -1\n        elif l[i] > c:\n            ans += l[i] - c\n            c = -1\n        if a == -1 and b == -1 and c == -1:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    # read input\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = [int(sys.stdin.readline()) for _ in range(n)]\n\n    # calculate min cost\n    cost = 0\n    if a in l:\n        l.remove(a)\n    else:\n        cost += 10\n        if a-1 in l:\n            l.remove(a-1)\n            cost += 1\n        else:\n            cost += 2\n    if b in l:\n        l.remove(b)\n    else:\n        cost += 10\n        if b-1 in l:\n            l.remove(b-1)\n            cost += 1\n        else:\n            cost += 2\n    if c in l:\n        l.remove(c)\n    else:\n        cost += 10\n        if c-1 in l:\n            l.remove(c-1)\n            cost += 1\n        else:\n            cost += 2\n    print(cost)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, a, b, c = map(int, sys.stdin.readline().split())\n    l = []\n    for i in range(n):\n        l.append(int(sys.stdin.readline()))\n    l.sort()\n    l.reverse()\n    ans = 0\n    while len(l) > 0:\n        if l[0] == a:\n            l.pop(0)\n            a = b\n            b = c\n            c = 0\n        elif l[0] > a:\n            l[0] -= 1\n            ans += 1\n        elif l[0] == b:\n            l.pop(0)\n            b = c\n            c = 0\n        elif l[0] > b:\n            l[0] -= 1\n            ans += 1\n        elif l[0] == c:\n            l.pop(0)\n            c = 0\n        elif l[0] > c:\n            l[0] -= 1\n            ans += 1\n        elif l[0] < c:\n            if len(l) < 2:\n                print(-1)\n                return\n            else:\n                if l[0] + l[1] == a:\n                    l.pop(0)\n                    l.pop(0)\n                    a = b\n                    b = c\n                    c = 0\n                elif l[0] + l[1] > a:\n                    l[0] += 1\n                    l[1] -= 1\n                    ans += 1\n                elif l[0] + l[1] == b:\n                    l.pop(0)\n                    l.pop(0)\n                    b = c\n                    c = 0\n                elif l[0] + l[1] > b:\n                    l[0] += 1\n                    l[1] -= 1\n                    ans += 1\n                elif l[0] + l[1] == c:\n                    l.pop(0)\n                    l.pop(0)\n                    c = 0\n                elif l[0] + l[1] > c:\n                    l[0] += 1\n                    l[1] -= 1\n                    ans += 1\n                elif l[0] + l[1] < c:\n                    l.pop(0)\n                    l.pop(0)\n                    ans += 10\n    print(ans)\n\nif __name__ == '__main__':\n    main()"]