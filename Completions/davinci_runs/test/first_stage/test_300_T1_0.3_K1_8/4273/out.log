2022-04-20 03:51:55.509135 """
There are N people. The name of the i-th person is S_i.
We would like to choose three people so that the following conditions are met:
 - The name of every chosen person begins with M, A, R, C or H.
 - There are no multiple people whose names begin with the same letter.
How many such ways are there to choose three people, disregarding order?
Note that the answer may not fit into a 32-bit integer type.

-----Constraints-----
 - 1 \leq N \leq 10^5
 - S_i consists of uppercase English letters.
 - 1 \leq |S_i| \leq 10
 - S_i \neq S_j (i \neq j)

-----Input-----
Input is given from Standard Input in the following format:
N
S_1
:
S_N

-----Output-----
If there are x ways to choose three people so that the given conditions are met, print x.

-----Sample Input-----
5
MASHIKE
RUMOI
OBIRA
HABORO
HOROKANAI

-----Sample Output-----
2

We can choose three people with the following names:
 - MASHIKE, RUMOI, HABORO
 - MASHIKE, RUMOI, HOROKANAI
Thus, we have two ways.
"""
2022-04-20 03:51:55.509155 --------------------------
2022-04-20 03:51:55.509301 using api key derek
2022-04-20 03:51:55.673399 in retry 8 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 03:52:00.678821 """
There are N people. The name of the i-th person is S_i.
We would like to choose three people so that the following conditions are met:
 - The name of every chosen person begins with M, A, R, C or H.
 - There are no multiple people whose names begin with the same letter.
How many such ways are there to choose three people, disregarding order?
Note that the answer may not fit into a 32-bit integer type.

-----Constraints-----
 - 1 \leq N \leq 10^5
 - S_i consists of uppercase English letters.
 - 1 \leq |S_i| \leq 10
 - S_i \neq S_j (i \neq j)

-----Input-----
Input is given from Standard Input in the following format:
N
S_1
:
S_N

-----Output-----
If there are x ways to choose three people so that the given conditions are met, print x.

-----Sample Input-----
5
MASHIKE
RUMOI
OBIRA
HABORO
HOROKANAI

-----Sample Output-----
2

We can choose three people with the following names:
 - MASHIKE, RUMOI, HABORO
 - MASHIKE, RUMOI, HOROKANAI
Thus, we have two ways.
"""
2022-04-20 03:52:00.678864 --------------------------
2022-04-20 03:52:00.679034 using api key derek
2022-04-20 03:52:00.716081 in retry 7 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-20 03:52:10.726513 """
There are N people. The name of the i-th person is S_i.
We would like to choose three people so that the following conditions are met:
 - The name of every chosen person begins with M, A, R, C or H.
 - There are no multiple people whose names begin with the same letter.
How many such ways are there to choose three people, disregarding order?
Note that the answer may not fit into a 32-bit integer type.

-----Constraints-----
 - 1 \leq N \leq 10^5
 - S_i consists of uppercase English letters.
 - 1 \leq |S_i| \leq 10
 - S_i \neq S_j (i \neq j)

-----Input-----
Input is given from Standard Input in the following format:
N
S_1
:
S_N

-----Output-----
If there are x ways to choose three people so that the given conditions are met, print x.

-----Sample Input-----
5
MASHIKE
RUMOI
OBIRA
HABORO
HOROKANAI

-----Sample Output-----
2

We can choose three people with the following names:
 - MASHIKE, RUMOI, HABORO
 - MASHIKE, RUMOI, HOROKANAI
Thus, we have two ways.
"""
2022-04-20 03:52:10.726559 --------------------------
2022-04-20 03:52:10.726741 using api key sourya
2022-04-20 03:52:10.764162 in retry 6 20 <class 'Exception'>, Retrying in 20 seconds...
2022-04-20 03:52:30.781076 """
There are N people. The name of the i-th person is S_i.
We would like to choose three people so that the following conditions are met:
 - The name of every chosen person begins with M, A, R, C or H.
 - There are no multiple people whose names begin with the same letter.
How many such ways are there to choose three people, disregarding order?
Note that the answer may not fit into a 32-bit integer type.

-----Constraints-----
 - 1 \leq N \leq 10^5
 - S_i consists of uppercase English letters.
 - 1 \leq |S_i| \leq 10
 - S_i \neq S_j (i \neq j)

-----Input-----
Input is given from Standard Input in the following format:
N
S_1
:
S_N

-----Output-----
If there are x ways to choose three people so that the given conditions are met, print x.

-----Sample Input-----
5
MASHIKE
RUMOI
OBIRA
HABORO
HOROKANAI

-----Sample Output-----
2

We can choose three people with the following names:
 - MASHIKE, RUMOI, HABORO
 - MASHIKE, RUMOI, HOROKANAI
Thus, we have two ways.
"""
2022-04-20 03:52:30.781118 --------------------------
2022-04-20 03:52:30.781286 using api key gabby
2022-04-20 03:53:14.450541 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# \u554f\u984c\u6587\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u540d\u524d\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\nn = int(input())\nnames = []\nfor i in range(n):\n    names.append(input())\n\n# \u540d\u524d\u306e\u30ea\u30b9\u30c8\u3092\u3001\u5404\u6587\u5b57\u3067\u5206\u5272\u3057\u3066\u3001\u5404\u6587\u5b57\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\nm = []\na = []\nr = []\nc = []\nh = []\nfor name in names:\n    if name[0] == 'M':\n        m.append(name)\n    elif name[0] == 'A':\n        a.append(name)\n    elif name[0] == 'R':\n        r.append(name)\n    elif name[0] == 'C':\n        c.append(name)\n    elif name[0] == 'H':\n        h.append(name)\n\n# \u5404\u6587\u5b57\u306e\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092\u8a08\u7b97\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u8a08\u7b97\u3059\u308b\nm_len = len(m)\na_len = len(a)\nr_len = len(r)\nc_len = len(c)\nh_len = len(h)\n\nans = 0\nif m_len >= 1 and a_len >= 1 and r_len >= 1:\n    ans += m_len * a_len * r_len\nif m_len >= 1 and a_len >= 1 and c_len >= 1:\n    ans += m_len * a_len * c_len\nif m_len >= 1 and a_len >= 1 and h_len >= 1:\n    ans += m_len * a_len * h_len\nif m_len >= 1 and r_len >= 1 and c_len >= 1:\n    ans += m_len * r_len * c_len\nif m_len >= 1 and r_len >= 1 and h_len >= 1:\n    ans += m_len * r_len * h_len\nif m_len >= 1 and c_len >= 1 and h_len >= 1:\n    ans += m_len * c_len * h_len\nif a_len >= 1 and r_len >= 1 and c_len >= 1:\n    ans += a_len * r_len * c_len\nif a_len >= 1 and r_len >= 1 and h_len >= 1:\n    ans += a_len * r_len * h_len\nif a_len >= 1 and c_len >= 1 and h_len >= 1:\n    ans += a_len * c_len * h_len\nif r_len >= 1 and c_len >= 1 and h_len >= 1:\n    ans += r_len * c_len * h_len\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    names = []\n    for i in range(n):\n        names.append(input())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (names[i][0] == \"M\" or names[i][0] == \"A\" or names[i][0] == \"R\" or names[i][0] == \"C\" or names[i][0] == \"H\") and (names[j][0] == \"M\" or names[j][0] == \"A\" or names[j][0] == \"R\" or names[j][0] == \"C\" or names[j][0] == \"H\") and (names[k][0] == \"M\" or names[k][0] == \"A\" or names[k][0] == \"R\" or names[k][0] == \"C\" or names[k][0] == \"H\"):\n                    if names[i][0] != names[j][0] and names[i][0] != names[k][0] and names[j][0] != names[k][0]:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = [input() for _ in range(n)]\n    print(solve(s))\n\ndef solve(s):\n    cnt = 0\n    for i in range(len(s)):\n        if s[i][0] == 'M':\n            for j in range(i+1, len(s)):\n                if s[j][0] == 'A':\n                    for k in range(j+1, len(s)):\n                        if s[k][0] == 'R':\n                            cnt += 1\n                        elif s[k][0] == 'C':\n                            cnt += 1\n                        elif s[k][0] == 'H':\n                            cnt += 1\n    return cnt\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    names = []\n    for i in range(n):\n        names.append(input())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if names[i][0] != names[j][0] and names[i][0] != names[k][0] and names[j][0] != names[k][0]:\n                    if names[i][0] == 'M' or names[i][0] == 'A' or names[i][0] == 'R' or names[i][0] == 'C' or names[i][0] == 'H':\n                        if names[j][0] == 'M' or names[j][0] == 'A' or names[j][0] == 'R' or names[j][0] == 'C' or names[j][0] == 'H':\n                            if names[k][0] == 'M' or names[k][0] == 'A' or names[k][0] == 'R' or names[k][0] == 'C' or names[k][0] == 'H':\n                                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = [input() for i in range(n)]\n    c = [0] * 5\n    for i in range(n):\n        if s[i][0] == \"M\":\n            c[0] += 1\n        elif s[i][0] == \"A\":\n            c[1] += 1\n        elif s[i][0] == \"R\":\n            c[2] += 1\n        elif s[i][0] == \"C\":\n            c[3] += 1\n        elif s[i][0] == \"H\":\n            c[4] += 1\n    ans = 0\n    for i in range(5):\n        for j in range(i + 1, 5):\n            for k in range(j + 1, 5):\n                ans += c[i] * c[j] * c[k]\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\nimport collections\n\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n\n    # count the number of people whose name starts with each letter\n    count = collections.Counter(s[0] for s in S)\n\n    # the number of ways to choose three people is the number of ways to choose\n    # three letters from the five letters M, A, R, C, H, multiplied by the\n    # number of ways to choose three people whose names start with each letter\n    ans = sum(count[c] * (count[c] - 1) * (count[c] - 2) // 6 for c in \"MARCH\")\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN = int(input())\nS = [input() for i in range(N)]\n\n# \u5404\u6587\u5b57\u5217\u306e\u5148\u982d\u6587\u5b57\u3067\u96c6\u8a08\ncount = {\"M\": 0, \"A\": 0, \"R\": 0, \"C\": 0, \"H\": 0}\nfor s in S:\n    count[s[0]] += 1\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306e\u5148\u982d\u6587\u5b57\u304c\u7570\u306a\u308b\u5834\u5408\nans = count[\"M\"] * count[\"A\"] * count[\"R\"] + \\\n      count[\"M\"] * count[\"A\"] * count[\"C\"] + \\\n      count[\"M\"] * count[\"A\"] * count[\"H\"] + \\\n      count[\"M\"] * count[\"R\"] * count[\"C\"] + \\\n      count[\"M\"] * count[\"R\"] * count[\"H\"] + \\\n      count[\"M\"] * count[\"C\"] * count[\"H\"] + \\\n      count[\"A\"] * count[\"R\"] * count[\"C\"] + \\\n      count[\"A\"] * count[\"R\"] * count[\"H\"] + \\\n      count[\"A\"] * count[\"C\"] * count[\"H\"] + \\\n      count[\"R\"] * count[\"C\"] * count[\"H\"]\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306e\u5148\u982d\u6587\u5b57\u304c2\u7a2e\u985e\u306e\u5834\u5408\nans += count[\"M\"] * (count[\"M\"] - 1) // 2 * count[\"R\"] + \\\n       count[\"M\"] * (count[\"M\"] - 1) // 2 * count[\"C\"] + \\\n       count[\"M\"] * (count[\"M\"] - 1) // 2 * count[\"H\"] + \\\n       count[\"A\"] * (count[\"A\"] - 1) // 2 * count[\"M\"] + \\\n       count[\"A\"] * (count[\"A\"] - 1) // 2 * count[\"R\"] + \\\n       count[\"A\"] * (count[\"A\"] - 1) // 2 * count[\"C\"] + \\\n       count[\"A\"] * (count[\"A\"] - 1) // 2 * count[\"H\"] + \\\n       count[\"R\"] * (count[\"R\"] - 1) // 2 * count[\"M\"] + \\\n       count[\"R\"] * (count[\"R\"] - 1) // 2 * count[\"A\"] + \\\n       count[\"R\"] * (count[\"R\"] - 1) // 2 * count[\"C\"] + \\\n       count[\"R\"] * (count[\"R\"] - 1) // 2 * count[\"H\"] + \\\n       count[\"C\"] * (count[\"C\"] - 1) // 2 * count[\"M\"] + \\\n       count[\"C\"] * (count[\"C\"] - 1) // 2 * count[\"A\"] + \\\n       count[\"C\"] * (count[\"C\"] - 1) // 2 * count[\"R\"] + \\\n       count[\"C\"] * (count[\"C\"] - 1) // 2 * count[\"H\"] + \\\n       count[\"H\"] * (count[\"H\"] - 1) // 2 * count[\"M\"] + \\\n       count[\"H\"] * (count[\"H\"] - 1) // 2 * count[\"A\"] + \\\n       count[\"H\"] * (count[\"H\"] - 1) // 2 * count[\"R\"] + \\\n       count[\"H\"] * (count[\"H\"] - 1) // 2 * count[\"C\"]\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306e\u5148\u982d\u6587\u5b57\u304c1\u7a2e\u985e\u306e\u5834\u5408\nans += count[\"M\"] * (count[\"M\"] - 1) * (count[\"M\"] - 2) // 6 + \\\n       count[\"A\"] * (count[\"A\"] - 1) * (count[\"A\"] - 2) // 6 + \\\n       count[\"R\"] * (count[\"R\"] - 1) * (count[\"R\"] - 2) // 6 + \\\n       count[\"C\"] * (count[\"C\"] - 1) * (count[\"C\"] - 2) // 6 + \\\n       count[\"H\"] * (count[\"H\"] - 1) * (count[\"H\"] - 2) // 6\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N, S):\n    d = {'M': 0, 'A': 0, 'R': 0, 'C': 0, 'H': 0}\n    for s in S:\n        d[s[0]] += 1\n    ans = d['M'] * d['A'] * d['R'] + d['M'] * d['A'] * d['C'] + d['M'] * d['A'] * d['H'] + d['M'] * d['R'] * d['C'] + \\\n          d['M'] * d['R'] * d['H'] + d['M'] * d['C'] * d['H'] + d['A'] * d['R'] * d['C'] + d['A'] * d['R'] * d['H'] + \\\n          d['A'] * d['C'] * d['H'] + d['R'] * d['C'] * d['H']\n    print(ans)\n\n\nif __name__ == '__main__':\n    N = int(input())\n    S = [input() for _ in range(N)]\n    solve(N, S)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # N = 10 ** 5\n    # S = [random_str(randint(1, 10)) for _ in range(N)]\n    # solve(N, S)"
    }
  ],
  "created": 1650426750,
  "id": "cmpl-4yvgE1nJcc6p5idiUaU4QACzpas3E",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:53:14.451142 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# \u554f\u984c\u6587\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u540d\u524d\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\nn = int(input())\nnames = []\nfor i in range(n):\n    names.append(input())\n\n# \u540d\u524d\u306e\u30ea\u30b9\u30c8\u3092\u3001\u5404\u6587\u5b57\u3067\u5206\u5272\u3057\u3066\u3001\u5404\u6587\u5b57\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\nm = []\na = []\nr = []\nc = []\nh = []\nfor name in names:\n    if name[0] == 'M':\n        m.append(name)\n    elif name[0] == 'A':\n        a.append(name)\n    elif name[0] == 'R':\n        r.append(name)\n    elif name[0] == 'C':\n        c.append(name)\n    elif name[0] == 'H':\n        h.append(name)\n\n# \u5404\u6587\u5b57\u306e\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092\u8a08\u7b97\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u8a08\u7b97\u3059\u308b\nm_len = len(m)\na_len = len(a)\nr_len = len(r)\nc_len = len(c)\nh_len = len(h)\n\nans = 0\nif m_len >= 1 and a_len >= 1 and r_len >= 1:\n    ans += m_len * a_len * r_len\nif m_len >= 1 and a_len >= 1 and c_len >= 1:\n    ans += m_len * a_len * c_len\nif m_len >= 1 and a_len >= 1 and h_len >= 1:\n    ans += m_len * a_len * h_len\nif m_len >= 1 and r_len >= 1 and c_len >= 1:\n    ans += m_len * r_len * c_len\nif m_len >= 1 and r_len >= 1 and h_len >= 1:\n    ans += m_len * r_len * h_len\nif m_len >= 1 and c_len >= 1 and h_len >= 1:\n    ans += m_len * c_len * h_len\nif a_len >= 1 and r_len >= 1 and c_len >= 1:\n    ans += a_len * r_len * c_len\nif a_len >= 1 and r_len >= 1 and h_len >= 1:\n    ans += a_len * r_len * h_len\nif a_len >= 1 and c_len >= 1 and h_len >= 1:\n    ans += a_len * c_len * h_len\nif r_len >= 1 and c_len >= 1 and h_len >= 1:\n    ans += r_len * c_len * h_len\n\nprint(ans)"
}
2022-04-20 03:53:14.451234 REASON stop
2022-04-20 03:53:14.464139 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    names = []\n    for i in range(n):\n        names.append(input())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (names[i][0] == \"M\" or names[i][0] == \"A\" or names[i][0] == \"R\" or names[i][0] == \"C\" or names[i][0] == \"H\") and (names[j][0] == \"M\" or names[j][0] == \"A\" or names[j][0] == \"R\" or names[j][0] == \"C\" or names[j][0] == \"H\") and (names[k][0] == \"M\" or names[k][0] == \"A\" or names[k][0] == \"R\" or names[k][0] == \"C\" or names[k][0] == \"H\"):\n                    if names[i][0] != names[j][0] and names[i][0] != names[k][0] and names[j][0] != names[k][0]:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:53:14.464331 REASON stop
2022-04-20 03:53:14.507811 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = [input() for _ in range(n)]\n    print(solve(s))\n\ndef solve(s):\n    cnt = 0\n    for i in range(len(s)):\n        if s[i][0] == 'M':\n            for j in range(i+1, len(s)):\n                if s[j][0] == 'A':\n                    for k in range(j+1, len(s)):\n                        if s[k][0] == 'R':\n                            cnt += 1\n                        elif s[k][0] == 'C':\n                            cnt += 1\n                        elif s[k][0] == 'H':\n                            cnt += 1\n    return cnt\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:53:14.508033 REASON stop
2022-04-20 03:53:14.545221 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    names = []\n    for i in range(n):\n        names.append(input())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if names[i][0] != names[j][0] and names[i][0] != names[k][0] and names[j][0] != names[k][0]:\n                    if names[i][0] == 'M' or names[i][0] == 'A' or names[i][0] == 'R' or names[i][0] == 'C' or names[i][0] == 'H':\n                        if names[j][0] == 'M' or names[j][0] == 'A' or names[j][0] == 'R' or names[j][0] == 'C' or names[j][0] == 'H':\n                            if names[k][0] == 'M' or names[k][0] == 'A' or names[k][0] == 'R' or names[k][0] == 'C' or names[k][0] == 'H':\n                                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:53:14.545430 REASON stop
2022-04-20 03:53:14.577984 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = [input() for i in range(n)]\n    c = [0] * 5\n    for i in range(n):\n        if s[i][0] == \"M\":\n            c[0] += 1\n        elif s[i][0] == \"A\":\n            c[1] += 1\n        elif s[i][0] == \"R\":\n            c[2] += 1\n        elif s[i][0] == \"C\":\n            c[3] += 1\n        elif s[i][0] == \"H\":\n            c[4] += 1\n    ans = 0\n    for i in range(5):\n        for j in range(i + 1, 5):\n            for k in range(j + 1, 5):\n                ans += c[i] * c[j] * c[k]\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:53:14.578168 REASON stop
2022-04-20 03:53:14.606333 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\nimport collections\n\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n\n    # count the number of people whose name starts with each letter\n    count = collections.Counter(s[0] for s in S)\n\n    # the number of ways to choose three people is the number of ways to choose\n    # three letters from the five letters M, A, R, C, H, multiplied by the\n    # number of ways to choose three people whose names start with each letter\n    ans = sum(count[c] * (count[c] - 1) * (count[c] - 2) // 6 for c in \"MARCH\")\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:53:14.606527 REASON stop
2022-04-20 03:53:14.637571 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN = int(input())\nS = [input() for i in range(N)]\n\n# \u5404\u6587\u5b57\u5217\u306e\u5148\u982d\u6587\u5b57\u3067\u96c6\u8a08\ncount = {\"M\": 0, \"A\": 0, \"R\": 0, \"C\": 0, \"H\": 0}\nfor s in S:\n    count[s[0]] += 1\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306e\u5148\u982d\u6587\u5b57\u304c\u7570\u306a\u308b\u5834\u5408\nans = count[\"M\"] * count[\"A\"] * count[\"R\"] + \\\n      count[\"M\"] * count[\"A\"] * count[\"C\"] + \\\n      count[\"M\"] * count[\"A\"] * count[\"H\"] + \\\n      count[\"M\"] * count[\"R\"] * count[\"C\"] + \\\n      count[\"M\"] * count[\"R\"] * count[\"H\"] + \\\n      count[\"M\"] * count[\"C\"] * count[\"H\"] + \\\n      count[\"A\"] * count[\"R\"] * count[\"C\"] + \\\n      count[\"A\"] * count[\"R\"] * count[\"H\"] + \\\n      count[\"A\"] * count[\"C\"] * count[\"H\"] + \\\n      count[\"R\"] * count[\"C\"] * count[\"H\"]\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306e\u5148\u982d\u6587\u5b57\u304c2\u7a2e\u985e\u306e\u5834\u5408\nans += count[\"M\"] * (count[\"M\"] - 1) // 2 * count[\"R\"] + \\\n       count[\"M\"] * (count[\"M\"] - 1) // 2 * count[\"C\"] + \\\n       count[\"M\"] * (count[\"M\"] - 1) // 2 * count[\"H\"] + \\\n       count[\"A\"] * (count[\"A\"] - 1) // 2 * count[\"M\"] + \\\n       count[\"A\"] * (count[\"A\"] - 1) // 2 * count[\"R\"] + \\\n       count[\"A\"] * (count[\"A\"] - 1) // 2 * count[\"C\"] + \\\n       count[\"A\"] * (count[\"A\"] - 1) // 2 * count[\"H\"] + \\\n       count[\"R\"] * (count[\"R\"] - 1) // 2 * count[\"M\"] + \\\n       count[\"R\"] * (count[\"R\"] - 1) // 2 * count[\"A\"] + \\\n       count[\"R\"] * (count[\"R\"] - 1) // 2 * count[\"C\"] + \\\n       count[\"R\"] * (count[\"R\"] - 1) // 2 * count[\"H\"] + \\\n       count[\"C\"] * (count[\"C\"] - 1) // 2 * count[\"M\"] + \\\n       count[\"C\"] * (count[\"C\"] - 1) // 2 * count[\"A\"] + \\\n       count[\"C\"] * (count[\"C\"] - 1) // 2 * count[\"R\"] + \\\n       count[\"C\"] * (count[\"C\"] - 1) // 2 * count[\"H\"] + \\\n       count[\"H\"] * (count[\"H\"] - 1) // 2 * count[\"M\"] + \\\n       count[\"H\"] * (count[\"H\"] - 1) // 2 * count[\"A\"] + \\\n       count[\"H\"] * (count[\"H\"] - 1) // 2 * count[\"R\"] + \\\n       count[\"H\"] * (count[\"H\"] - 1) // 2 * count[\"C\"]\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306e\u5148\u982d\u6587\u5b57\u304c1\u7a2e\u985e\u306e\u5834\u5408\nans += count[\"M\"] * (count[\"M\"] - 1) * (count[\"M\"] - 2) // 6 + \\\n       count[\"A\"] * (count[\"A\"] - 1) * (count[\"A\"] - 2) // 6 + \\\n       count[\"R\"] * (count[\"R\"] - 1) * (count[\"R\"] - 2) // 6 + \\\n       count[\"C\"] * (count[\"C\"] - 1) * (count[\"C\"] - 2) // 6 + \\\n       count[\"H\"] * (count[\"H\"] - 1) * (count[\"H\"] - 2) // 6\n\nprint(ans)"
}
2022-04-20 03:53:14.637952 REASON stop
2022-04-20 03:53:14.666686 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N, S):\n    d = {'M': 0, 'A': 0, 'R': 0, 'C': 0, 'H': 0}\n    for s in S:\n        d[s[0]] += 1\n    ans = d['M'] * d['A'] * d['R'] + d['M'] * d['A'] * d['C'] + d['M'] * d['A'] * d['H'] + d['M'] * d['R'] * d['C'] + \\\n          d['M'] * d['R'] * d['H'] + d['M'] * d['C'] * d['H'] + d['A'] * d['R'] * d['C'] + d['A'] * d['R'] * d['H'] + \\\n          d['A'] * d['C'] * d['H'] + d['R'] * d['C'] * d['H']\n    print(ans)\n\n\nif __name__ == '__main__':\n    N = int(input())\n    S = [input() for _ in range(N)]\n    solve(N, S)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # N = 10 ** 5\n    # S = [random_str(randint(1, 10)) for _ in range(N)]\n    # solve(N, S)"
}
2022-04-20 03:53:14.666850 REASON stop
