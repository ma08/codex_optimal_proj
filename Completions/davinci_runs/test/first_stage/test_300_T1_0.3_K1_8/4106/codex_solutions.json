["\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * (x+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, x+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(i-1, max(i-k, -1), -1):\n                dp[i][j] = max(dp[i][j], dp[l][j-1] + sum(a[l:i]))\n    if dp[n][x] == 0:\n        print(-1)\n    else:\n        print(dp[n][x])\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for i in range(x+1)] for j in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, x+1):\n        if i < k:\n            dp[i][j] = max(dp[i-1][j], a[i-1])\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-k][j-1] + a[i-1])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])", "\n\nimport sys\n\ndef max_beauty_sum(n, k, x, a):\n    \"\"\"\n    >>> max_beauty_sum(5, 2, 3, [5, 1, 3, 10, 1])\n    18\n    >>> max_beauty_sum(6, 1, 5, [10, 30, 30, 70, 10, 10])\n    -1\n    >>> max_beauty_sum(4, 3, 1, [1, 100, 1, 1])\n    100\n    \"\"\"\n    # dp[i][j] is the max beauty sum of the first i pictures with j reposts\n    dp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, x+1):\n            dp[i][j] = max(dp[i-1][j], dp[i-k][j-1] + sum(a[i-k:i]))\n    return dp[n][x]\n\nif __name__ == '__main__':\n    n, k, x = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(max_beauty_sum(n, k, x, a))", "\n\nimport sys\n\ndef main():\n    n, k, x = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    # dp[i][j] = max sum of first i elements with j elements selected\n    dp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, x+1):\n            if i >= k:\n                dp[i][j] = max(dp[i-1][j], dp[i-k][j-1] + sum(a[i-k:i]))\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[n][x])\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\n# The problem is a variation of the Knapsack problem.\n# The key is to use a 2D array to store the maximum beauty value\n# that can be achieved by reposting pictures from the first i pictures\n# and j pictures have been reposted.\n# The array is filled in a bottom-up manner.\n# The first row is filled with the beauty value of each picture.\n# The first column is filled with 0s.\n# Each cell is filled by taking the maximum of the following two values:\n# 1. The maximum beauty value that can be achieved by reposting pictures\n#    from the first i-1 pictures and j pictures have been reposted.\n# 2. The maximum beauty value that can be achieved by reposting pictures\n#    from the first i-k pictures and j-1 pictures have been reposted plus\n#    the beauty value of the i-th picture.\n# The second value is taken only if the first value is less than the second value.\n# The final answer is the value in the cell at the intersection of the x-th column\n# and the n-th row.\n\n# FUNCTIONS\ndef knapsack(n, k, x, a):\n    # Initialize the 2D array.\n    dp = [[0 for j in range(x + 1)] for i in range(n + 1)]\n    \n    # Fill the first row.\n    for j in range(1, x + 1):\n        dp[1][j] = a[0]\n    \n    # Fill the 2D array.\n    for i in range(2, n + 1):\n        for j in range(1, x + 1):\n            # If the maximum beauty value that can be achieved by reposting\n            # pictures from the first i-1 pictures and j pictures have been\n            # reposted is less than the maximum beauty value that can be\n            # achieved by reposting pictures from the first i-k pictures and\n            # j-1 pictures have been reposted plus the beauty value of the\n            # i-th picture, then take the second value.\n            if dp[i - 1][j] < dp[i - k][j - 1] + a[i - 1]:\n                dp[i][j] = dp[i - k][j - 1] + a[i - 1]\n            # Otherwise, take the first value.\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    # Return the final answer.\n    return dp[n][x]\n\n# MAIN\nn, k, x = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\n# If x is greater than n, then there is no way to satisfy all conditions.\nif x > n:\n    print(-1)\nelse:\n    print(knapsack(n, k, x, a))", "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] is the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement\n# and the last picture reposted is the i-th picture\n# and the number of pictures reposted is j\ndp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, x+1):\n        dp[i][j] = max(dp[i-1][j], dp[i-k][j-1] + sum(a[i-k:i]))\n\nprint(dp[n][x])", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * (x + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, x + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - k][j - 1] + sum(a[i - k:i]))\n    print(dp[n][x])\n\nif __name__ == '__main__':\n    main()"]