["\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(kth_digit(k))\n\n\ndef kth_digit(k):\n    if k == 1:\n        return 1\n    k -= 1\n    num_digits = 1\n    while k > num_digits * 9 * 10 ** (num_digits - 1):\n        k -= num_digits * 9 * 10 ** (num_digits - 1)\n        num_digits += 1\n    num = 10 ** (num_digits - 1) + (k - 1) // num_digits\n    return int(str(num)[(k - 1) % num_digits])\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        if k == 1:\n            print(1)\n        else:\n            k -= 1\n            n = 1\n            while k > 0:\n                k -= n\n                n += 1\n            print(k+n)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\n\nimport math\n\nq = int(input())\n\nfor i in range(q):\n    k = int(input())\n    n = int(math.sqrt(2*k))\n    if n*(n+1) == 2*k:\n        print(n)\n    else:\n        print(n+1)", "\n\n# SOLUTION\n# This solution is based on the fact that the sum of the first n natural numbers is n(n+1)/2\n# The idea is to find the block in which the number is present and then find the number in that block\n# The block can be found by iterating over the sum of the first n natural numbers and finding the first sum which is greater than the given number\n# The number in the block can be found by subtracting the sum of the previous block from the given number\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sum = 0\n    i = 1\n    while sum < n:\n        sum += i\n        i += 1\n    i -= 1\n    sum -= i\n    n -= sum\n    print(str(i)[n-1])"]