2022-04-20 03:48:53.774112 """
You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.
Here, a ACGT string is a string that contains no characters other than A, C, G and T.

-----Notes-----
A substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.
For example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.

-----Constraints-----
 - S is a string of length between 1 and 10 (inclusive).
 - Each character in S is an uppercase English letter.

-----Input-----
Input is given from Standard Input in the following format:
S

-----Output-----
Print the length of the longest ACGT string that is a substring of S.

-----Sample Input-----
ATCODER

-----Sample Output-----
3

Among the ACGT strings that are substrings of ATCODER, the longest one is ATC.
"""
2022-04-20 03:48:53.774139 --------------------------
2022-04-20 03:48:53.774305 using api key gabby
2022-04-20 03:48:53.941635 in retry 8 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 03:48:58.945079 """
You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.
Here, a ACGT string is a string that contains no characters other than A, C, G and T.

-----Notes-----
A substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.
For example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.

-----Constraints-----
 - S is a string of length between 1 and 10 (inclusive).
 - Each character in S is an uppercase English letter.

-----Input-----
Input is given from Standard Input in the following format:
S

-----Output-----
Print the length of the longest ACGT string that is a substring of S.

-----Sample Input-----
ATCODER

-----Sample Output-----
3

Among the ACGT strings that are substrings of ATCODER, the longest one is ATC.
"""
2022-04-20 03:48:58.945124 --------------------------
2022-04-20 03:48:58.945286 using api key sourya
2022-04-20 03:48:58.982685 in retry 7 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-20 03:49:08.993120 """
You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.
Here, a ACGT string is a string that contains no characters other than A, C, G and T.

-----Notes-----
A substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.
For example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.

-----Constraints-----
 - S is a string of length between 1 and 10 (inclusive).
 - Each character in S is an uppercase English letter.

-----Input-----
Input is given from Standard Input in the following format:
S

-----Output-----
Print the length of the longest ACGT string that is a substring of S.

-----Sample Input-----
ATCODER

-----Sample Output-----
3

Among the ACGT strings that are substrings of ATCODER, the longest one is ATC.
"""
2022-04-20 03:49:08.993165 --------------------------
2022-04-20 03:49:08.993329 using api key sourya
2022-04-20 03:49:16.510719 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(len(max(s.split('AGCT'))))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ns = input()\n\nacgt = 'ACGT'\n\nmax_count = 0\ncount = 0\n\nfor i in range(len(s)):\n    if s[i] in acgt:\n        count += 1\n    else:\n        max_count = max(max_count, count)\n        count = 0\n\nmax_count = max(max_count, count)\n\nprint(max_count)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ns = input()\n\nmax_len = 0\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        if 'A' in s[i:j+1] and 'C' in s[i:j+1] and 'G' in s[i:j+1] and 'T' in s[i:j+1]:\n            max_len = max(max_len, j-i+1)\n\nprint(max_len)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ns = input()\n\nans = 0\n\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        if s[i:j+1].count('A') + s[i:j+1].count('C') + s[i:j+1].count('G') + s[i:j+1].count('T') == j - i + 1:\n            ans = max(ans, j - i + 1)\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ns = input()\n\nacgt = ['A', 'C', 'G', 'T']\n\nmax_len = 0\n\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        if s[i:j+1] in acgt:\n            max_len = max(max_len, j-i+1)\n\nprint(max_len)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ns = input()\n\nmax = 0\ncount = 0\n\nfor i in range(len(s)):\n    if s[i] == 'A' or s[i] == 'C' or s[i] == 'G' or s[i] == 'T':\n        count += 1\n    else:\n        if count > max:\n            max = count\n        count = 0\n\nif count > max:\n    max = count\n\nprint(max)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ns = input()\n\nmax_length = 0\n\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        if 'A' in s[i:j] and 'C' in s[i:j] and 'G' in s[i:j] and 'T' in s[i:j]:\n            max_length = max(max_length, j - i)\n\nprint(max_length)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ns = input()\n\ndef is_ACGT(s):\n    for i in s:\n        if i not in \"ACGT\":\n            return False\n    return True\n\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        if is_ACGT(s[i:j]):\n            ans = max(ans, j-i)\n\nprint(ans)"
    }
  ],
  "created": 1650426549,
  "id": "cmpl-4yvczzeKfyA9HDOqbXTuEHNj1jmDt",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:49:16.511165 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(len(max(s.split('AGCT'))))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:49:16.511235 REASON stop
2022-04-20 03:49:16.514027 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ns = input()\n\nacgt = 'ACGT'\n\nmax_count = 0\ncount = 0\n\nfor i in range(len(s)):\n    if s[i] in acgt:\n        count += 1\n    else:\n        max_count = max(max_count, count)\n        count = 0\n\nmax_count = max(max_count, count)\n\nprint(max_count)"
}
2022-04-20 03:49:16.514156 REASON stop
2022-04-20 03:49:16.514802 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ns = input()\n\nmax_len = 0\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        if 'A' in s[i:j+1] and 'C' in s[i:j+1] and 'G' in s[i:j+1] and 'T' in s[i:j+1]:\n            max_len = max(max_len, j-i+1)\n\nprint(max_len)"
}
2022-04-20 03:49:16.514900 REASON stop
2022-04-20 03:49:16.530383 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ns = input()\n\nans = 0\n\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        if s[i:j+1].count('A') + s[i:j+1].count('C') + s[i:j+1].count('G') + s[i:j+1].count('T') == j - i + 1:\n            ans = max(ans, j - i + 1)\n\nprint(ans)"
}
2022-04-20 03:49:16.530512 REASON stop
2022-04-20 03:49:16.531705 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ns = input()\n\nacgt = ['A', 'C', 'G', 'T']\n\nmax_len = 0\n\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        if s[i:j+1] in acgt:\n            max_len = max(max_len, j-i+1)\n\nprint(max_len)"
}
2022-04-20 03:49:16.531798 REASON stop
2022-04-20 03:49:16.533098 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ns = input()\n\nmax = 0\ncount = 0\n\nfor i in range(len(s)):\n    if s[i] == 'A' or s[i] == 'C' or s[i] == 'G' or s[i] == 'T':\n        count += 1\n    else:\n        if count > max:\n            max = count\n        count = 0\n\nif count > max:\n    max = count\n\nprint(max)"
}
2022-04-20 03:49:16.533231 REASON stop
2022-04-20 03:49:16.534160 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ns = input()\n\nmax_length = 0\n\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        if 'A' in s[i:j] and 'C' in s[i:j] and 'G' in s[i:j] and 'T' in s[i:j]:\n            max_length = max(max_length, j - i)\n\nprint(max_length)"
}
2022-04-20 03:49:16.534353 REASON stop
2022-04-20 03:49:16.535378 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ns = input()\n\ndef is_ACGT(s):\n    for i in s:\n        if i not in \"ACGT\":\n            return False\n    return True\n\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        if is_ACGT(s[i:j]):\n            ans = max(ans, j-i)\n\nprint(ans)"
}
2022-04-20 03:49:16.535455 REASON stop
