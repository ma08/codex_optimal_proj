2022-04-20 02:17:56.301693 """
One very experienced problem writer decided to prepare a problem for April Fools Day contest. The task was very simple - given an arithmetic expression, return the result of evaluating this expression. However, looks like there is a bug in the reference solution...


-----Input-----

The only line of input data contains the arithmetic expression. The expression will contain between 2 and 10 operands, separated with arithmetic signs plus and/or minus. Each operand will be an integer between 0 and 255, inclusive.


-----Output-----

Reproduce the output of the reference solution, including the bug.


-----Examples-----
Input
8-7+6-5+4-3+2-1-0

Output
4

Input
2+2

Output
-46

Input
112-37

Output
375
"""
2022-04-20 02:17:56.301702 --------------------------
2022-04-20 02:17:56.301817 using api key derek
2022-04-20 02:18:03.614066 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    expression = input()\n    result = 0\n    for i in range(len(expression)):\n        if expression[i] == '+':\n            result += int(expression[i+1])\n        elif expression[i] == '-':\n            result -= int(expression[i+1])\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    expression = input()\n    expression = expression.split('+')\n    result = 0\n    for i in range(len(expression)):\n        if i == 0:\n            result = int(expression[i])\n        else:\n            result += int(expression[i])\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    result = int(line[0])\n    for i in range(1, len(line), 2):\n        if line[i] == '+':\n            result += int(line[i+1])\n        else:\n            result -= int(line[i+1])\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n\texpr = input()\n\texpr = expr.split('+')\n\texpr = [int(i) for i in expr]\n\tprint(sum(expr))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    exp = input()\n    exp = exp.split(\"-\")\n    exp = [int(i) for i in exp]\n    print(sum(exp))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    The bug is that the reference solution doesn't take into account the order of operations.\n    \"\"\"\n    expression = sys.stdin.readline().strip()\n    result = eval(expression)\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    expr = input()\n    print(eval(expr))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    expr = input()\n    print(eval(expr))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650421076,
  "id": "cmpl-4yuCiYbY94D57QHw4Bq2QB0VSsTFm",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 02:18:03.614418 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    expression = input()\n    result = 0\n    for i in range(len(expression)):\n        if expression[i] == '+':\n            result += int(expression[i+1])\n        elif expression[i] == '-':\n            result -= int(expression[i+1])\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:18:03.614456 REASON stop
2022-04-20 02:18:03.614932 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    expression = input()\n    expression = expression.split('+')\n    result = 0\n    for i in range(len(expression)):\n        if i == 0:\n            result = int(expression[i])\n        else:\n            result += int(expression[i])\n    print(result)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:18:03.614979 REASON stop
2022-04-20 02:18:03.615413 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    result = int(line[0])\n    for i in range(1, len(line), 2):\n        if line[i] == '+':\n            result += int(line[i+1])\n        else:\n            result -= int(line[i+1])\n    print(result)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:18:03.615467 REASON stop
2022-04-20 02:18:03.616808 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n\texpr = input()\n\texpr = expr.split('+')\n\texpr = [int(i) for i in expr]\n\tprint(sum(expr))\n\nif __name__ == '__main__':\n\tmain()"
}
2022-04-20 02:18:03.616881 REASON stop
2022-04-20 02:18:03.619849 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    exp = input()\n    exp = exp.split(\"-\")\n    exp = [int(i) for i in exp]\n    print(sum(exp))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:18:03.619920 REASON stop
2022-04-20 02:18:03.620775 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    The bug is that the reference solution doesn't take into account the order of operations.\n    \"\"\"\n    expression = sys.stdin.readline().strip()\n    result = eval(expression)\n    print(result)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:18:03.620847 REASON stop
2022-04-20 02:18:03.621682 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    expr = input()\n    print(eval(expr))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:18:03.621769 REASON stop
2022-04-20 02:18:03.622412 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    expr = input()\n    print(eval(expr))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:18:03.622576 REASON stop
