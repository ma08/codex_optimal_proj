["\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(s.count(\"01\") + s.count(\"10\"))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    S = input()\n    N = len(S)\n    ans = 0\n    for i in range(N):\n        if S[i] == '0':\n            ans += 1\n            for j in range(i+1, N):\n                if S[j] == '1':\n                    ans += 1\n                    break\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    n = len(s)\n    cnt = 0\n    for i in range(n-1):\n        if s[i] == '0' and s[i+1] == '1':\n            cnt += 1\n            s = s[:i] + '1' + s[i+2:]\n    print(cnt)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\ns = input()\n\n# cnt_r: number of red cubes\n# cnt_b: number of blue cubes\ncnt_r = 0\ncnt_b = 0\n\nfor i in range(n):\n    if s[i] == '0':\n        cnt_r += 1\n    else:\n        cnt_b += 1\n\nprint(min(cnt_r, cnt_b) * 2)", "\n\nN = int(input())\nS = input()\n\nans = 0\n\nfor i in range(1, N):\n    if S[i-1] != S[i]:\n        ans += 1\n\nprint(ans)", "\n\nN = int(input())\nS = input()\n\n# Count the number of consecutive zeros and ones\ncount = 0\nmax_count = 0\nfor i in range(N):\n    if S[i] == '1':\n        count += 1\n    else:\n        count = 0\n    max_count = max(max_count, count)\n\nprint(2 * min(max_count, N - max_count))", "\n\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nremovable_cubes = 0\n\n# Initialize the index of the bottom cube\nbottom_index = 0\n\n# Iterate through the cubes from the bottom to the top\nwhile bottom_index < N:\n    # If the bottom cube is red, remove it\n    if S[bottom_index] == '0':\n        removable_cubes += 1\n        bottom_index += 1\n    # If the bottom cube is blue, find the next red cube and remove them\n    else:\n        # Initialize the index of the next red cube\n        next_red_index = bottom_index + 1\n        # Iterate through the cubes from the bottom to the top\n        while next_red_index < N:\n            # If the next cube is red, remove it\n            if S[next_red_index] == '0':\n                removable_cubes += 2\n                bottom_index = next_red_index + 1\n                break\n            # If the next cube is blue, continue searching for the next red cube\n            else:\n                next_red_index += 1\n        # If there is no red cube, stop removing cubes\n        else:\n            break\n\n# Print the maximum number of cubes that can be removed\nprint(removable_cubes)"]