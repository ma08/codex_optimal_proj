["\n\nimport sys\nimport math\n\nn = int(input())\ntowns = []\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\ndef get_distance(a, b):\n    return math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\ndef get_all_paths(n):\n    if n == 1:\n        return [[1]]\n    else:\n        paths = []\n        for path in get_all_paths(n - 1):\n            for i in range(n - 1):\n                paths.append(path[:i] + [n] + path[i:])\n            paths.append(path + [n])\n        return paths\n\ndef get_path_length(path):\n    length = 0\n    for i in range(len(path) - 1):\n        length += get_distance(towns[path[i] - 1], towns[path[i + 1] - 1])\n    return length\n\npaths = get_all_paths(n)\nlengths = [get_path_length(path) for path in paths]\nprint(sum(lengths) / len(lengths))", "\n\nimport math\n\nn = int(input())\ntowns = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef calc_dist(path):\n    d = 0\n    for i in range(len(path) - 1):\n        d += dist(path[i][0], path[i][1], path[i + 1][0], path[i + 1][1])\n    return d\n\ndef perm(l, r, path):\n    if l == r:\n        # print(path)\n        global dists\n        dists.append(calc_dist(path))\n    else:\n        for i in range(l, r + 1):\n            path[l], path[i] = path[i], path[l]\n            perm(l + 1, r, path)\n            path[l], path[i] = path[i], path[l]\n\ndists = []\nperm(0, n - 1, towns)\nprint(sum(dists) / len(dists))", "\n\nimport itertools\n\nn = int(input())\ntowns = [tuple(map(int, input().split())) for _ in range(n)]\n\ndistances = [0] * n\nfor i in range(n):\n    for j in range(i+1, n):\n        x1, y1 = towns[i]\n        x2, y2 = towns[j]\n        distances[i] += ((x1-x2)**2 + (y1-y2)**2)**0.5\n        distances[j] += ((x1-x2)**2 + (y1-y2)**2)**0.5\n\npaths = list(itertools.permutations(range(n)))\n\ntotal = 0\nfor path in paths:\n    for i in range(n-1):\n        total += distances[path[i]]\n\nprint(total / len(paths))", "\n\ndef main():\n    n = int(input())\n    xy = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        xy.append((x, y))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = xy[i]\n            x2, y2 = xy[j]\n            ans += ((x1-x2)**2 + (y1-y2)**2)**0.5\n\n    ans /= n\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        xi, yi = map(int, input().split())\n        x.append(xi)\n        y.append(yi)\n\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += distance(x[i], y[i], x[j], y[j])\n\n    print(total * factorial(n-1) / factorial(n))\n\nif __name__ == '__main__':\n    main()", "\n\nimport itertools\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for _ in range(n):\n        x_i, y_i = map(int, input().split())\n        x.append(x_i)\n        y.append(y_i)\n\n    sum_of_paths = 0\n    for path in itertools.permutations(range(n)):\n        for i in range(n-1):\n            sum_of_paths += ((x[path[i]] - x[path[i+1]])**2 + (y[path[i]] - y[path[i+1]])**2)**0.5\n    print(sum_of_paths / factorial(n))\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        x_i, y_i = map(int, input().split())\n        x.append(x_i)\n        y.append(y_i)\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += math.sqrt((x[i]-x[j])**2 + (y[i]-y[j])**2)\n    print(total*2/math.factorial(n))\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for _ in range(n):\n        x_, y_ = map(int, input().split())\n        x.append(x_)\n        y.append(y_)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += math.sqrt((x[i]-x[j])**2+(y[i]-y[j])**2)\n    print(ans*2/math.factorial(n))\n\nif __name__ == \"__main__\":\n    main()"]