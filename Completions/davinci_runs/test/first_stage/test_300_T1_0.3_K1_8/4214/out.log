2022-04-20 03:23:56.397825 """
There are N towns in a coordinate plane. Town i is located at coordinates (x_i, y_i). The distance between Town i and Town j is \sqrt{\left(x_i-x_j\right)^2+\left(y_i-y_j\right)^2}.
There are N! possible paths to visit all of these towns once. Let the length of a path be the distance covered when we start at the first town in the path, visit the second, third, \dots, towns, and arrive at the last town (assume that we travel in a straight line from a town to another). Compute the average length of these N! paths.

-----Constraints-----
 - 2 \leq N \leq 8
 - -1000 \leq x_i \leq 1000
 - -1000 \leq y_i \leq 1000
 - \left(x_i, y_i\right) \neq \left(x_j, y_j\right) (if i \neq j)
 - (Added 21:12 JST) All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N
x_1 y_1
:
x_N y_N

-----Output-----
Print the average length of the paths.
Your output will be judges as correct when the absolute difference from the judge's output is at most 10^{-6}.

-----Sample Input-----
3
0 0
1 0
0 1

-----Sample Output-----
2.2761423749

There are six paths to visit the towns: 1 → 2 → 3, 1 → 3 → 2, 2 → 1 → 3, 2 → 3 → 1, 3 → 1 → 2, and 3 → 2 → 1.
The length of the path 1 → 2 → 3 is \sqrt{\left(0-1\right)^2+\left(0-0\right)^2} + \sqrt{\left(1-0\right)^2+\left(0-1\right)^2} = 1+\sqrt{2}.
By calculating the lengths of the other paths in this way, we see that the average length of all routes is:
\frac{\left(1+\sqrt{2}\right)+\left(1+\sqrt{2}\right)+\left(2\right)+\left(1+\sqrt{2}\right)+\left(2\right)+\left(1+\sqrt{2}\right)}{6} = 2.276142...
"""
2022-04-20 03:23:56.397856 --------------------------
2022-04-20 03:23:56.398024 using api key gabby
2022-04-20 03:24:09.152796 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\nn = int(input())\ntowns = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef calc_dist(path):\n    d = 0\n    for i in range(len(path) - 1):\n        d += dist(path[i][0], path[i][1], path[i + 1][0], path[i + 1][1])\n    return d\n\ndef perm(l, r, path):\n    if l == r:\n        # print(path)\n        global dists\n        dists.append(calc_dist(path))\n    else:\n        for i in range(l, r + 1):\n            path[l], path[i] = path[i], path[l]\n            perm(l + 1, r, path)\n            path[l], path[i] = path[i], path[l]\n\ndists = []\nperm(0, n - 1, towns)\nprint(sum(dists) / len(dists))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\nn = int(input())\ntowns = []\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\ndef get_distance(a, b):\n    return math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\ndef get_all_paths(n):\n    if n == 1:\n        return [[1]]\n    else:\n        paths = []\n        for path in get_all_paths(n - 1):\n            for i in range(n - 1):\n                paths.append(path[:i] + [n] + path[i:])\n            paths.append(path + [n])\n        return paths\n\ndef get_path_length(path):\n    length = 0\n    for i in range(len(path) - 1):\n        length += get_distance(towns[path[i] - 1], towns[path[i + 1] - 1])\n    return length\n\npaths = get_all_paths(n)\nlengths = [get_path_length(path) for path in paths]\nprint(sum(lengths) / len(lengths))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for _ in range(n):\n        x_, y_ = map(int, input().split())\n        x.append(x_)\n        y.append(y_)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += math.sqrt((x[i]-x[j])**2+(y[i]-y[j])**2)\n    print(ans*2/math.factorial(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        x_i, y_i = map(int, input().split())\n        x.append(x_i)\n        y.append(y_i)\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += math.sqrt((x[i]-x[j])**2 + (y[i]-y[j])**2)\n    print(total*2/math.factorial(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport itertools\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for _ in range(n):\n        x_i, y_i = map(int, input().split())\n        x.append(x_i)\n        y.append(y_i)\n\n    sum_of_paths = 0\n    for path in itertools.permutations(range(n)):\n        for i in range(n-1):\n            sum_of_paths += ((x[path[i]] - x[path[i+1]])**2 + (y[path[i]] - y[path[i+1]])**2)**0.5\n    print(sum_of_paths / factorial(n))\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport itertools\n\nn = int(input())\ntowns = [tuple(map(int, input().split())) for _ in range(n)]\n\ndistances = [0] * n\nfor i in range(n):\n    for j in range(i+1, n):\n        x1, y1 = towns[i]\n        x2, y2 = towns[j]\n        distances[i] += ((x1-x2)**2 + (y1-y2)**2)**0.5\n        distances[j] += ((x1-x2)**2 + (y1-y2)**2)**0.5\n\npaths = list(itertools.permutations(range(n)))\n\ntotal = 0\nfor path in paths:\n    for i in range(n-1):\n        total += distances[path[i]]\n\nprint(total / len(paths))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        xi, yi = map(int, input().split())\n        x.append(xi)\n        y.append(yi)\n\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += distance(x[i], y[i], x[j], y[j])\n\n    print(total * factorial(n-1) / factorial(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    xy = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        xy.append((x, y))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = xy[i]\n            x2, y2 = xy[j]\n            ans += ((x1-x2)**2 + (y1-y2)**2)**0.5\n\n    ans /= n\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650425036,
  "id": "cmpl-4yvEaBnCmK3wq6EqSWVwOSYeYLj3n",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:24:09.153233 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\nn = int(input())\ntowns = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef calc_dist(path):\n    d = 0\n    for i in range(len(path) - 1):\n        d += dist(path[i][0], path[i][1], path[i + 1][0], path[i + 1][1])\n    return d\n\ndef perm(l, r, path):\n    if l == r:\n        # print(path)\n        global dists\n        dists.append(calc_dist(path))\n    else:\n        for i in range(l, r + 1):\n            path[l], path[i] = path[i], path[l]\n            perm(l + 1, r, path)\n            path[l], path[i] = path[i], path[l]\n\ndists = []\nperm(0, n - 1, towns)\nprint(sum(dists) / len(dists))"
}
2022-04-20 03:24:09.153312 REASON stop
2022-04-20 03:24:09.154721 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\nn = int(input())\ntowns = []\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\ndef get_distance(a, b):\n    return math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\ndef get_all_paths(n):\n    if n == 1:\n        return [[1]]\n    else:\n        paths = []\n        for path in get_all_paths(n - 1):\n            for i in range(n - 1):\n                paths.append(path[:i] + [n] + path[i:])\n            paths.append(path + [n])\n        return paths\n\ndef get_path_length(path):\n    length = 0\n    for i in range(len(path) - 1):\n        length += get_distance(towns[path[i] - 1], towns[path[i + 1] - 1])\n    return length\n\npaths = get_all_paths(n)\nlengths = [get_path_length(path) for path in paths]\nprint(sum(lengths) / len(lengths))"
}
2022-04-20 03:24:09.154865 REASON stop
2022-04-20 03:24:09.155619 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for _ in range(n):\n        x_, y_ = map(int, input().split())\n        x.append(x_)\n        y.append(y_)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += math.sqrt((x[i]-x[j])**2+(y[i]-y[j])**2)\n    print(ans*2/math.factorial(n))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:24:09.155723 REASON stop
2022-04-20 03:24:09.178142 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        x_i, y_i = map(int, input().split())\n        x.append(x_i)\n        y.append(y_i)\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += math.sqrt((x[i]-x[j])**2 + (y[i]-y[j])**2)\n    print(total*2/math.factorial(n))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:24:09.178284 REASON stop
2022-04-20 03:24:09.179592 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport itertools\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for _ in range(n):\n        x_i, y_i = map(int, input().split())\n        x.append(x_i)\n        y.append(y_i)\n\n    sum_of_paths = 0\n    for path in itertools.permutations(range(n)):\n        for i in range(n-1):\n            sum_of_paths += ((x[path[i]] - x[path[i+1]])**2 + (y[path[i]] - y[path[i+1]])**2)**0.5\n    print(sum_of_paths / factorial(n))\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:24:09.179700 REASON stop
2022-04-20 03:24:09.182005 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport itertools\n\nn = int(input())\ntowns = [tuple(map(int, input().split())) for _ in range(n)]\n\ndistances = [0] * n\nfor i in range(n):\n    for j in range(i+1, n):\n        x1, y1 = towns[i]\n        x2, y2 = towns[j]\n        distances[i] += ((x1-x2)**2 + (y1-y2)**2)**0.5\n        distances[j] += ((x1-x2)**2 + (y1-y2)**2)**0.5\n\npaths = list(itertools.permutations(range(n)))\n\ntotal = 0\nfor path in paths:\n    for i in range(n-1):\n        total += distances[path[i]]\n\nprint(total / len(paths))"
}
2022-04-20 03:24:09.182112 REASON stop
2022-04-20 03:24:09.185157 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\ndef main():\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        xi, yi = map(int, input().split())\n        x.append(xi)\n        y.append(yi)\n\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += distance(x[i], y[i], x[j], y[j])\n\n    print(total * factorial(n-1) / factorial(n))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:24:09.185261 REASON stop
2022-04-20 03:24:09.188577 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    xy = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        xy.append((x, y))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = xy[i]\n            x2, y2 = xy[j]\n            ans += ((x1-x2)**2 + (y1-y2)**2)**0.5\n\n    ans /= n\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:24:09.188840 REASON stop
