["\n\ndef check_symmetry(square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] != square[j][i]:\n                return False\n    return True\n\ndef check_tiles(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if tile[0][0] == square[i][j+1] and tile[0][1] == square[i+1][j+1] and tile[1][0] == square[i+1][j] and tile[1][1] == square[i][j]:\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        return True\n                return False\n    return True\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if tile[0][0] == square[i][j+1] and tile[0][1] == square[i+1][j+1] and tile[1][0] == square[i+1][j] and tile[1][1] == square[i][j]:\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        if check_tiles(tiles, square):\n                            return True\n                        else:\n                            square[i][j] = 0\n                            square[i][j+1] = 0\n                            square[i+1][j] = 0\n                            square[i+1][j+1] = 0\n                return False\n    return True\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = [int(x) for x in input().split()]\n        tiles = []\n        for _ in range(n):\n            tiles.append([[int(x) for x in input().split()], [int(x) for x in input().split()]])\n        square = [[0 for _ in range(m)] for _ in range(m)]\n        if check_square(tiles, square) and check_symmetry(square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()", "\n\nfrom copy import deepcopy\n\ndef is_valid(matrix):\n    for i in range(len(matrix)):\n        for j in range(i + 1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef is_possible(tiles, size):\n    if size % 2 == 1:\n        return False\n    if size == 2:\n        for tile in tiles:\n            if tile[0][0] == tile[1][1] and tile[0][1] == tile[1][0]:\n                return True\n        return False\n    for tile in tiles:\n        if tile[0][0] == tile[1][1] and tile[0][1] == tile[1][0]:\n            new_tiles = deepcopy(tiles)\n            new_tiles.remove(tile)\n            matrix = [[0 for _ in range(size)] for _ in range(size)]\n            matrix[0][0] = tile[0][0]\n            matrix[0][1] = tile[0][1]\n            matrix[1][0] = tile[1][0]\n            matrix[1][1] = tile[1][1]\n            if is_possible_recursive(new_tiles, matrix, 2):\n                return True\n    return False\n\ndef is_possible_recursive(tiles, matrix, i):\n    if i == len(matrix):\n        return is_valid(matrix)\n    for tile in tiles:\n        if matrix[i][0] == tile[0][0] and matrix[i][1] == tile[0][1]:\n            new_tiles = deepcopy(tiles)\n            new_tiles.remove(tile)\n            new_matrix = deepcopy(matrix)\n            new_matrix[i][0] = tile[0][0]\n            new_matrix[i][1] = tile[0][1]\n            new_matrix[0][i] = tile[1][0]\n            new_matrix[1][i] = tile[1][1]\n            if is_possible_recursive(new_tiles, new_matrix, i + 1):\n                return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            c, d = map(int, input().split())\n            tiles.append([[a, b], [c, d]])\n        if is_possible(tiles, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([list(map(int, input().split())), list(map(int, input().split()))])\n        if m == 1:\n            print(\"YES\")\n            continue\n        if n == 1:\n            print(\"YES\" if tiles[0][0][0] == tiles[0][1][1] and tiles[0][0][1] == tiles[0][1][0] else \"NO\")\n            continue\n        if m % 2 == 1:\n            print(\"NO\")\n            continue\n        if n % 2 == 1:\n            print(\"NO\")\n            continue\n        if m == 2:\n            print(\"YES\" if tiles[0][0][0] == tiles[0][1][1] and tiles[0][0][1] == tiles[0][1][0] else \"NO\")\n            continue\n        if n == 2:\n            print(\"YES\" if tiles[0][0][0] == tiles[1][1][1] and tiles[0][0][1] == tiles[1][1][0] else \"NO\")\n            continue\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef is_symmetric(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef check_tile(tile, matrix, i, j):\n    if i + 1 >= len(matrix) or j + 1 >= len(matrix[i]):\n        return False\n    if matrix[i][j] == -1 and matrix[i][j + 1] == -1 and matrix[i + 1][j] == -1 and matrix[i + 1][j + 1] == -1:\n        matrix[i][j] = tile[0][0]\n        matrix[i][j + 1] = tile[0][1]\n        matrix[i + 1][j] = tile[1][0]\n        matrix[i + 1][j + 1] = tile[1][1]\n        return True\n    return False\n\ndef check_matrix(matrix, tiles):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == -1:\n                for tile in tiles:\n                    if check_tile(tile, matrix, i, j):\n                        break\n    return is_symmetric(matrix)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([list(map(int, input().split())), list(map(int, input().split()))])\n        matrix = [[-1 for _ in range(m)] for _ in range(m)]\n        if check_matrix(matrix, tiles):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([list(map(int, input().split())) for _ in range(2)])\n        if m % 2 == 1:\n            print(\"NO\")\n            continue\n        if n == 1:\n            print(\"YES\")\n            continue\n        if n == 2:\n            if tiles[0][0][0] == tiles[0][1][1] and tiles[0][0][1] == tiles[0][1][0] and tiles[1][0][0] == tiles[1][1][1] and tiles[1][0][1] == tiles[1][1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        for i in range(n):\n            for j in range(n):\n                if tiles[i][0][0] == tiles[j][0][0] and tiles[i][0][1] == tiles[j][0][1] and tiles[i][1][0] == tiles[j][1][0] and tiles[i][1][1] == tiles[j][1][1]:\n                    print(\"NO\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef check_tile(tile):\n    if tile[0][0] == tile[0][1] and tile[1][0] == tile[1][1]:\n        return True\n    if tile[0][0] == tile[1][0] and tile[0][1] == tile[1][1]:\n        return True\n    if tile[0][0] == tile[1][1] and tile[0][1] == tile[1][0]:\n        return True\n    return False\n\ndef check_square(square):\n    for i in range(len(square)):\n        for j in range(len(square[i])):\n            if square[i][j] != square[j][i]:\n                return False\n    return True\n\ndef check_tiles(tiles):\n    for i in range(len(tiles)):\n        if not check_tile(tiles[i]):\n            return False\n    return True\n\ndef check_solution(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square[i])):\n            for k in range(len(tiles)):\n                if square[i][j] == tiles[k][0][0] and square[i][j+1] == tiles[k][0][1] and square[i+1][j] == tiles[k][1][0] and square[i+1][j+1] == tiles[k][1][1]:\n                    break\n            else:\n                return False\n    return True\n\ndef solve(tiles, square):\n    if not check_tiles(tiles):\n        return False\n    if not check_square(square):\n        return False\n    if not check_solution(tiles, square):\n        return False\n    return True\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())), list(map(int, input().split()))])\n        square = []\n        for i in range(m):\n            square.append(list(map(int, input().split())))\n        if solve(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append(list(map(int, sys.stdin.readline().split())))\n            tiles.append(list(map(int, sys.stdin.readline().split())))\n        tiles = sorted(tiles)\n        if n == 1:\n            print(\"YES\")\n            continue\n        if n == 2:\n            if tiles[0][0] == tiles[1][0] and tiles[0][1] == tiles[1][1] and tiles[2][0] == tiles[3][0] and tiles[2][1] == tiles[3][1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        if n == 3:\n            if tiles[0][0] == tiles[1][0] and tiles[0][1] == tiles[1][1] and tiles[2][0] == tiles[3][0] and tiles[2][1] == tiles[3][1] and tiles[4][0] == tiles[5][0] and tiles[4][1] == tiles[5][1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        if n == 4:\n            if tiles[0][0] == tiles[1][0] and tiles[0][1] == tiles[1][1] and tiles[2][0] == tiles[3][0] and tiles[2][1] == tiles[3][1] and tiles[4][0] == tiles[5][0] and tiles[4][1] == tiles[5][1] and tiles[6][0] == tiles[7][0] and tiles[6][1] == tiles[7][1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"]