2022-04-20 00:59:33.483009 """
Masha has $n$ types of tiles of size $2 \times 2$. Each cell of the tile contains one integer. Masha has an infinite number of tiles of each type.

Masha decides to construct the square of size $m \times m$ consisting of the given tiles. This square also has to be a symmetric with respect to the main diagonal matrix, and each cell of this square has to be covered with exactly one tile cell, and also sides of tiles should be parallel to the sides of the square. All placed tiles cannot intersect with each other. Also, each tile should lie inside the square. See the picture in Notes section for better understanding.

Symmetric with respect to the main diagonal matrix is such a square $s$ that for each pair $(i, j)$ the condition $s[i][j] = s[j][i]$ holds. I.e. it is true that the element written in the $i$-row and $j$-th column equals to the element written in the $j$-th row and $i$-th column.

Your task is to determine if Masha can construct a square of size $m \times m$ which is a symmetric matrix and consists of tiles she has. Masha can use any number of tiles of each type she has to construct the square. Note that she can not rotate tiles, she can only place them in the orientation they have in the input.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 100$) — the number of test cases. Then $t$ test cases follow.

The first line of the test case contains two integers $n$ and $m$ ($1 \le n \le 100$, $1 \le m \le 100$) — the number of types of tiles and the size of the square Masha wants to construct.

The next $2n$ lines of the test case contain descriptions of tiles types. Types of tiles are written one after another, each type is written on two lines. 

The first line of the description contains two positive (greater than zero) integers not exceeding $100$ — the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding $100$ — the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.

It is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input.


-----Output-----

For each test case print the answer: "YES" (without quotes) if Masha can construct the square of size $m \times m$ which is a symmetric matrix. Otherwise, print "NO" (withtout quotes).


-----Example-----
Input
6
3 4
1 2
5 6
5 7
7 4
8 9
9 8
2 5
1 1
1 1
2 2
2 2
1 100
10 10
10 10
1 2
4 5
8 4
2 2
1 1
1 1
1 2
3 4
1 2
1 1
1 1

Output
YES
NO
YES
NO
YES
YES



-----Note-----

The first test case of the input has three types of tiles, they are shown on the picture below. [Image] 

Masha can construct, for example, the following square of size $4 \times 4$ which is a symmetric matrix: $\left. \begin{array}{|c|c|c|c|} \hline 5 & {7} & {8} & {9} \\ \hline 7 & {4} & {9} & {8} \\ \hline 8 & {9} & {5} & {7} \\ \hline 9 & {8} & {7} & {4} \\ \hline \end{array} \right.$
"""
2022-04-20 00:59:33.483032 --------------------------
2022-04-20 00:59:33.483133 using api key gabby
2022-04-20 01:00:57.300103 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef check_tile(tile):\n    if tile[0][0] == tile[0][1] and tile[1][0] == tile[1][1]:\n        return True\n    if tile[0][0] == tile[1][0] and tile[0][1] == tile[1][1]:\n        return True\n    if tile[0][0] == tile[1][1] and tile[0][1] == tile[1][0]:\n        return True\n    return False\n\ndef check_square(square):\n    for i in range(len(square)):\n        for j in range(len(square[i])):\n            if square[i][j] != square[j][i]:\n                return False\n    return True\n\ndef check_tiles(tiles):\n    for i in range(len(tiles)):\n        if not check_tile(tiles[i]):\n            return False\n    return True\n\ndef check_solution(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square[i])):\n            for k in range(len(tiles)):\n                if square[i][j] == tiles[k][0][0] and square[i][j+1] == tiles[k][0][1] and square[i+1][j] == tiles[k][1][0] and square[i+1][j+1] == tiles[k][1][1]:\n                    break\n            else:\n                return False\n    return True\n\ndef solve(tiles, square):\n    if not check_tiles(tiles):\n        return False\n    if not check_square(square):\n        return False\n    if not check_solution(tiles, square):\n        return False\n    return True\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())), list(map(int, input().split()))])\n        square = []\n        for i in range(m):\n            square.append(list(map(int, input().split())))\n        if solve(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append(list(map(int, sys.stdin.readline().split())))\n            tiles.append(list(map(int, sys.stdin.readline().split())))\n        tiles = sorted(tiles)\n        if n == 1:\n            print(\"YES\")\n            continue\n        if n == 2:\n            if tiles[0][0] == tiles[1][0] and tiles[0][1] == tiles[1][1] and tiles[2][0] == tiles[3][0] and tiles[2][1] == tiles[3][1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        if n == 3:\n            if tiles[0][0] == tiles[1][0] and tiles[0][1] == tiles[1][1] and tiles[2][0] == tiles[3][0] and tiles[2][1] == tiles[3][1] and tiles[4][0] == tiles[5][0] and tiles[4][1] == tiles[5][1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        if n == 4:\n            if tiles[0][0] == tiles[1][0] and tiles[0][1] == tiles[1][1] and tiles[2][0] == tiles[3][0] and tiles[2][1] == tiles[3][1] and tiles[4][0] == tiles[5][0] and tiles[4][1] == tiles[5][1] and tiles[6][0] == tiles[7][0] and tiles[6][1] == tiles[7][1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef is_symmetric(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef check_tile(tile, matrix, i, j):\n    if i + 1 >= len(matrix) or j + 1 >= len(matrix[i]):\n        return False\n    if matrix[i][j] == -1 and matrix[i][j + 1] == -1 and matrix[i + 1][j] == -1 and matrix[i + 1][j + 1] == -1:\n        matrix[i][j] = tile[0][0]\n        matrix[i][j + 1] = tile[0][1]\n        matrix[i + 1][j] = tile[1][0]\n        matrix[i + 1][j + 1] = tile[1][1]\n        return True\n    return False\n\ndef check_matrix(matrix, tiles):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == -1:\n                for tile in tiles:\n                    if check_tile(tile, matrix, i, j):\n                        break\n    return is_symmetric(matrix)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([list(map(int, input().split())), list(map(int, input().split()))])\n        matrix = [[-1 for _ in range(m)] for _ in range(m)]\n        if check_matrix(matrix, tiles):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append(list(map(int, input().split())))\n            tiles.append(list(map(int, input().split())))\n        # print(tiles)\n        # print(n, m)\n        # print(tiles)\n        # print(tiles[0][0], tiles[0][1])\n        # print(tiles[1][0], tiles[1][1])\n        # print(tiles[2][0], tiles[2][1])\n        # print(tiles[3][0], tiles[3][1])\n        # print(tiles[4][0], tiles[4][1])\n        # print(tiles[5][0], tiles[5][1])\n        # print(tiles[6][0], tiles[6][1])\n        # print(tiles[7][0], tiles[7][1])\n        # print(tiles[8][0], tiles[8][1])\n        # print(tiles[9][0], tiles[9][1])\n        # print(tiles[10][0], tiles[10][1])\n        # print(tiles[11][0], tiles[11][1])\n        # print(tiles[12][0], tiles[12][1])\n        # print(tiles[13][0], tiles[13][1])\n        # print(tiles[14][0], tiles[14][1])\n        # print(tiles[15][0], tiles[15][1])\n        # print(tiles[16][0], tiles[16][1])\n        # print(tiles[17][0], tiles[17][1])\n        # print(tiles[18][0], tiles[18][1])\n        # print(tiles[19][0], tiles[19][1])\n        # print(tiles[20][0], tiles[20][1])\n        # print(tiles[21][0], tiles[21][1])\n        # print(tiles[22][0], tiles[22][1])\n        # print(tiles[23][0], tiles[23][1])\n        # print(tiles[24][0], tiles[24][1])\n        # print(tiles[25][0], tiles[25][1])\n        # print(tiles[26][0], tiles[26][1])\n        # print(tiles[27][0], tiles[27][1])\n        # print(tiles[28][0], tiles[28][1])\n        # print(tiles[29][0], tiles[29][1])\n        # print(tiles[30][0], tiles[30][1])\n        # print(tiles[31][0], tiles[31][1])\n        # print(tiles[32][0], tiles[32][1])\n        # print(tiles[33][0], tiles[33][1])\n        # print(tiles[34][0], tiles[34][1])\n        # print(tiles[35][0], tiles[35][1])\n        # print(tiles[36][0], tiles[36][1])\n        # print(tiles[37][0], tiles[37][1])\n        # print(tiles[38][0], tiles[38][1])\n        # print(tiles[39][0], tiles[39][1])\n        # print(tiles[40][0], tiles[40][1])\n        # print(tiles[41][0], tiles[41][1])\n        # print(tiles[42][0], tiles[42][1])\n        # print(tiles[43][0], tiles[43][1])\n        # print(tiles[44][0], tiles[44][1])\n        # print(tiles[45][0], tiles[45][1])\n        # print(tiles[46][0], tiles[46][1])\n        # print(tiles[47][0], tiles[47][1])\n        # print(tiles[48][0], tiles[48][1])\n        # print(tiles[49][0], tiles[49][1])\n        # print(tiles[50][0], tiles[50][1])\n        # print(tiles[51][0], tiles[51][1])\n        # print(tiles[52][0], tiles[52][1])\n        # print(tiles[53][0], tiles[53][1])\n        # print(tiles[54][0], tiles[54][1])\n        # print(tiles[55][0], tiles[55][1])\n        # print(tiles[56][0], tiles[56][1])\n        # print(tiles[57][0], tiles[57][1])\n        # print(tiles[58][0], tiles[58][1])\n        # print(tiles[59][0], tiles[59][1])\n        # print(tiles[60][0], tiles[60][1])\n        # print(tiles[61][0], tiles[61][1])\n        # print(tiles[62][0], tiles[62][1])\n        # print(tiles[63][0], tiles[63][1])\n        # print(tiles[64][0], tiles[64][1])\n        # print(tiles[65][0], tiles[65][1])\n        # print(tiles[66][0], tiles[66][1])\n        # print(tiles[67][0], tiles[67][1])\n        # print(tiles[68][0], tiles[68][1])\n        # print(tiles[69][0], tiles[69][1])\n        # print(tiles[70][0], tiles[70][1])\n        # print(tiles[71][0], tiles[71][1])\n        # print(tiles[72][0], tiles[72][1])\n        # print(tiles[73][0], tiles[73][1])\n        # print(tiles[74][0], tiles[74][1])\n        # print(tiles[75][0], tiles[75][1])\n        # print(tiles[76][0], tiles[76][1])\n        # print(tiles[77][0], tiles[77][1])\n        # print(tiles[78][0], tiles[78][1])\n        # print(tiles[79][0], tiles[79][1])\n        # print(tiles[80][0], tiles[80][1])\n        # print(tiles[81][0], tiles[81][1])\n        # print(tiles[82][0], tiles[82][1])\n        # print(tiles[83][0], tiles[83][1])\n        # print(tiles[84][0], tiles[84][1])\n        # print(tiles[85][0], tiles[85][1])\n        # print(tiles[86][0], tiles[86][1])\n        # print(tiles[87][0], tiles[87][1])\n        # print(tiles[88][0], tiles[88][1])\n        # print(tiles[89][0], tiles[89][1])\n        # print(tiles[90][0], tiles[90][1])\n        # print(tiles[91][0], tiles[91][1])\n        # print(tiles[92][0], tiles[92][1])\n        # print(tiles[93][0], tiles[93][1])\n        # print(tiles[94][0], tiles[94][1])\n        # print(tiles[95][0], tiles[95][1])\n        # print(tiles[96][0], tiles[96][1])\n        # print(tiles[97][0], tiles[97][1])\n        # print(tiles[98][0], tiles[98][1])\n        # print(tiles[99][0], tiles[99][1])\n        # print(tiles[100][0], tiles[100][1])\n        # print(tiles[101][0], tiles[101][1])\n        # print(tiles[102][0], tiles[102][1])\n        # print(tiles[103][0], tiles[103][1])\n        # print(tiles[104][0], tiles[104][1])\n        # print(tiles[105][0], tiles[105][1])\n        # print(tiles[106][0], tiles[106][1])\n        # print(tiles[107][0], tiles[107][1])\n        # print(tiles[108][0], tiles[108][1])\n        # print(tiles[109][0], tiles[109][1])\n        # print(tiles[110][0], tiles[110][1])\n        # print(tiles[111][0], tiles[111][1])\n        # print(tiles[112][0], tiles[112][1])\n        # print(tiles[113][0], tiles[113][1])\n        # print(tiles[114][0], tiles[114][1])\n        # print(tiles[115][0], tiles[115][1])\n        # print(tiles[116][0], tiles[116][1])\n        # print(tiles[117][0], tiles[117][1])\n        # print(tiles[118][0], tiles[118][1])\n        # print(tiles[119][0], tiles[119][1])\n        # print(tiles[120][0], tiles[120][1])\n        # print(tiles[121][0], tiles[121][1])\n        # print(tiles[122][0], tiles[122][1])\n        # print(tiles[123][0], tiles[123][1])\n        # print(tiles[124][0], tiles[124][1])\n        # print(tiles[125][0], tiles[125][1])\n        # print(tiles[126][0], tiles[126][1])\n        # print(tiles[127][0], tiles[127][1])\n        # print(tiles[128][0], tiles[128][1])\n        # print(tiles[129][0], tiles[129][1])\n        # print(tiles[130][0], tiles[130][1])\n        # print(tiles[131][0], tiles[131][1])\n        # print(tiles[132][0], tiles[132][1])\n        # print(tiles[133][0], tiles[133][1])\n        # print(tiles[134][0], tiles[134][1])\n        # print(tiles[135][0], tiles[135][1])\n        # print(tiles[136][0], tiles[136][1])\n        # print(tiles[137][0], tiles[137][1])\n        # print(tiles[138][0], tiles[138][1])\n        # print(tiles[139][0], tiles[139][1])\n        # print(tiles[140][0], tiles[140][1])\n        # print(tiles[141][0], tiles[141][1])\n        # print(tiles[142][0], tiles[142][1])\n        # print(tiles[143][0], tiles[143][1])\n        # print(tiles[144][0], tiles[144][1])\n        # print(tiles[145][0], tiles[145][1])\n        # print(tiles[146][0], tiles[146][1])\n        # print(tiles[147][0], tiles[147][1])\n        # print(tiles[148][0], tiles[148][1])\n        # print(tiles[149][0], tiles[149][1])\n        # print(tiles[150][0], tiles[150][1])\n        # print(tiles[151][0], tiles[151][1])\n        # print(tiles[152][0], tiles[152][1])\n        # print(tiles[153][0], tiles[153][1])\n        # print(tiles[154][0], tiles[154][1])\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef check_symmetry(square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] != square[j][i]:\n                return False\n    return True\n\ndef check_tiles(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if tile[0][0] == square[i][j+1] and tile[0][1] == square[i+1][j+1] and tile[1][0] == square[i+1][j] and tile[1][1] == square[i][j]:\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        return True\n                return False\n    return True\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if tile[0][0] == square[i][j+1] and tile[0][1] == square[i+1][j+1] and tile[1][0] == square[i+1][j] and tile[1][1] == square[i][j]:\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        if check_tiles(tiles, square):\n                            return True\n                        else:\n                            square[i][j] = 0\n                            square[i][j+1] = 0\n                            square[i+1][j] = 0\n                            square[i+1][j+1] = 0\n                return False\n    return True\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = [int(x) for x in input().split()]\n        tiles = []\n        for _ in range(n):\n            tiles.append([[int(x) for x in input().split()], [int(x) for x in input().split()]])\n        square = [[0 for _ in range(m)] for _ in range(m)]\n        if check_square(tiles, square) and check_symmetry(square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([list(map(int, input().split())) for _ in range(2)])\n        if m % 2 == 1:\n            print(\"NO\")\n            continue\n        if n == 1:\n            print(\"YES\")\n            continue\n        if n == 2:\n            if tiles[0][0][0] == tiles[0][1][1] and tiles[0][0][1] == tiles[0][1][0] and tiles[1][0][0] == tiles[1][1][1] and tiles[1][0][1] == tiles[1][1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        for i in range(n):\n            for j in range(n):\n                if tiles[i][0][0] == tiles[j][0][0] and tiles[i][0][1] == tiles[j][0][1] and tiles[i][1][0] == tiles[j][1][0] and tiles[i][1][1] == tiles[j][1][1]:\n                    print(\"NO\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([list(map(int, input().split())), list(map(int, input().split()))])\n        if m == 1:\n            print(\"YES\")\n            continue\n        if n == 1:\n            print(\"YES\" if tiles[0][0][0] == tiles[0][1][1] and tiles[0][0][1] == tiles[0][1][0] else \"NO\")\n            continue\n        if m % 2 == 1:\n            print(\"NO\")\n            continue\n        if n % 2 == 1:\n            print(\"NO\")\n            continue\n        if m == 2:\n            print(\"YES\" if tiles[0][0][0] == tiles[0][1][1] and tiles[0][0][1] == tiles[0][1][0] else \"NO\")\n            continue\n        if n == 2:\n            print(\"YES\" if tiles[0][0][0] == tiles[1][1][1] and tiles[0][0][1] == tiles[1][1][0] else \"NO\")\n            continue\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nfrom copy import deepcopy\n\ndef is_valid(matrix):\n    for i in range(len(matrix)):\n        for j in range(i + 1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef is_possible(tiles, size):\n    if size % 2 == 1:\n        return False\n    if size == 2:\n        for tile in tiles:\n            if tile[0][0] == tile[1][1] and tile[0][1] == tile[1][0]:\n                return True\n        return False\n    for tile in tiles:\n        if tile[0][0] == tile[1][1] and tile[0][1] == tile[1][0]:\n            new_tiles = deepcopy(tiles)\n            new_tiles.remove(tile)\n            matrix = [[0 for _ in range(size)] for _ in range(size)]\n            matrix[0][0] = tile[0][0]\n            matrix[0][1] = tile[0][1]\n            matrix[1][0] = tile[1][0]\n            matrix[1][1] = tile[1][1]\n            if is_possible_recursive(new_tiles, matrix, 2):\n                return True\n    return False\n\ndef is_possible_recursive(tiles, matrix, i):\n    if i == len(matrix):\n        return is_valid(matrix)\n    for tile in tiles:\n        if matrix[i][0] == tile[0][0] and matrix[i][1] == tile[0][1]:\n            new_tiles = deepcopy(tiles)\n            new_tiles.remove(tile)\n            new_matrix = deepcopy(matrix)\n            new_matrix[i][0] = tile[0][0]\n            new_matrix[i][1] = tile[0][1]\n            new_matrix[0][i] = tile[1][0]\n            new_matrix[1][i] = tile[1][1]\n            if is_possible_recursive(new_tiles, new_matrix, i + 1):\n                return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            c, d = map(int, input().split())\n            tiles.append([[a, b], [c, d]])\n        if is_possible(tiles, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650416373,
  "id": "cmpl-4ysyrn75tbCnOlTXPA0JomfoegHlc",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 01:00:57.300632 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef check_tile(tile):\n    if tile[0][0] == tile[0][1] and tile[1][0] == tile[1][1]:\n        return True\n    if tile[0][0] == tile[1][0] and tile[0][1] == tile[1][1]:\n        return True\n    if tile[0][0] == tile[1][1] and tile[0][1] == tile[1][0]:\n        return True\n    return False\n\ndef check_square(square):\n    for i in range(len(square)):\n        for j in range(len(square[i])):\n            if square[i][j] != square[j][i]:\n                return False\n    return True\n\ndef check_tiles(tiles):\n    for i in range(len(tiles)):\n        if not check_tile(tiles[i]):\n            return False\n    return True\n\ndef check_solution(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square[i])):\n            for k in range(len(tiles)):\n                if square[i][j] == tiles[k][0][0] and square[i][j+1] == tiles[k][0][1] and square[i+1][j] == tiles[k][1][0] and square[i+1][j+1] == tiles[k][1][1]:\n                    break\n            else:\n                return False\n    return True\n\ndef solve(tiles, square):\n    if not check_tiles(tiles):\n        return False\n    if not check_square(square):\n        return False\n    if not check_solution(tiles, square):\n        return False\n    return True\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())), list(map(int, input().split()))])\n        square = []\n        for i in range(m):\n            square.append(list(map(int, input().split())))\n        if solve(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:00:57.300690 REASON stop
2022-04-20 01:00:57.301173 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append(list(map(int, sys.stdin.readline().split())))\n            tiles.append(list(map(int, sys.stdin.readline().split())))\n        tiles = sorted(tiles)\n        if n == 1:\n            print(\"YES\")\n            continue\n        if n == 2:\n            if tiles[0][0] == tiles[1][0] and tiles[0][1] == tiles[1][1] and tiles[2][0] == tiles[3][0] and tiles[2][1] == tiles[3][1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        if n == 3:\n            if tiles[0][0] == tiles[1][0] and tiles[0][1] == tiles[1][1] and tiles[2][0] == tiles[3][0] and tiles[2][1] == tiles[3][1] and tiles[4][0] == tiles[5][0] and tiles[4][1] == tiles[5][1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        if n == 4:\n            if tiles[0][0] == tiles[1][0] and tiles[0][1] == tiles[1][1] and tiles[2][0] == tiles[3][0] and tiles[2][1] == tiles[3][1] and tiles[4][0] == tiles[5][0] and tiles[4][1] == tiles[5][1] and tiles[6][0] == tiles[7][0] and tiles[6][1] == tiles[7][1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:00:57.301241 REASON stop
2022-04-20 01:00:57.301650 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef is_symmetric(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef check_tile(tile, matrix, i, j):\n    if i + 1 >= len(matrix) or j + 1 >= len(matrix[i]):\n        return False\n    if matrix[i][j] == -1 and matrix[i][j + 1] == -1 and matrix[i + 1][j] == -1 and matrix[i + 1][j + 1] == -1:\n        matrix[i][j] = tile[0][0]\n        matrix[i][j + 1] = tile[0][1]\n        matrix[i + 1][j] = tile[1][0]\n        matrix[i + 1][j + 1] = tile[1][1]\n        return True\n    return False\n\ndef check_matrix(matrix, tiles):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == -1:\n                for tile in tiles:\n                    if check_tile(tile, matrix, i, j):\n                        break\n    return is_symmetric(matrix)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([list(map(int, input().split())), list(map(int, input().split()))])\n        matrix = [[-1 for _ in range(m)] for _ in range(m)]\n        if check_matrix(matrix, tiles):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:00:57.301718 REASON stop
2022-04-20 01:00:57.326799 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append(list(map(int, input().split())))\n            tiles.append(list(map(int, input().split())))\n        # print(tiles)\n        # print(n, m)\n        # print(tiles)\n        # print(tiles[0][0], tiles[0][1])\n        # print(tiles[1][0], tiles[1][1])\n        # print(tiles[2][0], tiles[2][1])\n        # print(tiles[3][0], tiles[3][1])\n        # print(tiles[4][0], tiles[4][1])\n        # print(tiles[5][0], tiles[5][1])\n        # print(tiles[6][0], tiles[6][1])\n        # print(tiles[7][0], tiles[7][1])\n        # print(tiles[8][0], tiles[8][1])\n        # print(tiles[9][0], tiles[9][1])\n        # print(tiles[10][0], tiles[10][1])\n        # print(tiles[11][0], tiles[11][1])\n        # print(tiles[12][0], tiles[12][1])\n        # print(tiles[13][0], tiles[13][1])\n        # print(tiles[14][0], tiles[14][1])\n        # print(tiles[15][0], tiles[15][1])\n        # print(tiles[16][0], tiles[16][1])\n        # print(tiles[17][0], tiles[17][1])\n        # print(tiles[18][0], tiles[18][1])\n        # print(tiles[19][0], tiles[19][1])\n        # print(tiles[20][0], tiles[20][1])\n        # print(tiles[21][0], tiles[21][1])\n        # print(tiles[22][0], tiles[22][1])\n        # print(tiles[23][0], tiles[23][1])\n        # print(tiles[24][0], tiles[24][1])\n        # print(tiles[25][0], tiles[25][1])\n        # print(tiles[26][0], tiles[26][1])\n        # print(tiles[27][0], tiles[27][1])\n        # print(tiles[28][0], tiles[28][1])\n        # print(tiles[29][0], tiles[29][1])\n        # print(tiles[30][0], tiles[30][1])\n        # print(tiles[31][0], tiles[31][1])\n        # print(tiles[32][0], tiles[32][1])\n        # print(tiles[33][0], tiles[33][1])\n        # print(tiles[34][0], tiles[34][1])\n        # print(tiles[35][0], tiles[35][1])\n        # print(tiles[36][0], tiles[36][1])\n        # print(tiles[37][0], tiles[37][1])\n        # print(tiles[38][0], tiles[38][1])\n        # print(tiles[39][0], tiles[39][1])\n        # print(tiles[40][0], tiles[40][1])\n        # print(tiles[41][0], tiles[41][1])\n        # print(tiles[42][0], tiles[42][1])\n        # print(tiles[43][0], tiles[43][1])\n        # print(tiles[44][0], tiles[44][1])\n        # print(tiles[45][0], tiles[45][1])\n        # print(tiles[46][0], tiles[46][1])\n        # print(tiles[47][0], tiles[47][1])\n        # print(tiles[48][0], tiles[48][1])\n        # print(tiles[49][0], tiles[49][1])\n        # print(tiles[50][0], tiles[50][1])\n        # print(tiles[51][0], tiles[51][1])\n        # print(tiles[52][0], tiles[52][1])\n        # print(tiles[53][0], tiles[53][1])\n        # print(tiles[54][0], tiles[54][1])\n        # print(tiles[55][0], tiles[55][1])\n        # print(tiles[56][0], tiles[56][1])\n        # print(tiles[57][0], tiles[57][1])\n        # print(tiles[58][0], tiles[58][1])\n        # print(tiles[59][0], tiles[59][1])\n        # print(tiles[60][0], tiles[60][1])\n        # print(tiles[61][0], tiles[61][1])\n        # print(tiles[62][0], tiles[62][1])\n        # print(tiles[63][0], tiles[63][1])\n        # print(tiles[64][0], tiles[64][1])\n        # print(tiles[65][0], tiles[65][1])\n        # print(tiles[66][0], tiles[66][1])\n        # print(tiles[67][0], tiles[67][1])\n        # print(tiles[68][0], tiles[68][1])\n        # print(tiles[69][0], tiles[69][1])\n        # print(tiles[70][0], tiles[70][1])\n        # print(tiles[71][0], tiles[71][1])\n        # print(tiles[72][0], tiles[72][1])\n        # print(tiles[73][0], tiles[73][1])\n        # print(tiles[74][0], tiles[74][1])\n        # print(tiles[75][0], tiles[75][1])\n        # print(tiles[76][0], tiles[76][1])\n        # print(tiles[77][0], tiles[77][1])\n        # print(tiles[78][0], tiles[78][1])\n        # print(tiles[79][0], tiles[79][1])\n        # print(tiles[80][0], tiles[80][1])\n        # print(tiles[81][0], tiles[81][1])\n        # print(tiles[82][0], tiles[82][1])\n        # print(tiles[83][0], tiles[83][1])\n        # print(tiles[84][0], tiles[84][1])\n        # print(tiles[85][0], tiles[85][1])\n        # print(tiles[86][0], tiles[86][1])\n        # print(tiles[87][0], tiles[87][1])\n        # print(tiles[88][0], tiles[88][1])\n        # print(tiles[89][0], tiles[89][1])\n        # print(tiles[90][0], tiles[90][1])\n        # print(tiles[91][0], tiles[91][1])\n        # print(tiles[92][0], tiles[92][1])\n        # print(tiles[93][0], tiles[93][1])\n        # print(tiles[94][0], tiles[94][1])\n        # print(tiles[95][0], tiles[95][1])\n        # print(tiles[96][0], tiles[96][1])\n        # print(tiles[97][0], tiles[97][1])\n        # print(tiles[98][0], tiles[98][1])\n        # print(tiles[99][0], tiles[99][1])\n        # print(tiles[100][0], tiles[100][1])\n        # print(tiles[101][0], tiles[101][1])\n        # print(tiles[102][0], tiles[102][1])\n        # print(tiles[103][0], tiles[103][1])\n        # print(tiles[104][0], tiles[104][1])\n        # print(tiles[105][0], tiles[105][1])\n        # print(tiles[106][0], tiles[106][1])\n        # print(tiles[107][0], tiles[107][1])\n        # print(tiles[108][0], tiles[108][1])\n        # print(tiles[109][0], tiles[109][1])\n        # print(tiles[110][0], tiles[110][1])\n        # print(tiles[111][0], tiles[111][1])\n        # print(tiles[112][0], tiles[112][1])\n        # print(tiles[113][0], tiles[113][1])\n        # print(tiles[114][0], tiles[114][1])\n        # print(tiles[115][0], tiles[115][1])\n        # print(tiles[116][0], tiles[116][1])\n        # print(tiles[117][0], tiles[117][1])\n        # print(tiles[118][0], tiles[118][1])\n        # print(tiles[119][0], tiles[119][1])\n        # print(tiles[120][0], tiles[120][1])\n        # print(tiles[121][0], tiles[121][1])\n        # print(tiles[122][0], tiles[122][1])\n        # print(tiles[123][0], tiles[123][1])\n        # print(tiles[124][0], tiles[124][1])\n        # print(tiles[125][0], tiles[125][1])\n        # print(tiles[126][0], tiles[126][1])\n        # print(tiles[127][0], tiles[127][1])\n        # print(tiles[128][0], tiles[128][1])\n        # print(tiles[129][0], tiles[129][1])\n        # print(tiles[130][0], tiles[130][1])\n        # print(tiles[131][0], tiles[131][1])\n        # print(tiles[132][0], tiles[132][1])\n        # print(tiles[133][0], tiles[133][1])\n        # print(tiles[134][0], tiles[134][1])\n        # print(tiles[135][0], tiles[135][1])\n        # print(tiles[136][0], tiles[136][1])\n        # print(tiles[137][0], tiles[137][1])\n        # print(tiles[138][0], tiles[138][1])\n        # print(tiles[139][0], tiles[139][1])\n        # print(tiles[140][0], tiles[140][1])\n        # print(tiles[141][0], tiles[141][1])\n        # print(tiles[142][0], tiles[142][1])\n        # print(tiles[143][0], tiles[143][1])\n        # print(tiles[144][0], tiles[144][1])\n        # print(tiles[145][0], tiles[145][1])\n        # print(tiles[146][0], tiles[146][1])\n        # print(tiles[147][0], tiles[147][1])\n        # print(tiles[148][0], tiles[148][1])\n        # print(tiles[149][0], tiles[149][1])\n        # print(tiles[150][0], tiles[150][1])\n        # print(tiles[151][0], tiles[151][1])\n        # print(tiles[152][0], tiles[152][1])\n        # print(tiles[153][0], tiles[153][1])\n        # print(tiles[154][0], tiles[154][1])\n"
}
2022-04-20 01:00:57.326996 REASON length
2022-04-20 01:00:57.327006 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef check_symmetry(square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] != square[j][i]:\n                return False\n    return True\n\ndef check_tiles(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if tile[0][0] == square[i][j+1] and tile[0][1] == square[i+1][j+1] and tile[1][0] == square[i+1][j] and tile[1][1] == square[i][j]:\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        return True\n                return False\n    return True\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if tile[0][0] == square[i][j+1] and tile[0][1] == square[i+1][j+1] and tile[1][0] == square[i+1][j] and tile[1][1] == square[i][j]:\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        if check_tiles(tiles, square):\n                            return True\n                        else:\n                            square[i][j] = 0\n                            square[i][j+1] = 0\n                            square[i+1][j] = 0\n                            square[i+1][j+1] = 0\n                return False\n    return True\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = [int(x) for x in input().split()]\n        tiles = []\n        for _ in range(n):\n            tiles.append([[int(x) for x in input().split()], [int(x) for x in input().split()]])\n        square = [[0 for _ in range(m)] for _ in range(m)]\n        if check_square(tiles, square) and check_symmetry(square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 01:00:57.327048 REASON stop
2022-04-20 01:00:57.327498 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([list(map(int, input().split())) for _ in range(2)])\n        if m % 2 == 1:\n            print(\"NO\")\n            continue\n        if n == 1:\n            print(\"YES\")\n            continue\n        if n == 2:\n            if tiles[0][0][0] == tiles[0][1][1] and tiles[0][0][1] == tiles[0][1][0] and tiles[1][0][0] == tiles[1][1][1] and tiles[1][0][1] == tiles[1][1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        for i in range(n):\n            for j in range(n):\n                if tiles[i][0][0] == tiles[j][0][0] and tiles[i][0][1] == tiles[j][0][1] and tiles[i][1][0] == tiles[j][1][0] and tiles[i][1][1] == tiles[j][1][1]:\n                    print(\"NO\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:00:57.327576 REASON stop
2022-04-20 01:00:57.328727 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            tiles.append([list(map(int, input().split())), list(map(int, input().split()))])\n        if m == 1:\n            print(\"YES\")\n            continue\n        if n == 1:\n            print(\"YES\" if tiles[0][0][0] == tiles[0][1][1] and tiles[0][0][1] == tiles[0][1][0] else \"NO\")\n            continue\n        if m % 2 == 1:\n            print(\"NO\")\n            continue\n        if n % 2 == 1:\n            print(\"NO\")\n            continue\n        if m == 2:\n            print(\"YES\" if tiles[0][0][0] == tiles[0][1][1] and tiles[0][0][1] == tiles[0][1][0] else \"NO\")\n            continue\n        if n == 2:\n            print(\"YES\" if tiles[0][0][0] == tiles[1][1][1] and tiles[0][0][1] == tiles[1][1][0] else \"NO\")\n            continue\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:00:57.328831 REASON stop
2022-04-20 01:00:57.329413 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nfrom copy import deepcopy\n\ndef is_valid(matrix):\n    for i in range(len(matrix)):\n        for j in range(i + 1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef is_possible(tiles, size):\n    if size % 2 == 1:\n        return False\n    if size == 2:\n        for tile in tiles:\n            if tile[0][0] == tile[1][1] and tile[0][1] == tile[1][0]:\n                return True\n        return False\n    for tile in tiles:\n        if tile[0][0] == tile[1][1] and tile[0][1] == tile[1][0]:\n            new_tiles = deepcopy(tiles)\n            new_tiles.remove(tile)\n            matrix = [[0 for _ in range(size)] for _ in range(size)]\n            matrix[0][0] = tile[0][0]\n            matrix[0][1] = tile[0][1]\n            matrix[1][0] = tile[1][0]\n            matrix[1][1] = tile[1][1]\n            if is_possible_recursive(new_tiles, matrix, 2):\n                return True\n    return False\n\ndef is_possible_recursive(tiles, matrix, i):\n    if i == len(matrix):\n        return is_valid(matrix)\n    for tile in tiles:\n        if matrix[i][0] == tile[0][0] and matrix[i][1] == tile[0][1]:\n            new_tiles = deepcopy(tiles)\n            new_tiles.remove(tile)\n            new_matrix = deepcopy(matrix)\n            new_matrix[i][0] = tile[0][0]\n            new_matrix[i][1] = tile[0][1]\n            new_matrix[0][i] = tile[1][0]\n            new_matrix[1][i] = tile[1][1]\n            if is_possible_recursive(new_tiles, new_matrix, i + 1):\n                return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            c, d = map(int, input().split())\n            tiles.append([[a, b], [c, d]])\n        if is_possible(tiles, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:00:57.329576 REASON stop
