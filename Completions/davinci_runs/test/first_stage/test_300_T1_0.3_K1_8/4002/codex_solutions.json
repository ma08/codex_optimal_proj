["\n\ndef solve(n, m, k, matrix):\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            for l in range(k):\n                dp[i][l] = max(dp[i][l], dp[i - 1][l])\n                dp[i][(l + matrix[i][j]) % k] = max(dp[i][(l + matrix[i][j]) % k], dp[i - 1][l] + matrix[i][j])\n    return dp[n - 1][0]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, k, matrix))\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    dp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n            if j + 1 <= m // 2:\n                dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j] + a[i][j])\n    print(dp[n][m // 2])\n\nif __name__ == '__main__':\n    main()", "\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(n):\n    for j in range(m):\n        dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j], dp[i][j] + a[i][j])\n\nprint(dp[n][m])", "\n\nimport sys\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    matrix = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            dp[i + 1][j + 1] = dp[i + 1][j] + matrix[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for l in range(m // 2 + 1):\n                for r in range(l, m + 1):\n                    if (dp[j][r] - dp[j][l]) % k > ans:\n                        ans = (dp[j][r] - dp[j][l]) % k\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\n# dp[i][j] = max sum of first i rows and j columns\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        # if we don't choose this element\n        dp[i][j] = dp[i][j - 1]\n        # if we choose this element\n        if j <= m // 2:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + a[i - 1][j - 1])\n\nprint(max(dp[n]))", "\n\nimport numpy as np\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = np.array([list(map(int, input().split())) for _ in range(n)])\n    a = a.reshape(n, m)\n    # print(a)\n\n    # dp[i][j] = max sum of first i rows, with j elements in each row\n    dp = np.zeros((n+1, m+1), dtype=int)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j > m/2:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n\n    # print(dp)\n    print(dp[n][int(m/2)])\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        s = 0\n        for j in range(m):\n            s += a[i][j]\n        ans += s // k\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0] * (m + 1) for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1][j - 1])\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[n][m // 2] - dp[n][m // 2 + 1])"]