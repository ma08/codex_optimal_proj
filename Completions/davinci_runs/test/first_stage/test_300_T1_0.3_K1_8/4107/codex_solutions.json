["\n\nimport sys\n\ndef solve(n, k, s):\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += i + 1\n            continue\n        if i == 0:\n            cost += 1\n            continue\n        if i == n - 1:\n            cost += n\n            continue\n        if s[i - 1] == '1':\n            continue\n        if s[i + 1] == '1':\n            continue\n        cost += i + 1\n    return cost\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    s = sys.stdin.readline().strip()\n    print(solve(n, k, s))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n\n    # print(n, k, s)\n    # print(type(n), type(k), type(s))\n\n    # \u5168\u90e8\u76f4\u63a5\u8fde\u63a5\n    cost_direct = 0\n    for i in range(1, n+1):\n        cost_direct += i\n\n    # \u5168\u90e8\u8def\u7531\u5668\u8fde\u63a5\n    cost_router = 0\n    for i in range(1, n+1):\n        if s[i-1] == '1':\n            cost_router += i\n\n    # \u5168\u90e8\u76f4\u63a5\u8fde\u63a5\n    cost_mix = 0\n    for i in range(1, n+1):\n        if s[i-1] == '1':\n            cost_mix += i\n        else:\n            cost_mix += min(i, n-i+1)\n\n    # print(cost_direct, cost_router, cost_mix)\n    print(min(cost_direct, cost_router, cost_mix))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n\n    # dp[i] is the minimum cost to connect rooms 1 to i\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + i\n        if s[i-1] == '1':\n            # if there is a router spot in room i,\n            # the minimum cost to connect rooms 1 to i\n            # is the minimum cost to connect rooms 1 to i-k-1\n            # plus the cost to place a router in room i\n            dp[i] = min(dp[i], dp[max(0, i-k-1)] + i)\n\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()", "\n\nn, k = map(int, input().split())\ns = input()\n\n# Idea:\n# 1. Find the first room that has a router\n# 2. Find the last room that has a router\n# 3. Find the first room that does not have a router\n# 4. Find the last room that does not have a router\n# 5. Calculate the cost of connecting the rooms that do not have a router\n# 6. Calculate the cost of connecting the rooms that have a router\n\n# 1. Find the first room that has a router\ni = 0\nwhile i < n and s[i] == '0':\n    i += 1\nfirst_router = i\n\n# 2. Find the last room that has a router\ni = n - 1\nwhile i >= 0 and s[i] == '0':\n    i -= 1\nlast_router = i\n\n# 3. Find the first room that does not have a router\ni = 0\nwhile i < n and s[i] == '1':\n    i += 1\nfirst_no_router = i\n\n# 4. Find the last room that does not have a router\ni = n - 1\nwhile i >= 0 and s[i] == '1':\n    i -= 1\nlast_no_router = i\n\n# 5. Calculate the cost of connecting the rooms that do not have a router\ncost_no_router = 0\nfor i in range(first_no_router, last_no_router + 1):\n    cost_no_router += i + 1\n\n# 6. Calculate the cost of connecting the rooms that have a router\ncost_router = 0\nfor i in range(first_router, last_router + 1):\n    cost_router += i + 1\n\nprint(min(cost_no_router, cost_router))", "\n\nn, k = map(int, input().split())\ns = input()\n\ncost = 0\n\nfor i in range(n):\n    if s[i] == '1':\n        cost += i + 1\n    else:\n        if i == 0:\n            cost += 1\n        else:\n            if i - k > 0:\n                if s[i - k - 1] == '0':\n                    cost += i + 1\n            else:\n                cost += i + 1\n\nprint(cost)", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    cost = 0\n    for i in range(n):\n        if s[i] == '0':\n            cost += i + 1\n    print(cost)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    s = [int(i) for i in s]\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + i\n        if s[i - 1] == 1:\n            dp[i] = min(dp[i], dp[max(0, i - k - 1)] + i)\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()", "\n\nn, k = map(int, input().split())\ns = input()\n\n# The number of routers that can be placed\nr = sum(map(int, s))\n\n# The number of routers that can be placed is not greater than the number of routers you have\nif r > k:\n    r = k\n\n# The number of routers that can be placed is not greater than the number of rooms which have a spot for a router\nif r > n:\n    r = n\n\n# The total cost of connection is the sum of the cost of placing a router in the $i$-th room and the cost of connecting the room $i$ directly\nprint(sum(map(int, s)) + sum(range(1, n + 1)))"]