["\n\n# Solution\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n    divisors.sort()\n    if divisors[0] == 2:\n        print(2*divisors[-1])\n    else:\n        print(-1)", "\n\n# SOLUTION\n# The smallest possible number is the product of the smallest prime factors of all the numbers in the list.\n# The largest possible number is the product of the largest prime factors of all the numbers in the list.\n# The smallest possible number is the product of the smallest prime factors of all the numbers in the list.\n# The largest possible number is the product of the largest prime factors of all the numbers in the list.\n# If the largest possible number is greater than the product of all the numbers in the list, then the answer is the largest possible number.\n# Otherwise, the answer is -1.\n\n# We can use a Sieve of Eratosthenes to find the prime factors of all the numbers in the list.\n\n# TIME: O(n * log(log(n)))\n# SPACE: O(n)\n\nimport math\n\ndef find_smallest_possible_number(numbers):\n    max_number = max(numbers)\n    prime_factors = sieve_of_eratosthenes(max_number)\n    smallest_possible_number = 1\n    for number in numbers:\n        smallest_possible_number *= prime_factors[number]\n    return smallest_possible_number\n\ndef find_largest_possible_number(numbers):\n    max_number = max(numbers)\n    prime_factors = sieve_of_eratosthenes(max_number)\n    largest_possible_number = 1\n    for number in numbers:\n        largest_possible_number *= prime_factors[number]\n    return largest_possible_number\n\ndef sieve_of_eratosthenes(max_number):\n    prime_factors = [0] * (max_number + 1)\n    for number in range(2, max_number + 1):\n        if prime_factors[number] == 0:\n            prime_factors[number] = number\n            for multiple in range(number * 2, max_number + 1, number):\n                if prime_factors[multiple] == 0:\n                    prime_factors[multiple] = number\n    return prime_factors\n\ndef main():\n    number_of_queries = int(input())\n    for _ in range(number_of_queries):\n        number_of_divisors = int(input())\n        divisors = [int(x) for x in input().split()]\n        smallest_possible_number = find_smallest_possible_number(divisors)\n        largest_possible_number = find_largest_possible_number(divisors)\n        if largest_possible_number > smallest_possible_number:\n            print(largest_possible_number)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        divisors = list(map(int, input().split()))\n        divisors.sort()\n        if divisors[0] == 2:\n            print(divisors[-1]*2)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        divisors = [int(x) for x in input().split()]\n        divisors.sort()\n        if n == 1:\n            print(divisors[0]*2)\n        elif n == 2:\n            print(divisors[0]*divisors[1])\n        else:\n            for i in range(1, n-1):\n                if divisors[i] != divisors[i-1] * divisors[i+1]:\n                    print(-1)\n                    break\n            else:\n                print(divisors[0]*divisors[-1])\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        divisors = list(map(int, sys.stdin.readline().split()))\n        divisors.sort()\n        if n == 1:\n            print(divisors[0] * 2)\n        else:\n            print(divisors[0] * divisors[n - 1])\n\nif __name__ == '__main__':\n    main()", "\n\n# Solution\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n    divisors.sort()\n    if n == 1:\n        print(divisors[0] * 2)\n    else:\n        max_divisor = divisors[-1]\n        for j in range(n-1):\n            if divisors[j] * 2 != divisors[j+1]:\n                print(divisors[j] * divisors[j+1])\n                break\n        else:\n            print(max_divisor * 2)", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        divisors = list(map(int, input().split()))\n        divisors.sort()\n        if n == 1:\n            print(divisors[0] * 2)\n        else:\n            x = divisors[0]\n            for i in range(1, n):\n                if divisors[i] % x != 0:\n                    print(-1)\n                    break\n            else:\n                print(x)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport math\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        divisors = [int(x) for x in input().split()]\n        divisors.sort()\n        # print(divisors)\n        if n == 1:\n            print(divisors[0] * 2)\n        else:\n            if divisors[0] == divisors[1]:\n                print(divisors[0] * divisors[-1])\n            else:\n                print(divisors[0] * divisors[1])\n\nif __name__ == \"__main__\":\n    main()"]