["\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\ncurr_b = b\ncurr_a = a\n\nans = 0\nfor i in range(n):\n    if s[i] == 1:\n        if curr_a < a:\n            curr_a += 1\n        else:\n            curr_b += 1\n    if curr_b > 0:\n        curr_b -= 1\n        ans += 1\n    elif curr_a > 0:\n        curr_a -= 1\n        ans += 1\n    else:\n        break\n\nprint(ans)", "\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nif b+a < n:\n    print(b+a)\n    exit()\n\nif b+a == n:\n    print(sum(s))\n    exit()\n\nif a == 0:\n    print(b)\n    exit()\n\nif b == 0:\n    print(sum(s))\n    exit()\n\nif b+a > n:\n    if sum(s) == n:\n        print(n)\n        exit()\n    if sum(s) == 0:\n        print(b)\n        exit()\n    if sum(s) > b:\n        print(b)\n        exit()\n    if sum(s) < b:\n        print(sum(s))\n        exit()", "\n\nimport sys\n\ndef main():\n    n, b, a = [int(x) for x in sys.stdin.readline().split()]\n    s = [int(x) for x in sys.stdin.readline().split()]\n\n    # Keep track of the maximum number of segments we can pass\n    max_segments = 0\n\n    # Keep track of the current battery and accumulator levels\n    battery = b\n    accumulator = a\n\n    # Keep track of the current number of segments we can pass\n    segments = 0\n\n    # Iterate through the segments\n    for i in range(n):\n        # If the segment is exposed to sunlight\n        if s[i] == 1:\n            # If the battery is not full, we can use the accumulator to charge it\n            if battery < b:\n                # If the accumulator is not empty, we can use it to charge the battery\n                if accumulator > 0:\n                    accumulator -= 1\n                    battery += 1\n                    segments += 1\n                # Otherwise, we can't pass the segment\n                else:\n                    break\n            # If the battery is full, we can use it to pass the segment\n            else:\n                battery -= 1\n                segments += 1\n        # If the segment is not exposed to sunlight\n        else:\n            # If the accumulator is not empty, we can use it to pass the segment\n            if accumulator > 0:\n                accumulator -= 1\n                segments += 1\n            # Otherwise, we can't pass the segment\n            else:\n                break\n\n        # Update the maximum number of segments we can pass\n        max_segments = max(max_segments, segments)\n\n    print(max_segments)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\ncnt = 0\nbattery = b\naccumulator = a\nfor i in range(n):\n    if s[i] == 1:\n        if battery < b:\n            battery += 1\n        else:\n            if accumulator > 0:\n                accumulator -= 1\n            else:\n                break\n    else:\n        if accumulator > 0:\n            accumulator -= 1\n        else:\n            if battery > 0:\n                battery -= 1\n            else:\n                break\n    cnt += 1\nprint(cnt)", "\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nif b == 0:\n    print(sum(s))\n    exit()\n\nif a == 0:\n    print(sum(1-s))\n    exit()\n\nif b == a:\n    print(n)\n    exit()\n\nif b > a:\n    b, a = a, b\n\nans = 0\n\nfor i in range(n):\n    if s[i] == 1:\n        if a < b:\n            a += 1\n        else:\n            b -= 1\n    else:\n        if b > 0:\n            b -= 1\n        else:\n            a -= 1\n    ans += 1\n    if a == 0 and b == 0:\n        break\n\nprint(ans)", "\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nbattery = b\naccumulator = a\n\nfor i in range(n):\n    if s[i] == 1:\n        if accumulator < a:\n            if battery > 0:\n                accumulator += 1\n                battery -= 1\n        else:\n            if battery > 0:\n                battery -= 1\n    else:\n        if accumulator > 0:\n            accumulator -= 1\n        else:\n            if battery > 0:\n                battery -= 1\n    if battery == 0 and accumulator == 0:\n        break\n\nprint(i + 1)", "\n\n# SOLUTION\n# This problem can be solved using dynamic programming.\n# Let dp[i][j][k] be the maximum number of segments the robot can pass if it is at the i-th segment, the battery charge is j and the accumulator charge is k.\n# The transition is as follows:\n# If the i-th segment is exposed to sunlight, then the robot can go to the next segment using either the battery or the accumulator.\n# If the i-th segment is not exposed to sunlight, then the robot can go to the next segment using either the battery or the accumulator.\n# The answer is max(dp[n][j][k]).\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\ndp = [[[0 for _ in range(a + 1)] for _ in range(b + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(b + 1):\n        for k in range(a + 1):\n            if s[i - 1] == 1:\n                if j > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k] + 1)\n                if k > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k - 1] + 1)\n            else:\n                if j > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k])\n                if k > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k - 1])\n                if j < b and k > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j + 1][k - 1])\n\nprint(max(dp[n][j][k] for j in range(b + 1) for k in range(a + 1)))"]