["\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n    else:\n        s = s // n\n        l = 1\n        r = 1\n        ans = []\n        for i in range(1, n + 1):\n            if a[i - 1] == s:\n                r = i\n            else:\n                if r >= l:\n                    ans.append((l, r))\n                l = i + 1\n                r = i + 1\n        if r >= l:\n            ans.append((l, r))\n        print(len(ans))\n        for i in ans:\n            print(i[0], i[1])\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = 0\nfor i in range(n):\n    s += a[i]\n\nif s % n == 0:\n    print(n)\n    for i in range(n):\n        print(i+1, i+1)\nelse:\n    print(n-1)\n    print(1, n)\n    for i in range(1, n):\n        print(i, i)", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# dp[i][j] = max number of blocks with sum j ending at i\ndp = [[0] * (2*10**5 + 1) for _ in range(n+1)]\n\nfor i in range(n):\n    for j in range(2*10**5 + 1):\n        dp[i+1][j] = max(dp[i][j], dp[i][j-a[i]] + 1)\n\n# print(dp)\n\n# find the max number of blocks\nmax_blocks = 0\nfor j in range(2*10**5 + 1):\n    max_blocks = max(max_blocks, dp[n][j])\n\nprint(max_blocks)\n\n# find the blocks\nblocks = []\nfor j in range(2*10**5 + 1):\n    if dp[n][j] == max_blocks:\n        i = n\n        while i > 0:\n            if dp[i][j] == max_blocks:\n                # print(i, j)\n                blocks.append((i, j))\n                j -= a[i-1]\n                max_blocks -= 1\n            i -= 1\n\n# print(blocks)\n\n# output\nfor i, j in blocks:\n    print(i, i)", "\n\n# Solution\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [1] * n\nfor i in range(n):\n    for j in range(i):\n        if a[i] == a[j] and dp[j] + 1 > dp[i]:\n            dp[i] = dp[j] + 1\n\nprint(max(dp))\n\nfor i in range(n):\n    if dp[i] == max(dp):\n        print(i + 1, i + 1)", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# dp[i][j] = max number of blocks from i to j\ndp = [[0 for i in range(n)] for j in range(n)]\n\n# dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n# if sum(a[i:j+1]) % (j-i+1) == 0: dp[i][j] += 1\n\nfor i in range(n):\n    dp[i][i] = 1\n\nfor i in range(n-1, -1, -1):\n    for j in range(i, n):\n        dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n        if sum(a[i:j+1]) % (j-i+1) == 0:\n            dp[i][j] += 1\n\n# print(dp)\n\n# reconstruct solution\ndef reconstruct(i, j):\n    if i == j:\n        print(i+1, j+1)\n    else:\n        if dp[i][j] == dp[i][j-1]:\n            reconstruct(i, j-1)\n        elif dp[i][j] == dp[i+1][j]:\n            reconstruct(i+1, j)\n        else:\n            print(i+1, j+1)\n            reconstruct(i+1, j-1)\n\nprint(dp[0][n-1])\nreconstruct(0, n-1)", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef solve(n, a):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a[i - 1]\n\n    d = {}\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            s = dp[j] - dp[i]\n            if s in d:\n                d[s].append((i, j))\n            else:\n                d[s] = [(i, j)]\n\n    res = []\n    for k in d:\n        v = d[k]\n        v.sort()\n        for i in range(len(v) - 1):\n            if v[i][1] >= v[i + 1][0]:\n                continue\n            res.append(v[i])\n        res.append(v[-1])\n\n    res.sort()\n    print(len(res))\n    for r in res:\n        print(r[0], r[1])\n\nsolve(n, a)", "\n\n#Solution\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef solve(n, a):\n    s = [0] * (n + 1)\n    for i in range(1, n + 1):\n        s[i] = s[i - 1] + a[i - 1]\n    d = {}\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            d[s[j] - s[i - 1]] = d.get(s[j] - s[i - 1], []) + [(i, j)]\n    ans = []\n    for v in d.values():\n        v.sort()\n        i = 0\n        while i < len(v):\n            j = i + 1\n            while j < len(v) and v[j][0] <= v[i][1]:\n                j += 1\n            ans.append(v[i])\n            i = j\n    ans.sort()\n    return ans\n\nans = solve(n, a)\nprint(len(ans))\nfor l, r in ans:\n    print(l, r)"]