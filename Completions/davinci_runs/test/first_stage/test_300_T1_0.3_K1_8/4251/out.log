2022-04-20 03:44:45.632326 """
You are given a matrix $a$, consisting of $n$ rows and $m$ columns. Each cell contains an integer in it.

You can change the order of rows arbitrarily (including leaving the initial order), but you can't change the order of cells in a row. After you pick some order of rows, you traverse the whole matrix the following way: firstly visit all cells of the first column from the top row to the bottom one, then the same for the second column and so on. During the traversal you write down the sequence of the numbers on the cells in the same order you visited them. Let that sequence be $s_1, s_2, \dots, s_{nm}$. 

The traversal is $k$-acceptable if for all $i$ ($1 \le i \le nm - 1$) $|s_i - s_{i + 1}| \ge k$.

Find the maximum integer $k$ such that there exists some order of rows of matrix $a$ that it produces a $k$-acceptable traversal.


-----Input-----

The first line contains two integers $n$ and $m$ ($1 \le n \le 16$, $1 \le m \le 10^4$, $2 \le nm$) — the number of rows and the number of columns, respectively.

Each of the next $n$ lines contains $m$ integers ($1 \le a_{i, j} \le 10^9$) — the description of the matrix.


-----Output-----

Print a single integer $k$ — the maximum number such that there exists some order of rows of matrix $a$ that it produces an $k$-acceptable traversal.


-----Examples-----
Input
4 2
9 9
10 8
5 3
4 3

Output
5

Input
2 4
1 2 3 4
10 3 7 3

Output
0

Input
6 1
3
6
2
5
1
4

Output
3



-----Note-----

In the first example you can rearrange rows as following to get the $5$-acceptable traversal:

5 3

10 8

4 3

9 9



Then the sequence $s$ will be $[5, 10, 4, 9, 3, 8, 3, 9]$. Each pair of neighbouring elements have at least $k = 5$ difference between them.

In the second example the maximum $k = 0$, any order is $0$-acceptable.

In the third example the given order is already $3$-acceptable, you can leave it as it is.
"""
2022-04-20 03:44:45.632354 --------------------------
2022-04-20 03:44:45.632524 using api key derek
2022-04-20 03:46:06.512756 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort(key=lambda x: x[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                res = max(res, abs(a[i][j] - a[i + 1][j]))\n            elif i == n - 1:\n                res = max(res, abs(a[i][j] - a[i - 1][j]))\n            else:\n                res = max(res, abs(a[i][j] - a[i - 1][j]))\n                res = max(res, abs(a[i][j] - a[i + 1][j]))\n    print(res)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef solve(n, m, a):\n    a = sorted(a)\n    return max(a[i] - a[i - 1] for i in range(1, n * m))\n\nn, m = map(int, input().split())\na = []\nfor _ in range(n):\n    a += [int(x) for x in input().split()]\nprint(solve(n, m, a))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, sys.stdin.readline().split())))\n    a = sorted(a, key=lambda x: x[0])\n    print(a)\n    k = 0\n    for i in range(n - 1):\n        if a[i][0] - a[i + 1][0] > k:\n            k = a[i][0] - a[i + 1][0]\n    print(k)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    a = list(zip(*a))\n    a = [list(x) for x in a]\n    k = 0\n    for i in range(m):\n        a[i].sort()\n    for i in range(m):\n        for j in range(n - 1):\n            if a[i][j + 1] - a[i][j] > k:\n                k = a[i][j + 1] - a[i][j]\n    print(k)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    a.sort(key=lambda x: x[0])\n    k = 0\n    for i in range(1, n):\n        k = max(k, a[i][0] - a[i - 1][0])\n    print(k)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n# print(a)\n\n# a = [[9, 9], [10, 8], [5, 3], [4, 3]]\n# n, m = 4, 2\n\n# a = [[1, 2, 3, 4], [10, 3, 7, 3]]\n# n, m = 2, 4\n\n# a = [[3], [6], [2], [5], [1], [4]]\n# n, m = 6, 1\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    a.sort(key=lambda x: x[0])\n    k = 0\n    for i in range(1, n):\n        k = max(k, a[i][0] - a[i - 1][0])\n    for j in range(1, m):\n        a.sort(key=lambda x: x[j])\n        for i in range(1, n):\n            k = max(k, a[i][j] - a[i - 1][j])\n    print(k)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650426285,
  "id": "cmpl-4yvYjXBF8v4IYQAEfc9ZcT9iV6cZV",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:46:06.513319 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort(key=lambda x: x[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                res = max(res, abs(a[i][j] - a[i + 1][j]))\n            elif i == n - 1:\n                res = max(res, abs(a[i][j] - a[i - 1][j]))\n            else:\n                res = max(res, abs(a[i][j] - a[i - 1][j]))\n                res = max(res, abs(a[i][j] - a[i + 1][j]))\n    print(res)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:46:06.513405 REASON stop
2022-04-20 03:46:06.514184 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": ""
}
2022-04-20 03:46:06.514264 REASON stop
2022-04-20 03:46:06.514913 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef solve(n, m, a):\n    a = sorted(a)\n    return max(a[i] - a[i - 1] for i in range(1, n * m))\n\nn, m = map(int, input().split())\na = []\nfor _ in range(n):\n    a += [int(x) for x in input().split()]\nprint(solve(n, m, a))"
}
2022-04-20 03:46:06.514991 REASON stop
2022-04-20 03:46:06.536658 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, sys.stdin.readline().split())))\n    a = sorted(a, key=lambda x: x[0])\n    print(a)\n    k = 0\n    for i in range(n - 1):\n        if a[i][0] - a[i + 1][0] > k:\n            k = a[i][0] - a[i + 1][0]\n    print(k)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:46:06.536854 REASON stop
2022-04-20 03:46:06.547982 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    a = list(zip(*a))\n    a = [list(x) for x in a]\n    k = 0\n    for i in range(m):\n        a[i].sort()\n    for i in range(m):\n        for j in range(n - 1):\n            if a[i][j + 1] - a[i][j] > k:\n                k = a[i][j + 1] - a[i][j]\n    print(k)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:46:06.548131 REASON stop
2022-04-20 03:46:06.549221 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    a.sort(key=lambda x: x[0])\n    k = 0\n    for i in range(1, n):\n        k = max(k, a[i][0] - a[i - 1][0])\n    print(k)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:46:06.549341 REASON stop
2022-04-20 03:46:06.549904 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n# print(a)\n\n# a = [[9, 9], [10, 8], [5, 3], [4, 3]]\n# n, m = 4, 2\n\n# a = [[1, 2, 3, 4], [10, 3, 7, 3]]\n# n, m = 2, 4\n\n# a = [[3], [6], [2], [5], [1], [4]]\n# n, m = 6, 1\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n# n, m = 6, 6\n\n# a = [[1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3], [1, 2, 3, 4, 5, 6], [10, 3, 7, 3, 10, 3]]\n"
}
2022-04-20 03:46:06.550009 REASON length
2022-04-20 03:46:06.550021 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    a.sort(key=lambda x: x[0])\n    k = 0\n    for i in range(1, n):\n        k = max(k, a[i][0] - a[i - 1][0])\n    for j in range(1, m):\n        a.sort(key=lambda x: x[j])\n        for i in range(1, n):\n            k = max(k, a[i][j] - a[i - 1][j])\n    print(k)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:46:06.550257 REASON stop
