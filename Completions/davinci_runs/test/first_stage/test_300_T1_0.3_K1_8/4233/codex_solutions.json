["", "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    # print(grid)\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i,j))\n    # print(stars)\n    if len(stars) == 0:\n        print(-1)\n        return\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0]+1,stars[0][1]+1,1)\n        return\n    if len(stars) == 2:\n        if stars[0][0] == stars[1][0] or stars[0][1] == stars[1][1]:\n            print(1)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            return\n        else:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            return\n    if len(stars) == 3:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0]:\n            print(1)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1]:\n            print(1)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            return\n        if stars[0][0] == stars[1][0] and stars[0][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            return\n        if stars[0][0] == stars[2][0] and stars[0][1] == stars[1][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        if stars[1][0] == stars[2][0] and stars[0][1] == stars[1][1]:\n            print(2)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        if stars[1][0] == stars[2][0] and stars[0][1] == stars[2][1]:\n            print(2)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        print(3)\n        print(stars[0][0]+1,stars[0][1]+1,1)\n        print(stars[1][0]+1,stars[1][1]+1,1)\n        print(stars[2][0]+1,stars[2][1]+1,1)\n        return\n    if len(stars) == 4:\n        if stars[0][0] == stars[1][0] and stars[2][0] == stars[3][0] and stars[0][1] == stars[3][1] and stars[1][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        if stars[0][0] == stars[3][0] and stars[1][0] == stars[2][0] and stars[0][1] == stars[1][1] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        print(4)\n        print(stars[0][0]+1,stars[0][1]+1,1)\n        print(stars[1][0]+1,stars[1][1]+1,1)\n        print(stars[2][0]+1,stars[2][1]+1,1)\n        print(stars[3][0]+1,stars[3][1]+1,1)\n        return\n    print(len(stars))\n    for star in stars:\n        print(star[0]+1,star[1]+1,1)\n    return\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    #print(grid)\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i,j))\n    #print(stars)\n    if len(stars) == 0:\n        print(-1)\n        return\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0]+1, stars[0][1]+1, 1)\n        return\n    if len(stars) == 2:\n        if stars[0][0] == stars[1][0] or stars[0][1] == stars[1][1]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        else:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[1][0]+1, stars[1][1]+1, 1)\n            return\n    if len(stars) == 3:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][0] == stars[2][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][0] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        print(3)\n        print(stars[0][0]+1, stars[0][1]+1, 1)\n        print(stars[1][0]+1, stars[1][1]+1, 1)\n        print(stars[2][0]+1, stars[2][1]+1, 1)\n        return\n    if len(stars) == 4:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and stars[2][0] == stars[3][0]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and stars[2][1] == stars[3][1]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and stars[2][0] == stars[3][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][1] and stars[2][0] == stars[3][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][1] and stars[2][0] == stars[3][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][0] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][0] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        print(4)\n        print(stars[0][0]+1, stars[0][1]+1, 1)\n        print(stars[1][0]+1, stars[1][1]+1, 1)\n        print(stars[2][0]+1, stars[2][1]+1, 1)\n        print(stars[3][0]+1, stars[3][1]+1, 1)\n        return\n    print(len(stars))\n    for i in range(len(stars)):\n        print(stars[i][0]+1, stars[i][1]+1, 1)\n    return\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(n)]\n\n    # check if grid is valid\n    if not is_valid(grid):\n        print(-1)\n        return\n\n    # find stars\n    stars = find_stars(grid)\n\n    # print output\n    print(len(stars))\n    for star in stars:\n        print(star)\n\ndef is_valid(grid):\n    \"\"\"\n    Checks if grid is valid.\n    \"\"\"\n    # check if grid is empty\n    if not grid:\n        return False\n\n    # check if grid is rectangular\n    if not all(len(row) == len(grid[0]) for row in grid):\n        return False\n\n    # check if grid is valid\n    for row in grid:\n        for char in row:\n            if char not in ['*', '.']:\n                return False\n\n    return True\n\ndef find_stars(grid):\n    \"\"\"\n    Finds stars in grid.\n    \"\"\"\n    # initialize stars\n    stars = []\n\n    # find stars\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '*':\n                # find star size\n                size = find_star_size(grid, i, j)\n\n                # add star to stars\n                stars.append((i + 1, j + 1, size))\n\n    return stars\n\ndef find_star_size(grid, i, j):\n    \"\"\"\n    Finds star size.\n    \"\"\"\n    # initialize size\n    size = 0\n\n    # find star size\n    while i - size >= 0 and j - size >= 0 and i + size < len(grid) and j + size < len(grid[0]):\n        # check if star is valid\n        if grid[i - size][j] == '*' and grid[i + size][j] == '*' and grid[i][j - size] == '*' and grid[i][j + size] == '*':\n            size += 1\n        else:\n            break\n\n    return size\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(n)]\n\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n\n    if len(stars) == 0:\n        print(-1)\n        return\n\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        return\n\n    if len(stars) == 2:\n        if stars[0][0] == stars[1][0] and stars[0][1] == stars[1][1]:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 1)\n            return\n\n        if stars[0][0] == stars[1][0] and abs(stars[0][1] - stars[1][1]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 2)\n            return\n\n        if stars[0][1] == stars[1][1] and abs(stars[0][0] - stars[1][0]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 2)\n            return\n\n        print(-1)\n        return\n\n    if len(stars) == 3:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and abs(stars[0][1] - stars[1][1]) == 1 and abs(stars[1][1] - stars[2][1]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 3)\n            return\n\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and abs(stars[0][0] - stars[1][0]) == 1 and abs(stars[1][0] - stars[2][0]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 3)\n            return\n\n        print(-1)\n        return\n\n    if len(stars) == 4:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and stars[2][0] == stars[3][0] and abs(stars[0][1] - stars[1][1]) == 1 and abs(stars[1][1] - stars[2][1]) == 1 and abs(stars[2][1] - stars[3][1]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 4)\n            return\n\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and stars[2][1] == stars[3][1] and abs(stars[0][0] - stars[1][0]) == 1 and abs(stars[1][0] - stars[2][0]) == 1 and abs(stars[2][0] - stars[3][0]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 4)\n            return\n\n        print(-1)\n        return\n\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()"]