2022-04-20 03:34:06.888064 """
A star is a figure of the following type: an asterisk character '*' in the center of the figure and four rays (to the left, right, top, bottom) of the same positive length. The size of a star is the length of its rays. The size of a star must be a positive number (i.e. rays of length $0$ are not allowed).

Let's consider empty cells are denoted by '.', then the following figures are stars:

 [Image] The leftmost figure is a star of size $1$, the middle figure is a star of size $2$ and the rightmost figure is a star of size $3$. 

You are given a rectangular grid of size $n \times m$ consisting only of asterisks '*' and periods (dots) '.'. Rows are numbered from $1$ to $n$, columns are numbered from $1$ to $m$. Your task is to draw this grid using any number of stars or find out that it is impossible. Stars can intersect, overlap or even coincide with each other. The number of stars in the output can't exceed $n \cdot m$. Each star should be completely inside the grid. You can use stars of same and arbitrary sizes.

In this problem, you do not need to minimize the number of stars. Just find any way to draw the given grid with at most $n \cdot m$ stars.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($3 \le n, m \le 100$) — the sizes of the given grid.

The next $n$ lines contains $m$ characters each, the $i$-th line describes the $i$-th row of the grid. It is guaranteed that grid consists of characters '*' and '.' only.


-----Output-----

If it is impossible to draw the given grid using stars only, print "-1".

Otherwise in the first line print one integer $k$ ($0 \le k \le n \cdot m$) — the number of stars needed to draw the given grid. The next $k$ lines should contain three integers each — $x_j$, $y_j$ and $s_j$, where $x_j$ is the row index of the central star character, $y_j$ is the column index of the central star character and $s_j$ is the size of the star. Each star should be completely inside the grid.


-----Examples-----
Input
6 8
....*...
...**...
..*****.
...**...
....*...
........

Output
3
3 4 1
3 5 2
3 5 1

Input
5 5
.*...
****.
.****
..**.
.....

Output
3
2 2 1
3 3 1
3 4 1

Input
5 5
.*...
***..
.*...
.*...
.....

Output
-1

Input
3 3
*.*
.*.
*.*

Output
-1



-----Note-----

In the first example the output 2

3 4 1

3 5 2



is also correct.
"""
2022-04-20 03:34:06.888112 --------------------------
2022-04-20 03:34:06.888269 using api key sourya
2022-04-20 03:35:36.062836 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    # print(grid)\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i,j))\n    # print(stars)\n    if len(stars) == 0:\n        print(-1)\n        return\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0]+1,stars[0][1]+1,1)\n        return\n    if len(stars) == 2:\n        if stars[0][0] == stars[1][0] or stars[0][1] == stars[1][1]:\n            print(1)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            return\n        else:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            return\n    if len(stars) == 3:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0]:\n            print(1)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1]:\n            print(1)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            return\n        if stars[0][0] == stars[1][0] and stars[0][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            return\n        if stars[0][0] == stars[2][0] and stars[0][1] == stars[1][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        if stars[1][0] == stars[2][0] and stars[0][1] == stars[1][1]:\n            print(2)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        if stars[1][0] == stars[2][0] and stars[0][1] == stars[2][1]:\n            print(2)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        print(3)\n        print(stars[0][0]+1,stars[0][1]+1,1)\n        print(stars[1][0]+1,stars[1][1]+1,1)\n        print(stars[2][0]+1,stars[2][1]+1,1)\n        return\n    if len(stars) == 4:\n        if stars[0][0] == stars[1][0] and stars[2][0] == stars[3][0] and stars[0][1] == stars[3][1] and stars[1][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        if stars[0][0] == stars[3][0] and stars[1][0] == stars[2][0] and stars[0][1] == stars[1][1] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        print(4)\n        print(stars[0][0]+1,stars[0][1]+1,1)\n        print(stars[1][0]+1,stars[1][1]+1,1)\n        print(stars[2][0]+1,stars[2][1]+1,1)\n        print(stars[3][0]+1,stars[3][1]+1,1)\n        return\n    print(len(stars))\n    for star in stars:\n        print(star[0]+1,star[1]+1,1)\n    return\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    #print(grid)\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i,j))\n    #print(stars)\n    if len(stars) == 0:\n        print(-1)\n        return\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0]+1, stars[0][1]+1, 1)\n        return\n    if len(stars) == 2:\n        if stars[0][0] == stars[1][0] or stars[0][1] == stars[1][1]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        else:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[1][0]+1, stars[1][1]+1, 1)\n            return\n    if len(stars) == 3:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][0] == stars[2][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][0] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        print(3)\n        print(stars[0][0]+1, stars[0][1]+1, 1)\n        print(stars[1][0]+1, stars[1][1]+1, 1)\n        print(stars[2][0]+1, stars[2][1]+1, 1)\n        return\n    if len(stars) == 4:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and stars[2][0] == stars[3][0]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and stars[2][1] == stars[3][1]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and stars[2][0] == stars[3][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][1] and stars[2][0] == stars[3][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][1] and stars[2][0] == stars[3][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][0] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][0] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        print(4)\n        print(stars[0][0]+1, stars[0][1]+1, 1)\n        print(stars[1][0]+1, stars[1][1]+1, 1)\n        print(stars[2][0]+1, stars[2][1]+1, 1)\n        print(stars[3][0]+1, stars[3][1]+1, 1)\n        return\n    print(len(stars))\n    for i in range(len(stars)):\n        print(stars[i][0]+1, stars[i][1]+1, 1)\n    return\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\n#This is a greedy problem.\n#We will start from the top left corner and move towards the bottom right corner.\n#If we encounter a *, we will try to place a star of size 1 at that position.\n#If we encounter a ., we will try to place a star of size 1 at that position.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 1, we will try to place a star of size 2.\n#If we encounter a . and we are not able to place a star of size 1, we will try to place a star of size 2.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 2, we will try to place a star of size 3.\n#If we encounter a . and we are not able to place a star of size 2, we will try to place a star of size 3.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 3, we will try to place a star of size 4.\n#If we encounter a . and we are not able to place a star of size 3, we will try to place a star of size 4.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 4, we will try to place a star of size 5.\n#If we encounter a . and we are not able to place a star of size 4, we will try to place a star of size 5.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 5, we will try to place a star of size 6.\n#If we encounter a . and we are not able to place a star of size 5, we will try to place a star of size 6.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 6, we will try to place a star of size 7.\n#If we encounter a . and we are not able to place a star of size 6, we will try to place a star of size 7.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 7, we will try to place a star of size 8.\n#If we encounter a . and we are not able to place a star of size 7, we will try to place a star of size 8.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 8, we will try to place a star of size 9.\n#If we encounter a . and we are not able to place a star of size 8, we will try to place a star of size 9.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 9, we will try to place a star of size 10.\n#If we encounter a . and we are not able to place a star of size 9, we will try to place a star of size 10.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 10, we will try to place a star of size 11.\n#If we encounter a . and we are not able to place a star of size 10, we will try to place a star of size 11.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 11, we will try to place a star of size 12.\n#If we encounter a . and we are not able to place a star of size 11, we will try to place a star of size 12.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 12, we will try to place a star of size 13.\n#If we encounter a . and we are not able to place a star of size 12, we will try to place a star of size 13.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 13, we will try to place a star of size 14.\n#If we encounter a . and we are not able to place a star of size 13, we will try to place a star of size 14.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 14, we will try to place a star of size 15.\n#If we encounter a . and we are not able to place a star of size 14, we will try to place a star of size 15.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 15, we will try to place a star of size 16.\n#If we encounter a . and we are not able to place a star of size 15, we will try to place a star of size 16.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 16, we will try to place a star of size 17.\n#If we encounter a . and we are not able to place a star of size 16, we will try to place a star of size 17.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 17, we will try to place a star of size 18.\n#If we encounter a . and we are not able to place a star of size 17, we will try to place a star of size 18.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 18, we will try to place a star of size 19.\n#If we encounter a . and we are not able to place a star of size 18, we will try to place a star of size 19.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 19, we will try to place a star of size 20.\n#If we encounter a . and we are not able to place a star of size 19, we will try to place a star of size 20.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 20, we will try to place a star of size 21.\n#If we encounter a . and we are not able to place a star of size 20, we will try to place a star of size 21.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 21, we will try to place a star of size 22.\n#If we encounter a . and we are not able to place a star of size 21, we will try to place a star of size 22.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 22, we will try to place a star of size 23.\n#If we encounter a . and we are not able to place a star of size 22, we will try to place a star of size 23.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 23, we will try to place a star of size 24.\n#If we encounter a . and we are not able to place a star of size 23, we will try to place a star of size 24.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 24, we will try to place a star of size 25.\n#If we encounter a . and we are not able to place a star of size 24, we will try to place a star of size 25.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 25, we will try to place a star of size 26.\n#If we encounter a . and we are not able to place a star of size 25, we will try to place a star of size 26.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 26, we will try to place a star of size 27.\n#If we encounter a . and we are not able to place a star of size 26, we will try to place a star of size 27.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 27, we will try to place a star of size 28.\n#If we encounter a . and we are not able to place a star of size 27, we will try to place a star of size 28.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 28, we will try to place a star of size 29.\n#If we encounter a . and we are not able to place a star of size 28, we will try to place a star of size 29.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 29, we will try to place a star of size 30.\n#If we encounter a . and we are not able to place a star of size 29, we will try to place a star of size 30.\n#If the star is placed, we will"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(n)]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n    if not stars:\n        print(-1)\n        return\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        return\n    if len(stars) == 2:\n        print(2)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        return\n    if len(stars) == 3:\n        print(3)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        return\n    if len(stars) == 4:\n        print(4)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        return\n    if len(stars) == 5:\n        print(5)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        return\n    if len(stars) == 6:\n        print(6)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        return\n    if len(stars) == 7:\n        print(7)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        return\n    if len(stars) == 8:\n        print(8)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        return\n    if len(stars) == 9:\n        print(9)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        return\n    if len(stars) == 10:\n        print(10)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        return\n    if len(stars) == 11:\n        print(11)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        print(stars[10][0] + 1, stars[10][1] + 1, 1)\n        return\n    if len(stars) == 12:\n        print(12)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        print(stars[10][0] + 1, stars[10][1] + 1, 1)\n        print(stars[11][0] + 1, stars[11][1] + 1, 1)\n        return\n    if len(stars) == 13:\n        print(13)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        print(stars[10][0] + 1, stars[10][1] + 1, 1)\n        print(stars[11][0] + 1, stars[11][1] + 1, 1)\n        print(stars[12][0] + 1, stars[12][1] + 1, 1)\n        return\n    if len(stars) == 14:\n        print(14)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        print(stars[10][0] + 1, stars[10][1] + 1, 1)\n        print(stars[11][0] + 1, stars[11][1] + 1, 1)\n        print(stars[12][0] + 1, stars[12][1] + 1, 1)\n        print(stars[13][0] + 1, stars[13][1] + 1, 1)\n        return"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n, m = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(n)]\n\n    # check if grid is valid\n    if not is_valid(grid):\n        print(-1)\n        return\n\n    # find stars\n    stars = find_stars(grid)\n\n    # print output\n    print(len(stars))\n    for star in stars:\n        print(star)\n\ndef is_valid(grid):\n    \"\"\"\n    Checks if grid is valid.\n    \"\"\"\n    # check if grid is empty\n    if not grid:\n        return False\n\n    # check if grid is rectangular\n    if not all(len(row) == len(grid[0]) for row in grid):\n        return False\n\n    # check if grid is valid\n    for row in grid:\n        for char in row:\n            if char not in ['*', '.']:\n                return False\n\n    return True\n\ndef find_stars(grid):\n    \"\"\"\n    Finds stars in grid.\n    \"\"\"\n    # initialize stars\n    stars = []\n\n    # find stars\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '*':\n                # find star size\n                size = find_star_size(grid, i, j)\n\n                # add star to stars\n                stars.append((i + 1, j + 1, size))\n\n    return stars\n\ndef find_star_size(grid, i, j):\n    \"\"\"\n    Finds star size.\n    \"\"\"\n    # initialize size\n    size = 0\n\n    # find star size\n    while i - size >= 0 and j - size >= 0 and i + size < len(grid) and j + size < len(grid[0]):\n        # check if star is valid\n        if grid[i - size][j] == '*' and grid[i + size][j] == '*' and grid[i][j - size] == '*' and grid[i][j + size] == '*':\n            size += 1\n        else:\n            break\n\n    return size\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(n)]\n\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n\n    if len(stars) == 0:\n        print(-1)\n        return\n\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        return\n\n    if len(stars) == 2:\n        if stars[0][0] == stars[1][0] and stars[0][1] == stars[1][1]:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 1)\n            return\n\n        if stars[0][0] == stars[1][0] and abs(stars[0][1] - stars[1][1]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 2)\n            return\n\n        if stars[0][1] == stars[1][1] and abs(stars[0][0] - stars[1][0]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 2)\n            return\n\n        print(-1)\n        return\n\n    if len(stars) == 3:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and abs(stars[0][1] - stars[1][1]) == 1 and abs(stars[1][1] - stars[2][1]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 3)\n            return\n\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and abs(stars[0][0] - stars[1][0]) == 1 and abs(stars[1][0] - stars[2][0]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 3)\n            return\n\n        print(-1)\n        return\n\n    if len(stars) == 4:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and stars[2][0] == stars[3][0] and abs(stars[0][1] - stars[1][1]) == 1 and abs(stars[1][1] - stars[2][1]) == 1 and abs(stars[2][1] - stars[3][1]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 4)\n            return\n\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and stars[2][1] == stars[3][1] and abs(stars[0][0] - stars[1][0]) == 1 and abs(stars[1][0] - stars[2][0]) == 1 and abs(stars[2][0] - stars[3][0]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 4)\n            return\n\n        print(-1)\n        return\n\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650425647,
  "id": "cmpl-4yvOR2j1B3gPv4UC5l1lunWqm4MwT",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:35:36.063639 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    # print(grid)\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i,j))\n    # print(stars)\n    if len(stars) == 0:\n        print(-1)\n        return\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0]+1,stars[0][1]+1,1)\n        return\n    if len(stars) == 2:\n        if stars[0][0] == stars[1][0] or stars[0][1] == stars[1][1]:\n            print(1)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            return\n        else:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            return\n    if len(stars) == 3:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0]:\n            print(1)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1]:\n            print(1)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            return\n        if stars[0][0] == stars[1][0] and stars[0][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            return\n        if stars[0][0] == stars[2][0] and stars[0][1] == stars[1][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        if stars[1][0] == stars[2][0] and stars[0][1] == stars[1][1]:\n            print(2)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        if stars[1][0] == stars[2][0] and stars[0][1] == stars[2][1]:\n            print(2)\n            print(stars[1][0]+1,stars[1][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        print(3)\n        print(stars[0][0]+1,stars[0][1]+1,1)\n        print(stars[1][0]+1,stars[1][1]+1,1)\n        print(stars[2][0]+1,stars[2][1]+1,1)\n        return\n    if len(stars) == 4:\n        if stars[0][0] == stars[1][0] and stars[2][0] == stars[3][0] and stars[0][1] == stars[3][1] and stars[1][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        if stars[0][0] == stars[3][0] and stars[1][0] == stars[2][0] and stars[0][1] == stars[1][1] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1,stars[0][1]+1,1)\n            print(stars[2][0]+1,stars[2][1]+1,1)\n            return\n        print(4)\n        print(stars[0][0]+1,stars[0][1]+1,1)\n        print(stars[1][0]+1,stars[1][1]+1,1)\n        print(stars[2][0]+1,stars[2][1]+1,1)\n        print(stars[3][0]+1,stars[3][1]+1,1)\n        return\n    print(len(stars))\n    for star in stars:\n        print(star[0]+1,star[1]+1,1)\n    return\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:35:36.063758 REASON stop
2022-04-20 03:35:36.064952 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    #print(grid)\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i,j))\n    #print(stars)\n    if len(stars) == 0:\n        print(-1)\n        return\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0]+1, stars[0][1]+1, 1)\n        return\n    if len(stars) == 2:\n        if stars[0][0] == stars[1][0] or stars[0][1] == stars[1][1]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        else:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[1][0]+1, stars[1][1]+1, 1)\n            return\n    if len(stars) == 3:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][0] == stars[2][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][0] == stars[2][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        print(3)\n        print(stars[0][0]+1, stars[0][1]+1, 1)\n        print(stars[1][0]+1, stars[1][1]+1, 1)\n        print(stars[2][0]+1, stars[2][1]+1, 1)\n        return\n    if len(stars) == 4:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and stars[2][0] == stars[3][0]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and stars[2][1] == stars[3][1]:\n            print(1)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and stars[2][0] == stars[3][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][1] and stars[2][0] == stars[3][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][1] and stars[2][0] == stars[3][0]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[2][0]+1, stars[2][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][1] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][1] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][0] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        if stars[0][0] == stars[1][0] and stars[1][1] == stars[2][0] and stars[2][0] == stars[3][1]:\n            print(2)\n            print(stars[0][0]+1, stars[0][1]+1, 1)\n            print(stars[3][0]+1, stars[3][1]+1, 1)\n            return\n        print(4)\n        print(stars[0][0]+1, stars[0][1]+1, 1)\n        print(stars[1][0]+1, stars[1][1]+1, 1)\n        print(stars[2][0]+1, stars[2][1]+1, 1)\n        print(stars[3][0]+1, stars[3][1]+1, 1)\n        return\n    print(len(stars))\n    for i in range(len(stars)):\n        print(stars[i][0]+1, stars[i][1]+1, 1)\n    return\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:35:36.065096 REASON stop
2022-04-20 03:35:36.065811 2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\n#This is a greedy problem.\n#We will start from the top left corner and move towards the bottom right corner.\n#If we encounter a *, we will try to place a star of size 1 at that position.\n#If we encounter a ., we will try to place a star of size 1 at that position.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 1, we will try to place a star of size 2.\n#If we encounter a . and we are not able to place a star of size 1, we will try to place a star of size 2.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 2, we will try to place a star of size 3.\n#If we encounter a . and we are not able to place a star of size 2, we will try to place a star of size 3.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 3, we will try to place a star of size 4.\n#If we encounter a . and we are not able to place a star of size 3, we will try to place a star of size 4.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 4, we will try to place a star of size 5.\n#If we encounter a . and we are not able to place a star of size 4, we will try to place a star of size 5.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 5, we will try to place a star of size 6.\n#If we encounter a . and we are not able to place a star of size 5, we will try to place a star of size 6.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 6, we will try to place a star of size 7.\n#If we encounter a . and we are not able to place a star of size 6, we will try to place a star of size 7.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 7, we will try to place a star of size 8.\n#If we encounter a . and we are not able to place a star of size 7, we will try to place a star of size 8.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 8, we will try to place a star of size 9.\n#If we encounter a . and we are not able to place a star of size 8, we will try to place a star of size 9.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 9, we will try to place a star of size 10.\n#If we encounter a . and we are not able to place a star of size 9, we will try to place a star of size 10.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 10, we will try to place a star of size 11.\n#If we encounter a . and we are not able to place a star of size 10, we will try to place a star of size 11.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 11, we will try to place a star of size 12.\n#If we encounter a . and we are not able to place a star of size 11, we will try to place a star of size 12.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 12, we will try to place a star of size 13.\n#If we encounter a . and we are not able to place a star of size 12, we will try to place a star of size 13.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 13, we will try to place a star of size 14.\n#If we encounter a . and we are not able to place a star of size 13, we will try to place a star of size 14.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 14, we will try to place a star of size 15.\n#If we encounter a . and we are not able to place a star of size 14, we will try to place a star of size 15.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 15, we will try to place a star of size 16.\n#If we encounter a . and we are not able to place a star of size 15, we will try to place a star of size 16.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 16, we will try to place a star of size 17.\n#If we encounter a . and we are not able to place a star of size 16, we will try to place a star of size 17.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 17, we will try to place a star of size 18.\n#If we encounter a . and we are not able to place a star of size 17, we will try to place a star of size 18.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 18, we will try to place a star of size 19.\n#If we encounter a . and we are not able to place a star of size 18, we will try to place a star of size 19.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 19, we will try to place a star of size 20.\n#If we encounter a . and we are not able to place a star of size 19, we will try to place a star of size 20.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 20, we will try to place a star of size 21.\n#If we encounter a . and we are not able to place a star of size 20, we will try to place a star of size 21.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 21, we will try to place a star of size 22.\n#If we encounter a . and we are not able to place a star of size 21, we will try to place a star of size 22.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 22, we will try to place a star of size 23.\n#If we encounter a . and we are not able to place a star of size 22, we will try to place a star of size 23.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 23, we will try to place a star of size 24.\n#If we encounter a . and we are not able to place a star of size 23, we will try to place a star of size 24.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 24, we will try to place a star of size 25.\n#If we encounter a . and we are not able to place a star of size 24, we will try to place a star of size 25.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 25, we will try to place a star of size 26.\n#If we encounter a . and we are not able to place a star of size 25, we will try to place a star of size 26.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 26, we will try to place a star of size 27.\n#If we encounter a . and we are not able to place a star of size 26, we will try to place a star of size 27.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 27, we will try to place a star of size 28.\n#If we encounter a . and we are not able to place a star of size 27, we will try to place a star of size 28.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 28, we will try to place a star of size 29.\n#If we encounter a . and we are not able to place a star of size 28, we will try to place a star of size 29.\n#If the star is placed, we will mark the cells occupied by the star as .\n#If the star is not placed, we will mark the cell as .\n#If we encounter a * and we are not able to place a star of size 29, we will try to place a star of size 30.\n#If we encounter a . and we are not able to place a star of size 29, we will try to place a star of size 30.\n#If the star is placed, we will"
}
2022-04-20 03:35:36.065995 REASON length
2022-04-20 03:35:36.066015 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(n)]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n    if not stars:\n        print(-1)\n        return\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        return\n    if len(stars) == 2:\n        print(2)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        return\n    if len(stars) == 3:\n        print(3)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        return\n    if len(stars) == 4:\n        print(4)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        return\n    if len(stars) == 5:\n        print(5)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        return\n    if len(stars) == 6:\n        print(6)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        return\n    if len(stars) == 7:\n        print(7)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        return\n    if len(stars) == 8:\n        print(8)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        return\n    if len(stars) == 9:\n        print(9)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        return\n    if len(stars) == 10:\n        print(10)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        return\n    if len(stars) == 11:\n        print(11)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        print(stars[10][0] + 1, stars[10][1] + 1, 1)\n        return\n    if len(stars) == 12:\n        print(12)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        print(stars[10][0] + 1, stars[10][1] + 1, 1)\n        print(stars[11][0] + 1, stars[11][1] + 1, 1)\n        return\n    if len(stars) == 13:\n        print(13)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        print(stars[10][0] + 1, stars[10][1] + 1, 1)\n        print(stars[11][0] + 1, stars[11][1] + 1, 1)\n        print(stars[12][0] + 1, stars[12][1] + 1, 1)\n        return\n    if len(stars) == 14:\n        print(14)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        print(stars[1][0] + 1, stars[1][1] + 1, 1)\n        print(stars[2][0] + 1, stars[2][1] + 1, 1)\n        print(stars[3][0] + 1, stars[3][1] + 1, 1)\n        print(stars[4][0] + 1, stars[4][1] + 1, 1)\n        print(stars[5][0] + 1, stars[5][1] + 1, 1)\n        print(stars[6][0] + 1, stars[6][1] + 1, 1)\n        print(stars[7][0] + 1, stars[7][1] + 1, 1)\n        print(stars[8][0] + 1, stars[8][1] + 1, 1)\n        print(stars[9][0] + 1, stars[9][1] + 1, 1)\n        print(stars[10][0] + 1, stars[10][1] + 1, 1)\n        print(stars[11][0] + 1, stars[11][1] + 1, 1)\n        print(stars[12][0] + 1, stars[12][1] + 1, 1)\n        print(stars[13][0] + 1, stars[13][1] + 1, 1)\n        return"
}
2022-04-20 03:35:36.066110 REASON length
2022-04-20 03:35:36.066120 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n, m = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(n)]\n\n    # check if grid is valid\n    if not is_valid(grid):\n        print(-1)\n        return\n\n    # find stars\n    stars = find_stars(grid)\n\n    # print output\n    print(len(stars))\n    for star in stars:\n        print(star)\n\ndef is_valid(grid):\n    \"\"\"\n    Checks if grid is valid.\n    \"\"\"\n    # check if grid is empty\n    if not grid:\n        return False\n\n    # check if grid is rectangular\n    if not all(len(row) == len(grid[0]) for row in grid):\n        return False\n\n    # check if grid is valid\n    for row in grid:\n        for char in row:\n            if char not in ['*', '.']:\n                return False\n\n    return True\n\ndef find_stars(grid):\n    \"\"\"\n    Finds stars in grid.\n    \"\"\"\n    # initialize stars\n    stars = []\n\n    # find stars\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '*':\n                # find star size\n                size = find_star_size(grid, i, j)\n\n                # add star to stars\n                stars.append((i + 1, j + 1, size))\n\n    return stars\n\ndef find_star_size(grid, i, j):\n    \"\"\"\n    Finds star size.\n    \"\"\"\n    # initialize size\n    size = 0\n\n    # find star size\n    while i - size >= 0 and j - size >= 0 and i + size < len(grid) and j + size < len(grid[0]):\n        # check if star is valid\n        if grid[i - size][j] == '*' and grid[i + size][j] == '*' and grid[i][j - size] == '*' and grid[i][j + size] == '*':\n            size += 1\n        else:\n            break\n\n    return size\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:35:36.066205 REASON stop
2022-04-20 03:35:36.088901 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:35:36.089072 REASON stop
2022-04-20 03:35:36.089997 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": ""
}
2022-04-20 03:35:36.090098 REASON stop
2022-04-20 03:35:36.091224 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(n)]\n\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n\n    if len(stars) == 0:\n        print(-1)\n        return\n\n    if len(stars) == 1:\n        print(1)\n        print(stars[0][0] + 1, stars[0][1] + 1, 1)\n        return\n\n    if len(stars) == 2:\n        if stars[0][0] == stars[1][0] and stars[0][1] == stars[1][1]:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 1)\n            return\n\n        if stars[0][0] == stars[1][0] and abs(stars[0][1] - stars[1][1]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 2)\n            return\n\n        if stars[0][1] == stars[1][1] and abs(stars[0][0] - stars[1][0]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 2)\n            return\n\n        print(-1)\n        return\n\n    if len(stars) == 3:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and abs(stars[0][1] - stars[1][1]) == 1 and abs(stars[1][1] - stars[2][1]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 3)\n            return\n\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and abs(stars[0][0] - stars[1][0]) == 1 and abs(stars[1][0] - stars[2][0]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 3)\n            return\n\n        print(-1)\n        return\n\n    if len(stars) == 4:\n        if stars[0][0] == stars[1][0] and stars[1][0] == stars[2][0] and stars[2][0] == stars[3][0] and abs(stars[0][1] - stars[1][1]) == 1 and abs(stars[1][1] - stars[2][1]) == 1 and abs(stars[2][1] - stars[3][1]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 4)\n            return\n\n        if stars[0][1] == stars[1][1] and stars[1][1] == stars[2][1] and stars[2][1] == stars[3][1] and abs(stars[0][0] - stars[1][0]) == 1 and abs(stars[1][0] - stars[2][0]) == 1 and abs(stars[2][0] - stars[3][0]) == 1:\n            print(1)\n            print(stars[0][0] + 1, stars[0][1] + 1, 4)\n            return\n\n        print(-1)\n        return\n\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:35:36.091447 REASON stop
