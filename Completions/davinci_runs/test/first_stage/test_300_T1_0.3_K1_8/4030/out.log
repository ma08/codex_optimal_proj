2022-04-20 01:01:38.422542 """
This is a hard version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different.

You are given a string $s$ consisting of $n$ lowercase Latin letters.

You have to color all its characters the minimum number of colors (each character to exactly one color, the same letters can be colored the same or different colors, i.e. you can choose exactly one color for each index in $s$).

After coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary (possibly, zero) number of times.

The goal is to make the string sorted, i.e. all characters should be in alphabetical order.

Your task is to find the minimum number of colors which you have to color the given string in so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the length of $s$.

The second line of the input contains the string $s$ consisting of exactly $n$ lowercase Latin letters.


-----Output-----

In the first line print one integer $res$ ($1 \le res \le n$) — the minimum number of colors in which you have to color the given string so that after coloring it can become sorted by some sequence of swaps.

In the second line print any possible coloring that can be used to sort the string using some sequence of swaps described in the problem statement. The coloring is the array $c$ of length $n$, where $1 \le c_i \le res$ and $c_i$ means the color of the $i$-th character.


-----Examples-----
Input
9
abacbecfd

Output
2
1 1 2 1 2 1 2 1 2 

Input
8
aaabbcbb

Output
2
1 2 1 2 1 2 1 1

Input
7
abcdedc

Output
3
1 1 1 1 1 2 3 

Input
5
abcde

Output
1
1 1 1 1 1
"""
2022-04-20 01:01:38.422566 --------------------------
2022-04-20 01:01:38.422721 using api key gabby
2022-04-20 01:02:58.957651 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    colors = [0] * n\n    colors[0] = 1\n    for i in range(1, n):\n        if s[i] != s[i-1]:\n            colors[i] = colors[i-1] + 1\n        else:\n            colors[i] = colors[i-1]\n    print(max(colors))\n    print(*colors)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nimport heapq\nimport random\nimport collections\nfrom collections import Counter, defaultdict, deque\nfrom itertools import combinations, permutations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect_left, bisect_right\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nfrom sys import stdin, stdout\ndef read(): return stdin.readline().strip()\ndef print(*args, **kwargs): stdout.write(*args, **kwargs)\ndef printline(*args, **kwargs): stdout.write(*args, **kwargs); stdout.write('\\n')\ndef printvar(var, fmt=\"%s\"): stdout.write(fmt % var)\ndef debug(*args): print(*args, file=sys.stderr)\ndef debugline(*args): print(*args, file=sys.stderr); stdout.write('\\n')\ndef debugvar(var, fmt=\"%s\"): print(fmt % var, file=sys.stderr)\ndef _is_debug(): return 'DEBUG' in os.environ\n\nif _is_debug():\n    def debug(*args): print(*args)\n    def debugline(*args): print(*args); print()\n    def debugvar(var, fmt=\"%s\"): print(fmt % var)\n    def print(*args, **kwargs): pass\n    def printline(*args, **kwargs): pass\n    def printvar(var, fmt=\"%s\"): pass\n\nread_str = lambda: read().strip()\nread_strs = lambda: read_str().split()\nread_int = lambda: int(read())\nread_ints = lambda: list(map(int, read_strs()))\nread_int_arr = lambda n: [read_int() for _ in range(n)]\nread_int_mat = lambda n, m: [read_int_arr(m) for _ in range(n)]\n\nstr_to_int = lambda s: int(s) if s.isdigit() else s\nstr_to_ints = lambda s: list(map(str_to_int, s.split()))\nstr_to_int_arr = lambda s: [str_to_int(s) for s in s.split()]\n\ndef _solve_brute(s):\n    n = len(s)\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                res = max(res, j - i + 1)\n    return res\n\ndef _solve(s):\n    n = len(s)\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                res = max(res, j - i + 1)\n    return res\n\ndef solve(s):\n    n = len(s)\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                res = max(res, j - i + 1)\n    return res\n\ndef main():\n    s = read_str()\n    print(_solve(s))\n\nif __name__ == '__main__':\n    # freopen('input.txt', 'r', stdin)\n    # freopen('output.txt', 'w', stdout)\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    c = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            c[i] = c[i - 1]\n        else:\n            c[i] = c[i - 1] + 1\n    print(c[-1])\n    print(*c)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\n# if all letters are the same, then we can color them all with the same color\nif len(set(s)) == 1:\n    print(1)\n    print(\"1 \" * n)\n    exit()\n\n# if all letters are different, then we can color them all with different colors\nif len(set(s)) == n:\n    print(n)\n    print(\" \".join(map(str, range(1, n + 1))))\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 1:\n    print(2)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 2:\n    print(3)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 3:\n    print(4)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 4:\n    print(5)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 5:\n    print(6)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 6:\n    print(7)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 7:\n    print(8)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 8:\n    print(9)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 9:\n    print(10)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 10:\n    print(11)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 11:\n    print(12)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 12:\n    print(13)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 13:\n    print(14)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 14:\n    print(15)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 15:\n    print(16)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 16:\n    print(17)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 17:\n    print(18)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 18:\n    print(19)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 19:\n    print(20)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 20:\n    print(21)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 21:\n    print(22)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 22:\n    print(23)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 23:\n    print(24)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 24:\n    print(25)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 25:\n    print(26)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 26:\n    print(27)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 27:\n    print(28)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 28:\n    print(29)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 29:\n    print(30)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 30:\n    print(31)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 31:\n    print(32)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 32:\n    print(33)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 33:\n    print(34)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 34:\n    print(35)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 35:\n    print(36)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 36:\n    print(37)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 37:\n    print(38)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 38:\n    print(39)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 39:\n    print(40)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 40:\n    print(41)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 41:\n    print(42)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 42:\n    print(43)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 43:\n    print(44)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 44:\n    print(45)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 45:\n    print(46)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 46:\n    print(47)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 47:\n    print(48)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 48:\n    print(49)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 49:\n    print(50)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 50:\n    print(51)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 51:\n    print(52)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    print(n)\n    print(s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\ndef is_sorted(s):\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            return False\n    return True\n\ndef swap(s, i):\n    s = list(s)\n    s[i], s[i + 1] = s[i + 1], s[i]\n    return ''.join(s)\n\ndef solve(s):\n    if is_sorted(s):\n        return 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            return 1 + min(solve(swap(s, i)), solve(swap(s, i + 1)))\n\nprint(solve(s))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(s):\n    n = len(s)\n    c = [0] * n\n    c[0] = 1\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            c[i] = c[i - 1] + 1\n        else:\n            c[i] = c[i - 1]\n    return c\n\ndef main():\n    n = int(input())\n    s = input()\n    c = solve(s)\n    print(max(c))\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    sys.exit(main())"
    }
  ],
  "created": 1650416498,
  "id": "cmpl-4yt0sserPykoRUp96QaqTOT6wDNB7",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 01:02:58.958127 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    colors = [0] * n\n    colors[0] = 1\n    for i in range(1, n):\n        if s[i] != s[i-1]:\n            colors[i] = colors[i-1] + 1\n        else:\n            colors[i] = colors[i-1]\n    print(max(colors))\n    print(*colors)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:02:58.958175 REASON stop
2022-04-20 01:02:58.958724 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:02:58.958786 REASON stop
2022-04-20 01:02:58.959228 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nimport heapq\nimport random\nimport collections\nfrom collections import Counter, defaultdict, deque\nfrom itertools import combinations, permutations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect_left, bisect_right\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nfrom sys import stdin, stdout\ndef read(): return stdin.readline().strip()\ndef print(*args, **kwargs): stdout.write(*args, **kwargs)\ndef printline(*args, **kwargs): stdout.write(*args, **kwargs); stdout.write('\\n')\ndef printvar(var, fmt=\"%s\"): stdout.write(fmt % var)\ndef debug(*args): print(*args, file=sys.stderr)\ndef debugline(*args): print(*args, file=sys.stderr); stdout.write('\\n')\ndef debugvar(var, fmt=\"%s\"): print(fmt % var, file=sys.stderr)\ndef _is_debug(): return 'DEBUG' in os.environ\n\nif _is_debug():\n    def debug(*args): print(*args)\n    def debugline(*args): print(*args); print()\n    def debugvar(var, fmt=\"%s\"): print(fmt % var)\n    def print(*args, **kwargs): pass\n    def printline(*args, **kwargs): pass\n    def printvar(var, fmt=\"%s\"): pass\n\nread_str = lambda: read().strip()\nread_strs = lambda: read_str().split()\nread_int = lambda: int(read())\nread_ints = lambda: list(map(int, read_strs()))\nread_int_arr = lambda n: [read_int() for _ in range(n)]\nread_int_mat = lambda n, m: [read_int_arr(m) for _ in range(n)]\n\nstr_to_int = lambda s: int(s) if s.isdigit() else s\nstr_to_ints = lambda s: list(map(str_to_int, s.split()))\nstr_to_int_arr = lambda s: [str_to_int(s) for s in s.split()]\n\ndef _solve_brute(s):\n    n = len(s)\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                res = max(res, j - i + 1)\n    return res\n\ndef _solve(s):\n    n = len(s)\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                res = max(res, j - i + 1)\n    return res\n\ndef solve(s):\n    n = len(s)\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                res = max(res, j - i + 1)\n    return res\n\ndef main():\n    s = read_str()\n    print(_solve(s))\n\nif __name__ == '__main__':\n    # freopen('input.txt', 'r', stdin)\n    # freopen('output.txt', 'w', stdout)\n    main()"
}
2022-04-20 01:02:58.959296 REASON stop
2022-04-20 01:02:58.977727 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    c = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            c[i] = c[i - 1]\n        else:\n            c[i] = c[i - 1] + 1\n    print(c[-1])\n    print(*c)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:02:58.977863 REASON stop
2022-04-20 01:02:58.979285 4 {
  "finish_reason": "length",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\n# if all letters are the same, then we can color them all with the same color\nif len(set(s)) == 1:\n    print(1)\n    print(\"1 \" * n)\n    exit()\n\n# if all letters are different, then we can color them all with different colors\nif len(set(s)) == n:\n    print(n)\n    print(\" \".join(map(str, range(1, n + 1))))\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 1:\n    print(2)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 2:\n    print(3)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 3:\n    print(4)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 4:\n    print(5)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 5:\n    print(6)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 6:\n    print(7)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 7:\n    print(8)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 8:\n    print(9)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 9:\n    print(10)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 10:\n    print(11)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 11:\n    print(12)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 12:\n    print(13)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 13:\n    print(14)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 14:\n    print(15)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 15:\n    print(16)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 16:\n    print(17)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 17:\n    print(18)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 18:\n    print(19)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 19:\n    print(20)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 20:\n    print(21)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 21:\n    print(22)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 22:\n    print(23)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 23:\n    print(24)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 24:\n    print(25)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 25:\n    print(26)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 26:\n    print(27)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 27:\n    print(28)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 28:\n    print(29)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 29:\n    print(30)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 30:\n    print(31)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 31:\n    print(32)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 32:\n    print(33)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 33:\n    print(34)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 34:\n    print(35)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 35:\n    print(36)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 36:\n    print(37)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 37:\n    print(38)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 38:\n    print(39)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 39:\n    print(40)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 40:\n    print(41)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 41:\n    print(42)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 42:\n    print(43)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 43:\n    print(44)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 44:\n    print(45)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 45:\n    print(46)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 46:\n    print(47)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 47:\n    print(48)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 48:\n    print(49)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 49:\n    print(50)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 50:\n    print(51)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len(set(s)) == n - 51:\n    print(52)\n    print(\"1 \" * n)\n    exit()\n\n# if there are two letters that are the same, then we can color them with the same color\nif len"
}
2022-04-20 01:02:58.979441 REASON length
2022-04-20 01:02:58.979450 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    print(n)\n    print(s)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:02:58.979482 REASON stop
2022-04-20 01:02:58.980768 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\ndef is_sorted(s):\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            return False\n    return True\n\ndef swap(s, i):\n    s = list(s)\n    s[i], s[i + 1] = s[i + 1], s[i]\n    return ''.join(s)\n\ndef solve(s):\n    if is_sorted(s):\n        return 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            return 1 + min(solve(swap(s, i)), solve(swap(s, i + 1)))\n\nprint(solve(s))"
}
2022-04-20 01:02:58.980865 REASON stop
2022-04-20 01:02:58.981961 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(s):\n    n = len(s)\n    c = [0] * n\n    c[0] = 1\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            c[i] = c[i - 1] + 1\n        else:\n            c[i] = c[i - 1]\n    return c\n\ndef main():\n    n = int(input())\n    s = input()\n    c = solve(s)\n    print(max(c))\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    sys.exit(main())"
}
2022-04-20 01:02:58.982179 REASON stop
