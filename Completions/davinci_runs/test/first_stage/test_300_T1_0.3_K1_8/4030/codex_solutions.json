["\n\nimport sys\nimport math\nimport heapq\nimport random\nimport collections\nfrom collections import Counter, defaultdict, deque\nfrom itertools import combinations, permutations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect_left, bisect_right\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nfrom sys import stdin, stdout\ndef read(): return stdin.readline().strip()\ndef print(*args, **kwargs): stdout.write(*args, **kwargs)\ndef printline(*args, **kwargs): stdout.write(*args, **kwargs); stdout.write('\\n')\ndef printvar(var, fmt=\"%s\"): stdout.write(fmt % var)\ndef debug(*args): print(*args, file=sys.stderr)\ndef debugline(*args): print(*args, file=sys.stderr); stdout.write('\\n')\ndef debugvar(var, fmt=\"%s\"): print(fmt % var, file=sys.stderr)\ndef _is_debug(): return 'DEBUG' in os.environ\n\nif _is_debug():\n    def debug(*args): print(*args)\n    def debugline(*args): print(*args); print()\n    def debugvar(var, fmt=\"%s\"): print(fmt % var)\n    def print(*args, **kwargs): pass\n    def printline(*args, **kwargs): pass\n    def printvar(var, fmt=\"%s\"): pass\n\nread_str = lambda: read().strip()\nread_strs = lambda: read_str().split()\nread_int = lambda: int(read())\nread_ints = lambda: list(map(int, read_strs()))\nread_int_arr = lambda n: [read_int() for _ in range(n)]\nread_int_mat = lambda n, m: [read_int_arr(m) for _ in range(n)]\n\nstr_to_int = lambda s: int(s) if s.isdigit() else s\nstr_to_ints = lambda s: list(map(str_to_int, s.split()))\nstr_to_int_arr = lambda s: [str_to_int(s) for s in s.split()]\n\ndef _solve_brute(s):\n    n = len(s)\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                res = max(res, j - i + 1)\n    return res\n\ndef _solve(s):\n    n = len(s)\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                res = max(res, j - i + 1)\n    return res\n\ndef solve(s):\n    n = len(s)\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                res = max(res, j - i + 1)\n    return res\n\ndef main():\n    s = read_str()\n    print(_solve(s))\n\nif __name__ == '__main__':\n    # freopen('input.txt', 'r', stdin)\n    # freopen('output.txt', 'w', stdout)\n    main()", "\n\nimport sys\n\ndef solve(s):\n    n = len(s)\n    c = [0] * n\n    c[0] = 1\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            c[i] = c[i - 1] + 1\n        else:\n            c[i] = c[i - 1]\n    return c\n\ndef main():\n    n = int(input())\n    s = input()\n    c = solve(s)\n    print(max(c))\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    sys.exit(main())", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    c = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            c[i] = c[i - 1]\n        else:\n            c[i] = c[i - 1] + 1\n    print(c[-1])\n    print(*c)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    print(n)\n    print(s)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    s = input()\n    colors = [0] * n\n    colors[0] = 1\n    for i in range(1, n):\n        if s[i] != s[i-1]:\n            colors[i] = colors[i-1] + 1\n        else:\n            colors[i] = colors[i-1]\n    print(max(colors))\n    print(*colors)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\ns = input()\n\ndef is_sorted(s):\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            return False\n    return True\n\ndef swap(s, i):\n    s = list(s)\n    s[i], s[i + 1] = s[i + 1], s[i]\n    return ''.join(s)\n\ndef solve(s):\n    if is_sorted(s):\n        return 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            return 1 + min(solve(swap(s, i)), solve(swap(s, i + 1)))\n\nprint(solve(s))", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"]