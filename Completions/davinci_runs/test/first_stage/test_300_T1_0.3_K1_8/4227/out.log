2022-04-20 03:30:11.910968 """
You are given an undirected unweighted graph with N vertices and M edges that contains neither self-loops nor double edges.

Here, a self-loop is an edge where a_i = b_i (1≤i≤M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1≤i<j≤M).

How many different paths start from vertex 1 and visit all the vertices exactly once?

Here, the endpoints of a path are considered visited.  
For example, let us assume that the following undirected graph shown in Figure 1 is given.
Figure 1: an example of an undirected graph
The following path shown in Figure 2 satisfies the condition.
Figure 2: an example of a path that satisfies the condition
However, the following path shown in Figure 3 does not satisfy the condition, because it does not visit all the vertices.
Figure 3: an example of a path that does not satisfy the condition
Neither the following path shown in Figure 4, because it does not start from vertex 1.
Figure 4: another example of a path that does not satisfy the condition

-----Constraints-----
 - 2≦N≦8 
 - 0≦M≦N(N-1)/2 
 - 1≦a_i<b_i≦N 
 - The given graph contains neither self-loops nor double edges.

-----Input-----
The input is given from Standard Input in the following format:
N M  
a_1 b_1  
a_2 b_2
:  
a_M b_M  

-----Output-----
Print the number of the different paths that start from vertex 1 and visit all the vertices exactly once.

-----Sample Input-----
3 3
1 2
1 3
2 3

-----Sample Output-----
2

The given graph is shown in the following figure:
The following two paths satisfy the condition:
"""
2022-04-20 03:30:11.910997 --------------------------
2022-04-20 03:30:11.911161 using api key derek
2022-04-20 03:30:12.084387 in retry 8 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 03:30:17.089072 """
You are given an undirected unweighted graph with N vertices and M edges that contains neither self-loops nor double edges.

Here, a self-loop is an edge where a_i = b_i (1≤i≤M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1≤i<j≤M).

How many different paths start from vertex 1 and visit all the vertices exactly once?

Here, the endpoints of a path are considered visited.  
For example, let us assume that the following undirected graph shown in Figure 1 is given.
Figure 1: an example of an undirected graph
The following path shown in Figure 2 satisfies the condition.
Figure 2: an example of a path that satisfies the condition
However, the following path shown in Figure 3 does not satisfy the condition, because it does not visit all the vertices.
Figure 3: an example of a path that does not satisfy the condition
Neither the following path shown in Figure 4, because it does not start from vertex 1.
Figure 4: another example of a path that does not satisfy the condition

-----Constraints-----
 - 2≦N≦8 
 - 0≦M≦N(N-1)/2 
 - 1≦a_i<b_i≦N 
 - The given graph contains neither self-loops nor double edges.

-----Input-----
The input is given from Standard Input in the following format:
N M  
a_1 b_1  
a_2 b_2
:  
a_M b_M  

-----Output-----
Print the number of the different paths that start from vertex 1 and visit all the vertices exactly once.

-----Sample Input-----
3 3
1 2
1 3
2 3

-----Sample Output-----
2

The given graph is shown in the following figure:
The following two paths satisfy the condition:
"""
2022-04-20 03:30:17.089121 --------------------------
2022-04-20 03:30:17.089293 using api key sourya
2022-04-20 03:31:40.300073 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport itertools\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    edges = [[a-1, b-1] for a, b in edges]\n    edges = [[a, b] if a < b else [b, a] for a, b in edges]\n    edges = set(tuple(edge) for edge in edges)\n    vertices = [i for i in range(n)]\n    paths = itertools.permutations(vertices[1:])\n    paths = [[0] + list(path) for path in paths]\n    paths = [path for path in paths if all(path[i] < path[i+1] for i in range(n-1))]\n    paths = [path for path in paths if all(tuple(sorted([path[i], path[i+1]])) in edges for i in range(n-1))]\n    print(len(paths))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    print(n, m)\n    print(edges)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(M)]\n    print(len(edges))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef get_input():\n    n, m = map(int, sys.stdin.readline().rstrip().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, sys.stdin.readline().rstrip().split())))\n    return n, m, edges\n\ndef solve(n, m, edges):\n    # \u5168\u63a2\u7d22\n    # \u5168\u3066\u306e\u9802\u70b9\u3092\u8a2a\u308c\u308b\u7d4c\u8def\u306fn!\u901a\u308a\n    # \u5404\u7d4c\u8def\u306b\u304a\u3044\u3066\u30011\u304b\u3089\u59cb\u307e\u308b\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-2\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-2\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-(n-2)\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-3\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-(n-3)\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+2\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef dfs(graph, start, end):\n    stack = []\n    stack.append(start)\n    visited = [False] * len(graph)\n\n    while stack:\n        node = stack.pop()\n        if not visited[node]:\n            visited[node] = True\n            stack.extend(graph[node])\n    return visited[end]\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    print(dfs(graph, 0, n-1))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef dfs(v):\n    global N, M, G, visited\n    visited[v] = True\n    for i in range(N):\n        if G[v][i] == 1 and not visited[i]:\n            dfs(i)\n\ndef main():\n    global N, M, G, visited\n    N, M = map(int, sys.stdin.readline().split())\n    G = [[0 for i in range(N)] for j in range(N)]\n    visited = [False for i in range(N)]\n    for i in range(M):\n        a, b = map(int, sys.stdin.readline().split())\n        G[a-1][b-1] = 1\n        G[b-1][a-1] = 1\n    dfs(0)\n    if False in visited:\n        print(0)\n        return\n    else:\n        print(2**(N-1))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(M)]\n    print(edges)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nfrom collections import defaultdict\n\ndef get_input():\n    N, M = map(int, input().split())\n    edges = []\n    for _ in range(M):\n        edges.append(tuple(map(int, input().split())))\n    return N, M, edges\n\ndef get_graph(N, edges):\n    graph = defaultdict(list)\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    return graph\n\ndef get_paths(N, graph):\n    paths = []\n    def dfs(graph, start, visited):\n        visited.add(start)\n        for next in graph[start]:\n            if next not in visited:\n                dfs(graph, next, visited)\n        visited.remove(start)\n        paths.append(visited.copy())\n    dfs(graph, 1, set())\n    return paths\n\ndef main():\n    N, M, edges = get_input()\n    graph = get_graph(N, edges)\n    paths = get_paths(N, graph)\n    print(len(paths))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650425417,
  "id": "cmpl-4yvKjSkIe01uG7lMuxkSZ2u3FCUI7",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:31:40.300761 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport itertools\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    edges = [[a-1, b-1] for a, b in edges]\n    edges = [[a, b] if a < b else [b, a] for a, b in edges]\n    edges = set(tuple(edge) for edge in edges)\n    vertices = [i for i in range(n)]\n    paths = itertools.permutations(vertices[1:])\n    paths = [[0] + list(path) for path in paths]\n    paths = [path for path in paths if all(path[i] < path[i+1] for i in range(n-1))]\n    paths = [path for path in paths if all(tuple(sorted([path[i], path[i+1]])) in edges for i in range(n-1))]\n    print(len(paths))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:31:40.300870 REASON stop
2022-04-20 03:31:40.302462 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    print(n, m)\n    print(edges)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:31:40.302549 REASON stop
2022-04-20 03:31:40.303385 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(M)]\n    print(len(edges))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:31:40.303462 REASON stop
2022-04-20 03:31:40.338245 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef get_input():\n    n, m = map(int, sys.stdin.readline().rstrip().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, sys.stdin.readline().rstrip().split())))\n    return n, m, edges\n\ndef solve(n, m, edges):\n    # \u5168\u63a2\u7d22\n    # \u5168\u3066\u306e\u9802\u70b9\u3092\u8a2a\u308c\u308b\u7d4c\u8def\u306fn!\u901a\u308a\n    # \u5404\u7d4c\u8def\u306b\u304a\u3044\u3066\u30011\u304b\u3089\u59cb\u307e\u308b\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-2\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-2\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-(n-2)\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-3\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-(n-3)\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+2\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn-1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fm-n+1\u500b\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057\u306a\u3044\u7d4c\u8def\u306fn+1\u500b\n    # ...\n    # \u305d\u308c\u3089\u306e\u7d4c\u8def\u306e\u4e2d\u3067\u3001\u8fba\u304c\u91cd\u8907\u3057"
}
2022-04-20 03:31:40.338501 REASON length
2022-04-20 03:31:40.338525 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef dfs(graph, start, end):\n    stack = []\n    stack.append(start)\n    visited = [False] * len(graph)\n\n    while stack:\n        node = stack.pop()\n        if not visited[node]:\n            visited[node] = True\n            stack.extend(graph[node])\n    return visited[end]\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    print(dfs(graph, 0, n-1))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:31:40.338604 REASON stop
2022-04-20 03:31:40.339865 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef dfs(v):\n    global N, M, G, visited\n    visited[v] = True\n    for i in range(N):\n        if G[v][i] == 1 and not visited[i]:\n            dfs(i)\n\ndef main():\n    global N, M, G, visited\n    N, M = map(int, sys.stdin.readline().split())\n    G = [[0 for i in range(N)] for j in range(N)]\n    visited = [False for i in range(N)]\n    for i in range(M):\n        a, b = map(int, sys.stdin.readline().split())\n        G[a-1][b-1] = 1\n        G[b-1][a-1] = 1\n    dfs(0)\n    if False in visited:\n        print(0)\n        return\n    else:\n        print(2**(N-1))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:31:40.339988 REASON stop
2022-04-20 03:31:40.353584 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(M)]\n    print(edges)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:31:40.353891 REASON stop
2022-04-20 03:31:40.355143 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nfrom collections import defaultdict\n\ndef get_input():\n    N, M = map(int, input().split())\n    edges = []\n    for _ in range(M):\n        edges.append(tuple(map(int, input().split())))\n    return N, M, edges\n\ndef get_graph(N, edges):\n    graph = defaultdict(list)\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    return graph\n\ndef get_paths(N, graph):\n    paths = []\n    def dfs(graph, start, visited):\n        visited.add(start)\n        for next in graph[start]:\n            if next not in visited:\n                dfs(graph, next, visited)\n        visited.remove(start)\n        paths.append(visited.copy())\n    dfs(graph, 1, set())\n    return paths\n\ndef main():\n    N, M, edges = get_input()\n    graph = get_graph(N, edges)\n    paths = get_paths(N, graph)\n    print(len(paths))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:31:40.355256 REASON stop
