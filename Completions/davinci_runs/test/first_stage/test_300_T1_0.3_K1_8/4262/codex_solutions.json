["\n\n# -----Answer-----\n\nn = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef permutation_rank(p):\n    rank = 0\n    for i in range(len(p)):\n        smaller = 0\n        for j in range(i+1, len(p)):\n            if p[j] < p[i]:\n                smaller += 1\n        rank += smaller * factorial(len(p) - (i+1))\n    return rank\n\na = permutation_rank(p)\nb = permutation_rank(q)\n\nprint(abs(a-b))", "\n\ndef main():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    q = [int(x) for x in input().split()]\n    a = 0\n    b = 0\n    for i in range(n):\n        a += p[i] * (n - i)\n        b += q[i] * (n - i)\n    print(abs(a - b))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    p = [int(x) for x in sys.stdin.readline().rstrip().split()]\n    q = [int(x) for x in sys.stdin.readline().rstrip().split()]\n    print(abs(p.index(1) - q.index(1)))\n\nif __name__ == '__main__':\n    main()", "\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# \u5168\u63a2\u7d22\nperm = [i for i in range(1, N+1)]\n\n# P\u3068Q\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\nP_index = 0\nQ_index = 0\n\nfor i in range(1, N+1):\n    # P\u304c\u4e00\u81f4\u3057\u305f\u3089P_index\u3092\u66f4\u65b0\n    if P == perm:\n        P_index = i\n    # Q\u304c\u4e00\u81f4\u3057\u305f\u3089Q_index\u3092\u66f4\u65b0\n    if Q == perm:\n        Q_index = i\n    # \u6b21\u306e\u9806\u5217\u3092\u53d6\u5f97\n    perm = perm[1:] + [perm[0]]\n\nprint(abs(P_index - Q_index))", "\n\nimport sys\n\ndef main():\n    N = int(input())\n    P = list(map(int,input().split()))\n    Q = list(map(int,input().split()))\n\n    #create a list of all permutations\n    permutations = []\n    for i in range(1,N+1):\n        permutations.append(i)\n    permutations = permutations[::-1]\n    permutations = permutations[1:]\n    permutations = permutations[::-1]\n    permutations = [list(range(1,N+1))] + permutations\n    permutations = [list(map(str,i)) for i in permutations]\n    permutations = [''.join(i) for i in permutations]\n    permutations = [int(i) for i in permutations]\n\n    #find the index of P and Q\n    a = permutations.index(int(''.join(map(str,P))))\n    b = permutations.index(int(''.join(map(str,Q))))\n\n    print(abs(a-b))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport itertools\n\nn = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\npermutations = list(itertools.permutations(range(1, n+1)))\n\nprint(abs(permutations.index(tuple(p)) - permutations.index(tuple(q))))", "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    p_index = 0\n    q_index = 0\n    for i in range(n):\n        if p[i] != q[i]:\n            p_index = i\n            break\n    for i in range(n):\n        if p[i] != q[i]:\n            q_index = i\n            break\n    print(abs(p_index - q_index))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    #print(p)\n    #print(q)\n    p_index = 0\n    q_index = 0\n    for i in range(n):\n        if p[i] == i+1:\n            p_index += 1\n        if q[i] == i+1:\n            q_index += 1\n    print(abs(p_index-q_index))\n\nif __name__ == '__main__':\n    main()"]