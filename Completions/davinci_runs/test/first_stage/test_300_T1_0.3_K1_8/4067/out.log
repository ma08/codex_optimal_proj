2022-04-20 01:44:29.640955 """
You are given a string $s$ consisting of exactly $n$ characters, and each character is either '0', '1' or '2'. Such strings are called ternary strings.

Your task is to replace minimum number of characters in this string with other characters to obtain a balanced ternary string (balanced ternary string is a ternary string such that the number of characters '0' in this string is equal to the number of characters '1', and the number of characters '1' (and '0' obviously) is equal to the number of characters '2').

Among all possible balanced ternary strings you have to obtain the lexicographically (alphabetically) smallest.

Note that you can neither remove characters from the string nor add characters to the string. Also note that you can replace the given characters only with characters '0', '1' and '2'.

It is guaranteed that the answer exists.


-----Input-----

The first line of the input contains one integer $n$ ($3 \le n \le 3 \cdot 10^5$, $n$ is divisible by $3$) — the number of characters in $s$.

The second line contains the string $s$ consisting of exactly $n$ characters '0', '1' and '2'.


-----Output-----

Print one string — the lexicographically (alphabetically) smallest balanced ternary string which can be obtained from the given one with minimum number of replacements.

Because $n$ is divisible by $3$ it is obvious that the answer exists. And it is obvious that there is only one possible answer.


-----Examples-----
Input
3
121

Output
021

Input
6
000000

Output
001122

Input
6
211200

Output
211200

Input
6
120110

Output
120120
"""
2022-04-20 01:44:29.640970 --------------------------
2022-04-20 01:44:29.641075 using api key gabby
2022-04-20 01:45:50.995911 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\n# Count the number of 0s, 1s, and 2s\nzeros = s.count('0')\nones = s.count('1')\ntwos = s.count('2')\n\n# The number of 0s, 1s, and 2s should be equal\nassert zeros == ones == twos\n\n# The number of characters should be divisible by 3\nassert n % 3 == 0\n\n# The number of characters should be equal to the sum of 0s, 1s, and 2s\nassert n == zeros + ones + twos\n\n# The number of 0s, 1s, and 2s should be less than or equal to the number of characters\nassert zeros <= n\nassert ones <= n\nassert twos <= n\n\n# The number of 0s, 1s, and 2s should be greater than or equal to 0\nassert zeros >= 0\nassert ones >= 0\nassert twos >= 0\n\n# Replace the 0s with 2s\ns = s.replace('0', '2')\n\n# Replace the 1s with 0s\ns = s.replace('1', '0')\n\n# Replace the 2s with 1s\ns = s.replace('2', '1')\n\n# Print the result\nprint(s)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(input())\n    s = input()\n\n    if n % 3 == 0:\n        print(\"\".join(sorted(s)))\n    else:\n        print(\"\".join(sorted(s[:n-n%3]) + s[n-n%3:]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\ndef balanced_ternary(s):\n    s_count = Counter(s)\n    if s_count['1'] == s_count['2']:\n        return s\n    if s_count['1'] > s_count['2']:\n        return ''.join(['1' if c == '2' else c for c in s])\n    if s_count['1'] < s_count['2']:\n        return ''.join(['2' if c == '1' else c for c in s])\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(balanced_ternary(s))"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\n# The number of 0s, 1s, and 2s in the string\ncount = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s needed to balance the string\nbalance = [n//3, n//3, n//3]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\nreplace = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced\nreplace_i = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced\nreplace_not_i = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0\nreplace_i_0 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 1\nreplace_i_1 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 2\nreplace_i_2 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0\nreplace_not_i_0 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 1\nreplace_not_i_1 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 2\nreplace_not_i_2 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\nreplace_i_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\nreplace_not_i_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\nreplace_i_012_i1_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\nreplace_i_012_not_i1_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\nreplace_not_i_012_i1_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\nreplace_i_012_i1_012_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_not_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\nreplace_i_012_not_i1_012_not_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\nreplace_not_i_012_i1_012_not_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\nreplace_i_012_i1_012_not_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\nreplace_i_012_not_i1_012_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\nreplace_not_i_012_i1_012_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\n# and the character at index i+3 is replaced with 0, 1, or 2\nreplace_i_012_i1_012_i2_012_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_not_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_i_012_not_i1_012_not_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_not_i_012_i1_012_not_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_not_i2_012_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_i_012_i1_012_not_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_i_012_not_i1_012_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\ncounts = Counter(s)\n\nif counts['0'] == counts['1'] == counts['2']:\n    print(s)\n    exit()\n\nif counts['0'] > counts['1']:\n    if counts['0'] > counts['2']:\n        # replace 0 with 1\n        print(s.replace('0', '1', 1))\n    else:\n        # replace 0 with 2\n        print(s.replace('0', '2', 1))\nelse:\n    if counts['1'] > counts['2']:\n        # replace 1 with 0\n        print(s.replace('1', '0', 1))\n    else:\n        # replace 1 with 2\n        print(s.replace('1', '2', 1))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    assert n % 3 == 0\n    assert len(s) == n\n    assert all(c in \"012\" for c in s)\n\n    # Count the number of 0's, 1's, and 2's.\n    counts = [0, 0, 0]\n    for c in s:\n        counts[int(c)] += 1\n\n    # If the string is already balanced, we're done.\n    if counts[0] == counts[1] == counts[2]:\n        print(s)\n        return\n\n    # Otherwise, we need to replace some characters.\n    # We will replace 0's with 1's and 2's, 1's with 0's and 2's, and 2's with 0's and 1's.\n    # We will do this in such a way that the resulting string is lexicographically smallest.\n    # To do this, we will replace 0's with 1's and 2's, then 1's with 0's and 2's, then 2's with 0's and 1's.\n    # We will replace 0's with 1's and 2's in such a way that the resulting string is lexicographically smallest.\n    # To do this, we will replace 0's with 1's and 2's in the order of their indices.\n    # We will replace 1's with 0's and 2's in such a way that the resulting string is lexicographically smallest.\n    # To do this, we will replace 1's with 0's and 2's in the order of their indices.\n    # We will replace 2's with 0's and 1's in such a way that the resulting string is lexicographically smallest.\n    # To do this, we will replace 2's with 0's and 1's in the order of their indices.\n\n    # Replace 0's with 1's and 2's.\n    result = \"\"\n    for c in s:\n        if c == \"0\":\n            if counts[1] < counts[2]:\n                result += \"1\"\n                counts[1] += 1\n            else:\n                result += \"2\"\n                counts[2] += 1\n        else:\n            result += c\n\n    # Replace 1's with 0's and 2's.\n    s = result\n    result = \"\"\n    for c in s:\n        if c == \"1\":\n            if counts[0] < counts[2]:\n                result += \"0\"\n                counts[0] += 1\n            else:\n                result += \"2\"\n                counts[2] += 1\n        else:\n            result += c\n\n    # Replace 2's with 0's and 1's.\n    s = result\n    result = \"\"\n    for c in s:\n        if c == \"2\":\n            if counts[0] < counts[1]:\n                result += \"0\"\n                counts[0] += 1\n            else:\n                result += \"1\"\n                counts[1] += 1\n        else:\n            result += c\n\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    if n % 3 != 0:\n        print(\"Error\")\n        return\n    s = list(s)\n    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n    for i in range(n):\n        if s[i] == '0':\n            count_0 += 1\n        elif s[i] == '1':\n            count_1 += 1\n        else:\n            count_2 += 1\n    if count_0 == count_1 == count_2:\n        print(\"\".join(s))\n        return\n    for i in range(n):\n        if count_0 < count_1:\n            if s[i] == '2':\n                s[i] = '0'\n                count_2 -= 1\n                count_0 += 1\n        elif count_0 > count_1:\n            if s[i] == '2':\n                s[i] = '1'\n                count_2 -= 1\n                count_1 += 1\n        if count_0 == count_1:\n            break\n    for i in range(n):\n        if count_1 < count_2:\n            if s[i] == '0':\n                s[i] = '1'\n                count_0 -= 1\n                count_1 += 1\n        elif count_1 > count_2:\n            if s[i] == '0':\n                s[i] = '2'\n                count_0 -= 1\n                count_2 += 1\n        if count_1 == count_2:\n            break\n    print(\"\".join(s))\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650419069,
  "id": "cmpl-4ytgL1YXN90BqrkcRhEeZC8iQZDYf",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 01:45:50.996438 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": ""
}
2022-04-20 01:45:50.996493 REASON stop
2022-04-20 01:45:50.997018 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\n# Count the number of 0s, 1s, and 2s\nzeros = s.count('0')\nones = s.count('1')\ntwos = s.count('2')\n\n# The number of 0s, 1s, and 2s should be equal\nassert zeros == ones == twos\n\n# The number of characters should be divisible by 3\nassert n % 3 == 0\n\n# The number of characters should be equal to the sum of 0s, 1s, and 2s\nassert n == zeros + ones + twos\n\n# The number of 0s, 1s, and 2s should be less than or equal to the number of characters\nassert zeros <= n\nassert ones <= n\nassert twos <= n\n\n# The number of 0s, 1s, and 2s should be greater than or equal to 0\nassert zeros >= 0\nassert ones >= 0\nassert twos >= 0\n\n# Replace the 0s with 2s\ns = s.replace('0', '2')\n\n# Replace the 1s with 0s\ns = s.replace('1', '0')\n\n# Replace the 2s with 1s\ns = s.replace('2', '1')\n\n# Print the result\nprint(s)"
}
2022-04-20 01:45:50.997086 REASON stop
2022-04-20 01:45:50.997525 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(input())\n    s = input()\n\n    if n % 3 == 0:\n        print(\"\".join(sorted(s)))\n    else:\n        print(\"\".join(sorted(s[:n-n%3]) + s[n-n%3:]))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:45:50.997593 REASON stop
2022-04-20 01:45:51.016988 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\ndef balanced_ternary(s):\n    s_count = Counter(s)\n    if s_count['1'] == s_count['2']:\n        return s\n    if s_count['1'] > s_count['2']:\n        return ''.join(['1' if c == '2' else c for c in s])\n    if s_count['1'] < s_count['2']:\n        return ''.join(['2' if c == '1' else c for c in s])\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(balanced_ternary(s))"
}
2022-04-20 01:45:51.017117 REASON stop
2022-04-20 01:45:51.018154 4 {
  "finish_reason": "length",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\n# The number of 0s, 1s, and 2s in the string\ncount = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s needed to balance the string\nbalance = [n//3, n//3, n//3]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\nreplace = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced\nreplace_i = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced\nreplace_not_i = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0\nreplace_i_0 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 1\nreplace_i_1 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 2\nreplace_i_2 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0\nreplace_not_i_0 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 1\nreplace_not_i_1 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 2\nreplace_not_i_2 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\nreplace_i_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\nreplace_not_i_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\nreplace_i_012_i1_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\nreplace_i_012_not_i1_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\nreplace_not_i_012_i1_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\nreplace_i_012_i1_012_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_not_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\nreplace_i_012_not_i1_012_not_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\nreplace_not_i_012_i1_012_not_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\nreplace_i_012_i1_012_not_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\nreplace_i_012_not_i1_012_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\nreplace_not_i_012_i1_012_i2_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\n# and the character at index i+3 is replaced with 0, 1, or 2\nreplace_i_012_i1_012_i2_012_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_not_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_i_012_not_i1_012_not_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_not_i_012_i1_012_not_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is not replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is replaced with 0, 1, or 2\nreplace_not_i_012_not_i1_012_not_i2_012_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is replaced with 0, 1, or 2\n# and the character at index i+2 is not replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_i_012_i1_012_not_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s, 1s, and 2s that need to be replaced to balance the string\n# if the character at index i is replaced with 0, 1, or 2\n# and the character at index i+1 is not replaced with 0, 1, or 2\n# and the character at index i+2 is replaced with 0, 1, or 2\n# and the character at index i+3 is not replaced with 0, 1, or 2\nreplace_i_012_not_i1_012_i2_012_not_i3_012 = [0, 0, 0]\n\n# The number of 0s"
}
2022-04-20 01:45:51.018325 REASON length
2022-04-20 01:45:51.018334 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\ncounts = Counter(s)\n\nif counts['0'] == counts['1'] == counts['2']:\n    print(s)\n    exit()\n\nif counts['0'] > counts['1']:\n    if counts['0'] > counts['2']:\n        # replace 0 with 1\n        print(s.replace('0', '1', 1))\n    else:\n        # replace 0 with 2\n        print(s.replace('0', '2', 1))\nelse:\n    if counts['1'] > counts['2']:\n        # replace 1 with 0\n        print(s.replace('1', '0', 1))\n    else:\n        # replace 1 with 2\n        print(s.replace('1', '2', 1))"
}
2022-04-20 01:45:51.018370 REASON stop
2022-04-20 01:45:51.039474 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    assert n % 3 == 0\n    assert len(s) == n\n    assert all(c in \"012\" for c in s)\n\n    # Count the number of 0's, 1's, and 2's.\n    counts = [0, 0, 0]\n    for c in s:\n        counts[int(c)] += 1\n\n    # If the string is already balanced, we're done.\n    if counts[0] == counts[1] == counts[2]:\n        print(s)\n        return\n\n    # Otherwise, we need to replace some characters.\n    # We will replace 0's with 1's and 2's, 1's with 0's and 2's, and 2's with 0's and 1's.\n    # We will do this in such a way that the resulting string is lexicographically smallest.\n    # To do this, we will replace 0's with 1's and 2's, then 1's with 0's and 2's, then 2's with 0's and 1's.\n    # We will replace 0's with 1's and 2's in such a way that the resulting string is lexicographically smallest.\n    # To do this, we will replace 0's with 1's and 2's in the order of their indices.\n    # We will replace 1's with 0's and 2's in such a way that the resulting string is lexicographically smallest.\n    # To do this, we will replace 1's with 0's and 2's in the order of their indices.\n    # We will replace 2's with 0's and 1's in such a way that the resulting string is lexicographically smallest.\n    # To do this, we will replace 2's with 0's and 1's in the order of their indices.\n\n    # Replace 0's with 1's and 2's.\n    result = \"\"\n    for c in s:\n        if c == \"0\":\n            if counts[1] < counts[2]:\n                result += \"1\"\n                counts[1] += 1\n            else:\n                result += \"2\"\n                counts[2] += 1\n        else:\n            result += c\n\n    # Replace 1's with 0's and 2's.\n    s = result\n    result = \"\"\n    for c in s:\n        if c == \"1\":\n            if counts[0] < counts[2]:\n                result += \"0\"\n                counts[0] += 1\n            else:\n                result += \"2\"\n                counts[2] += 1\n        else:\n            result += c\n\n    # Replace 2's with 0's and 1's.\n    s = result\n    result = \"\"\n    for c in s:\n        if c == \"2\":\n            if counts[0] < counts[1]:\n                result += \"0\"\n                counts[0] += 1\n            else:\n                result += \"1\"\n                counts[1] += 1\n        else:\n            result += c\n\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:45:51.039617 REASON stop
2022-04-20 01:45:51.042349 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    if n % 3 != 0:\n        print(\"Error\")\n        return\n    s = list(s)\n    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n    for i in range(n):\n        if s[i] == '0':\n            count_0 += 1\n        elif s[i] == '1':\n            count_1 += 1\n        else:\n            count_2 += 1\n    if count_0 == count_1 == count_2:\n        print(\"\".join(s))\n        return\n    for i in range(n):\n        if count_0 < count_1:\n            if s[i] == '2':\n                s[i] = '0'\n                count_2 -= 1\n                count_0 += 1\n        elif count_0 > count_1:\n            if s[i] == '2':\n                s[i] = '1'\n                count_2 -= 1\n                count_1 += 1\n        if count_0 == count_1:\n            break\n    for i in range(n):\n        if count_1 < count_2:\n            if s[i] == '0':\n                s[i] = '1'\n                count_0 -= 1\n                count_1 += 1\n        elif count_1 > count_2:\n            if s[i] == '0':\n                s[i] = '2'\n                count_0 -= 1\n                count_2 += 1\n        if count_1 == count_2:\n            break\n    print(\"\".join(s))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:45:51.042553 REASON stop
