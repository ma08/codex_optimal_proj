2022-04-20 00:41:05.719460 """
The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).

You are given a sequence $a$ consisting of $n$ integers.

You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).

For example, for the sequence $[1, 2, 4, 3, 2]$ the answer is $4$ (you take $1$ and the sequence becomes $[2, 4, 3, 2]$, then you take the rightmost element $2$ and the sequence becomes $[2, 4, 3]$, then you take $3$ and the sequence becomes $[2, 4]$ and then you take $4$ and the sequence becomes $[2]$, the obtained increasing sequence is $[1, 2, 3, 4]$).


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 2 \cdot 10^5$), where $a_i$ is the $i$-th element of $a$.


-----Output-----

In the first line of the output print $k$ — the maximum number of elements in a strictly increasing sequence you can obtain.

In the second line print a string $s$ of length $k$, where the $j$-th character of this string $s_j$ should be 'L' if you take the leftmost element during the $j$-th move and 'R' otherwise. If there are multiple answers, you can print any.


-----Examples-----
Input
5
1 2 4 3 2

Output
4
LRRR

Input
7
1 3 5 6 5 4 2

Output
6
LRLRRR

Input
3
2 2 2

Output
1
R

Input
4
1 2 4 3

Output
4
LLRR



-----Note-----

The first example is described in the problem statement.
"""
2022-04-20 00:41:05.719476 --------------------------
2022-04-20 00:41:05.719575 using api key derek
2022-04-20 00:42:33.319540 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = [int(i) for i in sys.stdin.readline().split()]\n    dp = [[0, 0] for i in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = dp[i - 1][1] + 1\n        elif a[i] < a[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n            dp[i][1] = dp[i - 1][1] + 1\n        else:\n            dp[i][0] = dp[i - 1][0]\n            dp[i][1] = dp[i - 1][1]\n    print(max(dp[n - 1][0], dp[n - 1][1]))\n    if dp[n - 1][0] > dp[n - 1][1]:\n        i = n - 1\n        while i > 0:\n            if dp[i][0] == dp[i - 1][0] + 1 and a[i] > a[i - 1]:\n                print('L', end='')\n            else:\n                print('R', end='')\n            i -= 1\n    else:\n        i = n - 1\n        while i > 0:\n            if dp[i][1] == dp[i - 1][1] + 1 and a[i] > a[i - 1]:\n                print('L', end='')\n            else:\n                print('R', end='')\n            i -= 1\n    print()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    # read input\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # solve\n    res = solve(n, a)\n\n    # print result\n    print(res[0])\n    print(res[1])\n\n\ndef solve(n, a):\n    # create a list of tuples with the index and the value of the element\n    # this is done to keep track of the index of the element in the original array\n    # and to be able to sort the elements by their value\n    b = [(i, a[i]) for i in range(n)]\n    b.sort(key=lambda x: x[1])\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element\n    c = [(b[0][0], 1)]\n    for i in range(1, n):\n        if b[i][1] > b[i-1][1]:\n            c.append((b[i][0], c[i-1][1] + 1))\n        else:\n            c.append((b[i][0], 1))\n\n    # find the maximum length of the longest increasing subsequence\n    max_len = max(c, key=lambda x: x[1])[1]\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    d = [(b[n-1][0], 1)]\n    for i in range(n-2, -1, -1):\n        if b[i][1] < b[i+1][1]:\n            d.append((b[i][0], d[n-2-i][1] + 1))\n        else:\n            d.append((b[i][0], 1))\n    d.reverse()\n\n    # find the index of the element that is the start of the longest increasing subsequence\n    max_start = -1\n    for i in range(n):\n        if c[i][1] + d[i][1] - 1 == max_len:\n            max_start = i\n            break\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    e = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] > b[i-1][1]:\n            e.append((b[i][0], e[i-1-max_start][1] + 1))\n        else:\n            e.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    f = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] < b[i+1][1]:\n            f.append((b[i][0], f[n-2-i][1] + 1))\n        else:\n            f.append((b[i][0], 1))\n    f.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    g = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] < b[i+1][1]:\n            g.append((b[i][0], g[max_start-1-i][1] + 1))\n        else:\n            g.append((b[i][0], 1))\n    g.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    h = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] > b[i+1][1]:\n            h.append((b[i][0], h[max_start-1-i][1] + 1))\n        else:\n            h.append((b[i][0], 1))\n    h.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    i = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] > b[i+1][1]:\n            i.append((b[i][0], i[n-2-i][1] + 1))\n        else:\n            i.append((b[i][0], 1))\n    i.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    j = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] < b[i-1][1]:\n            j.append((b[i][0], j[i-1-max_start][1] + 1))\n        else:\n            j.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    k = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] < b[i+1][1]:\n            k.append((b[i][0], k[n-2-i][1] + 1))\n        else:\n            k.append((b[i][0], 1))\n    k.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    l = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] > b[i-1][1]:\n            l.append((b[i][0], l[i-1-max_start][1] + 1))\n        else:\n            l.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    m = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] > b[i+1][1]:\n            m.append((b[i][0], m[max_start-1-i][1] + 1))\n        else:\n            m.append((b[i][0], 1))\n    m.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    o = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] > b[i+1][1]:\n            o.append((b[i][0], o[n-2-i][1] + 1))\n        else:\n            o.append((b[i][0], 1))\n    o.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    p = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] < b[i-1][1]:\n            p.append((b[i][0], p[i-1-max_start][1] + 1))\n        else:\n            p.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    q = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] < b[i+1][1]:\n            q.append((b[i][0], q[n-2-i][1] + 1))\n        else:\n            q.append((b[i][0], 1))\n    q.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    r = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] < b[i+1][1]:\n            r.append((b[i][0], r[max_start-1-i][1] + 1))\n        else:\n            r.append((b[i][0], 1))\n    r.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    s = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] > b[i-1][1]:\n            s.append((b[i][0], s[i-1-max_start][1] + 1))\n        else:\n            s.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    t = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] > b[i+1][1]:\n            t.append((b[i][0], t[n-2-i][1] + 1))\n        else:\n            t.append((b[i][0], 1))\n    t.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    u = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] > b[i+1][1]:\n            u.append((b[i][0], u[max_start-1-i][1] + 1))\n        else:\n            u.append((b[i][0], 1))\n    u.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    v = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] < b[i+1][1]:\n            v.append((b[i][0], v[n-2-i][1] + 1))\n        else:\n            v.append((b[i][0], 1))\n    v.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\n#Problem C1\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    print('R')\n    exit()\n\nif n == 2:\n    if a[0] < a[1]:\n        print(2)\n        print('LR')\n    else:\n        print(1)\n        print('R')\n    exit()\n\nif a[0] < a[1]:\n    print(2)\n    print('LR')\n    exit()\n\nif a[-1] > a[-2]:\n    print(2)\n    print('RL')\n    exit()\n\nprint(1)\nprint('R')\n\n#Problem C2\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    print('R')\n    exit()\n\nif n == 2:\n    if a[0] < a[1]:\n        print(2)\n        print('LR')\n    else:\n        print(1)\n        print('R')\n    exit()\n\nif a[0] < a[1]:\n    print(2)\n    print('LR')\n    exit()\n\nif a[-1] > a[-2]:\n    print(2)\n    print('RL')\n    exit()\n\nprint(1)\nprint('R')"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = [0] * n\n    r = [0] * n\n    for i in range(1, n):\n        l[i] = l[i-1]\n        if a[i] > a[i-1]:\n            l[i] = i\n    for i in range(n-2, -1, -1):\n        r[i] = r[i+1]\n        if a[i] < a[i+1]:\n            r[i] = i\n    ans = 0\n    for i in range(n):\n        if l[i] + r[i] - i > ans:\n            ans = l[i] + r[i] - i\n    print(ans+1)\n    if ans == 0:\n        print('R')\n        return\n    i = 0\n    while i < n:\n        if l[i] == 0:\n            print('R', end='')\n            i = r[i] + 1\n        else:\n            print('L', end='')\n            i = l[i] + 1\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\n#Problem C1\n\n#-----Imports-----\n\nfrom collections import deque\n\n#-----Input-----\n\nn = int(input())\na = list(map(int,input().split()))\n\n#-----Solution-----\n\n#We will use a double ended queue to store the sequence\n#We will also use a list to store the moves\n\n#Initialize the queue and the moves list\nq = deque()\nmoves = []\n\n#We will iterate through the sequence\n#We will add the first element to the queue\n#We will also add the move to the list\n\nq.append(a[0])\nmoves.append('L')\n\n#We will iterate through the rest of the sequence\nfor i in range(1,n):\n    #We will check if the current element is greater than the last element in the queue\n    #If it is, we will add it to the queue\n    #We will also add the move to the list\n    if a[i] > q[-1]:\n        q.append(a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the first element in the queue\n    #If it is, we will add it to the front of the queue\n    #We will also add the move to the list\n    elif a[i] > q[0]:\n        q.appendleft(a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the second element in the queue\n    #If it is, we will add it to the second position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[1]:\n        q.insert(1,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the second to last element in the queue\n    #If it is, we will add it to the second to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-2]:\n        q.insert(-1,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the third element in the queue\n    #If it is, we will add it to the third position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[2]:\n        q.insert(2,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the third to last element in the queue\n    #If it is, we will add it to the third to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-3]:\n        q.insert(-2,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the fourth element in the queue\n    #If it is, we will add it to the fourth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[3]:\n        q.insert(3,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the fourth to last element in the queue\n    #If it is, we will add it to the fourth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-4]:\n        q.insert(-3,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the fifth element in the queue\n    #If it is, we will add it to the fifth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[4]:\n        q.insert(4,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the fifth to last element in the queue\n    #If it is, we will add it to the fifth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-5]:\n        q.insert(-4,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the sixth element in the queue\n    #If it is, we will add it to the sixth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[5]:\n        q.insert(5,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the sixth to last element in the queue\n    #If it is, we will add it to the sixth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-6]:\n        q.insert(-5,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the seventh element in the queue\n    #If it is, we will add it to the seventh position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[6]:\n        q.insert(6,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the seventh to last element in the queue\n    #If it is, we will add it to the seventh to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-7]:\n        q.insert(-6,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the eighth element in the queue\n    #If it is, we will add it to the eighth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[7]:\n        q.insert(7,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the eighth to last element in the queue\n    #If it is, we will add it to the eighth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-8]:\n        q.insert(-7,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the ninth element in the queue\n    #If it is, we will add it to the ninth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[8]:\n        q.insert(8,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the ninth to last element in the queue\n    #If it is, we will add it to the ninth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-9]:\n        q.insert(-8,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the tenth element in the queue\n    #If it is, we will add it to the tenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[9]:\n        q.insert(9,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the tenth to last element in the queue\n    #If it is, we will add it to the tenth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-10]:\n        q.insert(-9,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the eleventh element in the queue\n    #If it is, we will add it to the eleventh position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[10]:\n        q.insert(10,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the eleventh to last element in the queue\n    #If it is, we will add it to the eleventh to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-11]:\n        q.insert(-10,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the twelfth element in the queue\n    #If it is, we will add it to the twelfth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[11]:\n        q.insert(11,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the twelfth to last element in the queue\n    #If it is, we will add it to the twelfth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-12]:\n        q.insert(-11,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the thirteenth element in the queue\n    #If it is, we will add it to the thirteenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[12]:\n        q.insert(12,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the thirteenth to last element in the queue\n    #If it is, we will add it to the thirteenth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-13]:\n        q.insert(-12,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the fourteenth element in the queue\n    #If it is, we will add it to the fourteenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[13]:\n        q.insert(13,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the fourteenth to last element in the queue\n    #If it is, we will add it to the fourteenth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-14]:\n        q.insert(-13,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the fifteenth element in the queue\n    #If it is, we will add it to the fifteenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[14]:\n        q.insert(14,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the fifteenth to last element in the queue\n    #If it is, we will add it to the fifteenth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-15]:\n        q.insert(-14,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the sixteenth element in the queue\n    #If it is, we will add it to the sixteenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[15]:\n        q.insert(15,a[i])\n        moves.append('L"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = [1] * n\n    r = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            l[i] = l[i-1] + 1\n    for i in range(n-2, -1, -1):\n        if a[i] < a[i+1]:\n            r[i] = r[i+1] + 1\n    mx = 0\n    mx_i = -1\n    for i in range(n):\n        if l[i] + r[i] - 1 > mx:\n            mx = l[i] + r[i] - 1\n            mx_i = i\n    print(mx)\n    s = ''\n    for i in range(mx_i):\n        s += 'L'\n    for i in range(mx_i, n-1):\n        s += 'R'\n    print(s)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    print(\"R\")\n    exit()\n\nif n == 2:\n    if a[0] == a[1]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 3:\n    if a[0] == a[1] or a[1] == a[2]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 4:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 5:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 6:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 7:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 8:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 9:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 10:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 11:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 12:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 13:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 14:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 15:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 16:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 17:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 18:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16] or a[16] == a[17]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 19:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16] or a[16] == a[17] or a[17] == a[18]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 20:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16] or a[16] == a[17] or a[17] == a[18] or a[18] == a[19]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 21:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16] or a[16] == a"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = []\n    l, r = 0, n - 1\n    while l <= r:\n        if a[l] < a[r]:\n            ans.append('L')\n            l += 1\n        else:\n            ans.append('R')\n            r -= 1\n    print(len(ans))\n    print(''.join(ans))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650415266,
  "id": "cmpl-4ysh0RSRhVqzvePqOl3f87pNZGbq0",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 00:42:33.320126 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = [int(i) for i in sys.stdin.readline().split()]\n    dp = [[0, 0] for i in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = dp[i - 1][1] + 1\n        elif a[i] < a[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n            dp[i][1] = dp[i - 1][1] + 1\n        else:\n            dp[i][0] = dp[i - 1][0]\n            dp[i][1] = dp[i - 1][1]\n    print(max(dp[n - 1][0], dp[n - 1][1]))\n    if dp[n - 1][0] > dp[n - 1][1]:\n        i = n - 1\n        while i > 0:\n            if dp[i][0] == dp[i - 1][0] + 1 and a[i] > a[i - 1]:\n                print('L', end='')\n            else:\n                print('R', end='')\n            i -= 1\n    else:\n        i = n - 1\n        while i > 0:\n            if dp[i][1] == dp[i - 1][1] + 1 and a[i] > a[i - 1]:\n                print('L', end='')\n            else:\n                print('R', end='')\n            i -= 1\n    print()\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 00:42:33.320185 REASON stop
2022-04-20 00:42:33.320916 1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    # read input\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # solve\n    res = solve(n, a)\n\n    # print result\n    print(res[0])\n    print(res[1])\n\n\ndef solve(n, a):\n    # create a list of tuples with the index and the value of the element\n    # this is done to keep track of the index of the element in the original array\n    # and to be able to sort the elements by their value\n    b = [(i, a[i]) for i in range(n)]\n    b.sort(key=lambda x: x[1])\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element\n    c = [(b[0][0], 1)]\n    for i in range(1, n):\n        if b[i][1] > b[i-1][1]:\n            c.append((b[i][0], c[i-1][1] + 1))\n        else:\n            c.append((b[i][0], 1))\n\n    # find the maximum length of the longest increasing subsequence\n    max_len = max(c, key=lambda x: x[1])[1]\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    d = [(b[n-1][0], 1)]\n    for i in range(n-2, -1, -1):\n        if b[i][1] < b[i+1][1]:\n            d.append((b[i][0], d[n-2-i][1] + 1))\n        else:\n            d.append((b[i][0], 1))\n    d.reverse()\n\n    # find the index of the element that is the start of the longest increasing subsequence\n    max_start = -1\n    for i in range(n):\n        if c[i][1] + d[i][1] - 1 == max_len:\n            max_start = i\n            break\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    e = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] > b[i-1][1]:\n            e.append((b[i][0], e[i-1-max_start][1] + 1))\n        else:\n            e.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    f = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] < b[i+1][1]:\n            f.append((b[i][0], f[n-2-i][1] + 1))\n        else:\n            f.append((b[i][0], 1))\n    f.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    g = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] < b[i+1][1]:\n            g.append((b[i][0], g[max_start-1-i][1] + 1))\n        else:\n            g.append((b[i][0], 1))\n    g.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    h = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] > b[i+1][1]:\n            h.append((b[i][0], h[max_start-1-i][1] + 1))\n        else:\n            h.append((b[i][0], 1))\n    h.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    i = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] > b[i+1][1]:\n            i.append((b[i][0], i[n-2-i][1] + 1))\n        else:\n            i.append((b[i][0], 1))\n    i.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    j = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] < b[i-1][1]:\n            j.append((b[i][0], j[i-1-max_start][1] + 1))\n        else:\n            j.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    k = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] < b[i+1][1]:\n            k.append((b[i][0], k[n-2-i][1] + 1))\n        else:\n            k.append((b[i][0], 1))\n    k.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    l = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] > b[i-1][1]:\n            l.append((b[i][0], l[i-1-max_start][1] + 1))\n        else:\n            l.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    m = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] > b[i+1][1]:\n            m.append((b[i][0], m[max_start-1-i][1] + 1))\n        else:\n            m.append((b[i][0], 1))\n    m.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    o = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] > b[i+1][1]:\n            o.append((b[i][0], o[n-2-i][1] + 1))\n        else:\n            o.append((b[i][0], 1))\n    o.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    p = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] < b[i-1][1]:\n            p.append((b[i][0], p[i-1-max_start][1] + 1))\n        else:\n            p.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    q = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] < b[i+1][1]:\n            q.append((b[i][0], q[n-2-i][1] + 1))\n        else:\n            q.append((b[i][0], 1))\n    q.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    r = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] < b[i+1][1]:\n            r.append((b[i][0], r[max_start-1-i][1] + 1))\n        else:\n            r.append((b[i][0], 1))\n    r.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    s = [(b[max_start][0], 1)]\n    for i in range(max_start+1, n):\n        if b[i][1] > b[i-1][1]:\n            s.append((b[i][0], s[i-1-max_start][1] + 1))\n        else:\n            s.append((b[i][0], 1))\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    t = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] > b[i+1][1]:\n            t.append((b[i][0], t[n-2-i][1] + 1))\n        else:\n            t.append((b[i][0], 1))\n    t.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    u = [(b[max_start][0], 1)]\n    for i in range(max_start-1, -1, -1):\n        if b[i][1] > b[i+1][1]:\n            u.append((b[i][0], u[max_start-1-i][1] + 1))\n        else:\n            u.append((b[i][0], 1))\n    u.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing subsequence\n    # ending at that element, but starting from the end of the array\n    v = [(b[n-1][0], 1)]\n    for i in range(n-2, max_start, -1):\n        if b[i][1] < b[i+1][1]:\n            v.append((b[i][0], v[n-2-i][1] + 1))\n        else:\n            v.append((b[i][0], 1))\n    v.reverse()\n\n    # create a list of tuples with the index of the element and the length of the longest increasing"
}
2022-04-20 00:42:33.321084 REASON length
2022-04-20 00:42:33.321094 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\n#Problem C1\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    print('R')\n    exit()\n\nif n == 2:\n    if a[0] < a[1]:\n        print(2)\n        print('LR')\n    else:\n        print(1)\n        print('R')\n    exit()\n\nif a[0] < a[1]:\n    print(2)\n    print('LR')\n    exit()\n\nif a[-1] > a[-2]:\n    print(2)\n    print('RL')\n    exit()\n\nprint(1)\nprint('R')\n\n#Problem C2\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    print('R')\n    exit()\n\nif n == 2:\n    if a[0] < a[1]:\n        print(2)\n        print('LR')\n    else:\n        print(1)\n        print('R')\n    exit()\n\nif a[0] < a[1]:\n    print(2)\n    print('LR')\n    exit()\n\nif a[-1] > a[-2]:\n    print(2)\n    print('RL')\n    exit()\n\nprint(1)\nprint('R')"
}
2022-04-20 00:42:33.321139 REASON stop
2022-04-20 00:42:33.321780 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = [0] * n\n    r = [0] * n\n    for i in range(1, n):\n        l[i] = l[i-1]\n        if a[i] > a[i-1]:\n            l[i] = i\n    for i in range(n-2, -1, -1):\n        r[i] = r[i+1]\n        if a[i] < a[i+1]:\n            r[i] = i\n    ans = 0\n    for i in range(n):\n        if l[i] + r[i] - i > ans:\n            ans = l[i] + r[i] - i\n    print(ans+1)\n    if ans == 0:\n        print('R')\n        return\n    i = 0\n    while i < n:\n        if l[i] == 0:\n            print('R', end='')\n            i = r[i] + 1\n        else:\n            print('L', end='')\n            i = l[i] + 1\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 00:42:33.321868 REASON stop
2022-04-20 00:42:33.347183 4 {
  "finish_reason": "length",
  "index": 4,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\n#Problem C1\n\n#-----Imports-----\n\nfrom collections import deque\n\n#-----Input-----\n\nn = int(input())\na = list(map(int,input().split()))\n\n#-----Solution-----\n\n#We will use a double ended queue to store the sequence\n#We will also use a list to store the moves\n\n#Initialize the queue and the moves list\nq = deque()\nmoves = []\n\n#We will iterate through the sequence\n#We will add the first element to the queue\n#We will also add the move to the list\n\nq.append(a[0])\nmoves.append('L')\n\n#We will iterate through the rest of the sequence\nfor i in range(1,n):\n    #We will check if the current element is greater than the last element in the queue\n    #If it is, we will add it to the queue\n    #We will also add the move to the list\n    if a[i] > q[-1]:\n        q.append(a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the first element in the queue\n    #If it is, we will add it to the front of the queue\n    #We will also add the move to the list\n    elif a[i] > q[0]:\n        q.appendleft(a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the second element in the queue\n    #If it is, we will add it to the second position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[1]:\n        q.insert(1,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the second to last element in the queue\n    #If it is, we will add it to the second to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-2]:\n        q.insert(-1,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the third element in the queue\n    #If it is, we will add it to the third position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[2]:\n        q.insert(2,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the third to last element in the queue\n    #If it is, we will add it to the third to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-3]:\n        q.insert(-2,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the fourth element in the queue\n    #If it is, we will add it to the fourth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[3]:\n        q.insert(3,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the fourth to last element in the queue\n    #If it is, we will add it to the fourth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-4]:\n        q.insert(-3,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the fifth element in the queue\n    #If it is, we will add it to the fifth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[4]:\n        q.insert(4,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the fifth to last element in the queue\n    #If it is, we will add it to the fifth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-5]:\n        q.insert(-4,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the sixth element in the queue\n    #If it is, we will add it to the sixth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[5]:\n        q.insert(5,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the sixth to last element in the queue\n    #If it is, we will add it to the sixth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-6]:\n        q.insert(-5,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the seventh element in the queue\n    #If it is, we will add it to the seventh position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[6]:\n        q.insert(6,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the seventh to last element in the queue\n    #If it is, we will add it to the seventh to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-7]:\n        q.insert(-6,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the eighth element in the queue\n    #If it is, we will add it to the eighth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[7]:\n        q.insert(7,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the eighth to last element in the queue\n    #If it is, we will add it to the eighth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-8]:\n        q.insert(-7,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the ninth element in the queue\n    #If it is, we will add it to the ninth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[8]:\n        q.insert(8,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the ninth to last element in the queue\n    #If it is, we will add it to the ninth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-9]:\n        q.insert(-8,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the tenth element in the queue\n    #If it is, we will add it to the tenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[9]:\n        q.insert(9,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the tenth to last element in the queue\n    #If it is, we will add it to the tenth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-10]:\n        q.insert(-9,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the eleventh element in the queue\n    #If it is, we will add it to the eleventh position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[10]:\n        q.insert(10,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the eleventh to last element in the queue\n    #If it is, we will add it to the eleventh to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-11]:\n        q.insert(-10,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the twelfth element in the queue\n    #If it is, we will add it to the twelfth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[11]:\n        q.insert(11,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the twelfth to last element in the queue\n    #If it is, we will add it to the twelfth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-12]:\n        q.insert(-11,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the thirteenth element in the queue\n    #If it is, we will add it to the thirteenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[12]:\n        q.insert(12,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the thirteenth to last element in the queue\n    #If it is, we will add it to the thirteenth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-13]:\n        q.insert(-12,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the fourteenth element in the queue\n    #If it is, we will add it to the fourteenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[13]:\n        q.insert(13,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the fourteenth to last element in the queue\n    #If it is, we will add it to the fourteenth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-14]:\n        q.insert(-13,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the fifteenth element in the queue\n    #If it is, we will add it to the fifteenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[14]:\n        q.insert(14,a[i])\n        moves.append('L')\n    #If it is not, we will check if it is greater than the fifteenth to last element in the queue\n    #If it is, we will add it to the fifteenth to last position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[-15]:\n        q.insert(-14,a[i])\n        moves.append('R')\n    #If it is not, we will check if it is greater than the sixteenth element in the queue\n    #If it is, we will add it to the sixteenth position in the queue\n    #We will also add the move to the list\n    elif a[i] > q[15]:\n        q.insert(15,a[i])\n        moves.append('L"
}
2022-04-20 00:42:33.347380 REASON length
2022-04-20 00:42:33.347391 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = [1] * n\n    r = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            l[i] = l[i-1] + 1\n    for i in range(n-2, -1, -1):\n        if a[i] < a[i+1]:\n            r[i] = r[i+1] + 1\n    mx = 0\n    mx_i = -1\n    for i in range(n):\n        if l[i] + r[i] - 1 > mx:\n            mx = l[i] + r[i] - 1\n            mx_i = i\n    print(mx)\n    s = ''\n    for i in range(mx_i):\n        s += 'L'\n    for i in range(mx_i, n-1):\n        s += 'R'\n    print(s)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 00:42:33.347433 REASON stop
2022-04-20 00:42:33.366039 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    print(\"R\")\n    exit()\n\nif n == 2:\n    if a[0] == a[1]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 3:\n    if a[0] == a[1] or a[1] == a[2]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 4:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 5:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 6:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 7:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 8:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 9:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 10:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 11:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 12:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 13:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 14:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 15:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 16:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 17:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 18:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16] or a[16] == a[17]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 19:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16] or a[16] == a[17] or a[17] == a[18]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 20:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16] or a[16] == a[17] or a[17] == a[18] or a[18] == a[19]:\n        print(1)\n        print(\"R\")\n    else:\n        print(2)\n        print(\"LR\")\n    exit()\n\nif n == 21:\n    if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[10] == a[11] or a[11] == a[12] or a[12] == a[13] or a[13] == a[14] or a[14] == a[15] or a[15] == a[16] or a[16] == a"
}
2022-04-20 00:42:33.366201 REASON length
2022-04-20 00:42:33.366209 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = []\n    l, r = 0, n - 1\n    while l <= r:\n        if a[l] < a[r]:\n            ans.append('L')\n            l += 1\n        else:\n            ans.append('R')\n            r -= 1\n    print(len(ans))\n    print(''.join(ans))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 00:42:33.366341 REASON stop
