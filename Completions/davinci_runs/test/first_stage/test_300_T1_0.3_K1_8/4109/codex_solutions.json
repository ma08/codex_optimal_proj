["\n\n# \u5168\u63a2\u7d22\n# \u5168\u63a2\u7d22\u3067\u306f\u3001\u66f8\u7c4d\u3092\u8cb7\u3046\u304b\u8cb7\u308f\u306a\u3044\u304b\u3092\u5168\u63a2\u7d22\u3059\u308b\u3002\n# \u8cb7\u3046\u5834\u5408\u306f\u3001\u66f8\u7c4d\u306e\u4fa1\u683c\u3092\u52a0\u7b97\u3057\u3001\u66f8\u7c4d\u306e\u52b9\u679c\u3092\u52a0\u7b97\u3059\u308b\u3002\n# \u8cb7\u308f\u306a\u3044\u5834\u5408\u306f\u3001\u66f8\u7c4d\u306e\u4fa1\u683c\u3092\u52a0\u7b97\u3057\u306a\u3044\u3002\n# \u66f8\u7c4d\u3092\u8cb7\u3046\u304b\u8cb7\u308f\u306a\u3044\u304b\u306f\u3001\u30d3\u30c3\u30c8\u5217\u3092\u4f7f\u3063\u3066\u5168\u63a2\u7d22\u3059\u308b\u3002\n# \u5168\u63a2\u7d22\u3067\u306f\u3001\u66f8\u7c4d\u3092\u8cb7\u3063\u305f\u5834\u5408\u306e\u4fa1\u683c\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u3002\n# \u5168\u63a2\u7d22\u3067\u306f\u3001\u66f8\u7c4d\u3092\u8cb7\u3063\u305f\u5834\u5408\u306e\u4fa1\u683c\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u3002\n# \u5168\u63a2\u7d22\u3067\u306f\u3001\u66f8\u7c4d\u3092\u8cb7\u3063\u305f\u5834\u5408\u306e\u4fa1\u683c\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u3002\n# \u5168\u63a2\u7d22\u3067\u306f\u3001\u66f8\u7c4d\u3092\u8cb7\u3063\u305f\u5834\u5408\u306e\u4fa1\u683c\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u3002\n# \u5168\u63a2\u7d22\u3067\u306f\u3001\u66f8\u7c4d\u3092\u8cb7\u3063\u305f\u5834\u5408\u306e\u4fa1\u683c\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u3002\n\n\nn, m, x = map(int, input().split())\nc = [0] * n\na = [[0] * m for _ in range(n)]\nfor i in range(n):\n    c[i], *a[i] = map(int, input().split())\n\nans = 10 ** 9\nfor i in range(2 ** n):\n    cost = 0\n    algo = [0] * m\n    for j in range(n):\n        if (i >> j) & 1:\n            cost += c[j]\n            for k in range(m):\n                algo[k] += a[j][k]\n    if min(algo) >= x:\n        ans = min(ans, cost)\n\nif ans == 10 ** 9:\n    print(-1)\nelse:\n    print(ans)", "\n\nimport sys\n\ndef solve(N,M,A,C):\n    #A[i][j] is the amount of understanding of j-th algorithm if i-th book is read\n    #C[i] is the cost of i-th book\n    #N is the number of books\n    #M is the number of algorithms\n    #X is the minimum understanding required for each algorithm\n    #Y is the total amount of money required to achieve the objective\n    #Z is the number of books required to achieve the objective\n    X = [0]*M\n    Y = 0\n    Z = 0\n    for i in range(N):\n        if max(A[i]) > 0:\n            Z += 1\n            Y += C[i]\n            for j in range(M):\n                X[j] += A[i][j]\n    if min(X) >= 0:\n        return Y,Z\n    else:\n        return \"Impossible\"\n\ndef main():\n    N,M = map(int,input().split())\n    A = []\n    C = []\n    for i in range(N):\n        A.append(list(map(int,input().split())))\n    for i in range(N):\n        C.append(int(input()))\n    print(solve(N,M,A,C))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    N, M, X = map(int, sys.stdin.readline().split())\n    A = []\n    for i in range(N):\n        A.append(list(map(int, sys.stdin.readline().split())))\n    C = list(map(int, sys.stdin.readline().split()))\n\n    ans = float(\"inf\")\n    for i in range(1 << N):\n        cost = 0\n        algo = [0] * M\n        for j in range(N):\n            if (i >> j) & 1:\n                cost += C[j]\n                for k in range(M):\n                    algo[k] += A[j][k]\n        if all(a >= X for a in algo):\n            ans = min(ans, cost)\n\n    if ans == float(\"inf\"):\n        print(-1)\n    else:\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    N, M, X = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    C = list(map(int, input().split()))\n    ans = float('inf')\n    for i in range(2 ** N):\n        cost = 0\n        algo = [0] * M\n        for j in range(N):\n            if (i >> j) & 1:\n                cost += C[j]\n                for k in range(M):\n                    algo[k] += A[j][k]\n        if all(a >= X for a in algo):\n            ans = min(ans, cost)\n    print(ans if ans != float('inf') else -1)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    N,M,X = map(int,input().split())\n    A = [list(map(int,input().split())) for _ in range(N)]\n    C = list(map(int,input().split()))\n\n    ans = 10**9\n    for bit in range(2**N):\n        cost = 0\n        algo = [0]*M\n        for i in range(N):\n            if bit & (1<<i):\n                cost += C[i]\n                for j in range(M):\n                    algo[j] += A[i][j]\n        if all(a >= X for a in algo):\n            ans = min(ans,cost)\n    if ans == 10**9:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport numpy as np\n\nN, M, X = map(int, input().split())\n\nA = np.zeros((N, M))\nC = np.zeros(N)\n\nfor i in range(N):\n    C[i] = int(input().split()[0])\n    A[i] = list(map(int, input().split()))\n\n# print(A)\n# print(C)\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u672c\u3092\u8aad\u3093\u3060\u3068\u304d\u306ej\u756a\u76ee\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7406\u89e3\u5ea6\ndp = np.zeros((N+1, M))\n\n# dp[0][j] = 0\n\nfor i in range(N):\n    for j in range(M):\n        dp[i+1][j] = max(dp[i][j], dp[i][j] + A[i][j])\n\n# print(dp)\n\n# \u5168\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7406\u89e3\u5ea6\u304cX\u4ee5\u4e0a\u306b\u306a\u308b\u304b\u3092\u5224\u5b9a\n# \u307e\u305f\u3001\u305d\u306e\u6642\u306e\u6700\u5c0f\u30b3\u30b9\u30c8\u3092\u6c42\u3081\u308b\nmin_cost = float('inf')\nfor i in range(N):\n    if np.all(dp[i+1] >= X):\n        min_cost = min(min_cost, np.sum(C[:i+1]))\n\nif min_cost == float('inf'):\n    print(-1)\nelse:\n    print(min_cost)", "\n\nimport numpy as np\n\ndef main():\n    N,M,X = map(int, input().split())\n    A = np.zeros((N,M))\n    for i in range(N):\n        A[i] = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    C = np.array(C)\n    A = np.array(A)\n    ans = float('inf')\n    for i in range(2**N):\n        cost = 0\n        for j in range(N):\n            if (i>>j) & 1:\n                cost += C[j]\n        if cost >= ans:\n            continue\n        sum_A = np.zeros(M)\n        for j in range(N):\n            if (i>>j) & 1:\n                sum_A += A[j]\n        if np.all(sum_A >= X):\n            ans = cost\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()"]