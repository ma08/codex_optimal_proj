["\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef find_lcm(a):\n    result = a[0]\n    for i in range(1, len(a)):\n        result = lcm(result, a[i])\n    return result\n\ndef find_divisors(a):\n    result = []\n    for i in range(1, int(a ** 0.5) + 1):\n        if a % i == 0:\n            result.append(i)\n            if a // i != i:\n                result.append(a // i)\n    return result\n\ndef find_common_divisors(a):\n    lcm_result = find_lcm(a)\n    divisors = find_divisors(lcm_result)\n    return len(divisors)\n\nprint(find_common_divisors(a))", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    a = a[::-1]\n    #print(a)\n    count = 0\n    for i in range(1, int(math.sqrt(a[0])) + 1):\n        if a[0] % i == 0:\n            count += 1\n    #print(count)\n    for i in range(1, n):\n        count2 = 0\n        for j in range(1, int(math.sqrt(a[i])) + 1):\n            if a[i] % j == 0:\n                count2 += 1\n        #print(count2)\n        if count2 < count:\n            count = count2\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef findGCD(a, n):\n    result = a[0]\n    for i in range(1, n):\n        result = gcd(a[i], result)\n    return result\n\ngcd = findGCD(a, n)\n\ndef countDivisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n\nprint(countDivisors(gcd))", "\n\nimport math\n\ndef get_prime_factors(number):\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number /= 2\n    for i in range(3, int(math.sqrt(number))+1, 2):\n        while number % i == 0:\n            prime_factors.append(i)\n            number /= i\n    if number > 2:\n        prime_factors.append(number)\n    return prime_factors\n\ndef get_common_divisors(numbers):\n    common_divisors = {}\n    for number in numbers:\n        prime_factors = get_prime_factors(number)\n        for prime_factor in prime_factors:\n            if prime_factor not in common_divisors:\n                common_divisors[prime_factor] = 1\n            else:\n                common_divisors[prime_factor] += 1\n    return common_divisors\n\ndef get_number_of_common_divisors(numbers):\n    common_divisors = get_common_divisors(numbers)\n    number_of_common_divisors = 1\n    for key in common_divisors:\n        number_of_common_divisors *= (common_divisors[key] + 1)\n    return number_of_common_divisors\n\ndef main():\n    n = int(input())\n    numbers = [int(x) for x in input().split()]\n    print(get_number_of_common_divisors(numbers))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef solve(a):\n    result = a[0]\n    for i in range(1, len(a)):\n        result = lcm(result, a[i])\n    return result\n\ndef count_divisors(a):\n    result = 0\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += 2\n    if int(math.sqrt(a)) * int(math.sqrt(a)) == a:\n        result -= 1\n    return result\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(count_divisors(solve(a)))", "\n\nimport sys\nfrom collections import Counter\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve(a):\n    # find the lcm of the array\n    l = a[0]\n    for i in range(1, len(a)):\n        l = lcm(l, a[i])\n\n    # find the number of divisors of the lcm\n    divs = Counter(prime_factorization(l))\n    return reduce(lambda x, y: x * (y + 1), divs.values(), 1)\n\ndef prime_factorization(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = map(int, sys.stdin.readline().split())\n    print solve(a)\n\nif __name__ == '__main__':\n    main()", "\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    gcd_of_all = nums[0]\n    for i in range(1, n):\n        gcd_of_all = gcd(gcd_of_all, nums[i])\n    count = 0\n    for i in range(1, gcd_of_all + 1):\n        if gcd_of_all % i == 0:\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef gcd_array(arr):\n    gcd_val = arr[0]\n    for i in range(1, len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n    return gcd_val\n\ndef factorize(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    arr = [int(x) for x in sys.stdin.readline().strip().split()]\n    gcd_val = gcd_array(arr)\n    factors = factorize(gcd_val)\n    print(len(set(factors)))\n\nif __name__ == '__main__':\n    main()"]