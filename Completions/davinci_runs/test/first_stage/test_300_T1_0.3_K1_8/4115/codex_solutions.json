["\n\ndef main():\n    s = input()\n    n = len(s)\n    if n == 1:\n        print(0)\n    elif n == 2:\n        if s[0] == s[1]:\n            print(0)\n        else:\n            print(1)\n    else:\n        if s[0] == s[-1]:\n            print(0)\n        else:\n            print(1)\n\nif __name__ == '__main__':\n    main()", "\n\n#S = input()\nS = \"redcoder\"\n\ndef is_palindrome(S):\n    if S == S[::-1]:\n        return True\n    else:\n        return False\n\ndef main(S):\n    if is_palindrome(S):\n        return 0\n    else:\n        for i in range(len(S)):\n            if is_palindrome(S[:i] + S[i+1:]):\n                return 1\n    return 2\n\nprint(main(S))", "\n\ndef main():\n    s = input()\n    l = len(s)\n    if l % 2 == 0:\n        left = s[:l//2]\n        right = s[l//2:]\n    else:\n        left = s[:l//2]\n        right = s[l//2+1:]\n    right = right[::-1]\n    count = 0\n    for i in range(len(left)):\n        if left[i] != right[i]:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    s = input()\n    if s == s[::-1]:\n        print(0)\n    else:\n        print(1)\n\nif __name__ == '__main__':\n    main()", "\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)", "\n\ns = input()\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef palindrome_hug(s):\n    if is_palindrome(s):\n        return 0\n    else:\n        return 1\n\nprint(palindrome_hug(s))", "\n\ndef main():\n    s = input()\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n        if i < n-1:\n            dp[i][i+1] = 1 if s[i] != s[i+1] else 0\n\n    for i in range(n-3, -1, -1):\n        for j in range(i+2, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n\n    print(dp[0][n-1])\n\nif __name__ == '__main__':\n    main()"]