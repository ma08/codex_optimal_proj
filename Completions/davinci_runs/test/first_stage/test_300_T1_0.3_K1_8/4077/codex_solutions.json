["\n\nn, m = (int(x) for x in input().split())\na = [int(x) for x in input().split()]\n\n# Store the number of elements that are less than or equal to m\n# in a prefix array\nprefix = [0] * (n+1)\nfor i in range(n):\n    prefix[i+1] = prefix[i] + (1 if a[i] <= m else 0)\n\n# Count the number of pairs of indices that are valid\ncount = 0\nfor i in range(n):\n    for j in range(i+1, n+1):\n        # If the median is m, then the number of elements\n        # less than or equal to m must be equal to the number\n        # of elements greater than m\n        if prefix[j] - prefix[i] == (j-i) // 2:\n            count += 1\n\nprint(count)", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 1:\n                if a[(i + j) // 2] == m:\n                    cnt += 1\n            else:\n                if a[(i + j) // 2] == m or a[(i + j) // 2 - 1] == m:\n                    cnt += 1\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef median(a, l, r):\n    if (r - l) % 2 == 0:\n        return a[(l + r) // 2]\n    else:\n        return a[(l + r) // 2 + 1]\n\ndef get_median_count(a, m):\n    n = len(a)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(a, i, j) == m:\n                count += 1\n    return count\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(get_median_count(a, m))\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 0:\n                if a[i + (j - i) // 2] == m:\n                    count += 1\n            else:\n                if a[i + (j - i) // 2] == m or a[i + (j - i) // 2 + 1] == m:\n                    count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()"]