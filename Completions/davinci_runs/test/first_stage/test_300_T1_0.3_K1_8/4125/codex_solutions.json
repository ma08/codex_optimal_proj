["\n\nimport sys\n\ndef solve(N, X, x):\n    x.sort()\n    x.append(X)\n    x.insert(0, X)\n    x.sort()\n    i = x.index(X)\n    return max(x[i] - x[i-1], x[i+1] - x[i]) // 2\n\ndef main():\n    N, X = map(int, sys.stdin.readline().rstrip().split())\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    print(solve(N, X, x))\n\nif __name__ == '__main__':\n    main()", "\n\nn, x = map(int, input().split())\ncities = list(map(int, input().split()))\ncities.sort()\n\nif cities[0] > x:\n    cities.insert(0, x - (cities[0] - x))\nelif cities[-1] < x:\n    cities.append(x + (x - cities[-1]))\nelse:\n    for i in range(n):\n        if cities[i] > x:\n            cities.insert(i, x)\n            break\n\nprint(cities)\n\n# \u5168\u90e8\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u3089\u308c\u308b\u6700\u5927\u306eD\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089D\u3092\u8db3\u3057\u5f15\u304d\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089\u6700\u3082\u8fd1\u3044\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u3001\u305d\u308c\u3092D\u3068\u3059\u308c\u3070\u826f\u3044\n# \u305f\u3060\u3057\u3001X\u304c\u90fd\u5e02\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304c\u5165\u3063\u3066\u3044\u308b\u90fd\u5e02\u3092\u63a2\u3057\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\n# \u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n# \u5168\u90e8\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u6700\u5927\u306eD\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089D\u3092\u8db3\u3057\u5f15\u304d\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089\u6700\u3082\u8fd1\u3044\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u3001\u305d\u308c\u3092D\u3068\u3059\u308c\u3070\u826f\u3044\n# \u305f\u3060\u3057\u3001X\u304c\u90fd\u5e02\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304c\u5165\u3063\u3066\u3044\u308b\u90fd\u5e02\u3092\u63a2\u3057\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\n# \u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n# \u5168\u90e8\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u6700\u5927\u306eD\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089D\u3092\u8db3\u3057\u5f15\u304d\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089\u6700\u3082\u8fd1\u3044\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u3001\u305d\u308c\u3092D\u3068\u3059\u308c\u3070\u826f\u3044\n# \u305f\u3060\u3057\u3001X\u304c\u90fd\u5e02\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304c\u5165\u3063\u3066\u3044\u308b\u90fd\u5e02\u3092\u63a2\u3057\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\n# \u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n# \u5168\u90e8\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u6700\u5927\u306eD\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089D\u3092\u8db3\u3057\u5f15\u304d\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089\u6700\u3082\u8fd1\u3044\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u3001\u305d\u308c\u3092D\u3068\u3059\u308c\u3070\u826f\u3044\n# \u305f\u3060\u3057\u3001X\u304c\u90fd\u5e02\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304c\u5165\u3063\u3066\u3044\u308b\u90fd\u5e02\u3092\u63a2\u3057\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\n# \u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n# \u5168\u90e8\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u6700\u5927\u306eD\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089D\u3092\u8db3\u3057\u5f15\u304d\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089\u6700\u3082\u8fd1\u3044\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u3001\u305d\u308c\u3092D\u3068\u3059\u308c\u3070\u826f\u3044\n# \u305f\u3060\u3057\u3001X\u304c\u90fd\u5e02\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304c\u5165\u3063\u3066\u3044\u308b\u90fd\u5e02\u3092\u63a2\u3057\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\n# \u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n# \u5168\u90e8\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u6700\u5927\u306eD\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089D\u3092\u8db3\u3057\u5f15\u304d\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304b\u3089\u6700\u3082\u8fd1\u3044\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u3001\u305d\u308c\u3092D\u3068\u3059\u308c\u3070\u826f\u3044\n# \u305f\u3060\u3057\u3001X\u304c\u90fd\u5e02\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u305d\u306e\u305f\u3081\u306b\u306f\u3001X\u304c\u5165\u3063\u3066\u3044\u308b\u90fd\u5e02\u3092\u63a2\u3057\u3001\u305d\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\n# \u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u90fd\u5e02\u3092\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308bD\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b", "\n\nn, x = map(int, input().split())\ncities = list(map(int, input().split()))\ncities.sort()\n\nmax_distance = 0\nfor i in range(n):\n    if cities[i] < x:\n        max_distance = max(max_distance, x - cities[i])\n    else:\n        max_distance = max(max_distance, cities[i] - x)\n\nprint(max_distance)", "\n\nimport sys\n\ndef main():\n    n, x = map(int, sys.stdin.readline().split())\n    x_list = list(map(int, sys.stdin.readline().split()))\n    x_list.sort()\n    x_list.append(x)\n\n    d_min = 0\n    for i in range(n):\n        d_min = max(d_min, x_list[i+1] - x_list[i])\n    print(d_min)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, x = map(int, sys.stdin.readline().split())\n    xs = [int(x) for x in sys.stdin.readline().split()]\n    xs.sort()\n    d = 0\n    for i in range(n):\n        if xs[i] < x:\n            d = max(d, x - xs[i])\n        else:\n            d = max(d, xs[i] - x)\n    print(d)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nn, x = map(int, sys.stdin.readline().split())\nx_i = list(map(int, sys.stdin.readline().split()))\n\nx_i.sort()\n\nd = 0\nfor i in range(n):\n    if i == 0:\n        d = max(d, abs(x_i[i] - x))\n    else:\n        d = max(d, (x_i[i] - x_i[i - 1]) // 2)\n\nprint(d)", "\n\nimport sys\n\ndef main():\n    n, x = map(int, sys.stdin.readline().rstrip().split())\n    xs = sorted(map(int, sys.stdin.readline().rstrip().split()))\n\n    d = 0\n    for i in range(n):\n        if xs[i] < x:\n            d = max(d, x - xs[i])\n        else:\n            d = max(d, xs[i] - x)\n            x = xs[i]\n\n    print(d)\n\nif __name__ == '__main__':\n    main()"]