2022-04-20 02:29:04.140440 """
Two-gram is an ordered pair (i.e. string of length two) of capital Latin letters. For example, "AZ", "AA", "ZA" — three distinct two-grams.

You are given a string $s$ consisting of $n$ capital Latin letters. Your task is to find any two-gram contained in the given string as a substring (i.e. two consecutive characters of the string) maximal number of times. For example, for string $s$ = "BBAABBBA" the answer is two-gram "BB", which contained in $s$ three times. In other words, find any most frequent two-gram.

Note that occurrences of the two-gram can overlap with each other.


-----Input-----

The first line of the input contains integer number $n$ ($2 \le n \le 100$) — the length of string $s$. The second line of the input contains the string $s$ consisting of $n$ capital Latin letters.


-----Output-----

Print the only line containing exactly two capital Latin letters — any two-gram contained in the given string $s$ as a substring (i.e. two consecutive characters of the string) maximal number of times.


-----Examples-----
Input
7
ABACABA

Output
AB

Input
5
ZZZAA

Output
ZZ



-----Note-----

In the first example "BA" is also valid answer.

In the second example the only two-gram "ZZ" can be printed because it contained in the string "ZZZAA" two times.
"""
2022-04-20 02:29:04.140452 --------------------------
2022-04-20 02:29:04.140554 using api key gabby
2022-04-20 02:29:20.667243 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\ntwo_grams = {}\n\nfor i in range(n-1):\n    two_gram = s[i:i+2]\n    if two_gram not in two_grams:\n        two_grams[two_gram] = 1\n    else:\n        two_grams[two_gram] += 1\n\nmax_two_gram = max(two_grams, key=two_grams.get)\nprint(max_two_gram)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\n# Create a dictionary to store all the two-grams and their counts\ntwo_grams = {}\n\n# Create a variable to store the maximum count\nmax_count = 0\n\n# Iterate through the string\nfor i in range(n-1):\n    # Create a two-gram\n    two_gram = s[i:i+2]\n    # If the two-gram is not in the dictionary, add it with a count of 1\n    if two_gram not in two_grams:\n        two_grams[two_gram] = 1\n    # If the two-gram is in the dictionary, increment its count by 1\n    else:\n        two_grams[two_gram] += 1\n    # If the count is greater than the current maximum count, update the maximum count\n    if two_grams[two_gram] > max_count:\n        max_count = two_grams[two_gram]\n\n# Iterate through the dictionary\nfor two_gram in two_grams:\n    # If the count of the two-gram is equal to the maximum count, print it\n    if two_grams[two_gram] == max_count:\n        print(two_gram)\n        break"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_gram = \"\"\n\nfor i in range(n - 1):\n    gram = s[i:i+2]\n    count = s.count(gram)\n    if count > max_count:\n        max_count = count\n        max_gram = gram\n\nprint(max_gram)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_gram = \"\"\n\nfor i in range(n-1):\n    gram = s[i:i+2]\n    count = s.count(gram)\n    if count > max_count:\n        max_count = count\n        max_gram = gram\n\nprint(max_gram)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n\n    # create a dictionary of two-grams\n    two_grams = {}\n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        if two_gram not in two_grams:\n            two_grams[two_gram] = 1\n        else:\n            two_grams[two_gram] += 1\n\n    # find the two-gram with the most occurences\n    max_count = 0\n    max_two_gram = \"\"\n    for key, value in two_grams.items():\n        if value > max_count:\n            max_count = value\n            max_two_gram = key\n\n    # print the two-gram with the most occurences\n    print(max_two_gram)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_gram = ''\n\nfor i in range(n-1):\n    count = s.count(s[i:i+2])\n    if count > max_count:\n        max_count = count\n        max_gram = s[i:i+2]\n\nprint(max_gram)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    max_count = 0\n    max_gram = \"\"\n    for i in range(n-1):\n        gram = s[i:i+2]\n        count = s.count(gram)\n        if count > max_count:\n            max_count = count\n            max_gram = gram\n    print(max_gram)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline()\n    cnt = [0] * 26\n    for i in range(n-1):\n        cnt[ord(s[i])-65] += 1\n        cnt[ord(s[i+1])-65] += 1\n    m = max(cnt)\n    for i in range(26):\n        if cnt[i] == m:\n            print(chr(i+65), end='')\n            break\n    for i in range(26):\n        if cnt[i] == m:\n            print(chr(i+65))\n            break\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650421744,
  "id": "cmpl-4yuNUfi4rfIVCK8frEKnCYZJgEpJB",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 02:29:20.667579 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\ntwo_grams = {}\n\nfor i in range(n-1):\n    two_gram = s[i:i+2]\n    if two_gram not in two_grams:\n        two_grams[two_gram] = 1\n    else:\n        two_grams[two_gram] += 1\n\nmax_two_gram = max(two_grams, key=two_grams.get)\nprint(max_two_gram)"
}
2022-04-20 02:29:20.667615 REASON stop
2022-04-20 02:29:20.668067 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\n# Create a dictionary to store all the two-grams and their counts\ntwo_grams = {}\n\n# Create a variable to store the maximum count\nmax_count = 0\n\n# Iterate through the string\nfor i in range(n-1):\n    # Create a two-gram\n    two_gram = s[i:i+2]\n    # If the two-gram is not in the dictionary, add it with a count of 1\n    if two_gram not in two_grams:\n        two_grams[two_gram] = 1\n    # If the two-gram is in the dictionary, increment its count by 1\n    else:\n        two_grams[two_gram] += 1\n    # If the count is greater than the current maximum count, update the maximum count\n    if two_grams[two_gram] > max_count:\n        max_count = two_grams[two_gram]\n\n# Iterate through the dictionary\nfor two_gram in two_grams:\n    # If the count of the two-gram is equal to the maximum count, print it\n    if two_grams[two_gram] == max_count:\n        print(two_gram)\n        break"
}
2022-04-20 02:29:20.668118 REASON stop
2022-04-20 02:29:20.668501 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_gram = \"\"\n\nfor i in range(n - 1):\n    gram = s[i:i+2]\n    count = s.count(gram)\n    if count > max_count:\n        max_count = count\n        max_gram = gram\n\nprint(max_gram)"
}
2022-04-20 02:29:20.668564 REASON stop
2022-04-20 02:29:20.685543 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_gram = \"\"\n\nfor i in range(n-1):\n    gram = s[i:i+2]\n    count = s.count(gram)\n    if count > max_count:\n        max_count = count\n        max_gram = gram\n\nprint(max_gram)"
}
2022-04-20 02:29:20.685669 REASON stop
2022-04-20 02:29:20.696349 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n\n    # create a dictionary of two-grams\n    two_grams = {}\n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        if two_gram not in two_grams:\n            two_grams[two_gram] = 1\n        else:\n            two_grams[two_gram] += 1\n\n    # find the two-gram with the most occurences\n    max_count = 0\n    max_two_gram = \"\"\n    for key, value in two_grams.items():\n        if value > max_count:\n            max_count = value\n            max_two_gram = key\n\n    # print the two-gram with the most occurences\n    print(max_two_gram)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:29:20.696494 REASON stop
2022-04-20 02:29:20.704461 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\nmax_count = 0\nmax_gram = ''\n\nfor i in range(n-1):\n    count = s.count(s[i:i+2])\n    if count > max_count:\n        max_count = count\n        max_gram = s[i:i+2]\n\nprint(max_gram)"
}
2022-04-20 02:29:20.704573 REASON stop
2022-04-20 02:29:20.705319 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    max_count = 0\n    max_gram = \"\"\n    for i in range(n-1):\n        gram = s[i:i+2]\n        count = s.count(gram)\n        if count > max_count:\n            max_count = count\n            max_gram = gram\n    print(max_gram)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:29:20.705427 REASON stop
2022-04-20 02:29:20.706183 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline()\n    cnt = [0] * 26\n    for i in range(n-1):\n        cnt[ord(s[i])-65] += 1\n        cnt[ord(s[i+1])-65] += 1\n    m = max(cnt)\n    for i in range(26):\n        if cnt[i] == m:\n            print(chr(i+65), end='')\n            break\n    for i in range(26):\n        if cnt[i] == m:\n            print(chr(i+65))\n            break\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:29:20.706389 REASON stop
