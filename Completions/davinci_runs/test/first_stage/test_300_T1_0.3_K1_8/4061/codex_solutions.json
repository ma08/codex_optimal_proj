["\n\ndef max_substring_removal(s, t):\n    \"\"\"\n    >>> max_substring_removal('bbaba', 'bb')\n    3\n    >>> max_substring_removal('baaba', 'ab')\n    2\n    >>> max_substring_removal('abcde', 'abcde')\n    0\n    >>> max_substring_removal('asdfasdf', 'fasd')\n    3\n    \"\"\"\n    s_ind, t_ind = 0, 0\n    while s_ind < len(s) and t_ind < len(t):\n        if s[s_ind] == t[t_ind]:\n            t_ind += 1\n        s_ind += 1\n    return len(s) - s_ind + t_ind\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\n\n# Solution\n\ns = input()\nt = input()\n\n# The idea is to find the longest common subsequence between s and t\n# and then the answer is the length of s minus the length of the LCS\n\n# LCS\ndef LCS(s, t):\n    # DP table\n    dp = [[0 for _ in range(len(t)+1)] for _ in range(len(s)+1)]\n    for i in range(1, len(s)+1):\n        for j in range(1, len(t)+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n\nprint(len(s) - LCS(s, t))", "\n\n#!/usr/bin/python\n\ns = raw_input()\nt = raw_input()\n\ns_len = len(s)\nt_len = len(t)\n\ndp = [[0] * (s_len + 1) for _ in range(t_len + 1)]\n\nfor i in range(1, t_len + 1):\n    for j in range(1, s_len + 1):\n        if t[i - 1] == s[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n\nprint s_len - dp[-1][-1]", "\n\ndef subsequence(s, t):\n    \"\"\"\n    >>> subsequence('bbaba', 'bb')\n    3\n    >>> subsequence('baaba', 'ab')\n    2\n    >>> subsequence('abcde', 'abcde')\n    0\n    >>> subsequence('asdfasdf', 'fasd')\n    3\n    \"\"\"\n    # s = 'bbaba'\n    # t = 'bb'\n    # s = 'baaba'\n    # t = 'ab'\n    # s = 'abcde'\n    # t = 'abcde'\n    # s = 'asdfasdf'\n    # t = 'fasd'\n    s_len = len(s)\n    t_len = len(t)\n    i = 0\n    j = 0\n    while i < s_len and j < t_len:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return s_len - i\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\n\nfrom sys import stdin\n\ndef main():\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    # find the number of common characters\n    common = 0\n    for i in range(len(s)):\n        if s[i] == t[common]:\n            common += 1\n            if common == len(t):\n                break\n\n    # the number of characters to remove is the difference between the lengths of s and t\n    print(len(s) - common)\n\nmain()", "\n\ndef solve(s, t):\n    if len(s) == len(t):\n        return 0\n    else:\n        return len(s) - len(t)\n\ndef main():\n    s = input()\n    t = input()\n    print(solve(s, t))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n\n    # dp[i][j] = longest common subsequence of s[:i] and t[:j]\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    print(len(s) - dp[-1][-1])\n\nif __name__ == '__main__':\n    main()"]