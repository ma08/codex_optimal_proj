2022-04-20 03:00:18.743952 """
There are N squares arranged in a row from left to right.
The height of the i-th square from the left is H_i.
You will land on a square of your choice, then repeat moving to the adjacent square on the right as long as the height of the next square is not greater than that of the current square.
Find the maximum number of times you can move.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 10^5
 - 1 \leq H_i \leq 10^9

-----Input-----
Input is given from Standard Input in the following format:
N
H_1 H_2 ... H_N

-----Output-----
Print the maximum number of times you can move.

-----Sample Input-----
5
10 4 8 7 3

-----Sample Output-----
2

By landing on the third square from the left, you can move to the right twice.
"""
2022-04-20 03:00:18.743975 --------------------------
2022-04-20 03:00:18.744125 using api key derek
2022-04-20 03:00:29.086601 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nh = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n-1):\n    if h[i] >= h[i+1]:\n        count += 1\n    else:\n        count = 0\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# Read input\nN = int(input())\nH = list(map(int, input().split()))\n\n# Initialize\nmax_move = 0\n\n# Iterate through each square\nfor i in range(N):\n    # Initialize\n    move = 0\n    # Iterate through each square to the right\n    for j in range(i, N-1):\n        # Check if height is greater than current square\n        if H[j+1] > H[j]:\n            break\n        # If not, increment move\n        else:\n            move += 1\n    # Update max_move\n    max_move = max(max_move, move)\n\n# Print result\nprint(max_move)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nN = int(input())\nH = list(map(int, input().split()))\n\ncount = 0\nmax_count = 0\n\nfor i in range(N):\n    if i == 0:\n        count += 1\n    else:\n        if H[i] <= H[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n\nmax_count = max(max_count, count)\nprint(max_count)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nN = int(input())\nH = list(map(int, input().split()))\n\n# \u521d\u671f\u5024\u3092\u8a2d\u5b9a\nmax_move = 0\ncurrent_height = H[0]\n\nfor i in range(1, N):\n    # \u73fe\u5728\u306e\u9ad8\u3055\u3088\u308a\u4f4e\u3044\u5834\u5408\u306f\u79fb\u52d5\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    if current_height >= H[i]:\n        max_move += 1\n    else:\n        # \u9ad8\u3044\u5834\u5408\u306f\u73fe\u5728\u306e\u9ad8\u3055\u3092\u66f4\u65b0\n        current_height = H[i]\n\nprint(max_move)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# input\nn = int(input())\nh = list(map(int, input().split()))\n\n# initialize\ncount = 0\n\n# loop\nfor i in range(n-1):\n    if h[i] >= h[i+1]:\n        count += 1\n    else:\n        count = 0\n\n# output\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\nh = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n - 1):\n    if h[i] >= h[i + 1]:\n        count += 1\n    else:\n        count = 0\nprint(count + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN = int(input())\nH = list(map(int, input().split()))\n\ncount = 1\nmax_count = 1\nfor i in range(1, N):\n    if H[i] <= H[i-1]:\n        count += 1\n        max_count = max(max_count, count)\n    else:\n        count = 1\n\nprint(max_count)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nN = int(input())\nH = list(map(int, input().split()))\n\nmax_move = 0\nfor i in range(N):\n    move = 0\n    for j in range(i + 1, N):\n        if H[i] > H[j]:\n            break\n        move += 1\n    max_move = max(max_move, move)\nprint(max_move)"
    }
  ],
  "created": 1650423618,
  "id": "cmpl-4yurir9qZRnj9Qef429zO7ixw5M6P",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:00:29.087057 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nh = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n-1):\n    if h[i] >= h[i+1]:\n        count += 1\n    else:\n        count = 0\nprint(count)"
}
2022-04-20 03:00:29.087121 REASON stop
2022-04-20 03:00:29.120983 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# Read input\nN = int(input())\nH = list(map(int, input().split()))\n\n# Initialize\nmax_move = 0\n\n# Iterate through each square\nfor i in range(N):\n    # Initialize\n    move = 0\n    # Iterate through each square to the right\n    for j in range(i, N-1):\n        # Check if height is greater than current square\n        if H[j+1] > H[j]:\n            break\n        # If not, increment move\n        else:\n            move += 1\n    # Update max_move\n    max_move = max(max_move, move)\n\n# Print result\nprint(max_move)"
}
2022-04-20 03:00:29.121159 REASON stop
2022-04-20 03:00:29.172922 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nN = int(input())\nH = list(map(int, input().split()))\n\ncount = 0\nmax_count = 0\n\nfor i in range(N):\n    if i == 0:\n        count += 1\n    else:\n        if H[i] <= H[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n\nmax_count = max(max_count, count)\nprint(max_count)"
}
2022-04-20 03:00:29.173112 REASON stop
2022-04-20 03:00:29.224906 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nN = int(input())\nH = list(map(int, input().split()))\n\n# \u521d\u671f\u5024\u3092\u8a2d\u5b9a\nmax_move = 0\ncurrent_height = H[0]\n\nfor i in range(1, N):\n    # \u73fe\u5728\u306e\u9ad8\u3055\u3088\u308a\u4f4e\u3044\u5834\u5408\u306f\u79fb\u52d5\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    if current_height >= H[i]:\n        max_move += 1\n    else:\n        # \u9ad8\u3044\u5834\u5408\u306f\u73fe\u5728\u306e\u9ad8\u3055\u3092\u66f4\u65b0\n        current_height = H[i]\n\nprint(max_move)"
}
2022-04-20 03:00:29.225091 REASON stop
2022-04-20 03:00:29.271146 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# input\nn = int(input())\nh = list(map(int, input().split()))\n\n# initialize\ncount = 0\n\n# loop\nfor i in range(n-1):\n    if h[i] >= h[i+1]:\n        count += 1\n    else:\n        count = 0\n\n# output\nprint(count)"
}
2022-04-20 03:00:29.271320 REASON stop
2022-04-20 03:00:29.313046 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\nh = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n - 1):\n    if h[i] >= h[i + 1]:\n        count += 1\n    else:\n        count = 0\nprint(count + 1)"
}
2022-04-20 03:00:29.313237 REASON stop
2022-04-20 03:00:29.366446 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN = int(input())\nH = list(map(int, input().split()))\n\ncount = 1\nmax_count = 1\nfor i in range(1, N):\n    if H[i] <= H[i-1]:\n        count += 1\n        max_count = max(max_count, count)\n    else:\n        count = 1\n\nprint(max_count)"
}
2022-04-20 03:00:29.366659 REASON stop
2022-04-20 03:00:29.404807 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nN = int(input())\nH = list(map(int, input().split()))\n\nmax_move = 0\nfor i in range(N):\n    move = 0\n    for j in range(i + 1, N):\n        if H[i] > H[j]:\n            break\n        move += 1\n    max_move = max(max_move, move)\nprint(max_move)"
}
2022-04-20 03:00:29.405164 REASON stop
