["\n\n# Solution\n\na, n, m = map(int, input().split())\n\nrain = []\nfor i in range(n):\n    rain.append(list(map(int, input().split())))\n\numbrellas = []\nfor i in range(m):\n    umbrellas.append(list(map(int, input().split())))\n\ndp = [[float('inf')] * (a + 1) for i in range(m + 1)]\n\ndp[0][0] = 0\n\nfor i in range(m):\n    for j in range(a + 1):\n        if dp[i][j] == float('inf'):\n            continue\n        dp[i + 1][j] = min(dp[i + 1][j], dp[i][j])\n        if umbrellas[i][0] <= j:\n            dp[i + 1][umbrellas[i][0]] = min(dp[i + 1][umbrellas[i][0]], dp[i][j] + umbrellas[i][1])\n\nfor i in range(n):\n    for j in range(rain[i][0], rain[i][1]):\n        for k in range(m + 1):\n            if dp[k][j] == float('inf'):\n                continue\n            dp[k][j + 1] = min(dp[k][j + 1], dp[k][j])\n            if k > 0:\n                dp[k - 1][j + 1] = min(dp[k - 1][j + 1], dp[k][j])\n\nif dp[1][a] == float('inf'):\n    print(-1)\nelse:\n    print(dp[1][a])", "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        rain.append((l, r))\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, input().split())\n        umbrellas.append((x, p))\n    umbrellas.sort()\n    rain.sort()\n    dp = [0]*(a+1)\n    for i in range(1, a+1):\n        dp[i] = dp[i-1]\n        for j in range(n):\n            if rain[j][0] <= i-1 and i <= rain[j][1]:\n                dp[i] = max(dp[i], dp[i-1]+1)\n        for j in range(m):\n            if umbrellas[j][0] == i:\n                dp[i] = max(dp[i], dp[i-1]-1)\n    if dp[a] < 1:\n        print(-1)\n    else:\n        ans = 0\n        for i in range(1, a+1):\n            for j in range(n):\n                if rain[j][0] <= i-1 and i <= rain[j][1]:\n                    ans += dp[i]\n        print(ans)\n\nmain()", "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in range(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in range(m):\n        umbrellas.append(list(map(int, input().split())))\n    umbrellas.sort(key=lambda x: x[0])\n    rain.sort(key=lambda x: x[0])\n    dp = [[float('inf') for _ in range(a)] for _ in range(m)]\n    for i in range(m):\n        if umbrellas[i][0] == 0:\n            dp[i][0] = umbrellas[i][1]\n    for i in range(m):\n        for j in range(1, a):\n            if dp[i][j-1] == float('inf'):\n                continue\n            if rain and j >= rain[0][0]:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + umbrellas[i][1])\n            elif i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-1] + umbrellas[i][1])\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j])\n            if rain and j >= rain[0][1]:\n                rain.pop(0)\n    ans = float('inf')\n    for i in range(m):\n        ans = min(ans, dp[i][-1])\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\n# Solution\n\na, n, m = map(int, input().split())\n\nr = [list(map(int, input().split())) for _ in range(n)]\n\nu = [list(map(int, input().split())) for _ in range(m)]\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if u[j][0] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] - u[j][1] + 1)\n    for j in range(n):\n        if r[j][0] <= i < r[j][1]:\n            dp[i + 1] = min(dp[i + 1], dp[i])\n\nif dp[a] > 0:\n    print(-1)\nelse:\n    print(-dp[a])", "\n\ndef umbrella(a, n, m, rain, umbrellas):\n    # dp[i][j] = min total fatigue after reaching point i with j umbrellas\n    dp = [[float('inf') for _ in range(m+1)] for _ in range(a+1)]\n    dp[0][0] = 0\n    for i in range(1, a+1):\n        for j in range(m+1):\n            if j == 0:\n                if any(l <= i-1 <= r for l, r in rain):\n                    continue\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1] + umbrellas[j-1][1])\n    return -1 if dp[a][m] == float('inf') else dp[a][m]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(umbrella(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()"]