2022-04-20 03:40:34.413591 """
Given are two strings S and T.
Let us change some of the characters in S so that T will be a substring of S.
At least how many characters do we need to change?
Here, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.

-----Constraints-----
 - The lengths of S and T are each at least 1 and at most 1000.
 - The length of T is at most that of S.
 - S and T consist of lowercase English letters.

-----Input-----
Input is given from Standard Input in the following format:
S
T

-----Output-----
Print the minimum number of characters in S that need to be changed.

-----Sample Input-----
cabacc
abc

-----Sample Output-----
1

For example, changing the fourth character a in S to c will match the second through fourth characters in S to T.
Since S itself does not have T as its substring, this number of changes - one - is the minimum needed.
"""
2022-04-20 03:40:34.413625 --------------------------
2022-04-20 03:40:34.413798 using api key sourya
2022-04-20 03:40:47.809232 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    t = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(get_min_changes(s, t))\n\ndef get_min_changes(s, t):\n    slen = len(s)\n    tlen = len(t)\n    dp = [[0 for j in range(tlen+1)] for i in range(slen+1)]\n    for i in range(slen+1):\n        dp[i][0] = i\n    for j in range(tlen+1):\n        dp[0][j] = j\n    for i in range(1, slen+1):\n        for j in range(1, tlen+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n    return dp[slen][tlen]\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    slen = len(s)\n    tlen = len(t)\n    dp = [[0 for _ in range(tlen+1)] for _ in range(slen+1)]\n    for i in range(slen+1):\n        for j in range(tlen+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    print(dp[slen][tlen])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    t = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    s = input()\n    t = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(len(s) - len(t) + 1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    s = input()\n    t = input()\n    print(solve(s, t))\n\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = i\n    for j in range(m+1):\n        dp[0][j] = j\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    return dp[n][m]\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# ==========\n# Solution 1\n# ==========\n\ns = input()\nt = input()\n\ncount = 0\nfor i in range(len(s)):\n    if s[i] != t[i]:\n        count += 1\n\nprint(count)\n\n# ==========\n# Solution 2\n# ==========\n\ns = input()\nt = input()\n\nprint(sum(1 for i in range(len(s)) if s[i] != t[i]))\n\n# ==========\n# Solution 3\n# ==========\n\ns = input()\nt = input()\n\nprint(sum(s[i] != t[i] for i in range(len(s))))"
    }
  ],
  "created": 1650426034,
  "id": "cmpl-4yvUgTqLW3T4I1i6h8vlXsQPxadSa",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:40:47.809643 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    t = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:40:47.809717 REASON stop
2022-04-20 03:40:47.811040 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(get_min_changes(s, t))\n\ndef get_min_changes(s, t):\n    slen = len(s)\n    tlen = len(t)\n    dp = [[0 for j in range(tlen+1)] for i in range(slen+1)]\n    for i in range(slen+1):\n        dp[i][0] = i\n    for j in range(tlen+1):\n        dp[0][j] = j\n    for i in range(1, slen+1):\n        for j in range(1, tlen+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n    return dp[slen][tlen]\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:40:47.811138 REASON stop
2022-04-20 03:40:47.811805 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    slen = len(s)\n    tlen = len(t)\n    dp = [[0 for _ in range(tlen+1)] for _ in range(slen+1)]\n    for i in range(slen+1):\n        for j in range(tlen+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    print(dp[slen][tlen])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:40:47.811905 REASON stop
2022-04-20 03:40:47.828977 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    t = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:40:47.829132 REASON stop
2022-04-20 03:40:47.845209 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    s = input()\n    t = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:40:47.845352 REASON stop
2022-04-20 03:40:47.846298 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(len(s) - len(t) + 1)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:40:47.846386 REASON stop
2022-04-20 03:40:47.847228 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    s = input()\n    t = input()\n    print(solve(s, t))\n\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = i\n    for j in range(m+1):\n        dp[0][j] = j\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    return dp[n][m]\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:40:47.847365 REASON stop
2022-04-20 03:40:47.848292 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# ==========\n# Solution 1\n# ==========\n\ns = input()\nt = input()\n\ncount = 0\nfor i in range(len(s)):\n    if s[i] != t[i]:\n        count += 1\n\nprint(count)\n\n# ==========\n# Solution 2\n# ==========\n\ns = input()\nt = input()\n\nprint(sum(1 for i in range(len(s)) if s[i] != t[i]))\n\n# ==========\n# Solution 3\n# ==========\n\ns = input()\nt = input()\n\nprint(sum(s[i] != t[i] for i in range(len(s))))"
}
2022-04-20 03:40:47.848501 REASON stop
