["\n\nn, m = map(int, input().split())\n\n# Create a list of all the points from 1 to m\npoints = list(range(1, m + 1))\n\n# Loop through the number of segments\nfor i in range(n):\n    # Get the left and right points\n    l, r = map(int, input().split())\n    # Loop through the points\n    for j in range(l, r + 1):\n        # If the point is in the list, remove it\n        if j in points:\n            points.remove(j)\n\n# Print the number of points left\nprint(len(points))\n# Print the points\nprint(*points)", "\n\nn, m = map(int, input().split())\n\n# create a list of tuples of the endpoints\nsegments = []\nfor i in range(n):\n    segments.append(tuple(map(int, input().split())))\n\n# create a list of all possible points\npoints = list(range(1, m+1))\n\n# iterate through the segments\nfor segment in segments:\n    # iterate through the points\n    for point in points:\n        # if the point is in the segment, remove it from the list\n        if segment[0] <= point <= segment[1]:\n            points.remove(point)\n\n# print the number of points that don't belong to any segment\nprint(len(points))\n\n# print the points that don't belong to any segment\nfor point in points:\n    print(point, end=' ')", "\n\n# SOLUTION\n\nn, m = map(int, input().split())\n\nlst = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    lst.append([l, r])\n\nlst.sort()\n\n# print(lst)\n\nans = []\n\nfor i in range(1, m+1):\n    flag = True\n    for j in range(n):\n        if lst[j][0] <= i <= lst[j][1]:\n            flag = False\n            break\n    if flag:\n        ans.append(i)\n\nprint(len(ans))\nprint(*ans)", "\n\ndef main():\n    n, m = map(int, input().split())\n    segs = []\n    for _ in range(n):\n        segs.append(tuple(map(int, input().split())))\n    segs.sort()\n    # print(segs)\n    i = 0\n    ans = []\n    for x in range(1, m+1):\n        if i < n and x == segs[i][0]:\n            i += 1\n        else:\n            ans.append(x)\n    print(len(ans))\n    print(*ans)\n\nif __name__ == '__main__':\n    main()", "\n\nn, m = map(int, input().split())\n\npoints = set(range(1, m+1))\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    points = points - set(range(l, r+1))\n\nprint(len(points))\nprint(*points)", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n    segments.sort()\n    #print(segments)\n    points = []\n    for i in range(n-1):\n        if segments[i][1] < segments[i+1][0]:\n            points.append(segments[i][1]+1)\n            points.append(segments[i+1][0]-1)\n    #print(points)\n    points = list(set(points))\n    points.sort()\n    #print(points)\n    print(len(points))\n    for i in points:\n        print(i, end=' ')\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, m = map(int, input().split())\n\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append([l, r])\n\nsegments.sort()\n\npoints = []\nfor i in range(1, m + 1):\n    points.append(i)\n\nfor i in range(len(segments)):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        if j in points:\n            points.remove(j)\n\nprint(len(points))\nfor i in range(len(points)):\n    print(points[i], end=' ')", "\n\nn, m = map(int, input().split())\n\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\n# print(segments)\n\npoints = []\nfor i in range(1,m+1):\n    points.append(i)\n\n# print(points)\n\nfor i in range(len(segments)):\n    for j in range(segments[i][0],segments[i][1]+1):\n        if j in points:\n            points.remove(j)\n\nprint(len(points))\nfor i in points:\n    print(i, end=\" \")"]