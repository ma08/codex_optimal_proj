2022-04-20 01:55:31.840772 """
The only difference between easy and hard versions is a number of elements in the array.

You are given an array $a$ consisting of $n$ integers. The value of the $i$-th element of the array is $a_i$.

You are also given a set of $m$ segments. The $j$-th segment is $[l_j; r_j]$, where $1 \le l_j \le r_j \le n$.

You can choose some subset of the given set of segments and decrease values on each of the chosen segments by one (independently). For example, if the initial array $a = [0, 0, 0, 0, 0]$ and the given segments are $[1; 3]$ and $[2; 4]$ then you can choose both of them and the array will become $b = [-1, -2, -2, -1, 0]$.

You have to choose some subset of the given segments (each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array $a$ and obtain the array $b$ then the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ will be maximum possible.

Note that you can choose the empty set.

If there are multiple answers, you can print any.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n \le 10^5, 0 \le m \le 300$) — the length of the array $a$ and the number of segments, respectively.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^6 \le a_i \le 10^6$), where $a_i$ is the value of the $i$-th element of the array $a$.

The next $m$ lines are contain two integers each. The $j$-th of them contains two integers $l_j$ and $r_j$ ($1 \le l_j \le r_j \le n$), where $l_j$ and $r_j$ are the ends of the $j$-th segment.


-----Output-----

In the first line of the output print one integer $d$ — the maximum possible value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ if $b$ is the array obtained by applying some subset of the given segments to the array $a$.

In the second line of the output print one integer $q$ ($0 \le q \le m$) — the number of segments you apply.

In the third line print $q$ distinct integers $c_1, c_2, \dots, c_q$ in any order ($1 \le c_k \le m$) — indices of segments you apply to the array $a$ in such a way that the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ of the obtained array $b$ is maximum possible.

If there are multiple answers, you can print any.


-----Examples-----
Input
5 4
2 -2 3 1 2
1 3
4 5
2 5
1 3

Output
6
2
4 1 

Input
5 4
2 -2 3 1 4
3 5
3 4
2 4
2 5

Output
7
2
3 2 

Input
1 0
1000000

Output
0
0




-----Note-----

In the first example the obtained array $b$ will be $[0, -4, 1, 1, 2]$ so the answer is $6$.

In the second example the obtained array $b$ will be $[2, -3, 1, -1, 4]$ so the answer is $7$.

In the third example you cannot do anything so the answer is $0$.
"""
2022-04-20 01:55:31.840798 --------------------------
2022-04-20 01:55:31.840910 using api key derek
2022-04-20 01:56:57.965467 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nimport collections\nimport itertools\nimport array\nimport inspect\n\n# Set max recursion limit\nsys.setrecursionlimit(10000)\n\n\n# Debug output\ndef chkprint(*args):\n    names = {\n        id(v): k\n        for k, v in inspect.currentframe().f_back.f_locals.items()\n    }\n    print(', '.join(\n        names.get(id(arg), '???') + ' = ' + repr(arg) for arg in args))\n\n\n# Binary converter\ndef to_bin(x):\n    return bin(x)[2:]\n\n\ndef li_input():\n    return [int(_) for _ in input().split()]\n\n\ndef gcd(n, m):\n    if n % m == 0:\n        return m\n    else:\n        return gcd(m, n % m)\n\n\ndef gcd_list(L):\n    v = L[0]\n\n    for i in range(1, len(L)):\n        v = gcd(v, L[i])\n\n    return v\n\n\ndef lcm(n, m):\n    return (n * m) // gcd(n, m)\n\n\ndef lcm_list(L):\n    v = L[0]\n\n    for i in range(1, len(L)):\n        v = lcm(v, L[i])\n\n    return v\n\n\n# Width First Search (+ Distance)\ndef wfs_d(D, N, K):\n    \"\"\"\n    D: \u96a3\u63a5\u884c\u5217(\u8ddd\u96e2\u4ed8\u304d)\n    N: \u30ce\u30fc\u30c9\u6570\n    K: \u59cb\u70b9\u30ce\u30fc\u30c9\n    \"\"\"\n\n    dfk = [-1] * (N + 1)\n    dfk[K] = 0\n\n    cps = [(K, 0)]\n    r = [False] * (N + 1)\n    r[K] = True\n    while len(cps) != 0:\n        n_cps = []\n        for cp, cd in cps:\n            for i, dfcp in enumerate(D[cp]):\n                if dfcp != -1 and not r[i]:\n                    dfk[i] = cd + dfcp\n                    n_cps.append((i, cd + dfcp))\n                    r[i] = True\n\n        cps = n_cps[:]\n\n    return dfk\n\n\n# Depth First Search (+Distance)\ndef dfs_d(v, pre, dist):\n    \"\"\"\n    v:  \u73fe\u5728\u306e\u30ce\u30fc\u30c9\n    pre: \uff11\u3064\u524d\u306e\u30ce\u30fc\u30c9\n    dist: \u73fe\u5728\u306e\u8ddd\u96e2\n\n    \u4ee5\u4e0b\u306f\u5225\u9014\u7528\u610f\u3059\u308b\n    D: \u96a3\u63a5\u30ea\u30b9\u30c8(\u884c\u5217\u3067\u306f\u306a\u3044)\n    D_dfs_d: dfs_d\u95a2\u6570\u3067\u7528\u3044\u308b\uff0c\u59cb\u70b9\u30ce\u30fc\u30c9\u304b\u3089\u898b\u305f\u8ddd\u96e2\u30ea\u30b9\u30c8\n    \"\"\"\n\n    global D\n    global D_dfs_d\n\n    D_dfs_d[v] = dist\n\n    for next_v, d in D[v]:\n        if next_v != pre:\n            dfs_d(next_v, v, dist + d)\n\n    return\n\n\ndef sigma(N):\n    ans = 0\n    for i in range(1, N + 1):\n        ans += i\n    return ans\n\n\ndef comb(n, r):\n    if n - r < r: r = n - r\n    if r == 0: return 1\n    if r == 1: return n\n\n    numerator = [n - r + k + 1 for k in range(r)]\n    denominator = [k + 1 for k in range(r)]\n\n    for p in range(2, r + 1):\n        pivot = denominator[p - 1]\n        if pivot > 1:\n            offset = (n - r) % p\n            for k in range(p - 1, r, p):\n                numerator[k - offset] /= pivot\n                denominator[k] /= pivot\n\n    result = 1\n    for k in range(r):\n        if numerator[k] > 1:\n            result *= int(numerator[k])\n\n    return result\n\ndef bisearch(L, target):\n    low = 0\n    high = len(L) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        guess = L[mid]\n        if guess == target:\n            return True\n        elif guess < target:\n            low = mid + 1\n        elif guess > target:\n            high = mid - 1\n    if guess != target:\n        return False\n\n# --------------------------------------------\n\ndp = None\n\n\ndef main():\n    N, M = li_input()\n    A = li_input()\n    S = []\n    for i in range(M):\n        S.append(li_input())\n\n    S.sort(key=lambda x: x[1])\n\n    ans = 0\n    ans_seg = []\n    for i in range(M):\n        seg = S[i]\n        l = seg[0]\n        r = seg[1]\n        tmp = 0\n        for j in range(l - 1, r):\n            tmp += A[j]\n        if tmp > ans:\n            ans = tmp\n            ans_seg = [i + 1]\n        elif tmp == ans:\n            ans_seg.append(i + 1)\n\n    print(ans)\n    print(len(ans_seg))\n    print(*ans_seg)\n\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, input().split())))\n    d = 0\n    q = 0\n    c = []\n    for i in range(m):\n        if segments[i][0] == 1 and segments[i][1] == n:\n            q += 1\n            c.append(i+1)\n            d += min(a)\n    if q == 0:\n        for i in range(m):\n            if segments[i][0] == 1:\n                q += 1\n                c.append(i+1)\n                d += min(a[:segments[i][1]])\n            elif segments[i][1] == n:\n                q += 1\n                c.append(i+1)\n                d += min(a[segments[i][0]-1:])\n    print(d)\n    print(q)\n    print(*c)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(m):\n        l, r = segments[i]\n        for j in range(l-1, r):\n            dp[j] -= 1\n    print(max(dp) - min(dp))\n    print(0)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    segments = []\n    for i in range(m):\n        segments.append([int(i) for i in input().split()])\n    \n    #print(n, m, a, segments)\n    #print(segments)\n    #print(segments[0])\n    #print(segments[0][0])\n    #print(segments[0][1])\n    \n    #print(segments[1])\n    #print(segments[1][0])\n    #print(segments[1][1])\n    \n    #print(segments[2])\n    #print(segments[2][0])\n    #print(segments[2][1])\n    \n    #print(segments[3])\n    #print(segments[3][0])\n    #print(segments[3][1])\n    \n    #print(segments[4])\n    #print(segments[4][0])\n    #print(segments[4][1])\n    \n    #print(segments[5])\n    #print(segments[5][0])\n    #print(segments[5][1])\n    \n    #print(segments[6])\n    #print(segments[6][0])\n    #print(segments[6][1])\n    \n    #print(segments[7])\n    #print(segments[7][0])\n    #print(segments[7][1])\n    \n    #print(segments[8])\n    #print(segments[8][0])\n    #print(segments[8][1])\n    \n    #print(segments[9])\n    #print(segments[9][0])\n    #print(segments[9][1])\n    \n    #print(segments[10])\n    #print(segments[10][0])\n    #print(segments[10][1])\n    \n    #print(segments[11])\n    #print(segments[11][0])\n    #print(segments[11][1])\n    \n    #print(segments[12])\n    #print(segments[12][0])\n    #print(segments[12][1])\n    \n    #print(segments[13])\n    #print(segments[13][0])\n    #print(segments[13][1])\n    \n    #print(segments[14])\n    #print(segments[14][0])\n    #print(segments[14][1])\n    \n    #print(segments[15])\n    #print(segments[15][0])\n    #print(segments[15][1])\n    \n    #print(segments[16])\n    #print(segments[16][0])\n    #print(segments[16][1])\n    \n    #print(segments[17])\n    #print(segments[17][0])\n    #print(segments[17][1])\n    \n    #print(segments[18])\n    #print(segments[18][0])\n    #print(segments[18][1])\n    \n    #print(segments[19])\n    #print(segments[19][0])\n    #print(segments[19][1])\n    \n    #print(segments[20])\n    #print(segments[20][0])\n    #print(segments[20][1])\n    \n    #print(segments[21])\n    #print(segments[21][0])\n    #print(segments[21][1])\n    \n    #print(segments[22])\n    #print(segments[22][0])\n    #print(segments[22][1])\n    \n    #print(segments[23])\n    #print(segments[23][0])\n    #print(segments[23][1])\n    \n    #print(segments[24])\n    #print(segments[24][0])\n    #print(segments[24][1])\n    \n    #print(segments[25])\n    #print(segments[25][0])\n    #print(segments[25][1])\n    \n    #print(segments[26])\n    #print(segments[26][0])\n    #print(segments[26][1])\n    \n    #print(segments[27])\n    #print(segments[27][0])\n    #print(segments[27][1])\n    \n    #print(segments[28])\n    #print(segments[28][0])\n    #print(segments[28][1])\n    \n    #print(segments[29])\n    #print(segments[29][0])\n    #print(segments[29][1])\n    \n    #print(segments[30])\n    #print(segments[30][0])\n    #print(segments[30][1])\n    \n    #print(segments[31])\n    #print(segments[31][0])\n    #print(segments[31][1])\n    \n    #print(segments[32])\n    #print(segments[32][0])\n    #print(segments[32][1])\n    \n    #print(segments[33])\n    #print(segments[33][0])\n    #print(segments[33][1])\n    \n    #print(segments[34])\n    #print(segments[34][0])\n    #print(segments[34][1])\n    \n    #print(segments[35])\n    #print(segments[35][0])\n    #print(segments[35][1])\n    \n    #print(segments[36])\n    #print(segments[36][0])\n    #print(segments[36][1])\n    \n    #print(segments[37])\n    #print(segments[37][0])\n    #print(segments[37][1])\n    \n    #print(segments[38])\n    #print(segments[38][0])\n    #print(segments[38][1])\n    \n    #print(segments[39])\n    #print(segments[39][0])\n    #print(segments[39][1])\n    \n    #print(segments[40])\n    #print(segments[40][0])\n    #print(segments[40][1])\n    \n    #print(segments[41])\n    #print(segments[41][0])\n    #print(segments[41][1])\n    \n    #print(segments[42])\n    #print(segments[42][0])\n    #print(segments[42][1])\n    \n    #print(segments[43])\n    #print(segments[43][0])\n    #print(segments[43][1])\n    \n    #print(segments[44])\n    #print(segments[44][0])\n    #print(segments[44][1])\n    \n    #print(segments[45])\n    #print(segments[45][0])\n    #print(segments[45][1])\n    \n    #print(segments[46])\n    #print(segments[46][0])\n    #print(segments[46][1])\n    \n    #print(segments[47])\n    #print(segments[47][0])\n    #print(segments[47][1])\n    \n    #print(segments[48])\n    #print(segments[48][0])\n    #print(segments[48][1])\n    \n    #print(segments[49])\n    #print(segments[49][0])\n    #print(segments[49][1])\n    \n    #print(segments[50])\n    #print(segments[50][0])\n    #print(segments[50][1])\n    \n    #print(segments[51])\n    #print(segments[51][0])\n    #print(segments[51][1])\n    \n    #print(segments[52])\n    #print(segments[52][0])\n    #print(segments[52][1])\n    \n    #print(segments[53])\n    #print(segments[53][0])\n    #print(segments[53][1])\n    \n    #print(segments[54])\n    #print(segments[54][0])\n    #print(segments[54][1])\n    \n    #print(segments[55])\n    #print(segments[55][0])\n    #print(segments[55][1])\n    \n    #print(segments[56])\n    #print(segments[56][0])\n    #print(segments[56][1])\n    \n    #print(segments[57])\n    #print(segments[57][0])\n    #print(segments[57][1])\n    \n    #print(segments[58])\n    #print(segments[58][0])\n    #print(segments[58][1])\n    \n    #print(segments[59])\n    #print(segments[59][0])\n    #print(segments[59][1])\n    \n    #print(segments[60])\n    #print(segments[60][0])\n    #print(segments[60][1])\n    \n    #print(segments[61])\n    #print(segments[61][0])\n    #print(segments[61][1])\n    \n    #print(segments[62])\n    #print(segments[62][0])\n    #print(segments[62][1])\n    \n    #print(segments[63])\n    #print(segments[63][0])\n    #print(segments[63][1])\n    \n    #print(segments[64])\n    #print(segments[64][0])\n    #print(segments[64][1])\n    \n    #print(segments[65])\n    #print(segments[65][0])\n    #print(segments[65][1])\n    \n    #print(segments[66])\n    #print(segments[66][0])\n    #print(segments[66][1])\n    \n    #print(segments[67])\n    #print(segments[67][0])\n    #print(segments[67][1])\n    \n    #print(segments[68])\n    #print(segments[68][0])\n    #print(segments[68][1])\n    \n    #print(segments[69])\n    #print(segments[69][0])\n    #print(segments[69][1])\n    \n    #print(segments[70])\n    #print(segments[70][0])\n    #print(segments[70][1])\n    \n    #print(segments[71])\n    #print(segments[71][0])\n    #print(segments[71][1])\n    \n    #print(segments[72])\n    #print(segments[72][0])\n    #print(segments[72][1])\n    \n    #print(segments[73])\n    #print(segments[73][0])\n    #print(segments[73][1])\n    \n    #print(segments[74])\n    #print(segments[74][0])\n    #print(segments[74][1])\n    \n    #print(segments[75])\n    #print(segments[75][0])\n    #print(segments[75][1])\n    \n    #print(segments[76])\n    #print(segments[76][0])\n    #print(segments[76][1])\n    \n    #print(segments[77])\n    #print(segments[77][0])\n    #print(segments[77]["
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(se"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef read_ints():\n    return [int(x) for x in input().split()]\n\ndef read_int():\n    return int(input())\n\ndef main():\n    n, m = read_ints()\n    a = read_ints()\n    segments = []\n    for _ in range(m):\n        l, r = read_ints()\n        segments.append((l, r))\n    segments.sort(key=lambda x: (x[1] - x[0], x[0]))\n    segments.reverse()\n    # print(segments)\n    # print(a)\n    answer = 0\n    chosen = []\n    for l, r in segments:\n        if l == r:\n            continue\n        if a[l-1] > a[r-1]:\n            answer += a[l-1] - a[r-1]\n            a[l-1] = a[r-1]\n            chosen.append((l, r))\n    # print(a)\n    # print(chosen)\n    print(answer)\n    print(len(chosen))\n    for l, r in chosen:\n        print(l, r)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append([l-1, r-1])\n    segments.sort(key=lambda x: (x[1]-x[0], x[0]))\n    #print(segments)\n    #print(a)\n    #print()\n    d = 0\n    chosen = []\n    for l, r in segments:\n        if l == r:\n            continue\n        if a[l] < a[r]:\n            a[l] += 1\n            a[r] -= 1\n            d += 2\n            chosen.append([l, r])\n        else:\n            a[l] -= 1\n            a[r] += 1\n            d += 2\n            chosen.append([l, r])\n    #print(a)\n    #print(d)\n    #print(chosen)\n    print(d)\n    print(len(chosen))\n    for l, r in chosen:\n        print(l+1, r+1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    a = map(int, sys.stdin.readline().strip().split())\n    segs = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().strip().split())\n        segs.append((l, r))\n    segs.sort(key=lambda x: x[1])\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(m):\n        l, r = segs[i]\n        for j in range(l-1, r):\n            dp[j] -= 1\n    d = max(dp) - min(dp)\n    print d\n    print 0\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650419732,
  "id": "cmpl-4ytr2nzg8j3vKJVZlynj7Coael5Bg",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 01:56:57.965968 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nimport collections\nimport itertools\nimport array\nimport inspect\n\n# Set max recursion limit\nsys.setrecursionlimit(10000)\n\n\n# Debug output\ndef chkprint(*args):\n    names = {\n        id(v): k\n        for k, v in inspect.currentframe().f_back.f_locals.items()\n    }\n    print(', '.join(\n        names.get(id(arg), '???') + ' = ' + repr(arg) for arg in args))\n\n\n# Binary converter\ndef to_bin(x):\n    return bin(x)[2:]\n\n\ndef li_input():\n    return [int(_) for _ in input().split()]\n\n\ndef gcd(n, m):\n    if n % m == 0:\n        return m\n    else:\n        return gcd(m, n % m)\n\n\ndef gcd_list(L):\n    v = L[0]\n\n    for i in range(1, len(L)):\n        v = gcd(v, L[i])\n\n    return v\n\n\ndef lcm(n, m):\n    return (n * m) // gcd(n, m)\n\n\ndef lcm_list(L):\n    v = L[0]\n\n    for i in range(1, len(L)):\n        v = lcm(v, L[i])\n\n    return v\n\n\n# Width First Search (+ Distance)\ndef wfs_d(D, N, K):\n    \"\"\"\n    D: \u96a3\u63a5\u884c\u5217(\u8ddd\u96e2\u4ed8\u304d)\n    N: \u30ce\u30fc\u30c9\u6570\n    K: \u59cb\u70b9\u30ce\u30fc\u30c9\n    \"\"\"\n\n    dfk = [-1] * (N + 1)\n    dfk[K] = 0\n\n    cps = [(K, 0)]\n    r = [False] * (N + 1)\n    r[K] = True\n    while len(cps) != 0:\n        n_cps = []\n        for cp, cd in cps:\n            for i, dfcp in enumerate(D[cp]):\n                if dfcp != -1 and not r[i]:\n                    dfk[i] = cd + dfcp\n                    n_cps.append((i, cd + dfcp))\n                    r[i] = True\n\n        cps = n_cps[:]\n\n    return dfk\n\n\n# Depth First Search (+Distance)\ndef dfs_d(v, pre, dist):\n    \"\"\"\n    v:  \u73fe\u5728\u306e\u30ce\u30fc\u30c9\n    pre: \uff11\u3064\u524d\u306e\u30ce\u30fc\u30c9\n    dist: \u73fe\u5728\u306e\u8ddd\u96e2\n\n    \u4ee5\u4e0b\u306f\u5225\u9014\u7528\u610f\u3059\u308b\n    D: \u96a3\u63a5\u30ea\u30b9\u30c8(\u884c\u5217\u3067\u306f\u306a\u3044)\n    D_dfs_d: dfs_d\u95a2\u6570\u3067\u7528\u3044\u308b\uff0c\u59cb\u70b9\u30ce\u30fc\u30c9\u304b\u3089\u898b\u305f\u8ddd\u96e2\u30ea\u30b9\u30c8\n    \"\"\"\n\n    global D\n    global D_dfs_d\n\n    D_dfs_d[v] = dist\n\n    for next_v, d in D[v]:\n        if next_v != pre:\n            dfs_d(next_v, v, dist + d)\n\n    return\n\n\ndef sigma(N):\n    ans = 0\n    for i in range(1, N + 1):\n        ans += i\n    return ans\n\n\ndef comb(n, r):\n    if n - r < r: r = n - r\n    if r == 0: return 1\n    if r == 1: return n\n\n    numerator = [n - r + k + 1 for k in range(r)]\n    denominator = [k + 1 for k in range(r)]\n\n    for p in range(2, r + 1):\n        pivot = denominator[p - 1]\n        if pivot > 1:\n            offset = (n - r) % p\n            for k in range(p - 1, r, p):\n                numerator[k - offset] /= pivot\n                denominator[k] /= pivot\n\n    result = 1\n    for k in range(r):\n        if numerator[k] > 1:\n            result *= int(numerator[k])\n\n    return result\n\ndef bisearch(L, target):\n    low = 0\n    high = len(L) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        guess = L[mid]\n        if guess == target:\n            return True\n        elif guess < target:\n            low = mid + 1\n        elif guess > target:\n            high = mid - 1\n    if guess != target:\n        return False\n\n# --------------------------------------------\n\ndp = None\n\n\ndef main():\n    N, M = li_input()\n    A = li_input()\n    S = []\n    for i in range(M):\n        S.append(li_input())\n\n    S.sort(key=lambda x: x[1])\n\n    ans = 0\n    ans_seg = []\n    for i in range(M):\n        seg = S[i]\n        l = seg[0]\n        r = seg[1]\n        tmp = 0\n        for j in range(l - 1, r):\n            tmp += A[j]\n        if tmp > ans:\n            ans = tmp\n            ans_seg = [i + 1]\n        elif tmp == ans:\n            ans_seg.append(i + 1)\n\n    print(ans)\n    print(len(ans_seg))\n    print(*ans_seg)\n\n\nmain()"
}
2022-04-20 01:56:57.966032 REASON stop
2022-04-20 01:56:57.966526 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, input().split())))\n    d = 0\n    q = 0\n    c = []\n    for i in range(m):\n        if segments[i][0] == 1 and segments[i][1] == n:\n            q += 1\n            c.append(i+1)\n            d += min(a)\n    if q == 0:\n        for i in range(m):\n            if segments[i][0] == 1:\n                q += 1\n                c.append(i+1)\n                d += min(a[:segments[i][1]])\n            elif segments[i][1] == n:\n                q += 1\n                c.append(i+1)\n                d += min(a[segments[i][0]-1:])\n    print(d)\n    print(q)\n    print(*c)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 01:56:57.966586 REASON stop
2022-04-20 01:56:57.967035 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(m):\n        l, r = segments[i]\n        for j in range(l-1, r):\n            dp[j] -= 1\n    print(max(dp) - min(dp))\n    print(0)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 01:56:57.967094 REASON stop
2022-04-20 01:56:57.989538 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    segments = []\n    for i in range(m):\n        segments.append([int(i) for i in input().split()])\n    \n    #print(n, m, a, segments)\n    #print(segments)\n    #print(segments[0])\n    #print(segments[0][0])\n    #print(segments[0][1])\n    \n    #print(segments[1])\n    #print(segments[1][0])\n    #print(segments[1][1])\n    \n    #print(segments[2])\n    #print(segments[2][0])\n    #print(segments[2][1])\n    \n    #print(segments[3])\n    #print(segments[3][0])\n    #print(segments[3][1])\n    \n    #print(segments[4])\n    #print(segments[4][0])\n    #print(segments[4][1])\n    \n    #print(segments[5])\n    #print(segments[5][0])\n    #print(segments[5][1])\n    \n    #print(segments[6])\n    #print(segments[6][0])\n    #print(segments[6][1])\n    \n    #print(segments[7])\n    #print(segments[7][0])\n    #print(segments[7][1])\n    \n    #print(segments[8])\n    #print(segments[8][0])\n    #print(segments[8][1])\n    \n    #print(segments[9])\n    #print(segments[9][0])\n    #print(segments[9][1])\n    \n    #print(segments[10])\n    #print(segments[10][0])\n    #print(segments[10][1])\n    \n    #print(segments[11])\n    #print(segments[11][0])\n    #print(segments[11][1])\n    \n    #print(segments[12])\n    #print(segments[12][0])\n    #print(segments[12][1])\n    \n    #print(segments[13])\n    #print(segments[13][0])\n    #print(segments[13][1])\n    \n    #print(segments[14])\n    #print(segments[14][0])\n    #print(segments[14][1])\n    \n    #print(segments[15])\n    #print(segments[15][0])\n    #print(segments[15][1])\n    \n    #print(segments[16])\n    #print(segments[16][0])\n    #print(segments[16][1])\n    \n    #print(segments[17])\n    #print(segments[17][0])\n    #print(segments[17][1])\n    \n    #print(segments[18])\n    #print(segments[18][0])\n    #print(segments[18][1])\n    \n    #print(segments[19])\n    #print(segments[19][0])\n    #print(segments[19][1])\n    \n    #print(segments[20])\n    #print(segments[20][0])\n    #print(segments[20][1])\n    \n    #print(segments[21])\n    #print(segments[21][0])\n    #print(segments[21][1])\n    \n    #print(segments[22])\n    #print(segments[22][0])\n    #print(segments[22][1])\n    \n    #print(segments[23])\n    #print(segments[23][0])\n    #print(segments[23][1])\n    \n    #print(segments[24])\n    #print(segments[24][0])\n    #print(segments[24][1])\n    \n    #print(segments[25])\n    #print(segments[25][0])\n    #print(segments[25][1])\n    \n    #print(segments[26])\n    #print(segments[26][0])\n    #print(segments[26][1])\n    \n    #print(segments[27])\n    #print(segments[27][0])\n    #print(segments[27][1])\n    \n    #print(segments[28])\n    #print(segments[28][0])\n    #print(segments[28][1])\n    \n    #print(segments[29])\n    #print(segments[29][0])\n    #print(segments[29][1])\n    \n    #print(segments[30])\n    #print(segments[30][0])\n    #print(segments[30][1])\n    \n    #print(segments[31])\n    #print(segments[31][0])\n    #print(segments[31][1])\n    \n    #print(segments[32])\n    #print(segments[32][0])\n    #print(segments[32][1])\n    \n    #print(segments[33])\n    #print(segments[33][0])\n    #print(segments[33][1])\n    \n    #print(segments[34])\n    #print(segments[34][0])\n    #print(segments[34][1])\n    \n    #print(segments[35])\n    #print(segments[35][0])\n    #print(segments[35][1])\n    \n    #print(segments[36])\n    #print(segments[36][0])\n    #print(segments[36][1])\n    \n    #print(segments[37])\n    #print(segments[37][0])\n    #print(segments[37][1])\n    \n    #print(segments[38])\n    #print(segments[38][0])\n    #print(segments[38][1])\n    \n    #print(segments[39])\n    #print(segments[39][0])\n    #print(segments[39][1])\n    \n    #print(segments[40])\n    #print(segments[40][0])\n    #print(segments[40][1])\n    \n    #print(segments[41])\n    #print(segments[41][0])\n    #print(segments[41][1])\n    \n    #print(segments[42])\n    #print(segments[42][0])\n    #print(segments[42][1])\n    \n    #print(segments[43])\n    #print(segments[43][0])\n    #print(segments[43][1])\n    \n    #print(segments[44])\n    #print(segments[44][0])\n    #print(segments[44][1])\n    \n    #print(segments[45])\n    #print(segments[45][0])\n    #print(segments[45][1])\n    \n    #print(segments[46])\n    #print(segments[46][0])\n    #print(segments[46][1])\n    \n    #print(segments[47])\n    #print(segments[47][0])\n    #print(segments[47][1])\n    \n    #print(segments[48])\n    #print(segments[48][0])\n    #print(segments[48][1])\n    \n    #print(segments[49])\n    #print(segments[49][0])\n    #print(segments[49][1])\n    \n    #print(segments[50])\n    #print(segments[50][0])\n    #print(segments[50][1])\n    \n    #print(segments[51])\n    #print(segments[51][0])\n    #print(segments[51][1])\n    \n    #print(segments[52])\n    #print(segments[52][0])\n    #print(segments[52][1])\n    \n    #print(segments[53])\n    #print(segments[53][0])\n    #print(segments[53][1])\n    \n    #print(segments[54])\n    #print(segments[54][0])\n    #print(segments[54][1])\n    \n    #print(segments[55])\n    #print(segments[55][0])\n    #print(segments[55][1])\n    \n    #print(segments[56])\n    #print(segments[56][0])\n    #print(segments[56][1])\n    \n    #print(segments[57])\n    #print(segments[57][0])\n    #print(segments[57][1])\n    \n    #print(segments[58])\n    #print(segments[58][0])\n    #print(segments[58][1])\n    \n    #print(segments[59])\n    #print(segments[59][0])\n    #print(segments[59][1])\n    \n    #print(segments[60])\n    #print(segments[60][0])\n    #print(segments[60][1])\n    \n    #print(segments[61])\n    #print(segments[61][0])\n    #print(segments[61][1])\n    \n    #print(segments[62])\n    #print(segments[62][0])\n    #print(segments[62][1])\n    \n    #print(segments[63])\n    #print(segments[63][0])\n    #print(segments[63][1])\n    \n    #print(segments[64])\n    #print(segments[64][0])\n    #print(segments[64][1])\n    \n    #print(segments[65])\n    #print(segments[65][0])\n    #print(segments[65][1])\n    \n    #print(segments[66])\n    #print(segments[66][0])\n    #print(segments[66][1])\n    \n    #print(segments[67])\n    #print(segments[67][0])\n    #print(segments[67][1])\n    \n    #print(segments[68])\n    #print(segments[68][0])\n    #print(segments[68][1])\n    \n    #print(segments[69])\n    #print(segments[69][0])\n    #print(segments[69][1])\n    \n    #print(segments[70])\n    #print(segments[70][0])\n    #print(segments[70][1])\n    \n    #print(segments[71])\n    #print(segments[71][0])\n    #print(segments[71][1])\n    \n    #print(segments[72])\n    #print(segments[72][0])\n    #print(segments[72][1])\n    \n    #print(segments[73])\n    #print(segments[73][0])\n    #print(segments[73][1])\n    \n    #print(segments[74])\n    #print(segments[74][0])\n    #print(segments[74][1])\n    \n    #print(segments[75])\n    #print(segments[75][0])\n    #print(segments[75][1])\n    \n    #print(segments[76])\n    #print(segments[76][0])\n    #print(segments[76][1])\n    \n    #print(segments[77])\n    #print(segments[77][0])\n    #print(segments[77]["
}
2022-04-20 01:56:57.989724 REASON length
2022-04-20 01:56:57.989735 4 {
  "finish_reason": "length",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(segments)\n    # print(a)\n    # print()\n    # print(se"
}
2022-04-20 01:56:57.989795 REASON length
2022-04-20 01:56:57.989800 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef read_ints():\n    return [int(x) for x in input().split()]\n\ndef read_int():\n    return int(input())\n\ndef main():\n    n, m = read_ints()\n    a = read_ints()\n    segments = []\n    for _ in range(m):\n        l, r = read_ints()\n        segments.append((l, r))\n    segments.sort(key=lambda x: (x[1] - x[0], x[0]))\n    segments.reverse()\n    # print(segments)\n    # print(a)\n    answer = 0\n    chosen = []\n    for l, r in segments:\n        if l == r:\n            continue\n        if a[l-1] > a[r-1]:\n            answer += a[l-1] - a[r-1]\n            a[l-1] = a[r-1]\n            chosen.append((l, r))\n    # print(a)\n    # print(chosen)\n    print(answer)\n    print(len(chosen))\n    for l, r in chosen:\n        print(l, r)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 01:56:57.989855 REASON stop
2022-04-20 01:56:58.013229 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append([l-1, r-1])\n    segments.sort(key=lambda x: (x[1]-x[0], x[0]))\n    #print(segments)\n    #print(a)\n    #print()\n    d = 0\n    chosen = []\n    for l, r in segments:\n        if l == r:\n            continue\n        if a[l] < a[r]:\n            a[l] += 1\n            a[r] -= 1\n            d += 2\n            chosen.append([l, r])\n        else:\n            a[l] -= 1\n            a[r] += 1\n            d += 2\n            chosen.append([l, r])\n    #print(a)\n    #print(d)\n    #print(chosen)\n    print(d)\n    print(len(chosen))\n    for l, r in chosen:\n        print(l+1, r+1)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 01:56:58.013365 REASON stop
2022-04-20 01:56:58.021473 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    a = map(int, sys.stdin.readline().strip().split())\n    segs = []\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().strip().split())\n        segs.append((l, r))\n    segs.sort(key=lambda x: x[1])\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(m):\n        l, r = segs[i]\n        for j in range(l-1, r):\n            dp[j] -= 1\n    d = max(dp) - min(dp)\n    print d\n    print 0\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 01:56:58.021704 REASON stop
