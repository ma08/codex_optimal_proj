["\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    switches = [[] for _ in range(N)]\n    for i in range(M):\n        k, *s = map(int, sys.stdin.readline().split())\n        for j in range(k):\n            switches[s[j]-1].append(i)\n    p = list(map(int, sys.stdin.readline().split()))\n    ans = 0\n    for i in range(1<<N):\n        flag = True\n        for j in range(M):\n            cnt = 0\n            for k in switches[j]:\n                if i>>k&1:\n                    cnt += 1\n            if cnt%2 != p[j]:\n                flag = False\n                break\n        if flag:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\n# k_i, s_{ij}\nbulbs = []\nfor i in range(M):\n    bulbs.append(list(map(int, sys.stdin.readline().split())))\n\n# p_i\np = list(map(int, sys.stdin.readline().split()))\n\n# \u5404\u96fb\u7403\u306b\u7e4b\u304c\u3063\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\nswitches = [[] for i in range(N)]\nfor i in range(M):\n    for j in range(1, bulbs[i][0]+1):\n        switches[bulbs[i][j]-1].append(i)\n\n# \u5168\u3066\u306e\u30b9\u30a4\u30c3\u30c1\u306e\u72b6\u614b\u3092\u30d3\u30c3\u30c8\u3067\u8868\u73fe\nall_states = (1 << N) - 1\n\n# \u5168\u3066\u306e\u30b9\u30a4\u30c3\u30c1\u306e\u72b6\u614b\u3092\u30d3\u30c3\u30c8\u3067\u8868\u73fe\u3057\u305f\u6642\u3001\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\ndef is_lighted(state, i):\n    # \u30b9\u30a4\u30c3\u30c1\u306e\u72b6\u614b\u3092\u30d3\u30c3\u30c8\u3067\u8868\u73fe\u3057\u305f\u6642\u3001\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u5909\u6570\n    c = 0\n    for switch in switches[i]:\n        if state & (1 << switch):\n            c += 1\n    return c % 2 == p[i]\n\n# \u5168\u3066\u306e\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u72b6\u614b\u3092\u6570\u3048\u308b\ncount = 0\nfor state in range(all_states+1):\n    # \u5168\u3066\u306e\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\n    lighted = True\n    for i in range(N):\n        if not is_lighted(state, i):\n            lighted = False\n            break\n    if lighted:\n        count += 1\n\nprint(count)", "\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [[] for _ in range(n)]\n    for i in range(m):\n        k, *s = map(int, input().split())\n        for j in range(k):\n            switches[s[j]-1].append(i)\n    p = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(1 << n):\n        flag = True\n        for j in range(m):\n            cnt = 0\n            for k in switches[j]:\n                if i & (1 << k):\n                    cnt += 1\n            if cnt % 2 != p[j]:\n                flag = False\n                break\n        if flag:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport numpy as np\n\ndef main():\n    N, M = map(int, sys.stdin.readline().strip().split())\n    switches = np.zeros((N, M), dtype=np.int)\n    for i in range(M):\n        k = int(sys.stdin.readline().strip().split()[0])\n        switches[int(sys.stdin.readline().strip().split()[j]) - 1][i] = 1\n    p = np.array(list(map(int, sys.stdin.readline().strip().split())))\n    print(switches)\n    print(p)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\n# read data\nn, m = map(int, sys.stdin.readline().split())\n\n# create bulb_switch_list\nbulb_switch_list = []\nfor i in range(m):\n    bulb_switch_list.append(list(map(int, sys.stdin.readline().split())))\n\n# create switch_bulb_list\nswitch_bulb_list = [[] for i in range(n)]\nfor i in range(m):\n    for j in range(1, bulb_switch_list[i][0]+1):\n        switch_bulb_list[bulb_switch_list[i][j]-1].append(i)\n\n# create bulb_state_list\nbulb_state_list = list(map(int, sys.stdin.readline().split()))\n\n# create bulb_state_list_on\nbulb_state_list_on = [[] for i in range(m)]\nfor i in range(m):\n    for j in range(2**bulb_switch_list[i][0]):\n        bulb_state_list_on[i].append(0)\n        for k in range(bulb_switch_list[i][0]):\n            if (j >> k) & 1:\n                bulb_state_list_on[i][j] += 1\n\n# create switch_state_list_on\nswitch_state_list_on = [[] for i in range(n)]\nfor i in range(n):\n    for j in range(2**len(switch_bulb_list[i])):\n        switch_state_list_on[i].append(0)\n        for k in range(len(switch_bulb_list[i])):\n            if (j >> k) & 1:\n                switch_state_list_on[i][j] += 1\n\n# create switch_state_list_on_bulb_state_list_on\nswitch_state_list_on_bulb_state_list_on = [[] for i in range(n)]\nfor i in range(n):\n    for j in range(2**len(switch_bulb_list[i])):\n        switch_state_list_on_bulb_state_list_on[i].append([])\n        for k in range(m):\n            switch_state_list_on_bulb_state_list_on[i][j].append(0)\n        for k in range(len(switch_bulb_list[i])):\n            switch_state_list_on_bulb_state_list_on[i][j][switch_bulb_list[i][k]] = switch_state_list_on[i][j]\n\n# create switch_state_list_on_bulb_state_list_on_bulb_state_list\nswitch_state_list_on_bulb_state_list_on_bulb_state_list = [[] for i in range(n)]\nfor i in range(n):\n    for j in range(2**len(switch_bulb_list[i])):\n        switch_state_list_on_bulb_state_list_on_bulb_state_list[i].append([])\n        for k in range(m):\n            switch_state_list_on_bulb_state_list_on_bulb_state_list[i][j].append(0)\n        for k in range(m):\n            if switch_state_list_on_bulb_state_list_on[i][j][k] % 2 == bulb_state_list[k]:\n                switch_state_list_on_bulb_state_list_on_bulb_state_list[i][j][k] = 1\n\n# create switch_state_list_on_bulb_state_list_on_bulb_state_list_all\nswitch_state_list_on_bulb_state_list_on_bulb_state_list_all = [[] for i in range(n)]\nfor i in range(n):\n    for j in range(2**len(switch_bulb_list[i])):\n        switch_state_list_on_bulb_state_list_on_bulb_state_list_all[i].append(0)\n        for k in range(m):\n            if switch_state_list_on_bulb_state_list_on_bulb_state_list[i][j][k] == 1:\n                switch_state_list_on_bulb_state_list_on_bulb_state_list_all[i][j] += 1\n\n# create switch_state_list_on_bulb_state_list_on_bulb_state_list_all_all\nswitch_state_list_on_bulb_state_list_on_bulb_state_list_all_all = 0\nfor i in range(n):\n    for j in range(2**len(switch_bulb_list[i])):\n        if switch_state_list_on_bulb_state_list_on_bulb_state_list_all[i][j] == m:\n            switch_state_list_on_bulb_state_list_on_bulb_state_list_all_all += 1\n\n# print\nprint(switch_state_list_on_bulb_state_list_on_bulb_state_list_all_all)", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    bulbs = []\n    for i in range(m):\n        bulbs.append(list(map(int, sys.stdin.readline().split())))\n    p = list(map(int, sys.stdin.readline().split()))\n\n    # print(bulbs)\n    # print(p)\n\n    ans = 0\n    for i in range(2**n):\n        # print(\"i = {}\".format(i))\n        flag = True\n        for j in range(m):\n            # print(\"j = {}\".format(j))\n            count = 0\n            for k in range(1, bulbs[j][0]+1):\n                # print(\"k = {}\".format(k))\n                if (i >> (bulbs[j][k]-1)) & 1:\n                    count += 1\n            # print(\"count = {}\".format(count))\n            if count % 2 != p[j]:\n                flag = False\n                break\n        if flag:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\n# N, M = map(int, input().split())\n# switches = []\n# for i in range(M):\n#     switches.append(list(map(int, input().split())))\n# bulbs = list(map(int, input().split()))\n#\n# def count_light(switches, bulbs, N, M):\n#     count = 0\n#     for i in range(2**N):\n#         switch_on = [0] * N\n#         for j in range(N):\n#             if ((i >> j) & 1):\n#                 switch_on[j] = 1\n#         light_on = [0] * M\n#         for j in range(M):\n#             for k in range(1, switches[j][0]+1):\n#                 if switch_on[switches[j][k]-1] == 1:\n#                     light_on[j] += 1\n#         for j in range(M):\n#             if light_on[j] % 2 == bulbs[j]:\n#                 count += 1\n#                 break\n#     return count\n#\n# print(count_light(switches, bulbs, N, M))\n\nN, M = map(int, input().split())\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split())))\nbulbs = list(map(int, input().split()))\n\ndef count_light(switches, bulbs, N, M):\n    count = 0\n    for i in range(2**N):\n        switch_on = [0] * N\n        for j in range(N):\n            if ((i >> j) & 1):\n                switch_on[j] = 1\n        light_on = [0] * M\n        for j in range(M):\n            for k in range(1, switches[j][0]+1):\n                if switch_on[switches[j][k]-1] == 1:\n                    light_on[j] += 1\n        for j in range(M):\n            if light_on[j] % 2 == bulbs[j]:\n                count += 1\n                break\n    return count\n\nprint(count_light(switches, bulbs, N, M))"]