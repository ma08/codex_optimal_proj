2022-04-20 03:59:16.941637 """
You are given a string $s$ consisting of lowercase Latin letters "a", "b" and "c" and question marks "?".

Let the number of question marks in the string $s$ be $k$. Let's replace each question mark with one of the letters "a", "b" and "c". Here we can obtain all $3^{k}$ possible strings consisting only of letters "a", "b" and "c". For example, if $s = $"ac?b?c" then we can obtain the following strings: $[$"acabac", "acabbc", "acabcc", "acbbac", "acbbbc", "acbbcc", "accbac", "accbbc", "accbcc"$]$.

Your task is to count the total number of subsequences "abc" in all resulting strings. Since the answer can be very large, print it modulo $10^{9} + 7$.

A subsequence of the string $t$ is such a sequence that can be derived from the string $t$ after removing some (possibly, zero) number of letters without changing the order of remaining letters. For example, the string "baacbc" contains two subsequences "abc" — a subsequence consisting of letters at positions $(2, 5, 6)$ and a subsequence consisting of letters at positions $(3, 5, 6)$.


-----Input-----

The first line of the input contains one integer $n$ $(3 \le n \le 200\,000)$ — the length of $s$.

The second line of the input contains the string $s$ of length $n$ consisting of lowercase Latin letters "a", "b" and "c" and question marks"?".


-----Output-----

Print the total number of subsequences "abc" in all strings you can obtain if you replace all question marks with letters "a", "b" and "c", modulo $10^{9} + 7$.


-----Examples-----
Input
6
ac?b?c

Output
24

Input
7
???????

Output
2835

Input
9
cccbbbaaa

Output
0

Input
5
a???c

Output
46



-----Note-----

In the first example, we can obtain $9$ strings:  "acabac" — there are $2$ subsequences "abc",  "acabbc" — there are $4$ subsequences "abc",  "acabcc" — there are $4$ subsequences "abc",  "acbbac" — there are $2$ subsequences "abc",  "acbbbc" — there are $3$ subsequences "abc",  "acbbcc" — there are $4$ subsequences "abc",  "accbac" — there is $1$ subsequence "abc",  "accbbc" — there are $2$ subsequences "abc",  "accbcc" — there are $2$ subsequences "abc". 

So, there are $2 + 4 + 4 + 2 + 3 + 4 + 1 + 2 + 2 = 24$ subsequences "abc" in total.
"""
2022-04-20 03:59:16.941683 --------------------------
2022-04-20 03:59:16.941845 using api key sourya
2022-04-20 03:59:17.067629 in retry 8 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 03:59:22.073057 """
You are given a string $s$ consisting of lowercase Latin letters "a", "b" and "c" and question marks "?".

Let the number of question marks in the string $s$ be $k$. Let's replace each question mark with one of the letters "a", "b" and "c". Here we can obtain all $3^{k}$ possible strings consisting only of letters "a", "b" and "c". For example, if $s = $"ac?b?c" then we can obtain the following strings: $[$"acabac", "acabbc", "acabcc", "acbbac", "acbbbc", "acbbcc", "accbac", "accbbc", "accbcc"$]$.

Your task is to count the total number of subsequences "abc" in all resulting strings. Since the answer can be very large, print it modulo $10^{9} + 7$.

A subsequence of the string $t$ is such a sequence that can be derived from the string $t$ after removing some (possibly, zero) number of letters without changing the order of remaining letters. For example, the string "baacbc" contains two subsequences "abc" — a subsequence consisting of letters at positions $(2, 5, 6)$ and a subsequence consisting of letters at positions $(3, 5, 6)$.


-----Input-----

The first line of the input contains one integer $n$ $(3 \le n \le 200\,000)$ — the length of $s$.

The second line of the input contains the string $s$ of length $n$ consisting of lowercase Latin letters "a", "b" and "c" and question marks"?".


-----Output-----

Print the total number of subsequences "abc" in all strings you can obtain if you replace all question marks with letters "a", "b" and "c", modulo $10^{9} + 7$.


-----Examples-----
Input
6
ac?b?c

Output
24

Input
7
???????

Output
2835

Input
9
cccbbbaaa

Output
0

Input
5
a???c

Output
46



-----Note-----

In the first example, we can obtain $9$ strings:  "acabac" — there are $2$ subsequences "abc",  "acabbc" — there are $4$ subsequences "abc",  "acabcc" — there are $4$ subsequences "abc",  "acbbac" — there are $2$ subsequences "abc",  "acbbbc" — there are $3$ subsequences "abc",  "acbbcc" — there are $4$ subsequences "abc",  "accbac" — there is $1$ subsequence "abc",  "accbbc" — there are $2$ subsequences "abc",  "accbcc" — there are $2$ subsequences "abc". 

So, there are $2 + 4 + 4 + 2 + 3 + 4 + 1 + 2 + 2 = 24$ subsequences "abc" in total.
"""
2022-04-20 03:59:22.073103 --------------------------
2022-04-20 03:59:22.073259 using api key gabby
2022-04-20 04:00:43.888815 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    a = s.count('a')\n    b = s.count('b')\n    c = s.count('c')\n    q = s.count('?')\n    print((a*b*c + (q*a*b + q*b*c + q*a*c) + q*(q-1)*(q-2)//6) % (10**9 + 7))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    print(s)\n    print(n)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# Solution\n\nimport sys\n\ndef get_input():\n    n = int(input())\n    s = input()\n    return n, s\n\ndef solve(n, s):\n    MOD = 10**9 + 7\n    dp = [[0] * 3 for _ in range(n)]\n    for i in range(n):\n        for j in range(3):\n            if s[i] == \"?\" or s[i] == \"abc\"[j]:\n                dp[i][j] = sum(dp[i-1]) + 1 if i > 0 else 1\n    return sum(dp[-1]) % MOD\n\nif __name__ == \"__main__\":\n    n, s = get_input()\n    print(solve(n, s))"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    MOD = 10**9 + 7\n    a_cnt = s.count('a')\n    b_cnt = s.count('b')\n    c_cnt = s.count('c')\n    q_cnt = s.count('?')\n    # print(a_cnt, b_cnt, c_cnt, q_cnt)\n    # print(a_cnt * b_cnt * c_cnt)\n    # print(a_cnt * b_cnt * (q_cnt + c_cnt))\n    # print(a_cnt * (b_cnt + q_cnt) * (c_cnt + q_cnt))\n    # print(a_cnt * (b_cnt + q_cnt) * (c_cnt + q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt))\n    print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# Solution\n\n# Solution 1\n\nn = int(input())\ns = input()\n\nk = s.count('?')\n\na = s.count('a')\nb = s.count('b')\nc = s.count('c')\n\nans = a*b*c\nans += k*(a*b + b*c + a*c)\nans += k*(k-1)*a*b*c\n\nprint(ans%(10**9+7))\n\n# Solution 2\n\nn = int(input())\ns = input()\n\nk = s.count('?')\n\na = s.count('a')\nb = s.count('b')\nc = s.count('c')\n\nans = a*b*c\nans += k*(a*b + b*c + a*c)\nans += k*(k-1)*a*b*c\n\nprint(ans%(10**9+7))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    MOD = 10**9 + 7\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if s[i] == '?':\n            dp[i] = (dp[i-1] * 3) % MOD\n        elif s[i] == 'a':\n            dp[i] = dp[i-1]\n        elif s[i] == 'b':\n            dp[i] = dp[i-1]\n            if i > 1 and s[i-1] == 'a':\n                dp[i] += dp[i-2]\n        elif s[i] == 'c':\n            dp[i] = dp[i-1]\n            if i > 1 and s[i-1] == 'b':\n                dp[i] += dp[i-2]\n            if i > 2 and s[i-1] == 'a' and s[i-2] == 'b':\n                dp[i] += dp[i-3]\n        dp[i] %= MOD\n    print(dp[-1])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\nn = int(input())\ns = input()\n\na = s.count('a')\nb = s.count('b')\nc = s.count('c')\nq = s.count('?')\n\nif q == 0:\n    print(0)\nelse:\n    print((a * b * c) % (10**9 + 7))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(s):\n    n = len(s)\n    dp = [[0] * 3 for _ in range(n)]\n    for i in range(n):\n        if s[i] == '?':\n            dp[i][0] = 1\n            dp[i][1] = 1\n            dp[i][2] = 1\n        elif s[i] == 'a':\n            dp[i][0] = 1\n        elif s[i] == 'b':\n            dp[i][1] = dp[i-1][0]\n        elif s[i] == 'c':\n            dp[i][2] = dp[i-1][1]\n        else:\n            assert False\n    return dp[n-1][2]\n\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    print(solve(s))"
    }
  ],
  "created": 1650427162,
  "id": "cmpl-4yvmsOnAWofyg6Fw5waG2nxur55hX",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 04:00:43.889399 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    a = s.count('a')\n    b = s.count('b')\n    c = s.count('c')\n    q = s.count('?')\n    print((a*b*c + (q*a*b + q*b*c + q*a*c) + q*(q-1)*(q-2)//6) % (10**9 + 7))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 04:00:43.889569 REASON stop
2022-04-20 04:00:43.890697 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    print(s)\n    print(n)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 04:00:43.890797 REASON stop
2022-04-20 04:00:43.891481 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# Solution\n\nimport sys\n\ndef get_input():\n    n = int(input())\n    s = input()\n    return n, s\n\ndef solve(n, s):\n    MOD = 10**9 + 7\n    dp = [[0] * 3 for _ in range(n)]\n    for i in range(n):\n        for j in range(3):\n            if s[i] == \"?\" or s[i] == \"abc\"[j]:\n                dp[i][j] = sum(dp[i-1]) + 1 if i > 0 else 1\n    return sum(dp[-1]) % MOD\n\nif __name__ == \"__main__\":\n    n, s = get_input()\n    print(solve(n, s))"
}
2022-04-20 04:00:43.891579 REASON stop
2022-04-20 04:00:43.905853 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    MOD = 10**9 + 7\n    a_cnt = s.count('a')\n    b_cnt = s.count('b')\n    c_cnt = s.count('c')\n    q_cnt = s.count('?')\n    # print(a_cnt, b_cnt, c_cnt, q_cnt)\n    # print(a_cnt * b_cnt * c_cnt)\n    # print(a_cnt * b_cnt * (q_cnt + c_cnt))\n    # print(a_cnt * (b_cnt + q_cnt) * (c_cnt + q_cnt))\n    # print(a_cnt * (b_cnt + q_cnt) * (c_cnt + q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt))\n    print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt))\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * c_cnt) - (a_cnt * (b_cnt + q_cnt) * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * c_cnt) - ((a_cnt + q_cnt) * b_cnt * q_cnt) - ((a_cnt + q_cnt) * (b_cnt + q_cnt) * q_cnt) - (q_cnt * q_cnt * q_cnt)) % MOD\n    # print((a_cnt + q_cnt) * (b_cnt + q_cnt) * (c_cnt + q_cnt) - (a_cnt * b_cnt * c_cnt) - (a_cnt * b_cnt * q_cnt) - (a_cnt * (b_cnt + q_cnt) * c_cnt"
}
2022-04-20 04:00:43.906020 REASON length
2022-04-20 04:00:43.906031 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# Solution\n\n# Solution 1\n\nn = int(input())\ns = input()\n\nk = s.count('?')\n\na = s.count('a')\nb = s.count('b')\nc = s.count('c')\n\nans = a*b*c\nans += k*(a*b + b*c + a*c)\nans += k*(k-1)*a*b*c\n\nprint(ans%(10**9+7))\n\n# Solution 2\n\nn = int(input())\ns = input()\n\nk = s.count('?')\n\na = s.count('a')\nb = s.count('b')\nc = s.count('c')\n\nans = a*b*c\nans += k*(a*b + b*c + a*c)\nans += k*(k-1)*a*b*c\n\nprint(ans%(10**9+7))"
}
2022-04-20 04:00:43.906079 REASON stop
2022-04-20 04:00:43.907058 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    MOD = 10**9 + 7\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if s[i] == '?':\n            dp[i] = (dp[i-1] * 3) % MOD\n        elif s[i] == 'a':\n            dp[i] = dp[i-1]\n        elif s[i] == 'b':\n            dp[i] = dp[i-1]\n            if i > 1 and s[i-1] == 'a':\n                dp[i] += dp[i-2]\n        elif s[i] == 'c':\n            dp[i] = dp[i-1]\n            if i > 1 and s[i-1] == 'b':\n                dp[i] += dp[i-2]\n            if i > 2 and s[i-1] == 'a' and s[i-2] == 'b':\n                dp[i] += dp[i-3]\n        dp[i] %= MOD\n    print(dp[-1])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 04:00:43.907163 REASON stop
2022-04-20 04:00:43.925396 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\nn = int(input())\ns = input()\n\na = s.count('a')\nb = s.count('b')\nc = s.count('c')\nq = s.count('?')\n\nif q == 0:\n    print(0)\nelse:\n    print((a * b * c) % (10**9 + 7))"
}
2022-04-20 04:00:43.925676 REASON stop
2022-04-20 04:00:43.926490 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(s):\n    n = len(s)\n    dp = [[0] * 3 for _ in range(n)]\n    for i in range(n):\n        if s[i] == '?':\n            dp[i][0] = 1\n            dp[i][1] = 1\n            dp[i][2] = 1\n        elif s[i] == 'a':\n            dp[i][0] = 1\n        elif s[i] == 'b':\n            dp[i][1] = dp[i-1][0]\n        elif s[i] == 'c':\n            dp[i][2] = dp[i-1][1]\n        else:\n            assert False\n    return dp[n-1][2]\n\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    print(solve(s))"
}
2022-04-20 04:00:43.926632 REASON stop
