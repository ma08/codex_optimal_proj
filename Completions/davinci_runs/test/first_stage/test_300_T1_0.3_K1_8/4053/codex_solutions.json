["\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for i in range(n*2-2):\n        s = input()\n        if s[0] == 'a':\n            prefixes.append(s)\n        else:\n            suffixes.append(s)\n    prefixes.sort()\n    suffixes.sort()\n    for i in range(n-1):\n        if prefixes[i] == suffixes[i]:\n            print('P', end='')\n        else:\n            print('S', end='')\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\nprefixes = []\nsuffixes = []\n\nfor i in range(2*n-2):\n    s = input()\n    if len(s) == 1:\n        prefixes.append(s)\n    else:\n        suffixes.append(s)\n\ns = prefixes[0] + suffixes[0]\nprint(\"P\" * len(prefixes) + \"S\" * len(suffixes))", "\n\nn = int(input())\np_list = []\ns_list = []\nfor i in range(2*n-2):\n    s = input()\n    if s in p_list:\n        p_list.remove(s)\n        s_list.append(s)\n    else:\n        p_list.append(s)\n\nfor i in range(2*n-2):\n    if p_list[i] in s_list:\n        print(\"S\", end=\"\")\n    else:\n        print(\"P\", end=\"\")", "\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for i in range(2*n-2):\n        if i < n-1:\n            prefixes.append(input())\n        else:\n            suffixes.append(input())\n    prefixes.sort(key=len)\n    suffixes.sort(key=len)\n    prefixes.reverse()\n    suffixes.reverse()\n    #print(prefixes)\n    #print(suffixes)\n    result = []\n    for i in range(2*n-2):\n        if i < n-1:\n            result.append('P')\n        else:\n            result.append('S')\n    for i in range(n-1):\n        for j in range(n-1):\n            if prefixes[i] == suffixes[j]:\n                result[i] = 'S'\n                result[j+n-1] = 'P'\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\n\nprefixes = []\nsuffixes = []\n\nfor i in range(2*n-2):\n    s = input()\n    if len(s) == 1:\n        prefixes.append(s)\n    else:\n        suffixes.append(s)\n\nprefixes.sort()\nsuffixes.sort()\n\nfor i in range(2*n-2):\n    if i < n-1:\n        print('P', end='')\n    else:\n        print('S', end='')", "\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for i in range(2*n-2):\n        s = input()\n        if len(s) == 1:\n            prefixes.append(s)\n        else:\n            suffixes.append(s)\n    prefixes.sort()\n    suffixes.sort()\n    for i in range(n-1):\n        print(\"P\", end=\"\")\n    for i in range(n-1):\n        print(\"S\", end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\n# This is a simple application of a trie data structure.\n# We can build a trie from the given prefixes and suffixes,\n# and then we can traverse the trie to find the string that\n# matches the given prefixes and suffixes.\n\n# This is a trie data structure.\n# It is used to store a set of strings.\n# It supports the following operations:\n# - insert(s): insert a string s into the trie\n# - search(s): return True if s is in the trie, False otherwise\n# - startsWith(s): return True if s is a prefix of some string in the trie, False otherwise\n# - find(): return the string that is stored in the trie\nclass Trie:\n    def __init__(self):\n        self.root = {}\n        self.endSymbol = \"*\"\n\n    def insert(self, s):\n        current = self.root\n        for c in s:\n            if c not in current:\n                current[c] = {}\n            current = current[c]\n        current[self.endSymbol] = s\n\n    def search(self, s):\n        current = self.root\n        for c in s:\n            if c not in current:\n                return False\n            current = current[c]\n        return self.endSymbol in current\n\n    def startsWith(self, s):\n        current = self.root\n        for c in s:\n            if c not in current:\n                return False\n            current = current[c]\n        return True\n\n    def find(self):\n        current = self.root\n        s = \"\"\n        while self.endSymbol not in current:\n            for c in current:\n                if c != self.endSymbol:\n                    s += c\n                    current = current[c]\n                    break\n        return s + current[self.endSymbol]\n\n# Read the input.\nn = int(input())\nstrings = []\nfor i in range(2 * n - 2):\n    strings.append(input())\n\n# Build a trie from the given strings.\ntrie = Trie()\nfor s in strings:\n    trie.insert(s)\n\n# Find the string that matches the given prefixes and suffixes.\ns = trie.find()\n\n# Print the answer.\nans = \"\"\nfor i in range(len(strings)):\n    if strings[i] == s[:len(strings[i])]:\n        ans += \"P\"\n    else:\n        ans += \"S\"\nprint(ans)"]