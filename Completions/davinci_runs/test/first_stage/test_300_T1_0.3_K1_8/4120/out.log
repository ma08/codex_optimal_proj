2022-04-20 02:25:57.598090 """
There are $n$ cities in Berland. Some pairs of cities are connected by roads. All roads are bidirectional. Each road connects two different cities. There is at most one road between a pair of cities. The cities are numbered from $1$ to $n$.

It is known that, from the capital (the city with the number $1$), you can reach any other city by moving along the roads.

The President of Berland plans to improve the country's road network. The budget is enough to repair exactly $n-1$ roads. The President plans to choose a set of $n-1$ roads such that:

  it is possible to travel from the capital to any other city along the $n-1$ chosen roads,  if $d_i$ is the number of roads needed to travel from the capital to city $i$, moving only along the $n-1$ chosen roads, then $d_1 + d_2 + \dots + d_n$ is minimized (i.e. as minimal as possible). 

In other words, the set of $n-1$ roads should preserve the connectivity of the country, and the sum of distances from city $1$ to all cities should be minimized (where you can only use the $n-1$ chosen roads).

The president instructed the ministry to prepare $k$ possible options to choose $n-1$ roads so that both conditions above are met.

Write a program that will find $k$ possible ways to choose roads for repair. If there are fewer than $k$ ways, then the program should output all possible valid ways to choose roads.


-----Input-----

The first line of the input contains integers $n$, $m$ and $k$ ($2 \le n \le 2\cdot10^5, n-1 \le m \le 2\cdot10^5, 1 \le k \le 2\cdot10^5$), where $n$ is the number of cities in the country, $m$ is the number of roads and $k$ is the number of options to choose a set of roads for repair. It is guaranteed that $m \cdot k \le 10^6$.

The following $m$ lines describe the roads, one road per line. Each line contains two integers $a_i$, $b_i$ ($1 \le a_i, b_i \le n$, $a_i \ne b_i$) — the numbers of the cities that the $i$-th road connects. There is at most one road between a pair of cities. The given set of roads is such that you can reach any city from the capital.


-----Output-----

Print $t$ ($1 \le t \le k$) — the number of ways to choose a set of roads for repair. Recall that you need to find $k$ different options; if there are fewer than $k$ of them, then you need to find all possible different valid options.

In the following $t$ lines, print the options, one per line. Print an option as a string of $m$ characters where the $j$-th character is equal to '1' if the $j$-th road is included in the option, and is equal to '0' if the road is not included. The roads should be numbered according to their order in the input. The options can be printed in any order. All the $t$ lines should be different.

Since it is guaranteed that $m \cdot k \le 10^6$, the total length of all the $t$ lines will not exceed $10^6$.

If there are several answers, output any of them.


-----Examples-----
Input
4 4 3
1 2
2 3
1 4
4 3

Output
2
1110
1011

Input
4 6 3
1 2
2 3
1 4
4 3
2 4
1 3

Output
1
101001

Input
5 6 2
1 2
1 3
2 4
2 5
3 4
3 5

Output
2
111100
110110
"""
2022-04-20 02:25:57.598110 --------------------------
2022-04-20 02:25:57.598214 using api key gabby
2022-04-20 02:27:26.940819 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nimport collections\nimport itertools\nimport array\nimport inspect\n\n# Set max recursion limit\nsys.setrecursionlimit(1000000)\n\n\n# Debug output\ndef chkprint(*args):\n    names = {\n        id(v): k\n        for k, v in inspect.currentframe().f_back.f_locals.items()\n    }\n    print(', '.join(\n        names.get(id(arg), '???') + ' = ' + repr(arg) for arg in args))\n\n\n# Binary converter\ndef to_bin(x):\n    return bin(x)[2:]\n\n\ndef li_input():\n    return [int(_) for _ in input().split()]\n\n\ndef gcd(n, m):\n    if n % m == 0:\n        return m\n    else:\n        return gcd(m, n % m)\n\n\ndef gcd_list(L):\n    v = L[0]\n\n    for i in range(1, len(L)):\n        v = gcd(v, L[i])\n\n    return v\n\n\ndef lcm(n, m):\n    return (n * m) // gcd(n, m)\n\n\ndef lcm_list(L):\n    v = L[0]\n\n    for i in range(1, len(L)):\n        v = lcm(v, L[i])\n\n    return v\n\n\n# Width First Search (+ Distance)\ndef wfs_d(D, N, K):\n    \"\"\"\n    D: \u96a3\u63a5\u884c\u5217(\u8ddd\u96e2\u4ed8\u304d)\n    N: \u30ce\u30fc\u30c9\u6570\n    K: \u59cb\u70b9\u30ce\u30fc\u30c9\n    \"\"\"\n\n    dfk = [-1] * (N + 1)\n    dfk[K] = 0\n\n    cps = [(K, 0)]\n    r = [False] * (N + 1)\n    r[K] = True\n    while len(cps) != 0:\n        n_cps = []\n        for cp, cd in cps:\n            for i, dfcp in enumerate(D[cp]):\n                if dfcp != -1 and not r[i]:\n                    dfk[i] = cd + dfcp\n                    n_cps.append((i, cd + dfcp))\n                    r[i] = True\n\n        cps = n_cps[:]\n\n    return dfk\n\n\n# Depth First Search (+Distance)\ndef dfs_d(v, pre, dist):\n    \"\"\"\n    v:  \u73fe\u5728\u306e\u30ce\u30fc\u30c9\n    pre: \uff11\u3064\u524d\u306e\u30ce\u30fc\u30c9\n    dist: \u73fe\u5728\u306e\u8ddd\u96e2\n\n    \u4ee5\u4e0b\u306f\u5225\u9014\u7528\u610f\u3059\u308b\n    D: \u96a3\u63a5\u30ea\u30b9\u30c8(\u884c\u5217\u3067\u306f\u306a\u3044)\n    D_dfs_d: dfs_d\u95a2\u6570\u3067\u7528\u3044\u308b\uff0c\u59cb\u70b9\u30ce\u30fc\u30c9\u304b\u3089\u898b\u305f\u8ddd\u96e2\u30ea\u30b9\u30c8\n    \"\"\"\n\n    global D\n    global D_dfs_d\n\n    D_dfs_d[v] = dist\n\n    for next_v, d in D[v]:\n        if next_v != pre:\n            dfs_d(next_v, v, dist + d)\n\n    return\n\n\ndef sigma(N):\n    ans = 0\n    for i in range(1, N + 1):\n        ans += i\n    return ans\n\n\nclass Combination:\n    def __init__(self, n, mod):\n\n        g1 = [1, 1]\n        g2 = [1, 1]\n        inverse = [0, 1]\n        for i in range(2, n + 1):\n            g1.append((g1[-1] * i) % mod)\n            inverse.append((-inverse[mod % i] * (mod // i)) % mod)\n            g2.append((g2[-1] * inverse[-1]) % mod)\n\n        self.MOD = mod\n        self.N = n\n        self.g1 = g1\n        self.g2 = g2\n        self.inverse = inverse\n\n    def __call__(self, n, r):\n        if (r < 0) or (n < r):\n            return 0\n        r = min(r, n - r)\n        return self.g1[n] * self.g2[r] * self.g2[n - r] % self.MOD\n\n\ndef bisearch(L, target):\n    low = 0\n    high = len(L) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        guess = L[mid]\n        if guess == target:\n            return True\n        elif guess < target:\n            low = mid + 1\n        elif guess > target:\n            high = mid - 1\n    if guess != target:\n        return False\n\n\n# --------------------------------------------\n\ndp = None\n\n\ndef main():\n    N, M, K = li_input()\n    D = [[] for _ in range(N + 1)]\n    for _ in range(M):\n        a, b = li_input()\n        D[a].append((b, 1))\n        D[b].append((a, 1))\n\n    dfs_d(1, -1, 0)\n    D_dfs_d[1] = 0\n    D_dfs_d = D_dfs_d[1:]\n    D_dfs_d.sort()\n\n    D_dfs_d_set = set(D_dfs_d)\n    D_dfs_d_set = list(D_dfs_d_set)\n    D_dfs_d_set.sort()\n\n    D_dfs_d_dict = {}\n    for i, v in enumerate(D_dfs_d_set):\n        D_dfs_d_dict[v] = i\n\n    D_dfs_d_dict_rev = {}\n    for k, v in D_dfs_d_dict.items():\n        D_dfs_d_dict_rev[v] = k\n\n    D_dfs_d_cnt = [0] * len(D_dfs_d_set)\n    for v in D_dfs_d:\n        D_dfs_d_cnt[D_dfs_d_dict[v]] += 1\n\n    D_dfs_d_cnt_sum = [0] * len(D_dfs_d_set)\n    for i in range(len(D_dfs_d_set)):\n        D_dfs_d_cnt_sum[i] = D_dfs_d_cnt[i] + D_dfs_d_cnt_sum[i - 1]\n\n    D_dfs_d_cnt_sum_rev = [0] * len(D_dfs_d_set)\n    for i in range(len(D_dfs_d_set)):\n        D_dfs_d_cnt_sum_rev[i] = D_dfs_d_cnt_sum[i] - D_dfs_d_cnt[i]\n\n    D_dfs_d_cnt_sum_rev[0] = 0\n\n    D_dfs_d_cnt_sum_rev_dict = {}\n    for i in range(len(D_dfs_d_set)):\n        D_dfs_d_cnt_sum_rev_dict[D_dfs_d_cnt_sum_rev[i]] = i\n\n    D_dfs_d_cnt_sum_rev_dict_rev = {}\n    for k, v in D_dfs_d_cnt_sum_rev_dict.items():\n        D_dfs_d_cnt_sum_rev_dict_rev[v] = k\n\n    ans = []\n    for i in range(len(D_dfs_d_set)):\n        if D_dfs_d_cnt_sum_rev[i] <= K:\n            ans.append(D_dfs_d_cnt_sum_rev[i])\n\n    print(len(ans))\n    for a in ans:\n        print(to_bin(a).zfill(M))\n\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport heapq\n\ndef dijkstra(graph, start):\n    dist = {start: 0}\n    queue = [(0, start)]\n    while queue:\n        dist_u, u = heapq.heappop(queue)\n        for v, w in graph[u]:\n            alt = dist_u + w\n            if v not in dist or alt < dist[v]:\n                dist[v] = alt\n                heapq.heappush(queue, (alt, v))\n    return dist\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append((b, 1))\n        graph[b].append((a, 1))\n    dist = dijkstra(graph, 1)\n    min_sum = sum(dist.values())\n    min_roads = [0] * m\n    for i in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        if dist[a] + 1 == dist[b]:\n            min_roads[i] = 1\n    print(1)\n    print(''.join(map(str, min_roads)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    roads = [list(map(int, input().split())) for _ in range(m)]\n    #print(n, m, k)\n    #print(roads)\n    #print(roads[0][0], roads[0][1])\n    #print(roads[1][0], roads[1][1])\n    #print(roads[2][0], roads[2][1])\n    #print(roads[3][0], roads[3][1])\n    #print(roads[4][0], roads[4][1])\n    #print(roads[5][0], roads[5][1])\n    #print(roads[6][0], roads[6][1])\n    #print(roads[7][0], roads[7][1])\n    #print(roads[8][0], roads[8][1])\n    #print(roads[9][0], roads[9][1])\n    #print(roads[10][0], roads[10][1])\n    #print(roads[11][0], roads[11][1])\n    #print(roads[12][0], roads[12][1])\n    #print(roads[13][0], roads[13][1])\n    #print(roads[14][0], roads[14][1])\n    #print(roads[15][0], roads[15][1])\n    #print(roads[16][0], roads[16][1])\n    #print(roads[17][0], roads[17][1])\n    #print(roads[18][0], roads[18][1])\n    #print(roads[19][0], roads[19][1])\n    #print(roads[20][0], roads[20][1])\n    #print(roads[21][0], roads[21][1])\n    #print(roads[22][0], roads[22][1])\n    #print(roads[23][0], roads[23][1])\n    #print(roads[24][0], roads[24][1])\n    #print(roads[25][0], roads[25][1])\n    #print(roads[26][0], roads[26][1])\n    #print(roads[27][0], roads[27][1])\n    #print(roads[28][0], roads[28][1])\n    #print(roads[29][0], roads[29][1])\n    #print(roads[30][0], roads[30][1])\n    #print(roads[31][0], roads[31][1])\n    #print(roads[32][0], roads[32][1])\n    #print(roads[33][0], roads[33][1])\n    #print(roads[34][0], roads[34][1])\n    #print(roads[35][0], roads[35][1])\n    #print(roads[36][0], roads[36][1])\n    #print(roads[37][0], roads[37][1])\n    #print(roads[38][0], roads[38][1])\n    #print(roads[39][0], roads[39][1])\n    #print(roads[40][0], roads[40][1])\n    #print(roads[41][0], roads[41][1])\n    #print(roads[42][0], roads[42][1])\n    #print(roads[43][0], roads[43][1])\n    #print(roads[44][0], roads[44][1])\n    #print(roads[45][0], roads[45][1])\n    #print(roads[46][0], roads[46][1])\n    #print(roads[47][0], roads[47][1])\n    #print(roads[48][0], roads[48][1])\n    #print(roads[49][0], roads[49][1])\n    #print(roads[50][0], roads[50][1])\n    #print(roads[51][0], roads[51][1])\n    #print(roads[52][0], roads[52][1])\n    #print(roads[53][0], roads[53][1])\n    #print(roads[54][0], roads[54][1])\n    #print(roads[55][0], roads[55][1])\n    #print(roads[56][0], roads[56][1])\n    #print(roads[57][0], roads[57][1])\n    #print(roads[58][0], roads[58][1])\n    #print(roads[59][0], roads[59][1])\n    #print(roads[60][0], roads[60][1])\n    #print(roads[61][0], roads[61][1])\n    #print(roads[62][0], roads[62][1])\n    #print(roads[63][0], roads[63][1])\n    #print(roads[64][0], roads[64][1])\n    #print(roads[65][0], roads[65][1])\n    #print(roads[66][0], roads[66][1])\n    #print(roads[67][0], roads[67][1])\n    #print(roads[68][0], roads[68][1])\n    #print(roads[69][0], roads[69][1])\n    #print(roads[70][0], roads[70][1])\n    #print(roads[71][0], roads[71][1])\n    #print(roads[72][0], roads[72][1])\n    #print(roads[73][0], roads[73][1])\n    #print(roads[74][0], roads[74][1])\n    #print(roads[75][0], roads[75][1])\n    #print(roads[76][0], roads[76][1])\n    #print(roads[77][0], roads[77][1])\n    #print(roads[78][0], roads[78][1])\n    #print(roads[79][0], roads[79][1])\n    #print(roads[80][0], roads[80][1])\n    #print(roads[81][0], roads[81][1])\n    #print(roads[82][0], roads[82][1])\n    #print(roads[83][0], roads[83][1])\n    #print(roads[84][0], roads[84][1])\n    #print(roads[85][0], roads[85][1])\n    #print(roads[86][0], roads[86][1])\n    #print(roads[87][0], roads[87][1])\n    #print(roads[88][0], roads[88][1])\n    #print(roads[89][0], roads[89][1])\n    #print(roads[90][0], roads[90][1])\n    #print(roads[91][0], roads[91][1])\n    #print(roads[92][0], roads[92][1])\n    #print(roads[93][0], roads[93][1])\n    #print(roads[94][0], roads[94][1])\n    #print(roads[95][0], roads[95][1])\n    #print(roads[96][0], roads[96][1])\n    #print(roads[97][0], roads[97][1])\n    #print(roads[98][0], roads[98][1])\n    #print(roads[99][0], roads[99][1])\n    #print(roads[100][0], roads[100][1])\n    #print(roads[101][0], roads[101][1])\n    #print(roads[102][0], roads[102][1])\n    #print(roads[103][0], roads[103][1])\n    #print(roads[104][0], roads[104][1])\n    #print(roads[105][0], roads[105][1])\n    #print(roads[106][0], roads[106][1])\n    #print(roads[107][0], roads[107][1])\n    #print(roads[108][0], roads[108][1])\n    #print(roads[109][0], roads[109][1])\n    #print(roads[110][0], roads[110][1])\n    #print(roads[111][0], roads[111][1])\n    #print(roads[112][0], roads[112][1])\n    #print(roads[113][0], roads[113][1])\n    #print(roads[114][0], roads[114][1])\n    #print(roads[115][0], roads[115][1])\n    #print(roads[116][0], roads[116][1])\n    #print(roads[117][0], roads[117][1])\n    #print(roads[118][0], roads[118][1])\n    #print(roads[119][0], roads[119][1])\n    #print(roads[120][0], roads[120][1])\n    #print(roads[121][0], roads[121][1])\n    #print(roads[122][0], roads[122][1])\n    #print(roads[123][0], roads[123][1])\n    #print(roads[124][0], roads[124][1])\n    #print(roads[125][0], roads[125][1])\n    #print(roads[126][0], roads[126][1])\n    #print(roads[127][0], roads[127][1])\n    #print(roads[128][0], roads[128][1])\n    #print(roads[129][0], roads[129][1])\n    #print(roads[130][0], roads[130][1])\n    #print(roads[131][0], roads[131][1])\n    #print(roads[132][0], roads[132][1])\n    #print(roads[133][0], roads[133][1])\n    #print(roads[134][0], roads[134][1])\n    #print(roads[135][0], roads[135][1])\n    #print(roads[136][0], roads[136][1])\n    #print(roads[137][0], roads[137][1])\n    #print(roads[138][0], roads[138][1])\n    #print(roads[139][0], roads[139][1])\n    #print(roads[140][0], roads[140][1])\n    #print(roads[141][0], roads[141][1])\n    #print(roads[142][0], roads[142][1])\n    #print(roads[143][0], roads[143][1])\n    #print(roads[144][0], roads[144][1])\n    #print(roads[145][0], roads[145][1])\n    #print(roads[146][0], roads[146][1])\n    #print(roads[147][0], roads[147][1])\n    #print(roads[148][0], roads[148][1])\n    #print(roads[149][0], roads[149][1])\n    #print(roads[150][0], roads[150][1])\n    #print(roads[151][0], roads[151][1])\n    #print(roads[152][0], roads[152][1])\n    #print(roads[153][0], roads[153][1])\n    #print(roads[154][0], roads[154][1])\n    #print(roads[155][0], roads[155][1])\n    #print(roads[156][0], roads[156][1])\n    #print(roads[157][0], roads[157][1])\n    #print(roads[158][0], roads[158][1])\n    #print(roads[159][0], roads[159][1])\n    #print(roads[160][0], roads[160][1])\n    #print(roads[161][0], roads[161][1])\n    #print(roads[162][0], roads[162][1])\n    #print(roads[163][0], roads[163][1])\n    #print(roads[164][0], roads[164][1])\n    #print(roads[165][0], roads[165][1])\n    #print(roads[166][0], roads[166][1"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nimport heapq\nimport bisect\nimport itertools\nimport string\nimport queue\nimport copy\nimport time\nimport numpy as np\nimport collections\nimport random\nimport functools\n\nsys.setrecursionlimit(10**8)\nINF = 10**20\nGOSA = 1.0 / 10**10\nMOD = 10**9 + 7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef DP(N, M, first): return [[first] * M for n in range(N)]\ndef DP3(N, M, L, first): return [[[first] * L for n in range(M)] for _ in range(N)]\n\ndef debug(table, *args, out=sys.stderr):\n    ret = []\n    for name, val in table.items():\n        if val in args:\n            ret.append('{}: {}'.format(name, val))\n    print(*ret, file=out)\n\ndef main():\n    N, M, K = LI()\n    edges = []\n    for _ in range(M):\n        edges.append(LI_())\n\n    # print(edges)\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        roads.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    roads = sorted(roads, key=lambda x: x[0])\n    print(roads)\n    for i in range(m):\n        print(roads[i][0], roads[i][1])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(map(int, sys.stdin.readline().split()))\n    print(n, m, k)\n    print(edges)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nimport heapq\nimport itertools\nimport string\nimport queue\nimport copy\nimport collections\nimport time\n\nsys.setrecursionlimit(10000)\n\nclass Node:\n    def __init__(self, idx, parent, children):\n        self.idx = idx\n        self.parent = parent\n        self.children = children\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = [[] for i in range(n)]\n        self.nodes = [Node(i, None, []) for i in range(n)]\n\n    def add_edge(self, u, v):\n        self.edges[u].append(v)\n        self.edges[v].append(u)\n        self.nodes[u].children.append(v)\n        self.nodes[v].children.append(u)\n\n    def dfs(self, root, parent):\n        self.nodes[root].parent = parent\n        for v in self.nodes[root].children:\n            if v != parent:\n                self.dfs(v, root)\n\n    def bfs(self, root):\n        q = queue.Queue()\n        q.put(root)\n        visited = set()\n        visited.add(root)\n        while not q.empty():\n            u = q.get()\n            for v in self.nodes[u].children:\n                if v not in visited:\n                    self.nodes[v].parent = u\n                    visited.add(v)\n                    q.put(v)\n\ndef main():\n    n, m, k = map(int, input().split())\n    g = Graph(n)\n    for i in range(m):\n        u, v = map(int, input().split())\n        g.add_edge(u-1, v-1)\n    g.dfs(0, -1)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, sys.stdin.readline().split())))\n    print(roads)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650421557,
  "id": "cmpl-4yuKTC6kFayvezJDtQIO3aMduOjV8",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 02:27:26.941639 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nimport collections\nimport itertools\nimport array\nimport inspect\n\n# Set max recursion limit\nsys.setrecursionlimit(1000000)\n\n\n# Debug output\ndef chkprint(*args):\n    names = {\n        id(v): k\n        for k, v in inspect.currentframe().f_back.f_locals.items()\n    }\n    print(', '.join(\n        names.get(id(arg), '???') + ' = ' + repr(arg) for arg in args))\n\n\n# Binary converter\ndef to_bin(x):\n    return bin(x)[2:]\n\n\ndef li_input():\n    return [int(_) for _ in input().split()]\n\n\ndef gcd(n, m):\n    if n % m == 0:\n        return m\n    else:\n        return gcd(m, n % m)\n\n\ndef gcd_list(L):\n    v = L[0]\n\n    for i in range(1, len(L)):\n        v = gcd(v, L[i])\n\n    return v\n\n\ndef lcm(n, m):\n    return (n * m) // gcd(n, m)\n\n\ndef lcm_list(L):\n    v = L[0]\n\n    for i in range(1, len(L)):\n        v = lcm(v, L[i])\n\n    return v\n\n\n# Width First Search (+ Distance)\ndef wfs_d(D, N, K):\n    \"\"\"\n    D: \u96a3\u63a5\u884c\u5217(\u8ddd\u96e2\u4ed8\u304d)\n    N: \u30ce\u30fc\u30c9\u6570\n    K: \u59cb\u70b9\u30ce\u30fc\u30c9\n    \"\"\"\n\n    dfk = [-1] * (N + 1)\n    dfk[K] = 0\n\n    cps = [(K, 0)]\n    r = [False] * (N + 1)\n    r[K] = True\n    while len(cps) != 0:\n        n_cps = []\n        for cp, cd in cps:\n            for i, dfcp in enumerate(D[cp]):\n                if dfcp != -1 and not r[i]:\n                    dfk[i] = cd + dfcp\n                    n_cps.append((i, cd + dfcp))\n                    r[i] = True\n\n        cps = n_cps[:]\n\n    return dfk\n\n\n# Depth First Search (+Distance)\ndef dfs_d(v, pre, dist):\n    \"\"\"\n    v:  \u73fe\u5728\u306e\u30ce\u30fc\u30c9\n    pre: \uff11\u3064\u524d\u306e\u30ce\u30fc\u30c9\n    dist: \u73fe\u5728\u306e\u8ddd\u96e2\n\n    \u4ee5\u4e0b\u306f\u5225\u9014\u7528\u610f\u3059\u308b\n    D: \u96a3\u63a5\u30ea\u30b9\u30c8(\u884c\u5217\u3067\u306f\u306a\u3044)\n    D_dfs_d: dfs_d\u95a2\u6570\u3067\u7528\u3044\u308b\uff0c\u59cb\u70b9\u30ce\u30fc\u30c9\u304b\u3089\u898b\u305f\u8ddd\u96e2\u30ea\u30b9\u30c8\n    \"\"\"\n\n    global D\n    global D_dfs_d\n\n    D_dfs_d[v] = dist\n\n    for next_v, d in D[v]:\n        if next_v != pre:\n            dfs_d(next_v, v, dist + d)\n\n    return\n\n\ndef sigma(N):\n    ans = 0\n    for i in range(1, N + 1):\n        ans += i\n    return ans\n\n\nclass Combination:\n    def __init__(self, n, mod):\n\n        g1 = [1, 1]\n        g2 = [1, 1]\n        inverse = [0, 1]\n        for i in range(2, n + 1):\n            g1.append((g1[-1] * i) % mod)\n            inverse.append((-inverse[mod % i] * (mod // i)) % mod)\n            g2.append((g2[-1] * inverse[-1]) % mod)\n\n        self.MOD = mod\n        self.N = n\n        self.g1 = g1\n        self.g2 = g2\n        self.inverse = inverse\n\n    def __call__(self, n, r):\n        if (r < 0) or (n < r):\n            return 0\n        r = min(r, n - r)\n        return self.g1[n] * self.g2[r] * self.g2[n - r] % self.MOD\n\n\ndef bisearch(L, target):\n    low = 0\n    high = len(L) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        guess = L[mid]\n        if guess == target:\n            return True\n        elif guess < target:\n            low = mid + 1\n        elif guess > target:\n            high = mid - 1\n    if guess != target:\n        return False\n\n\n# --------------------------------------------\n\ndp = None\n\n\ndef main():\n    N, M, K = li_input()\n    D = [[] for _ in range(N + 1)]\n    for _ in range(M):\n        a, b = li_input()\n        D[a].append((b, 1))\n        D[b].append((a, 1))\n\n    dfs_d(1, -1, 0)\n    D_dfs_d[1] = 0\n    D_dfs_d = D_dfs_d[1:]\n    D_dfs_d.sort()\n\n    D_dfs_d_set = set(D_dfs_d)\n    D_dfs_d_set = list(D_dfs_d_set)\n    D_dfs_d_set.sort()\n\n    D_dfs_d_dict = {}\n    for i, v in enumerate(D_dfs_d_set):\n        D_dfs_d_dict[v] = i\n\n    D_dfs_d_dict_rev = {}\n    for k, v in D_dfs_d_dict.items():\n        D_dfs_d_dict_rev[v] = k\n\n    D_dfs_d_cnt = [0] * len(D_dfs_d_set)\n    for v in D_dfs_d:\n        D_dfs_d_cnt[D_dfs_d_dict[v]] += 1\n\n    D_dfs_d_cnt_sum = [0] * len(D_dfs_d_set)\n    for i in range(len(D_dfs_d_set)):\n        D_dfs_d_cnt_sum[i] = D_dfs_d_cnt[i] + D_dfs_d_cnt_sum[i - 1]\n\n    D_dfs_d_cnt_sum_rev = [0] * len(D_dfs_d_set)\n    for i in range(len(D_dfs_d_set)):\n        D_dfs_d_cnt_sum_rev[i] = D_dfs_d_cnt_sum[i] - D_dfs_d_cnt[i]\n\n    D_dfs_d_cnt_sum_rev[0] = 0\n\n    D_dfs_d_cnt_sum_rev_dict = {}\n    for i in range(len(D_dfs_d_set)):\n        D_dfs_d_cnt_sum_rev_dict[D_dfs_d_cnt_sum_rev[i]] = i\n\n    D_dfs_d_cnt_sum_rev_dict_rev = {}\n    for k, v in D_dfs_d_cnt_sum_rev_dict.items():\n        D_dfs_d_cnt_sum_rev_dict_rev[v] = k\n\n    ans = []\n    for i in range(len(D_dfs_d_set)):\n        if D_dfs_d_cnt_sum_rev[i] <= K:\n            ans.append(D_dfs_d_cnt_sum_rev[i])\n\n    print(len(ans))\n    for a in ans:\n        print(to_bin(a).zfill(M))\n\n\nmain()"
}
2022-04-20 02:27:26.941785 REASON stop
2022-04-20 02:27:26.942401 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport heapq\n\ndef dijkstra(graph, start):\n    dist = {start: 0}\n    queue = [(0, start)]\n    while queue:\n        dist_u, u = heapq.heappop(queue)\n        for v, w in graph[u]:\n            alt = dist_u + w\n            if v not in dist or alt < dist[v]:\n                dist[v] = alt\n                heapq.heappush(queue, (alt, v))\n    return dist\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append((b, 1))\n        graph[b].append((a, 1))\n    dist = dijkstra(graph, 1)\n    min_sum = sum(dist.values())\n    min_roads = [0] * m\n    for i in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        if dist[a] + 1 == dist[b]:\n            min_roads[i] = 1\n    print(1)\n    print(''.join(map(str, min_roads)))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:27:26.942499 REASON stop
2022-04-20 02:27:26.943175 2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    roads = [list(map(int, input().split())) for _ in range(m)]\n    #print(n, m, k)\n    #print(roads)\n    #print(roads[0][0], roads[0][1])\n    #print(roads[1][0], roads[1][1])\n    #print(roads[2][0], roads[2][1])\n    #print(roads[3][0], roads[3][1])\n    #print(roads[4][0], roads[4][1])\n    #print(roads[5][0], roads[5][1])\n    #print(roads[6][0], roads[6][1])\n    #print(roads[7][0], roads[7][1])\n    #print(roads[8][0], roads[8][1])\n    #print(roads[9][0], roads[9][1])\n    #print(roads[10][0], roads[10][1])\n    #print(roads[11][0], roads[11][1])\n    #print(roads[12][0], roads[12][1])\n    #print(roads[13][0], roads[13][1])\n    #print(roads[14][0], roads[14][1])\n    #print(roads[15][0], roads[15][1])\n    #print(roads[16][0], roads[16][1])\n    #print(roads[17][0], roads[17][1])\n    #print(roads[18][0], roads[18][1])\n    #print(roads[19][0], roads[19][1])\n    #print(roads[20][0], roads[20][1])\n    #print(roads[21][0], roads[21][1])\n    #print(roads[22][0], roads[22][1])\n    #print(roads[23][0], roads[23][1])\n    #print(roads[24][0], roads[24][1])\n    #print(roads[25][0], roads[25][1])\n    #print(roads[26][0], roads[26][1])\n    #print(roads[27][0], roads[27][1])\n    #print(roads[28][0], roads[28][1])\n    #print(roads[29][0], roads[29][1])\n    #print(roads[30][0], roads[30][1])\n    #print(roads[31][0], roads[31][1])\n    #print(roads[32][0], roads[32][1])\n    #print(roads[33][0], roads[33][1])\n    #print(roads[34][0], roads[34][1])\n    #print(roads[35][0], roads[35][1])\n    #print(roads[36][0], roads[36][1])\n    #print(roads[37][0], roads[37][1])\n    #print(roads[38][0], roads[38][1])\n    #print(roads[39][0], roads[39][1])\n    #print(roads[40][0], roads[40][1])\n    #print(roads[41][0], roads[41][1])\n    #print(roads[42][0], roads[42][1])\n    #print(roads[43][0], roads[43][1])\n    #print(roads[44][0], roads[44][1])\n    #print(roads[45][0], roads[45][1])\n    #print(roads[46][0], roads[46][1])\n    #print(roads[47][0], roads[47][1])\n    #print(roads[48][0], roads[48][1])\n    #print(roads[49][0], roads[49][1])\n    #print(roads[50][0], roads[50][1])\n    #print(roads[51][0], roads[51][1])\n    #print(roads[52][0], roads[52][1])\n    #print(roads[53][0], roads[53][1])\n    #print(roads[54][0], roads[54][1])\n    #print(roads[55][0], roads[55][1])\n    #print(roads[56][0], roads[56][1])\n    #print(roads[57][0], roads[57][1])\n    #print(roads[58][0], roads[58][1])\n    #print(roads[59][0], roads[59][1])\n    #print(roads[60][0], roads[60][1])\n    #print(roads[61][0], roads[61][1])\n    #print(roads[62][0], roads[62][1])\n    #print(roads[63][0], roads[63][1])\n    #print(roads[64][0], roads[64][1])\n    #print(roads[65][0], roads[65][1])\n    #print(roads[66][0], roads[66][1])\n    #print(roads[67][0], roads[67][1])\n    #print(roads[68][0], roads[68][1])\n    #print(roads[69][0], roads[69][1])\n    #print(roads[70][0], roads[70][1])\n    #print(roads[71][0], roads[71][1])\n    #print(roads[72][0], roads[72][1])\n    #print(roads[73][0], roads[73][1])\n    #print(roads[74][0], roads[74][1])\n    #print(roads[75][0], roads[75][1])\n    #print(roads[76][0], roads[76][1])\n    #print(roads[77][0], roads[77][1])\n    #print(roads[78][0], roads[78][1])\n    #print(roads[79][0], roads[79][1])\n    #print(roads[80][0], roads[80][1])\n    #print(roads[81][0], roads[81][1])\n    #print(roads[82][0], roads[82][1])\n    #print(roads[83][0], roads[83][1])\n    #print(roads[84][0], roads[84][1])\n    #print(roads[85][0], roads[85][1])\n    #print(roads[86][0], roads[86][1])\n    #print(roads[87][0], roads[87][1])\n    #print(roads[88][0], roads[88][1])\n    #print(roads[89][0], roads[89][1])\n    #print(roads[90][0], roads[90][1])\n    #print(roads[91][0], roads[91][1])\n    #print(roads[92][0], roads[92][1])\n    #print(roads[93][0], roads[93][1])\n    #print(roads[94][0], roads[94][1])\n    #print(roads[95][0], roads[95][1])\n    #print(roads[96][0], roads[96][1])\n    #print(roads[97][0], roads[97][1])\n    #print(roads[98][0], roads[98][1])\n    #print(roads[99][0], roads[99][1])\n    #print(roads[100][0], roads[100][1])\n    #print(roads[101][0], roads[101][1])\n    #print(roads[102][0], roads[102][1])\n    #print(roads[103][0], roads[103][1])\n    #print(roads[104][0], roads[104][1])\n    #print(roads[105][0], roads[105][1])\n    #print(roads[106][0], roads[106][1])\n    #print(roads[107][0], roads[107][1])\n    #print(roads[108][0], roads[108][1])\n    #print(roads[109][0], roads[109][1])\n    #print(roads[110][0], roads[110][1])\n    #print(roads[111][0], roads[111][1])\n    #print(roads[112][0], roads[112][1])\n    #print(roads[113][0], roads[113][1])\n    #print(roads[114][0], roads[114][1])\n    #print(roads[115][0], roads[115][1])\n    #print(roads[116][0], roads[116][1])\n    #print(roads[117][0], roads[117][1])\n    #print(roads[118][0], roads[118][1])\n    #print(roads[119][0], roads[119][1])\n    #print(roads[120][0], roads[120][1])\n    #print(roads[121][0], roads[121][1])\n    #print(roads[122][0], roads[122][1])\n    #print(roads[123][0], roads[123][1])\n    #print(roads[124][0], roads[124][1])\n    #print(roads[125][0], roads[125][1])\n    #print(roads[126][0], roads[126][1])\n    #print(roads[127][0], roads[127][1])\n    #print(roads[128][0], roads[128][1])\n    #print(roads[129][0], roads[129][1])\n    #print(roads[130][0], roads[130][1])\n    #print(roads[131][0], roads[131][1])\n    #print(roads[132][0], roads[132][1])\n    #print(roads[133][0], roads[133][1])\n    #print(roads[134][0], roads[134][1])\n    #print(roads[135][0], roads[135][1])\n    #print(roads[136][0], roads[136][1])\n    #print(roads[137][0], roads[137][1])\n    #print(roads[138][0], roads[138][1])\n    #print(roads[139][0], roads[139][1])\n    #print(roads[140][0], roads[140][1])\n    #print(roads[141][0], roads[141][1])\n    #print(roads[142][0], roads[142][1])\n    #print(roads[143][0], roads[143][1])\n    #print(roads[144][0], roads[144][1])\n    #print(roads[145][0], roads[145][1])\n    #print(roads[146][0], roads[146][1])\n    #print(roads[147][0], roads[147][1])\n    #print(roads[148][0], roads[148][1])\n    #print(roads[149][0], roads[149][1])\n    #print(roads[150][0], roads[150][1])\n    #print(roads[151][0], roads[151][1])\n    #print(roads[152][0], roads[152][1])\n    #print(roads[153][0], roads[153][1])\n    #print(roads[154][0], roads[154][1])\n    #print(roads[155][0], roads[155][1])\n    #print(roads[156][0], roads[156][1])\n    #print(roads[157][0], roads[157][1])\n    #print(roads[158][0], roads[158][1])\n    #print(roads[159][0], roads[159][1])\n    #print(roads[160][0], roads[160][1])\n    #print(roads[161][0], roads[161][1])\n    #print(roads[162][0], roads[162][1])\n    #print(roads[163][0], roads[163][1])\n    #print(roads[164][0], roads[164][1])\n    #print(roads[165][0], roads[165][1])\n    #print(roads[166][0], roads[166][1"
}
2022-04-20 02:27:26.943348 REASON length
2022-04-20 02:27:26.943365 3 {
  "finish_reason": "length",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nimport heapq\nimport bisect\nimport itertools\nimport string\nimport queue\nimport copy\nimport time\nimport numpy as np\nimport collections\nimport random\nimport functools\n\nsys.setrecursionlimit(10**8)\nINF = 10**20\nGOSA = 1.0 / 10**10\nMOD = 10**9 + 7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef DP(N, M, first): return [[first] * M for n in range(N)]\ndef DP3(N, M, L, first): return [[[first] * L for n in range(M)] for _ in range(N)]\n\ndef debug(table, *args, out=sys.stderr):\n    ret = []\n    for name, val in table.items():\n        if val in args:\n            ret.append('{}: {}'.format(name, val))\n    print(*ret, file=out)\n\ndef main():\n    N, M, K = LI()\n    edges = []\n    for _ in range(M):\n        edges.append(LI_())\n\n    # print(edges)\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\n    # \u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3059\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u30b0\u30e9\u30d5\u306e\u4e2d\u3067\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3089\u3001\u305d\u308c\u3092\u51fa\u529b\u3059\u308b\n\n    # \u5168\u3066\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u304b\n    # \u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f\u3063\u3066\u9023\u7d50\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u8fba\u3092\u4f7f"
}
2022-04-20 02:27:26.943489 REASON length
2022-04-20 02:27:26.943501 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        roads.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    roads = sorted(roads, key=lambda x: x[0])\n    print(roads)\n    for i in range(m):\n        print(roads[i][0], roads[i][1])\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:27:26.943550 REASON stop
2022-04-20 02:27:26.980021 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(map(int, sys.stdin.readline().split()))\n    print(n, m, k)\n    print(edges)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:27:26.980203 REASON stop
2022-04-20 02:27:26.981040 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nimport heapq\nimport itertools\nimport string\nimport queue\nimport copy\nimport collections\nimport time\n\nsys.setrecursionlimit(10000)\n\nclass Node:\n    def __init__(self, idx, parent, children):\n        self.idx = idx\n        self.parent = parent\n        self.children = children\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = [[] for i in range(n)]\n        self.nodes = [Node(i, None, []) for i in range(n)]\n\n    def add_edge(self, u, v):\n        self.edges[u].append(v)\n        self.edges[v].append(u)\n        self.nodes[u].children.append(v)\n        self.nodes[v].children.append(u)\n\n    def dfs(self, root, parent):\n        self.nodes[root].parent = parent\n        for v in self.nodes[root].children:\n            if v != parent:\n                self.dfs(v, root)\n\n    def bfs(self, root):\n        q = queue.Queue()\n        q.put(root)\n        visited = set()\n        visited.add(root)\n        while not q.empty():\n            u = q.get()\n            for v in self.nodes[u].children:\n                if v not in visited:\n                    self.nodes[v].parent = u\n                    visited.add(v)\n                    q.put(v)\n\ndef main():\n    n, m, k = map(int, input().split())\n    g = Graph(n)\n    for i in range(m):\n        u, v = map(int, input().split())\n        g.add_edge(u-1, v-1)\n    g.dfs(0, -1)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n    #print(g.nodes)\n    #print(g.edges)\n"
}
2022-04-20 02:27:26.981181 REASON length
2022-04-20 02:27:26.981195 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, sys.stdin.readline().split())))\n    print(roads)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:27:26.981397 REASON stop
