["\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    c = 1\n    while a[0] < a[-1]:\n        a[0] //= 2\n        a[0] += a[0] % 2\n        a.sort()\n        c += 1\n    if a.count(a[0]) >= k:\n        print(c)\n    else:\n        print(c + 2)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, k = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    a.sort()\n\n    if a[0] == a[-1]:\n        print(0)\n        return\n\n    if k == 1:\n        print(a[-1] - a[0])\n        return\n\n    if k == n:\n        print(a[-1] - a[0])\n        return\n\n    if k == n - 1:\n        print(a[-1] - a[1])\n        return\n\n    if k == n - 2:\n        print(a[-1] - a[2])\n        return\n\n    if k == 2:\n        print(a[-1] - a[1])\n        return\n\n    if k == 3:\n        print(a[-1] - a[2])\n        return\n\n    if k == 4:\n        print(a[-1] - a[3])\n        return\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef solve(n, k, a):\n    count = 0\n    while True:\n        m = max(a)\n        if m == 0:\n            return count\n        if a.count(m) >= k:\n            return count\n        count += 1\n        a = [m // 2 for m in a]\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))", "\n\nimport sys\n\ndef main():\n    # Read input\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Find the minimum number of operations required to obtain at least k equal numbers in the array\n    min_operations = 0\n    for i in range(n - k + 1):\n        min_operations += a[i] - a[i + k - 1]\n\n    # Print the result\n    print(min_operations)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[0] == a[-1]:\n    print(0)\nelse:\n    print(min(a[-1] - a[k - 1], a[k - 1] - a[0]))", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nmin_a = min(a)\nmax_a = max(a)\n\nif min_a == max_a:\n    print(0)\nelse:\n    # binary search for the answer\n    left = 0\n    right = max_a\n    while left < right:\n        mid = (left + right) // 2\n        # count the number of elements that are greater than mid\n        # if it is less than k, then it is possible to make all the elements equal to mid\n        # otherwise, it is not possible\n        if sum(1 for x in a if x > mid) < k:\n            right = mid\n        else:\n            left = mid + 1\n\n    # left is the minimum number of operations required to make all the elements equal to left\n    print(left)", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    while a[0] < a[-1]:\n        a[0] += 1\n        a[-1] -= 1\n        count += 1\n        a.sort()\n    print(count)\n\nif __name__ == '__main__':\n    main()"]