["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    s = [0]\n    for i in range(n):\n        s.append(s[-1] + a[i])\n    d = {}\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[j] - s[i] not in d:\n                d[s[j] - s[i]] = []\n            d[s[j] - s[i]].append((i+1, j))\n    m = 0\n    ans = []\n    for i in d:\n        if len(d[i]) > m:\n            m = len(d[i])\n            ans = d[i]\n    print(len(ans))\n    for i in ans:\n        print(i[0], i[1])\n\nif __name__ == '__main__':\n    main()", "\n\ndef max_blocks(a):\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[i][j - 1] + a[j]\n\n    dp_max = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp_max[i][i] = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dp[i][j] == dp[i][j - 1]:\n                dp_max[i][j] = dp_max[i][j - 1] + 1\n            else:\n                dp_max[i][j] = dp_max[i][j - 1]\n\n    return dp_max[0][n - 1]\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(max_blocks(a))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    p = [0]\n    for i in range(1, n+1):\n        p.append(p[i-1] + a[i-1])\n    d = {}\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            s = p[j] - p[i-1]\n            if s not in d:\n                d[s] = []\n            d[s].append((i, j))\n    m = 0\n    for k in d:\n        if len(d[k]) > m:\n            m = len(d[k])\n    print(m)\n    for k in d:\n        if len(d[k]) == m:\n            for i in d[k]:\n                print(i[0], i[1])\n\nmain()", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(n)\n        for i in range(1, n+1):\n            print(i, i)\n    else:\n        k = 0\n        l = []\n        for i in range(n):\n            if a[i] != s // n:\n                k += 1\n                l.append([i+1, i+1])\n            else:\n                if k != 0:\n                    l[-1][1] = i\n                    k = 0\n        if k != 0:\n            l[-1][1] = n\n        print(len(l))\n        for i in l:\n            print(i[0], i[1])\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n        return\n    else:\n        s = s // n\n\n    ans = []\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == s:\n            j += 1\n        if j > i:\n            ans.append((i+1, j))\n        i = j + 1\n\n    print(len(ans))\n    for a in ans:\n        print(a[0], a[1])\n\nmain()", "\n\ndef find_blocks(arr):\n    n = len(arr)\n    s = [0] * n\n    s[0] = arr[0]\n    for i in range(1, n):\n        s[i] = s[i-1] + arr[i]\n    # print(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        dp[i][i+1] = 1 if arr[i] == arr[i+1] else 2\n    for i in range(n-2):\n        for j in range(i+2, n):\n            if s[j] - s[i] + arr[i] == arr[i]:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] + 1\n            for k in range(i, j):\n                if s[k] - s[i] + arr[i] == s[j] - s[k]:\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n    # print(dp)\n    print(dp[0][n-1])\n    # print_blocks(dp, 0, n-1, arr)\n\ndef print_blocks(dp, i, j, arr):\n    if i == j:\n        print(i+1, i+1)\n        return\n    if i+1 == j:\n        print(i+1, i+1)\n        print(j+1, j+1)\n        return\n    if dp[i][j] == dp[i][j-1]:\n        print_blocks(dp, i, j-1, arr)\n        return\n    for k in range(i, j):\n        if s[k] - s[i] + arr[i] == s[j] - s[k]:\n            if dp[i][j] == dp[i][k] + dp[k+1][j]:\n                print_blocks(dp, i, k, arr)\n                print_blocks(dp, k+1, j, arr)\n                return\n\nif __name__ == '__main__':\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    find_blocks(arr)", "\n\n#Solution\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = [0] * n\ns[0] = a[0]\nfor i in range(1, n):\n    s[i] = s[i - 1] + a[i]\n\nd = {}\nfor i in range(n):\n    for j in range(i, n):\n        if s[j] - s[i] + a[i] in d:\n            d[s[j] - s[i] + a[i]].append((i, j))\n        else:\n            d[s[j] - s[i] + a[i]] = [(i, j)]\n\nans = []\nfor v in d.values():\n    v.sort()\n    for i in range(len(v) - 1):\n        if v[i][1] >= v[i + 1][0]:\n            continue\n        ans.append(v[i])\n    ans.append(v[-1])\n\nprint(len(ans))\nfor i in ans:\n    print(i[0] + 1, i[1] + 1)", "\n\n# Solution 1\nn = int(input())\na = list(map(int, input().split()))\ns = sum(a)\n\nif s % n == 0:\n    print(n)\n    for i in range(n):\n        print(i + 1, i + 1)\nelse:\n    print(n - 1)\n    print(1, n)\n    for i in range(1, n):\n        print(i, i)\n\n# Solution 2\nn = int(input())\na = list(map(int, input().split()))\ns = sum(a)\n\nif s % n == 0:\n    print(n)\n    for i in range(n):\n        print(i + 1, i + 1)\nelse:\n    print(n - 1)\n    print(1, n)\n    for i in range(1, n):\n        print(i, i)"]