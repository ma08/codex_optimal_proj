["\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [0] * (10 ** 9 + 1)\n    for i in a:\n        b[i] += 1\n    c = [0] * (10 ** 9 + 1)\n    for i in range(1, 10 ** 9 + 1):\n        if b[i] > 0:\n            for j in range(i, 10 ** 9 + 1, i):\n                c[j] += b[i]\n    d = [0] * (10 ** 9 + 1)\n    for i in range(1, 10 ** 9 + 1):\n        if c[i] > 1:\n            for j in range(i, 10 ** 9 + 1, i):\n                d[j] += c[i] - 1\n    e = [0] * (10 ** 9 + 1)\n    for i in range(1, 10 ** 9 + 1):\n        if d[i] > 0:\n            for j in range(i, 10 ** 9 + 1, i):\n                e[j] += 1\n    f = [0] * (10 ** 9 + 1)\n    for i in range(1, 10 ** 9 + 1):\n        if e[i] > 0:\n            for j in range(i, 10 ** 9 + 1, i):\n                f[j] += 1\n    g = [0] * (10 ** 9 + 1)\n    for i in range(1, 10 ** 9 + 1):\n        if f[i] > 0:\n            for j in range(i, 10 ** 9 + 1, i):\n                g[j] += 1\n    h = [0] * (10 ** 9 + 1)\n    for i in range(1, 10 ** 9 + 1):\n        if g[i] > 0:\n            for j in range(i, 10 ** 9 + 1, i):\n                h[j] += 1\n    ans = 0\n    for i in a:\n        if h[i] == 0:\n            ans += 1\n    print(ans)\n\nmain()", "\n\ndef isPowerOfTwo(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\ndef isGood(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i != j:\n                if isPowerOfTwo(arr[i] + arr[j]):\n                    return True\n    return False\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if isGood(arr):\n        print(0)\n    else:\n        for i in range(len(arr)):\n            temp = arr[:i] + arr[i+1:]\n            if isGood(temp):\n                print(1)\n                return\n        print(len(arr))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef is_power_of_two(n):\n    return n != 0 and ((n & (n - 1)) == 0)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j and is_power_of_two(a[i] + a[j]):\n                break\n        else:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\n#-----Solution-----\n\ndef is_power_of_two(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\ndef is_good(a):\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i != j:\n                if is_power_of_two(a[i] + a[j]):\n                    return True\n    return False\n\ndef min_removed(a):\n    if is_good(a):\n        return 0\n    else:\n        for i in range(len(a)):\n            if is_good(a[:i] + a[i+1:]):\n                return 1\n        return len(a)\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(min_removed(a))", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = 0\n    for i in range(n):\n        if a[i] == 0:\n            cnt += 1\n            continue\n        for j in range(i+1, n):\n            if a[j] == 0:\n                continue\n            if (a[i] + a[j]) & (a[i] + a[j] - 1) == 0:\n                a[j] = 0\n                break\n        else:\n            cnt += 1\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef is_power_of_two(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\ndef is_good(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j and is_power_of_two(nums[i] + nums[j]):\n                return True\n    return False\n\ndef get_min_removals(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1\n    if is_good(nums):\n        return 0\n    else:\n        min_removals = len(nums)\n        for i in range(len(nums)):\n            min_removals = min(min_removals, 1 + get_min_removals(nums[:i] + nums[i+1:]))\n        return min_removals\n\nn = int(input())\nnums = [int(x) for x in input().split()]\nprint(get_min_removals(nums))"]