["\n\nfrom math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = lcm(a[0], a[1])\n    min_lcm_index = [0, 1]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_lcm_index = [i, j]\n    print(min_lcm_index[0] + 1, min_lcm_index[1] + 1)\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = float('inf')\n    min_i = -1\n    min_j = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i\n                min_j = j\n    print(min_i + 1, min_j + 1)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    ans = (1, 2)\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if lcm(a[i - 1], a[j - 1]) < lcm(a[ans[0] - 1], a[ans[1] - 1]):\n                ans = (i, j)\n    print(ans[0], ans[1])\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = [int(x) for x in sys.stdin.readline().split()]\n    min_lcm = lcm(a[0], a[1])\n    min_i = 1\n    min_j = 2\n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i+1\n                min_j = j+1\n    print(min_i, min_j)\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = lcm(a[0], a[1])\n    min_i = 1\n    min_j = 2\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    m = a[0]\n    for i in range(1, len(a)):\n        if lcm(m, a[i]) < lcm(m, a[i-1]):\n            m = a[i]\n    print(1, a.index(m) + 1)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = lcm(a[0], a[1])\n    min_i = 1\n    min_j = 2\n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = sys.maxsize\n    min_i = min_j = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == \"__main__\":\n    main()"]