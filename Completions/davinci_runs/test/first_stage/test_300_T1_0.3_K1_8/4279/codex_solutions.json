["\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k = int(sys.stdin.readline())\n        print(get_digit(k))\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n\n    # get the block number\n    block_num = 1\n    block_start = 1\n    block_end = 1\n    while block_end < k:\n        block_num += 1\n        block_start = block_end + 1\n        block_end = block_start + block_num - 1\n\n    # get the digit\n    digit_pos = k - block_start\n    digit = block_num - digit_pos\n\n    return digit\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    n = 1\n    while True:\n        if k <= n*(n+1)//2:\n            break\n        n += 1\n    k -= (n-1)*n//2\n    return str(n)[k-1]\n\nif __name__ == \"__main__\":\n    main()", "\n\nq = int(input())\n\nfor i in range(q):\n    k = int(input())\n    block = 1\n    while k > block:\n        k -= block\n        block += 1\n    print(str(block)[k-1])", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    # find the block that contains k\n    block = 0\n    while k > block:\n        block += 1\n        k -= block\n    # find the number in the block that contains k\n    number = block - k\n    # find the digit of the number\n    digit = number % 10\n    return digit\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(get_digit(k))\n\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Find the block that contains k\n    block_start = 1\n    block_end = 1\n    block_length = 1\n    while block_end < k:\n        block_start = block_end + 1\n        block_length += 1\n        block_end = block_start + block_length * block_length - 1\n    # Find the number that contains k\n    number_start = block_start\n    number_end = block_start\n    while number_end < k:\n        number_start = number_end + 1\n        number_end += len(str(block_length))\n    # Find the digit in the number\n    number = number_start + (k - number_start) // len(str(block_length))\n    digit_index = (k - number_start) % len(str(block_length))\n    return int(str(number)[digit_index])\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom math import ceil, log10\n\ndef get_digit(k):\n    \"\"\"\n    Return the digit at position k in the sequence.\n    \"\"\"\n    # The first block is of length 1, the second is of length 2, etc.\n    # The length of the nth block is n.\n    # The length of the first n blocks is n(n+1)/2.\n    # Find the block that k is in.\n    # The length of the first n blocks is n(n+1)/2.\n    # Find the block that k is in.\n    # Find the number in the block that k is in.\n    # Find the digit in that number that k is in.\n    block = int(ceil((-1 + (1 + 8*k)**0.5)/2))\n    num_in_block = k - block*(block-1)/2\n    num = block - num_in_block + 1\n    digit = int(ceil(log10(num))) - 1\n    return int(str(num)[digit])\n\nq = int(raw_input())\nfor _ in range(q):\n    k = int(raw_input())\n    print get_digit(k)", "\n\n# Solution\n\ndef digit(k):\n    \"\"\"\n    Returns the digit at the k-th position of the sequence.\n    \"\"\"\n    # Find the block of the sequence where k is located\n    block = 1\n    while k > block:\n        k -= block\n        block += 1\n    # Find the number where k is located\n    number = 1\n    while k > len(str(number)):\n        k -= len(str(number))\n        number += 1\n    # Find the digit of the number where k is located\n    return int(str(number)[k-1])\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(digit(k))"]