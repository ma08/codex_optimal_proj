2022-04-20 03:18:32.771858 """
You are given two arrays $a$ and $b$, each contains $n$ integers.

You want to create a new array $c$ as follows: choose some real (i.e. not necessarily integer) number $d$, and then for every $i \in [1, n]$ let $c_i := d \cdot a_i + b_i$.

Your goal is to maximize the number of zeroes in array $c$. What is the largest possible answer, if you choose $d$ optimally?


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in both arrays.

The second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($-10^9 \le a_i \le 10^9$).

The third line contains $n$ integers $b_1$, $b_2$, ..., $b_n$ ($-10^9 \le b_i \le 10^9$).


-----Output-----

Print one integer — the maximum number of zeroes in array $c$, if you choose $d$ optimally.


-----Examples-----
Input
5
1 2 3 4 5
2 4 7 11 3

Output
2

Input
3
13 37 39
1 2 3

Output
2

Input
4
0 0 0 0
1 2 3 4

Output
0

Input
3
1 2 -1
-6 -12 6

Output
3



-----Note-----

In the first example, we may choose $d = -2$.

In the second example, we may choose $d = -\frac{1}{13}$.

In the third example, we cannot obtain any zero in array $c$, no matter which $d$ we choose.

In the fourth example, we may choose $d = 6$.
"""
2022-04-20 03:18:32.771880 --------------------------
2022-04-20 03:18:32.772027 using api key gabby
2022-04-20 03:20:01.336757 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n\n    # d = -b_i / a_i\n    d = []\n    for i in range(n):\n        if a[i] != 0:\n            d.append(-b[i] / a[i])\n        else:\n            d.append(0)\n\n    d.sort()\n\n    # print(d)\n\n    # count the number of zeros\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n        else:\n            break\n\n    # print(count)\n\n    # find the maximum number of zeros\n    ans = count\n    for i in range(n):\n        if d[i] == 0:\n            continue\n        else:\n            while i < n and d[i] == d[i + 1]:\n                i += 1\n            ans = max(ans, count + i + 1)\n            count += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(a, b):\n    n = len(a)\n    cnt = 0\n    for i in range(n):\n        if a[i] == 0:\n            if b[i] == 0:\n                cnt += 1\n            continue\n        if b[i] % a[i] == 0:\n            cnt += 1\n    return cnt\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    print(solve(a, b))"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# a = [1, 2, 3, 4, 5]\n# b = [2, 4, 7, 11, 3]\n\n# a = [13, 37, 39]\n# b = [1, 2, 3]\n\n# a = [0, 0, 0, 0]\n# b = [1, 2, 3, 4]\n\n# a = [1, 2, -1]\n# b = [-6, -12, 6]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [5, 4, 3, 2, 1]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 1, 1, 1, 1]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = a[i] * b[i]\n    count = 0\n    for i in range(n):\n        if c[i] == 0:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# a = [1, 2, 3, 4, 5]\n# b = [2, 4, 7, 11, 3]\n\n# a = [13, 37, 39]\n# b = [1, 2, 3]\n\n# a = [0, 0, 0, 0]\n# b = [1, 2, 3, 4]\n\n# a = [1, 2, -1]\n# b = [-6, -12, 6]\n\n# a
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    zeroes = 0\n    for i in range(n):\n        if a[i] == 0 and b[i] == 0:\n            zeroes += 1\n    print(zeroes)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nzeroes = 0\n\nfor i in range(n):\n    if a[i] == 0 and b[i] == 0:\n        zeroes += 1\n\nif zeroes == n:\n    print(n)\nelse:\n    print(zeroes)"
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# a = [1, 2, 3, 4, 5]\n# b = [2, 4, 7, 11, 3]\n# n = 5\n\n# a = [13, 37, 39]\n# b = [1, 2, 3]\n# n = 3\n\n# a = [0, 0, 0, 0]\n# b = [1, 2, 3, 4]\n# n = 4\n\n# a = [1, 2, -1]\n# b = [-6, -12, 6]\n# n = 3\n\n# a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 10"
    }
  ],
  "created": 1650424712,
  "id": "cmpl-4yv9Mgi1RxqqPCWxzI6GTl3l7DB7I",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:20:01.337389 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n\n    # d = -b_i / a_i\n    d = []\n    for i in range(n):\n        if a[i] != 0:\n            d.append(-b[i] / a[i])\n        else:\n            d.append(0)\n\n    d.sort()\n\n    # print(d)\n\n    # count the number of zeros\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n        else:\n            break\n\n    # print(count)\n\n    # find the maximum number of zeros\n    ans = count\n    for i in range(n):\n        if d[i] == 0:\n            continue\n        else:\n            while i < n and d[i] == d[i + 1]:\n                i += 1\n            ans = max(ans, count + i + 1)\n            count += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:20:01.337495 REASON stop
2022-04-20 03:20:01.338447 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(a, b):\n    n = len(a)\n    cnt = 0\n    for i in range(n):\n        if a[i] == 0:\n            if b[i] == 0:\n                cnt += 1\n            continue\n        if b[i] % a[i] == 0:\n            cnt += 1\n    return cnt\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    print(solve(a, b))"
}
2022-04-20 03:20:01.338556 REASON stop
2022-04-20 03:20:01.339190 2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# a = [1, 2, 3, 4, 5]\n# b = [2, 4, 7, 11, 3]\n\n# a = [13, 37, 39]\n# b = [1, 2, 3]\n\n# a = [0, 0, 0, 0]\n# b = [1, 2, 3, 4]\n\n# a = [1, 2, -1]\n# b = [-6, -12, 6]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [5, 4, 3, 2, 1]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 1, 1, 1, 1]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5]\n\n# a = [1, 2, 3, 4, 5]\n# b = [1, 2, 3, 4, 5"
}
2022-04-20 03:20:01.339300 REASON length
2022-04-20 03:20:01.339313 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = a[i] * b[i]\n    count = 0\n    for i in range(n):\n        if c[i] == 0:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:20:01.339372 REASON stop
2022-04-20 03:20:01.361737 4 {
  "finish_reason": "length",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# a = [1, 2, 3, 4, 5]\n# b = [2, 4, 7, 11, 3]\n\n# a = [13, 37, 39]\n# b = [1, 2, 3]\n\n# a = [0, 0, 0, 0]\n# b = [1, 2, 3, 4]\n\n# a = [1, 2, -1]\n# b = [-6, -12, 6]\n\n# a
}
2022-04-20 03:20:01.361980 REASON length
2022-04-20 03:20:01.362000 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    zeroes = 0\n    for i in range(n):\n        if a[i] == 0 and b[i] == 0:\n            zeroes += 1\n    print(zeroes)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 03:20:01.362069 REASON stop
2022-04-20 03:20:01.375136 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nzeroes = 0\n\nfor i in range(n):\n    if a[i] == 0 and b[i] == 0:\n        zeroes += 1\n\nif zeroes == n:\n    print(n)\nelse:\n    print(zeroes)"
}
2022-04-20 03:20:01.375302 REASON stop
2022-04-20 03:20:01.376039 7 {
  "finish_reason": "length",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# a = [1, 2, 3, 4, 5]\n# b = [2, 4, 7, 11, 3]\n# n = 5\n\n# a = [13, 37, 39]\n# b = [1, 2, 3]\n# n = 3\n\n# a = [0, 0, 0, 0]\n# b = [1, 2, 3, 4]\n# n = 4\n\n# a = [1, 2, -1]\n# b = [-6, -12, 6]\n# n = 3\n\n# a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 10"
}
2022-04-20 03:20:01.376344 REASON length
