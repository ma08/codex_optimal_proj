["\n\nn = int(input())\n\nsegments = []\nfor _ in range(n):\n    segments.append([int(x) for x in input().split()])\n\nsegments.sort()\n\n# print(segments)\n\n# find the max intersection\nmax_intersection = 0\nfor i in range(n-1):\n    intersection = min(segments[i+1][1], segments[i][1]) - max(segments[i+1][0], segments[i][0])\n    if intersection > max_intersection:\n        max_intersection = intersection\n\n# print(max_intersection)\n\n# find the max intersection after removing one segment\nmax_intersection_after_removing_one = 0\nfor i in range(n):\n    # remove segment i\n    segments_without_i = segments[:i] + segments[i+1:]\n    # print(segments_without_i)\n\n    # find the max intersection\n    max_intersection = 0\n    for i in range(n-2):\n        intersection = min(segments_without_i[i+1][1], segments_without_i[i][1]) - max(segments_without_i[i+1][0], segments_without_i[i][0])\n        if intersection > max_intersection:\n            max_intersection = intersection\n\n    if max_intersection > max_intersection_after_removing_one:\n        max_intersection_after_removing_one = max_intersection\n\nprint(max_intersection_after_removing_one)", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    l = []\n    r = []\n    for i in range(n):\n        l.append(int(input()))\n        r.append(int(input()))\n    l.sort()\n    r.sort()\n    print(max(r[0]-l[1],r[1]-l[0],r[n-2]-l[n-1],r[n-1]-l[n-2]))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    lines = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    lines.sort()\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, lines[1][1] - lines[0][0])\n        elif i == n - 1:\n            max_len = max(max_len, lines[-1][1] - lines[-2][0])\n        else:\n            max_len = max(max_len, lines[i + 1][1] - lines[i - 1][0])\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in input().split()])\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(1, n):\n        if segments[i][0] <= segments[i-1][1]:\n            max_len = max(max_len, segments[i][1] - segments[i-1][0])\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nsegments.sort(key=lambda x: x[0])\n\nmax_length = 0\n\nfor i in range(n):\n    if i == 0:\n        length = segments[i+1][1] - segments[i+1][0]\n    elif i == n-1:\n        length = segments[i-1][1] - segments[i-1][0]\n    else:\n        length = max(segments[i-1][1] - segments[i-1][0], segments[i+1][1] - segments[i+1][0])\n    if length > max_length:\n        max_length = length\n\nprint(max_length)", "\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in input().split()])\n    segments.sort(key=lambda x: x[0])\n    max_intersection = 0\n    for i in range(n):\n        if i == 0:\n            max_intersection = max(max_intersection, segments[i+1][0] - segments[i][1])\n        elif i == n-1:\n            max_intersection = max(max_intersection, segments[i][0] - segments[i-1][1])\n        else:\n            max_intersection = max(max_intersection, segments[i+1][0] - segments[i-1][1])\n    print(max_intersection)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    segs = []\n    for i in range(n):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort()\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            if segs[i][0] < segs[i + 1][0]:\n                max_len = max(max_len, segs[i + 1][0] - segs[i][0])\n        elif i == n - 1:\n            if segs[i][1] > segs[i - 1][1]:\n                max_len = max(max_len, segs[i][1] - segs[i - 1][1])\n        else:\n            if segs[i][1] > segs[i - 1][1] and segs[i][0] < segs[i + 1][0]:\n                max_len = max(max_len, segs[i + 1][0] - segs[i][0])\n                max_len = max(max_len, segs[i][1] - segs[i - 1][1])\n            elif segs[i][1] > segs[i - 1][1]:\n                max_len = max(max_len, segs[i][1] - segs[i - 1][1])\n            elif segs[i][0] < segs[i + 1][0]:\n                max_len = max(max_len, segs[i + 1][0] - segs[i][0])\n\n    print(max_len)\n\n\nif __name__ == '__main__':\n    main()", "\n\n# from math import inf\n\n\ndef solve(n, segments):\n    # print(segments)\n    if n == 2:\n        return max(0, segments[1][0] - segments[0][1])\n    max_length = 0\n    for i in range(n):\n        # print(i)\n        # print(segments)\n        # print(segments[:i] + segments[i + 1:])\n        # print(segments[:i] + segments[i + 1:])\n        length = solve(n - 1, segments[:i] + segments[i + 1:])\n        max_length = max(max_length, length)\n    return max_length\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    print(solve(n, segments))"]