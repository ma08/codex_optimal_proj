2022-04-20 03:50:58.330922 """
There are N points in a D-dimensional space.
The coordinates of the i-th point are (X_{i1}, X_{i2}, ..., X_{iD}).
The distance between two points with coordinates (y_1, y_2, ..., y_D) and (z_1, z_2, ..., z_D) is \sqrt{(y_1 - z_1)^2 + (y_2 - z_2)^2 + ... + (y_D - z_D)^2}.
How many pairs (i, j) (i < j) are there such that the distance between the i-th point and the j-th point is an integer?

-----Constraints-----
 - All values in input are integers.
 - 2 \leq N \leq 10
 - 1 \leq D \leq 10
 - -20 \leq X_{ij} \leq 20
 - No two given points have the same coordinates. That is, if i \neq j, there exists k such that X_{ik} \neq X_{jk}.

-----Input-----
Input is given from Standard Input in the following format:
N D
X_{11} X_{12} ... X_{1D}
X_{21} X_{22} ... X_{2D}
\vdots
X_{N1} X_{N2} ... X_{ND}

-----Output-----
Print the number of pairs (i, j) (i < j) such that the distance between the i-th point and the j-th point is an integer.

-----Sample Input-----
3 2
1 2
5 5
-2 8

-----Sample Output-----
1

The number of pairs with an integer distance is one, as follows:
 - The distance between the first point and the second point is \sqrt{|1-5|^2 + |2-5|^2} = 5, which is an integer.
 - The distance between the second point and the third point is \sqrt{|5-(-2)|^2 + |5-8|^2} = \sqrt{58}, which is not an integer.
 - The distance between the third point and the first point is \sqrt{|-2-1|^2+|8-2|^2} = 3\sqrt{5}, which is not an integer.
"""
2022-04-20 03:50:58.330949 --------------------------
2022-04-20 03:50:58.331098 using api key sourya
2022-04-20 03:51:08.540801 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# Get input\nN, D = map(int, input().split())\npoints = []\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\n# Calculate the distance between each pair of points\ndistances = []\nfor i in range(N):\n    for j in range(i+1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k]-points[j][k])**2\n        distances.append(distance)\n\n# Count the number of pairs with an integer distance\ncount = 0\nfor distance in distances:\n    if distance**0.5 == int(distance**0.5):\n        count += 1\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN, D = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(N)]\n\ndef distance(p1, p2):\n    return sum([(p1[i] - p2[i])**2 for i in range(D)])**0.5\n\ncnt = 0\nfor i in range(N-1):\n    for j in range(i+1, N):\n        if distance(points[i], points[j]) % 1 == 0:\n            cnt += 1\nprint(cnt)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, d = map(int, input().split())\npoints = []\nfor i in range(n):\n    points.append(list(map(int, input().split())))\n\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        dist = 0\n        for k in range(d):\n            dist += (points[i][k] - points[j][k])**2\n        dist = dist**0.5\n        if dist == int(dist):\n            cnt += 1\nprint(cnt)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = math.sqrt(sum((points[i][k] - points[j][k])**2 for k in range(d)))\n            if dist.is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport math\n\nn, d = map(int, input().split())\npoints = []\nfor _ in range(n):\n    points.append([int(x) for x in input().split()])\n\ndistances = []\nfor i in range(n):\n    for j in range(i+1, n):\n        distance = 0\n        for k in range(d):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distances.append(distance)\n\ncount = 0\nfor distance in distances:\n    if math.sqrt(distance) == int(math.sqrt(distance)):\n        count += 1\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(N)]\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, input().split())))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = 0\n            for k in range(d):\n                dist += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(dist).is_integer():\n                count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += math.pow(points[i][k] - points[j][k], 2)\n            if math.sqrt(distance) == math.floor(math.sqrt(distance)):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650426658,
  "id": "cmpl-4yvek6fgOQk1WfsudC0WzKh4sDgc8",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 03:51:08.541210 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# Get input\nN, D = map(int, input().split())\npoints = []\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\n# Calculate the distance between each pair of points\ndistances = []\nfor i in range(N):\n    for j in range(i+1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k]-points[j][k])**2\n        distances.append(distance)\n\n# Count the number of pairs with an integer distance\ncount = 0\nfor distance in distances:\n    if distance**0.5 == int(distance**0.5):\n        count += 1\nprint(count)"
}
2022-04-20 03:51:08.541285 REASON stop
2022-04-20 03:51:08.542524 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN, D = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(N)]\n\ndef distance(p1, p2):\n    return sum([(p1[i] - p2[i])**2 for i in range(D)])**0.5\n\ncnt = 0\nfor i in range(N-1):\n    for j in range(i+1, N):\n        if distance(points[i], points[j]) % 1 == 0:\n            cnt += 1\nprint(cnt)"
}
2022-04-20 03:51:08.542616 REASON stop
2022-04-20 03:51:08.543343 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, d = map(int, input().split())\npoints = []\nfor i in range(n):\n    points.append(list(map(int, input().split())))\n\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        dist = 0\n        for k in range(d):\n            dist += (points[i][k] - points[j][k])**2\n        dist = dist**0.5\n        if dist == int(dist):\n            cnt += 1\nprint(cnt)"
}
2022-04-20 03:51:08.543435 REASON stop
2022-04-20 03:51:08.561966 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = math.sqrt(sum((points[i][k] - points[j][k])**2 for k in range(d)))\n            if dist.is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:51:08.562197 REASON stop
2022-04-20 03:51:08.562925 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport math\n\nn, d = map(int, input().split())\npoints = []\nfor _ in range(n):\n    points.append([int(x) for x in input().split()])\n\ndistances = []\nfor i in range(n):\n    for j in range(i+1, n):\n        distance = 0\n        for k in range(d):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distances.append(distance)\n\ncount = 0\nfor distance in distances:\n    if math.sqrt(distance) == int(math.sqrt(distance)):\n        count += 1\n\nprint(count)"
}
2022-04-20 03:51:08.563023 REASON stop
2022-04-20 03:51:08.576074 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(N)]\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:51:08.576234 REASON stop
2022-04-20 03:51:08.577156 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, input().split())))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = 0\n            for k in range(d):\n                dist += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(dist).is_integer():\n                count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:51:08.577266 REASON stop
2022-04-20 03:51:08.578358 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += math.pow(points[i][k] - points[j][k], 2)\n            if math.sqrt(distance) == math.floor(math.sqrt(distance)):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 03:51:08.578596 REASON stop
