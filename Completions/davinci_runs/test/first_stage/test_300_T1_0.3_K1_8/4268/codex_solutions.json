["\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = math.sqrt(sum((points[i][k] - points[j][k])**2 for k in range(d)))\n            if dist.is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\nn, d = map(int, input().split())\npoints = []\nfor i in range(n):\n    points.append(list(map(int, input().split())))\n\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        dist = 0\n        for k in range(d):\n            dist += (points[i][k] - points[j][k])**2\n        dist = dist**0.5\n        if dist == int(dist):\n            cnt += 1\nprint(cnt)", "\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += math.pow(points[i][k] - points[j][k], 2)\n            if math.sqrt(distance) == math.floor(math.sqrt(distance)):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    points = [list(map(int, input().split())) for _ in range(N)]\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\n# Get input\nN, D = map(int, input().split())\npoints = []\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\n# Calculate the distance between each pair of points\ndistances = []\nfor i in range(N):\n    for j in range(i+1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k]-points[j][k])**2\n        distances.append(distance)\n\n# Count the number of pairs with an integer distance\ncount = 0\nfor distance in distances:\n    if distance**0.5 == int(distance**0.5):\n        count += 1\nprint(count)", "\n\nimport math\n\nn, d = map(int, input().split())\npoints = []\nfor _ in range(n):\n    points.append([int(x) for x in input().split()])\n\ndistances = []\nfor i in range(n):\n    for j in range(i+1, n):\n        distance = 0\n        for k in range(d):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distances.append(distance)\n\ncount = 0\nfor distance in distances:\n    if math.sqrt(distance) == int(math.sqrt(distance)):\n        count += 1\n\nprint(count)", "\n\nN, D = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(N)]\n\ndef distance(p1, p2):\n    return sum([(p1[i] - p2[i])**2 for i in range(D)])**0.5\n\ncnt = 0\nfor i in range(N-1):\n    for j in range(i+1, N):\n        if distance(points[i], points[j]) % 1 == 0:\n            cnt += 1\nprint(cnt)", "\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, input().split())))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = 0\n            for k in range(d):\n                dist += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(dist).is_integer():\n                count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()"]