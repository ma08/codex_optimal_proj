2022-04-20 04:06:16.050952 """
There are N apple trees in a row. People say that one of them will bear golden apples.
We want to deploy some number of inspectors so that each of these trees will be inspected.
Each inspector will be deployed under one of the trees. For convenience, we will assign numbers from 1 through N to the trees. An inspector deployed under the i-th tree (1 \leq i \leq N) will inspect the trees with numbers between i-D and i+D (inclusive).
Find the minimum number of inspectors that we need to deploy to achieve the objective.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 20
 - 1 \leq D \leq 20

-----Input-----
Input is given from Standard Input in the following format:
N D

-----Output-----
Print the minimum number of inspectors that we need to deploy to achieve the objective.

-----Sample Input-----
6 2

-----Sample Output-----
2

We can achieve the objective by, for example, placing an inspector under Tree 3 and Tree 4.
"""
2022-04-20 04:06:16.050970 --------------------------
2022-04-20 04:06:16.051119 using api key gabby
2022-04-20 04:06:16.173293 in retry 8 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 04:06:21.178699 """
There are N apple trees in a row. People say that one of them will bear golden apples.
We want to deploy some number of inspectors so that each of these trees will be inspected.
Each inspector will be deployed under one of the trees. For convenience, we will assign numbers from 1 through N to the trees. An inspector deployed under the i-th tree (1 \leq i \leq N) will inspect the trees with numbers between i-D and i+D (inclusive).
Find the minimum number of inspectors that we need to deploy to achieve the objective.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 20
 - 1 \leq D \leq 20

-----Input-----
Input is given from Standard Input in the following format:
N D

-----Output-----
Print the minimum number of inspectors that we need to deploy to achieve the objective.

-----Sample Input-----
6 2

-----Sample Output-----
2

We can achieve the objective by, for example, placing an inspector under Tree 3 and Tree 4.
"""
2022-04-20 04:06:21.178743 --------------------------
2022-04-20 04:06:21.178908 using api key sourya
2022-04-20 04:06:36.294066 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN, D = map(int, input().split())\n\n# \u4e00\u756a\u5de6\u306e\u6728\u3092\u57fa\u6e96\u306b\u3001\u305d\u3053\u304b\u3089D\u500b\u305a\u3064\u53f3\u306b\u5411\u304b\u3063\u3066\u3044\u304f\n# \u305f\u3060\u3057\u3001\u6700\u5f8c\u306e\u6728\u306f\u53f3\u306b\u5411\u304b\u3063\u3066\u3044\u304f\u3068\u6700\u5f8c\u306e\u6728\u3092\u8d85\u3048\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u5de6\u306b\u5411\u304b\u3063\u3066\u3044\u304f\n# \u3053\u308c\u3092\u7e70\u308a\u8fd4\u3059\n\n# \u57fa\u6e96\u306e\u6728\u30921\u304b\u3089N\u307e\u3067\u9806\u306b\u8a66\u3059\nfor i in range(1, N+1):\n    # \u57fa\u6e96\u306e\u6728\u304b\u3089D\u500b\u305a\u3064\u53f3\u306b\u5411\u304b\u3063\u3066\u3044\u304f\n    for j in range(i, i+D+1):\n        # \u6700\u5f8c\u306e\u6728\u3092\u8d85\u3048\u3066\u3057\u307e\u3063\u305f\u3089\u3001\u5de6\u306b\u5411\u304b\u3063\u3066\u3044\u304f\n        if j > N:\n            for k in range(i-1, i-D-1, -1):\n                print(k)\n            break\n        print(j)\n    else:\n        continue\n    break"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN, D = map(int, input().split())\n\nif N % (2 * D + 1) == 0:\n    print(N // (2 * D + 1))\nelse:\n    print(N // (2 * D + 1) + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\ninspectors = 0\n\nfor i in range(1, N + 1):\n    if i + D <= N:\n        inspectors += 1\n    else:\n        break\n\nprint(inspectors)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, D = map(int, input().split())\n    print(N // (2*D+1) + 1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# N: number of trees\n# D: distance\n# return: minimum number of inspectors\ndef min_inspectors(N, D):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    return 0\n\nN, D = map(int, raw_input().split())\nprint min_inspectors(N, D)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# N, D = 6, 2\nN, D = map(int, input().split())\n\n# \u5b9f\u969b\u306b\u306f\u3001D\u304c\u5927\u304d\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u304c\u591a\u304f\u306a\u308b\n# D\u304c\u5c0f\u3055\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u304c\u5c11\u306a\u304f\u306a\u308b\n# \u306a\u306e\u3067\u3001D\u304c\u5c0f\u3055\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u3092\u914d\u7f6e\u3059\u308b\n# D\u304c\u5c0f\u3055\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u304c\u5c11\u306a\u304f\u306a\u308b\n# \u306a\u306e\u3067\u3001D\u304c\u5c0f\u3055\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u3092\u914d\u7f6e\u3059\u308b\n\n# \u5168\u4f53\u3092D\u3067\u5272\u3063\u305f\u5546\u304c\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u306e\u6570\nprint(N // D)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, d = map(int, sys.stdin.readline().split())\n    print(n // (2 * d + 1) + (n % (2 * d + 1) != 0))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nn, d = map(int, input().split())\n\nprint(n // (2 * d + 1))"
    }
  ],
  "created": 1650427581,
  "id": "cmpl-4yvtdTXPqF4yVjUVhx8B9jhgxcnHP",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 04:06:36.294385 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN, D = map(int, input().split())\n\n# \u4e00\u756a\u5de6\u306e\u6728\u3092\u57fa\u6e96\u306b\u3001\u305d\u3053\u304b\u3089D\u500b\u305a\u3064\u53f3\u306b\u5411\u304b\u3063\u3066\u3044\u304f\n# \u305f\u3060\u3057\u3001\u6700\u5f8c\u306e\u6728\u306f\u53f3\u306b\u5411\u304b\u3063\u3066\u3044\u304f\u3068\u6700\u5f8c\u306e\u6728\u3092\u8d85\u3048\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u5de6\u306b\u5411\u304b\u3063\u3066\u3044\u304f\n# \u3053\u308c\u3092\u7e70\u308a\u8fd4\u3059\n\n# \u57fa\u6e96\u306e\u6728\u30921\u304b\u3089N\u307e\u3067\u9806\u306b\u8a66\u3059\nfor i in range(1, N+1):\n    # \u57fa\u6e96\u306e\u6728\u304b\u3089D\u500b\u305a\u3064\u53f3\u306b\u5411\u304b\u3063\u3066\u3044\u304f\n    for j in range(i, i+D+1):\n        # \u6700\u5f8c\u306e\u6728\u3092\u8d85\u3048\u3066\u3057\u307e\u3063\u305f\u3089\u3001\u5de6\u306b\u5411\u304b\u3063\u3066\u3044\u304f\n        if j > N:\n            for k in range(i-1, i-D-1, -1):\n                print(k)\n            break\n        print(j)\n    else:\n        continue\n    break"
}
2022-04-20 04:06:36.294426 REASON stop
2022-04-20 04:06:36.296549 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN, D = map(int, input().split())\n\nif N % (2 * D + 1) == 0:\n    print(N // (2 * D + 1))\nelse:\n    print(N // (2 * D + 1) + 1)"
}
2022-04-20 04:06:36.296628 REASON stop
2022-04-20 04:06:36.297145 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\ninspectors = 0\n\nfor i in range(1, N + 1):\n    if i + D <= N:\n        inspectors += 1\n    else:\n        break\n\nprint(inspectors)"
}
2022-04-20 04:06:36.297209 REASON stop
2022-04-20 04:06:36.315208 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, D = map(int, input().split())\n    print(N // (2*D+1) + 1)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 04:06:36.315375 REASON stop
2022-04-20 04:06:36.316412 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# N: number of trees\n# D: distance\n# return: minimum number of inspectors\ndef min_inspectors(N, D):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    return 0\n\nN, D = map(int, raw_input().split())\nprint min_inspectors(N, D)"
}
2022-04-20 04:06:36.316513 REASON stop
2022-04-20 04:06:36.317440 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# N, D = 6, 2\nN, D = map(int, input().split())\n\n# \u5b9f\u969b\u306b\u306f\u3001D\u304c\u5927\u304d\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u304c\u591a\u304f\u306a\u308b\n# D\u304c\u5c0f\u3055\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u304c\u5c11\u306a\u304f\u306a\u308b\n# \u306a\u306e\u3067\u3001D\u304c\u5c0f\u3055\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u3092\u914d\u7f6e\u3059\u308b\n# D\u304c\u5c0f\u3055\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u304c\u5c11\u306a\u304f\u306a\u308b\n# \u306a\u306e\u3067\u3001D\u304c\u5c0f\u3055\u3044\u307b\u3069\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u3092\u914d\u7f6e\u3059\u308b\n\n# \u5168\u4f53\u3092D\u3067\u5272\u3063\u305f\u5546\u304c\u3001\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u30fc\u306e\u6570\nprint(N // D)"
}
2022-04-20 04:06:36.317539 REASON stop
2022-04-20 04:06:36.318350 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, d = map(int, sys.stdin.readline().split())\n    print(n // (2 * d + 1) + (n % (2 * d + 1) != 0))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 04:06:36.318531 REASON stop
2022-04-20 04:06:36.319187 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nn, d = map(int, input().split())\n\nprint(n // (2 * d + 1))"
}
2022-04-20 04:06:36.319246 REASON stop
