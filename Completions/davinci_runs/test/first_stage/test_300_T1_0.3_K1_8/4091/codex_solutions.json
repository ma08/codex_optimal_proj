["\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * (n + 1) for _ in range(k + 1)]\n\nfor i in range(1, k + 1):\n    for j in range(1, n + 1):\n        if i == 1:\n            dp[i][j] = sum(a[:j])\n        else:\n            for l in range(j):\n                dp[i][j] = max(dp[i][j], dp[i - 1][l] + sum(a[l:j]))\n\nprint(dp[k][n])\n\ni = k\nj = n\nwhile i > 0:\n    for l in range(j):\n        if dp[i][j] == dp[i - 1][l] + sum(a[l:j]):\n            print(j - l, end=' ')\n            i -= 1\n            j = l\n            break", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * (k + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i < j:\n                break\n            if i == j:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1])\n\n    print(dp[n][k])\n    ans = []\n    i = n\n    j = k\n    while i > 0 and j > 0:\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            ans.append(i)\n            j -= 1\n            i -= 1\n    ans = ans[::-1]\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(i, n + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] + a[j - 1])\n    print(dp[k][n])\n    i = k\n    j = n\n    ans = []\n    while i > 0:\n        if dp[i][j] == dp[i - 1][j - 1] + a[j - 1]:\n            ans.append(1)\n            i -= 1\n            j -= 1\n        else:\n            ans[-1] += 1\n            j -= 1\n    print(*ans[::-1])\n\nif __name__ == '__main__':\n    main()", "\n\ndef max_profit(n, k, a):\n    #dp[i][j] = max profit when solving i problems in j days\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i < j:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n    return dp[n][k]\n\n\ndef max_profit_days(n, k, a):\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i < j:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n    days = []\n    i, j = n, k\n    while j > 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        else:\n            days.append(i)\n            i -= 1\n            j -= 1\n    return days[::-1]\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(max_profit(n, k, a))\n    print(*max_profit_days(n, k, a))", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for first i problems and j days\ndp = [[0] * (k + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # if we are on the last day, we just take the max of the first i problems\n        if j == k:\n            dp[i][j] = max(dp[i - 1][j], a[i - 1])\n        else:\n            # otherwise, we take the max of the first i problems and the max of the previous day\n            # plus the max of the first i problems minus the max of the first i - j problems\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1] + max(a[i - 1], a[i - 1] - dp[i - j][j]))\n\nprint(dp[n][k])\n\n# reconstruct the answer\ni = n\nj = k\nans = []\nwhile i > 0:\n    # if we are on the last day, we just take the max of the first i problems\n    if j == k:\n        ans.append(i)\n        i = 0\n    else:\n        # otherwise, we take the max of the first i problems and the max of the previous day\n        # plus the max of the first i problems minus the max of the first i - j problems\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            ans.append(i - j + 1)\n            i -= i - j + 1\n            j -= 1\n\nprint(*ans[::-1])", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            if i >= j:\n                dp[i][j] = max(dp[i][j], dp[i - j][j - 1] + sum(a[i - j:i]))\n    print(dp[n][k])\n    ans = []\n    i = n\n    j = k\n    while i > 0 and j > 0:\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        elif dp[i][j] == dp[i][j - 1]:\n            j -= 1\n        else:\n            ans.append(j)\n            i -= j\n            j -= 1\n    print(*ans[::-1])\n\nif __name__ == '__main__':\n    main()", "\n\ndef solve(n, k, a):\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = max(dp[i-1][j-1] + a[j-1], dp[i][j-1])\n    return dp[k][n]\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))\n\nif __name__ == '__main__':\n    main()", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * (n + 1) for _ in range(k + 1)]\n\nfor i in range(n):\n    dp[1][i + 1] = max(dp[1][i], a[i])\n\nfor i in range(2, k + 1):\n    for j in range(1, n + 1):\n        for l in range(j - 1, -1, -1):\n            dp[i][j] = max(dp[i][j], dp[i - 1][l] + max(a[l:j]))\n\nprint(dp[k][n])\n\nans = []\ni = k\nj = n\nwhile i > 0:\n    for l in range(j - 1, -1, -1):\n        if dp[i][j] == dp[i - 1][l] + max(a[l:j]):\n            ans.append(j - l)\n            i -= 1\n            j = l\n            break\n\nprint(*ans[::-1])"]