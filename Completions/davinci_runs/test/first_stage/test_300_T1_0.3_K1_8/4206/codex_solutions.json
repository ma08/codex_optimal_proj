["\n\nimport sys\n\ndef main():\n    s = input()\n    s = list(s)\n    s = list(map(int, s))\n    s = sum(s)\n    print(s%3)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef get_divisible_numbers(s):\n    \"\"\"\n    Returns the number of divisible numbers that can be cut from the number s.\n    \"\"\"\n    # The number of divisible numbers is equal to the number of zeros in the number s.\n    return s.count(\"0\")\n\ndef main():\n    # Read the number s.\n    s = input()\n    # Print the number of divisible numbers that can be cut from s.\n    print(get_divisible_numbers(s))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    s = input()\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1]\n        if int(s[i - 2:i]) % 3 == 0:\n            dp[i] = max(dp[i], dp[i - 2] + 1)\n    print(dp[n])\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    \"\"\"\n    1. We can make cuts between each pair of digits.\n    2. We can make cuts between each pair of digits and the last digit.\n    3. We can make cuts between each pair of digits and the first digit.\n    4. We can make cuts between each pair of digits and the first and last digits.\n    \"\"\"\n    s = input()\n    n = len(s)\n    dp = [[0] * 3 for _ in range(n)]\n    dp[0][int(s[0]) % 3] = 1\n    for i in range(1, n):\n        for j in range(3):\n            dp[i][j] = dp[i - 1][j]\n            dp[i][(j + int(s[i])) % 3] += 1\n    print(max(dp[n - 1][0], dp[n - 1][1] + 1, dp[n - 1][2] + 1))\n\n\nif __name__ == '__main__':\n    main()", "\n\ns = input()\n\ndp = [0] * len(s)\n\nfor i in range(len(s)):\n    dp[i] = int(s[i]) % 3 == 0\n    if i > 0:\n        dp[i] += dp[i - 1]\n\nprint(dp[-1])", "\n\ns = input()\n\ndef check_divisible_by_3(number):\n    if int(number) % 3 == 0:\n        return True\n    else:\n        return False\n\ndef find_max_cuts(s):\n    if check_divisible_by_3(s):\n        return len(s) - 1\n    else:\n        return len(s)\n\nprint(find_max_cuts(s))", "\n\ndef max_div_by_3(s):\n    # s = str(s)\n    # n = len(s)\n    # dp = [[0] * n for _ in range(n)]\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         if i == j:\n    #             dp[i][j] = 1 if int(s[i]) % 3 == 0 else 0\n    #         else:\n    #             dp[i][j] = dp[i][j-1] + (1 if int(s[j]) % 3 == 0 else 0)\n    # return dp[0][n-1]\n\n    # s = str(s)\n    # n = len(s)\n    # dp = [[0] * n for _ in range(n)]\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         if i == j:\n    #             dp[i][j] = 1 if int(s[i]) % 3 == 0 else 0\n    #         else:\n    #             dp[i][j] = dp[i][j-1] + (1 if int(s[j]) % 3 == 0 else 0)\n    # return dp[0][n-1]\n\n    s = str(s)\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 1 if int(s[i]) % 3 == 0 else 0\n            else:\n                dp[i][j] = dp[i][j-1] + (1 if int(s[j]) % 3 == 0 else 0)\n    return dp[0][n-1]\n\n\nif __name__ == '__main__':\n    s = int(input())\n    print(max_div_by_3(s))", "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    s = list(s)\n    s = [int(x) for x in s]\n    s = sum(s)\n    if s % 3 == 0:\n        print(len(s))\n    else:\n        print(len(s) - 1)\n\nif __name__ == \"__main__\":\n    main()"]