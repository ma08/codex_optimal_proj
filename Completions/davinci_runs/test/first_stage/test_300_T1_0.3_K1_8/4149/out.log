2022-04-20 02:44:30.362815 """
Authors guessed an array $a$ consisting of $n$ integers; each integer is not less than $2$ and not greater than $2 \cdot 10^5$. You don't know the array $a$, but you know the array $b$ which is formed from it with the following sequence of operations:  Firstly, let the array $b$ be equal to the array $a$;  Secondly, for each $i$ from $1$ to $n$:   if $a_i$ is a prime number, then one integer $p_{a_i}$ is appended to array $b$, where $p$ is an infinite sequence of prime numbers ($2, 3, 5, \dots$);  otherwise (if $a_i$ is not a prime number), the greatest divisor of $a_i$ which is not equal to $a_i$ is appended to $b$;   Then the obtained array of length $2n$ is shuffled and given to you in the input. 

Here $p_{a_i}$ means the $a_i$-th prime number. The first prime $p_1 = 2$, the second one is $p_2 = 3$, and so on.

Your task is to recover any suitable array $a$ that forms the given array $b$. It is guaranteed that the answer exists (so the array $b$ is obtained from some suitable array $a$). If there are multiple answers, you can print any.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $2n$ integers $b_1, b_2, \dots, b_{2n}$ ($2 \le b_i \le 2750131$), where $b_i$ is the $i$-th element of $b$. $2750131$ is the $199999$-th prime number.


-----Output-----

In the only line of the output print $n$ integers $a_1, a_2, \dots, a_n$ ($2 \le a_i \le 2 \cdot 10^5$) in any order — the array $a$ from which the array $b$ can be obtained using the sequence of moves given in the problem statement. If there are multiple answers, you can print any.


-----Examples-----
Input
3
3 5 2 3 2 4

Output
3 4 2 
Input
1
2750131 199999

Output
199999 
Input
1
3 6

Output
6
"""
2022-04-20 02:44:30.362843 --------------------------
2022-04-20 02:44:30.363016 using api key sourya
2022-04-20 02:44:52.838229 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime(n):\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 2\n    return primes\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_a(n, b):\n    a = []\n    for i in range(n):\n        if b[i] in get_prime(199999):\n            a.append(b[i])\n        else:\n            a.append(b[i] // get_divisors(b[i])[-1])\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split()]\n    a = get_a(n, b)\n    print(\" \".join([str(i) for i in a]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef getPrimes(n):\n    primes = [2, 3]\n    i = 5\n    while len(primes) < n:\n        if isPrime(i):\n            primes.append(i)\n        i += 2\n    return primes\n\ndef getDivisors(n):\n    divisors = []\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef getArray(n, b):\n    a = []\n    for i in range(n):\n        if b[i] in b[n:]:\n            a.append(b[i])\n        else:\n            a.append(getDivisors(b[i])[0])\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\n\nprint(*getArray(n, b))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_array_a(b):\n    a = []\n    for i in range(0, len(b), 2):\n        if b[i] in primes:\n            a.append(primes.index(b[i]) + 1)\n        else:\n            a.append(b[i] // get_divisors(b[i])[0])\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\nprimes = get_primes(2750131)\na = get_array_a(b)\nprint(*a)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef find_divisor(n):\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            return divisor\n    return -1\n\ndef find_prime(n):\n    primes = [2]\n    for i in range(3, 2750131, 2):\n        if is_prime(i):\n            primes.append(i)\n    return primes[n - 1]\n\ndef find_a(b):\n    n = len(b) // 2\n    a = []\n    for i in range(n):\n        if b[i] == b[n + i]:\n            a.append(b[i])\n        else:\n            if b[i] == find_prime(b[n + i]):\n                a.append(b[n + i])\n            else:\n                a.append(find_prime(b[i]))\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = find_a(b)\n    print(' '.join([str(x) for x in a]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    b = [int(x) for x in sys.stdin.readline().strip().split()]\n    a = []\n    for i in range(n):\n        if b[2*i] in a:\n            a.append(b[2*i+1])\n        else:\n            a.append(b[2*i])\n    print(\" \".join([str(x) for x in a]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef isPrime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = []\n    for i in range(0, 2*n, 2):\n        if b[i] == b[i+1]:\n            a.append(b[i])\n        else:\n            a.append(b[i]*b[i+1])\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n\ndef get_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef get_divisor(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return 1\n\ndef get_array_a(b):\n    a = []\n    for i in range(len(b)):\n        if is_prime(b[i]):\n            a.append(get_prime(b[i]))\n        else:\n            a.append(get_divisor(b[i]))\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = get_array_a(b)\n    print(' '.join([str(x) for x in a]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef is_prime(x):\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    for i in range(2, int(math.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    x = 1\n    while len(primes) < n:\n        x += 1\n        if is_prime(x):\n            primes.append(x)\n    return primes\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_a(b):\n    a = []\n    for i in range(len(b)):\n        if i % 2 == 0:\n            if is_prime(b[i]):\n                a.append(b[i])\n            else:\n                divisors = get_divisors(b[i])\n                for divisor in divisors:\n                    if divisor in b:\n                        a.append(divisor)\n                        break\n        else:\n            primes = get_primes(b[i])\n            for prime in primes:\n                if prime in b:\n                    a.append(prime)\n                    break\n    return a\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    b = [int(x) for x in sys.stdin.readline().strip().split()]\n    a = get_a(b)\n    for x in a:\n        print(x, end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650422670,
  "id": "cmpl-4yucQFCNbYjrQGMMcNolhlCcLf03B",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-20 02:44:52.838793 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime(n):\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 2\n    return primes\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_a(n, b):\n    a = []\n    for i in range(n):\n        if b[i] in get_prime(199999):\n            a.append(b[i])\n        else:\n            a.append(b[i] // get_divisors(b[i])[-1])\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split()]\n    a = get_a(n, b)\n    print(\" \".join([str(i) for i in a]))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:44:52.838887 REASON stop
2022-04-20 02:44:52.839682 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef getPrimes(n):\n    primes = [2, 3]\n    i = 5\n    while len(primes) < n:\n        if isPrime(i):\n            primes.append(i)\n        i += 2\n    return primes\n\ndef getDivisors(n):\n    divisors = []\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef getArray(n, b):\n    a = []\n    for i in range(n):\n        if b[i] in b[n:]:\n            a.append(b[i])\n        else:\n            a.append(getDivisors(b[i])[0])\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\n\nprint(*getArray(n, b))"
}
2022-04-20 02:44:52.839790 REASON stop
2022-04-20 02:44:52.840616 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_array_a(b):\n    a = []\n    for i in range(0, len(b), 2):\n        if b[i] in primes:\n            a.append(primes.index(b[i]) + 1)\n        else:\n            a.append(b[i] // get_divisors(b[i])[0])\n    return a\n\nn = int(input())\nb = list(map(int, input().split()))\nprimes = get_primes(2750131)\na = get_array_a(b)\nprint(*a)"
}
2022-04-20 02:44:52.840764 REASON stop
2022-04-20 02:44:52.854483 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef find_divisor(n):\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            return divisor\n    return -1\n\ndef find_prime(n):\n    primes = [2]\n    for i in range(3, 2750131, 2):\n        if is_prime(i):\n            primes.append(i)\n    return primes[n - 1]\n\ndef find_a(b):\n    n = len(b) // 2\n    a = []\n    for i in range(n):\n        if b[i] == b[n + i]:\n            a.append(b[i])\n        else:\n            if b[i] == find_prime(b[n + i]):\n                a.append(b[n + i])\n            else:\n                a.append(find_prime(b[i]))\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = find_a(b)\n    print(' '.join([str(x) for x in a]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:44:52.854621 REASON stop
2022-04-20 02:44:52.855624 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    b = [int(x) for x in sys.stdin.readline().strip().split()]\n    a = []\n    for i in range(n):\n        if b[2*i] in a:\n            a.append(b[2*i+1])\n        else:\n            a.append(b[2*i])\n    print(\" \".join([str(x) for x in a]))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:44:52.855734 REASON stop
2022-04-20 02:44:52.860378 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef isPrime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = []\n    for i in range(0, 2*n, 2):\n        if b[i] == b[i+1]:\n            a.append(b[i])\n        else:\n            a.append(b[i]*b[i+1])\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-20 02:44:52.860504 REASON stop
2022-04-20 02:44:52.861545 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n\ndef get_prime(n):\n    i = 2\n    while n > 0:\n        if is_prime(i):\n            n -= 1\n        i += 1\n    return i - 1\n\ndef get_divisor(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return 1\n\ndef get_array_a(b):\n    a = []\n    for i in range(len(b)):\n        if is_prime(b[i]):\n            a.append(get_prime(b[i]))\n        else:\n            a.append(get_divisor(b[i]))\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = get_array_a(b)\n    print(' '.join([str(x) for x in a]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:44:52.861637 REASON stop
2022-04-20 02:44:52.862735 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef is_prime(x):\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    for i in range(2, int(math.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    x = 1\n    while len(primes) < n:\n        x += 1\n        if is_prime(x):\n            primes.append(x)\n    return primes\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_a(b):\n    a = []\n    for i in range(len(b)):\n        if i % 2 == 0:\n            if is_prime(b[i]):\n                a.append(b[i])\n            else:\n                divisors = get_divisors(b[i])\n                for divisor in divisors:\n                    if divisor in b:\n                        a.append(divisor)\n                        break\n        else:\n            primes = get_primes(b[i])\n            for prime in primes:\n                if prime in b:\n                    a.append(prime)\n                    break\n    return a\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    b = [int(x) for x in sys.stdin.readline().strip().split()]\n    a = get_a(b)\n    for x in a:\n        print(x, end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()"
}
2022-04-20 02:44:52.862967 REASON stop
