2022-04-19 05:37:34.640533 num operations 1
2022-04-19 05:37:34.640549 size on input set 1
2022-04-19 05:37:42.460790 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# https://atcoder.jp/contests/abc156/tasks/abc156_c\n\n\n# input\n\nn, m = map(int, input().split())\nx = list(map(int, input().split()))\n\nx.sort()\n\nif x[-1] > n:\n    print(-1)\n    exit()\n\nans = 10 ** 9\nfor p in range(n):\n    s = 0\n    for i in range(m):\n        s += (x[i] - p) ** 2\n    ans = min(s, ans)\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] >= n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n"
    },
    {
      "index": 3,
      "text": "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    if a[-1] > n:\n        print(-1)\n        sys.exit()\n\n    s = 0\n    for i in range(m):\n        s += a[i]\n\n    print(n - s)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n"
    }
  ],
  "created": 1650346654,
  "object": "edit"
}
2022-04-19 05:37:42.461062 fix syntax errors 6 ['# https://atcoder.jp/contests/abc156/tasks/abc156_c\n\n\n# input\n\nn, m = map(int, input().split())\nx = list(map(int, input().split()))\n\nx.sort()\n\nif x[-1] > n:\n    print(-1)\n    exit()\n\nans = 10 ** 9\nfor p in range(n):\n    s = 0\n    for i in range(m):\n        s += (x[i] - p) ** 2\n    ans = min(s, ans)\n\nprint(ans)\n', '\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n', '\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] >= n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n', '\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n', "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    if a[-1] > n:\n        print(-1)\n        sys.exit()\n\n    s = 0\n    for i in range(m):\n        s += a[i]\n\n    print(n - s)\n\nif __name__ == '__main__':\n    main()\n", '\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-1] > n:\n    print(-1)\n    exit()\n\ns = 0\nfor i in range(m):\n    s += a[i]\n\nprint(n - s)\n']
2022-04-19 05:37:42.461098 size on output set 4
2022-04-19 05:37:42.461110 num operations 1
2022-04-19 05:37:42.461116 size on input set 1
2022-04-19 05:37:46.651144 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n"
    },
    {
      "index": 1,
      "text": "import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n"
    },
    {
      "index": 2,
      "text": "import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n"
    },
    {
      "index": 3,
      "text": "\nimport heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-2)\nprint(N-(a-2))\n"
    },
    {
      "index": 4,
      "text": "import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n"
    },
    {
      "index": 5,
      "text": "import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n"
    }
  ],
  "created": 1650346662,
  "object": "edit"
}
2022-04-19 05:37:46.651544 fix syntax errors 6 ['import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n', 'import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n', 'import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n', '\nimport heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-2)\nprint(N-(a-2))\n', 'import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n', 'import heapq\n\n# Input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort A in ascending order\nA.sort()\n\n# If N is smaller than A[-1], Takahashi cannot finish all of the assignments\nif N < A[-1]:\n    print(-1)\n    exit()\n\n# Initialize a heap\nh = []\n\n# Put the last element of A into the heap\nheapq.heappush(h, -A[-1])\n\n# Put the second-last element of A into the heap\nheapq.heappush(h, -A[-2])\n\n# Repeat M-2 times\nfor i in range(M-2):\n    # Pop the largest element in the heap\n    a = -heapq.heappop(h)\n\n    # If a is greater than N, Takahashi cannot finish all of the assignments\n    if a > N:\n        print(-1)\n        exit()\n\n    # Push a-1 into the heap\n    heapq.heappush(h, -(a-1))\n\n# Pop the largest element in the heap\na = -heapq.heappop(h)\n\n# If a is greater than N, Takahashi cannot finish all of the assignments\nif a > N:\n    print(-1)\n    exit()\n\n# Print N-(a-1)\nprint(N-(a-1))\n']
2022-04-19 05:37:46.651613 size on output set 2
