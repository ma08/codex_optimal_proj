2022-04-19 06:03:13.653597 num operations 1
2022-04-19 06:03:13.653613 size on input set 1
2022-04-19 06:03:23.887617 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the \n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0.\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k - n * a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k - n * b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 3,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the \n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 4,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played,\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0.\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 5,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    }
  ],
  "created": 1650348193,
  "object": "edit"
}
2022-04-19 06:03:23.887935 fix syntax errors 6 ['\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the \n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n', '\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0.\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n', '\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k - n * a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k - n * b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n', '\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the \n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n', '\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played,\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0.\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n', '\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n']
2022-04-19 06:03:23.888102 size on output set 6
2022-04-19 06:03:23.888115 num operations 1
2022-04-19 06:03:23.888121 size on input set 1
2022-04-19 06:03:32.748101 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a > b:\n            if k < a:\n                print(0)\n                continue\n            if k >= a + b:\n                print(n)\n                continue\n            ans = 0\n            while k >= a + b:\n                k -= a\n                ans += 1\n            if k < a:\n                print(ans)\n            else:\n                print(ans + 1)\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        print((k - a) // (a - b))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main(): \n  \n    # number of elements \n    n = 5\n  \n    # Below list contains 5 elements \n    li = [1,2,3,4,5] \n  \n    # using len() \n    # Length of list \n    print (\"The length of list is : \",end=\"\") \n    print (len(li)) \n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650348203,
  "object": "edit"
}
2022-04-19 06:03:32.748322 fix syntax errors 6 ['\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a > b:\n            if k < a:\n                print(0)\n                continue\n            if k >= a + b:\n                print(n)\n                continue\n            ans = 0\n            while k >= a + b:\n                k -= a\n                ans += 1\n            if k < a:\n                print(ans)\n            else:\n                print(ans + 1)\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        print((k - a) // (a - b))\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main(): \n  \n    # number of elements \n    n = 5\n  \n    # Below list contains 5 elements \n    li = [1,2,3,4,5] \n  \n    # using len() \n    # Length of list \n    print ("The length of list is : ",end="") \n    print (len(li)) \n', 'import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-19 06:03:32.748370 size on output set 5
