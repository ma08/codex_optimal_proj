["<?php\n\n$file = 'test.csv';\n\n$data = file_get_contents($file);\n\necho $data;\n\n\n?>\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input() \n\n    # solve\n    if s == t:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for key in d:\n            if d[key] != 0:\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            if count > 10000:\n                print(-1)\n            else:\n                print(count)\n                i = 0\n                j = 0\n                while i < n and j < n:\n                    if s[i] == t[j]:\n                        i += 1\n                        j += 1\n                    else:\n                        print(i, end=' ')\n                        i += 1\n                        count += 1\n        else:\n            print(-1)\n\nmain()\n", "const fs = require('fs')\nconst util = require('util')\n\nconst readFile = util.promisify(fs.readFile)\nconst writeFile = util.promisify(fs.writeFile)\n\nconst read = async () => {\n  const file = await readFile('./file.txt')\n  return file.toString()\n}\n\nconst write = async (data) => {\n  await writeFile('./file.txt', data)\n}\n\nmodule.exports = {\n  read,\n  write\n}\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input()\n\n    # solve\n    if s == t:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for key in d:\n            if d[key] != 0:\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            if count > 10000:\n                print(-1)\n            else:\n                print(count)\n            i = 0\n            j = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    print(i, end=' ')\n                    i += 1\n                    count += 1\n        else:\n            print(-1)\n\nmain()\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input()\n\n    # solve\n    if s == t:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for key in d:\n            if d[key] != 0:\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            if count > n:\n                print(-1)\n            else:\n                print(count)\n                # i = 0\n                # j = 0\n                # while i < n and j < n:\n                #     if s[i] == t[j]:\n                #         i += 1\n                #         j += 1\n                #     else:\n                #         print(i, end=' ')\n                #         i += 1\n                #         count += 1\n        else:\n            print(-1)\n\nmain()\n", "// function File(filename, filetype) {\n//   this.filename = filename;\n//   this.filetype = filetype;\n// }\n\n// File.prototype.getExtension = function() {\n//   return this.filetype;\n// };\n\n// File.prototype.getName = function() {\n//   return this.filename;\n// };\n\n// File.prototype.getSize = function() {\n//   return this.filesize;\n// };\n\n// File.prototype.getDate = function() {\n//   return this.filedate;\n// };\n\n// File.prototype.getParentDirectory = function() {\n//   return this.parentdirectory;\n// };\n\n// File.prototype.getPath = function() {\n//   return this.path;\n// };\n\n// File.prototype.getType = function() {\n//   return this.filetype;\n// };\n\n// File.prototype.getIcon = function() {\n//   return this.icon;\n// };\n\n// File.prototype.getUrl = function() {\n//   return this.url;\n// };\n\n// File.prototype.getMimeType = function() {\n//   return this.mimetype;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n// File.prototype.getThumbnailUrl = function() {\n//   return this.thumbnailurl;\n// };\n\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input()\n\n    # solve\n    if s == t:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for key in d.keys():\n            if d[key] != 0: # if number of occurences of any character is not zero\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            if count > 10000:\n                print(-1)\n            else:\n                print(count)\n                # i = 0\n                # j = 0\n                # while i < n and j < n:\n                #     if s[i] == t[j]:\n                #         i += 1\n                #         j += 1\n                #     else:\n                #         print(i, end=' ')\n                #         i += 1\n                #         count += 1\n        else:\n            print(-1)\n\nmain()\n", "#!/usr/bin/python\n\nimport os\nimport sys\nimport time\n\n#def main():\n#    print \"Hello World\"\n\n\n#if __name__ == \"__main__\":\n#    main()\n\ndef file_create(filename):\n    f = open(filename, \"w+\")\n    for i in range(10):\n        f.write(\"This is line %d\\r\\n\" % (i+1))\n    f.close()\n\ndef file_read(filename):\n    f = open(filename, \"r\")\n    if f.mode == \"r\":\n        contents = f.read()\n        print(contents)\n    f.close()\n\ndef file_append(filename):\n    f = open(filename, \"a\")\n    for i in range(2):\n        f.write(\"Appended line %d\\r\\n\" % (i+1))\n    f.close()\n    \ndef file_delete(filename):\n    if os.path.exists(filename):\n        os.remove(filename)\n    else:\n        print(\"The file does not exist\")\n\ndef file_rename(filename1, filename2):\n    os.rename(filename1, filename2)\n\ndef file_create_dir(dirname):\n    os.mkdir(dirname)\n\ndef file_remove_dir(dirname):\n    os.rmdir(dirname)\n\ndef file_rename_dir(dirname1, dirname2):\n    os.rename(dirname1, dirname2)\n\ndef file_exist(filename):\n    if os.path.exists(filename):\n        print(\"File exists\")\n    else:\n        print(\"File does not exist\")\n\ndef file_stats(filename):\n    st = os.stat(filename)\n    print(\"File stats:\")\n    print(\"    Size: %d\" % st.st_size)\n    print(\"    Permissions: %d\" % st.st_mode)\n    print(\"    Owner: %d\" % st.st_uid)\n    print(\"    Device: %d\" % st.st_dev)\n    print(\"    Created: %s\" % time.ctime(st.st_ctime))\n    print(\"    Last modified: %s\" % time.ctime(st.st_mtime))\n    print(\"    Last accessed: %s\" % time.ctime(st.st_atime))\n\ndef file_walk(dirname):\n    for root, dirs, files in os.walk(dirname):\n        for name in files:\n            print(os.path.join(root, name))\n        for name in dirs:\n            print(os.path.join(root, name))\n\ndef file_list_dir(dirname):\n    for name in os.listdir(dirname):\n        print(name)\n\ndef file_list_dir_full(dirname):\n    for name in os.listdir(dirname):\n        print(os.path.join(dirname, name))\n\ndef file_list_dir_recursive(dirname):\n    for root, dirs, files in os.walk(dirname):\n        for name in files:\n            print(os.path.join(root, name))\n\ndef file_list_dir_recursive_full(dirname):\n    for root, dirs, files in os.walk(dirname):\n        for name in files:\n            print(os.path.join(root, name))\n        for name in dirs:\n            print(os.path.join(root, name))\n\ndef file_get_current_dir():\n    print(os.getcwd())\n\ndef file_change_dir(dirname):\n    os.chdir(dirname)\n\ndef file_get_env(env):\n    print(os.getenv(env))\n\ndef file_set_env(env, val):\n    os.putenv(env, val)\n\ndef file_unset_env(env):\n    os.unsetenv(env)\n\ndef file_get_pid():\n    print(os.getpid())\n\ndef file_get_login():\n    print(os.getlogin())\n\ndef file_get_uid():\n    print(os.getuid())\n\ndef file_get_gid():\n    print(os.getgid())\n\ndef file_get_groups():\n    print(os.getgroups())\n\ndef file_get_hostname():\n    print(os.uname())\n\ndef file_get_environ():\n    print(os.environ)\n\ndef file_get_environ_item(item):\n    print(os.environ.get(item))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# import some modules\nimport os\nimport sys\nimport csv\nimport json\nimport re\nimport requests\n\n# set some variables\nfile = 'file.txt'\nnew_file = 'new_file.txt'\n\n# open the file\nf = open(file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# split the data\ndata = data.split('\\n')\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'w')\n\n# write the data\nf.write('\\n'.join(data))\n\n# close the file\nf.close()\n\n# open a new file\nf = open(new_file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'a')\n\n# write the data\nf.write('\\n')\n\n# close the file\nf.close()\n\n# open a new file\nf = open(new_file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# split the data\ndata = data.split('\\n')\n\n# print the data\nprint(data)\n\n# remove the first element\ndata.pop(0)\n\n# remove the last element\ndata.pop()\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'w')\n\n# write the data\nf.write('\\n'.join(data))\n\n# close the file\nf.close()\n\n# open a new file\nf = open(new_file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# split the data\ndata = data.split('\\n')\n\n# print the data\nprint(data)\n\n# remove the first element\ndata.pop(0)\n\n# remove the last element\ndata.pop()\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'w')\n\n# write the data\nf.write('\\n'.join(data))\n\n# close the file\nf.close()\n\n# open a new file\nf = open(new_file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# split the data\ndata = data.split('\\n')\n\n# print the data\nprint(data)\n\n# remove the first element\ndata.pop(0)\n\n# remove the last element\ndata.pop()\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'w')\n\n# write the data\nf.write('\\n'.join(data))\n\n# close the file\nf.close()\n\n# open a new file\nf = open(new_file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# split the data\ndata = data.split('\\n')\n\n# print the data\nprint(data)\n\n# remove the first element\ndata.pop(0)\n\n# remove the last element\ndata.pop()\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'w')\n\n# write the data\nf.write('\\n'.join(data))\n\n# close the file\nf.close()\n\n# open a new file\nf = open(new_file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# split the data\ndata = data.split('\\n')\n\n# print the data\nprint(data)\n\n# remove the first element\ndata.pop(0)\n\n# remove the last element\ndata.pop()\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'w')\n\n# write the data\nf.write('\\n'.join(data))\n\n# close the file\nf.close()\n\n# open a new file\nf = open(new_file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# split the data\ndata = data.split('\\n')\n\n# print the data\nprint(data)\n\n# remove the first element\ndata.pop(0)\n\n# remove the last element\ndata.pop()\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'w')\n\n# write the data\nf.write('\\n'.join(data))\n\n# close the file\nf.close()\n\n# open a new file\nf = open(new_file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# split the data\ndata = data.split('\\n')\n\n# print the data\nprint(data)\n\n# remove the first element\ndata.pop(0)\n\n# remove the last element\ndata.pop()\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'w')\n\n# write the data\nf.write('\\n'.join(data))\n\n# close the file\nf.close()\n\n# open a new file\nf = open(new_file, 'r')\n\n# read the file\ndata = f.read()\n\n# close the file\nf.close()\n\n# print the data\nprint(data)\n\n# split the data\ndata = data.split('\\n')\n\n# print the data\nprint(data)\n\n# remove the first element\ndata.pop(0)\n\n# remove the last element\ndata.pop()\n\n# print the data\nprint(data)\n\n# open a new file\nf = open(new_file, 'w')\n\n# write the data\nf.write('\\n'.join(data))\n\n# close the file\nf.close()\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input()\n\n    # solve\n    if s == t:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for key in d:\n            if d[key] != 0:\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            print(count)\n            i = 0\n            j = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    print(i, end=' ')\n                    i += 1\n                    count += 1\n        else:\n            print(-1)\n\nmain()\n", "window.onload = function(){\n    var button = document.getElementById(\"previewButton\");\n    button.onclick = previewHandler;\n}\n\nfunction previewHandler(){\n    var canvas = document.getElementById(\"tshirtCanvas\");\n    var context = canvas.getContext(\"2d\");\n    fillBackgroundColor(canvas, context);\n\n    var selectObj = document.getElementById(\"shape\");\n    var index = selectObj.selectedIndex;\n    var shape = selectObj[index].value;\n\n    if (shape == \"squares\"){\n        for (var squares = 0; squares < 20; squares++){\n            drawSquare(canvas, context);\n        }\n    }\n    else if (shape == \"circles\"){\n        for (var circles = 0; circles < 20; circles++){\n            drawCircle(canvas, context);\n        }\n    }\n    drawText(canvas, context);\n    drawBird(canvas, context);\n}\n\nfunction drawSquare(canvas, context){\n    var w = Math.floor(Math.random() * 40);\n    var x = Math.floor(Math.random() * canvas.width);\n    var y = Math.floor(Math.random() * canvas.height);\n\n    context.fillStyle = \"lightblue\";\n    context.fillRect(x, y, w, w);\n}\n\nfunction fillBackgroundColor(canvas, context){\n    var selectObj = document.getElementById(\"backgroundColor\");\n    var index = selectObj.selectedIndex;\n    var bgColor = selectObj.options[index].value;\n    context.fillStyle = bgColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n}\n\nfunction drawCircle(canvas, context){\n    var radius = Math.floor(Math.random() * 40);\n    var x = Math.floor(Math.random() * canvas.width);\n    var y = Math.floor(Math.random() * canvas.height);\n\n    context.beginPath();\n    context.arc(x, y, radius, 0, degreesToRadians(360), true);\n    context.fillStyle = \"lightblue\";\n    context.fill();\n}\n\nfunction degreesToRadians(degrees){\n    return (degrees * Math.PI)/180;\n}\n\nfunction updateTweets(tweets){\n    var tweetsSelection = document.getElementById(\"tweets\");\n\n    for (var i = 0; i < tweets.length; i++){\n        tweet = tweets[i];\n\n        var option = document.createElement(\"option\");\n        option.text = tweet.text;\n        option.value = tweet.text.replace(\"\\\"\", \"'\");\n\n        tweetsSelection.options.add(option);\n    }\n\n    tweetsSelection.selectedIndex = 0;\n}\n\nfunction drawText(canvas, context){\n    var selectObj = document.getElementById(\"foregroundColor\");\n    var index = selectObj.selectedIndex;\n    var fgColor = selectObj[index].value;\n\n    context.fillStyle = fgColor;\n    context.font = \"bold 1em sans-serif\";\n    context.textAlign = \"left\";\n    context.fillText(\"I saw this tweet\", 20, 40);\n\n    selectObj = document.getElementById(\"tweets\");\n    index = selectObj.selectedIndex;\n    var tweet = selectObj[index].value;\n    context.font = \"italic 1.2em serif\";\n    context.fillText(tweet, 30, 100);\n\n    context.font = \"bold 1em sans-serif\";\n    context.textAlign = \"right\";\n    context.fillText(\"and all I got was this lousy t-shirt!\", \n        canvas.width-20, canvas.height-40);\n}\n\nfunction drawBird(canvas, context){\n    var twitterBird = new Image();\n    twitterBird.src = \"twitterBird.png\";\n    twitterBird.onload = function(){\n        context.drawImage(twitterBird, 20, 120, 70, 70);\n    };\n}\n"]