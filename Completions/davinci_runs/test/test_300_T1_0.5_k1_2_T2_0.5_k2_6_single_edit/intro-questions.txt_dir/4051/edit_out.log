2022-04-19 04:46:40.183002 num operations 1
2022-04-19 04:46:40.183021 size on input set 1
2022-04-19 04:46:45.116801 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    # print(a)\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(a)\n    print(\"YES\" if sorted(a) == a else \"NO\") #\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a) + 1\n    for i in range(m, 0, -1):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n\nmain()\n"
    }
  ],
  "created": 1650343600,
  "object": "edit"
}
2022-04-19 04:46:45.117148 fix syntax errors 6 ['\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    # print(a)\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print(a)\n    print("YES" if sorted(a) == a else "NO") #\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a) + 1\n    for i in range(m, 0, -1):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n\nmain()\n']
2022-04-19 04:46:45.117214 size on output set 4
2022-04-19 04:46:45.117232 num operations 1
2022-04-19 04:46:45.117241 size on input set 1
2022-04-19 04:47:30.025355 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# import sys\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return \"YES\"\n#     else:\n#         return \"NO\"\n\n# print(check_ravioli_sort(arr))\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return \"YES\"\n#     else:\n#         return \"NO\"\n\n# print(check_ravioli_sort(arr))\n\n\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return \"YES\"\n#     else:\n#         return \"NO\"\n\n# print(check_ravioli_sort(arr))\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return \"YES\"\n#     else:\n#         return \"NO\"\n\n# print(check_ravioli_sort(arr))\n\n\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().strip().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 4,
      "text": "\n\n# import sys\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return \"YES\"\n#     else:\n#         return \"NO\"\n\n# print(check_ravioli_sort(arr))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "index": 5,
      "text": "\nimport math\nimport sys\n\nn = int(input())\narr = list(map(float, input().split()))\n\ndef mean(arr):\n    return sum(arr) / len(arr)\n\ndef median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        return (arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]) / 2\n    else:\n        return arr[(len(arr) // 2) + 1]\n\ndef mode(arr):\n    arr.sort()\n    mode = arr[0]\n    max_count = 1\n    for i in range(1, len(arr)):\n        curr_count = 1\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            mode = arr[i]\n    return mode\n\ndef standard_deviation(arr):\n    mean_of_arr = mean(arr)\n    return math.sqrt(sum([(arr[i] - mean_of_arr) ** 2 for i in range(len(arr))]) / len(arr))\n\nprint(round(standard_deviation(arr), 1))\n"
    }
  ],
  "created": 1650343605,
  "object": "edit"
}
2022-04-19 04:47:30.025724 fix syntax errors 6 ['\n\n# import sys\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return "YES"\n#     else:\n#         return "NO"\n\n# print(check_ravioli_sort(arr))\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return "YES"\n#     else:\n#         return "NO"\n\n# print(check_ravioli_sort(arr))\n\n\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return "YES"\n#     else:\n#         return "NO"\n\n# print(check_ravioli_sort(arr))\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return "YES"\n#     else:\n#         return "NO"\n\n# print(check_ravioli_sort(arr))\n\n\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nprint(check_ravioli_sort(arr))\n', '\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n', '\nimport sys\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\n\nprint(check_ravioli_sort(arr))\n', '\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().strip().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nprint(check_ravioli_sort(arr))\n', '\n\n# import sys\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return "YES"\n#     else:\n#         return "NO"\n\n# print(check_ravioli_sort(arr))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', '\nimport math\nimport sys\n\nn = int(input())\narr = list(map(float, input().split()))\n\ndef mean(arr):\n    return sum(arr) / len(arr)\n\ndef median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        return (arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]) / 2\n    else:\n        return arr[(len(arr) // 2) + 1]\n\ndef mode(arr):\n    arr.sort()\n    mode = arr[0]\n    max_count = 1\n    for i in range(1, len(arr)):\n        curr_count = 1\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            mode = arr[i]\n    return mode\n\ndef standard_deviation(arr):\n    mean_of_arr = mean(arr)\n    return math.sqrt(sum([(arr[i] - mean_of_arr) ** 2 for i in range(len(arr))]) / len(arr))\n\nprint(round(standard_deviation(arr), 1))\n']
2022-04-19 04:47:30.025802 size on output set 6
