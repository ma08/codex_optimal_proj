["\n\nn, k = map(int, input().split())\n\n# We can find our answer by finding the remainder of n / k\n# and counting the number of red balls in that pattern.\nn = n % k\n\n# If we don't have enough balls to fill out a pattern\nif n <= k / 2:\n    print(n)\nelse:\n    # Otherwise, count the number of red balls in the last pattern\n    print(k - n)\n", "\nn, a, b = map(int, input().split())\n\n# The pattern is repeated every (a + b) balls.\n# We can find our answer by finding the remainder of n / (a + b)\n# and counting the number of blue balls in that pattern.\nn = n % (a + b)\n\n# If we don't have enough balls to fill out a pattern,\n# we can simply count the number of blue balls we have.\nif n <= a:\n    print(n)\nelse:\n    # Otherwise, count the number of blue balls in the last pattern.\n    print(a)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Nov  4 15:05:51 2017\n\n\n@author: shirleydeng\n\"\"\"\n\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef generate_random(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.randint(1,100))\n    return list\n\ndef generate_random_normal(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.gauss(0,1))\n    return list\n\ndef generate_random_exponential(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.expovariate(1))\n    return list\n\ndef generate_random_poisson(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.poisson(1))\n    return list\n\ndef generate_random_uniform(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.uniform(0,1))\n    return list\n\ndef generate_random_binomial(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.binomial(100,0.5))\n    return list\n\ndef generate_random_geometric(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.geometric(0.5))\n    return list\n\ndef generate_random_chisquare(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.chisquare(1))\n    return list\n\ndef generate_random_triangular(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.triangular(0,1,0.5))\n    return list\n\ndef generate_random_paretovariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.paretovariate(1))\n    return list\n\ndef generate_random_weibullvariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.weibullvariate(1,1))\n    return list\n\ndef generate_random_lognormvariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.lognormvariate(0,1))\n    return list\n\ndef generate_random_betavariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.betavariate(1,1))\n    return list\n\ndef generate_random_vonmisesvariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.vonmisesvariate(0,1))\n    return list\n\ndef generate_random_gammavariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.gammavariate(1,1))\n    return list\n\ndef generate_random_gauss(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.gauss(0,1))\n    return list\n\ndef generate_random_hypergeometric(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.hypergeometric(100,1,1))\n    return list\n\ndef generate_random_logisticvariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.logisticvariate(1,1))\n    return list\n\ndef generate_random_normalvariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.normalvariate(0,1))\n    return list\n\ndef generate_random_fvariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.fvariate(1,1))\n    return list\n\ndef generate_random_cunifvariate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.cunifvariate(1,1))\n    return list\n\ndef generate_random_scalar(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.random())\n    return list\n\ndef generate_random_seed(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.seed(1))\n    return list\n\ndef generate_random_getstate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.getstate())\n    return list\n\ndef generate_random_setstate(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.setstate())\n    return list\n\ndef generate_random_choice(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.choice([1,2,3,4]))\n    return list\n\ndef generate_random_shuffle(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.shuffle([1,2,3,4]))\n    return list\n\ndef generate_random_sample(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.sample([1,2,3,4],1))\n    return list\n\ndef generate_random_randrange(n):\n    random.seed(1)\n    list = []\n    for i in range(n):\n        list.append(random.randrange(1,100,1\n", "\n\nimport sys\ninput = sys.stdin.readline\n\nn, a, b = map(int, input().split())\n\nif a > b: a, b = b, a\n\nif a == 0: \n    print(0)\nelse:\n    print(min(n, a))\n", "n,a,b = map(int,input().split())\n\nif a > b:\n    a,b = b,a\n\nif a == 0:\n    print(0)\nelse:\n    print(min(n,a)-1)\n", "\n\nn, a, b = map(int, input().split())\n\n# The pattern is repeated every (a + b) balls.\n# We can find our answer by finding the remainder of n / (a + b)\n# and counting the number of blue balls in that pattern.\nn = n % (a + b)\n\n# If we don't have enough balls to fill out a pattern,\n# we can simply count the number of blue balls we have.\nif n <= a:\n    print(n)\nelse:\n    # Otherwise, count the number of blue balls in the last pattern.\n\n    print(a)\n", "\n\nn, a, b = map(int, input().split())\n\n# The pattern is repeated every (a + b) balls.\n# We can find our answer by finding the remainder of n / (a + b)\n# and counting the number of blue balls in that pattern.\nn = n % (a + b)\n\n# If we don't have enough balls to fill out a pattern,\n# we can simply count the number of blue balls we have.\nif n <= a:\n    print(n)\nelse:\n    # Otherwise, count the number of blue balls in the last pattern.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print(a)\n", "\nn,a,b = map(int,input().split())\n\nprint(min(n,a))\n", "\nn,a,b = map(int,input().split())\n\nif a > b:\n    a,b = b,a\n\nif a == 0:\n    print(0)\nelse:\n    print(min(n,a))\n", "n,a,b = map(int,input().split())\nif a > b:\n    a,b = b,a\n\nif a == 0:\n    print(0)\nelse:\n    print(min(n,a))\n", "\nn, a, b = map(int, input().split())\n\n# The pattern is repeated every (a + b) balls.\n# We can find our answer by finding the remainder of n / (a+b)\n# and counting the number of blue balls in that pattern.\nn = n % (a+b)\n\n# If we don't have enough balls to fill out a pattern,\n# we can simply count the number of blue balls we have.\nif n <= a:\n    print(n)\nelse:\n    # Otherwise, count the number of blue balls in the last pattern.\n    print(a)\n"]