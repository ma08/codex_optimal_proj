["\nfor i in range(int(input())):\n    print(input().count(\"xxx\"))\n", "\nn = int(input())\nfile_name = input()\n\ncount = 0\nfor i in range(2, n):\n    if file_name[i-2] == file_name[i-1] == file_name[i]:\n        count += 1\n\nprint(count)\n", "\n\n# n = int(input())\n# s = input()\n# print(\"\".join(s.split(\"xxx\")))\n\ndef get_result(n, s):\n\tdef find_next_xxx_index(s, start_index=0):\n\t\tindex = start_index\n\t\twhile index < len(s) and s[index] == \"x\":\n\t\t\tindex += 1\n\t\twhile index < len(s):\n\t\t\tif s[index] == \"x\":\n\t\t\t\tif s[index - 1] == \"x\" and s[index - 2] == \"x\":\n\t\t\t\t\treturn index\n\t\t\tindex += 1\n\t\treturn -1\n\n\tdef remove_char_at_index(s, index):\n\t\treturn s[:index] + s[index + 1:]\n\n\tdef remove_first_xxx(s):\n\t\ti = find_next_xxx_index(s)\n\t\tif i == -1:\n\t\t\treturn s\n\t\treturn remove_char_at_index(s, i)\n\n\tresult = len(s)\n\twhile True:\n\t\ts = remove_first_xxx(s)\n\t\tresult = min(result, len(s))\n\t\ti = find_next_xxx_index(s)\n\t\tif i == -1:\n\t\t\treturn result\n\t\ts = remove_char_at_index(s, i)\n\t\tresult = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n\tn = int(input())\n\ts = input()\n\tprint(get_result(n, s))\n", "\n\n# n = int(input())\n# s = input()\n# print(\"\".join(s.split(\"xxx\")))\n\ndef get_result(n, s):\n    def find_next_xxx_index(s, start_index=0):\n        index = start_index\n        while index < len(s) and s[index] == 'x':\n            index += 1\n        while index < len(s):\n            if s[index] == 'x':\n                if s[index - 1] == 'x' and s[index - 2] == 'x':\n                    return index\n            index += 1\n        return -1\n\n    def remove_char_at_index(s, index):\n        return s[:index] + s[index + 1:]\n\n    def remove_first_xxx(s):\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return s\n        return remove_char_at_index(s, i)\n\n    result = len(s)  # result will be the minimum length of the string after removing some characters\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n", "\n\nn = int(input())\ns = input()\nprint(\"\".join(s.split(\"xxx\")))\n\n# def get_result(n, s):\n#     def find_next_xxx_index(s, start_index=0):\n#         index = start_index\n#         while index < len(s) and s[index] == \"x\":\n#             index += 1\n#         while index < len(s):\n#             if s[index] == \"x\":\n#                 if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n#                     return index\n#             index += 1\n#         return -1\n\n#     def remove_char_at_index(s, index):\n#         return s[:index] + s[index + 1:]\n\n#     def remove_first_xxx(s):\n#         i = find_next_xxx_index(s)\n#         if i == -1:\n#             return s\n#         return remove_char_at_index(s, i)\n\n#     result = len(s)\n#     while True:\n#         s = remove_first_xxx(s)\n#         result = min(result, len(s))\n#         i = find_next_xxx_index(s)\n#         if i == -1:\n#             return result\n#         s = remove_char_at_index(s, i)\n#         result = min(result, len(s))\n\n\n# if __name__ == \"__main__\":\n#     n = int(input())\n#     s = input()\n#     print(get_result(n, s))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn = int(input())\nfile_name = input()\n\ncount = 0\nfor i in range(2, n):\n    if file_name[i-2] == file_name[i-1] == file_name[i]:\n        count += 1\nprint(count)\n", "\n\n# n = int(input())\n# s = input()\n# print(\"\".join(s.split(\"xxx\")))\nimport sys\ndef get_result(n, s):\n    def find_next_xxx_index(s, start_index=0):\n        index = start_index\n        while index < len(s) and s[index] == \"x\":\n            index += 1\n        while index < len(s):\n            if s[index] == \"x\":\n                if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                    return index\n            index += 1\n        return -1\n\n    def remove_char_at_index(s, index):\n        return s[:index] + s[index + 1:]\n\n    def remove_first_xxx(s):\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return s\n        return remove_char_at_index(s, i)\n\n    result = len(s)\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline()\n    print(get_result(n, s))\n", "\n\nn = int(input())\nfile_name = input()\n\ncount = 0\nfor i in range(2, n):\n    if file_name[i-2] == file_name[i-1] and file_name[i-1] == file_name[i]:\n        count += 1\n\nprint(count)\n", "\nn = int(input())\nfile_name = input()\n\ncount = 0\nfor i in range(2, n):\n    if file_name[i - 2] == file_name[i - 1] == file_name[i]:\n        count += 1\n\nprint(count)\n", "\n\ndef get_result(n, s):\n    def find_next_xxx_index(s, start_index=0):\n        index = start_index\n        while index < len(s) and s[index] == \"x\":\n            index += 1\n        while index < len(s):\n            if s[index] == \"x\":\n                if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                    return index\n            index += 1\n        return -1\n\n    def remove_char_at_index(s, index):\n        return s[:index] + s[index + 1:]\n\n    def remove_first_xxx(s):\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return s\n        return remove_char_at_index(s, i)\n\n    result = len(s)\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n"]