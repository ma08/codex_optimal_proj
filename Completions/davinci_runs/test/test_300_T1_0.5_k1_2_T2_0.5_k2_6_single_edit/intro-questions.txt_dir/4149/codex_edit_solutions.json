["\ndef convert_to_primes(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes():\n    yield [2]\n    yield [2, 3]\n    yield [2, 3, 5]\n    yield [2, 3, 5, 7]\n    yield [2, 3, 5, 7, 11]\n    yield [2, 3, 5, 7, 11, 13]\n    yield [2, 3, 5, 7, 11, 13, 17]\n    yield [2, 3, 5, 7, 11, 13, 17, 19]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179]\n    yield [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83\n\ndef solve(n, b):\n    primes = convert_to_primes(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef convert_to_primes(n):\n    return [i for i in range(2, n + 1) if is_prime(i)]\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes():\n    return [i for i in range(2, n + 1) if is_prime(i)]\n\ndef solve(n, b):\n    primes = convert_to_primes(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b can be used to find the elements of a.\n    # The elements of a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\ndef convert_to_primes(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes():\n    primes = []\n    i = 2\n    while True:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n        yield primes\n\ndef solve(n, b):\n    primes = convert_to_primes(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "def solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b can be used to find the elements of a.\n    # The elements of a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\nimport math\ndef convert_to_primes(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes():\n    primes = []\n    i = 2\n    while True:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n        yield primes\n\ndef solve(n, b):\n    primes = convert_to_primes(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef get_nth_prime(n):\n    \"\"\"\n    >>> get_nth_prime(1)\n    2\n    >>> get_nth_prime(2)\n    3\n    >>> get_nth_prime(3)\n    5\n    \"\"\"\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n        i += 1\n    return primes[-1]\n\n\ndef is_prime(n):\n    \"\"\"\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b can be used to find the elements of a.\n    # The elements of a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i if is_prime(i) else get_nth_prime(i) for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\ndef convert_to_primes(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes():\n    primes = []\n    i = 2\n    while True:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n        yield primes[-1]\n\ndef solve(n, b):\n    primes = convert_to_primes(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef convert_to_primes(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes():\n    primes = []\n    i = 2\n    while True:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n        yield primes\n\ndef solve(n, b):\n    primes = convert_to_primes(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = solve(n, b)\n    print(' '.join(map(str, a)))\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the `n`-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b can be used\n    # to find the elements of a.\n    # The elements of a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n"]