2022-04-19 04:32:02.294612 num operations 1
2022-04-19 04:32:02.294642 size on input set 1
2022-04-19 04:32:10.228727 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n'''\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n'''\n    main()\n"
    },
    {
      "index": 1,
      "text": "# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n\tt = int(input())\n\tfor i in range(t):\n\t\tn = int(input())\n\t\ta = list(map(int, input().split()))\n\t\tif a[0] == a[-1]:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution\n\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650342723,
  "object": "edit"
}
2022-04-19 04:32:10.229033 fix syntax errors 6 ['\n\'\'\'\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n\'\'\'\n    main()\n', '# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n\tt = int(input())\n\tfor i in range(t):\n\t\tn = int(input())\n\t\ta = list(map(int, input().split()))\n\t\tif a[0] == a[-1]:\n\t\t\tprint("YES")\n\t\telse:\n\t\t\tprint("NO")\n\nif __name__ == "__main__":\n\tmain()\n', '\n\n# Solution\n\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-19 04:32:10.229078 size on output set 6
2022-04-19 04:32:10.229092 num operations 1
2022-04-19 04:32:10.229099 size on input set 1
2022-04-19 04:32:25.802198 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_input_file():\n    return open(\"input.txt\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_number_of_elements():\n    return int(get_input_file().readline())\n\n\ndef get_elements():\n    return [int(x) for x in get_input_file().readline().split()]\n\n\ndef is_palindrome(array):\n    return str(array) == str(array)[::-1]\n\n\ndef get_all_subsequences_of_array(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\n\ndef solve_test_case(test_case_number, number_of_elements, elements):\n    for subsequence in get_all_subsequences_of_array(elements):\n        if len(subsequence) >= 3 and is_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        number_of_elements = get_number_of_elements()\n        elements = get_elements()\n        output = solve_test_case(test_case_number, number_of_elements, elements)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 1,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 2,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 3,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 4,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases(input):\n    return int(input.readline())\n\n\ndef get_array_length(input, test_case_number):\n    return int(input.readline())\n\n\ndef get_array(input, array_length):\n    return [int(x) for x in input.readline().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input, test_case_number)\n        array = get_array(input, array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        output.write(output + \"\\n\")\n\n\nsolve_problem(get_input(), get_output())\n"
    },
    {
      "index": 5,
      "text": "\n\n\ndef get_input(filename):\n    return open(filename, \"r\")\n\n\ndef get_output(filename):\n    return open(filename, \"w\")\n\n\ndef get_number_of_test_cases(input_file):\n    return int(input_file.readline())\n\n\ndef get_array_length(input_file):\n    return int(input_file.readline())\n\n\ndef get_array(input_file, array_length):\n    return [int(x) for x in input_file.readline().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem(input_file, output_file):\n    number_of_test_cases = get_number_of_test_cases(input_file)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input_file)\n        array = get_array(input_file, array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        output_file.write(output + \"\\n\")\n\n\nsolve_problem(get_input(\"input.txt\"), get_output(\"output.txt\"))\n"
    }
  ],
  "created": 1650342730,
  "object": "edit"
}
2022-04-19 04:32:25.802549 fix syntax errors 6 ['\ndef get_input_file():\n    return open("input.txt")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_number_of_elements():\n    return int(get_input_file().readline())\n\n\ndef get_elements():\n    return [int(x) for x in get_input_file().readline().split()]\n\n\ndef is_palindrome(array):\n    return str(array) == str(array)[::-1]\n\n\ndef get_all_subsequences_of_array(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\n\ndef solve_test_case(test_case_number, number_of_elements, elements):\n    for subsequence in get_all_subsequences_of_array(elements):\n        if len(subsequence) >= 3 and is_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        number_of_elements = get_number_of_elements()\n        elements = get_elements()\n        output = solve_test_case(test_case_number, number_of_elements, elements)\n        print(output)\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases(input):\n    return int(input.readline())\n\n\ndef get_array_length(input, test_case_number):\n    return int(input.readline())\n\n\ndef get_array(input, array_length):\n    return [int(x) for x in input.readline().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input, test_case_number)\n        array = get_array(input, array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        output.write(output + "\\n")\n\n\nsolve_problem(get_input(), get_output())\n', '\n\n\ndef get_input(filename):\n    return open(filename, "r")\n\n\ndef get_output(filename):\n    return open(filename, "w")\n\n\ndef get_number_of_test_cases(input_file):\n    return int(input_file.readline())\n\n\ndef get_array_length(input_file):\n    return int(input_file.readline())\n\n\ndef get_array(input_file, array_length):\n    return [int(x) for x in input_file.readline().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem(input_file, output_file):\n    number_of_test_cases = get_number_of_test_cases(input_file)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input_file)\n        array = get_array(input_file, array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        output_file.write(output + "\\n")\n\n\nsolve_problem(get_input("input.txt"), get_output("output.txt"))\n']
2022-04-19 04:32:25.802635 size on output set 4
