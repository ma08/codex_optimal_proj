2022-04-19 04:28:57.001458 num operations 1
2022-04-19 04:28:57.001478 size on input set 1
2022-04-19 04:29:05.603480 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(m+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if j >= m//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][m])\n"
    },
    {
      "index": 1,
      "text": "\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(m+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if j >= m//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][m])\n"
    },
    {
      "index": 2,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(k+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, k+1):\n        if j >= k//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1] + a[i-1][j])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][k])\n"
    },
    {
      "index": 3,
      "text": "\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(m+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if j <= m//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][m])\n"
    },
    {
      "index": 4,
      "text": "\nn, m, k = map(int, input().split())\na = [[0 for i in range(m)] for j in range(n)]\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\n\ndp = [[0 for i in range(m+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if j >= m//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][m])\n"
    },
    {
      "index": 5,
      "text": "\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(m + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j >= m // 2:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1][j - 1])\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[n][m])\n"
    }
  ],
  "created": 1650342537,
  "object": "edit"
}
2022-04-19 04:29:05.603795 fix syntax errors 6 ['\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(m+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if j >= m//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][m])\n', '\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(m+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if j >= m//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][m])\n', 'import sys\nsys.setrecursionlimit(10**6)\n\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(k+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, k+1):\n        if j >= k//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1] + a[i-1][j])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][k])\n', '\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(m+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if j <= m//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][m])\n', '\nn, m, k = map(int, input().split())\na = [[0 for i in range(m)] for j in range(n)]\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\n\ndp = [[0 for i in range(m+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if j >= m//2:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(dp[n][m])\n', '\nn, m, k = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0 for i in range(m + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j >= m // 2:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1][j - 1])\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[n][m])\n']
2022-04-19 04:29:05.603841 size on output set 5
2022-04-19 04:29:05.603855 num operations 1
2022-04-19 04:29:05.603862 size on input set 1
2022-04-19 04:29:20.043491 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn,m = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix,n,m):\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i][j]\n    return dp[n-1][m-1]\n\nprint(max_sum(matrix,n,m))\n"
    },
    {
      "index": 1,
      "text": "'''\nTask: \nGiven a matrix of size n x m, you have to find the maximum sum of k x k sub-matrix.\n\nInput:\nFirst line contains two integers n and m, denoting the number of rows and columns in matrix. Next n lines contain m space separated integers. Next line contains an integer k.\n\nOutput:\nPrint the maximum sum of k x k sub-matrix.\n\nConstraints:\n1 <= n, m <= 100\n1 <= k <= n, m\n-1000 <= a[i][j] <= 1000\n\nSample input:\n3 3\n1 2 3\n4 5 6\n7 8 9\n2\n\nSample output:\n23\n\nExplanation:\nThe maximum sum of 2 x 2 sub-matrix is 23.\n'''\n\n\nn,m,k = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix,n,m,k):\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i][j]\n    return dp[n-1][m-k-1]\n\nprint(max_sum(matrix,n,m,k))\n"
    },
    {
      "index": 2,
      "text": "\nn,m,k = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix, n, m, k):\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n-1):\n        for j in range(m-1):\n            if i == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i][j]\n    return dp[n-1][m-1]\n\nprint(max_sum(matrix,n,m,k))\n"
    },
    {
      "index": 3,
      "text": "\n\nn,m,k = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix,n,m):\n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i-1][j-1]\n    return dp[n][m]\n\nprint(max_sum(matrix,n,m,k))\n"
    },
    {
      "index": 4,
      "text": "n,m,k = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix, n, m, k):\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + matrix[i][j]\n    return dp[n-1][m-1]\n\nprint(max_sum(matrix,n,m,k))\n"
    },
    {
      "index": 5,
      "text": "\ndef max_sum(matrix,n,m):\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i == 0:\n\t\t\t\tdp[i][j] = matrix[i][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i][j]\n\treturn dp[n-1][m-1]\nn,m = map(int, input().split())\nmatrix = [[int(j) for j in input().split()] for i in range(n)]\nprint(max_sum(matrix,n,m))\n"
    }
  ],
  "created": 1650342545,
  "object": "edit"
}
2022-04-19 04:29:20.043854 fix syntax errors 6 ['\n\nn,m = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix,n,m):\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i][j]\n    return dp[n-1][m-1]\n\nprint(max_sum(matrix,n,m))\n', "'''\nTask: \nGiven a matrix of size n x m, you have to find the maximum sum of k x k sub-matrix.\n\nInput:\nFirst line contains two integers n and m, denoting the number of rows and columns in matrix. Next n lines contain m space separated integers. Next line contains an integer k.\n\nOutput:\nPrint the maximum sum of k x k sub-matrix.\n\nConstraints:\n1 <= n, m <= 100\n1 <= k <= n, m\n-1000 <= a[i][j] <= 1000\n\nSample input:\n3 3\n1 2 3\n4 5 6\n7 8 9\n2\n\nSample output:\n23\n\nExplanation:\nThe maximum sum of 2 x 2 sub-matrix is 23.\n'''\n\n\nn,m,k = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix,n,m,k):\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i][j]\n    return dp[n-1][m-k-1]\n\nprint(max_sum(matrix,n,m,k))\n", '\nn,m,k = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix, n, m, k):\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n-1):\n        for j in range(m-1):\n            if i == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i][j]\n    return dp[n-1][m-1]\n\nprint(max_sum(matrix,n,m,k))\n', '\n\nn,m,k = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix,n,m):\n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i-1][j-1]\n    return dp[n][m]\n\nprint(max_sum(matrix,n,m,k))\n', 'n,m,k = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef max_sum(matrix, n, m, k):\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + matrix[i][j]\n    return dp[n-1][m-1]\n\nprint(max_sum(matrix,n,m,k))\n', '\ndef max_sum(matrix,n,m):\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i == 0:\n\t\t\t\tdp[i][j] = matrix[i][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + matrix[i][j]\n\treturn dp[n-1][m-1]\nn,m = map(int, input().split())\nmatrix = [[int(j) for j in input().split()] for i in range(n)]\nprint(max_sum(matrix,n,m))\n']
2022-04-19 04:29:20.043922 size on output set 6
