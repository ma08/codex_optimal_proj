2022-04-19 05:34:29.755148 num operations 1
2022-04-19 05:34:29.755166 size on input set 1
2022-04-19 05:34:34.398667 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] // 2\n\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "import sys\n\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\nans = 0\nfor i in d:\n    ans += d[i] - 2\nprint(ans)\n"
    }
  ],
  "created": 1650346469,
  "object": "edit"
}
2022-04-19 05:34:34.398937 fix syntax errors 6 ['\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\n\nprint(ans)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] // 2\n\nprint(ans)\n', 'import sys\n\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\nans = 0\nfor i in d:\n    ans += d[i] - 2\nprint(ans)\n']
2022-04-19 05:34:34.398973 size on output set 5
2022-04-19 05:34:34.398984 num operations 1
2022-04-19 05:34:34.398990 size on input set 1
2022-04-19 05:34:49.280917 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()] \n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill \n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(input())\n    skill_list = [int(x) for x in input().split()]\n    min_skill = min(skills)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skills) + 1):\n        skill_counts.append((i, skills.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students with that skill\n    skill_counts = [(i, skill_list.count(i)) for i in range(min_skill, max(skill_list) + 1)]\n\n    # sort the skill counts by the number of students with that skill (descending)\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = list(map(int, stdin.readline().split()))\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list)+1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1], reverse=True)\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for count, i in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n    print(min_students)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\nfrom sys import stdin\n\ndef main():\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        skill_list = [int(x) for x in stdin.readline().split()]\n        min_skill = min(skill_list)\n\n        # create a list of tuples of each skill and the number of students\n        # with that skill\n        skill_counts = []\n        for i in range(min_skill, max(skill_list) + 1):\n            skill_counts.append((i, skill_list.count(i)))\n\n        # sort the skill counts by the number of students with that skill\n        skill_counts.sort(key=lambda x: x[1])\n\n        # find the minimum number of students needed to form a team\n        # of each skill level\n        min_students = 0\n        for i, count in skill_counts:\n            if count <= n:\n                min_students += (n - count)\n                n = count\n            else:\n                min_students += n\n                break\n\n        print(min_students)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n, k = [int(x) for x in stdin.readline().split()]\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n"
    }
  ],
  "created": 1650346474,
  "object": "edit"
}
2022-04-19 05:34:49.281263 fix syntax errors 6 ['\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()] \n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill \n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef main():\n    n = int(input())\n    skill_list = [int(x) for x in input().split()]\n    min_skill = min(skills)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skills) + 1):\n        skill_counts.append((i, skills.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students with that skill\n    skill_counts = [(i, skill_list.count(i)) for i in range(min_skill, max(skill_list) + 1)]\n\n    # sort the skill counts by the number of students with that skill (descending)\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n', '\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = list(map(int, stdin.readline().split()))\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list)+1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1], reverse=True)\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for count, i in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n    print(min_students)\n\nmain()\n', '\nfrom sys import stdin\n\ndef main():\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        skill_list = [int(x) for x in stdin.readline().split()]\n        min_skill = min(skill_list)\n\n        # create a list of tuples of each skill and the number of students\n        # with that skill\n        skill_counts = []\n        for i in range(min_skill, max(skill_list) + 1):\n            skill_counts.append((i, skill_list.count(i)))\n\n        # sort the skill counts by the number of students with that skill\n        skill_counts.sort(key=lambda x: x[1])\n\n        # find the minimum number of students needed to form a team\n        # of each skill level\n        min_students = 0\n        for i, count in skill_counts:\n            if count <= n:\n                min_students += (n - count)\n                n = count\n            else:\n                min_students += n\n                break\n\n        print(min_students)\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef main():\n    n, k = [int(x) for x in stdin.readline().split()]\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n']
2022-04-19 05:34:49.281333 size on output set 6
