["\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom operator import itemgetter\n\n    \"\"\"\n    >>> get_max_possible_sum([('A', 1), ('B', 2), ('C', 3)])\n    3\n    >>> get_max_possible_sum([('A', 1), ('B', 2), ('C', 3)], 2)\n    3\n    >>> get_max_possible_sum([('A', 1), ('B', 2), ('C', 3)], 1)\n    2\n    >>> get_max_possible_sum([('A', 1), ('B', 2), ('C', 3)], 3)\n    6\n    \"\"\"\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:k])\n\n\nif __name__ == \"__main__\":\n    A, B, C, K = map(int, input().split())\n    cards = [('A', A), ('B', B), ('C', C)]\n    print(get_max_possible_sum(cards, K))\n", "\n# A, B, C, K = map(int, input().split())\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\n# A, B, C, K = map(int, input().split())\n\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\n\n# A, B, C, K = map(int, input().split())\n\nprint(A, B, C, K)\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "#!/usr/bin/env python3\n\nfrom operator import itemgetter\n\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True) # sort by value\n    return sum(card[1] for card in cards[:K]) # sum all cards with highest value\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"]