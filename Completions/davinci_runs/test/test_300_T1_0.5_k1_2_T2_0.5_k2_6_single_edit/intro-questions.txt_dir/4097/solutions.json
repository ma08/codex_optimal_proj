["n = int(input())\nT = input().split(' ')\nfor i in range(n):\n    T[i] = int(T[i])\nm = n+1\nif n == 1:\n    print(0)\nelse:\n    for a in range(-1, 2):\n        for b in range(-1, 2):\n            c = True\n            p = (T[1]+b) - (T[0]+a)\n            tot = 0\n            if a!=0:\n                tot+=1\n            if b!=0:\n                tot+=1\n            el = T[1]+b\n            for j in range(2, n):\n                if abs((T[j] - el) - p) <= 1:\n                    el += p\n                    if T[j] != el:\n                        tot+=1\n                else:\n                    c = False\n            if c:\n                m = min(m, tot)\n    if m <= n:\n        print(m)\n    else:\n        print(-1)\n", "import sys\nimport operator as op\n\n\nnext(sys.stdin)\n\nxs = list(map(int, next(sys.stdin).rstrip().split()))\n\nif len(xs) <= 2:\n    print(0)\n    return\n\nfrontier = []\nfrontier.append((0, xs[1] - xs[0], xs[1]))\nfrontier.append((1, xs[1] + 1 - xs[0], xs[1] + 1))\nif xs[1] > 0:\n    frontier.append((1, xs[1] - 1 - xs[0], xs[1] - 1))\nif xs[0] > 0:\n    frontier.append((1, xs[1] - xs[0] + 1, xs[1]))\nfrontier.append((1, xs[1] - xs[0] - 1, xs[1]))\nif xs[0] > 0:\n    frontier.append((2, xs[1] + 1 - xs[0] + 1, xs[1] + 1))\nfrontier.append((2, xs[1] + 1 - xs[0] - 1, xs[1] + 1))\nif xs[0] > 0 and xs[1] > 0:\n    frontier.append((2, xs[1] - 1 - xs[0] + 1, xs[1] - 1))\nif xs[1] > 0:\n    frontier.append((2, xs[1] - 1 - xs[0] - 1, xs[1] - 1))\n\n\nfor x in xs[2:]:\n\n    new_frontier = []\n\n    for current, diff, last_x in frontier:\n\n        if diff == x - last_x:\n            new_frontier.append((current, diff, x))\n        elif diff == x + 1 - last_x:\n            new_frontier.append((current + 1, diff, x + 1))\n        elif x > 0 and (diff == x - 1 - last_x):\n            new_frontier.append((current + 1, diff, x - 1))\n\n    frontier = new_frontier\n    if not frontier:\n        print(-1)\n        return\n\nprint(min(frontier, key=op.itemgetter(0))[0])\n", "R = lambda: map(int, input().split())\n\ninf = 10**7\n\nn = int(input())\nb = list(R())\n\ndef f(a):\n    res = 0\n\n    d = a[1] - a[0]\n    e = a[1]\n    for i in range(2, n):\n        e += d\n        if abs(a[i] - e) == 1:\n            res += 1\n        elif a[i] == e:\n            continue\n        else:\n            return inf\n    return res\n\nif n <= 2:\n    print(0)\nelse:\n    res = inf\n    for dx in (-1, 0, 1):\n        for dy in (-1, 0, 1):\n            b[0] += dx; b[1] += dy\n            res = min(res, f(b) + abs(dx) + abs(dy))\n            b[0] -= dx; b[1] -= dy\n    if res == inf: res = -1\n    print(res)", "def solve(n, a):\n\tif n <= 2:\n\t\treturn 0\n\n\td = [v - u for u, v in zip(a, a[1:])]\n\n\tmax_d = max(d)\n\tmin_d = min(d)\n\tif max_d - min_d > 4:\n\t\treturn -1\n\n\tmin_cnt = -1\n\tfor d in range(min_d, max_d + 1):\n\t\tfor d0 in range(-1, 2):\n\t\t\ty = a[0] + d0\n\t\t\tvalid = True\n\t\t\tcnt = 0 if d0 == 0 else 1\n\t\t\tfor x in a[1:]:\n\t\t\t\tdx = abs(y + d - x)\n\t\t\t\tif dx > 1:\n\t\t\t\t\tvalid = False\n\t\t\t\t\tbreak\n\n\t\t\t\tcnt += dx\n\t\t\t\ty += d\n\t\t\tif valid:\n\t\t\t\t# print(d)\n\t\t\t\tif cnt < min_cnt or min_cnt < 0:\n\t\t\t\t\tmin_cnt = cnt\n\treturn min_cnt\n\ndef main():\n\tn = int(input())\n\ta = [int(_) for _ in input().split()]\n\n\tans = solve(n, a)\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "def cal(x, y):\n\td = a[1] + y - a[0] - x\n\twk1 = a[1] + y\n\twkans = 0\n\tfor k in range(2,n):\n\t\tdiff = abs((wk1 + d) - a[k])\n\t\tif diff == 1:\n\t\t\twkans += 1\n\t\telif diff > 1:\n\t\t\treturn n + 1\n\t\twk1 += d\n\treturn wkans\n\t\t\t\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n > 2:\n\tans_final = n + 1\n\tfor i in range(-1, 2):\n\t\tfor j in range(-1, 2):\n\t\t\tans_final = min(ans_final, cal(i, j) + abs(i) + abs(j))\nelse:\n\tans_final = 0\nif ans_final == n + 1:\n\tprint(-1)\nelse:\n\tprint(ans_final)\n", "n = int(input())\nb = list(map(int, input().split()))\nind = False\nminimum = 10 ** 10\nz = [[0, -1, 1], [0, -1, 1]]\nif n < 3:\n\tprint(0)\nelse:\n\tfor i in range(3):\n\t\tfor j in range(3):\n\t\t\tcount = 0\n\t\t\tcnt1 = b[0] + z[0][i]\n\t\t\tcnt2 = b[1] + z[1][j]\n\t\t\tif cnt1 != b[0]:\n\t\t\t\tcount += 1\n\t\t\tif cnt2 != b[1]:\n\t\t\t\tcount += 1\n\t\t\td = cnt2 - cnt1\n\t\t\tprev = cnt2\n\t\t\t#print(prev, cnt1, cnt2)\n\t\t\tind1 = True\n\t\t\tfor k in range(2, n):\n\t\t\t\tnew_d = b[k] - prev\n\t\t\t\tif abs(new_d - d) > 1:\n\t\t\t\t\tind1 = False\n\t\t\t\t\t#print(cnt1, cnt2, d,prev, new_d, b[k])\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tif new_d != d:\n\t\t\t\t\t\tq = d + prev\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tprev = q\n\t\t\t\t\telse:\n\t\t\t\t\t\tprev = b[k]\n\t\t\tif ind1:\n\t\t\t\tind = True\n\t\t\t\tif count < minimum:\n\t\t\t\t\tminimum = count\n\tif ind:\n\t\tprint(minimum)\n\telse:\n\t\tprint(-1)\t\t\t\n\n\n\n", "n = int(input())\nb = [int(i) for i in input().split()]\n_b = []\n\nif n == 1:\n    print(0)\n    return\n\ndef check(diff):\n    cnt = 0\n    for i in range(2, n):\n        if b[i] - _b[-1] == diff:\n            _b.append(b[i])\n        elif b[i] - _b[-1] - 1 == diff:\n            _b.append(b[i] - 1)\n            cnt += 1\n        elif b[i] - _b[-1] + 1 == diff:\n            _b.append(b[i] + 1)\n            cnt += 1\n        else:\n            return -1\n    return cnt\n\nans = n + 1\nd = [-1, 0, 1]\nfor d1 in d:\n    for d2 in d:\n        _b = [b[0] + d1, b[1] + d2]\n        cur = check(_b[1] - _b[0])\n        if cur != -1:\n            ans = min(ans, cur + abs(d1) + abs(d2))\nprint(ans if ans < n + 1 else -1)", "n = int(input())\nm = list(map(int, input().split()))\nif n == 1:\n    print(0)\nelse:\n    sost = [-1, 0, 1]\n    mi = int(1e10)\n    for elem in sost:\n        for elem2 in sost:\n            new_m = m.copy()\n            cur_mi = (elem != 0) + (elem2 != 0)\n            start = elem + m[0]\n            end = elem2 + m[-1]\n            new_m[0] = start\n            new_m[-1] = end\n            f = True\n            if abs(start - end) % (n - 1) == 0:\n                step = (start - end) // (n - 1) \n                for i in range(1, n - 1):\n                    if new_m[i - 1] - new_m[i] != step:\n                        if abs(new_m[i - 1] - new_m[i] - step) == 1:\n                            cur_mi += 1\n                            new_m[i] += (new_m[i - 1] - new_m[i] - step)\n                        else:\n                            f = False\n                            break\n                if f:\n                    mi = min(mi, cur_mi)\n    if mi == int(1e10):\n        print(-1)\n    else:\n        print(mi)", "n = int(input())\na = list(map(int, input().split()))\n\nif n == 1 or n == 2:\n    print(0)\nelse:\n    diff = [a[1] - a[0], a[1] + 1 - a[0], a[1] - 1 - a[0],\n            a[1] - a[0] + 1, a[1] + 1 - a[0] + 1, a[1] - 1 - a[0] + 1,\n            a[1] - a[0] - 1, a[1] + 1 - a[0] - 1, a[1] - 1 - a[0] - 1]\n\n    flag1 = False\n    num = float(\"inf\")\n    flag = True\n    pre = a[1]\n    d = diff[0]\n    rec = 0\n    for j in range(2, n):\n        if a[j] - pre == d + 1:\n            rec += 1\n            pre = a[j] - 1\n        elif a[j] - pre == d - 1:\n            rec += 1\n            pre = a[j] + 1\n        elif a[j] - pre == d:\n            pre = a[j]\n        else:\n            flag = False\n            break\n\n    if flag:\n        flag1 = True\n        num = min(num, rec)\n\n    flag = True\n    pre = a[1] + 1\n    d = diff[1]\n    rec = 1\n    for j in range(2, n):\n        if a[j] - pre == d + 1:\n            rec += 1\n            pre = a[j] - 1\n        elif a[j] - pre == d - 1:\n            rec += 1\n            pre = a[j] + 1\n        elif a[j] - pre == d:\n            pre = a[j]\n        else:\n            flag = False\n            break\n\n    if flag:\n        flag1 = True\n        num = min(num, rec)\n\n    flag = True\n    pre = a[1] - 1\n    d = diff[2]\n    rec = 1\n    for j in range(2, n):\n        if a[j] - pre == d + 1:\n            rec += 1\n            pre = a[j] - 1\n        elif a[j] - pre == d - 1:\n            rec += 1\n            pre = a[j] + 1\n        elif a[j] - pre == d:\n            pre = a[j]\n        else:\n            flag = False\n            break\n\n    if flag:\n        flag1 = True\n        num = min(num, rec)\n\n    flag = True\n    pre = a[1]\n    d = diff[3]\n    rec = 1\n    for j in range(2, n):\n        if a[j] - pre == d + 1:\n            rec += 1\n            pre = a[j] - 1\n        elif a[j] - pre == d - 1:\n            rec += 1\n            pre = a[j] + 1\n        elif a[j] - pre == d:\n            pre = a[j]\n        else:\n            flag = False\n            break\n\n    if flag:\n        flag1 = True\n        num = min(num, rec)\n\n    flag = True\n    pre = a[1] + 1\n    d = diff[4]\n    rec = 2\n    for j in range(2, n):\n        if a[j] - pre == d + 1:\n            rec += 1\n            pre = a[j] - 1\n        elif a[j] - pre == d - 1:\n            rec += 1\n            pre = a[j] + 1\n        elif a[j] - pre == d:\n            pre = a[j]\n        else:\n            flag = False\n            break\n\n    if flag:\n        flag1 = True\n        num = min(num, rec)\n\n    flag = True\n    pre = a[1] - 1\n    d = diff[5]\n    rec = 2\n    for j in range(2, n):\n        if a[j] - pre == d + 1:\n            rec += 1\n            pre = a[j] - 1\n        elif a[j] - pre == d - 1:\n            rec += 1\n            pre = a[j] + 1\n        elif a[j] - pre == d:\n            pre = a[j]\n        else:\n            flag = False\n            break\n\n    if flag:\n        flag1 = True\n        num = min(num, rec)\n\n    flag = True\n    pre = a[1]\n    d = diff[6]\n    rec = 1\n    for j in range(2, n):\n        if a[j] - pre == d + 1:\n            rec += 1\n            pre = a[j] - 1\n        elif a[j] - pre == d - 1:\n            rec += 1\n            pre = a[j] + 1\n        elif a[j] - pre == d:\n            pre = a[j]\n        else:\n            flag = False\n            break\n\n    if flag:\n        flag1 = True\n        num = min(num, rec)\n\n    flag = True\n    pre = a[1] + 1\n    d = diff[7]\n    rec = 2\n    for j in range(2, n):\n        if a[j] - pre == d + 1:\n            rec += 1\n            pre = a[j] - 1\n        elif a[j] - pre == d - 1:\n            rec += 1\n            pre = a[j] + 1\n        elif a[j] - pre == d:\n            pre = a[j]\n        else:\n            flag = False\n            break\n\n    if flag:\n        flag1 = True\n        num = min(num, rec)\n\n    flag = True\n    pre = a[1] - 1\n    d = diff[8]\n    rec = 2\n    for j in range(2, n):\n        if a[j] - pre == d + 1:\n            rec += 1\n            pre = a[j] - 1\n        elif a[j] - pre == d - 1:\n            rec += 1\n            pre = a[j] + 1\n        elif a[j] - pre == d:\n            pre = a[j]\n        else:\n            flag = False\n            break\n\n    if flag:\n        flag1 = True\n        num = min(num, rec)\n\n    if flag1:\n        print(num)\n    else:\n        print(-1)", "n=int(input())\nb=list(map(int,input().split()))\n#print(b)\nl=len(b)\n\nanswer=False\nbest=1e9\nif l<=2:\n    print(0)\nelse:    \n    for start in [b[0]-1,b[0],b[0]+1]:\n        for end in [b[-1]-1,b[-1],b[-1]+1]:\n            d=end-start\n\n            canbe=True\n            if d%(l-1)==0:\n                diff=d//(l-1)\n                if d!=0:\n                    if diff>0:\n                        needseq = list(range(start,end+1,diff))\n                    else:\n                        needseq = list(range(start,end-1,diff))\n                else:\n                    needseq=[start]*l\n#                print(needseq)\n                count=0\n                for s1,s2 in zip(b,needseq):\n                    if abs(s1-s2)<=1:\n                        count+=abs(s1-s2)\n                    else:\n                        canbe=False\n                        break\n                if canbe:\n                    best=min(best,count)\n                    answer=canbe\n            else:\n                answer=answer or False\n    if answer and best!=1e9:\n        print(best)\n    else:\n        print(-1)\n                \n\n\n\n", "n = int(input())\na = [int(x) for x in input().split()]\nvar = [0, -1, 1]\n\nresult = n+1\n\nif n <= 2:\n  print(0)\n  return\n\nfor x in var:\n  for y in var:\n    if result == 0:\n      continue\n\n    diffrest = (a[0] + x - (a[n-1] + y)) % (n-1)\n    diff = -(a[0] + x - (a[n-1] + y)) // (n-1)\n    if diffrest != 0:\n      continue\n\n    change = 0 if x == 0 else 1\n    last = a[0] + x\n    i = 1\n    while i < n and change <= n:\n      next = last + diff\n      ab = abs(next - a[i])\n      if ab == 1:\n        change += 1\n      elif ab > 1:\n        change = n+1\n      last = next\n      i += 1\n    \n    if change < result:\n      result = change\n\nprint(result if result <= n else -1)\n", "def count(a):\n    res = 0\n    delta = a[1] - a[0]\n\n    for i in range(2, len(a)):\n        e = a[i] - a[i - 1] - delta\n        if abs(e) > 1:\n            return -1\n\n        if abs(e) == 1:\n            a[i] -= e\n            res += 1\n\n    return res\n\n\nn = int(input())\nb = list(map(int, input().split()))\nresult = -1\n\nif len(b) == 1:\n    print(0)\n    return\n\nfor i in range(-1, 2):\n    for j in range(-1, 2):\n        cb = b[:]\n        cb[0] += i\n        cb[1] += j\n\n        cur = count(cb)\n\n        if cur == -1:\n            continue\n\n        cur += abs(i) + abs(j)\n        if result == -1 or (result != -1 and cur < result):\n            result = cur\n\nprint(result)\n", "import sys\n\ndef ff(q, s):\n    c = 0\n    su = 1\n    for i in range(1, len(q)):\n        if(q[i] - q[i - 1] - s == 1):\n            c += 1\n            q[i] = q[i] - 1\n        elif(q[i] - q[i - 1] - s == 0):\n            pass\n        elif(q[i] - q[i - 1] - s == -1):\n            c += 1\n            q[i] = q[i] + 1\n        else:\n            su = 0\n            break\n    if(su == 1):\n        return c\n    else:\n        return -1\n\n_ = input()\nb = list(map(int, input().split()))\ns = 0\nfor i in range(len(b) - 1):\n    s += b[i + 1] - b[i]\n\nif(len(b) == 1):\n    print(0)\n    return\nqw = s // (len(b) - 1)\ngg = []\n\n\nq = b[:]\ngg.append(ff(q, qw))\nq = b[:]\ngg.append(ff(q, qw + 1))\n\nq = b[:]\nq[0] = q[0] + 1\nres = ff(q, qw)\nif(res != -1):\n    gg.append(res + 1)\nq = b[:]\nq[0] = q[0] + 1\nres = ff(q, qw + 1)\nif(res != -1):\n    gg.append(res + 1)\n\nq = b[:]\nq[0] = q[0] - 1\nres = ff(q, qw)\nif(res != -1):\n    gg.append(res + 1)\nq = b[:]\nq[0] = q[0] - 1\nres = ff(q, qw + 1)\nif(res != -1):\n    gg.append(res + 1)\n\ncc = []\nfor i in gg:\n    if(i != -1):\n        cc.append(i)\nif(cc == []):\n    print(-1)\nelse:\n    print(min(cc))\n", "m = [0, -1, 1]\n\ndef solve(b):\n    n = len(b)\n    if n < 3: return 0\n    minans = -1\n    for ii in range(3):\n        for jj in range(3):\n            b1 = b[0]+m[ii]\n            bn = b[n-1]+m[jj]\n            dn = bn-b1\n            if dn%(n-1) == 0:\n                d = dn//(n-1)\n                currans = 0\n                for i in range(n):\n                    if b[i] == b1+i*d:\n                        pass\n                    elif abs(b[i]-(b1+i*d)) == 1:\n                        currans += 1\n                    else:\n                        currans = -1\n                        break\n                if minans == -1 or currans != -1 and currans < minans:\n                    minans = currans\n    return minans\n\nn = int(input())\nb = [int(s) for s in input().split()]\n\nprint(solve(b))", "n = int(input())\n\nlst = [int(x) for x in input().split()]\n\na = []\nfor x in range(len(lst) - 1):\n    a.append(lst[x + 1] - lst[x])\n\nif len(a) == 0:\n    print(0)\nelse:\n    mini = min(a)\n    maxi = max(a)\n\n    if maxi - mini > 4:\n        print(-1)\n    else:\n        m1 = (maxi + mini) // 2\n        m2 = (maxi + mini + 1) // 2\n        ar = []\n        \n        k = 0\n        flag = True\n        for x in range(1, n):\n            if lst[0] + m1 * x != lst[x] and lst[x] - 1 <= lst[0] + m1 * x <= lst[x] + 1:\n                k += 1\n            else:\n                if lst[0] + m1 * x == lst[x]:\n                    continue\n                flag = False\n                break\n        if flag:\n            ar.append(k)\n\n        k = 0\n        flag = True\n        for x in range(1, n):\n            if lst[0] + m2 * x != lst[x] and lst[x] - 1 <= lst[0] + m2 * x <= lst[x] + 1:\n                k += 1\n            else:\n                if lst[0] + m2 * x == lst[x]:\n                    continue\n                flag = False\n                break\n        if flag:\n            ar.append(k)\n\n        k = 1\n        flag = True\n        lst[0] -= 1\n        for x in range(1, n):\n            if lst[0] + m1 * x != lst[x] and lst[x] - 1 <= lst[0] + m1 * x <= lst[x] + 1:\n                k += 1\n            else:\n                if lst[0] + m1 * x == lst[x]:\n                    continue\n                flag = False\n                break\n        if flag:\n            ar.append(k)\n\n        k = 1\n        flag = True\n        for x in range(1, n):\n            if lst[0] + m2 * x != lst[x] and lst[x] - 1 <= lst[0] + m2 * x <= lst[x] + 1:\n                k += 1\n            else:\n                if lst[0] + m2 * x == lst[x]:\n                    continue\n                flag = False\n                break\n        if flag:\n            ar.append(k)\n\n        k = 1\n        lst[0] += 2\n        flag = True\n        for x in range(1, n):\n            if lst[0] + m1 * x != lst[x] and lst[x] - 1 <= lst[0] + m1 * x <= lst[x] + 1:\n                k += 1\n            else:\n                if lst[0] + m1 * x == lst[x]:\n                    continue\n                flag = False\n                break\n        if flag:\n            ar.append(k)\n\n        k = 1\n        flag = True\n        for x in range(1, n):\n            if lst[0] + m2 * x != lst[x] and lst[x] - 1 <= lst[0] + m2 * x <= lst[x] + 1:\n                k += 1\n            else:\n                if lst[0] + m2 * x == lst[x]:\n                    continue\n                flag = False\n                break\n        if flag:\n            ar.append(k)\n\n        if len(ar) != 0:\n            print(min(ar))\n        else:\n            print(-1)\n", "def main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    if len(a) <= 2:\n        print(0)\n        return\n\n    final_ans = n + 1\n    for start, change_start in [(a[0], False), (a[0]-1, True), (a[0] + 1, True)]:\n        for end, change_end in [(a[-1], False), (a[-1]-1, True), (a[-1]+1, True)]:\n            d, r = divmod(end - start, n-1)\n            if r == 0:\n                b = start\n                ans = 0\n                if change_start:\n                    ans += 1\n                if change_end:\n                    ans += 1\n\n                impossible = False\n                for i in range(1, n-1):\n                    if impossible:\n                        break\n                    if a[i] - b == d:\n                        b += d\n                    elif a[i] - b == d + 1 or a[i] - b == d - 1:\n                        ans += 1\n                        b += d\n                    else:\n                        impossible = True\n\n                if not impossible:\n                    final_ans = min(final_ans, ans)\n\n    if final_ans < n + 1:\n        print(final_ans)\n    else:\n        print(-1)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def solve(seq):\n    if len(seq) <= 2:\n        return 0\n\n    startings = []\n    for x in (-1, 0, 1):\n        for y in (-1, 0, 1):\n            start = (seq[1] + y,  # first el\n                     (seq[0] + x - seq[1] - y),  # delta\n                     int(x != 0) + int(y != 0))  # number of changes\n            startings.append(start)\n\n    changes = []\n    for start in startings:\n        last_el, delta, num_changes = start\n        impossible = False\n\n        for x in seq[2:]:\n            if last_el - x == delta:\n                last_el = x\n                continue\n            if last_el - (x - 1) == delta:\n                last_el = x - 1\n                num_changes += 1\n                continue\n            if last_el - (x + 1) == delta:\n                last_el = x + 1\n                num_changes += 1\n                continue\n\n            impossible = True\n            break\n\n        if not impossible:\n            changes.append(num_changes)\n\n    return min(changes or [-1])\n\nif '__main__' == __name__:\n    input()\n    print(solve(list(map(int, input().strip().split()))))\n\n", "n=int(input())\nb=list(map(int,input().split()))\nlo=n+1\nif n<=2:\n    print(0)\n    quit()\nfor i in range(-1,2):\n    for j in range(-1,2):\n        bol,c=1,0\n        if (b[0]+i-b[n-1]-j)%(n-1):\n            continue\n        d=-(b[0]+i-b[n-1]-j)//(n-1)\n        for k in range(1,n-1):\n            d0=b[k]-b[0]-i-d*k\n            if abs(d0)>1:\n                bol=0\n                break\n            elif d0:\n                c+=1\n        if bol:\n            lo=min(c+abs(i)+abs(j),lo)\nif lo>n:\n    print(-1)\nelse:\n    print(lo)\n", "n = int(input())\nans = 200000\na = list(map(int, input().split()))\n\ndef test(x, y):\n    if ((a[n - 1] + y) - (a[0] + x)) % (n - 1):\n        return False\n    first = a[0] + x\n    last = a[n - 1] + y\n    d = (last - first) // (n - 1)\n    for i in range(1, n - 1):\n        if abs((first + i * d) - a[i]) > 1:\n            return False\n    return True\n\ndef find(x, y):\n    res = abs(x) + abs(y)\n    first = a[0] + x\n    last = a[n - 1] + y\n    d = (last - first) // (n - 1)\n    for i in range(1, n - 1):\n        if abs((first + i * d) - a[i]):\n            res += 1\n    return res\n\nif n <= 2:\n    print(0)\nelse:\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if test(i, j):\n                ans = min(ans, find(i, j))\n    print(-1 if ans == 200000 else ans)", "import copy\ndef right(a):\n    d = a[1] - a[0]\n    res, f = 0, True\n    for i in range(2, len(a)):\n        if a[i] - a[i - 1] == d + 1:\n            a[i] -= 1\n            res += 1\n        elif a[i] - a[i - 1] == d - 1:\n            a[i] += 1\n            res += 1\n        elif a[i] - a[i - 1] != d:\n            f = False\n            break\n    if not f:\n        res = 10 ** 9\n    return res\nn = int(input())\nbs = list(map(int, input().split()))\nif n <= 2:\n    print(0)\nelse:\n    f = n + 1\n    bs[0] -= 1\n    bs[1] -= 1\n    f = min(f, right(bs.copy()) + 2)\n    bs[1] += 1\n    f = min(f, right(bs.copy()) + 1)\n    bs[1] += 1\n    f = min(f, right(bs.copy()) + 2)\n    bs[0] += 1\n    bs[1] -= 2\n    f = min(f, right(bs.copy()) + 1)\n    bs[1] += 1\n    f = min(f, right(bs.copy()))\n    bs[1] += 1\n    f = min(f, right(bs.copy()) + 1)\n    bs[0] += 1\n    bs[1] -= 2\n    f = min(f, right(bs.copy()) + 2)\n    bs[1] += 1\n    f = min(f, right(bs.copy()) + 1)\n    bs[1] += 1\n    f = min(f, right(bs.copy()) + 2)\n    if f == n + 1:\n        f = -1\n    print(f)", "n = [int(x) for x in input().rstrip().split()][0]\ndata = [int(x) for x in input().rstrip().split()]\n\nis_found = False\nnudges = [0, -1, 1]\nlast_idx = len(data) - 1\n\nif n <= 2:\n    print(0)\n    return\nif n == 3:\n    last_idx += 1\n\nresult = -1\nfor s_nudge in nudges:\n    for e_nudge in nudges:\n        s_val = data[0] + s_nudge\n        e_val = data[len(data) - 1] + e_nudge\n        if ((e_val - s_val) % (n-1)) == 0:\n            num_change = abs(e_nudge) + abs(s_nudge)\n            diff = (e_val - s_val) / (n-1)\n\n            val = s_val + diff\n            for idx in range(1, last_idx):\n                value = data[idx]\n                if abs(value - val) == 1:\n                    num_change += 1\n                elif abs(value - val) > 1:\n                    break\n\n                val += diff\n                if idx == last_idx - 1:\n                    if result == -1 or result > num_change:\n                        result = num_change\nprint(result)\n", "import itertools\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return read_ints()[0]\n\n\ndef check(nums, step, pre):\n    suma = 0\n    # print(\"Start: \", step)\n    for x in nums:\n        s = pre-x\n        # print(pre, x, s)\n        if abs(step-s) > 1:\n            # print(\"BAD\")\n            raise Exception()\n        if step == s:\n            pre = x\n            continue\n        suma += 1\n        if pre-(x+1) == step:\n            pre = x+1\n        else:\n            pre = x-1\n    # print(\"OK \", suma)\n    return suma\n\n\ndef main():\n    n = read_int()\n    nums = read_ints()\n    if n <= 2:\n        print(0)\n        return\n\n    suma  = 100000000\n    for x, y in itertools.product([-1,0,1], [-1,0,1]):\n        a = nums[0]+x\n        b = nums[1]+y\n        diff = a-b\n        try:\n            # print(x,y)\n            suma = min(suma, check(nums[2:], diff, b)+abs(x)+abs(y))\n        except Exception as e:\n            # print(repr(e))\n            pass\n\n\n    if suma == 100000000:\n        print(-1)\n    else:\n        print(suma)\n\n\n\nmain()\n", "R = lambda:map(int, input().split())\nn = int(input())\nA = list(R())\nif n == 1 or n == 2:\n\tprint(0)\n\tquit()\nminn = int(1e9 + 1)\nfor i in range(-1,2):\n\tfor j in range(-1, 2):\n\t\tif (A[0] + i - A[-1] - j) % (n - 1):\n\t\t\tcontinue\n\t\tf = A[0] + i\n\t\tg = A[-1] + j\n\t\tcnt = abs(i) + abs(j)\n\t\td = (g - f) // (n - 1)\n\t\tfor x in range(1, n - 1):\n\t\t\tf += d\n\t\t\tif abs(f - A[x]) > 1:\n\t\t\t\tbreak\n\t\t\telif abs(f - A[x]) == 1:\n\t\t\t\tcnt += 1\n\t\telse:\n\t\t\tminn = min(minn, cnt)\nif minn == int(1e9 + 1):\n\tprint(-1)\nelse:\n\tprint(minn)", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n in {1, 2}:\n        print(0)\n        return\n    x = arr[1] - arr[0]\n    s = {x, x - 1, x - 2, x + 1, x + 2}\n    for i in range(2, n):\n        x = arr[i] - arr[i - 1]\n        new_s = {x, x - 1, x - 2, x + 1, x + 2}\n        s = s & new_s\n        if not len(s):\n            print(-1)\n            return\n    ans = float('inf')\n    for step in s:\n        for f in [arr[0], arr[0] + 1, arr[0] - 1]:\n            new_arr = [f]\n            cnt = 0 if f == arr[0] else 1\n            for i in range(1, n):\n                new_arr.append(new_arr[-1] + step)\n                if abs(new_arr[-1] - arr[i]) > 1:\n                    cnt = float('inf')\n                    break\n                if new_arr[-1] != arr[i]:\n                    cnt += 1\n            ans = min(ans, cnt)\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()"]