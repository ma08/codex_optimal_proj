["from collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())  # noqa\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())  # noqa\n    print(solve(n, m, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\n\nfrom collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nn, m, D = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    u, v = [int(x) for x in input().split()]\n    edges.append((u, v))\n    edges.append((v, u))\n\nif D > n - 1 or D < 1 or not m >= n - 1:\n    print(\"NO\")\n    exit()\n\nif D == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\nif D == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][1], edges[0][0])\n        print(edges[1][1], edges[1][0])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][1], edges[0][0])\n            print(edges[1][1], edges[1][0])\n            print(edges[3][1], edges[3][0])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][1], edges[0][0])\n            print(edges[1][1], edges[1][0])\n            print(edges[2][1], edges[2][0])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][1], edges[0][0])\n            print(edges[1][1], edges[1][0])\n            print(edges[2][1], edges[2][0])\n            print(edges[4][1], edges[4][0])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][1], edges[0][0])\n            print(edges[1][1], edges[1][0])\n            print(edges[2][1], edges[2][0])\n            print(edges[3][1], edges[3][0])\n            print(edges[5][1], edges[5][0])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n", "from collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())  # python3\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())  # python3\n    print(solve(n, m, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, m, D = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or m < n - 1:\n    print(\"NO\")\n    exit()\n\nif D == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\nn, m, D = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or not m >= n - 1:\n    print(\"NO\")\n    exit()\n\nif D == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n", "\n\nfrom collections import defaultdict\n\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\nif __name__ == '__main__':\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n    print(solve(n, m, d))\n", "from collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\nn, m, D = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or not m >= n - 1:\n    print(\"NO\")\n    exit()\n\nif D == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n", "import sys\nsys.setrecursionlimit(10**6)\n\nn, m, D = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or not m >= n - 1:\n    print(\"NO\")\n    exit()\n\nif D == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n"]