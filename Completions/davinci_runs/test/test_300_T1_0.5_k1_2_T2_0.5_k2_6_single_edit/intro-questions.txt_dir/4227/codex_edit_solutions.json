["\n# fix syntax error\nimport sys\nsys.setrecursionlimit(10**6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n", "import sys\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n", "\nimport sys\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\nMOD = 10 ** 9 + 7\nN, M = map(int, input().split())  # N:\u9802\u70b9\u306e\u6570 M:\u8fba\u306e\u6570\ntree = [[] for _ in range(N)]  # \u96a3\u63a5\u30ea\u30b9\u30c8\nfor _ in range(M):  # \u6728\u3092\u4f5c\u308b\n    a, b = map(int, input().split())  # a, b:\u9802\u70b9\n    tree[a - 1].append(b - 1)  # a\u306e\u96a3\u63a5\u30ea\u30b9\u30c8\u306bb\u3092\u8ffd\u52a0\n    tree[b - 1].append(a - 1)  # b\u306e\u96a3\u63a5\u30ea\u30b9\u30c8\u306ba\u3092\u8ffd\u52a0\ndef dfs(v, visited):  # v:\u4eca\u3044\u308b\u9802\u70b9 visited:\u8a2a\u554f\u6e08\u307f\u306e\u9802\u70b9\n    visited.add(v)  # v\u3092\u8a2a\u554f\u6e08\u307f\u306b\u3059\u308b\n    for child in tree[v]:  # v\u306e\u96a3\u63a5\u9802\u70b9\u3092\u8abf\u3079\u308b\n        if child not in visited:  # \u8a2a\u554f\u6e08\u307f\u3067\u306a\u3044\u306a\u3089\n            dfs(child, visited)  # child\u306b\u5bfe\u3057\u3066\u518d\u5e30\nvisited = set()  # \u8a2a\u554f\u6e08\u307f\u306e\u9802\u70b9\u306e\u96c6\u5408\ndfs(0, visited)  # 0\u304b\u3089\u518d\u5e30\nif len(visited) != N:  # \u8a2a\u554f\u6e08\u307f\u306e\u9802\u70b9\u306e\u6570\u304cN\u3068\u4e00\u81f4\u3057\u306a\u3044\u306a\u3089\n    print(0)  # \u5206\u5c90\u6570\u306f0\n    sys.exit()  # \u7d42\u4e86\nans = 1  # \u5206\u5c90\u6570\nfor i in range(N):  # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\n    if i == 0:  # i\u304c0\u306a\u3089\n        continue  # \u30b9\u30ad\u30c3\u30d7\n    if len(tree[i]) > 1:  # i\u306e\u96a3\u63a5\u9802\u70b9\u306e\u6570\u304c2\u4ee5\u4e0a\u306a\u3089\n        ans *= len(tree[i])  # \u5206\u5c90\u6570\u306bi\u306e\u96a3\u63a5\u9802\u70b9\u306e\u6570\u3092\u639b\u3051\u308b\n        ans %= MOD  # ans\u3092MOD\u3067\u5272\u3063\u305f\u4f59\u308a\u3092ans\u306b\u5165\u308c\u308b\nprint(ans)  # \u5206\u5c90\u6570\u3092\u51fa\u529b\n", "\n\n\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n", "\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n", "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())  # a, b = list(map(int, input().split()))\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()  # exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n", "import math\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n        ans %= (10**9 + 7)\n\nprint(ans)\n", "\nimport math\nimport sys\nsys.setrecursionlimit(10**6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N+1)]\nfor _ in range(M):\n    a, b = map(int, input().split()) \n    tree[a].append(b)\n    tree[b].append(a)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n", "# coding: utf-8\n\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n"]