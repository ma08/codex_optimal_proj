2022-04-19 04:40:58.948633 num operations 1
2022-04-19 04:40:58.948649 size on input set 1
2022-04-19 04:41:02.596758 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 3,
      "text": "# coding: utf-8\n\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 4,
      "text": "import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 5,
      "text": "\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    }
  ],
  "created": 1650343259,
  "object": "edit"
}
2022-04-19 04:41:02.597059 fix syntax errors 6 ['import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\n\nimport math\n\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '# coding: utf-8\n\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', 'import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n']
2022-04-19 04:41:02.597106 size on output set 4
2022-04-19 04:41:02.597122 num operations 1
2022-04-19 04:41:02.597130 size on input set 1
2022-04-19 04:41:07.475499 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport unittest\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if A % B == 0:\n        return A // B\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    }
  ],
  "created": 1650343262,
  "object": "edit"
}
2022-04-19 04:41:07.475757 fix syntax errors 6 ["\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if A % B == 0:\n        return A // B\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"]
2022-04-19 04:41:07.475794 size on output set 4
