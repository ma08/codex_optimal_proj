2022-04-19 05:06:55.716110 num operations 1
2022-04-19 05:06:55.716130 size on input set 1
2022-04-19 05:07:07.863333 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    pass\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a) * x\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res * x\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(n, a):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a[0]\n    elif n == 2:\n        return a[0] + a[1]\n    else:\n        dp = [0]*n\n        dp[0] = a[0]\n        dp[1] = a[0] + a[1]\n        for i in range(2, n):\n            dp[i] = max(dp[i-1], dp[i-2]+a[i])\n        return dp[n-1]\n"
    },
    {
      "index": 4,
      "text": "\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650344815,
  "object": "edit"
}
2022-04-19 05:07:07.863654 fix syntax errors 6 ['\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    pass\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a) * x\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res * x\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, a):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a[0]\n    elif n == 2:\n        return a[0] + a[1]\n    else:\n        dp = [0]*n\n        dp[0] = a[0]\n        dp[1] = a[0] + a[1]\n        for i in range(2, n):\n            dp[i] = max(dp[i-1], dp[i-2]+a[i])\n        return dp[n-1]\n', '\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-19 05:07:07.863718 size on output set 4
2022-04-19 05:07:07.863732 num operations 1
2022-04-19 05:07:07.863739 size on input set 1
2022-04-19 05:07:26.039038 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j]. If we choose this option then we are at the end of the (i // k) - th segment of length k.\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j] + a[i - 1].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 3,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the ith segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + ai.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + ai.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + ai.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 4,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j] + a[i - 1].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 5,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    }
  ],
  "created": 1650344827,
  "object": "edit"
}
2022-04-19 05:07:26.039419 fix syntax errors 6 ["\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j]. If we choose this option then we are at the end of the (i // k) - th segment of length k.\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j] + a[i - 1].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the ith segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + ai.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + ai.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + ai.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j] + a[i - 1].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"]
2022-04-19 05:07:26.039552 size on output set 5
