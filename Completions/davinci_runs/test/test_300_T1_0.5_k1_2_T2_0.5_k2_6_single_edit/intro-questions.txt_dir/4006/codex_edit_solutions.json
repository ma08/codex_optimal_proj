["\n\ndef main():\n    f_in = open(\"f.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n) + is_reachable(n-2, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n = n + 1\n    while n % 10 == 0 and n > 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"file.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"f.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n - 1) + is_reachable(n - 1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n // 10, m)\n    return is_reachable(n - 1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "def f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"file.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n, 0))\n\ndef count_reachable(n, m):\n    if n == 1:\n        return 2\n    return count_reachable(n-1, m) + is_reachable(n-1, m)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n = str(n + 1)\n    while n.endswith('0'):\n        n = n[:-1]\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    f_in = open(\"f.in\", \"r\")  # open file\n    n = int(f_in.readline())  # read first line\n    print(count_reachable(n))  # print result\n\ndef count_reachable(n):\n    if n == 1:  # base case\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)  # recursive case\n\ndef is_reachable(n, m):\n    if n == m:  # base case\n        return 1\n    if n < 1:  # base case\n        return 0\n    if n % 10 == 0:  # recursive case\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)  # recursive case\n\nif __name__ == \"__main__\":\n    main()  # call main function\n"]