2022-04-19 05:18:09.715312 num operations 1
2022-04-19 05:18:09.715332 size on input set 1
2022-04-19 05:18:16.277881 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(n, m, grid):\n    return 0\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef solve(n, m, grid):\n    return 0\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef solve(n, m, grid):\n    return 1\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n\ndef solve(n, m, k, grid):\n\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650345489,
  "object": "edit"
}
2022-04-19 05:18:16.278170 fix syntax errors 6 ["\n\ndef solve(n, m, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, grid):\n    return 0\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, grid):\n    return 0\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, grid):\n    return 1\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef solve(n, m, k, grid):\n\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-19 05:18:16.278217 size on output set 5
2022-04-19 05:18:16.278230 num operations 1
2022-04-19 05:18:16.278236 size on input set 1
2022-04-19 05:18:31.821116 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution by Andrew Xing, edited by Andrew Xing\n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n\n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n\n    print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution by Andrew Xing, edited by Ryan McAvoy\n\ndef main():  \n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n    \n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n    \n    print(dp[n][m][k])\n\nif __name__ == \"__main__\":  \n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n# Solution by Andrew Xing, edited by Andrew Wang\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 4,
      "text": "\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()] # n: rows, m: cols, k: target\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)] # dp[i][j][x]: # of ways to get to square (i,j) with xor of values being x\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 5,
      "text": "\n\n# Solution by Andrew Xing, submitted on December 19, 2018\n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n    \n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n    \n    print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650345496,
  "object": "edit"
}
2022-04-19 05:18:31.821398 fix syntax errors 6 ['\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n\n# Solution by Andrew Xing, edited by Andrew Xing\n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n\n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n\n    print(dp[n][m][k])\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Solution by Andrew Xing, edited by Ryan McAvoy\n\ndef main():  \n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n    \n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n    \n    print(dp[n][m][k])\n\nif __name__ == "__main__":  \n    main()\n', '\n\n# Solution by Andrew Xing, edited by Andrew Wang\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()] # n: rows, m: cols, k: target\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)] # dp[i][j][x]: # of ways to get to square (i,j) with xor of values being x\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n\n# Solution by Andrew Xing, submitted on December 19, 2018\n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n    \n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n    \n    print(dp[n][m][k])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-19 05:18:31.821569 size on output set 6
