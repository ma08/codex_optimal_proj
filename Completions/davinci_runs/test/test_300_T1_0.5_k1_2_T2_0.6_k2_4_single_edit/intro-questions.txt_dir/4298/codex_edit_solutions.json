["\n\nN, D = map(int, input().split())\n\nprint(N//(D*2+1) + 1)\n", "\n\nimport math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (D * 2 + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\nN, D = map(int, input().split())\n\nprint(N // (D * 2 + 1))\n", "\nN, D = map(int, input().split())\n\nprint((N+D*2)//(D*2+1))\n", "\n\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\nN, D = map(int, input().split())\n\nprint(N//(D*2+1))\n", "import math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "import math\nimport itertools\nimport collections\nimport bisect\nimport heapq\nimport fractions\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bisect\nimport heapq\nimport fractions\nimport collections\nimport math\nimport sys\nimport bis\n\n\nimport math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n"]