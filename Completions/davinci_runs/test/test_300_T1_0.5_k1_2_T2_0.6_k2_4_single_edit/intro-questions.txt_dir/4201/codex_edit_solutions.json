["\ndef paint_red(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n", "\n\n\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n# tests\ntest()\n", "def main():\n    n, k = map(int, input().split())\n    x = [0] + list(map(int, input().split())) + [0]\n\n\n    ans = float('inf')\n    for i in range(n - k + 1):\n        left = x[i]\n        right = x[i + k]\n        ans = min(ans, abs(left) + abs(right - left), abs(right) + abs(right - left))\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n3 3\n-30 -10 10\n\"\"\"\n    out = \"\"\"\\\n20\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n", "\n\ndef paint_red(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1 \n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n", "\n\ndef paint_red(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K: ans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n", "\n\nn = int(input())\ns = input()\n\ns = s.replace('BC', 'D')\n\nans = 0\ncnt = 0\nfor c in s:\n\tif c == 'A':\n\t\tcnt += 1\n\telif c == 'D':\n\t\tans += cnt\n\telse:\n\t\tcnt = 0\n\nprint(ans)\n", "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"]