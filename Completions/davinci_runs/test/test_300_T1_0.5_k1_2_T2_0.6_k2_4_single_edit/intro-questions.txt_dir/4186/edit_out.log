2022-04-22 08:39:48.965236 num operations 1
2022-04-22 08:39:48.965255 size on input set 1
2022-04-22 08:39:48.965427 using api key soukgp
2022-04-22 08:39:56.149377 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0 \nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# d = {}\n# for i in a:\n#     if i in d:\n#         d[i] += 1\n#     else:\n#         d[i] = 1\n#\n# ans = 0\n# for i in d:\n#     ans += d[i] - 2\n#\n# print(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += max(d[i] - 2, 0)\n\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] // 2\n\nprint(ans)\n"
    }
  ],
  "created": 1650616789,
  "object": "edit"
}
2022-04-22 08:39:56.149659 fix syntax errors 4 ['\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0 \nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n', '\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# d = {}\n# for i in a:\n#     if i in d:\n#         d[i] += 1\n#     else:\n#         d[i] = 1\n#\n# ans = 0\n# for i in d:\n#     ans += d[i] - 2\n#\n# print(ans)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += max(d[i] - 2, 0)\n\nprint(ans)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] // 2\n\nprint(ans)\n']
2022-04-22 08:39:56.149692 size on output set 4
2022-04-22 08:39:56.149704 num operations 1
2022-04-22 08:39:56.149712 size on input set 1
2022-04-22 08:39:56.149861 using api key soukgp
2022-04-22 08:40:10.010136 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = [(i, skill_list.count(i)) for i in range(min_skill, max(skill_list) + 1)]\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list)):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for skill, count in skill_counts:\n        if count <= n: # if there aren't enough students with this skill,\n                       # then we need to add n-count students of the skill\n            min_students += (n - count) \n            n = count # update the number of students needed\n        else:\n            min_students += n # otherwise, we only need to add n students of the skill\n            break\n\n    print(min_students)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\nfrom sys import stdin\n\nn = int(stdin.readline())\nskill_list = [int(x) for x in stdin.readline().split()]\nmin_skill = min(skill_list)\n\n# create a list of tuples of each skill and the number of students\n# with that skill\nskill_counts = []\nfor i in range(min_skill, max(skill_list) + 1):\n    skill_counts.append((i, skill_list.count(i)))\n\n# sort the skill counts by the number of students with that skill\nskill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]    \n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min(skill_list), max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for skill, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n"
    }
  ],
  "created": 1650616796,
  "object": "edit"
}
2022-04-22 08:40:10.010392 fix syntax errors 4 ['\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = [(i, skill_list.count(i)) for i in range(min_skill, max(skill_list) + 1)]\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n', "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list)):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for skill, count in skill_counts:\n        if count <= n: # if there aren't enough students with this skill,\n                       # then we need to add n-count students of the skill\n            min_students += (n - count) \n            n = count # update the number of students needed\n        else:\n            min_students += n # otherwise, we only need to add n students of the skill\n            break\n\n    print(min_students)\n\nmain()\n", '\nfrom sys import stdin\n\nfrom sys import stdin\n\nn = int(stdin.readline())\nskill_list = [int(x) for x in stdin.readline().split()]\nmin_skill = min(skill_list)\n\n# create a list of tuples of each skill and the number of students\n# with that skill\nskill_counts = []\nfor i in range(min_skill, max(skill_list) + 1):\n    skill_counts.append((i, skill_list.count(i)))\n\n# sort the skill counts by the number of students with that skill\nskill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]    \n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min(skill_list), max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for skill, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n']
2022-04-22 08:40:10.010569 size on output set 4
