["\n\n\n# AtCoder Beginner Contest 171\n# Problem C\n# https://atcoder.jp/contests/abc171/tasks/abc171_c\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    for i in range(M):\n        odd_even = 0 # \u5947\u6570\u306a\u30891, \u5076\u6570\u306a\u30890\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]: # \u70b9\u706f\u3059\u308b\u30b9\u30a4\u30c3\u30c1\u304c\u5947\u6570\u306a\u30891, \u5076\u6570\u306a\u30890\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\nimport os\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\ndef main():\n    k_list = []\n    s_list = []\n    for i in range(M):\n        k_list.append(int(sys.stdin.readline().split()[0]))\n        s_list.append(list(map(int, sys.stdin.readline().split())))\n\n    p_list = list(map(int, sys.stdin.readline().split()))\n\n    # print(N, M)\n    # print(k_list)\n    # print(s_list)\n    # print(p_list)\n\n    print(make_state([], 0))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += min(a[i], b[i])\n        b[i] -= min(a[i], b[i])\n        ans += min(a[i + 1], b[i])\n        a[i + 1] -= min(a[i + 1], b[i])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for i in range(m)]\n    states = list(map(int, input().split()))  # 0 or 1\n    switches = [[False] * n for i in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = 1\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\ndef make_light(state):\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nK_list = []\nS_list = []\nP_list = []\nfor i in range(M):\n    K_list.append(int(sys.stdin.readline().split()[0]))\n    S_list.append(list(map(int, sys.stdin.readline().split())))\n\nP_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(K_list)\n# print(S_list)\n# print(P_list)\n\ndef make_light(state):\n    # print(state)\n    i = 0\n    while i < M:\n        odd_even = sum([1 for j in range(K_list[i]) if state[S_list[i][j]-1] == 1])\n        if odd_even % 2 != P_list[i]:\n            return False\n        i += 1\n    return True\n\ndef make_state(state, n, N):\n    if n == N-1:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1, N) + make_state(state + [0], n+1, N)\n\nprint(make_state([], 0, N))\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]