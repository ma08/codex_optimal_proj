["\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\n\ndef get_max_possible_sum_cards(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum_cards(cards))\n", "\n\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\n", "# A, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\n\n# if K <= A:\n#     print(K)\n# elif K <= A+B:\n#     print(A)\n# else:\n#     print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:k])\n\na, b, c, k = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] if card[1] > 0 else 0 for card in cards[:K])\n\nA, B, C, K = map(int, input().split()) # 1 2 3 4\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n"]