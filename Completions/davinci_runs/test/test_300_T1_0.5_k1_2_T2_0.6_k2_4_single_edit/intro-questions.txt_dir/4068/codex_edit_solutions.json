["import numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nimport numpy as np\n\ndef main():\n    sys.setrecursionlimit(10**6)\n    H, W = map(int, input().split())\n    S = [list(input()) for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == \"s\":\n                start_h = i\n                start_w = j\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == \"g\":\n                goal_h = i\n                goal_w = j\n    visited = [[False] * W for _ in range(H)]\n    visited[start_h][start_w] = True\n    if dfs(start_h, start_w, goal_h, goal_w, visited, S):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndef dfs(h, w, goal_h, goal_w, visited, S):\n    if h == goal_h and w == goal_w:\n        return True\n    if h > 0 and not visited[h-1][w] and S[h-1][w] != \"#\":\n        visited[h-1][w] = True\n        if dfs(h-1, w, goal_h, goal_w, visited, S):\n            return True\n    if h < H-1 and not visited[h+1][w] and S[h+1][w] != \"#\":\n        visited[h+1][w] = True\n        if dfs(h+1, w, goal_h, goal_w, visited, S):\n            return True\n    if w > 0 and not visited[h][w-1] and S[h][w-1] != \"#\":\n        visited[h][w-1] = True\n        if dfs(h, w-1, goal_h, goal_w, visited, S):\n            return True\n    if w < W-1 and not visited[h][w+1] and S[h][w+1] != \"#\":\n        visited[h][w+1] = True\n        if dfs(h, w+1, goal_h, goal_w, visited, S):\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\n# n, m = map(int, input().split())\n# broken = set(map(int, [input() for _ in range(m)]))\n#\n# dp = [0] * (n+1)\n# dp[0] = 1\n# dp[1] = 1\n#\n# for i in range(2, n+1):\n#     if i in broken:\n#         continue\n#     dp[i] = dp[i-1] + dp[i-2]\n#\n# print(dp[n] % 1000000007)\n", "# https://www.acmicpc.net/problem/1747\n\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n", "\n\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split()) #N:\u5168\u4f53\u306e\u6bb5\u6570 M:\u58ca\u308c\u3066\u3044\u308b\u6bb5\u6570\n    broken_steps = [int(input()) for _ in range(M)]\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1 #0\u6bb5\u76ee\u306b\u306f\u7740\u5730\u3067\u304d\u308b\n    dp[1] = 1 #1\u6bb5\u76ee\u306b\u306f\u7740\u5730\u3067\u304d\u308b\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007 #\u7740\u5730\u3067\u304d\u308b\u30d1\u30bf\u30fc\u30f3\u306e\u6570\u306f\u524d\u306e\u6bb5\u306e\u7740\u5730\u30d1\u30bf\u30fc\u30f3\u3068\u305d\u306e\u524d\u306e\u6bb5\u306e\u7740\u5730\u30d1\u30bf\u30fc\u30f3\u306e\u548c\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ninput = sys.stdin.readline\n\n\nprint(dp[n] % 1000000007)\n", "\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n"]