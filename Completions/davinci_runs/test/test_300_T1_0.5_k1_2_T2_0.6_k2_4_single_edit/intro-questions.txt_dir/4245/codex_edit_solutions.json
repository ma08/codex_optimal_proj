["\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0)\n", "\n\nimport math\n\ndef minPowerStrips(a, b):\n    return math.ceil(b / a)\n\ndef main():\n    line = input().split()\n    a = int(line[0])\n    b = int(line[1])\n    print(minPowerStrips(a, b))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# import sys\n#\n# A, B = map(int, sys.stdin.readline().rstrip().split())\n# print(B // A + (B % A != 0))\n", "\n", "\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\nif __name__ == '__main__':\n    main()\n", "import sys\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0))\n", "import math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0]) # number of power strips\n    B = int(line[1]) # number of pairs of outlets\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n"]