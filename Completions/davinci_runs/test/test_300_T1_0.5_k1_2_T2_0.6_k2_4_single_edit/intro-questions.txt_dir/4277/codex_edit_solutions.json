["\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "import sys\n\nN, M = map(int, sys.stdin.readline().rstrip().split())\n\n\nlist_numbers = [list(map(int, sys.stdin.readline().rstrip().split())) for _ in range(N)]\n\n\nlist_numbers.sort(key=lambda x: x[0])\nlist_numbers.sort(key=lambda x: x[1])\n\nfor i in range(N):\n    print(list_numbers[i][0], list_numbers[i][1])\n", "\n\ndef min_expense(N, A, B):\n\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\ndef main():\n    import sys\n    N, A, B = map(int, sys.stdin.readline().rstrip().split())\n    print(min_expense(N, A, B))\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "import sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "\n\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\nif n*a > b:\n    print(b)\nelse:\n    print(n*a)\n", "\nimport sys\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n"]