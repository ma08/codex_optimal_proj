2022-04-22 08:29:48.024059 num operations 1
2022-04-22 08:29:48.024079 size on input set 1
2022-04-22 08:29:48.024271 using api key jaanu
2022-04-22 08:30:02.168561 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport numpy as np\n\nN, M = map(int, sys.stdin.readline().split())\nA = []\nfor i in range(N):\n    A.append(list(map(int, sys.stdin.readline().split())))\nB = []\nfor i in range(N):\n    B.append(list(map(int, sys.stdin.readline().split())))\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp, n):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C) or (n == N):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A: ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a), n+1))\n        if b < B: ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b), n+1))\n        if c < C: ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c), n+1))\n        if l[i] >= 2: ans = min(ans, dfs(l, a, b, c, mp-1, n+1))\n        if i+1 < len(l): l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9, n+9))\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100, 0))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 <= len(l)-1:\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        if i+1 < len(l):\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n"
    }
  ],
  "created": 1650616188,
  "object": "edit"
}
2022-04-22 08:30:02.168889 fix syntax errors 4 ["\nimport sys\nimport numpy as np\n\nN, M = map(int, sys.stdin.readline().split())\nA = []\nfor i in range(N):\n    A.append(list(map(int, sys.stdin.readline().split())))\nB = []\nfor i in range(N):\n    B.append(list(map(int, sys.stdin.readline().split())))\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp, n):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C) or (n == N):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A: ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a), n+1))\n        if b < B: ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b), n+1))\n        if c < C: ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c), n+1))\n        if l[i] >= 2: ans = min(ans, dfs(l, a, b, c, mp-1, n+1))\n        if i+1 < len(l): l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9, n+9))\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100, 0))\n", "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 <= len(l)-1:\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        if i+1 < len(l):\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n"]
2022-04-22 08:30:02.168972 size on output set 4
2022-04-22 08:30:02.168988 num operations 1
2022-04-22 08:30:02.168997 size on input set 1
2022-04-22 08:30:02.169186 using api key kouti
2022-04-22 08:30:18.556636 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    if ls[cur] - 1 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n    if ls[cur] - 2 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n    return res\nprint(dfs(0, 0, 0, 0))\n"
    },
    {
      "index": 1,
      "text": "N = int(input())\nS = [input() for _ in range(N)]\n\n\nprint(S)\n"
    },
    {
      "index": 2,
      "text": "\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    if ls[cur] >= 1:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n    if ls[cur] >= 2:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n    return res\n\nprint(dfs(0, 0, 0, 0))\n"
    },
    {
      "index": 3,
      "text": "import heapq\n\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n    if cur == N:\n        return float('inf')\n    if cur == N - 1:\n        if a == 0 or b == 0 or c == 0:\n            return float('inf')\n        if a == A and b == B and c == C:\n            return 0\n        else:\n            return abs(a - A) + abs(b - B) + abs(c - C) - 30\n    return min(\n        dfs(cur + 1, a + ls[cur], b, c) + 10,\n        dfs(cur + 1, a, b + ls[cur], c) + 10,\n        dfs(cur + 1, a, b, c + ls[cur]) + 10,\n        dfs(cur + 1, a + ls[cur] - 1, b, c) + 9,\n        dfs(cur + 1, a, b + ls[cur] - 1, c) + 9,\n        dfs(cur + 1, a, b, c + ls[cur] - 1) + 9,\n        dfs(cur + 1, a + ls[cur] - 2, b, c) + 8,\n        dfs(cur + 1, a, b + ls[cur] - 2, c) + 8,\n        dfs(cur + 1, a, b, c + ls[cur] - 2) + 8,\n        dfs(cur + 1, a, b, c) + 0,\n    )\n\nprint(dfs(0, 0, 0, 0))\n"
    }
  ],
  "created": 1650616202,
  "object": "edit"
}
2022-04-22 08:30:18.557009 fix syntax errors 4 ["\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    if ls[cur] - 1 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n    if ls[cur] - 2 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n    return res\nprint(dfs(0, 0, 0, 0))\n", 'N = int(input())\nS = [input() for _ in range(N)]\n\n\nprint(S)\n', "\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    if ls[cur] >= 1:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n    if ls[cur] >= 2:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n    return res\n\nprint(dfs(0, 0, 0, 0))\n", "import heapq\n\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n    if cur == N:\n        return float('inf')\n    if cur == N - 1:\n        if a == 0 or b == 0 or c == 0:\n            return float('inf')\n        if a == A and b == B and c == C:\n            return 0\n        else:\n            return abs(a - A) + abs(b - B) + abs(c - C) - 30\n    return min(\n        dfs(cur + 1, a + ls[cur], b, c) + 10,\n        dfs(cur + 1, a, b + ls[cur], c) + 10,\n        dfs(cur + 1, a, b, c + ls[cur]) + 10,\n        dfs(cur + 1, a + ls[cur] - 1, b, c) + 9,\n        dfs(cur + 1, a, b + ls[cur] - 1, c) + 9,\n        dfs(cur + 1, a, b, c + ls[cur] - 1) + 9,\n        dfs(cur + 1, a + ls[cur] - 2, b, c) + 8,\n        dfs(cur + 1, a, b + ls[cur] - 2, c) + 8,\n        dfs(cur + 1, a, b, c + ls[cur] - 2) + 8,\n        dfs(cur + 1, a, b, c) + 0,\n    )\n\nprint(dfs(0, 0, 0, 0))\n"]
2022-04-22 08:30:18.557060 size on output set 4
