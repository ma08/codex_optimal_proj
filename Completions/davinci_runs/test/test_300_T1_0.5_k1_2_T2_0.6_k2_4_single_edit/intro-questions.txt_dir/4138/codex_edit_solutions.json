["\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1)**2 <= k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length)//2 + 1\n    # Compute the starting value of the block\n    start = length**2 + 1\n    # Return the digit at the kth position\n    return int(str(start + k - 1)[-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k: print(solve(k_i))\n", "\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1.\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k.\n    length = 1\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks.\n    k -= (length**2 + length)//2\n    # Compute the starting value of the block.\n    start = length\n    # Return the digit at the kth position.\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input.\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries.\nfor k_i in k:\n    print(solve(k_i))\n", "\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1) **2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length ** 2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n", "\n#------------------------------------------------------------------------------#\n\ndef solve(n, k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 0:\n        return 0\n    # Otherwise, find the length of the block containing k\n    length = 0\n    while (length+1)*(2*n + length) < 2*k:\n        length += 1    \n    # Reduce k by the number of digits in all the previous blocks\n    k -= ((length + 1)*(2*n + length))//2\n    # Compute the starting value of the block\n    start = n - length\n    # Return the digit at the kth position\n    return start + k\n\n#------------------------------------------------------------------------------#\n\n# Read input\nn, q = map(int, input().split())\nk = [int(input()) - 1 for _ in range(q)]\n\n# Solve queries\nfor i in k:\n    print(solve(n, i))\n"]