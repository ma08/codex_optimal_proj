["\n\n# -----Answer-----\nx, y = map(int, input().split())\n\nif y % 2 == 0:\n    if (x * 2 + 4) / 2 == y:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")\n", "\n\n# -----Answer-----\nx, y = map(int, input().split())\n\nif x * 2 <= y <= x * 4:\n    if y % 2 == 0:\n        print(\"Yes\")\nelse:\n    print(\"No\")\n\n# -----Other Answer-----\nx, y = map(int, input().split())\n\nif x * 2 <= y <= x * 4:\n    if y % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")\n", "\nx, y = map(int, input().split())\n\nif y % 2 == 0 and x * 2 <= y and y <= x * 4:\n    print('Yes')\nelse:\n    print('No')\n", "\n\n# -----Answer-----\nx, y = map(int, input().split()) #x,y is input\n\nif y % 2 == 0: # y is even\n    if (x * 2 + 4) / 2 == y:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\") # y is odd\n\n# -----Other Answer-----\nx, y = map(int, input().split()) #x,y is input\n\nif x * 2 <= y <= x * 4: # x*2 <= y <= x*4\n    if y % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")\n", "\n# -----Answer-----\nx, y = map(int, input().split())\n\nif y % 2 == 0:\n    if (x * 2 + 4) / 2 == y:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")\n\n# -----Other Answer-----\nx, y = map(int, input().split())\n\nif x * 2 <= y <= x * 4:\n    if y % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")\n", "\n\n\nx, y = map(int, input().split())\n\nif y % 2 == 0 and x * 2 <= y and y <= x * 4:\n    print('Yes')\nelse:\n    print('No')\n", "import sys\nsys.setrecursionlimit(99999999)\n\n\ndef dfs(y, x, color, pre_color, N, M, grid):\n    if y < 0 or x < 0 or y >= N or x >= M:\n        return\n    if grid[y][x] != pre_color:\n        return\n    if grid[y][x] == color:\n        return\n    grid[y][x] = color\n    dfs(y+1, x, color, pre_color, N, M, grid)\n    dfs(y-1, x, color, pre_color, N, M, grid)\n    dfs(y, x+1, color, pre_color, N, M, grid)\n    dfs(y, x-1, color, pre_color, N, M, grid)\n\n\ndef solve(N, M, grid, Q, query):\n    for i in range(Q):\n        pre_color = grid[query[i][1] - 1][query[i][0] - 1]\n        dfs(query[i][1] - 1, query[i][0] - 1, query[i][2], pre_color, N, M, grid)\n    for i in range(N):\n        print(' '.join(map(str, grid[i])))\n\n\n\ngrid = [list(map(int, input().split())) for _ in range(y)]\nQ = int(input())\nquery = [list(map(int, input().split())) for _ in range(Q)]\nx, y = map(int, input().split())\n\nif y % 2 == 0 and x * 2 <= y and y <= x * 4:\n    print('Yes')\nelse:\n    print('No')\n"]