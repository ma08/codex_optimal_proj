2022-04-22 07:57:15.028332 num operations 1
2022-04-22 07:57:15.028351 size on input set 1
2022-04-22 07:57:15.028536 using api key soukgp
2022-04-22 07:57:20.694085 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    if(n == 1 and k == 1):\n        print(\"YES\")\n        print(\"1\", end=\" \")\n    elif(n < k):\n        print(\"NO\")\n    elif(n > k):\n        a = [1]\n        for i in range(k - 1):\n            a.append(2 * a[i])\n        if(sum(a) == n):\n            print(\"YES\")\n            print(\" \".join(map(str, a)), end=\" \")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    if(n == 1 and k == 1):\n        print(\"YES\")\n        print(\"1\")\n    elif(n < k):\n        print(\"NO\")\n    elif(n >= k):\n        a = [1]\n        for i in range(k - 1):\n            a.append(2 * a[i])\n        if(sum(a) == n):\n            print(\"YES\")\n            print(\" \".join(map(str, a)))\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    if(n == 1 and k == 1):\n        print(\"YES\")\n        print(\"1\")\n    elif(n < k):\n        print(\"NO\")\n    elif(n > k):\n        a = [1]\n        for i in range(k-1):\n            a.append(2 * a[i])\n        if(sum(a) == n):\n            print(\"YES\")\n            print(\" \".join(map(str, a)))\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "def main():\n    n, k = map(int, input().split())\n    if n == 1 and k == 1:\n        print(\"YES\")\n        print(\"1\")\n    elif n < k:\n        print(\"NO\")\n    elif n > k:\n        a = [1]\n        for i in range(k - 1):\n            a.append(2 * a[i])\n        if sum(a) == n:\n            print(\"YES\")\n            print(\" \".join(map(str, a)))\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650614235,
  "object": "edit"
}
2022-04-22 07:57:20.694454 fix syntax errors 4 ['\ndef main():\n    n, k = map(int, input().split())\n    if(n == 1 and k == 1):\n        print("YES")\n        print("1", end=" ")\n    elif(n < k):\n        print("NO")\n    elif(n > k):\n        a = [1]\n        for i in range(k - 1):\n            a.append(2 * a[i])\n        if(sum(a) == n):\n            print("YES")\n            print(" ".join(map(str, a)), end=" ")\n        else:\n            print("NO")\n    else:\n        print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, k = map(int, input().split())\n    if(n == 1 and k == 1):\n        print("YES")\n        print("1")\n    elif(n < k):\n        print("NO")\n    elif(n >= k):\n        a = [1]\n        for i in range(k - 1):\n            a.append(2 * a[i])\n        if(sum(a) == n):\n            print("YES")\n            print(" ".join(map(str, a)))\n        else:\n            print("NO")\n    else:\n        print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, k = map(int, input().split())\n    if(n == 1 and k == 1):\n        print("YES")\n        print("1")\n    elif(n < k):\n        print("NO")\n    elif(n > k):\n        a = [1]\n        for i in range(k-1):\n            a.append(2 * a[i])\n        if(sum(a) == n):\n            print("YES")\n            print(" ".join(map(str, a)))\n        else:\n            print("NO")\n    else:\n        print("NO")\n\nif __name__ == "__main__":\n    main()\n', 'def main():\n    n, k = map(int, input().split())\n    if n == 1 and k == 1:\n        print("YES")\n        print("1")\n    elif n < k:\n        print("NO")\n    elif n > k:\n        a = [1]\n        for i in range(k - 1):\n            a.append(2 * a[i])\n        if sum(a) == n:\n            print("YES")\n            print(" ".join(map(str, a)))\n        else:\n            print("NO")\n    else:\n        print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-22 07:57:20.694502 size on output set 4
2022-04-22 07:57:20.694515 num operations 1
2022-04-22 07:57:20.694554 size on input set 1
2022-04-22 07:57:20.694699 using api key kouti
2022-04-22 07:58:00.474829 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef find_min_arr(n, k):\n    arr = [1] * k\n    for i in range(k - 1, -1, -1):\n        if sum(arr) > n:\n            arr[i] -= sum(arr) - n\n        if arr[i] == 0:\n            return False\n        if i == 0:\n            break\n        if arr[i] > arr[i - 1] * 2:\n            arr[i - 1] = arr[i] // 2\n\n    return arr\n\nn, k = [int(x) for x in input().split()]\narr = find_min_arr(n, k)\nif arr:\n    print(\"YES\")\n    print(*arr)\nelse:\n    print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\ndef find_min_arr(n, k):\n    arr = [1] * k\n    for i in range(k - 1, -1, -1):\n        if sum(arr) > n:\n            arr[i] -= sum(arr) - n\n        if arr[i] == 0:\n            return False\n        if i == 0:\n            break\n        if arr[i] > arr[i - 1] * 2:\n            arr[i - 1] = arr[i] // 2\n\n    return arr\n\nn, k = [int(x) for x in input().split()]\narr = find_min_arr(n, k)\nif arr:\n    print(\"YES\")\n    print(*arr)\nelse:\n    print(\"NO\")\n"
    },
    {
      "index": 2,
      "text": "\nprint('hello')\n"
    },
    {
      "index": 3,
      "text": "def partition(arr, left, right):\n    i = left\n    j = right\n    pivot = arr[left]\n    while i <= j:\n        while arr[i] < pivot:\n            i += 1\n        while arr[j] > pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return i\n\n\ndef quick_sort(arr, left, right):\n    if left < right:\n        idx = partition(arr, left, right)\n        quick_sort(arr, left, idx - 1)\n        quick_sort(arr, idx, right)\n\narr = [2, 1, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2\n"
    }
  ],
  "created": 1650614240,
  "object": "edit"
}
2022-04-22 07:58:00.475194 fix syntax errors 4 ['\ndef find_min_arr(n, k):\n    arr = [1] * k\n    for i in range(k - 1, -1, -1):\n        if sum(arr) > n:\n            arr[i] -= sum(arr) - n\n        if arr[i] == 0:\n            return False\n        if i == 0:\n            break\n        if arr[i] > arr[i - 1] * 2:\n            arr[i - 1] = arr[i] // 2\n\n    return arr\n\nn, k = [int(x) for x in input().split()]\narr = find_min_arr(n, k)\nif arr:\n    print("YES")\n    print(*arr)\nelse:\n    print("NO")\n', '\ndef find_min_arr(n, k):\n    arr = [1] * k\n    for i in range(k - 1, -1, -1):\n        if sum(arr) > n:\n            arr[i] -= sum(arr) - n\n        if arr[i] == 0:\n            return False\n        if i == 0:\n            break\n        if arr[i] > arr[i - 1] * 2:\n            arr[i - 1] = arr[i] // 2\n\n    return arr\n\nn, k = [int(x) for x in input().split()]\narr = find_min_arr(n, k)\nif arr:\n    print("YES")\n    print(*arr)\nelse:\n    print("NO")\n', "\nprint('hello')\n", 'def partition(arr, left, right):\n    i = left\n    j = right\n    pivot = arr[left]\n    while i <= j:\n        while arr[i] < pivot:\n            i += 1\n        while arr[j] > pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return i\n\n\ndef quick_sort(arr, left, right):\n    if left < right:\n        idx = partition(arr, left, right)\n        quick_sort(arr, left, idx - 1)\n        quick_sort(arr, idx, right)\n\narr = [2, 1, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2\n']
2022-04-22 07:58:00.475250 size on output set 3
