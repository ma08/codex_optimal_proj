["\n#------------------------------------------------------------------------------#\n\n#------------------------------------------------------------------------------#\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n\n    edges = [0] * (n - 1)\n    for i in range(n - 1):\n        edges[i] = list(map(int, sys.stdin.readline().split()))\n\n    print(solve(n, k, edges))\n\ndef solve(n, k, edges):\n    # TODO: Implement solution\n    pass\n\n#------------------------------------------------------------------------------#\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, k = map(int, input().split())\n\ndef dfs(v, p):\n    s = 1\n    for u in g[v]:\n        if u == p:\n            continue\n        s += dfs(u, v)\n    if s > k:\n        return s - 1\n    return s\n\ng = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    g[a].append(b)\n    g[b].append(a)\n\nk -= 1\ndfs(0, -1)\nprint(k + 1)\nfor i in range(n - 1):\n    print(i % (k + 1) + 1, end = ' ')\n", "\n#!/usr/bin/env python3\n\n#------------------------------------------------------------------------------#\n\n\nimport sys\nimport math\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n\n    edges = [0] * (n - 1)\n    for i in range(n - 1):\n    # n = 2 * 10 ** 5\n    # k = 2 * 10 ** 5\n    # edges = [0] * (n - 1)\n    # for i in range(n - 1):\n    #     edges[i] = [i + 1, i + 2]\n        edges[i] = list(map(int, sys.stdin.readline().split()))\n\n    print(solve(n, k, edges))\n\ndef solve(n, k, edges):\n    #\n    # Initialization\n    #\n    parent = [0] * n\n    left = [0] * n\n    right = [0] * n\n    depth = [0] * n\n    size = [0] * n\n\n    for i in range(n):\n        parent[i] = i\n        left[i] = i\n        right[i] = i\n        depth[i] = 0\n        size[i] = 1\n\n    #\n    # Construction of the tree\n    #\n    for i in range(n - 1):\n        u, v = edges[i]\n        u -= 1\n        v -= 1\n        parent[v] = u\n        left[u] = min(left[u], left[v])\n        right[u] = max(right[u], right[v])\n        size[u] += size[v]\n\n    #\n    # Calculation of the depth\n    #\n    for i in range(n):\n        v = i\n        while v != parent[v]:\n            depth[v] += 1\n            v = parent[v]\n\n    #\n    # TODO: Calculate the answer\n    #\n    ans = 0\n\n    return ans\n\n\n\n\n\n#------------------------------------------------------------------------------#\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nn, k = map(int, input().split())\n\ndef dfs(v, p):\n    global k\n    s = 1\n    for u in g[v]:\n        if u == p:\n            continue\n        s += dfs(u, v)\n    if s > k:\n        k -= 1\n        return 0\n    return s\n\ng = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    g[a].append(b)\n    g[b].append(a)\n\ndfs(0, -1)\nprint(k)\nfor i in range(n - 1):\n    print(i % k + 1, end=' ')\n", "\nprint('Hello')\n", "\n# -*- coding: utf-8 -*-\n\n#------------------------------------------------------------------------------#\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n\n    edges = [0] * (n - 1)\n    for i in range(n - 1):\n        edges[i] = list(map(int, sys.stdin.readline().split()))\n\n    print(solve(n, k, edges))\n\ndef solve(n, k, edges):\n    # TODO: Implement solution.\n    pass\n\n#------------------------------------------------------------------------------#\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, k = map(int, input().split())\n\ndef dfs(v, p):\n    global k\n    s = 1\n    for u in g[v]:\n        if u == p:\n            continue\n        s += dfs(u, v)\n    if s > k:\n        k -= 1\n        return 0\n    return s\n\ng = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    g[a].append(b)\n    g[b].append(a)\n\ndfs(0, -1)\nprint(k)\nfor i in range(n - 1):\n    print(i % k + 1, end=' ')\n", "\n#------------------------------------------------------------------------------#\n\nimport sys\n    pass # TODO: Implement solution\n\n#------------------------------------------------------------------------------#\n\nif __name__ == \"__main__\":\n    pass # TODO: Implement input parsing\n"]