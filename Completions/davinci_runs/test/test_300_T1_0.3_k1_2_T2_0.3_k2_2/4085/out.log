2022-04-18 20:12:56.901480 """
We guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.

Your task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.

You have to answer $t$ independent queries.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 25$) — the number of queries. Then $t$ queries follow.

The first line of the query contains one integer $n$ ($1 \le n \le 300$) — the number of divisors in the list.

The second line of the query contains $n$ integers $d_1, d_2, \dots, d_n$ ($2 \le d_i \le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.


-----Output-----

For each query print the answer to it.

If the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.


-----Example-----
Input
2
8
8 2 12 6 4 24 16 3
1
2

Output
48
4
"""
2022-04-18 20:12:56.901504 --------------------------
2022-04-18 20:14:20.029842 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(math.sqrt(n)) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef is_prime_factor(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(math.sqrt(n)) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef get_prime_factors(n):\n    if n == 2:\n        return [2]\n    if n % 2 == 0 or n <= 1:\n        return []\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = []\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            prime_factors.append(divisor)\n    return prime_factors\n\ndef get_prime_factors_dict(n):\n    if n == 2:\n        return {2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            prime_factors[divisor] = 1\n    return prime_factors\n\ndef get_prime_factors_dict_with_powers(n):\n    if n == 2:\n        return {2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            prime_factors[divisor] = 1\n            while n % divisor == 0:\n                prime_factors[divisor] += 1\n                n = n / divisor\n    return prime_factors\n\ndef get_prime_factors_with_powers(n):\n    if n == 2:\n        return [(2, 1)]\n    if n % 2 == 0 or n <= 1:\n        return []\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = []\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            prime_factors.append((divisor, power))\n    return prime_factors\n\ndef get_prime_factors_with_powers_dict(n):\n    if n == 2:\n        return {2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            prime_factors[divisor] = power\n    return prime_factors\n\ndef get_all_factors(n):\n    if n == 2:\n        return [1, 2]\n    if n % 2 == 0 or n <= 1:\n        return []\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = []\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            factors.append(divisor)\n            factors.append(n / divisor)\n    return factors\n\ndef get_all_factors_dict(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            factors[divisor] = 1\n            factors[n / divisor] = 1\n    return factors\n\ndef get_all_factors_dict_with_powers(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            factors[divisor] = 1\n            factors[n / divisor] = 1\n            while n % divisor == 0:\n                factors[divisor] += 1\n                n = n / divisor\n    return factors\n\ndef get_all_factors_with_powers(n):\n    if n == 2:\n        return [(1, 1), (2, 1)]\n    if n % 2 == 0 or n <= 1:\n        return []\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = []\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors.append((divisor, power))\n            factors.append((n / divisor, power))\n    return factors\n\ndef get_all_factors_with_powers_dict(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_2(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_3(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_4(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_5(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_6(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_7(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_8(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_9(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_10(n):\n    if n == 2:\n        return {1:"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        divisors = list(map(int, input().split()))\n        divisors.sort()\n        if divisors[0] == 2:\n            print(2 * divisors[-1])\n        else:\n            print(-1)\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650312777,
  "id": "cmpl-4yS1xY6p8QgQnjqVMCS9dL1yv3YZD",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 20:14:20.030302 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(math.sqrt(n)) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef is_prime_factor(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(math.sqrt(n)) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef get_prime_factors(n):\n    if n == 2:\n        return [2]\n    if n % 2 == 0 or n <= 1:\n        return []\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = []\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            prime_factors.append(divisor)\n    return prime_factors\n\ndef get_prime_factors_dict(n):\n    if n == 2:\n        return {2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            prime_factors[divisor] = 1\n    return prime_factors\n\ndef get_prime_factors_dict_with_powers(n):\n    if n == 2:\n        return {2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            prime_factors[divisor] = 1\n            while n % divisor == 0:\n                prime_factors[divisor] += 1\n                n = n / divisor\n    return prime_factors\n\ndef get_prime_factors_with_powers(n):\n    if n == 2:\n        return [(2, 1)]\n    if n % 2 == 0 or n <= 1:\n        return []\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = []\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            prime_factors.append((divisor, power))\n    return prime_factors\n\ndef get_prime_factors_with_powers_dict(n):\n    if n == 2:\n        return {2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    prime_factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            prime_factors[divisor] = power\n    return prime_factors\n\ndef get_all_factors(n):\n    if n == 2:\n        return [1, 2]\n    if n % 2 == 0 or n <= 1:\n        return []\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = []\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            factors.append(divisor)\n            factors.append(n / divisor)\n    return factors\n\ndef get_all_factors_dict(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            factors[divisor] = 1\n            factors[n / divisor] = 1\n    return factors\n\ndef get_all_factors_dict_with_powers(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            factors[divisor] = 1\n            factors[n / divisor] = 1\n            while n % divisor == 0:\n                factors[divisor] += 1\n                n = n / divisor\n    return factors\n\ndef get_all_factors_with_powers(n):\n    if n == 2:\n        return [(1, 1), (2, 1)]\n    if n % 2 == 0 or n <= 1:\n        return []\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = []\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors.append((divisor, power))\n            factors.append((n / divisor, power))\n    return factors\n\ndef get_all_factors_with_powers_dict(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_2(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_3(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_4(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_5(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_6(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_7(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_8(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_9(n):\n    if n == 2:\n        return {1: 1, 2: 1}\n    if n % 2 == 0 or n <= 1:\n        return {}\n\n    sqr = int(math.sqrt(n)) + 1\n    factors = {}\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            power = 1\n            while n % divisor == 0:\n                power += 1\n                n = n / divisor\n            factors[divisor] = power\n            factors[n / divisor] = power\n    return factors\n\ndef get_all_factors_with_powers_dict_10(n):\n    if n == 2:\n        return {1:"
}
2022-04-18 20:14:20.030477 REASON length
2022-04-18 20:14:20.030491 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        divisors = list(map(int, input().split()))\n        divisors.sort()\n        if divisors[0] == 2:\n            print(2 * divisors[-1])\n        else:\n            print(-1)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 20:14:20.030543 REASON stop
