2022-04-18 19:26:58.937766 """
You are given an unweighted tree with $n$ vertices. Recall that a tree is a connected undirected graph without cycles.

Your task is to choose three distinct vertices $a, b, c$ on this tree such that the number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$ is the maximum possible. See the notes section for a better understanding.

The simple path is the path that visits each vertex at most once.


-----Input-----

The first line contains one integer number $n$ ($3 \le n \le 2 \cdot 10^5$) — the number of vertices in the tree. 

Next $n - 1$ lines describe the edges of the tree in form $a_i, b_i$ ($1 \le a_i$, $b_i \le n$, $a_i \ne b_i$). It is guaranteed that given graph is a tree.


-----Output-----

In the first line print one integer $res$ — the maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$.

In the second line print three integers $a, b, c$ such that $1 \le a, b, c \le n$ and $a \ne, b \ne c, a \ne c$.

If there are several answers, you can print any.


-----Example-----
Input
8
1 2
2 3
3 4
4 5
4 6
3 7
3 8

Output
5
1 8 6



-----Note-----

The picture corresponding to the first example (and another one correct answer):

[Image]

If you choose vertices $1, 5, 6$ then the path between $1$ and $5$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 5)$, the path between $1$ and $6$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 6)$ and the path between $5$ and $6$ consists of edges $(4, 5), (4, 6)$. The union of these paths is $(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)$ so the answer is $5$. It can be shown that there is no better answer.
"""
2022-04-18 19:26:58.937828 --------------------------
2022-04-18 19:28:25.790558 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nimport heapq\nimport bisect\nimport itertools\nimport string\nimport queue\nimport copy\nimport time\nimport numpy as np\nimport collections\nimport functools\nimport operator\nimport random\nimport re\nimport math\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\ndef read_int():\n    return int(input())\n\ndef read_str():\n    return input()\n\ndef read_matrix(H):\n    '''\n    H is number of rows\n    '''\n    return [list(map(int, read_str().split())) for _ in range(H)]\n\ndef read_map(H):\n    '''\n    H is number of rows\n    \u6587\u5b57\u5217\u3067\u4e0e\u3048\u3089\u308c\u305f\u76e4\u9762\u3092\u8aad\u307f\u53d6\u308b\u7528\n    '''\n    return [read_str() for _ in range(H)]\n\ndef read_map_as_int(H):\n    '''\n    #\u21921,.\u21920\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append([1 if s=='#' else 0 for s in read_str()])\n    return ret\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\nfrom collections import defaultdict, Counter, deque\nfrom operator import itemgetter\nfrom itertools import product, permutations, combinations\nfrom bisect import bisect_left, bisect_right  # , insort_left, insort_right\nfrom math import gcd\n\n# https://atcoder.jp/contests/abc077/tasks/arc084_a\n# \u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u554f\u984c\n# \u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\n\n# Node class\nclass Node:\n    def __init__(self, id):\n        self.id = id\n        self.adjacent = set()\n\n# read data\nn = int(input())\n\nnodes = [Node(i) for i in range(1, n + 1)]\n\nfor i in range(n - 1):\n    a, b = [int(j) for j in input().split()]\n    nodes[a - 1].adjacent.add(nodes[b - 1])\n    nodes[b - 1].adjacent.add(nodes[a - 1])\n\n# find the diameter of the tree\n\n# find the farthest node from node 0\ndef dfs(node, parent):\n    max_dist = 0\n    for child in node.adjacent:\n        if child != parent:\n            dist = dfs(child, node)\n            if dist > max_dist:\n                max_dist = dist\n    return max_dist + 1\n\n# find the farthest node from node 0\ndef dfs2(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs2(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs3(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs3(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs2(nodes[0], None, 0)\nmax_dist = 0\ndfs3(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs4(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs4(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs5(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs5(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs4(max_node, None, 0)\nmax_dist = 0\ndfs5(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs6(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs6(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs7(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs7(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs6(max_node, None, 0)\nmax_dist = 0\ndfs7(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs8(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs8(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs9(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs9(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs8(max_node, None, 0)\nmax_dist = 0\ndfs9(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs10(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs10(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs11(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs11(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs10(max_node, None, 0)\nmax_dist = 0\ndfs11(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs12(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs12(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs13(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs13(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs12(max_node, None, 0)\nmax_dist = 0\ndfs13(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs14(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs14(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs15(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs15(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs14(max_node, None, 0)\nmax_dist = 0\ndfs15(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs16(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs16(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs17(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs17(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs16(max_node, None, 0)\nmax_dist = 0\ndfs17(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs18(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs18(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs19(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs19(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs18(max_node, None, 0)\nmax_dist = 0\ndfs19(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs20(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs20(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs21(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs21(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs20(max_node, None, 0)\nmax_dist = 0\ndfs21(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs22(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs22(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs23(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs23(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs22(max_node, None, 0)\nmax_dist = 0\ndfs23(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs24(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs24(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs25(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs25(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs24(max_node, None, 0)\nmax_dist = 0\ndfs25(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs26(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs26(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs27(node, parent, dist):\n    if dist > max_dist:"
    }
  ],
  "created": 1650310020,
  "id": "cmpl-4yRJUfsM5BKANrqr1KbUBILgUjDcX",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 19:28:25.791026 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nimport heapq\nimport bisect\nimport itertools\nimport string\nimport queue\nimport copy\nimport time\nimport numpy as np\nimport collections\nimport functools\nimport operator\nimport random\nimport re\nimport math\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\ndef read_int():\n    return int(input())\n\ndef read_str():\n    return input()\n\ndef read_matrix(H):\n    '''\n    H is number of rows\n    '''\n    return [list(map(int, read_str().split())) for _ in range(H)]\n\ndef read_map(H):\n    '''\n    H is number of rows\n    \u6587\u5b57\u5217\u3067\u4e0e\u3048\u3089\u308c\u305f\u76e4\u9762\u3092\u8aad\u307f\u53d6\u308b\u7528\n    '''\n    return [read_str() for _ in range(H)]\n\ndef read_map_as_int(H):\n    '''\n    #\u21921,.\u21920\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append([1 if s=='#' else 0 for s in read_str()])\n    return ret\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\nfrom collections import defaultdict, Counter, deque\nfrom operator import itemgetter\nfrom itertools import product, permutations, combinations\nfrom bisect import bisect_left, bisect_right  # , insort_left, insort_right\nfrom math import gcd\n\n# https://atcoder.jp/contests/abc077/tasks/arc084_a\n# \u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u554f\u984c\n# \u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u9577\u8ddd\u96e2\u306e\u30ce\u30fc\u30c9\u3092\u6c42\u3081\u308b\n# \u3053\u306e\u554f\u984c\u3067\u306f\u3001\u6700\u9577\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700"
}
2022-04-18 19:28:25.791115 REASON length
2022-04-18 19:28:25.791127 1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\n\n# Node class\nclass Node:\n    def __init__(self, id):\n        self.id = id\n        self.adjacent = set()\n\n# read data\nn = int(input())\n\nnodes = [Node(i) for i in range(1, n + 1)]\n\nfor i in range(n - 1):\n    a, b = [int(j) for j in input().split()]\n    nodes[a - 1].adjacent.add(nodes[b - 1])\n    nodes[b - 1].adjacent.add(nodes[a - 1])\n\n# find the diameter of the tree\n\n# find the farthest node from node 0\ndef dfs(node, parent):\n    max_dist = 0\n    for child in node.adjacent:\n        if child != parent:\n            dist = dfs(child, node)\n            if dist > max_dist:\n                max_dist = dist\n    return max_dist + 1\n\n# find the farthest node from node 0\ndef dfs2(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs2(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs3(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs3(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs2(nodes[0], None, 0)\nmax_dist = 0\ndfs3(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs4(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs4(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs5(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs5(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs4(max_node, None, 0)\nmax_dist = 0\ndfs5(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs6(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs6(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs7(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs7(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs6(max_node, None, 0)\nmax_dist = 0\ndfs7(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs8(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs8(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs9(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs9(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs8(max_node, None, 0)\nmax_dist = 0\ndfs9(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs10(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs10(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs11(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs11(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs10(max_node, None, 0)\nmax_dist = 0\ndfs11(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs12(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs12(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs13(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs13(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs12(max_node, None, 0)\nmax_dist = 0\ndfs13(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs14(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs14(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs15(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs15(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs14(max_node, None, 0)\nmax_dist = 0\ndfs15(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs16(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs16(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs17(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs17(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs16(max_node, None, 0)\nmax_dist = 0\ndfs17(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs18(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs18(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs19(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs19(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs18(max_node, None, 0)\nmax_dist = 0\ndfs19(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs20(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs20(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs21(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs21(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs20(max_node, None, 0)\nmax_dist = 0\ndfs21(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs22(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs22(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs23(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs23(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs22(max_node, None, 0)\nmax_dist = 0\ndfs23(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs24(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs24(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs25(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs25(child, node, dist + 1)\n\n# find the diameter of the tree\nmax_dist = 0\ndfs24(max_node, None, 0)\nmax_dist = 0\ndfs25(max_node, None, 0)\n\n# find the farthest node from the farthest node from node 0\ndef dfs26(node, parent, dist):\n    if dist > max_dist:\n        max_dist = dist\n        max_node = node\n    for child in node.adjacent:\n        if child != parent:\n            dfs26(child, node, dist + 1)\n\n# find the farthest node from the farthest node from node 0\ndef dfs27(node, parent, dist):\n    if dist > max_dist:"
}
2022-04-18 19:28:25.791206 REASON length
