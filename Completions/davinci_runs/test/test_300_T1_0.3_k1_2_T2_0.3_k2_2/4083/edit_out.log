2022-04-18 23:30:00.753896 num operations 1
2022-04-18 23:30:00.753916 size on input set 1
2022-04-18 23:30:04.281568 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(\"hello world\")\n"
    },
    {
      "index": 1,
      "text": "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\nprint(a[-1] - a[0] + 1)\n"
    }
  ],
  "created": 1650324600,
  "object": "edit"
}
2022-04-18 23:30:04.281782 fix syntax errors 2 ['\nprint("hello world")\n', '\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\nprint(a[-1] - a[0] + 1)\n']
2022-04-18 23:30:04.281803 size on output set 2
2022-04-18 23:30:04.281815 num operations 1
2022-04-18 23:30:04.281821 size on input set 1
2022-04-18 23:30:40.145048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\n\n# # find the minimum value in the array\n# min_val = min(a)\n\n# # find the number of times we need to divide by 2 to get to k\n# num_divs = 0\n# while min_val > k:\n#     min_val //= 2\n#     num_divs += 1\n\n# print(num_divs)\n\n\n# def sum_digits(n):\n#     s = 0\n#     while n:\n#         s += n % 10\n#         n //= 10\n#     return s\n\n\n# def sum_digits(n):\n#     return sum(map(int, str(n)))\n\n\n# print(sum_digits(2**1000))\n\n\n# def is_prime(n):\n#     if n <= 1:\n#         return False\n#     for i in range(2, n):\n#         if n % i == 0:\n#             return False\n#     return True\n\n\n# def is_prime(n):\n#     return n > 1 and all(n % i for i in range(2, n))\n\n\n# def is_prime(n):\n#     return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n\n\n# print(is_prime(2))\n\n\n# def is_palindrome(s):\n#     return s == s[::-1]\n\n\n# print(is_palindrome(\"racecar\"))\n\n\n# def is_pangram(s):\n#     return set(\"abcdefghijklmnopqrstuvwxyz\") <= set(s.lower())\n\n\n# print(is_pangram(\"The quick brown fox jumps over the lazy dog\"))\n\n\n# def fibonacci(n):\n#     a, b = 0, 1\n#     for _ in range(n):\n#         yield a\n#         a, b = b, a + b\n\n\n# for i in fibonacci(10):\n#     print(i)\n\n\n# def factorial(n):\n#     if n <= 1:\n#         return 1\n#     return n * factorial(n - 1)\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return 1 if n <= 1 else n * factorial(n - 1)\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n"
    },
    {
      "index": 1,
      "text": "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# find the minimum value in the array\nmin_val = min(a)\n\n# find the number of times we need to divide by 2 to get to k\nnum_divs = 0\nwhile min_val > k:\n    min_val //= 2\n    num_divs += 1\n\nprint(num_divs)\n"
    }
  ],
  "created": 1650324604,
  "object": "edit"
}
2022-04-18 23:30:40.145264 fix syntax errors 2 ['\n\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\n\n# # find the minimum value in the array\n# min_val = min(a)\n\n# # find the number of times we need to divide by 2 to get to k\n# num_divs = 0\n# while min_val > k:\n#     min_val //= 2\n#     num_divs += 1\n\n# print(num_divs)\n\n\n# def sum_digits(n):\n#     s = 0\n#     while n:\n#         s += n % 10\n#         n //= 10\n#     return s\n\n\n# def sum_digits(n):\n#     return sum(map(int, str(n)))\n\n\n# print(sum_digits(2**1000))\n\n\n# def is_prime(n):\n#     if n <= 1:\n#         return False\n#     for i in range(2, n):\n#         if n % i == 0:\n#             return False\n#     return True\n\n\n# def is_prime(n):\n#     return n > 1 and all(n % i for i in range(2, n))\n\n\n# def is_prime(n):\n#     return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n\n\n# print(is_prime(2))\n\n\n# def is_palindrome(s):\n#     return s == s[::-1]\n\n\n# print(is_palindrome("racecar"))\n\n\n# def is_pangram(s):\n#     return set("abcdefghijklmnopqrstuvwxyz") <= set(s.lower())\n\n\n# print(is_pangram("The quick brown fox jumps over the lazy dog"))\n\n\n# def fibonacci(n):\n#     a, b = 0, 1\n#     for _ in range(n):\n#         yield a\n#         a, b = b, a + b\n\n\n# for i in fibonacci(10):\n#     print(i)\n\n\n# def factorial(n):\n#     if n <= 1:\n#         return 1\n#     return n * factorial(n - 1)\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return 1 if n <= 1 else n * factorial(n - 1)\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n\n\n# print(factorial(5))\n\n\n# def factorial(n):\n#     return reduce(lambda a, b: a * b, range(1, n + 1))\n', '\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# find the minimum value in the array\nmin_val = min(a)\n\n# find the number of times we need to divide by 2 to get to k\nnum_divs = 0\nwhile min_val > k:\n    min_val //= 2\n    num_divs += 1\n\nprint(num_divs)\n']
2022-04-18 23:30:40.145446 size on output set 2
