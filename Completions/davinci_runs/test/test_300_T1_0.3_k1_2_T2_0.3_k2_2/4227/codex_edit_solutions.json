["\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][0])\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n))\n\ndef dfs(graph, n):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main()\n"]