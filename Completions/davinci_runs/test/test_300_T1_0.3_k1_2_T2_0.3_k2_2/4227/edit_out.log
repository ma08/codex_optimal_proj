2022-04-18 23:50:56.428816 num operations 1
2022-04-18 23:50:56.428835 size on input set 1
2022-04-18 23:50:58.642608 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][0])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650325856,
  "object": "edit"
}
2022-04-18 23:50:58.642844 fix syntax errors 2 ['\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][0])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-18 23:50:58.642871 size on output set 2
2022-04-18 23:50:58.642882 num operations 1
2022-04-18 23:50:58.642887 size on input set 1
2022-04-18 23:51:01.543984 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n))\n\ndef dfs(graph, n):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650325858,
  "object": "edit"
}
2022-04-18 23:51:01.544238 fix syntax errors 2 ["\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n))\n\ndef dfs(graph, n):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 23:51:01.544294 size on output set 2
