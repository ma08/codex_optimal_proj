["\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n  s = sys.stdin.readline().rstrip()\n  t = sys.stdin.readline().rstrip()\n  print(min_changes(s, t))\n\ndef min_changes(s, t):\n  \"\"\"\n  Returns the minimum number of characters in s that need to be changed\n  to make t a substring of s.\n  \"\"\"\n  # Create a list of indices of the characters in s that match the first\n  # character in t.\n  indices = [i for i, c in enumerate(s) if c == t[0]]\n  # If there are no characters in s that match the first character in t,\n  # then we need to change len(s) characters.\n  if not indices:\n    return len(s)\n  # If there are characters in s that match the first character in t,\n  # then we need to check if t is a substring of s starting at each\n  # index in indices.\n  else:\n    for i in indices:\n      # If t is a substring of s starting at index i, then we need\n      # to change i characters.\n      if is_substring(s, t, i):\n        return i\n    # If t is not a substring of s starting at any index in indices,\n    # then we need to change len(s) - indices[-1] characters.\n    return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n  \"\"\"\n  Returns True if t is a substring of s starting at index i,\n  otherwise returns False.\n  \"\"\"\n  # If the length of s starting at index i is less than the length of t,\n  # then t cannot be a substring of s starting at index i.\n  if len(s) - i < len(t):\n    return False\n  # If the length of s starting at index i is greater than or equal to\n  # the length of t, then check if the characters in s starting at index\n  # i match the characters in t.\n  else:\n    for j in range(len(t)):\n      if s[i + j] != t[j]:\n        return False\n    return True\n\nif __name__ == '__main__':\n  main()\n", "\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n", "# input\n\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n"]