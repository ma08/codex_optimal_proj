["\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()", "\n\ndef min_periodic(s):\n    # if the string is 1 char, return 1\n    if len(s) == 1:\n        return 1\n    # if the string is all the same, return the length of the string\n    if len(set(s)) == 1:\n        return len(s)\n    # if the string is two chars and they are different, return 2\n    if len(s) == 2 and s[0] != s[1]:\n        return 2\n    # if the string is even and the first half is the same as the second half, return half the length\n    if len(s) % 2 == 0 and s[:len(s)//2] == s[len(s)//2:]:\n        return len(s)//2\n    # if the string is odd and the first half is the same as the second half, return half the length\n    if len(s) % 2 == 1 and s[:len(s)//2] == s[len(s)//2+1:]:\n        return len(s)//2\n    # if the string is even and the first half is the reverse of the second half, return 2\n    if len(s) % 2 == 0 and s[:len(s)//2] == s[:len(s)//2-1:-1]:\n        return 2\n    # if the string is odd and the first half is the reverse of the second half, return 2\n    if len(s) % 2 == 1 and s[:len(s)//2] == s[:len(s)//2:-1]:\n        return 2\n    # if none of the above, return the length of the string\n    return len(s)\n\nprint(min_periodic(input()))", "\nfrom collections import defaultdict\n\ndef period_string(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            for j in range(1, n // i):\n                if first != s[j * i:j * i + i]:\n                    break\n            else:\n                return i\n    return n\n\ndef period_string2(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(first == s[j * i:j * i + i] for j in range(1, n // i)):\n                return i\n    return n\n\ndef period_string3(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(first[j % i] == s[j] for j in range(n)):\n                return i\n    return n\n\ndef period_string4(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string5(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string6(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string7(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string8(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string9(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string10(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string11(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string12(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string13(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string14(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string15(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string16(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string17(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string18(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string19(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\ndef period_string20(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            first = s[:i]\n            if all(s.count(first[:j]) == n // i for j in range(1, i + 1)):\n                return i\n    return n\n\nif __name__ == '__main__':\n    s = input()\n    print(period_string(s))", "\n\nimport sys\n\ndef main():\n    k = 1\n    s = sys.stdin.readline().strip()\n    while k < len(s):\n        if s[:k] == s[k:2*k]:\n            break\n        k += 1\n    print(k)\n\nmain()", "\n\ns = input()\n\nfor i in range(1, len(s)//2+1):\n    if s[i:] == s[:-i]:\n        print(len(s)//i)\n        break", "\n\nimport sys\nimport math\n\n# sys.stdin = open(\"input.txt\", \"r\")\n\ns = sys.stdin.readline().strip()\n\n# if s is 1-periodic\nif s == s[0] * len(s):\n    print(1)\n    exit()\n\n# if s is 2-periodic\nif len(s) % 2 == 0 and s[: len(s) // 2] == s[len(s) // 2 :]:\n    print(2)\n    exit()\n\n# if s is 3-periodic\nif len(s) % 3 == 0 and s[: len(s) // 3] == s[len(s) // 3 : len(s) * 2 // 3] == s[len(s) * 2 // 3 :]:\n    print(3)\n    exit()\n\n# if s is 6-periodic\nif len(s) % 6 == 0 and s[: len(s) // 6] == s[len(s) // 6 : len(s) * 2 // 6] == s[len(s) * 2 // 6 : len(s) * 3 // 6] == s[len(s) * 3 // 6 : len(s) * 4 // 6] == s[len(s) * 4 // 6 : len(s) * 5 // 6] == s[len(s) * 5 // 6 :]:\n    print(6)\n    exit()\n\n# if s is k-periodic, where k is a prime number\nfor k in range(7, int(math.sqrt(len(s))) + 1):\n    if len(s) % k == 0:\n        for i in range(k):\n            if s[i : len(s) // k * i + len(s) // k] != s[len(s) // k * i : len(s) // k * i + len(s) // k]:\n                break\n        else:\n            print(k)\n            exit()\n\n# if s is not k-periodic, where k is a prime number\nprint(len(s))", "\n\ndef test_k_periodic():\n    assert k_periodic(\"aaaaaaaa\") == 1\n    assert k_periodic(\"abbaabbaabba\") == 2\n    assert k_periodic(\"abcdef\") == 6\n\ndef k_periodic(s):\n    n = len(s)\n    if n == 1:\n        return 1\n    for i in range(1, n):\n        if s[:i] == s[i:2*i]:\n            if n % i == 0:\n                return i\n    return n"]