["\n\nn = int(input())\nprefixes = []\nsuffixes = []\n\nfor i in range(0, 2*n-2):\n    x = input()\n    if len(x) == 1:\n        prefixes.append(x)\n    else:\n        suffixes.append(x)\n        \nprefixes.sort()\nsuffixes.sort()\n\nans = \"\"\nfor i in range(0, n-1):\n    ans += 'P'\n    ans += 'S'\n\nprint(ans)", "\n\ndef main():\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for i in range(2*n-2):\n        s = input()\n        if s[0] == 'a':\n            prefixes.append(s)\n        else:\n            suffixes.append(s)\n    result = []\n    for s in prefixes:\n        if s in suffixes:\n            result.append('P')\n            suffixes.remove(s)\n        else:\n            result.append('S')\n    print(''.join(result))\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\n\nprefixes = []\nsuffixes = []\n\nfor i in range(2*n-2):\n    x = input()\n    if i < n-1:\n        prefixes.append(x)\n    else:\n        suffixes.append(x)\n\nfor i in range(len(prefixes)):\n    if prefixes[i] == suffixes[i]:\n        print(\"P\", end=\"\")\n    else:\n        print(\"S\", end=\"\")", "\n\nimport sys\n\ndef find_solution(n, prefixes_and_suffixes):\n    prefixes = []\n    suffixes = []\n    for i in range(n):\n        prefixes.append([])\n        suffixes.append([])\n    for i in range(len(prefixes_and_suffixes)):\n        curr = prefixes_and_suffixes[i]\n        for j in range(1, n):\n            if curr[0:j] in prefixes[j]:\n                suffixes[j].append(curr)\n            else:\n                prefixes[j].append(curr)\n    solution = \"\"\n    for i in range(len(prefixes_and_suffixes)):\n        curr = prefixes_and_suffixes[i]\n        if curr in prefixes[len(curr)]:\n            solution += \"P\"\n        else:\n            solution += \"S\"\n    return solution\n\ndef main():\n    n = int(sys.stdin.readline())\n    prefixes_and_suffixes = []\n    for i in range(2*n - 2):\n        prefixes_and_suffixes.append(sys.stdin.readline().strip())\n    print(find_solution(n, prefixes_and_suffixes))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    prefixes = []\n    suffixes = []\n    for i in range(2*n-2):\n        line = sys.stdin.readline().strip()\n        if line[0] == line[-1]:\n            prefixes.append(line)\n        else:\n            suffixes.append(line)\n    prefixes.sort(key=lambda x: len(x), reverse=True)\n    suffixes.sort(key=lambda x: len(x), reverse=True)\n    result = \"\"\n    for i in range(len(prefixes)):\n        result += \"P\"\n    for i in range(len(suffixes)):\n        result += \"S\"\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\n\nfor i in range(2*n-2):\n    print(\"a\", end=\"\")\nprint()", "\n\n#-----Solution-----\n\nfrom collections import defaultdict\n\nn = int(input())\n\nprefixes = defaultdict(int)\nsuffixes = defaultdict(int)\n\nfor i in range(2*n-2):\n    s = input()\n    if i < n-1:\n        prefixes[s] += 1\n    else:\n        suffixes[s] += 1\n\nans = \"\"\nfor i in range(2*n-2):\n    if i < n-1:\n        if prefixes[s] == 1:\n            ans += \"P\"\n        else:\n            ans += \"S\"\n    else:\n        if suffixes[s] == 1:\n            ans += \"S\"\n        else:\n            ans += \"P\"\n\nprint(ans)"]