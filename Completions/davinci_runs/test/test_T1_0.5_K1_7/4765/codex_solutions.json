["\n\nn = int(input())\n\nmin_diff = 1000000000\nfor i in range(n):\n    s, b = map(int, input().split())\n    if abs(s - b) < min_diff:\n        min_diff = abs(s - b)\n\nprint(min_diff)", "\n\n#SOLUTION\n\nN = int(input())\n\ningredients = []\n\nfor i in range(N):\n    ingredients.append(list(map(int,input().split())))\n\ndef get_sourness(ingredients):\n    sourness = 1\n    for ingredient in ingredients:\n        sourness *= ingredient[0]\n    return sourness\n\ndef get_bitterness(ingredients):\n    bitterness = 0\n    for ingredient in ingredients:\n        bitterness += ingredient[1]\n    return bitterness\n\ndef get_difference(ingredients):\n    return abs(get_sourness(ingredients) - get_bitterness(ingredients))\n\nmin_difference = get_difference(ingredients)\n\nfor i in range(1,len(ingredients)):\n    for j in range(i):\n        difference = get_difference(ingredients[i:j+1])\n        if difference < min_difference:\n            min_difference = difference\n\nprint(min_difference)", "\n\nn = int(input())\ningredients = []\nfor _ in range(n):\n    ingredients.append(list(map(int, input().split())))\n\ndef get_min_diff(ingredients, cur_sourness, cur_bitterness, cur_i):\n    if cur_sourness == 0:\n        return cur_bitterness\n    if cur_i >= len(ingredients):\n        return abs(cur_sourness - cur_bitterness)\n    return min(get_min_diff(ingredients, cur_sourness * ingredients[cur_i][0], cur_bitterness + ingredients[cur_i][1], cur_i + 1),\n               get_min_diff(ingredients, cur_sourness, cur_bitterness, cur_i + 1))\n\nprint(get_min_diff(ingredients, 1, 0, 0))", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n    for _ in range(n):\n        ingredients.append(tuple(map(int, input().split())))\n    ingredients.sort(key=lambda x: x[0] / x[1])\n    sourness = ingredients[0][0]\n    bitterness = ingredients[0][1]\n    for i in range(1, n):\n        if sourness < bitterness:\n            sourness *= ingredients[i][0]\n            bitterness += ingredients[i][1]\n        else:\n            sourness += ingredients[i][0]\n            bitterness *= ingredients[i][1]\n    print(abs(sourness - bitterness))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    ingredients = []\n    for i in range(n):\n        ingredients.append(list(map(int, sys.stdin.readline().split())))\n\n    min_diff = 1000000000\n    for i in range(1, 2**n):\n        s = 1\n        b = 0\n        for j in range(n):\n            if (i >> j) % 2:\n                s *= ingredients[j][0]\n                b += ingredients[j][1]\n        min_diff = min(min_diff, abs(s - b))\n\n    print(min_diff)\n\nif __name__ == '__main__':\n    main()", "\n\nif __name__ == '__main__':\n    n = int(input())\n    all_ingredients = []\n    for i in range(n):\n        all_ingredients.append(tuple(map(int, input().split())))\n    all_ingredients.sort(key=lambda x: x[1])\n    possible_sourness = [0] * n\n    possible_bitterness = [0] * n\n    possible_sourness[0] = all_ingredients[0][0]\n    possible_bitterness[0] = all_ingredients[0][1]\n    for i in range(1, n):\n        possible_sourness[i] = possible_sourness[i-1] * all_ingredients[i][0]\n        possible_bitterness[i] = possible_bitterness[i-1] + all_ingredients[i][1]\n    min_diff = abs(possible_sourness[0] - possible_bitterness[0])\n    for i in range(1, n):\n        diff = abs(possible_sourness[i] - possible_bitterness[i])\n        if diff < min_diff:\n            min_diff = diff\n    print(min_diff)", "\n\nimport sys\n\ndef main():\n    num_ingredients = int(sys.stdin.readline())\n    ingredients = [map(int, sys.stdin.readline().split()) for i in range(num_ingredients)]\n\n    dp = [[0] * (num_ingredients + 1) for i in range(num_ingredients + 1)]\n\n    for i in range(1, num_ingredients + 1):\n        dp[i][0] = dp[i - 1][0] + ingredients[i - 1][1]\n        dp[0][i] = dp[0][i - 1] * ingredients[i - 1][0]\n\n    for i in range(1, num_ingredients + 1):\n        for j in range(1, num_ingredients + 1):\n            if i == j:\n                dp[i][j] = min(dp[i - 1][j] + ingredients[i - 1][1], dp[i][j - 1] * ingredients[j - 1][0])\n            else:\n                dp[i][j] = min(dp[i - 1][j] + ingredients[i - 1][1], dp[i][j - 1] * ingredients[j - 1][0], dp[i - 1][j - 1])\n\n    print abs(dp[num_ingredients][num_ingredients])\n\nif __name__ == '__main__':\n    main()"]