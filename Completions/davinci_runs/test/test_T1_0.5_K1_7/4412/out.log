2022-04-13 20:36:31.304001 """
One important contest will take place on the most famous programming platform (Topforces) very soon!

The authors have a pool of $n$ problems and should choose at most three of them into this contest. The prettiness of the $i$-th problem is $a_i$. The authors have to compose the most pretty contest (in other words, the cumulative prettinesses of chosen problems should be maximum possible).

But there is one important thing in the contest preparation: because of some superstitions of authors, the prettinesses of problems cannot divide each other. In other words, if the prettinesses of chosen problems are $x, y, z$, then $x$ should be divisible by neither $y$, nor $z$, $y$ should be divisible by neither $x$, nor $z$ and $z$ should be divisible by neither $x$, nor $y$. If the prettinesses of chosen problems are $x$ and $y$ then neither $x$ should be divisible by $y$ nor $y$ should be divisible by $x$. Any contest composed from one problem is considered good.

Your task is to find out the maximum possible total prettiness of the contest composed of at most three problems from the given pool.

You have to answer $q$ independent queries.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains one integer $q$ ($1 \le q \le 2 \cdot 10^5$) — the number of queries.

The first line of the query contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of problems.

The second line of the query contains $n$ integers $a_1, a_2, \dots, a_n$ ($2 \le a_i \le 2 \cdot 10^5$), where $a_i$ is the prettiness of the $i$-th problem.

It is guaranteed that the sum of $n$ over all queries does not exceed $2 \cdot 10^5$.


-----Output-----

For each query print one integer — the maximum possible cumulative prettiness of the contest composed of at most three problems from the given pool of problems in the query.


-----Example-----
Input
3
4
5 6 15 30
4
10 6 30 15
3
3 4 6

Output
30
31
10
"""
2022-04-13 20:36:31.304016 --------------------------
2022-04-13 20:38:26.290087 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef test():\n    \"\"\"Stub\"\"\"\n    pass\n\ndef main():\n    \"\"\"Main function\"\"\"\n    #test()\n    reader = (tuple(map(int, line.split())) for line in sys.stdin)\n    queries = next(reader)[0]\n    for query in range(queries):\n        problems = next(reader)[0]\n        prettiness = next(reader)\n        prettiness.sort()\n        print(prettiness[-1] + prettiness[-2] + prettiness[-3])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    input = sys.stdin.read()\n    data = list(map(int, input.split()))\n    n = data[0]\n    a = data[1:(n + 1)]\n    print(lcm_naive(a))\n\ndef gcd_naive(a, b):\n    assert a >= 0 and b >= 0\n    for d in reversed(range(max(a, b) + 1)):\n        if d == 0 or a % d == 0 and b % d == 0:\n            return d\n\ndef lcm_naive(a):\n    result = 1\n    for i in a:\n        result = (result*i)//gcd_naive(result,i)\n    return result\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nfrom collections import defaultdict\nfrom operator import mul\nfrom functools import reduce\n\ndef solve(n, a):\n    a.sort(reverse=True)\n    res = 0\n    if n >= 3:\n        res = reduce(mul, a[:3])\n    elif n == 2:\n        res = a[0]\n    else:\n        res = a[0]\n    return res\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\"\"\"\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <unordered_map>\n#include <map>\n#include <set>\n#include <string>\n#include <stack>\n#include <math.h>\n#include <queue>\n#include <climits>\n\nusing namespace std;\n\n#define ll long long\n#define MOD 1000000007\n#define INFLL LLONG_MAX\n#define INF INT_MAX\n\nll q, n, ai;\nvector<ll> a;\n\nint main() {\n    cin >> q;\n    while (q--) {\n        cin >> n;\n        a.clear();\n        for (int i = 0; i < n; i++) {\n            cin >> ai;\n            a.push_back(ai);\n        }\n        sort(a.begin(), a.end(), greater<ll>());\n        ll ans = 0;\n        for (int i = 0; i < 3 && i < n; i++) {\n            if (ans == 0) {\n                ans = a[i];\n            } else {\n                bool isDivisible = false;\n                for (int j = 0; j < i; j++) {\n                    if (a[i] % a[j] == 0) {\n                        isDivisible = true;\n                        break;\n                    }\n                }\n                if (!isDivisible) {\n                    ans += a[i];\n                }\n            }\n        }\n        cout << ans << \"\\n\";\n    }\n    return 0;\n}\n\"\"\""
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfrom math import gcd\n\ndef solve(a):\n    a.sort()\n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        return a[1]\n    if len(a) > 3:\n        if gcd(a[-1], a[-2]) > 1:\n            a[-2] = 0\n        if gcd(a[-1], a[-3]) > 1:\n            a[-3] = 0\n    return sum(a[-3:])\n\nfor _ in range(int(input())):\n    _ = input()\n    a = list(map(int, input().split()))\n    print(solve(a))"
    },
    {
      "finish_reason": "length",
      "index": 5,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\ndef solve(n, arr):\n    arr.sort()\n    arr.reverse()\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] + arr[1]\n    elif len(arr) == 3:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 4:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 5:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 6:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 7:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 8:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 9:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 10:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 11:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 12:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 13:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 14:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 15:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 16:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 17:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 18:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 19:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 20:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 21:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 22:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 23:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 24:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 25:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 26:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 27:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 28:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 29:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 30:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 31:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 32:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 33:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 34:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 35:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 36:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 37:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 38:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 39:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 40:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 41:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 42:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 43:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 44:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 45:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 46:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 47:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 48:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 49:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 50:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 51:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 52:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 53:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 54:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 55:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 56:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 57:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 58:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 59:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 60:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 61:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 62:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 63:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 64:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 65:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 66:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 67:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 68:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 69:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 70:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 71:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 72:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 73:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 74:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 75:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 76:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 77:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 78:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 79:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 80:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 81:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 82:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 83:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 84:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 85:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 86:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 87:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 88:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 89:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 90:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 91:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 92:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 93:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 94:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 95:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 96:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 97:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 98:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 99:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 100:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 101:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 102:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 103:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 104:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 105:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 106:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 107:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 108:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 109:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 110:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 111:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 112:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 113:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 114:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 115:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 116:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 117:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 118:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 119:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 120:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 121:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 122:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 123:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 124:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 125:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 126:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 127:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 128:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 129:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 130:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 131:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 132:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 133:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 134:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 135:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 136:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 137:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 138:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 139:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 140:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 141:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 142:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 143:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 144:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 145:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 146:\n        return arr[0] + arr[1] + arr"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef read_int():\n    return int(stdin.readline().strip())\n\ndef solve(a):\n    a.sort()\n    n = len(a)\n    if n <= 1:\n        return a[0]\n    if n == 2:\n        return a[1]\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return a[0] + a[1]\n        if a[0] == a[1]:\n            return a[2]\n        if a[1] == a[2]:\n            return a[0] + a[1]\n        return a[0] + a[1] + a[2]\n    if a[0] == a[1]:\n        return a[2] + a[n-2] + a[n-1]\n    if a[1] == a[2]:\n        return a[0] + a[n-2] + a[n-1]\n    if a[2] == a[3]:\n        return a[0] + a[1] + a[n-1]\n    return a[0] + a[1] + a[2]\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        n = read_int()\n        a = read_ints()\n        stdout.write(str(solve(a)) + '\\n')\n\nmain()"
    }
  ],
  "created": 1649882191,
  "id": "cmpl-4we11S3OAYvX9wHJd0oQGqTbUarUG",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 20:38:26.290508 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef test():\n    \"\"\"Stub\"\"\"\n    pass\n\ndef main():\n    \"\"\"Main function\"\"\"\n    #test()\n    reader = (tuple(map(int, line.split())) for line in sys.stdin)\n    queries = next(reader)[0]\n    for query in range(queries):\n        problems = next(reader)[0]\n        prettiness = next(reader)\n        prettiness.sort()\n        print(prettiness[-1] + prettiness[-2] + prettiness[-3])\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 20:38:26.290552 REASON stop
2022-04-13 20:38:26.290953 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    input = sys.stdin.read()\n    data = list(map(int, input.split()))\n    n = data[0]\n    a = data[1:(n + 1)]\n    print(lcm_naive(a))\n\ndef gcd_naive(a, b):\n    assert a >= 0 and b >= 0\n    for d in reversed(range(max(a, b) + 1)):\n        if d == 0 or a % d == 0 and b % d == 0:\n            return d\n\ndef lcm_naive(a):\n    result = 1\n    for i in a:\n        result = (result*i)//gcd_naive(result,i)\n    return result\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 20:38:26.291080 REASON stop
2022-04-13 20:38:26.291502 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nfrom collections import defaultdict\nfrom operator import mul\nfrom functools import reduce\n\ndef solve(n, a):\n    a.sort(reverse=True)\n    res = 0\n    if n >= 3:\n        res = reduce(mul, a[:3])\n    elif n == 2:\n        res = a[0]\n    else:\n        res = a[0]\n    return res\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))"
}
2022-04-13 20:38:26.291553 REASON stop
2022-04-13 20:38:26.306612 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\"\"\"\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <unordered_map>\n#include <map>\n#include <set>\n#include <string>\n#include <stack>\n#include <math.h>\n#include <queue>\n#include <climits>\n\nusing namespace std;\n\n#define ll long long\n#define MOD 1000000007\n#define INFLL LLONG_MAX\n#define INF INT_MAX\n\nll q, n, ai;\nvector<ll> a;\n\nint main() {\n    cin >> q;\n    while (q--) {\n        cin >> n;\n        a.clear();\n        for (int i = 0; i < n; i++) {\n            cin >> ai;\n            a.push_back(ai);\n        }\n        sort(a.begin(), a.end(), greater<ll>());\n        ll ans = 0;\n        for (int i = 0; i < 3 && i < n; i++) {\n            if (ans == 0) {\n                ans = a[i];\n            } else {\n                bool isDivisible = false;\n                for (int j = 0; j < i; j++) {\n                    if (a[i] % a[j] == 0) {\n                        isDivisible = true;\n                        break;\n                    }\n                }\n                if (!isDivisible) {\n                    ans += a[i];\n                }\n            }\n        }\n        cout << ans << \"\\n\";\n    }\n    return 0;\n}\n\"\"\""
}
2022-04-13 20:38:26.306715 REASON stop
2022-04-13 20:38:26.338654 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfrom math import gcd\n\ndef solve(a):\n    a.sort()\n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        return a[1]\n    if len(a) > 3:\n        if gcd(a[-1], a[-2]) > 1:\n            a[-2] = 0\n        if gcd(a[-1], a[-3]) > 1:\n            a[-3] = 0\n    return sum(a[-3:])\n\nfor _ in range(int(input())):\n    _ = input()\n    a = list(map(int, input().split()))\n    print(solve(a))"
}
2022-04-13 20:38:26.338750 REASON stop
2022-04-13 20:38:26.339620 5 {
  "finish_reason": "length",
  "index": 5,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\ndef solve(n, arr):\n    arr.sort()\n    arr.reverse()\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] + arr[1]\n    elif len(arr) == 3:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 4:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 5:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 6:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 7:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 8:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 9:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 10:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 11:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 12:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 13:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 14:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 15:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 16:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 17:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 18:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 19:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 20:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 21:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 22:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 23:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 24:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 25:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 26:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 27:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 28:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 29:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 30:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 31:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 32:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 33:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 34:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 35:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 36:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 37:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 38:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 39:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 40:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 41:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 42:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 43:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 44:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 45:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 46:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 47:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 48:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 49:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 50:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 51:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 52:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 53:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 54:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 55:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 56:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 57:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 58:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 59:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 60:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 61:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 62:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 63:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 64:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 65:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 66:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 67:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 68:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 69:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 70:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 71:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 72:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 73:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 74:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 75:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 76:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 77:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 78:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 79:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 80:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 81:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 82:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 83:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 84:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 85:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 86:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 87:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 88:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 89:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 90:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 91:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 92:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 93:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 94:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 95:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 96:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 97:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 98:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 99:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 100:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 101:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 102:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 103:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 104:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 105:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 106:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 107:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 108:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 109:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 110:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 111:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 112:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 113:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 114:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 115:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 116:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 117:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 118:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 119:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 120:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 121:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 122:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 123:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 124:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 125:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 126:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 127:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 128:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 129:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 130:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 131:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 132:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 133:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 134:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 135:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 136:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 137:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 138:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 139:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 140:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 141:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 142:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 143:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 144:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 145:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 146:\n        return arr[0] + arr[1] + arr"
}
2022-04-13 20:38:26.339759 REASON length
2022-04-13 20:38:26.339767 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef read_int():\n    return int(stdin.readline().strip())\n\ndef solve(a):\n    a.sort()\n    n = len(a)\n    if n <= 1:\n        return a[0]\n    if n == 2:\n        return a[1]\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return a[0] + a[1]\n        if a[0] == a[1]:\n            return a[2]\n        if a[1] == a[2]:\n            return a[0] + a[1]\n        return a[0] + a[1] + a[2]\n    if a[0] == a[1]:\n        return a[2] + a[n-2] + a[n-1]\n    if a[1] == a[2]:\n        return a[0] + a[n-2] + a[n-1]\n    if a[2] == a[3]:\n        return a[0] + a[1] + a[n-1]\n    return a[0] + a[1] + a[2]\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        n = read_int()\n        a = read_ints()\n        stdout.write(str(solve(a)) + '\\n')\n\nmain()"
}
2022-04-13 20:38:26.339814 REASON stop
