["\n\n\"\"\"\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <unordered_map>\n#include <map>\n#include <set>\n#include <string>\n#include <stack>\n#include <math.h>\n#include <queue>\n#include <climits>\n\nusing namespace std;\n\n#define ll long long\n#define MOD 1000000007\n#define INFLL LLONG_MAX\n#define INF INT_MAX\n\nll q, n, ai;\nvector<ll> a;\n\nint main() {\n    cin >> q;\n    while (q--) {\n        cin >> n;\n        a.clear();\n        for (int i = 0; i < n; i++) {\n            cin >> ai;\n            a.push_back(ai);\n        }\n        sort(a.begin(), a.end(), greater<ll>());\n        ll ans = 0;\n        for (int i = 0; i < 3 && i < n; i++) {\n            if (ans == 0) {\n                ans = a[i];\n            } else {\n                bool isDivisible = false;\n                for (int j = 0; j < i; j++) {\n                    if (a[i] % a[j] == 0) {\n                        isDivisible = true;\n                        break;\n                    }\n                }\n                if (!isDivisible) {\n                    ans += a[i];\n                }\n            }\n        }\n        cout << ans << \"\\n\";\n    }\n    return 0;\n}\n\"\"\"", "\n\nfrom math import gcd\n\ndef solve(a):\n    a.sort()\n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        return a[1]\n    if len(a) > 3:\n        if gcd(a[-1], a[-2]) > 1:\n            a[-2] = 0\n        if gcd(a[-1], a[-3]) > 1:\n            a[-3] = 0\n    return sum(a[-3:])\n\nfor _ in range(int(input())):\n    _ = input()\n    a = list(map(int, input().split()))\n    print(solve(a))", "\n\nimport sys\n\ndef test():\n    \"\"\"Stub\"\"\"\n    pass\n\ndef main():\n    \"\"\"Main function\"\"\"\n    #test()\n    reader = (tuple(map(int, line.split())) for line in sys.stdin)\n    queries = next(reader)[0]\n    for query in range(queries):\n        problems = next(reader)[0]\n        prettiness = next(reader)\n        prettiness.sort()\n        print(prettiness[-1] + prettiness[-2] + prettiness[-3])\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef read_int():\n    return int(stdin.readline().strip())\n\ndef solve(a):\n    a.sort()\n    n = len(a)\n    if n <= 1:\n        return a[0]\n    if n == 2:\n        return a[1]\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return a[0] + a[1]\n        if a[0] == a[1]:\n            return a[2]\n        if a[1] == a[2]:\n            return a[0] + a[1]\n        return a[0] + a[1] + a[2]\n    if a[0] == a[1]:\n        return a[2] + a[n-2] + a[n-1]\n    if a[1] == a[2]:\n        return a[0] + a[n-2] + a[n-1]\n    if a[2] == a[3]:\n        return a[0] + a[1] + a[n-1]\n    return a[0] + a[1] + a[2]\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        n = read_int()\n        a = read_ints()\n        stdout.write(str(solve(a)) + '\\n')\n\nmain()", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.read()\n    data = list(map(int, input.split()))\n    n = data[0]\n    a = data[1:(n + 1)]\n    print(lcm_naive(a))\n\ndef gcd_naive(a, b):\n    assert a >= 0 and b >= 0\n    for d in reversed(range(max(a, b) + 1)):\n        if d == 0 or a % d == 0 and b % d == 0:\n            return d\n\ndef lcm_naive(a):\n    result = 1\n    for i in a:\n        result = (result*i)//gcd_naive(result,i)\n    return result\n\n\nif __name__ == '__main__':\n    main()", "\n\nfrom collections import defaultdict\nfrom operator import mul\nfrom functools import reduce\n\ndef solve(n, a):\n    a.sort(reverse=True)\n    res = 0\n    if n >= 3:\n        res = reduce(mul, a[:3])\n    elif n == 2:\n        res = a[0]\n    else:\n        res = a[0]\n    return res\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))"]