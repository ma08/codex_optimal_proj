["\n\ninput_string = input()\ninput_string = input_string.split()\ninput_molecule = input_string[0]\ninput_number = int(input_string[1])\noutput_molecule = input()\n\n# k - number of input molecules\n# n - number of output molecules\n# number of atoms in input molecule\n# number of atoms in output molecule\n\n# count atoms in input molecule\ninput_atoms = {}\ninput_atoms_count = 0\ni = 0\nwhile i < len(input_molecule):\n    atom = input_molecule[i]\n    if atom.isalpha():\n        if i+1 < len(input_molecule) and input_molecule[i+1].isdigit():\n            i += 1\n            atom_count = int(input_molecule[i])\n        else:\n            atom_count = 1\n        input_atoms_count += atom_count\n        if atom not in input_atoms:\n            input_atoms[atom] = atom_count\n        else:\n            input_atoms[atom] += atom_count\n    i += 1\n\n# count atoms in output molecule\noutput_atoms = {}\noutput_atoms_count = 0\ni = 0\nwhile i < len(output_molecule):\n    atom = output_molecule[i]\n    if atom.isalpha():\n        if i+1 < len(output_molecule) and output_molecule[i+1].isdigit():\n            i += 1\n            atom_count = int(output_molecule[i])\n        else:\n            atom_count = 1\n        output_atoms_count += atom_count\n        if atom not in output_atoms:\n            output_atoms[atom] = atom_count\n        else:\n            output_atoms[atom] += atom_count\n    i += 1\n\n# find the maximum number of output molecules\nmax_output_molecules = 0\nfor atom in output_atoms:\n    if atom in input_atoms:\n        if input_atoms[atom] / output_atoms[atom] < max_output_molecules or max_output_molecules == 0:\n            max_output_molecules = input_atoms[atom] / output_atoms[atom]\n    else:\n        max_output_molecules = 0\n        break\n\nprint(int(max_output_molecules))", "\n\ndef read_input():\n    \"\"\"\n    Reads the input from the problem statement.\n    \"\"\"\n    input_molecule, input_count = input().split()\n    input_count = int(input_count)\n    output_molecule = input()\n    return input_molecule, input_count, output_molecule\n\ndef create_molecule_dict(molecule):\n    \"\"\"\n    Creates a dictionary of the atoms and their respective counts in a molecule.\n    \"\"\"\n    molecule_dict = {}\n    current_atom = ''\n    current_count = ''\n    for char in molecule:\n        if char.isalpha():\n            if current_atom:\n                molecule_dict[current_atom] = int(current_count)\n            current_atom = char\n            current_count = ''\n        else:\n            current_count += char\n    molecule_dict[current_atom] = int(current_count)\n    return molecule_dict\n\ndef compute_output_count(input_molecule, input_count, output_molecule):\n    \"\"\"\n    Computes the maximum number of output molecules that can be produced.\n    \"\"\"\n    input_molecule_dict = create_molecule_dict(input_molecule)\n    output_molecule_dict = create_molecule_dict(output_molecule)\n    output_count = 0\n    while True:\n        try:\n            for atom in output_molecule_dict:\n                input_molecule_dict[atom] -= output_molecule_dict[atom]\n        except KeyError:\n            return output_count\n        except ValueError:\n            return output_count\n        output_count += 1\n    return output_count\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    input_molecule, input_count, output_molecule = read_input()\n    output_count = compute_output_count(input_molecule, input_count, output_molecule)\n    print(output_count)\n\nif __name__ == '__main__':\n    main()", "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\n\ndef parse_molecule(molecule):\n    \"\"\"\n    Parse the molecule and return a dict with the atoms and the number of atoms\n    for each of them.\n    \"\"\"\n    atom_re = re.compile(r'([A-Z][a-z]?)(\\d+)?')\n    atoms = {}\n    for atom, m in atom_re.findall(molecule):\n        if m:\n            atoms[atom] = atoms.get(atom, 0) + int(m)\n        else:\n            atoms[atom] = atoms.get(atom, 0) + 1\n    return atoms\n\ndef gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor of a and b.\n    \"\"\"\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    \"\"\"\n    Return the least common multiple of a and b.\n    \"\"\"\n    return a * b // gcd(a, b)\n\ndef compute_molecules(input_molecule, input_number, output_molecule):\n    \"\"\"\n    Compute the number of output molecules we can create from the input\n    molecules.\n    \"\"\"\n    input_atoms = parse_molecule(input_molecule)\n    output_atoms = parse_molecule(output_molecule)\n    input_atoms_number = input_number\n    output_atoms_number = 1\n    for atom, number in output_atoms.items():\n        if atom not in input_atoms:\n            return 0\n        output_atoms_number *= math.ceil(input_atoms[atom] / number)\n    return output_atoms_number // input_atoms_number\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    input_molecule, input_number = sys.stdin.readline().split()\n    input_number = int(input_number)\n    output_molecule = sys.stdin.readline().strip()\n    print(compute_molecules(input_molecule, input_number, output_molecule))\n\nif __name__ == '__main__':\n    main()", "\n\ndef split_molecule(molecule):\n    \"\"\"\n    Splits the molecule into its atomic components.\n    \"\"\"\n    atoms = []\n    for i in range(len(molecule)):\n        if molecule[i].isdigit():\n            atoms.append(molecule[i-1:i+1])\n        else:\n            atoms.append(molecule[i])\n    return atoms\n\ndef process_molecule(molecule):\n    \"\"\"\n    Processes the molecule into a dictionary, where the key is the atom and the value is the number of atoms.\n    \"\"\"\n    molecule_dict = {}\n    for atom in molecule:\n        if atom[0].isalpha():\n            if atom in molecule_dict:\n                molecule_dict[atom] += 1\n            else:\n                molecule_dict[atom] = 1\n        else:\n            if atom[0] in molecule_dict:\n                molecule_dict[atom[0]] += int(atom[1])\n            else:\n                molecule_dict[atom[0]] = int(atom[1])\n    return molecule_dict\n\ndef find_common_atoms(molecule_dict_1, molecule_dict_2):\n    \"\"\"\n    Finds the common atoms in the two molecules.\n    \"\"\"\n    common_atoms = []\n    for key in molecule_dict_1:\n        if key in molecule_dict_2:\n            common_atoms.append(key)\n    return common_atoms\n\ndef find_least_common_multiple(molecule_dict_1, molecule_dict_2, common_atoms):\n    \"\"\"\n    Finds the least common multiple of the ratios of the atoms.\n    \"\"\"\n    lcm = 1\n    for atom in common_atoms:\n        lcm = lcm * max(molecule_dict_1[atom], molecule_dict_2[atom]) / gcd(molecule_dict_1[atom], molecule_dict_2[atom])\n    return lcm\n\ndef find_number_of_molecules(molecule_1, molecule_2, molecule_1_num):\n    \"\"\"\n    Finds the number of molecules that can be created.\n    \"\"\"\n    molecule_1_dict = process_molecule(molecule_1)\n    molecule_2_dict = process_molecule(molecule_2)\n    common_atoms = find_common_atoms(molecule_1_dict, molecule_2_dict)\n    lcm = find_least_common_multiple(molecule_1_dict, molecule_2_dict, common_atoms)\n    for atom in molecule_1_dict:\n        if atom not in common_atoms:\n            lcm = lcm * molecule_1_dict[atom]\n    for atom in molecule_2_dict:\n        if atom not in common_atoms:\n            lcm = lcm / molecule_2_dict[atom]\n    return molecule_1_num * lcm\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    molecule_1, molecule_1_num = input().split()\n    molecule_1_num = int(molecule_1_num)\n    molecule_2 = input()\n    molecule_1 = split_molecule(molecule_1)\n    molecule_2 = split_molecule(molecule_2)\n    print(find_number_of_molecules(molecule_1, molecule_2, molecule_1_num))\n\nif __name__ == \"__main__\":\n    main()", "\n\n# Read Inputs\ninput_molecule = input()\ninput_molecule_number = int(input())\noutput_molecule = input()\n\ninput_molecule_components = {}\noutput_molecule_components = {}\n\n# Parse the input molecules\nfor i in range(len(input_molecule)):\n    if input_molecule[i].isalpha():\n        # Check if we're at the end of the string\n        if i + 1 >= len(input_molecule):\n            # We're at the end of the molecule\n            # Check if we've already seen this molecule\n            if input_molecule[i] in input_molecule_components:\n                # We've seen this molecule before, increment the count\n                input_molecule_components[input_molecule[i]] += 1\n            else:\n                # We've not seen this molecule before, add it to the dictionary\n                input_molecule_components[input_molecule[i]] = 1\n        else:\n            # We're not at the end of the molecule\n            # Check if the next character is a number\n            if input_molecule[i + 1].isnumeric():\n                # The next character is a number, we need to check how long it is\n                number_length = 1\n                while i + number_length + 1 < len(input_molecule) and input_molecule[i + number_length + 1].isnumeric():\n                    number_length += 1\n                # We've found the length of the number, so we can add it to the dictionary\n                # Check if we've already seen this molecule\n                if input_molecule[i] in input_molecule_components:\n                    # We've seen this molecule before, increment the count by the value of the number\n                    input_molecule_components[input_molecule[i]] += int(input_molecule[i + 1: i + 1 + number_length])\n                else:\n                    # We've not seen this molecule before, add it to the dictionary\n                    input_molecule_components[input_molecule[i]] = int(input_molecule[i + 1: i + 1 + number_length])\n\nfor i in range(len(output_molecule)):\n    if output_molecule[i].isalpha():\n        # Check if we're at the end of the string\n        if i + 1 >= len(output_molecule):\n            # We're at the end of the molecule\n            # Check if we've already seen this molecule\n            if output_molecule[i] in output_molecule_components:\n                # We've seen this molecule before, increment the count\n                output_molecule_components[output_molecule[i]] += 1\n            else:\n                # We've not seen this molecule before, add it to the dictionary\n                output_molecule_components[output_molecule[i]] = 1\n        else:\n            # We're not at the end of the molecule\n            # Check if the next character is a number\n            if output_molecule[i + 1].isnumeric():\n                # The next character is a number, we need to check how long it is\n                number_length = 1\n                while i + number_length + 1 < len(output_molecule) and output_molecule[i + number_length + 1].isnumeric():\n                    number_length += 1\n                # We've found the length of the number, so we can add it to the dictionary\n                # Check if we've already seen this molecule\n                if output_molecule[i] in output_molecule_components:\n                    # We've seen this molecule before, increment the count by the value of the number\n                    output_molecule_components[output_molecule[i]] += int(output_molecule[i + 1: i + 1 + number_length])\n                else:\n                    # We've not seen this molecule before, add it to the dictionary\n                    output_molecule_components[output_molecule[i]] = int(output_molecule[i + 1: i + 1 + number_length])\n\n# print(input_molecule_components)\n# print(output_molecule_components)\n\n# Check if the output molecule has more components than the input molecule\nfor key in output_molecule_components:\n    if key not in input_molecule_components:\n        print(0)\n        exit()\n\n# Check if the output molecule has more of a component than the input molecule\noutput_molecule_component_ratios = {}\nfor key in output_molecule_components:\n    output_molecule_component_ratios[key] = output_molecule_components[key] / input_molecule_components[key]\n\noutput_molecule_component_ratios = sorted(output_molecule_component_ratios.items(), key=lambda x: x[1])\n\n# print(output_molecule_component_ratios)\n\n# Check if we can make the output molecule\nif output_molecule_component_ratios[-1][1] > input_molecule_number:\n    print(0)\n    exit()\n\n# We can make the output molecule, so now we need to find the maximum number of output molecules we can make\noutput_molecule_number = input_molecule_number // output_molecule_component_ratios[-1][1]\nprint(output_molecule_number)", "\n\nimport sys\n\ndef parse(s):\n    atoms = []\n    i = 0\n    while i < len(s):\n        atom = s[i]\n        i += 1\n        if i < len(s) and s[i].isdigit():\n            atom += s[i]\n            i += 1\n        atoms.append(atom)\n    return atoms\n\ndef solve(input_atoms, output_atoms):\n    output_dict = {}\n    for atom in output_atoms:\n        if atom in output_dict:\n            output_dict[atom] += 1\n        else:\n            output_dict[atom] = 1\n    input_dict = {}\n    for atom in input_atoms:\n        if atom in input_dict:\n            input_dict[atom] += 1\n        else:\n            input_dict[atom] = 1\n    max_output = float('inf')\n    for atom in output_dict:\n        if atom not in input_dict:\n            return 0\n        max_output = min(max_output, input_dict[atom] // output_dict[atom])\n    return max_output\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    input_atoms = parse(data[0])\n    output_atoms = parse(data[1])\n    output = solve(input_atoms, output_atoms)\n    print(output)\n\nif __name__ == '__main__':\n    main()", "\n\ndef parse(formula):\n    atoms = {}\n    for i in range(len(formula)):\n        if formula[i].isupper():\n            if formula[i+1].islower() or formula[i+1] == '':\n                atoms[formula[i]] = 1\n            else:\n                atoms[formula[i]] = int(formula[i+1])\n    return atoms\n\ndef check(inp, out):\n    for atom in inp:\n        if atom not in out:\n            return False\n        if inp[atom] < out[atom]:\n            return False\n    return True\n\ndef get_molecules(inp, out):\n    out_molecules = 0\n    while check(inp, out):\n        out_molecules += 1\n        for atom in out:\n            inp[atom] -= out[atom]\n\n    return out_molecules\n\ndef main():\n    inp, k = input().split()\n    k = int(k)\n    out = input()\n\n    inp = parse(inp)\n    out = parse(out)\n    for atom in inp:\n        inp[atom] *= k\n\n    print(get_molecules(inp, out))\n\nif __name__ == '__main__':\n    main()"]