["\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    grid = []\n    for _ in range(n):\n        grid.append(input())\n    grid = [[x for x in row] for row in grid]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                s = 1\n                while i+s < n and j+s < m and grid[i+s][j+s] == '*':\n                    s += 1\n                stars.append((i, j, s))\n                for x in range(i, i+s):\n                    for y in range(j, j+s):\n                        grid[x][y] = '.'\n    if any('*' in row for row in grid):\n        print(-1)\n    else:\n        print(len(stars))\n        for star in stars:\n            print(' '.join(str(x) for x in star))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    \n    ans = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                size = 0\n                x, y = i, j\n                while x >= 0 and grid[x][y] == '*':\n                    x -= 1\n                    size += 1\n                x += 1\n                while x < n and grid[x][y] == '*':\n                    grid[x][y] = '.'\n                    x += 1\n                ans.append((x, y, size))\n\n    if all(all(c == '.' for c in row) for row in grid):\n        print(len(ans))\n        for x, y, size in ans:\n            print(x, y, size)\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\nn, m = [int(i) for i in input().split()]\ngrid = [[\".\" for j in range(m)] for i in range(n)]\n\nfor i in range(n):\n    row = input()\n    for j in range(m):\n        grid[i][j] = row[j]\n\nstars = []\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == \"*\":\n            s = 1\n            while (i - s >= 0 and i + s < n and j - s >= 0 and j + s < m and grid[i - s][j] == \"*\" and grid[i + s][j] == \"*\" and grid[i][j - s] == \"*\" and grid[i][j + s] == \"*\"):\n                s += 1\n            stars.append((i, j, s))\n            for k in range(s):\n                grid[i - k][j] = \".\"\n                grid[i + k][j] = \".\"\n                grid[i][j - k] = \".\"\n                grid[i][j + k] = \".\"\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == \"*\":\n            print(\"-1\")\n            exit(0)\n\nprint(len(stars))\nfor star in stars:\n    print(\" \".join([str(a) for a in star]))", "\nimport sys\n\ndef main():\n\tn,m = [int(x) for x in sys.stdin.readline().split()]\n\tgrid = []\n\tfor i in range(n):\n\t\tgrid.append(sys.stdin.readline())\n\t\tgrid[i] = grid[i].strip()\n\t\n\tstars = []\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif grid[i][j] == '*':\n\t\t\t\tfor k in range(1,min(n,m)+1):\n\t\t\t\t\tif i>=k and j>=k and i+k<n and j+k<m:\n\t\t\t\t\t\tif grid[i-k][j] == '*' and grid[i+k][j] == '*' and grid[i][j-k] == '*' and grid[i][j+k] == '*':\n\t\t\t\t\t\t\tstars.append((i,j,k))\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\telse:\n\t\t\t\t\t\tbreak\n\t\n\tfor s in stars:\n\t\tfor i in range(s[0]-s[2],s[0]+s[2]+1):\n\t\t\tfor j in range(s[1]-s[2],s[1]+s[2]+1):\n\t\t\t\tif i == s[0] and j == s[1]:\n\t\t\t\t\tcontinue\n\t\t\t\telse:\n\t\t\t\t\tgrid[i] = grid[i][:j]+'.'+grid[i][j+1:]\n\t\n\tfor i in range(n):\n\t\tif '*' in grid[i]:\n\t\t\tprint -1\n\t\t\treturn\n\t\n\tprint len(stars)\n\tfor s in stars:\n\t\tprint s[0]+1,s[1]+1,s[2]\n\nmain()", "\n\ndef main():\n    \"\"\"\n    >>> main()\n    3\n    3 4 1\n    3 5 2\n    3 5 1\n    3\n    2 2 1\n    3 3 1\n    3 4 1\n    -1\n    -1\n    \"\"\"\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    # grid = [['.', '*', '.', '.', '.', '.', '.', '.'],\n    #         ['.', '.', '*', '*', '.', '.', '.', '.'],\n    #         ['.', '.', '*', '*', '*', '*', '*', '.'],\n    #         ['.', '.', '*', '*', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '*', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.', '.', '.', '.']]\n    # grid = [['.', '*', '.', '.', '.'],\n    #         ['*', '*', '*', '.', '.'],\n    #         ['.', '*', '*', '*', '*'],\n    #         ['.', '.', '*', '*', '.'],\n    #         ['.', '.', '.', '.', '.']]\n    # grid = [['.', '*', '.', '.', '.'],\n    #         ['*', '*', '*', '.', '.'],\n    #         ['.', '*', '*', '*', '.'],\n    #         ['.', '*', '*', '.', '.'],\n    #         ['.', '.', '.', '.', '.']]\n    # grid = [['*', '.', '*'],\n    #         ['.', '.', '.'],\n    #         ['*', '.', '*']]\n    # grid = [['.', '.', '.', '.', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.', '.', '.', '.']]\n    # grid = [['.', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.'],\n    #         ['.', '.', '.', '.', '.']]\n    stars = []\n    for i, row in enumerate(grid):\n        for j, cell in enumerate(row):\n            if cell == '*':\n                x, y, s = i, j, 1\n                while True:\n                    if (x + s < n and grid[x + s][y] == '*' and\n                            x - s >= 0 and grid[x - s][y] == '*' and\n                            y + s < m and grid[x][y + s] == '*' and\n                            y - s >= 0 and grid[x][y - s] == '*'):\n                        s += 1\n                    else:\n                        s -= 1\n                        break\n                stars.append((x, y, s))\n    if len(stars) == 0:\n        print(-1)\n    else:\n        print(len(stars))\n        for star in stars:\n            print(*star, sep=' ')\n\n\nif __name__ == '__main__':\n    main()", "\n\n#Solution\nn, m = map(int, input().split())\n\na = [input() for _ in range(n)]\n\ndef solve():\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*':\n                for size in range(1, min(n - i, m - j) + 1):\n                    if a[i][j+size-1] == '.':\n                        break\n                    if a[i+size-1][j] == '.':\n                        break\n                    if a[i+size-1][j+size-1] == '.':\n                        break\n                    if a[i+size-1][j+size-1] == '*':\n                        break\n                    for k in range(size):\n                        if a[i+size-1][j+k] == '.':\n                            break\n                    else:\n                        continue\n                    for k in range(size):\n                        if a[i+k][j+size-1] == '.':\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    continue\n                for k in range(i, i+size):\n                    for l in range(j, j+size):\n                        a[k][l] = '.'\n                print(i+1, j+1, size)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*':\n                return -1\n    return 0\n\nans = solve()\nif ans == -1:\n    print(-1)\nelse:\n    print(ans)"]