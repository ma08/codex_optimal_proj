2022-04-13 17:24:20.801852 """
Let's call an array good if there is an element in the array that equals to the sum of all other elements. For example, the array $a=[1, 3, 3, 7]$ is good because there is the element $a_4=7$ which equals to the sum $1 + 3 + 3$.

You are given an array $a$ consisting of $n$ integers. Your task is to print all indices $j$ of this array such that after removing the $j$-th element from the array it will be good (let's call such indices nice).

For example, if $a=[8, 3, 5, 2]$, the nice indices are $1$ and $4$:   if you remove $a_1$, the array will look like $[3, 5, 2]$ and it is good;  if you remove $a_4$, the array will look like $[8, 3, 5]$ and it is good. 

You have to consider all removals independently, i. e. remove the element, check if the resulting array is good, and return the element into the array.


-----Input-----

The first line of the input contains one integer $n$ ($2 \le n \le 2 \cdot 10^5$) — the number of elements in the array $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^6$) — elements of the array $a$.


-----Output-----

In the first line print one integer $k$ — the number of indices $j$ of the array $a$ such that after removing the $j$-th element from the array it will be good (i.e. print the number of the nice indices).

In the second line print $k$ distinct integers $j_1, j_2, \dots, j_k$ in any order — nice indices of the array $a$.

If there are no such indices in the array $a$, just print $0$ in the first line and leave the second line empty or do not print it at all.


-----Examples-----
Input
5
2 5 1 2 2

Output
3
4 1 5
Input
4
8 3 5 2

Output
2
1 4 

Input
5
2 1 2 4 3

Output
0




-----Note-----

In the first example you can remove any element with the value $2$ so the array will look like $[5, 1, 2, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 1 + 2 + 2$).

In the second example you can remove $8$ so the array will look like $[3, 5, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 3 + 2$). You can also remove $2$ so the array will look like $[8, 3, 5]$. The sum of this array is $16$ and there is an element equals to the sum of remaining elements ($8 = 3 + 5$).

In the third example you cannot make the given array good by removing exactly one element.
"""
2022-04-13 17:24:20.801866 --------------------------
2022-04-13 17:24:37.216428 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\nn = int(input())\na = list(map(int, input().split()))\n\n\ndef is_good(arr):\n    if len(arr) == 1:\n        return False\n    return sum(arr) - arr[0] == arr[0]\n\n\ndef find_good_indices(arr):\n    good_indices = []\n    for i in range(len(arr)):\n        new_arr = arr.copy()\n        new_arr.pop(i)\n        if is_good(new_arr):\n            good_indices.append(i+1)\n    return good_indices\n\n\nprint(len(find_good_indices(a)))\nprint(\" \".join(map(str, find_good_indices(a))))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nall_sum = sum(a)\ns = []\n\nfor i in range(n):\n    if all_sum - a[i] == a[i]:\n        s.append(i+1)\n\nprint(len(s))\n\nfor i in s:\n    print(i, end=\" \")"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\n\nans = []\nfor i in range(n):\n    if s - a[i] == a[i]:\n        ans.append(i + 1)\n        break\n    s -= a[i]\n\nprint(len(ans))\nfor i in ans:\n    print(i, end = ' ')"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# sum_a = sum(a)\n# for i in range(n):\n#     if a[i] == sum_a - a[i]:\n#         print(i+1)\n\nsum_a = sum(a)\nfor i in range(n):\n    if a[i] == sum_a - a[i]:\n        print(i+1)\n        break\nelse:\n    print(0)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\nindices = [i for i in range(n) if a[i] == s - a[i]]\n\nprint(len(indices))\nprint(*indices)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# SOLUTION\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\n\nans = []\n\nfor i in range(n):\n    \n    if a[i] == s-a[i]:\n        ans.append(i+1)\n        \nprint(len(ans))\nprint(*ans)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().strip().split()))\n\ntotal_sum = sum(a)\n\nnice_indices = []\nfor i in range(n):\n    if a[i] * (n - 1) == total_sum - a[i]:\n        nice_indices.append(i + 1)\n\nprint(len(nice_indices))\nif len(nice_indices) > 0:\n    print(' '.join(map(str, nice_indices)))"
    }
  ],
  "created": 1649870660,
  "id": "cmpl-4wb12XGOfXm1y2GI8tpiPdFtEUXE0",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 17:24:37.216706 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\nn = int(input())\na = list(map(int, input().split()))\n\n\ndef is_good(arr):\n    if len(arr) == 1:\n        return False\n    return sum(arr) - arr[0] == arr[0]\n\n\ndef find_good_indices(arr):\n    good_indices = []\n    for i in range(len(arr)):\n        new_arr = arr.copy()\n        new_arr.pop(i)\n        if is_good(new_arr):\n            good_indices.append(i+1)\n    return good_indices\n\n\nprint(len(find_good_indices(a)))\nprint(\" \".join(map(str, find_good_indices(a))))"
}
2022-04-13 17:24:37.216739 REASON stop
2022-04-13 17:24:37.217152 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nall_sum = sum(a)\ns = []\n\nfor i in range(n):\n    if all_sum - a[i] == a[i]:\n        s.append(i+1)\n\nprint(len(s))\n\nfor i in s:\n    print(i, end=\" \")"
}
2022-04-13 17:24:37.217303 REASON stop
2022-04-13 17:24:37.217785 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\n\nans = []\nfor i in range(n):\n    if s - a[i] == a[i]:\n        ans.append(i + 1)\n        break\n    s -= a[i]\n\nprint(len(ans))\nfor i in ans:\n    print(i, end = ' ')"
}
2022-04-13 17:24:37.217842 REASON stop
2022-04-13 17:24:37.219077 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# sum_a = sum(a)\n# for i in range(n):\n#     if a[i] == sum_a - a[i]:\n#         print(i+1)\n\nsum_a = sum(a)\nfor i in range(n):\n    if a[i] == sum_a - a[i]:\n        print(i+1)\n        break\nelse:\n    print(0)"
}
2022-04-13 17:24:37.219142 REASON stop
2022-04-13 17:24:37.249177 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\nindices = [i for i in range(n) if a[i] == s - a[i]]\n\nprint(len(indices))\nprint(*indices)"
}
2022-04-13 17:24:37.249296 REASON stop
2022-04-13 17:24:37.250052 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# SOLUTION\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\n\nans = []\n\nfor i in range(n):\n    \n    if a[i] == s-a[i]:\n        ans.append(i+1)\n        \nprint(len(ans))\nprint(*ans)"
}
2022-04-13 17:24:37.250121 REASON stop
2022-04-13 17:24:37.251242 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().strip().split()))\n\ntotal_sum = sum(a)\n\nnice_indices = []\nfor i in range(n):\n    if a[i] * (n - 1) == total_sum - a[i]:\n        nice_indices.append(i + 1)\n\nprint(len(nice_indices))\nif len(nice_indices) > 0:\n    print(' '.join(map(str, nice_indices)))"
}
2022-04-13 17:24:37.251340 REASON stop
