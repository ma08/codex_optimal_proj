2022-04-13 21:57:07.812262 """
An X-layered kagami mochi (X ≥ 1) is a pile of X round mochi (rice cake) stacked vertically where each mochi (except the bottom one) has a smaller diameter than that of the mochi directly below it. For example, if you stack three mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, you have a 3-layered kagami mochi; if you put just one mochi, you have a 1-layered kagami mochi.
Lunlun the dachshund has N round mochi, and the diameter of the i-th mochi is d_i centimeters. When we make a kagami mochi using some or all of them, at most how many layers can our kagami mochi have?

-----Constraints-----
 - 1 ≤ N ≤ 100
 - 1 ≤ d_i ≤ 100
 - All input values are integers.

-----Input-----
Input is given from Standard Input in the following format:
N
d_1
:
d_N

-----Output-----
Print the maximum number of layers in a kagami mochi that can be made.

-----Sample Input-----
4
10
8
8
6

-----Sample Output-----
3

If we stack the mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, we have a 3-layered kagami mochi, which is the maximum number of layers.
"""
2022-04-13 21:57:07.812273 --------------------------
2022-04-13 21:57:24.230898 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nmochi = [int(input()) for _ in range(n)]\n\nprint(len(set(mochi)))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN = int(input())\n\nd = []\nfor i in range(N):\n    d.append(int(input()))\n\nd = list(set(d))\nd.sort(reverse=True)\n\nprint(len(d))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\nn = int(input())\nd = [int(input()) for _ in range(n)]\n\n# \u964d\u9806\u306b\u30bd\u30fc\u30c8\nd.sort(reverse=True)\n\n# \u540c\u3058\u30b5\u30a4\u30ba\u306e\u3082\u3061\u306f1\u3064\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\ncount = 1\nfor i in range(1, n):\n    if d[i] < d[i-1]:\n        count += 1\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\n\ndef main():\n    N = int(sys.stdin.readline())\n    mochis = []\n    for i in range(N):\n        mochis.append(int(sys.stdin.readline()))\n    mochis.sort()\n    mochis.reverse()\n    ans = 0\n    while mochis:\n        ans += 1\n        mochis.pop(0)\n        while mochis:\n            if mochis[0] < mochis[-1]:\n                mochis.pop()\n            else:\n                break\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())\nd = [int(stdin.readline().rstrip()) for i in range(n)]\nprint(len(set(d)))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\nd = []\nfor i in range(n):\n    d.append(int(input()))\nd = sorted(d, reverse=True)\nd = d[:len(set(d))]\nprint(len(d))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN = int(input())\nmochi_diameters = [int(input()) for _ in range(N)]\n\n# Sort the mochi diameters in descending order\nmochi_diameters.sort(reverse=True)\n\n# The maximum number of layers is the number of unique mochi diameters\nprint(len(set(mochi_diameters)))"
    }
  ],
  "created": 1649887027,
  "id": "cmpl-4wfH1hZpTykNXNrXudmOxlK6CgiJ7",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 21:57:24.231181 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nmochi = [int(input()) for _ in range(n)]\n\nprint(len(set(mochi)))"
}
2022-04-13 21:57:24.231222 REASON stop
2022-04-13 21:57:24.231693 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN = int(input())\n\nd = []\nfor i in range(N):\n    d.append(int(input()))\n\nd = list(set(d))\nd.sort(reverse=True)\n\nprint(len(d))"
}
2022-04-13 21:57:24.231815 REASON stop
2022-04-13 21:57:24.232172 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\nn = int(input())\nd = [int(input()) for _ in range(n)]\n\n# \u964d\u9806\u306b\u30bd\u30fc\u30c8\nd.sort(reverse=True)\n\n# \u540c\u3058\u30b5\u30a4\u30ba\u306e\u3082\u3061\u306f1\u3064\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\ncount = 1\nfor i in range(1, n):\n    if d[i] < d[i-1]:\n        count += 1\n\nprint(count)"
}
2022-04-13 21:57:24.232214 REASON stop
2022-04-13 21:57:24.254297 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\n\ndef main():\n    N = int(sys.stdin.readline())\n    mochis = []\n    for i in range(N):\n        mochis.append(int(sys.stdin.readline()))\n    mochis.sort()\n    mochis.reverse()\n    ans = 0\n    while mochis:\n        ans += 1\n        mochis.pop(0)\n        while mochis:\n            if mochis[0] < mochis[-1]:\n                mochis.pop()\n            else:\n                break\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 21:57:24.254409 REASON stop
2022-04-13 21:57:24.255159 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())\nd = [int(stdin.readline().rstrip()) for i in range(n)]\nprint(len(set(d)))"
}
2022-04-13 21:57:24.255224 REASON stop
2022-04-13 21:57:24.270537 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\nd = []\nfor i in range(n):\n    d.append(int(input()))\nd = sorted(d, reverse=True)\nd = d[:len(set(d))]\nprint(len(d))"
}
2022-04-13 21:57:24.270628 REASON stop
2022-04-13 21:57:24.271428 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN = int(input())\nmochi_diameters = [int(input()) for _ in range(N)]\n\n# Sort the mochi diameters in descending order\nmochi_diameters.sort(reverse=True)\n\n# The maximum number of layers is the number of unique mochi diameters\nprint(len(set(mochi_diameters)))"
}
2022-04-13 21:57:24.271516 REASON stop
