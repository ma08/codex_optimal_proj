["\n\n\ndef solve(turns):\n    \"\"\"\n    turns is a list of tuples (cost, damage)\n    \"\"\"\n    # TODO: solve the problem\n    return 0\n\n\ndef main():\n    n = int(input())\n    turns = []\n    for i in range(n):\n        k = int(input())\n        turn = []\n        for j in range(k):\n            c, d = map(int, input().split())\n            turn.append((c, d))\n        turns.append(turn)\n    print(solve(turns))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    cost_damage = []\n    for _ in range(n):\n        k = int(input())\n        cost_damage.append(list(map(int, input().split())) for _ in range(k))\n    print(solution(cost_damage))\n\ndef solution(cost_damage):\n    damage = 0\n    for turn in cost_damage:\n        turn.sort(key=lambda x: x[0])\n        for i, card in enumerate(turn):\n            if i % 10 == 0:\n                damage += 2 * card[1]\n            else:\n                damage += card[1]\n    return damage\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    cards = []\n    for i in range(n):\n        k = int(input())\n        cards.append([])\n        for j in range(k):\n            cards[i].append(list(map(int, sys.stdin.readline().split())))\n\n    dp = [[0, 0, 0] for i in range(n)]\n    dp[0][0] = cards[0][0][1]\n    dp[0][1] = cards[0][1][1]\n    dp[0][2] = cards[0][2][1]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2]) + cards[i][0][1] * (1 + (i % 10 == 0))\n        dp[i][1] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2]) + cards[i][1][1] * (1 + (i % 10 == 0))\n        dp[i][2] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2]) + cards[i][2][1] * (1 + (i % 10 == 0))\n        if len(cards[i]) == 4:\n            dp[i][0] = max(dp[i][0], max(dp[i-1][0], dp[i-1][1], dp[i-1][2]) + cards[i][3][1] * (1 + (i % 10 == 0)))\n            dp[i][1] = max(dp[i][1], max(dp[i-1][0], dp[i-1][1], dp[i-1][2]) + cards[i][3][1] * (1 + (i % 10 == 0)))\n            dp[i][2] = max(dp[i][2], max(dp[i-1][0], dp[i-1][1], dp[i-1][2]) + cards[i][3][1] * (1 + (i % 10 == 0)))\n    \n    print(max(dp[n-1][0], dp[n-1][1], dp[n-1][2]))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef splay_the_sire(turns):\n    damage = 0\n    for i in range(turns):\n        cards = int(input())\n        costs = []\n        damages = []\n        for j in range(cards):\n            c, d = [int(x) for x in input().split()]\n            costs.append(c)\n            damages.append(d)\n        costs = sorted(costs)\n        damages = sorted(damages)\n        while costs:\n            if len(costs) >= 10:\n                damage += max(damages[-10:])\n                damages = damages[:-10]\n                costs = costs[:-10]\n            else:\n                damage += max(damages)\n                damages = damages[:-1]\n                costs = costs[:-1]\n    return damage\n\n\nif __name__ == \"__main__\":\n    turns = int(input())\n    print(splay_the_sire(turns))", "\n\n\ndef splay_the_sire():\n    turns = int(input())\n    total_damage = 0\n    for _ in range(turns):\n        cards = int(input())\n        turn_damage = 0\n        for _ in range(cards):\n            cost, damage = map(int, input().split())\n            if cost <= 3 and turn_damage + damage <= 30:\n                turn_damage += damage\n        total_damage += turn_damage\n    return total_damage\n\n\nif __name__ == \"__main__\":\n    print(splay_the_sire())", "\n\n\ndef main():\n    n = int(input())\n    total_damage = 0\n    for i in range(n):\n        k = int(input())\n        cards = []\n        for j in range(k):\n            cards.append(tuple(map(int, input().split())))\n        cards.sort(key=lambda x: x[1], reverse=True)\n\n        damage = 0\n        total_cost = 0\n        for card in cards:\n            if total_cost + card[0] <= 3:\n                total_cost += card[0]\n                damage += card[1]\n                if (i*k + j + 1) % 10 == 0:\n                    damage += card[1]\n        total_damage += damage\n    print(total_damage)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    max_damage = 0\n    for _ in range(n):\n        k = int(input())\n        cards = []\n        for _ in range(k):\n            cards.append(list(map(int, input().split())))\n        cards.sort(key=lambda x: x[1], reverse=True)\n        damage = 0\n        for i in range(len(cards)):\n            if i % 10 == 0:\n                damage += 2 * cards[i][1]\n            else:\n                damage += cards[i][1]\n        max_damage += damage\n    print(max_damage)\n\nif __name__ == \"__main__\":\n    main()"]