["\n\nN = int(input())\na = [0] + list(map(int, input().split()))\n\n# dp[i]: \u30dc\u30bf\u30f3i\u3092\u62bc\u3057\u305f\u3068\u304d\u306e\u6700\u5c0f\u56de\u6570\ndp = [0] * (N + 1)\n# \u30dc\u30bf\u30f31\u3092\u62bc\u3057\u305f\u3068\u304d\u306f\u6700\u5c0f\u56de\u6570\u30921\u306b\u3059\u308b\ndp[1] = 1\n\nfor i in range(1, N + 1):\n    if dp[i] == 0:\n        continue\n    # dp[i]\u304c0\u3067\u306a\u3044\u306a\u3089\u3070\u3001\u30dc\u30bf\u30f3i\u3092\u62bc\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n    # \u30dc\u30bf\u30f3i\u3092\u62bc\u3057\u305f\u3068\u304d\u306f\u3001\u30dc\u30bf\u30f3a[i]\u304c\u62bc\u305b\u308b\u3088\u3046\u306b\u306a\u308b\n    dp[a[i]] = dp[i] + 1\n\n# \u30dc\u30bf\u30f32\u3092\u62bc\u305b\u308b\u304b\u3069\u3046\u304b\nif dp[2] == 0:\n    print(-1)\nelse:\n    print(dp[2] - 1)", "\n\n\"\"\"\nThe problem can be solved using the BFS algorithm.\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ndef main():\n    n = int(input())\n    a = [int(input()) for _ in range(n)]\n    b = [0] * n\n    q = deque([1])\n    b[1] = 1\n    while q:\n        i = q.popleft()\n        if i == 2:\n            print(b[i] - 1)\n            sys.exit()\n        if b[a[i - 1]] == 0:\n            b[a[i - 1]] = b[i] + 1\n            q.append(a[i - 1])\n    print(-1)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\nvisited = [False] * n\n\ndef dfs(x):\n    if visited[x]:\n        return False\n    visited[x] = True\n    if x == 1:\n        return True\n    return dfs(a[x - 1] - 1)\n\nif dfs(0):\n    print(0)\n    exit()\n\nans = -1\nfor i in range(n):\n    if not visited[i] and dfs(i):\n        ans = i\n        break\n\nif ans == -1:\n    print(-1)\nelse:\n    print(n - ans)", "\n\ndef main():\n    n = int(input())\n    a = [int(input()) for _ in range(n)]\n    visited = [0] * n\n    visited[0] = 1\n    cur = 0\n    for _ in range(n):\n        cur = a[cur] - 1\n        if visited[cur] == 1:\n            print(-1)\n            return\n        else:\n            visited[cur] = 1\n        if cur == 1:\n            print(sum(visited))\n            return\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nn = int(input())\na = list(map(int, sys.stdin.readlines()))\n\n# \u5404\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u3069\u306e\u30dc\u30bf\u30f3\u304c\u70b9\u706f\u3059\u308b\u304b\u3092\u8a18\u9332\u3057\u305f\u914d\u5217\n# \u30dc\u30bf\u30f3i\u304c\u70b9\u706f\u3057\u305f\u3068\u304d\u306b\u30dc\u30bf\u30f3j\u304c\u70b9\u706f\u3059\u308b\u3068\u304d\u306b\u306f\u3001light[i][j] == 1\nlight = [[0] * n for i in range(n)]\nfor i in range(n):\n    light[i][a[i] - 1] = 1\n\n# \u30dc\u30bf\u30f3\u3092\u62bc\u3059\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u8a18\u9332\u3059\u308b\u914d\u5217\n# \u30dc\u30bf\u30f3i\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u30dc\u30bf\u30f3j\u304c\u70b9\u706f\u3059\u308b\u3068\u304d\u306b\u306f\u3001count[i][j] == \u62bc\u3059\u56de\u6570\ncount = [[0] * n for i in range(n)]\nfor i in range(n):\n    count[i][i] = 1\n\n# \u30dc\u30bf\u30f3i\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u30dc\u30bf\u30f3j\u304c\u70b9\u706f\u3059\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u30dc\u30bf\u30f3\u3092\u4f55\u56de\u62bc\u3059\u5fc5\u8981\u304c\u3042\u308b\u304b\u3092\u8a18\u9332\u3059\u308b\nfor i in range(n):\n    for j in range(n):\n        if light[i][j] == 1:\n            for k in range(n):\n                if light[j][k] == 1:\n                    count[i][k] = count[i][j] + 1\n\n# \u30dc\u30bf\u30f31\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u30dc\u30bf\u30f32\u304c\u70b9\u706f\u3059\u308b\u5834\u5408\u3001\u305d\u306e\u6700\u5c0f\u62bc\u3059\u56de\u6570\u3092\u51fa\u529b\u3059\u308b\nif count[0][1] != 0:\n    print(count[0][1])\nelse:\n    print(-1)", "\n\n\"\"\"\n-----Sample Input-----\n4\n4\n2\n4\n1\n\n-----Sample Output-----\n-1\n\n-----Sample Input-----\n5\n3\n5\n1\n2\n3\n\n-----Sample Output-----\n3\n\nPress Button 1, then Button 5, then Button 2.\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\n\nif N == 2:\n    if a[0] == 1:\n        print(1)\n    else:\n        print(-1)\n    exit()\n\n# \u30b0\u30e9\u30d5\u3092\u4f5c\u6210\ngraph = [[] for i in range(N)]\nfor i in range(N):\n    graph[i].append(a[i]-1)\n\n# \u5404\u9802\u70b9\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u305f\u3068\u304d\u306e\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b\nans = N\nfor i in range(N):\n    # 0\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u305f\u3068\u304d\u306e\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b\n    dist = [-1] * N\n    dist[i] = 0\n    q = deque()\n    q.append(i)\n    while len(q) > 0:\n        v = q.popleft()\n        for next_v in graph[v]:\n            if dist[next_v] != -1:\n                continue\n            dist[next_v] = dist[v] + 1\n            q.append(next_v)\n\n    # 1\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u305f\u3068\u304d\u306e\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b\n    dist2 = [-1] * N\n    dist2[1] = 0\n    q = deque()\n    q.append(1)\n    while len(q) > 0:\n        v = q.popleft()\n        for next_v in graph[v]:\n            if dist2[next_v] != -1:\n                continue\n            dist2[next_v] = dist2[v] + 1\n            q.append(next_v)\n\n    # 0\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u305f\u3068\u304d\u306e\u6700\u77ed\u7d4c\u8def\u30681\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u305f\u3068\u304d\u306e\u6700\u77ed\u7d4c\u8def\u306e\u548c\u304c\u7b54\u3048\n    if dist2[0] == -1 or dist[1] == -1:\n        continue\n    ans = min(ans, dist[1] + dist2[0])\n\nif ans == N:\n    print(-1)\nelse:\n    print(ans)"]