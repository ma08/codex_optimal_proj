["\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.split()\n        M = int(line[0])\n        N = int(line[1])\n        C = line[2][1]\n        frame1 = []\n        frame2 = []\n        for i in range(M):\n            frame1.append(input())\n        input()\n        for i in range(M):\n            frame2.append(input())\n        #print(frame1)\n        #print(frame2)\n        frame_out = []\n        for i in range(M):\n            frame_out.append('')\n        for i in range(M):\n            for j in range(N):\n                if frame1[i][j] == C:\n                    frame_out[i] += frame2[i][j]\n                else:\n                    frame_out[i] += frame1[i][j]\n        for i in frame_out:\n            print(i)\n        print()\nmain()", "\n\nimport sys\n\ndef main():\n    # Read input\n    inp = sys.stdin.read().splitlines()\n    lines = []\n    while inp:\n        try:\n            m, n, c = inp.pop(0).split()\n            m = int(m)\n            n = int(n)\n            c = c[1] # Get rid of the single quotes\n        except:\n            break\n        lines.append(inp[:m])\n        inp = inp[m+1:]\n\n    for i in range(len(lines)):\n        # Get the two frames\n        frame1 = lines[i][:m]\n        frame2 = lines[i][m:]\n\n        # Find the delta between the two frames\n        delta = [0, 0]\n        for x in range(m):\n            for y in range(n):\n                if frame1[x][y] == c and frame2[x][y] != c:\n                    delta[0] = x\n                    delta[1] = y\n                    break\n            if delta[0] != 0:\n                break\n\n        # Generate the third frame\n        frame3 = []\n        for x in range(m):\n            frame3.append([])\n            for y in range(n):\n                if frame2[x][y] == c:\n                    frame3[x].append(frame2[x][y])\n                else:\n                    frame3[x].append(frame1[x-delta[0]][y-delta[1]])\n\n        # Print the result\n        for x in range(m):\n            print(''.join(frame3[x]))\n        print()\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        c = c[1]\n        for i in range(m):\n            sys.stdin.readline()\n        for i in range(m):\n            sys.stdin.readline()\n        for i in range(m):\n            sys.stdin.readline()\n        print()\n\nif __name__ == '__main__':\n    main()", "\n\n\"\"\"\nSolution outline:\n\t1. Find connected components in the first frame\n\t2. For each connected component,\n\t\t2.1 Find its bounding box, bb\n\t\t2.2 Find all pixels in the second frame that are inside bb, and are 'C'\n\t\t2.3 Find the median of all these pixels, this is the new position of the component in the second frame\n\t\t2.4 Find the median of the new position and the old position\n\t\t2.5 This is the position of the component in the second frame\n\t\t2.6 The position of the component in the third frame is the median of the new position and the old position\n\t3. Draw the third frame\n\"\"\"\nfrom collections import namedtuple\nimport numpy as np\n\nPoint = namedtuple('Point', ['x', 'y'])\n\ndef find_connected_components(frame, component_id=1):\n\t\"\"\"\n\t\tFind connected components in the frame\n\t\tReturn a list of (component_id, list of pixels in the component)\n\t\"\"\"\n\tM, N = frame.shape\n\tcomponents = []\n\tfor i in xrange(M):\n\t\tfor j in xrange(N):\n\t\t\tif frame[i][j] != 'C':\n\t\t\t\tcontinue\n\n\t\t\t# New component\n\t\t\tcomponent = []\n\t\t\tcomponent.append(Point(i, j))\n\t\t\tframe[i][j] = component_id\n\n\t\t\twhile component:\n\t\t\t\tp = component.pop()\n\t\t\t\t# Check all 4 neighbours of p\n\t\t\t\tfor x,y in [(p.x+1, p.y), (p.x-1, p.y), (p.x, p.y+1), (p.x, p.y-1)]:\n\t\t\t\t\tif 0 <= x < M and 0 <= y < N:\n\t\t\t\t\t\tif frame[x][y] == 'C':\n\t\t\t\t\t\t\tcomponent.append(Point(x, y))\n\t\t\t\t\t\t\tframe[x][y] = component_id\n\n\t\t\tcomponents.append((component_id, component))\n\t\t\tcomponent_id += 1\n\n\treturn components\n\n\ndef find_bounding_box(points):\n\tmin_x = min_y = np.inf\n\tmax_x = max_y = -np.inf\n\n\tfor p in points:\n\t\tmin_x = min(min_x, p.x)\n\t\tmax_x = max(max_x, p.x)\n\t\tmin_y = min(min_y, p.y)\n\t\tmax_y = max(max_y, p.y)\n\n\treturn (min_x, max_x, min_y, max_y)\n\n\ndef median_of_points(points):\n\tx = [p.x for p in points]\n\ty = [p.y for p in points]\n\treturn Point(np.median(x), np.median(y))\n\n\ndef generate_median_frame(frame1, frame2):\n\tM, N = frame1.shape\n\tmedian_frame = np.zeros(frame1.shape, dtype=np.int8)\n\tmedian_frame.fill('.')\n\n\tcomponents = find_connected_components(frame1)\n\tfor cid, points in components:\n\t\t# Find bounding box of the component\n\t\tmin_x, max_x, min_y, max_y = find_bounding_box(points)\n\n\t\t# Find all points inside the bounding box that are also 'C' in frame2\n\t\t# These are the points that are part of the component in frame2\n\t\tcomponent_points_in_frame2 = []\n\t\tfor i in xrange(min_x, max_x+1):\n\t\t\tfor j in xrange(min_y, max_y+1):\n\t\t\t\tif frame2[i][j] == 'C':\n\t\t\t\t\tcomponent_points_in_frame2.append(Point(i, j))\n\n\t\t# Find the median of all these points\n\t\tnew_component_position = median_of_points(component_points_in_frame2)\n\n\t\t# Find the median of the old position and new position\n\t\t# This is the position of the component in the median frame\n\t\told_component_position = median_of_points(points)\n\t\tmedian_component_position = median_of_points([old_component_position, new_component_position])\n\n\t\t# Draw the median point in the median frame\n\t\tmedian_frame[median_component_position.x][median_component_position.y] = 'C'\n\n\treturn median_frame\n\n\n\nif __name__ == '__main__':\n\tM, N, C = raw_input().split()\n\tM, N = int(M), int(N)\n\tframe1 = np.zeros((M, N), dtype=np.int8)\n\tframe2 = np.zeros((M, N), dtype=np.int8)\n\n\tfor i in xrange(M):\n\t\tframe1[i] = raw_input()\n\n\traw_input() # empty line\n\tfor i in xrange(M):\n\t\tframe2[i] = raw_input()\n\n\tmedian_frame = generate_median_frame(frame1, frame2)\n\tfor i in xrange(M):\n\t\tprint ''.join(median_frame[i])\n\n\tprint", "\n\nimport sys\n\ndef main():\n    M, N, C = sys.stdin.readline().split()\n    M = int(M)\n    N = int(N)\n    C = C[1]\n    first_frame = []\n    second_frame = []\n    for _ in range(M):\n        first_frame.append(list(sys.stdin.readline().strip()))\n    sys.stdin.readline()\n    for _ in range(M):\n        second_frame.append(list(sys.stdin.readline().strip()))\n    for i in range(M):\n        for j in range(N):\n            if first_frame[i][j] == C:\n                print(second_frame[i][j], end='')\n            else:\n                print(first_frame[i][j], end='')\n        print()\n    print()\n\nmain()", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    lines = [line.strip() for line in lines]\n    lines = lines[1:]\n    while lines:\n        m, n, c = lines[0].split()\n        m, n = int(m), int(n)\n        lines = lines[1:]\n        first_frame = lines[:m]\n        lines = lines[m+1:]\n        second_frame = lines[:m]\n        lines = lines[m+1:]\n\n        for i in range(m):\n            for j in range(n):\n                if first_frame[i][j] == c:\n                    first_frame[i] = first_frame[i][:j] + '.' + first_frame[i][j+1:]\n                if second_frame[i][j] == c:\n                    second_frame[i] = second_frame[i][:j] + '.' + second_frame[i][j+1:]\n\n        for i in range(m):\n            for j in range(n):\n                if first_frame[i][j] != second_frame[i][j]:\n                    first_frame[i] = first_frame[i][:j] + c + first_frame[i][j+1:]\n        print('\\n'.join(first_frame))\n        print()\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\ndef get_input():\n    for line in sys.stdin:\n        if line == '\\n':\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        C = C[1:-1]\n        first_frame = []\n        second_frame = []\n        for i in range(M):\n            first_frame.append(sys.stdin.readline()[:-1])\n        sys.stdin.readline()\n        for i in range(M):\n            second_frame.append(sys.stdin.readline()[:-1])\n        yield M, N, C, first_frame, second_frame\n\ndef get_falcon_center(falcon):\n    x_sum = 0\n    y_sum = 0\n    total = 0\n    for y, row in enumerate(falcon):\n        for x, pixel in enumerate(row):\n            if pixel == 'X':\n                x_sum += x\n                y_sum += y\n                total += 1\n    return x_sum / total, y_sum / total\n\ndef get_falcon_distance(falcon1, falcon2):\n    x1, y1 = get_falcon_center(falcon1)\n    x2, y2 = get_falcon_center(falcon2)\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\ndef get_falcon(frame, C):\n    falcon = []\n    for row in frame:\n        falcon.append([pixel if pixel == C else '.' for pixel in row])\n    return falcon\n\ndef get_falcon_shift(falcon1, falcon2):\n    x1, y1 = get_falcon_center(falcon1)\n    x2, y2 = get_falcon_center(falcon2)\n    return x2 - x1, y2 - y1\n\ndef get_falcon_movement(falcon1, falcon2):\n    x1, y1 = get_falcon_center(falcon1)\n    x2, y2 = get_falcon_center(falcon2)\n    return x2 - x1, y2 - y1\n\ndef get_new_frame(M, N, C, first_frame, second_frame):\n    falcon1 = get_falcon(first_frame, C)\n    falcon2 = get_falcon(second_frame, C)\n    x_shift, y_shift = get_falcon_shift(falcon1, falcon2)\n    x_move, y_move = get_falcon_movement(falcon1, falcon2)\n    new_falcon = []\n    for y, row in enumerate(falcon1):\n        new_row = []\n        for x, pixel in enumerate(row):\n            if pixel == C:\n                new_x = x + x_shift + x_move\n                new_y = y + y_shift + y_move\n                if 0 <= new_x < N and 0 <= new_y < M:\n                    new_row.append(C)\n                else:\n                    new_row.append('.')\n            else:\n                new_row.append('.')\n        new_falcon.append(new_row)\n    return new_falcon\n\ndef print_frame(frame):\n    for row in frame:\n        print(''.join(row))\n\ndef main():\n    for M, N, C, first_frame, second_frame in get_input():\n        new_frame = get_new_frame(M, N, C, first_frame, second_frame)\n        print_frame(new_frame)\n        print()\n\nif __name__ == '__main__':\n    main()"]