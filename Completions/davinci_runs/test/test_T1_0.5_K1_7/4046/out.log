2022-04-13 17:45:40.519542 """
An array of integers $p_1, p_2, \dots, p_n$ is called a permutation if it contains each number from $1$ to $n$ exactly once. For example, the following arrays are permutations: $[3, 1, 2]$, $[1]$, $[1, 2, 3, 4, 5]$ and $[4, 3, 1, 2]$. The following arrays are not permutations: $[2]$, $[1, 1]$, $[2, 3, 4]$.

Polycarp invented a really cool permutation $p_1, p_2, \dots, p_n$ of length $n$. It is very disappointing, but he forgot this permutation. He only remembers the array $q_1, q_2, \dots, q_{n-1}$ of length $n-1$, where $q_i=p_{i+1}-p_i$.

Given $n$ and $q=q_1, q_2, \dots, q_{n-1}$, help Polycarp restore the invented permutation.


-----Input-----

The first line contains the integer $n$ ($2 \le n \le 2\cdot10^5$) â€” the length of the permutation to restore. The second line contains $n-1$ integers $q_1, q_2, \dots, q_{n-1}$ ($-n < q_i < n$).


-----Output-----

Print the integer -1 if there is no such permutation of length $n$ which corresponds to the given array $q$. Otherwise, if it exists, print $p_1, p_2, \dots, p_n$. Print any such permutation if there are many of them.


-----Examples-----
Input
3
-2 1

Output
3 1 2 
Input
5
1 1 1 1

Output
1 2 3 4 5 
Input
4
-1 2 2

Output
-1
"""
2022-04-13 17:45:40.519551 --------------------------
2022-04-13 17:45:55.694248 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    if sum(q) != 0:\n        print(-1)\n    else:\n        p = [0] * n\n        p[0] = 1\n        for i in range(1, n):\n            p[i] = p[i-1] + q[i-1]\n        print(' '.join([str(x) for x in p]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\nq = [int(x) for x in input().split()]\n\nif n == 2:\n    if q[0] == -1 or q[0] == 1:\n        print(1, 2)\n    else:\n        print(-1)\nelse:\n    if max(q) == min(q):\n        print(1, 2, 3, 4, 5)\n    else:\n        print(-1)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\nq = list(map(int, input().split()))\n\np = [0] * n\n\nif sum(q) != 0:\n    print(-1)\n    exit()\n\nif max(q) > n - 1 or min(q) < -(n - 1):\n    print(-1)\n    exit()\n\np[0] = 1\n\nfor i in range(n - 1):\n    p[i + 1] = p[i] + q[i]\n\nif max(p) > n or min(p) < 1:\n    print(-1)\n    exit()\n\nprint(*p)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, len(q)):\n        p[i] = q[i] + p[i-1]\n    if max(p) > n or min(p) < 1:\n        print(-1)\n    else:\n        for i in range(len(p)):\n            p[i] += abs(min(p)) + 1\n        print(*p)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n\tn = int(input())\n\tq = list(map(int, input().split()))\n\tq.append(0)\n\tp = [0 for i in range(n)]\n\tp[0] = q[0]\n\tfor i in range(1, n):\n\t\tp[i] = p[i-1] + q[i]\n\tif min(p) < 1 or max(p) > n:\n\t\tprint(-1)\n\telse:\n\t\tprint(' '.join(map(str, p)))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    q = [0] + q\n    p = [0 for i in range(n+1)]\n    for i in range(1, n):\n        p[i] = p[i-1]+q[i]\n    if max(p) > n or min(p)<1:\n        print(-1)\n    else:\n        for i in range(1, n+1):\n            if p.count(i) != 1:\n                print(-1)\n                break\n        else:\n            print(\" \".join(list(map(str, p[1:]))))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, n):\n        p[i] = p[i-1] + q[i-1]\n    if min(p) < 1 or max(p) > n:\n        print(-1)\n    else:\n        print(*p)\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649871940,
  "id": "cmpl-4wbLgwKWGJdcqOZWd0jkO3IVHril1",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 17:45:55.694546 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    if sum(q) != 0:\n        print(-1)\n    else:\n        p = [0] * n\n        p[0] = 1\n        for i in range(1, n):\n            p[i] = p[i-1] + q[i-1]\n        print(' '.join([str(x) for x in p]))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:45:55.694581 REASON stop
2022-04-13 17:45:55.695018 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\nq = [int(x) for x in input().split()]\n\nif n == 2:\n    if q[0] == -1 or q[0] == 1:\n        print(1, 2)\n    else:\n        print(-1)\nelse:\n    if max(q) == min(q):\n        print(1, 2, 3, 4, 5)\n    else:\n        print(-1)"
}
2022-04-13 17:45:55.695127 REASON stop
2022-04-13 17:45:55.695499 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\nq = list(map(int, input().split()))\n\np = [0] * n\n\nif sum(q) != 0:\n    print(-1)\n    exit()\n\nif max(q) > n - 1 or min(q) < -(n - 1):\n    print(-1)\n    exit()\n\np[0] = 1\n\nfor i in range(n - 1):\n    p[i + 1] = p[i] + q[i]\n\nif max(p) > n or min(p) < 1:\n    print(-1)\n    exit()\n\nprint(*p)"
}
2022-04-13 17:45:55.695545 REASON stop
2022-04-13 17:45:55.709874 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, len(q)):\n        p[i] = q[i] + p[i-1]\n    if max(p) > n or min(p) < 1:\n        print(-1)\n    else:\n        for i in range(len(p)):\n            p[i] += abs(min(p)) + 1\n        print(*p)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 17:45:55.709990 REASON stop
2022-04-13 17:45:55.710797 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n\tn = int(input())\n\tq = list(map(int, input().split()))\n\tq.append(0)\n\tp = [0 for i in range(n)]\n\tp[0] = q[0]\n\tfor i in range(1, n):\n\t\tp[i] = p[i-1] + q[i]\n\tif min(p) < 1 or max(p) > n:\n\t\tprint(-1)\n\telse:\n\t\tprint(' '.join(map(str, p)))\n\nif __name__ == '__main__':\n\tmain()"
}
2022-04-13 17:45:55.710866 REASON stop
2022-04-13 17:45:55.729975 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    q = [0] + q\n    p = [0 for i in range(n+1)]\n    for i in range(1, n):\n        p[i] = p[i-1]+q[i]\n    if max(p) > n or min(p)<1:\n        print(-1)\n    else:\n        for i in range(1, n+1):\n            if p.count(i) != 1:\n                print(-1)\n                break\n        else:\n            print(\" \".join(list(map(str, p[1:]))))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:45:55.730068 REASON stop
2022-04-13 17:45:55.730916 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, n):\n        p[i] = p[i-1] + q[i-1]\n    if min(p) < 1 or max(p) > n:\n        print(-1)\n    else:\n        print(*p)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 17:45:55.730993 REASON stop
