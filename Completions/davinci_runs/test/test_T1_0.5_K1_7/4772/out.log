2022-04-13 23:16:15.070657 """
Little Ivica solves crossword puzzles every day. In case you haven’t seen one, a crossword puzzle starts on a grid of $R \times C$ squares, each of which is either empty or blocked. The player’s task is to write words in consecutive empty squares vertically (top down) or horizontally (left to right).

Ivica’s sister has a strange habit of looking at crosswords Ivica has finished solving, and finding the lexicographically smallest word in it. She only considers words at least $2$ characters long.

Write a program that, given a crossword puzzle, finds that word.

-----Input-----
The first line contains two integers $R$ and $C$ ($2 \le R, C \le 20$), the number of rows and columns in the crosswords.

Each of the following $R$ lines contains a string of $C$ characters. Each of those characters is either a lowercase letter of the English alphabet, or the character ‘#’ representing a blocked square.

The input will be such that a solution will always exist.

-----Output-----
Output the lexicographically smallest word in the crossword.

-----Examples-----
Sample Input 1:
4 4
luka
o#a#
kula
i#a#
Sample Output 1:
kala

Sample Input 2:
4 4
luka
o#a#
kula
i#as
Sample Output 2:
as
"""
2022-04-13 23:16:15.070668 --------------------------
2022-04-13 23:16:37.660624 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    R, C = map(int, input().split())\n    grid = []\n    for i in range(R):\n        grid.append(list(input()))\n\n    words = []\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] != '#':\n                for k in range(j+1, C):\n                    if grid[i][k] == '#':\n                        break\n                    else:\n                        words.append(grid[i][j:k+1])\n                for k in range(i+1, R):\n                    if grid[k][j] == '#':\n                        break\n                    else:\n                        words.append(grid[i][j] + grid[k][j])\n    words = sorted(words)\n    print(words[0])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    r,c = map(int,sys.stdin.readline().split())\n\n    crossword = []\n    for i in range(r):\n        crossword.append(sys.stdin.readline().strip())\n\n    words = []\n\n    for i in range(r):\n        for j in range(c):\n            if crossword[i][j] != '#':\n                #check for horizontal words\n                if j+1 < c and crossword[i][j+1] != '#':\n                    word = \"\"\n                    for k in range(j,c):\n                        if crossword[i][k] == '#':\n                            break\n                        word += crossword[i][k]\n                    if len(word) > 1:\n                        words.append(word)\n                #check for vertical words\n                if i+1 < r and crossword[i+1][j] != '#':\n                    word = \"\"\n                    for k in range(i,r):\n                        if crossword[k][j] == '#':\n                            break\n                        word += crossword[k][j]\n                    if len(word) > 1:\n                        words.append(word)\n\n    words.sort()\n    print(words[0])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\nr, c = map(int, sys.stdin.readline().split())\ngrid = [None] * r\nfor i in range(r):\n    grid[i] = sys.stdin.readline().strip()\n\ndef check(i, j, word):\n    if i < 0 or i >= r or j < 0 or j >= c or grid[i][j] != word[0]:\n        return False\n    if len(word) == 1:\n        return True\n    return check(i-1, j, word[1:]) or check(i+1, j, word[1:]) or check(i, j-1, word[1:]) or check(i, j+1, word[1:])\n\nans = None\nfor i in range(r):\n    for j in range(c):\n        if grid[i][j] == '#':\n            continue\n        if ans is None or grid[i][j] < ans[0]:\n            ans = grid[i][j]\n        for k in range(i+1, r):\n            if grid[k][j] == '#':\n                break\n            word = grid[i][j] + grid[k][j]\n            if check(i, j, word) and check(k, j, word):\n                if ans is None or word < ans:\n                    ans = word\n        for k in range(j+1, c):\n            if grid[i][k] == '#':\n                break\n            word = grid[i][j] + grid[i][k]\n            if check(i, j, word) and check(i, k, word):\n                if ans is None or word < ans:\n                    ans = word\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# The following solution is a bit more complicated than it needs to be, but\n# it's concise and readable.\n\nimport sys\n\ndef main():\n    # Read input.\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n\n    # Check for words horizontally.\n    for r in range(R):\n        for c in range(C - 1):\n            if grid[r][c] != '#' and grid[r][c + 1] != '#':\n                print(grid[r][c:c + 2])\n                return\n\n    # Check for words vertically.\n    for r in range(R - 1):\n        for c in range(C):\n            if grid[r][c] != '#' and grid[r + 1][c] != '#':\n                print(grid[r][c] + grid[r + 1][c])\n                return\n\n    # We should never reach this point.\n    assert False\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    R, C = list(map(int, input().split()))\n    grid = [input() for _ in range(R)]\n    words = []\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c].isalpha():\n                try:\n                    if grid[r][c+1].isalpha():\n                        word = grid[r][c]\n                        c += 1\n                        while grid[r][c].isalpha():\n                            word += grid[r][c]\n                            c += 1\n                        words.append(word)\n                except:\n                    pass\n\n                try:\n                    if grid[r+1][c].isalpha():\n                        word = grid[r][c]\n                        r += 1\n                        while grid[r][c].isalpha():\n                            word += grid[r][c]\n                            r += 1\n                        words.append(word)\n                except:\n                    pass\n\n    words = [word for word in words if len(word) > 1]\n    print(min(words))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().strip().split())\n    grid = [[' ' for _ in range(C)] for _ in range(R)]\n    for i in range(R):\n        grid[i] = list(sys.stdin.readline().strip())\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                continue\n            if i > 0 and grid[i-1][j] != '#':\n                grid[i][j] = grid[i-1][j]\n            if j > 0 and grid[i][j-1] != '#':\n                grid[i][j] = grid[i][j-1]\n    words = []\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                continue\n            cur = grid[i][j]\n            if i > 0 and grid[i-1][j] == cur:\n                continue\n            if j > 0 and grid[i][j-1] == cur:\n                continue\n            while i < R and grid[i][j] == cur:\n                i += 1\n            while j < C and grid[i-1][j] == cur:\n                j += 1\n            words.append(cur)\n    print(min(words))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nr, c = map(int, input().split())\n\ngrid = []\nfor _ in range(r):\n    grid.append(input())\n\n# print(grid)\n\ndef is_valid(i, j, r, c):\n    if i < 0 or j < 0 or i >= r or j >= c:\n        return False\n    return True\n\ndef is_letter(grid, i, j, r, c):\n    if is_valid(i, j, r, c) and grid[i][j] != '#':\n        return True\n    return False\n\ndef find_word(grid, r, c):\n    min_word = 'z'\n    for i in range(r):\n        for j in range(c):\n            if is_letter(grid, i, j, r, c):\n                # print(i,j)\n                if is_letter(grid, i+1, j, r, c):\n                    word = grid[i][j] + grid[i+1][j]\n                    if word < min_word:\n                        min_word = word\n                if is_letter(grid, i, j+1, r, c):\n                    word = grid[i][j] + grid[i][j+1]\n                    if word < min_word:\n                        min_word = word\n    return min_word\n\nprint(find_word(grid, r, c))"
    }
  ],
  "created": 1649891775,
  "id": "cmpl-4wgVblRonQTV6PcbrbBfpMVLZhHsW",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 23:16:37.661037 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    R, C = map(int, input().split())\n    grid = []\n    for i in range(R):\n        grid.append(list(input()))\n\n    words = []\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] != '#':\n                for k in range(j+1, C):\n                    if grid[i][k] == '#':\n                        break\n                    else:\n                        words.append(grid[i][j:k+1])\n                for k in range(i+1, R):\n                    if grid[k][j] == '#':\n                        break\n                    else:\n                        words.append(grid[i][j] + grid[k][j])\n    words = sorted(words)\n    print(words[0])\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:16:37.661076 REASON stop
2022-04-13 23:16:37.661400 test/intro-questions.txt_dir/4772/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4772/solutions.json'
2022-04-13 23:16:37.661422 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    r,c = map(int,sys.stdin.readline().split())\n\n    crossword = []\n    for i in range(r):\n        crossword.append(sys.stdin.readline().strip())\n\n    words = []\n\n    for i in range(r):\n        for j in range(c):\n            if crossword[i][j] != '#':\n                #check for horizontal words\n                if j+1 < c and crossword[i][j+1] != '#':\n                    word = \"\"\n                    for k in range(j,c):\n                        if crossword[i][k] == '#':\n                            break\n                        word += crossword[i][k]\n                    if len(word) > 1:\n                        words.append(word)\n                #check for vertical words\n                if i+1 < r and crossword[i+1][j] != '#':\n                    word = \"\"\n                    for k in range(i,r):\n                        if crossword[k][j] == '#':\n                            break\n                        word += crossword[k][j]\n                    if len(word) > 1:\n                        words.append(word)\n\n    words.sort()\n    print(words[0])\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:16:37.661545 REASON stop
2022-04-13 23:16:37.661806 test/intro-questions.txt_dir/4772/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4772/solutions.json'
2022-04-13 23:16:37.661818 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\nr, c = map(int, sys.stdin.readline().split())\ngrid = [None] * r\nfor i in range(r):\n    grid[i] = sys.stdin.readline().strip()\n\ndef check(i, j, word):\n    if i < 0 or i >= r or j < 0 or j >= c or grid[i][j] != word[0]:\n        return False\n    if len(word) == 1:\n        return True\n    return check(i-1, j, word[1:]) or check(i+1, j, word[1:]) or check(i, j-1, word[1:]) or check(i, j+1, word[1:])\n\nans = None\nfor i in range(r):\n    for j in range(c):\n        if grid[i][j] == '#':\n            continue\n        if ans is None or grid[i][j] < ans[0]:\n            ans = grid[i][j]\n        for k in range(i+1, r):\n            if grid[k][j] == '#':\n                break\n            word = grid[i][j] + grid[k][j]\n            if check(i, j, word) and check(k, j, word):\n                if ans is None or word < ans:\n                    ans = word\n        for k in range(j+1, c):\n            if grid[i][k] == '#':\n                break\n            word = grid[i][j] + grid[i][k]\n            if check(i, j, word) and check(i, k, word):\n                if ans is None or word < ans:\n                    ans = word\n\nprint(ans)"
}
2022-04-13 23:16:37.661862 REASON stop
2022-04-13 23:16:37.662796 test/intro-questions.txt_dir/4772/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4772/solutions.json'
2022-04-13 23:16:37.662811 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# The following solution is a bit more complicated than it needs to be, but\n# it's concise and readable.\n\nimport sys\n\ndef main():\n    # Read input.\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n\n    # Check for words horizontally.\n    for r in range(R):\n        for c in range(C - 1):\n            if grid[r][c] != '#' and grid[r][c + 1] != '#':\n                print(grid[r][c:c + 2])\n                return\n\n    # Check for words vertically.\n    for r in range(R - 1):\n        for c in range(C):\n            if grid[r][c] != '#' and grid[r + 1][c] != '#':\n                print(grid[r][c] + grid[r + 1][c])\n                return\n\n    # We should never reach this point.\n    assert False\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 23:16:37.662854 REASON stop
2022-04-13 23:16:37.690520 test/intro-questions.txt_dir/4772/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4772/solutions.json'
2022-04-13 23:16:37.690561 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    R, C = list(map(int, input().split()))\n    grid = [input() for _ in range(R)]\n    words = []\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c].isalpha():\n                try:\n                    if grid[r][c+1].isalpha():\n                        word = grid[r][c]\n                        c += 1\n                        while grid[r][c].isalpha():\n                            word += grid[r][c]\n                            c += 1\n                        words.append(word)\n                except:\n                    pass\n\n                try:\n                    if grid[r+1][c].isalpha():\n                        word = grid[r][c]\n                        r += 1\n                        while grid[r][c].isalpha():\n                            word += grid[r][c]\n                            r += 1\n                        words.append(word)\n                except:\n                    pass\n\n    words = [word for word in words if len(word) > 1]\n    print(min(words))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 23:16:37.690673 REASON stop
2022-04-13 23:16:37.691194 test/intro-questions.txt_dir/4772/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4772/solutions.json'
2022-04-13 23:16:37.691215 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().strip().split())\n    grid = [[' ' for _ in range(C)] for _ in range(R)]\n    for i in range(R):\n        grid[i] = list(sys.stdin.readline().strip())\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                continue\n            if i > 0 and grid[i-1][j] != '#':\n                grid[i][j] = grid[i-1][j]\n            if j > 0 and grid[i][j-1] != '#':\n                grid[i][j] = grid[i][j-1]\n    words = []\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                continue\n            cur = grid[i][j]\n            if i > 0 and grid[i-1][j] == cur:\n                continue\n            if j > 0 and grid[i][j-1] == cur:\n                continue\n            while i < R and grid[i][j] == cur:\n                i += 1\n            while j < C and grid[i-1][j] == cur:\n                j += 1\n            words.append(cur)\n    print(min(words))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 23:16:37.691287 REASON stop
2022-04-13 23:16:37.705312 test/intro-questions.txt_dir/4772/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4772/solutions.json'
2022-04-13 23:16:37.705350 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nr, c = map(int, input().split())\n\ngrid = []\nfor _ in range(r):\n    grid.append(input())\n\n# print(grid)\n\ndef is_valid(i, j, r, c):\n    if i < 0 or j < 0 or i >= r or j >= c:\n        return False\n    return True\n\ndef is_letter(grid, i, j, r, c):\n    if is_valid(i, j, r, c) and grid[i][j] != '#':\n        return True\n    return False\n\ndef find_word(grid, r, c):\n    min_word = 'z'\n    for i in range(r):\n        for j in range(c):\n            if is_letter(grid, i, j, r, c):\n                # print(i,j)\n                if is_letter(grid, i+1, j, r, c):\n                    word = grid[i][j] + grid[i+1][j]\n                    if word < min_word:\n                        min_word = word\n                if is_letter(grid, i, j+1, r, c):\n                    word = grid[i][j] + grid[i][j+1]\n                    if word < min_word:\n                        min_word = word\n    return min_word\n\nprint(find_word(grid, r, c))"
}
2022-04-13 23:16:37.705481 REASON stop
2022-04-13 23:16:37.722394 test/intro-questions.txt_dir/4772/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4772/solutions.json'
