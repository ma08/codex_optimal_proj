["\n\ndef main():\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i+1)\n    total = 0\n    if len(heaters) == 0:\n        print(-1)\n        return\n    for i in range(n):\n        for j in range(len(heaters)):\n            if (heaters[j] - r + 1 <= i+1 <= heaters[j] + r - 1):\n                total += 1\n                break\n    if total == n:\n        print(len(heaters))\n    else:\n        print(-1)\n\nif __name__ == '__main__':\n    main()", "\n\n# cook your dish here\nn,r=map(int,input().split())\na=list(map(int,input().split()))\n\ndef no_of_heaters(n,r,a):\n    count=0\n    for i in range(n):\n        if a[i]==1:\n            continue\n        else:\n            for j in range(i+1,min(i+r,n)):\n                if a[j]==1:\n                    a[i]=1\n                    count+=1\n                    break\n    for i in range(n-1,0,-1):\n        if a[i]==1:\n            continue\n        else:\n            for j in range(i-1,max(0,i-r),-1):\n                if a[j]==1:\n                    a[i]=1\n                    count+=1\n                    break\n    if 0 in a:\n        return -1\n    else:\n        return count\n\nprint(no_of_heaters(n,r,a))", "\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, r, a)\n\ndef count_heaters(n, r, a):\n    total = sum(a)\n    heaters_on = 0\n    heater_positions = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters_on += 1\n            heater_positions.append(i)\n    # print(heaters_on, heater_positions)\n    if heaters_on == 0:\n        return -1\n    if heaters_on == 1 and heater_positions[0] == 0:\n        return -1\n    # print(total, heater_positions)\n    if total == n:\n        return heaters_on\n    if heater_positions[0] > r - 1:\n        return heaters_on + 1\n    if heater_positions[-1] < n - r:\n        return heaters_on + 1\n\n    # print(heater_positions)\n    for i in range(len(heater_positions) - 1):\n        # print(heater_positions[i], heater_positions[i+1])\n        if heater_positions[i+1] - heater_positions[i] > 2*r - 1:\n            heaters_on += 1\n    # print(heaters_on)\n    return heaters_on\n\n\nprint(count_heaters(n, r, a))", "\n\ndef heaters(n, r, a):\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            j = i + 1\n            while j < n and j <= i + r - 1:\n                if a[j] == 1:\n                    ans += 1\n                    i = j + r - 1\n                    break\n                j += 1\n            if j == n:\n                return -1\n        i += 1\n    return ans\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(heaters(n, r, a))", "\n\ndef main():\n    \"\"\"solution\"\"\"\n    n, r = [int(i) for i in input().split()]\n    house = [int(i) for i in input().split()]\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i+1)\n    if len(heaters) == 0:\n        print(-1)\n        return\n    ans = 0\n    left = heaters[0]\n    right = heaters[0]\n    for i in range(1, len(heaters)):\n        if heaters[i] > right:\n            ans += 1\n            left = heaters[i]\n            right = heaters[i]\n        elif heaters[i] < left:\n            ans += 1\n            left = heaters[i]\n            right = heaters[i]\n        else:\n            right = heaters[i]\n    print(ans+1)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    n, r = map(int, input().split())\n    array = list(map(int, input().split()))\n    index = 0\n    count = 0\n    while index < n:\n        if array[index] == 1:\n            index += 2 * r - 1\n        else:\n            if index + r - 1 >= n:\n                count = -1\n                break\n            elif array[index + r - 1] == 1:\n                index += 2 * r - 1\n            else:\n                count += 1\n                index += r - 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"]