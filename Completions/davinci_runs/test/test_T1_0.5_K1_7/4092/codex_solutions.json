["\n\ndef main(n, arr):\n    s = 0\n    count = 0\n    for i in range(n):\n        s += arr[i]\n        if s == 0:\n            count += 1\n            s = 1\n    return count\n\nn = int(input())\narr = [int(x) for x in input().split()]\nprint(main(n, arr))", "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = [arr[0]]\n    for i in range(1, n):\n        s.append(s[-1]+arr[i])\n    res = 0\n    cache = set()\n    for i in range(n):\n        if s[i] in cache:\n            res += 1\n            cache = set()\n        else:\n            cache.add(s[i])\n    print(res)\n\nif __name__ == '__main__':\n    main()", "\n\ndef find_zero_subsegments(arr):\n    \"\"\"\n    First, we initialize a dictionary to store the sum of the subsegment from the beginning of the array to the current index.\n    Then, we iterate through the array and check if the current sum is already in the dictionary. If so, it means that there is a subsegment from the location of this sum to the current index that sums to zero.\n    Otherwise, we add the current sum to the dictionary.\n    Finally, we return the number of zero subsegments.\n    \"\"\"\n    subsegment_sum = {0: -1}\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n        if sum in subsegment_sum:\n            count += 1\n        else:\n            subsegment_sum[sum] = i\n    return count\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(find_zero_subsegments(arr))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    # dp[i][j] = minimum number of elements to insert to make the sum of a[i:j] non-zero\n    dp = [[0]*n for _ in range(n)]\n    \n    # Base case: dp[i][i] = 0 for all i\n    \n    for i in range(n-1):\n        dp[i][i+1] = 2 if a[i] == -a[i+1] else 0\n    \n    for i in range(n-2, -1, -1):\n        for j in range(i+2, n):\n            # If the sum of a[i:j] is not zero, we can make the sum of a[i:j] non-zero by inserting 0 elements\n            if a[i:j].count(0) == 0 and sum(a[i:j]) != 0:\n                dp[i][j] = 0\n            # Otherwise, we have to insert at least one element\n            else:\n                dp[i][j] = 1 + min(dp[i][k] + dp[k+1][j] for k in range(i, j))\n    \n    print(dp[0][n-1])\n\nif __name__ == \"__main__\":\n    main()", "\n\n# Uses python3\nimport sys\nimport random\n\ndef partition3(a, l, r):\n    x = a[l]\n    j = l\n    k = l\n    for i in range(l + 1, r + 1):\n        if a[i] == x:\n            k += 1\n            a[i], a[k] = a[k], a[i]\n        elif a[i] < x:\n            k += 1\n            a[i], a[k] = a[k], a[i]\n            j += 1\n            a[j], a[k] = a[k], a[j]\n    a[l], a[j] = a[j], a[l]\n    return j, k\n\n\ndef partition2(a, l, r):\n    x = a[l]\n    j = l\n    for i in range(l + 1, r + 1):\n        if a[i] <= x:\n            j += 1\n            a[i], a[j] = a[j], a[i]\n    a[l], a[j] = a[j], a[l]\n    return j\n\n\ndef randomized_quick_sort(a, l, r):\n    if l >= r:\n        return\n    k = random.randint(l, r)\n    a[l], a[k] = a[k], a[l]\n    #use partition3\n    m,n = partition3(a, l, r)\n    randomized_quick_sort(a, l, m - 1);\n    randomized_quick_sort(a, n + 1, r);\n\n\ndef partition(a, l, r):\n    x = a[l]\n    j = l\n    for i in range(l + 1, r + 1):\n        if a[i] <= x:\n            j += 1\n            a[i], a[j] = a[j], a[i]\n    a[l], a[j] = a[j], a[l]\n    return j\n\ndef partition_2(a, l, r):\n    x = a[l]\n    j = l\n    k = l\n    for i in range(l + 1, r + 1):\n        if a[i] == x:\n            k += 1\n            a[i], a[k] = a[k], a[i]\n        elif a[i] < x:\n            k += 1\n            a[i], a[k] = a[k], a[i]\n            j += 1\n            a[j], a[k] = a[k], a[j]\n    a[l], a[j] = a[j], a[l]\n    return j, k\n\ndef randomized_quick_sort_2(a, l, r):\n    if l >= r:\n        return\n    k = random.randint(l, r)\n    a[l], a[k] = a[k], a[l]\n    #use partition3\n    m,n = partition_2(a, l, r)\n    randomized_quick_sort_2(a, l, m - 1);\n    randomized_quick_sort_2(a, n + 1, r);\n\ndef randomized_quick_sort_3(a, l, r):\n    if l >= r:\n        return\n    k = random.randint(l, r)\n    a[l], a[k] = a[k], a[l]\n    #use partition3\n    m,n = partition_2(a, l, r)\n    randomized_quick_sort_3(a, l, m - 1);\n    randomized_quick_sort_3(a, n + 1, r);\n\ndef randomized_quick_sort_4(a, l, r):\n    if l >= r:\n        return\n    k = random.randint(l, r)\n    a[l], a[k] = a[k], a[l]\n    #use partition3\n    m,n = partition_2(a, l, r)\n    randomized_quick_sort_4(a, l, m - 1);\n    randomized_quick_sort_4(a, n + 1, r);\n\ndef randomized_quick_sort_5(a, l, r):\n    if l >= r:\n        return\n    k = random.randint(l, r)\n    a[l], a[k] = a[k], a[l]\n    #use partition3\n    m,n = partition_2(a, l, r)\n    randomized_quick_sort_5(a, l, m - 1);\n    randomized_quick_sort_5(a, n + 1, r);\n\ndef randomized_quick_sort_6(a, l, r):\n    if l >= r:\n        return\n    k = random.randint(l, r)\n    a[l], a[k] = a[k], a[l]\n    #use partition3\n    m,n = partition_2(a, l, r)\n    randomized_quick_sort_6(a, l, m - 1);\n    randomized_quick_sort_6(a, n + 1, r);\n\ndef randomized_quick_sort_7(a, l, r):\n    if l >= r:\n        return\n    k = random.randint(l, r)\n    a[l], a[k] = a[k], a[l]\n    #use partition3\n    m,n = partition_2(a, l, r)\n    randomized_quick_sort_7(a, l, m - 1);\n    randomized_quick_sort_7(a, n + 1, r);\n\ndef randomized_quick_sort_8(a, l, r):\n    if l >= r:\n        return\n    k = random.randint(l, r)\n    a[l], a[k] = a[k], a[l]\n    #use partition3\n    m,n = partition_2(a, l, r)\n    randomized_quick_sort_8(a, l, m - 1);\n    randomized_quick_sort_8(a, n + 1, r);\n\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    n, *a = list(map(int, input.split()))\n    randomized_quick_sort(a, 0, n - 1)\n    randomized_quick_sort_2(a, 0, n - 1)\n    randomized_quick_sort_3(a, 0, n - 1)\n    randomized_quick_sort_4(a, 0, n - 1)\n    randomized_quick_sort_5(a, 0, n - 1)\n    randomized_quick_sort_6(a, 0, n - 1)\n    randomized_quick_sort_7(a, 0, n - 1)\n    randomized_quick_sort_8(a, 0, n - 1)\n    for x in a:\n        print(x, end=' ')", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    d = {}\n    for i in range(n):\n        s += a[i]\n        if s == 0:\n            print(i+1)\n            return\n        if s not in d:\n            d[s] = i\n        else:\n            print(i - d[s])\n            return\n    print(0)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    \"\"\"\n    >>> main()\n    1\n    0\n    6\n    3\n    \"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # The prefix sum array.\n    p = [0] * (n + 1)\n    for i in range(n):\n        p[i + 1] = p[i] + a[i]\n\n    # The hash map.\n    #\n    # key: the prefix sum value\n    # value: the index of the prefix sum value in the prefix sum array\n    #\n    # Example:\n    # p = [0, 1, -4, -1, 1, 0, 1, 2, 1, 0]\n    # m = {\n    #     0: [0, 5, 9],\n    #     1: [1, 6, 7],\n    #     -4: [2],\n    #     -1: [3],\n    #     -1: [4],\n    #     2: [8],\n    # }\n    m = {}\n    for i in range(n + 1):\n        m.setdefault(p[i], []).append(i)\n\n    # The number of subsegments with the sum 0.\n    ans = 0\n    for i in m.values():\n        # The number of subsegments in the array.\n        #\n        # The number of subsegments in the array of length $k$ is $(k - 1) + (k - 2) + \\dots + 1 = (1 + k - 1) \\times (k - 1) / 2 = k \\times (k - 1) / 2$.\n        #\n        # The number of subsegments in the array of length $k_1, k_2, \\dots, k_l$ is $k_1 \\times (k_1 - 1) / 2 + k_2 \\times (k_2 - 1) / 2 + \\dots + k_l \\times (k_l - 1) / 2$.\n        ans += (len(i) - 1) * len(i) // 2\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"]