2022-04-13 23:15:41.072176 """
Pero is a passionate lover of riddles. The newest type of riddles he has come across requires the solver to check whether the given word is a multigram.

A multigram is a word that consists of concatenating two or more words that are all mutually anagrams. The first of these words is called the root of the multigram. For instance, the word bbabab is a multigram with the root bba because it consists of anagrams bba and bab.

Help Pero solve the riddle by determining whether his word is a multigram and determining its root in case it is. If there are multiple possible roots of the multigram, output the shortest.

Note: Two words are mutually anagrams if one of them can be obtained from the other by changing the letter order.

-----Input-----
The first and only line of input contains a word of length at most $100000$ lowercase English characters.

-----Output-----
If the given word is not a multigram, output -1. Otherwise, output the shortest root of the given word in one line.

-----Examples-----
Sample Input 1:
aaaa
Sample Output 1:
a

Sample Input 2:
ab
Sample Output 2:
-1
"""
2022-04-13 23:15:41.072185 --------------------------
2022-04-13 23:16:00.484736 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    word = input()\n    if len(word) == 1:\n        print(word)\n    else:\n        for i in range(1, len(word)):\n            if word[0:i] == word[i:2*i]:\n                print(word[0:i])\n                break\n        else:\n            print(\"-1\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef is_multigram(word):\n    if len(word) == 1:\n        return False\n    if len(word) == 2:\n        return False\n    if len(word) == 3:\n        return False\n    elif len(word) == 4:\n        return word[0] == word[1] and word[2] == word[3]\n    else:\n        return is_multigram(word[0:len(word)//2]) and is_multigram(word[len(word)//2:])\n\ndef root_of_multigram(word):\n    if is_multigram(word):\n        if len(word) == 4:\n            return word[0]\n        else:\n            return root_of_multigram(word[0:len(word)//2])\n    else:\n        return -1\n\ndef main():\n    word = input()\n    print(root_of_multigram(word))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\ndef is_multigram(root, word):\n    if len(root) == 0:\n        return False\n    return word == root + word[len(root):]\n\ndef find_root(word):\n    for i in range(1, len(word)):\n        root = word[:i]\n        if is_multigram(root, word):\n            return root\n    return -1\n\nif __name__ == '__main__':\n    word = input()\n\n    root = find_root(word)\n    print(root)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)\n\ndef find_root(word):\n    length = len(word)\n    for i in range(1, length):\n        if is_anagram(word[:i], word[i:]):\n            return word[:i]\n    return -1\n\nif __name__ == '__main__':\n    print(find_root(input()))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nword = input()\n\nfor i in range(1, len(word)//2+1):\n    if word[:i] * (len(word)//i) == word:\n        print(word[:i])\n        exit()\nprint(-1)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\nfrom collections import Counter\n\nword = sys.stdin.readline().strip()\n\nif len(word) % 2 == 1:\n    print(\"-1\")\nelse:\n    word_len = len(word)\n    half_word_len = word_len // 2\n    half_word = word[:half_word_len]\n    half_word_count = Counter(half_word)\n    for i in range(half_word_len, word_len):\n        half_word_count[word[i]] -= 1\n        if half_word_count[word[i]] == 0:\n            del half_word_count[word[i]]\n    if len(half_word_count) == 0:\n        print(half_word)\n    else:\n        print(\"-1\")"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef isMultigram(word):\n    for i in range(1, len(word)):\n        if word[i] != word[i-1]:\n            return False\n    return True\n\ndef minMultigram(word):\n    if isMultigram(word):\n        return word[0]\n    else:\n        return -1\n\nprint(minMultigram(input()))"
    }
  ],
  "created": 1649891741,
  "id": "cmpl-4wgV3YjV5HcNGzg4WD9Ngn6BizwtI",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 23:16:00.485028 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    word = input()\n    if len(word) == 1:\n        print(word)\n    else:\n        for i in range(1, len(word)):\n            if word[0:i] == word[i:2*i]:\n                print(word[0:i])\n                break\n        else:\n            print(\"-1\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:16:00.485069 REASON stop
2022-04-13 23:16:00.485464 test/intro-questions.txt_dir/4769/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4769/solutions.json'
2022-04-13 23:16:00.485482 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef is_multigram(word):\n    if len(word) == 1:\n        return False\n    if len(word) == 2:\n        return False\n    if len(word) == 3:\n        return False\n    elif len(word) == 4:\n        return word[0] == word[1] and word[2] == word[3]\n    else:\n        return is_multigram(word[0:len(word)//2]) and is_multigram(word[len(word)//2:])\n\ndef root_of_multigram(word):\n    if is_multigram(word):\n        if len(word) == 4:\n            return word[0]\n        else:\n            return root_of_multigram(word[0:len(word)//2])\n    else:\n        return -1\n\ndef main():\n    word = input()\n    print(root_of_multigram(word))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:16:00.485610 REASON stop
2022-04-13 23:16:00.485870 test/intro-questions.txt_dir/4769/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4769/solutions.json'
2022-04-13 23:16:00.485884 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\ndef is_multigram(root, word):\n    if len(root) == 0:\n        return False\n    return word == root + word[len(root):]\n\ndef find_root(word):\n    for i in range(1, len(word)):\n        root = word[:i]\n        if is_multigram(root, word):\n            return root\n    return -1\n\nif __name__ == '__main__':\n    word = input()\n\n    root = find_root(word)\n    print(root)"
}
2022-04-13 23:16:00.485925 REASON stop
2022-04-13 23:16:00.509981 test/intro-questions.txt_dir/4769/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4769/solutions.json'
2022-04-13 23:16:00.510015 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)\n\ndef find_root(word):\n    length = len(word)\n    for i in range(1, length):\n        if is_anagram(word[:i], word[i:]):\n            return word[:i]\n    return -1\n\nif __name__ == '__main__':\n    print(find_root(input()))"
}
2022-04-13 23:16:00.510083 REASON stop
2022-04-13 23:16:00.525461 test/intro-questions.txt_dir/4769/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4769/solutions.json'
2022-04-13 23:16:00.525497 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nword = input()\n\nfor i in range(1, len(word)//2+1):\n    if word[:i] * (len(word)//i) == word:\n        print(word[:i])\n        exit()\nprint(-1)"
}
2022-04-13 23:16:00.525572 REASON stop
2022-04-13 23:16:00.547073 test/intro-questions.txt_dir/4769/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4769/solutions.json'
2022-04-13 23:16:00.547116 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\nfrom collections import Counter\n\nword = sys.stdin.readline().strip()\n\nif len(word) % 2 == 1:\n    print(\"-1\")\nelse:\n    word_len = len(word)\n    half_word_len = word_len // 2\n    half_word = word[:half_word_len]\n    half_word_count = Counter(half_word)\n    for i in range(half_word_len, word_len):\n        half_word_count[word[i]] -= 1\n        if half_word_count[word[i]] == 0:\n            del half_word_count[word[i]]\n    if len(half_word_count) == 0:\n        print(half_word)\n    else:\n        print(\"-1\")"
}
2022-04-13 23:16:00.547222 REASON stop
2022-04-13 23:16:00.547893 test/intro-questions.txt_dir/4769/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4769/solutions.json'
2022-04-13 23:16:00.547914 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef isMultigram(word):\n    for i in range(1, len(word)):\n        if word[i] != word[i-1]:\n            return False\n    return True\n\ndef minMultigram(word):\n    if isMultigram(word):\n        return word[0]\n    else:\n        return -1\n\nprint(minMultigram(input()))"
}
2022-04-13 23:16:00.547974 REASON stop
2022-04-13 23:16:00.548550 test/intro-questions.txt_dir/4769/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4769/solutions.json'
