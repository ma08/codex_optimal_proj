["\n\nn, r = map(int, input().split())\n\na = []\nb = []\n\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\nr_after = r\n\nfor i in range(n):\n    if (r_after < a[i]):\n        print(\"NO\")\n        exit(0)\n\n    r_after += b[i]\n\n    if (r_after < 0):\n        print(\"NO\")\n        exit(0)\n\nprint(\"YES\")", "\n\nn, r = map(int,input().split())\na = []\nb = []\nfor i in range(n):\n    x,y = map(int,input().split())\n    a.append(x)\n    b.append(y)\n\nc = [0]*n\nc[0] = a[0]\nfor i in range(1,n):\n    c[i] = c[i-1] + a[i]\n\nfor i in range(n):\n    if r >= c[i]:\n        r = r + b[i]\n        if r < 0:\n            print(\"NO\")\n            exit(0)\nprint(\"YES\")", "\n\nimport sys\n\ndef main():\n\tdata = sys.stdin.read().splitlines()\n\tn,r = map(int, data[0].split())\n\tprojects = [list(map(int, x.split())) for x in data[1:]]\n\t\n\tpossible = True\n\tfor a,b in projects:\n\t\tif a > r:\n\t\t\tpossible = False\n\t\t\tbreak\n\t\telse:\n\t\t\tr += b\n\t\tif r < 0:\n\t\t\tpossible = False\n\t\t\tbreak\n\t\n\tif possible:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\nif __name__ == \"__main__\":\n\tmain()", "\n\n#1)\nn, r = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\nfor i in range(n):\n    r -= a[i]\n    if r < 0:\n        print(\"NO\")\n        break\n    r += b[i]\nelse:\n    print(\"YES\")\n\n#2)\nn, r = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\nfor i in range(n):\n    r -= a[i]\n    if r < 0:\n        print(\"NO\")\n        break\n    r += b[i]\nelse:\n    print(\"YES\")", "\n\nn, r = map(int, input().split())\n\na = []\nb = []\n\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n#print(a)\n#print(b)\n\nif r >= a[0]:\n    r += b[0]\n    if r < 0:\n        print('NO')\n        exit()\n    for i in range(1, n):\n        if r >= a[i]:\n            r += b[i]\n            if r < 0:\n                print('NO')\n                exit()\n        else:\n            print('NO')\n            exit()\nelse:\n    print('NO')\n    exit()\n\nprint('YES')", "\n\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, sys.stdin.readline().split())))\n\n    #print(projects)\n    #print(n, r)\n\n    for i in range(n):\n        #print(i)\n        #print(r)\n        if r < projects[i][0]:\n            print(\"NO\")\n            return\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    return\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    \"\"\"\n    This is the main function of the program.\n    \"\"\"\n    n, r = map(int, input().split())\n    a = []\n    b = []\n    for i in range(n):\n        a_i, b_i = map(int, input().split())\n        a.append(a_i)\n        b.append(b_i)\n    r = solve(n, r, a, b)\n    if r == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ndef solve(n, r, a, b):\n    \"\"\"\n    This function solves the problem.\n\n    Parameters:\n    n (int): The number of projects.\n    r (int): The initial rating of Polycarp.\n    a (list): The rating required to complete the $i$-th project.\n    b (list): The rating change after the project completion.\n\n    Returns:\n    bool: True if is possible to complete all the projects, False otherwise.\n    \"\"\"\n    r = r\n    for i in range(n):\n        r = r - a[i] + b[i]\n        if r < 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()"]