["\n\nimport sys\n\ndef main():\n    length = int(sys.stdin.readline().strip())\n    line = sys.stdin.readline().strip()\n\n    # check if the number of opening brackets matches the number of closing brackets\n    if line.count('(') == line.count(')') and line.count('[') == line.count(']') and line.count('{') == line.count('}'):\n        print(\"ok so far\")\n        return\n\n    # check if there are more opening brackets than closing brackets\n    if line.count('(') > line.count(')') or line.count('[') > line.count(']') or line.count('{') > line.count('}'):\n        print(\"ok so far\")\n        return\n\n    # the number of closing brackets is greater than the number of opening brackets\n    # find the first unmatched closing bracket and output its index\n    for i in range(length):\n        if line[i] == ')':\n            print(\"%c %d\" % (line[i], i))\n            return\n        elif line[i] == ']':\n            print(\"%c %d\" % (line[i], i))\n            return\n        elif line[i] == '}':\n            print(\"%c %d\" % (line[i], i))\n            return\n\nmain()", "\n\nimport sys\n\ndef main():\n    # read lines\n    line1 = input()\n    line2 = input()\n\n    # initialize stack\n    stack = []\n\n    # loop through line2 characters\n    for i in range(len(line2)):\n        # check if character is opening delimiter\n        if line2[i] == '(' or line2[i] == '[' or line2[i] == '{':\n            # push character to stack\n            stack.append(line2[i])\n        # check if character is closing delimiter\n        elif line2[i] == ')' or line2[i] == ']' or line2[i] == '}':\n            # check if stack is empty\n            if len(stack) == 0:\n                # print closing delimiter and index\n                print(line2[i], i)\n                # exit program\n                sys.exit()\n            # check if closing delimiter matches with opening delimiter on top of stack\n            elif line2[i] == ')' and stack[-1] == '(' or line2[i] == ']' and stack[-1] == '[' or line2[i] == '}' and stack[-1] == '{':\n                # pop opening delimiter from stack\n                stack.pop()\n            # closing delimiter does not match with opening delimiter on top of stack\n            else:\n                # print closing delimiter and index\n                print(line2[i], i)\n                # exit program\n                sys.exit()\n\n    # check if stack is empty\n    if len(stack) == 0:\n        # print 'ok so far'\n        print('ok so far')\n    # stack is not empty\n    else:\n        # print 'ok so far'\n        print('ok so far')\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    num = int(input())\n    line = input().strip()\n    stack = []\n    for i in range(num):\n        if line[i] in \"([{\":\n            stack.append(line[i])\n        elif line[i] == \")\":\n            if stack[-1] != \"(\":\n                print(\")\", i)\n                break\n            else:\n                stack.pop()\n        elif line[i] == \"]\":\n            if stack[-1] != \"[\":\n                print(\"]\", i)\n                break\n            else:\n                stack.pop()\n        elif line[i] == \"}\":\n            if stack[-1] != \"{\":\n                print(\"}\", i)\n                break\n            else:\n                stack.pop()\n    else:\n        print(\"ok so far\")\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef validate(line):\n    line = line.strip()\n    stack = []\n    for i, c in enumerate(line):\n        if c in ['(', '[', '{']:\n            stack.append(c)\n        elif c in [')', ']', '}']:\n            if len(stack) == 0:\n                return (c, i)\n            else:\n                prev = stack.pop()\n                if prev == '(' and c != ')' or prev == '[' and c != ']' or prev == '{' and c != '}':\n                    return (c, i)\n    if len(stack) == 0:\n        return 'ok so far'\n    else:\n        return (stack[0], line.index(stack[0]))\n\ndef main():\n    length = int(sys.stdin.readline().strip())\n    line = sys.stdin.readline().strip()\n    print(validate(line))\n\nif __name__ == '__main__':\n    main()", "\ndef get_closing(character):\n    if character == '(':\n        return ')'\n    elif character == '[':\n        return ']'\n    elif character == '{':\n        return '}'\n    else:\n        raise ValueError(\"Invalid character: {}\".format(character))\n\ndef get_opening(character):\n    if character == ')':\n        return '('\n    elif character == ']':\n        return '['\n    elif character == '}':\n        return '{'\n    else:\n        raise ValueError(\"Invalid character: {}\".format(character))\n\ndef main():\n    length = int(input())\n    line = input()\n    stack = []\n    for i, char in enumerate(line):\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if stack and stack[-1] == get_opening(char):\n                stack.pop()\n            else:\n                print(char, i)\n                return\n    if stack:\n        print(get_closing(stack.pop()), i)\n    else:\n        print('ok so far')\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    f = sys.stdin\n    if len(sys.argv) >= 2:\n        fn = sys.argv[1]\n        if fn != '-':\n            f = open(fn)\n\n    delimiters = {\n        '{': '}',\n        '[': ']',\n        '(': ')',\n    }\n\n    open_delimiters = delimiters.keys()\n    close_delimiters = delimiters.values()\n    all_delimiters = open_delimiters + close_delimiters\n\n    stack = []\n    for i, c in enumerate(f.readline()):\n        if c in all_delimiters:\n            if c in open_delimiters:\n                stack.append(c)\n            else:\n                if stack and delimiters[stack[-1]] == c:\n                    stack.pop()\n                else:\n                    print(c, i)\n                    return\n    if stack:\n        print('ok so far')\n    else:\n        print('ok so far')\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    l = int(input())\n    program = input()\n\n    stack = []\n    for i in range(len(program)):\n        c = program[i]\n        if c == '(' or c == '[' or c == '{':\n            stack.append(c)\n        elif c == ')' or c == ']' or c == '}':\n            if len(stack) == 0 or match(stack[-1], c) == False:\n                print(c, i)\n                return\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        print(\"ok so far\")\n    else:\n        print(stack[0], 0)\n\ndef match(a, b):\n    if a == '(' and b == ')':\n        return True\n    elif a == '[' and b == ']':\n        return True\n    elif a == '{' and b == '}':\n        return True\n    else:\n        return False\n\nmain()"]