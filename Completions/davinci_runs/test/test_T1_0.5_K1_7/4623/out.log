2022-04-13 22:14:02.960047 """
There are $n$ people who want to participate in a boat competition. The weight of the $i$-th participant is $w_i$. Only teams consisting of two people can participate in this competition. As an organizer, you think that it's fair to allow only teams with the same total weight.

So, if there are $k$ teams $(a_1, b_1)$, $(a_2, b_2)$, $\dots$, $(a_k, b_k)$, where $a_i$ is the weight of the first participant of the $i$-th team and $b_i$ is the weight of the second participant of the $i$-th team, then the condition $a_1 + b_1 = a_2 + b_2 = \dots = a_k + b_k = s$, where $s$ is the total weight of each team, should be satisfied.

Your task is to choose such $s$ that the number of teams people can create is the maximum possible. Note that each participant can be in no more than one team.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 1000$) — the number of test cases. Then $t$ test cases follow.

The first line of the test case contains one integer $n$ ($1 \le n \le 50$) — the number of participants. The second line of the test case contains $n$ integers $w_1, w_2, \dots, w_n$ ($1 \le w_i \le n$), where $w_i$ is the weight of the $i$-th participant.


-----Output-----

For each test case, print one integer $k$: the maximum number of teams people can compose with the total weight $s$, if you choose $s$ optimally.


-----Example-----
Input
5
5
1 2 3 4 5
8
6 6 6 6 6 6 8 8
8
1 2 2 1 2 1 1 2
3
1 3 3
6
1 1 3 4 2 2

Output
2
3
4
1
2



-----Note-----

In the first test case of the example, we can reach the optimal answer for $s=6$. Then the first boat is used by participants $1$ and $5$ and the second boat is used by participants $2$ and $4$ (indices are the same as weights).

In the second test case of the example, we can reach the optimal answer for $s=12$. Then first $6$ participants can form $3$ pairs.

In the third test case of the example, we can reach the optimal answer for $s=3$. The answer is $4$ because we have $4$ participants with weight $1$ and $4$ participants with weight $2$.

In the fourth test case of the example, we can reach the optimal answer for $s=4$ or $s=6$.

In the fifth test case of the example, we can reach the optimal answer for $s=3$. Note that participant with weight $3$ can't use the boat because there is no suitable pair for him in the list.
"""
2022-04-13 22:14:02.960067 --------------------------
2022-04-13 22:14:19.864574 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# The idea is to sort the weights and then match the weights from the beginning and the end of the list.\n# This way we can find the maximum number of pairs with the same weight.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    weights.sort()\n    i = 0\n    j = n - 1\n    count = 0\n    while i < j:\n        if weights[i] + weights[j] == weights[i + 1] + weights[j - 1]:\n            count += 1\n            i += 1\n            j -= 1\n        elif weights[i] + weights[j] > weights[i + 1] + weights[j - 1]:\n            i += 1\n        else:\n            j -= 1\n    print(count)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# In this problem we have to find the total weight of the boat, so that the number of people who can participate in the boat race is maximum.\n# The solution is to find the number of people who have the same weight and then choose the maximum number of people with the same weight.\n# The total weight of boat is the sum of the weight of these people.\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    d = {}\n    for i in w:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    print(max(d.values()))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef max_num_teams(weights):\n    weights.sort()\n    max_teams = 0\n    for i in range(len(weights)):\n        for j in range(i+1, len(weights)):\n            if weights[i] + weights[j] <= weights[-1]:\n                max_teams += 1\n            else:\n                break\n    return max_teams\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        weights = list(map(int, input().split()))\n        print(max_num_teams(weights))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\ndef solve(n, w):\n    c = Counter(w)\n    total_teams = 0\n    for i in range(1, n+1):\n        total_teams += min(c[i], c[n-i+1])\n    return total_teams\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        w = list(map(int, input().split()))\n        print(solve(n, w))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    count = 0\n    for i in d:\n        if i == 0:\n            count += d[i]//2\n        elif i != 0 and (i in d and (i*2) in d):\n            if d[i] >= d[i*2]:\n                count += d[i*2]\n            else:\n                count += d[i]\n    print(count)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(n, w):\n    w.sort()\n    s = w[0]\n    cnt = 0\n    for i in range(1, n):\n        if w[i] == s:\n            cnt += 1\n        else:\n            break\n    return cnt\n\nif __name__ == '__main__':\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        w = [int(x) for x in sys.stdin.readline().strip().split()]\n        print(solve(n, w))"
    }
  ],
  "created": 1649888043,
  "id": "cmpl-4wfXPUqPCcvB3r8kPy80Fb7MSFlrN",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:14:19.864886 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# The idea is to sort the weights and then match the weights from the beginning and the end of the list.\n# This way we can find the maximum number of pairs with the same weight.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    weights.sort()\n    i = 0\n    j = n - 1\n    count = 0\n    while i < j:\n        if weights[i] + weights[j] == weights[i + 1] + weights[j - 1]:\n            count += 1\n            i += 1\n            j -= 1\n        elif weights[i] + weights[j] > weights[i + 1] + weights[j - 1]:\n            i += 1\n        else:\n            j -= 1\n    print(count)"
}
2022-04-13 22:14:19.864927 REASON stop
2022-04-13 22:14:19.865561 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# In this problem we have to find the total weight of the boat, so that the number of people who can participate in the boat race is maximum.\n# The solution is to find the number of people who have the same weight and then choose the maximum number of people with the same weight.\n# The total weight of boat is the sum of the weight of these people.\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    d = {}\n    for i in w:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    print(max(d.values()))"
}
2022-04-13 22:14:19.865717 REASON stop
2022-04-13 22:14:19.866115 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef max_num_teams(weights):\n    weights.sort()\n    max_teams = 0\n    for i in range(len(weights)):\n        for j in range(i+1, len(weights)):\n            if weights[i] + weights[j] <= weights[-1]:\n                max_teams += 1\n            else:\n                break\n    return max_teams\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        weights = list(map(int, input().split()))\n        print(max_num_teams(weights))"
}
2022-04-13 22:14:19.866193 REASON stop
2022-04-13 22:14:19.884227 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": ""
}
2022-04-13 22:14:19.884329 REASON stop
2022-04-13 22:14:19.896984 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\ndef solve(n, w):\n    c = Counter(w)\n    total_teams = 0\n    for i in range(1, n+1):\n        total_teams += min(c[i], c[n-i+1])\n    return total_teams\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        w = list(map(int, input().split()))\n        print(solve(n, w))"
}
2022-04-13 22:14:19.897117 REASON stop
2022-04-13 22:14:19.897757 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    count = 0\n    for i in d:\n        if i == 0:\n            count += d[i]//2\n        elif i != 0 and (i in d and (i*2) in d):\n            if d[i] >= d[i*2]:\n                count += d[i*2]\n            else:\n                count += d[i]\n    print(count)"
}
2022-04-13 22:14:19.897817 REASON stop
2022-04-13 22:14:19.898480 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(n, w):\n    w.sort()\n    s = w[0]\n    cnt = 0\n    for i in range(1, n):\n        if w[i] == s:\n            cnt += 1\n        else:\n            break\n    return cnt\n\nif __name__ == '__main__':\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        w = [int(x) for x in sys.stdin.readline().strip().split()]\n        print(solve(n, w))"
}
2022-04-13 22:14:19.898535 REASON stop
