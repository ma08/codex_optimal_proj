2022-04-13 23:26:05.768454 """
Great scientific discoveries are often named by the last names of scientists that made them. For example, the most popular asymmetric cryptography system, RSA was discovered by Rivest, Shamir and Adleman. Another notable example is the Knuth-Morris-Pratt algorithm, named by Knuth, Morris and Pratt.

Scientific papers reference earlier works a lot and it’s not uncommon for one document to use two different naming conventions: the short variation (e.g. KMP) using only the first letters of authors last names and the long variation (e.g. Knuth-Morris-Pratt) using complete last names separated by hyphens.

We find mixing two conventions in one paper to be aesthetically unpleasing and would like you to write a program that will transform long variations into short.

-----Input-----
The first and only line of input will contain at most $100$ characters, uppercase and lowercase letters of the English alphabet and hyphen (‘-’ ASCII $45$). The first character will always be an uppercase letter. Hyphens will always be followed by an uppercase letter. All other characters will be lowercase letters.

-----Output-----
The first and only line of output should contain the appropriate short variation.

-----Examples-----
Sample Input 1:
Knuth-Morris-Pratt
Sample Output 1:
KMP

Sample Input 2:
Mirko-Slavko
Sample Output 2:
MS
"""
2022-04-13 23:26:05.768465 --------------------------
2022-04-13 23:26:26.658586 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# I'm not sure if the input is supposed to be a list of strings. The example\n# input is just a single string, so I'm going to assume that is the case.\n\n# First, I'm going to split the input string into a list of strings using the\n# .split() method.\n\n# Next, I'm going to iterate through the list and add the first letter of each\n# string to a new list.\n\n# Finally, I'm going to join the list of first letters into a single string.\n\n# This is probably the easiest solution, but I'm not sure if it's the best.\n\n# I'm going to test this solution on the example input.\n\n# The input string is: \"Knuth-Morris-Pratt\"\n\n# Splitting the string into a list of strings:\n\n# ['Knuth', 'Morris', 'Pratt']\n\n# Iterating through the list:\n\n# ['K', 'M', 'P']\n\n# Joining the list into a single string:\n\n# \"KMP\"\n\n# As you can see, the solution works.\n\nstring = input()\nstring = string.split('-')\nstring = [x[0] for x in string]\nstring = ''.join(string)\nprint(string)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    name = sys.stdin.readline().strip()\n    print(name[0] + \"\".join(c[0] for c in name.split(\"-\")))\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nprint(input().split('-')[0][0] + input().split('-')[1][0] + input().split('-')[2][0])"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n#Solved by Shashwat Raj\n\nlong = input()\nshort = \"\"\nfor i in long:\n    if i.isupper():\n        short += i\nprint(short)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n#SOLUTION 1\na = input()\nb = ''\nfor i in range(len(a)):\n    if a[i].isupper():\n        b += a[i]\nprint(b)\n\n#SOLUTION 2\nprint(''.join(x for x in input() if x.isupper()))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    names = input()\n    first_letter = names[0]\n    last_letter = names[-1]\n    short_name = first_letter\n    for char in names:\n        if char == '-':\n            short_name += names[names.index(char)+1]\n    print(short_name)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    name = input().split(\"-\")\n    ans = \"\"\n\n    for s in name:\n        ans += s[0]\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649892365,
  "id": "cmpl-4wgf7txjeP60zdF0Sn0BYgeVQGq9C",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 23:26:26.658893 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# I'm not sure if the input is supposed to be a list of strings. The example\n# input is just a single string, so I'm going to assume that is the case.\n\n# First, I'm going to split the input string into a list of strings using the\n# .split() method.\n\n# Next, I'm going to iterate through the list and add the first letter of each\n# string to a new list.\n\n# Finally, I'm going to join the list of first letters into a single string.\n\n# This is probably the easiest solution, but I'm not sure if it's the best.\n\n# I'm going to test this solution on the example input.\n\n# The input string is: \"Knuth-Morris-Pratt\"\n\n# Splitting the string into a list of strings:\n\n# ['Knuth', 'Morris', 'Pratt']\n\n# Iterating through the list:\n\n# ['K', 'M', 'P']\n\n# Joining the list into a single string:\n\n# \"KMP\"\n\n# As you can see, the solution works.\n\nstring = input()\nstring = string.split('-')\nstring = [x[0] for x in string]\nstring = ''.join(string)\nprint(string)"
}
2022-04-13 23:26:26.658952 REASON stop
2022-04-13 23:26:26.659297 test/intro-questions.txt_dir/4798/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4798/solutions.json'
2022-04-13 23:26:26.659312 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    name = sys.stdin.readline().strip()\n    print(name[0] + \"\".join(c[0] for c in name.split(\"-\")))\n\nmain()"
}
2022-04-13 23:26:26.659415 REASON stop
2022-04-13 23:26:26.659645 test/intro-questions.txt_dir/4798/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4798/solutions.json'
2022-04-13 23:26:26.659656 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nprint(input().split('-')[0][0] + input().split('-')[1][0] + input().split('-')[2][0])"
}
2022-04-13 23:26:26.659690 REASON stop
2022-04-13 23:26:26.676547 test/intro-questions.txt_dir/4798/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4798/solutions.json'
2022-04-13 23:26:26.676588 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n#Solved by Shashwat Raj\n\nlong = input()\nshort = \"\"\nfor i in long:\n    if i.isupper():\n        short += i\nprint(short)"
}
2022-04-13 23:26:26.676650 REASON stop
2022-04-13 23:26:26.691230 test/intro-questions.txt_dir/4798/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4798/solutions.json'
2022-04-13 23:26:26.691275 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n#SOLUTION 1\na = input()\nb = ''\nfor i in range(len(a)):\n    if a[i].isupper():\n        b += a[i]\nprint(b)\n\n#SOLUTION 2\nprint(''.join(x for x in input() if x.isupper()))"
}
2022-04-13 23:26:26.691350 REASON stop
2022-04-13 23:26:26.698732 test/intro-questions.txt_dir/4798/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4798/solutions.json'
2022-04-13 23:26:26.698757 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    names = input()\n    first_letter = names[0]\n    last_letter = names[-1]\n    short_name = first_letter\n    for char in names:\n        if char == '-':\n            short_name += names[names.index(char)+1]\n    print(short_name)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 23:26:26.698813 REASON stop
2022-04-13 23:26:26.699458 test/intro-questions.txt_dir/4798/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4798/solutions.json'
2022-04-13 23:26:26.699473 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    name = input().split(\"-\")\n    ans = \"\"\n\n    for s in name:\n        ans += s[0]\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:26:26.699563 REASON stop
2022-04-13 23:26:26.700180 test/intro-questions.txt_dir/4798/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4798/solutions.json'
