["\n\ns = input()\nt = input()\n\nif s == t[:-1]:\n    print('Yes')\nelse:\n    print('No')", "\n\nS = input()\nT = input()\n\nif T[:-1] == S:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "\n\ns = input()\nt = input()\n\nif s == t[:-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "\n\n\ndef main():\n    s = input()\n    t = input()\n    if s == t[:-1]:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef is_subsequence(sub, full):\n    \"\"\"\n    :param sub: subsequence\n    :param full: full string\n    :return: True if sub is a subsequence of full\n    \"\"\"\n    full_index = 0\n    for sub_index in range(len(sub)):\n        while sub[sub_index] != full[full_index]:\n            full_index += 1\n        full_index += 1\n    return True\n\ndef is_subsequence_recursive(sub, full):\n    if len(sub) == 0:\n        return True\n    elif len(full) == 0:\n        return False\n    elif sub[0] == full[0]:\n        return is_subsequence_recursive(sub[1:], full[1:])\n    else:\n        return is_subsequence_recursive(sub, full[1:])\n\ndef main():\n    sub = input()\n    full = input()\n    if is_subsequence_recursive(sub, full):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nmain()", "\n\ns = input()\nt = input()\n\nif len(s) + 1 == len(t):\n    if t[:len(s)] == s:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "\n\ns = input()\nt = input()\n\nprint('Yes' if s == t[:-1] else 'No')"]