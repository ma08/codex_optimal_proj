["", "\n\ndef find_free_points(segments, m):\n    \"\"\"\n    >>> find_free_points([(2, 2), (1, 2), (5, 5)], 5)\n    [3, 4]\n    >>> find_free_points([(1, 7)], 7)\n    []\n    \"\"\"\n    free_points = []\n    if len(segments) == 1:\n        return free_points\n    for i in range(1, m + 1):\n        is_free = True\n        for segment in segments:\n            if i >= segment[0] and i <= segment[1]:\n                is_free = False\n                break\n        if is_free:\n            free_points.append(i)\n    return free_points\n\n\nif __name__ == \"__main__\":\n    n, m = [int(x) for x in input().split()]\n    segments = []\n    for i in range(n):\n        l, r = [int(x) for x in input().split()]\n        segments.append((l, r))\n    free_points = find_free_points(segments, m)\n    print(len(free_points))\n    print(\" \".join([str(x) for x in free_points]))", "\n\ndef main():\n    n, m = map(int, input().split())\n    points = set(range(1, m+1))\n    for i in range(n):\n        l, r = map(int, input().split())\n        points = points.difference(range(l, r+1))\n    print(len(points))\n    print(*points)\n\n\nif __name__ == '__main__':\n    main()", "\n\ndef get_points(n, m):\n    points = set(range(1, m+1))\n    for i in range(n):\n        l, r = map(int, input().split())\n        points -= set(range(l, r+1))\n    return points\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    points = get_points(n, m)\n    print(len(points))\n    print(*points)", "\n\nimport sys\nimport collections\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    points = set(range(1, m+1))\n    for _ in range(n):\n        l, r = map(int, sys.stdin.readline().split())\n        points = points - set(range(l, r+1))\n    print(len(points))\n    print(*sorted(points))\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef find_points_not_in_segments(segments, m):\n    points = set(range(1, m+1))\n    for (l, r) in segments:\n        for p in range(l, r+1):\n            if p in points:\n                points.remove(p)\n    return len(points), sorted(points)\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        segments.append(tuple(map(int, input().split())))\n    k, points = find_points_not_in_segments(segments, m)\n    print(k)\n    print(*points)"]