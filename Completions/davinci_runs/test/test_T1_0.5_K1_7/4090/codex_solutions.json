["\n\ndef main():\n    n = int(input())\n    words = input().split()\n    \n    if n == 1:\n        print(len(words[0]))\n    else:\n        min_len = len(words[0])\n        for i in range(n):\n            for j in range(i+1, n):\n                if words[i] == words[j]:\n                    min_len += 1\n                    break\n        \n        print(min_len)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    num_words = int(input())\n    words = input().split()\n    if num_words == 1:\n        print(len(words[0]))\n        return\n    word_length = len(words[0])\n    for i in range(1, num_words):\n        if words[i] == words[i-1]:\n            word_length += len(words[i]) - 1\n        else:\n            word_length += len(words[i])\n    print(word_length)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\nwords = input().split()\n\n# use a dictionary to keep track of how many times each word occurs\nword_counts = dict()\nfor w in words:\n    if w in word_counts:\n        word_counts[w] += 1\n    else:\n        word_counts[w] = 1\n\n# get the length of the text without abbreviations\ntext_length = sum([len(w) for w in words])\n\n# the minimum length of the text after one abbreviation is the length of the\n# text without abbreviations minus the length of the longest word that occurs\n# more than once, plus the length of the abbreviation (the first letter of the\n# word)\nmin_text_length = text_length - max([len(w) for w in word_counts if word_counts[w] > 1]) + 1\n\nprint(min_text_length)", "\n\nn = int(input())\nwords = input().split()\n\ndef min_len(w):\n    max_len = 0\n    max_count = 0\n    cur_len = 0\n    cur_count = 0\n    for i in range(n):\n        if i == 0 or w[i-1] != w[i]:\n            if cur_count > max_count:\n                max_count = cur_count\n                max_len = cur_len\n            cur_count = 1\n            cur_len = len(w[i])\n        else:\n            cur_count += 1\n            cur_len += len(w[i])\n    if cur_count > max_count:\n        max_count = cur_count\n        max_len = cur_len\n    return max_count * len(w[0]) + (n - max_count * max_count)\n\nprint(min(min_len(words), min_len([word.capitalize() for word in words])))", "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    result = len(words)\n    for i in range(n):\n        for j in range(i+1, n):\n            if words[i] == words[j]:\n                result = min(result, len(words[:i]) + len(words[j+1:]) + len(words[i][0].upper()))\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    words = input().split()\n    print(solve(n, words))\n\ndef solve(n, words):\n    # Find the shortest word\n    shortest_word = min(len(word) for word in words)\n    # Find the longest word\n    longest_word = max(len(word) for word in words)\n    # Find the most common word\n    most_common_word = max(words, key=words.count)\n    # Find the length of the most common word\n    most_common_word_length = len(most_common_word)\n    # Find the number of times the most common word appears\n    most_common_word_count = words.count(most_common_word)\n    # Find the number of words\n    number_of_words = len(words)\n\n    # If the most common word appears more than once\n    if most_common_word_count > 1:\n        # If the most common word appears more than twice\n        if most_common_word_count > 2:\n            # If the most common word is the shortest word\n            if most_common_word_length == shortest_word:\n                # Return the length of the most common word plus the number of words minus one\n                return most_common_word_length + (number_of_words - 1)\n            # If the most common word is not the shortest word\n            else:\n                # Return the length of the most common word plus the number of words minus two\n                return most_common_word_length + (number_of_words - 2)\n        # If the most common word appears exactly twice\n        else:\n            # If the most common word is the shortest word\n            if most_common_word_length == shortest_word:\n                # Return the length of the most common word plus the number of words minus two\n                return most_common_word_length + (number_of_words - 2)\n            # If the most common word is not the shortest word\n            else:\n                # Return the length of the most common word plus the number of words minus three\n                return most_common_word_length + (number_of_words - 3)\n    # If the most common word appears exactly once\n    else:\n        # Return the length of the most common word plus the number of words minus two\n        return most_common_word_length + (number_of_words - 2)\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef main():\n    n = int(input())\n    s = input()\n    words = s.split()\n    m = {}\n    for i in range(n):\n        if words[i] in m:\n            m[words[i]] += 1\n        else:\n            m[words[i]] = 1\n\n    if len(m) == 1:\n        print(len(words[0]) + n - 1)\n    else:\n        print(len(s))\n\n\nif __name__ == '__main__':\n    main()"]