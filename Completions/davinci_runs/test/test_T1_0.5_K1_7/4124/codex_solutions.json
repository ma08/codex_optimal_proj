["\n\nstring1 = input()\nstring2 = input()\n\n# create a dictionary to store the number of times a character appears in each string\ndict1 = {}\ndict2 = {}\n\n# loop through characters in each string and add to dictionary\nfor i in range(len(string1)):\n    if string1[i] in dict1:\n        dict1[string1[i]] += 1\n    else:\n        dict1[string1[i]] = 1\n\nfor i in range(len(string2)):\n    if string2[i] in dict2:\n        dict2[string2[i]] += 1\n    else:\n        dict2[string2[i]] = 1\n\n# create a dictionary to store the number of times a character appears in both strings\ndict3 = {}\n\n# loop through keys in each dictionary and add to third dictionary\nfor key in dict1:\n    if key in dict2:\n        dict3[key] = min(dict1[key], dict2[key])\n\n# create a variable to store the number of times a character appears the same number of times in both strings\nsame = 0\n\n# loop through keys in dictionary and add to variable\nfor key in dict3:\n    same += dict3[key]\n\n# create a variable to store the number of times a character appears more in one string than the other\ndiff = abs(len(string1) - len(string2)) - same\n\n# print the number of moves to make both strings equal\nprint(same + diff)", "\n\ns = input()\nt = input()\n\nif s == t:\n    print(0)\nelif s == t[::-1]:\n    print(len(s))\nelse:\n    print(len(s) + len(t))", "\n\ndef main():\n    s = input()\n    t = input()\n    if len(s) < len(t):\n        s, t = t, s\n    while len(t) > 0:\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        else:\n            s = s[1:]\n    print(len(s))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    s = input()\n    t = input()\n    print(len(s) + len(t) - 2*LCS(s,t))\n\ndef LCS(s, t):\n    if len(s) == 0 or len(t) == 0:\n        return 0\n    if s[0] == t[0]:\n        return 1 + LCS(s[1:], t[1:])\n    else:\n        return max(LCS(s[1:], t), LCS(s, t[1:]))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ns = input()\nt = input()\n\nn = len(s)\nm = len(t)\n\ndp = [[0 for j in range(m+1)] for i in range(n+1)]\n\nfor i in range(n+1):\n    for j in range(m+1):\n        if i == 0:\n            dp[i][j] = j\n        elif j == 0:\n            dp[i][j] = i\n        elif s[i-1] == t[j-1]:\n            dp[i][j] = dp[i-1][j-1]\n        else:\n            dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\nprint(dp[n][m])", "\n\ns = input()\nt = input()\n\nprint(len(s) + len(t) - 2 * len(set(s) & set(t)))", "\n\n# SOLUTION\ndef main():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = dp[i-1][0] + 1\n    for j in range(1, m+1):\n        dp[0][j] = dp[0][j-1] + 1\n        \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n                \n    print(dp[n][m])\n    \nmain()"]