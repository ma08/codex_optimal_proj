["\n\nh, w, k = map(int, input().split())\n\nans = 0\n\nfor i in range(2 ** h):\n    for j in range(2 ** w):\n        cnt = 0\n        for x in range(h):\n            for y in range(w):\n                if (i >> x) & 1 == 1 and (j >> y) & 1 == 1:\n                    cnt += 1\n        if cnt == k:\n            ans += 1\n\nprint(ans)", "\n\nimport itertools\n\ndef main():\n    h, w, k = map(int, input().split())\n    grid = []\n    for i in range(h):\n        grid.append(list(input()))\n    cnt = 0\n    for i in range(1, h+1):\n        for j in range(1, w+1):\n            for c1 in itertools.combinations(range(h), i):\n                for c2 in itertools.combinations(range(w), j):\n                    tmp = 0\n                    for r in range(h):\n                        for t in range(w):\n                            if r in c1 or t in c2:\n                                if grid[r][t] == '#':\n                                    tmp += 1\n                    if tmp == k:\n                        cnt += 1\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# H, W, K = map(int, input().split())\n# C = [input() for _ in range(H)]\nH, W, K = 2, 3, 2\nC = ['..#', '###']\n\n# \u5168\u3066\u306e\u884c\u3068\u5217\u3092\u9078\u629e\u3057\u305f\u6642\u306e\uff0c\u9ed2\u3044\u30de\u30b9\u306e\u6570\u3092B\uff0c\u8d64\u3044\u30de\u30b9\u306e\u6570\u3092R\u3068\u3059\u308b\u3068\n# B + R = HW\n# B - R = K\n# \u3068\u306a\u308b\n# \u5168\u3066\u306e\u884c\u3092\u9078\u629e\u3057\u305f\u6642\u306e\uff0c\u8d64\u3044\u30de\u30b9\u306e\u6570\u306f\uff0c\n# \u30fb\u884c\u304c\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000H - 1\u500b\n# \u30fb\u884c\u304c\u9078\u629e\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\n# \u3000\u3000H\u500b\n# \u3068\u306a\u308b\n# \u540c\u69d8\u306b\uff0c\u5168\u3066\u306e\u5217\u3092\u9078\u629e\u3057\u305f\u6642\u306e\uff0c\u8d64\u3044\u30de\u30b9\u306e\u6570\u306f\uff0c\n# \u30fb\u5217\u304c\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000W - 1\u500b\n# \u30fb\u5217\u304c\u9078\u629e\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\n# \u3000\u3000W\u500b\n# \u3068\u306a\u308b\n# \u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\uff0c\n# \u8d64\u3044\u30de\u30b9\u306e\u6570\u306f\uff0c\n# \u30fb\u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000(H - 1) + (W - 1) = H + W - 2\n# \u30fb\u884c\u306e\u307f\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000H + (W - 1) = H + W - 1\n# \u30fb\u5217\u306e\u307f\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000(H - 1) + W = H + W - 1\n# \u30fb\u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\n# \u3000\u3000H + W\n# \u3068\u306a\u308b\n# \u3057\u305f\u304c\u3063\u3066\uff0c\n# \u8d64\u3044\u30de\u30b9\u306e\u6570 - \u9ed2\u3044\u30de\u30b9\u306e\u6570 = H + W - 2\n# \u3068\u306a\u308b\n# \u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3068\uff0c\n# \u30fb\u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000(H + W - 2) - (K + 2) = H + W - K - 4\n# \u30fb\u884c\u306e\u307f\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000(H + W - 2) - (K + 1) = H + W - K - 3\n# \u30fb\u5217\u306e\u307f\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000(H + W - 2) - (K + 1) = H + W - K - 3\n# \u30fb\u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\n# \u3000\u3000(H + W - 2) - K = H + W - K - 2\n# \u3068\u306a\u308b\n# \u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\uff0c\n# \u30fb\u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000(H + W - 2) - (K + 2) = H + W - K - 4\n# \u30fb\u884c\u306e\u307f\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000(H + W - 2) - (K + 1) = H + W - K - 3\n# \u30fb\u5217\u306e\u307f\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n# \u3000\u3000(H + W - 2) - (K + 1) = H + W - K - 3\n# \u30fb\u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\n# \u3000\u3000(H + W - 2) - K = H + W - K - 2\n# \u3068\u306a\u308b\n\n# \u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\nans = (H + W - 2) - (K + 2)\n# \u884c\u306e\u307f\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\nans += (H + W - 2) - (K + 1)\n# \u5217\u306e\u307f\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\nans += (H + W - 2) - (K + 1)\n# \u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\nans += (H + W - 2) - K\n\n# \u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3068\u304d\nans -= (H + W - 2) - (K + 2)\n# \u884c\u3082\u5217\u3082\u9078\u629e\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\nans -= (H + W - 2) - K\n\nprint(ans)", "\n\nimport sys\n\ndef solve(H, W, K, grid):\n    ans = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                ans += 1\n    return ans\n\ndef main():\n    H, W, K = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline() for _ in range(H)]\n    print(solve(H, W, K, grid))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nH, W, K = map(int, sys.stdin.readline().split())\nc = [list(sys.stdin.readline().rstrip()) for _ in range(H)]\n\npattern = 0\n\nfor i in range(1 << H):\n    for j in range(1 << W):\n        count = 0\n        for k in range(H):\n            for l in range(W):\n                if (i >> k) & 1 == 1 or (j >> l) & 1 == 1:\n                    if c[k][l] == '#':\n                        count += 1\n        if count == K:\n            pattern += 1\n\nprint(pattern)", "\n\n# Input\nH, W, K = map(int, input().split())\nS = []\nfor _ in range(H):\n    S.append(list(input()))\n\n# Solve\nans = 0\nfor i in range(2**H):\n    for j in range(2**W):\n        cnt = 0\n        for h in range(H):\n            for w in range(W):\n                if (i >> h) & 1 == 0 and (j >> w) & 1 == 0 and S[h][w] == \"#\":\n                    cnt += 1\n        if cnt == K:\n            ans += 1\n\n# Output\nprint(ans)", "\n\nimport copy\n\n# input\nH, W, K = map(int, input().split())\nc = []\nfor i in range(H):\n    c.append(list(input()))\n\n# make all combinations of rows and columns\nrow_comb = []\nfor i in range(H+1):\n    row_comb.append(list(combinations(range(H), i)))\ncol_comb = []\nfor i in range(W+1):\n    col_comb.append(list(combinations(range(W), i)))\n\n# count black squares\nans = 0\nfor i in range(len(row_comb)):\n    for j in range(len(col_comb)):\n        # if the number of black squares is K\n        if i*W + j*H - i*j == K:\n            ans += len(row_comb[i])*len(col_comb[j])\n\n# output\nprint(ans)"]