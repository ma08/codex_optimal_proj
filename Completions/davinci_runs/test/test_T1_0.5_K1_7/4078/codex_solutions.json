["", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nsegments = []\nfor i in range(m):\n    start, end = map(int, input().split())\n    segments.append((start, end))\n\n# print(n, m)\n# print(a)\n# print(segments)\n\ndef get_max_diff(a):\n    return max(a) - min(a)\n\ndef get_max_diff_with_segments(a, segments):\n    if len(segments) == 0:\n        return get_max_diff(a)\n    else:\n        max_diff = -1\n        for i, segment in enumerate(segments):\n            start, end = segment\n            a_copy = a[:]\n            for i in range(start-1, end):\n                a_copy[i] -= 1\n            max_diff_copy = get_max_diff_with_segments(a_copy, segments[:i] + segments[i+1:])\n            if max_diff_copy > max_diff:\n                max_diff = max_diff_copy\n        return max_diff\n\nprint(get_max_diff_with_segments(a, segments))", "\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\n#print(n, m, a)\n\ndef max_diff(a):\n    mx = a[0]\n    mn = a[0]\n    for x in a:\n        mx = max(mx, x)\n        mn = min(mn, x)\n    return mx - mn\n\nsegs = []\nfor i in range(m):\n    l, r = [int(x) for x in input().split()]\n    segs.append([l, r])\n\n#print(segs)\n\ndef apply_seg(a, seg):\n    l, r = seg\n    for i in range(l-1, r):\n        a[i] -= 1\n\ndef apply_segs(a, segs):\n    for seg in segs:\n        apply_seg(a, seg)\n\ndef apply_ind(a, ind):\n    if ind == 0:\n        return\n    l, r = segs[ind-1]\n    for i in range(l-1, r):\n        a[i] -= 1\n\ndef apply_inds(a, inds):\n    for ind in inds:\n        apply_ind(a, ind)\n\ndef get_seg_inds(a, segs):\n    inds = []\n    for seg in segs:\n        inds.append(segs.index(seg)+1)\n    return inds\n\nfrom itertools import combinations\n\ndef get_best_diff(a, segs):\n    best_diff = 0\n    best_inds = []\n    for i in range(1, len(segs)+1):\n        for comb in combinations(segs, i):\n            #print(comb)\n            a_copy = a.copy()\n            apply_segs(a_copy, comb)\n            diff = max_diff(a_copy)\n            if diff > best_diff:\n                best_diff = diff\n                best_inds = get_seg_inds(a_copy, comb)\n    return best_diff, best_inds\n\nbest_diff, best_inds = get_best_diff(a, segs)\n\nprint(best_diff)\nprint(len(best_inds))\nprint(' '.join([str(x) for x in best_inds]))", "\n\nimport sys\nimport math\n\ndef get_max_diff(a, diff_max, min_val, max_val, i, j):\n    if i == j:\n        return diff_max\n    if a[i] < min_val:\n        min_val = a[i]\n    if a[i] > max_val:\n        max_val = a[i]\n    return get_max_diff(a, max(diff_max, max_val - min_val), min_val, max_val, i + 1, j)\n\ndef solve(a, l, r):\n    diff_max = 0\n    for i in range(len(l)):\n        diff = get_max_diff(a, 0, a[l[i] - 1], a[l[i] - 1], l[i] - 1, r[i] - 1)\n        if diff > diff_max:\n            diff_max = diff\n    return diff_max\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    l = []\n    r = []\n    for i in range(m):\n        x, y = [int(x) for x in sys.stdin.readline().split()]\n        l.append(x)\n        r.append(y)\n    print(solve(a, l, r))\n\nif __name__ == '__main__':\n    main()", "\n\nfrom sys import stdin\n\ndef read_integers():\n    return [int(x) for x in stdin.readline().split()]\n\ndef read_segments():\n    m = read_integers()[0]\n    segments = []\n    for i in range(m):\n        segments.append(read_integers())\n    return segments\n\ndef solve(n, a, m, segments):\n    a = sorted(a)\n    segments = sorted(segments, key = lambda x: x[0])\n    max_diff = 0\n    for i in range(m):\n        max_diff += a[-1] - a[0]\n        a[-1] -= segments[i][1] - segments[i][0] + 1\n        a[0] += segments[i][1] - segments[i][0] + 1\n        a = sorted(a)\n    max_diff += a[-1] - a[0]\n    return max_diff\n\ndef main():\n    n, m = read_integers()\n    a = read_integers()\n    segments = read_segments()\n    print(solve(n, a, m, segments))\n\nif __name__ == '__main__':\n    main()"]