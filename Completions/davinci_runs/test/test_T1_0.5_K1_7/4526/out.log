2022-04-13 21:34:58.903255 """
Pay attention to the non-standard memory limit in this problem.

In order to cut off efficient solutions from inefficient ones in this problem, the time limit is rather strict. Prefer to use compiled statically typed languages (e.g. C++). If you use Python, then submit solutions on PyPy. Try to write an efficient solution.

The array $a=[a_1, a_2, \ldots, a_n]$ ($1 \le a_i \le n$) is given. Its element $a_i$ is called special if there exists a pair of indices $l$ and $r$ ($1 \le l < r \le n$) such that $a_i = a_l + a_{l+1} + \ldots + a_r$. In other words, an element is called special if it can be represented as the sum of two or more consecutive elements of an array (no matter if they are special or not).

Print the number of special elements of the given array $a$.

For example, if $n=9$ and $a=[3,1,4,1,5,9,2,6,5]$, then the answer is $5$:  $a_3=4$ is a special element, since $a_3=4=a_1+a_2=3+1$;  $a_5=5$ is a special element, since $a_5=5=a_2+a_3=1+4$;  $a_6=9$ is a special element, since $a_6=9=a_1+a_2+a_3+a_4=3+1+4+1$;  $a_8=6$ is a special element, since $a_8=6=a_2+a_3+a_4=1+4+1$;  $a_9=5$ is a special element, since $a_9=5=a_2+a_3=1+4$. 

Please note that some of the elements of the array $a$ may be equal — if several elements are equal and special, then all of them should be counted in the answer.


-----Input-----

The first line contains an integer $t$ ($1 \le t \le 1000$) — the number of test cases in the input. Then $t$ test cases follow.

Each test case is given in two lines. The first line contains an integer $n$ ($1 \le n \le 8000$) — the length of the array $a$. The second line contains integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le n$).

It is guaranteed that the sum of the values of $n$ for all test cases in the input does not exceed $8000$.


-----Output-----

Print $t$ numbers — the number of special elements for each of the given arrays.


-----Example-----
Input
5
9
3 1 4 1 5 9 2 6 5
3
1 1 2
5
1 1 1 1 1
8
8 7 6 5 4 3 2 1
1
1

Output
5
1
0
4
0
"""
2022-04-13 21:34:58.903272 --------------------------
2022-04-13 21:35:27.085282 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nsys.stdin = open('input.in', 'r')\nsys.stdout = open('output.out', 'w')\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = [0] * (n + 1)\n    for i in range(n):\n        s[i + 1] = s[i] + a[i]\n    d = dict()\n    for i in range(n + 1):\n        if s[i] not in d:\n            d[s[i]] = 1\n        else:\n            d[s[i]] += 1\n    ans = 0\n    for i in d:\n        ans += d[i] * (d[i] - 1) // 2\n    print(ans)\n\nt = int(input())\nfor i in range(t):\n    solve()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = [int(x) for x in sys.stdin.readline().split()]\n        a.append(0)\n        count = 0\n        for j in range(n):\n            if a[j] == a[j+1]:\n                count += 1\n        print(count)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        count = 0\n\n        for i in range(n):\n            curr_sum = 0\n            for j in range(i, n):\n                curr_sum += a[j]\n                if curr_sum == a[i]:\n                    count += 1\n                    break\n\n        print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# We use a prefix sum array to compute the sum of elements in constant time.\n# We also use a hash map to keep track of the indices of the elements.\n# We iterate through the array and for each element i, we check if i is a special element.\n# If i is a special element, we check if i - 1 is a special element.\n# If i - 1 is a special element, we increment the count of special elements by the number of indices of i - 1 in the hash map.\n# If i - 1 is not a special element, we check if i - 2 is a special element.\n# If i - 2 is a special element, we increment the count of special elements by the number of indices of i - 2 in the hash map.\n# If i - 2 is not a special element, we continue to check if i - 3 is a special element and so on.\n# We stop when we reach a negative number, since the sum of all elements starting from the first element will be positive.\n\ndef calculate_special_element_count(n, a):\n    prefix_sum_array = [a[0]]\n    element_index_map = {a[0]: [0]}\n    special_element_count = 0\n\n    for i in range(1, n):\n        prefix_sum_array.append(prefix_sum_array[i - 1] + a[i])\n        if a[i] not in element_index_map:\n            element_index_map[a[i]] = [i]\n        else:\n            element_index_map[a[i]].append(i)\n\n    for i in range(n):\n        j = 0\n        while True:\n            if i - j < 0:\n                break\n            if prefix_sum_array[i] - prefix_sum_array[i - j] in element_index_map:\n                special_element_count += len(element_index_map[prefix_sum_array[i] - prefix_sum_array[i - j]])\n                break\n            j += 1\n\n    return special_element_count\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        print(calculate_special_element_count(n, a))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# Solution\n\n#input\nt = int(input())\n\n#main\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    count = 0\n    sums = {}\n    for j in range(n):\n        if a[j] in sums:\n            count += sums[a[j]]\n        for k in range(j+1, n):\n            if a[j] + a[k] not in sums:\n                sums[a[j] + a[k]] = 1\n            else:\n                sums[a[j] + a[k]] += 1\n    print(count)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        a = [int(x) for x in sys.stdin.readline().strip().split(\" \")]\n        print(special_elements(a, n))\n\ndef special_elements(a, n):\n    # This is a solution to the problem, but it fails the time limit.\n    # It is left here for reference.\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) == a[j]:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": ""
    }
  ],
  "created": 1649885699,
  "id": "cmpl-4wevbntOxGFVWMmVwNUtKLnHyZMuM",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 21:35:27.085606 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nsys.stdin = open('input.in', 'r')\nsys.stdout = open('output.out', 'w')\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = [0] * (n + 1)\n    for i in range(n):\n        s[i + 1] = s[i] + a[i]\n    d = dict()\n    for i in range(n + 1):\n        if s[i] not in d:\n            d[s[i]] = 1\n        else:\n            d[s[i]] += 1\n    ans = 0\n    for i in d:\n        ans += d[i] * (d[i] - 1) // 2\n    print(ans)\n\nt = int(input())\nfor i in range(t):\n    solve()"
}
2022-04-13 21:35:27.085643 REASON stop
2022-04-13 21:35:27.086083 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = [int(x) for x in sys.stdin.readline().split()]\n        a.append(0)\n        count = 0\n        for j in range(n):\n            if a[j] == a[j+1]:\n                count += 1\n        print(count)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 21:35:27.086238 REASON stop
2022-04-13 21:35:27.086622 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        count = 0\n\n        for i in range(n):\n            curr_sum = 0\n            for j in range(i, n):\n                curr_sum += a[j]\n                if curr_sum == a[i]:\n                    count += 1\n                    break\n\n        print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 21:35:27.086670 REASON stop
2022-04-13 21:35:27.112987 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# We use a prefix sum array to compute the sum of elements in constant time.\n# We also use a hash map to keep track of the indices of the elements.\n# We iterate through the array and for each element i, we check if i is a special element.\n# If i is a special element, we check if i - 1 is a special element.\n# If i - 1 is a special element, we increment the count of special elements by the number of indices of i - 1 in the hash map.\n# If i - 1 is not a special element, we check if i - 2 is a special element.\n# If i - 2 is a special element, we increment the count of special elements by the number of indices of i - 2 in the hash map.\n# If i - 2 is not a special element, we continue to check if i - 3 is a special element and so on.\n# We stop when we reach a negative number, since the sum of all elements starting from the first element will be positive.\n\ndef calculate_special_element_count(n, a):\n    prefix_sum_array = [a[0]]\n    element_index_map = {a[0]: [0]}\n    special_element_count = 0\n\n    for i in range(1, n):\n        prefix_sum_array.append(prefix_sum_array[i - 1] + a[i])\n        if a[i] not in element_index_map:\n            element_index_map[a[i]] = [i]\n        else:\n            element_index_map[a[i]].append(i)\n\n    for i in range(n):\n        j = 0\n        while True:\n            if i - j < 0:\n                break\n            if prefix_sum_array[i] - prefix_sum_array[i - j] in element_index_map:\n                special_element_count += len(element_index_map[prefix_sum_array[i] - prefix_sum_array[i - j]])\n                break\n            j += 1\n\n    return special_element_count\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        print(calculate_special_element_count(n, a))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 21:35:27.113086 REASON stop
2022-04-13 21:35:27.126925 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# Solution\n\n#input\nt = int(input())\n\n#main\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    count = 0\n    sums = {}\n    for j in range(n):\n        if a[j] in sums:\n            count += sums[a[j]]\n        for k in range(j+1, n):\n            if a[j] + a[k] not in sums:\n                sums[a[j] + a[k]] = 1\n            else:\n                sums[a[j] + a[k]] += 1\n    print(count)"
}
2022-04-13 21:35:27.127022 REASON stop
2022-04-13 21:35:27.127616 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        a = [int(x) for x in sys.stdin.readline().strip().split(\" \")]\n        print(special_elements(a, n))\n\ndef special_elements(a, n):\n    # This is a solution to the problem, but it fails the time limit.\n    # It is left here for reference.\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) == a[j]:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 21:35:27.127674 REASON stop
2022-04-13 21:35:27.128191 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": ""
}
2022-04-13 21:35:27.128237 REASON stop
