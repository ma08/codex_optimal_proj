["\n\nN, M = list(map(int, input().split()))\n\ndance = []\nfor i in range(N):\n    dance.append(input())\n\n\"\"\"\n1. Find the first non-blank column\n2. Find the next blank column\n3. Find the next non-blank column\n4. Find the next blank column\n5. Repeat until the last column\n\"\"\"\n\ncolumn = 0\ndance_moves = 0\n\nwhile column < M:\n    # Find the first non-blank column\n    while column < M and dance[0][column] == '_':\n        column += 1\n    \n    # Find the next blank column\n    while column < M and dance[0][column] == '$':\n        column += 1\n    \n    # Find the next non-blank column\n    while column < M and dance[0][column] == '_':\n        column += 1\n    \n    # Find the next blank column\n    while column < M and dance[0][column] == '$':\n        column += 1\n    \n    dance_moves += 1\n\nprint(dance_moves)", "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    count = 0\n    for i in range(m):\n        if grid[0][i] == '_':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()", "\n\n# TODO: Use a faster method\ndef find_move(grid):\n    move = 0\n    for i in range(1, len(grid[0])):\n        if grid[0][i] == '_':\n            move += 1\n            for row in grid:\n                if row[i] != '_':\n                    move -= 1\n                    break\n    return move\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    print(find_move(grid))", "\n\ndef main():\n    n,m = [int(i) for i in input().split()]\n    grid = [input() for i in range(n)]\n    moves = 0\n    for j in range(m):\n        s = ''.join([grid[i][j] for i in range(n)])\n        if s.count('$') == 0:\n            moves += 1\n    print(moves)\n\nif __name__ == '__main__':\n    main()", "\n\nn, m = [int(x) for x in input().split()]\n\nboard = []\nfor _ in range(n):\n    board.append(input())\n\nframes = 0\nfor i in range(m):\n    if board[0][i] == '_':\n        frames += 1\n\nprint(frames)", "\n\nimport sys\n\ndef readline():\n    return sys.stdin.readline().strip()\n\ndef main():\n    N, M = map(int, readline().split())\n    moves = [readline() for _ in range(N)]\n\n    count = 0\n\n    for j in range(M):\n        all_blank = True\n        for i in range(N):\n            if moves[i][j] != '_':\n                all_blank = False\n                break\n        if all_blank:\n            count += 1\n\n    print count\n\nif __name__ == '__main__':\n    main()", "\n\nif __name__ == \"__main__\":\n    N, M = map(int, input().split())\n    arr = []\n    for i in range(N):\n        arr.append(input())\n    ans = 0\n    moves = 0\n    for i in range(M):\n        if arr[0][i] == '$':\n            moves += 1\n        if i > 0 and arr[0][i] == '_' and arr[0][i - 1] == '$':\n            ans += moves\n            moves = 0\n    print(ans)"]