["\n\n#SOLUTION\n\n#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        long long int n,i,j,k,l,m,p,q;\n        cin>>n;\n        if(n==1 || n==2)\n            cout<<\"0\"<<endl;\n        else if(n%2==0)\n        {\n            cout<<n/2-1<<endl;\n        }\n        else\n            cout<<n/2<<endl;\n    }\n    return 0;\n}", "\n\nimport sys\n\ndef solve(n):\n    return (n-1)//2\n\nif __name__ == \"__main__\":\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        print(solve(n))", "\n\ndef main():\n    n = int(input())\n    for i in range(1, n+1):\n        candies = int(input())\n        ways = 0\n        if candies % 2 == 0:\n            ways = (candies // 2) - 1\n        print(ways)\n\nmain()", "\n\nimport math\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Returns the sum of all divisors of n\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i != n:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, otherwise False\n    \"\"\"\n    if math.sqrt(n) % 1 == 0:\n        return True\n    return False\n\ndef is_square_sum(n):\n    \"\"\"\n    Returns True if n is a sum of two perfect squares, otherwise False\n    \"\"\"\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if is_perfect_square(n - i * i):\n            return True\n    return False\n\ndef is_prime(n):\n    \"\"\"\n    Returns True if n is prime, otherwise False\n    \"\"\"\n    if n <= 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef is_prime_power(n):\n    \"\"\"\n    Returns True if n is a prime power, otherwise False\n    \"\"\"\n    if n == 1:\n        return True\n    if n == 4:\n        return True\n    if is_prime(n):\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if is_prime(i) and is_prime_power(n // i):\n                return True\n    return False\n\ndef num_ways(n):\n    \"\"\"\n    Returns the number of ways to distribute exactly n candies between two sisters in a way described in the problem statement.\n    \"\"\"\n    if is_prime_power(n):\n        return 0\n    if is_square_sum(n):\n        return 0\n    return sum_of_divisors(n) // 2\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(num_ways(n))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n\tsys.stdin = open('input.txt', 'r')\n\tsys.stdout = open('output.txt', 'w')\n\tt = int(input())\n\tfor _ in range(t):\n\t\tn = int(input())\n\t\tif n == 1:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(n//2)\n\nif __name__ == '__main__':\n\tmain()", "\n\nimport sys\nimport math\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            print(int(n / 2))\n        else:\n            print(0)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        print(n // 2)\n\nif __name__ == \"__main__\":\n    main()"]