2022-04-13 18:34:26.221706 """
There are two sisters Alice and Betty. You have $n$ candies. You want to distribute these $n$ candies between two sisters in such a way that:  Alice will get $a$ ($a > 0$) candies;  Betty will get $b$ ($b > 0$) candies;  each sister will get some integer number of candies;  Alice will get a greater amount of candies than Betty (i.e. $a > b$);  all the candies will be given to one of two sisters (i.e. $a+b=n$). 

Your task is to calculate the number of ways to distribute exactly $n$ candies between sisters in a way described above. Candies are indistinguishable.

Formally, find the number of ways to represent $n$ as the sum of $n=a+b$, where $a$ and $b$ are positive integers and $a>b$.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 10^4$) — the number of test cases. Then $t$ test cases follow.

The only line of a test case contains one integer $n$ ($1 \le n \le 2 \cdot 10^9$) — the number of candies you have.


-----Output-----

For each test case, print the answer — the number of ways to distribute exactly $n$ candies between two sisters in a way described in the problem statement. If there is no way to satisfy all the conditions, print $0$.


-----Example-----
Input
6
7
1
2
3
2000000000
763243547

Output
3
0
0
1
999999999
381621773



-----Note-----

For the test case of the example, the $3$ possible ways to distribute candies are:  $a=6$, $b=1$;  $a=5$, $b=2$;  $a=4$, $b=3$.
"""
2022-04-13 18:34:26.221721 --------------------------
2022-04-13 18:35:00.755613 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        print(n // 2)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n\tsys.stdin = open('input.txt', 'r')\n\tsys.stdout = open('output.txt', 'w')\n\tt = int(input())\n\tfor _ in range(t):\n\t\tn = int(input())\n\t\tif n == 1:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(n//2)\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#SOLUTION\n\n#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        long long int n,i,j,k,l,m,p,q;\n        cin>>n;\n        if(n==1 || n==2)\n            cout<<\"0\"<<endl;\n        else if(n%2==0)\n        {\n            cout<<n/2-1<<endl;\n        }\n        else\n            cout<<n/2<<endl;\n    }\n    return 0;\n}"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Returns the sum of all divisors of n\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i != n:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, otherwise False\n    \"\"\"\n    if math.sqrt(n) % 1 == 0:\n        return True\n    return False\n\ndef is_square_sum(n):\n    \"\"\"\n    Returns True if n is a sum of two perfect squares, otherwise False\n    \"\"\"\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if is_perfect_square(n - i * i):\n            return True\n    return False\n\ndef is_prime(n):\n    \"\"\"\n    Returns True if n is prime, otherwise False\n    \"\"\"\n    if n <= 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef is_prime_power(n):\n    \"\"\"\n    Returns True if n is a prime power, otherwise False\n    \"\"\"\n    if n == 1:\n        return True\n    if n == 4:\n        return True\n    if is_prime(n):\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if is_prime(i) and is_prime_power(n // i):\n                return True\n    return False\n\ndef num_ways(n):\n    \"\"\"\n    Returns the number of ways to distribute exactly n candies between two sisters in a way described in the problem statement.\n    \"\"\"\n    if is_prime_power(n):\n        return 0\n    if is_square_sum(n):\n        return 0\n    return sum_of_divisors(n) // 2\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(num_ways(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    for i in range(1, n+1):\n        candies = int(input())\n        ways = 0\n        if candies % 2 == 0:\n            ways = (candies // 2) - 1\n        print(ways)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            print(int(n / 2))\n        else:\n            print(0)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(n):\n    return (n-1)//2\n\nif __name__ == \"__main__\":\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        print(solve(n))"
    }
  ],
  "created": 1649874866,
  "id": "cmpl-4wc6sWsl0d0o8dFWSydGowAd3WAXl",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:35:00.755885 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        print(n // 2)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:35:00.755917 REASON stop
2022-04-13 18:35:00.756387 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n\tsys.stdin = open('input.txt', 'r')\n\tsys.stdout = open('output.txt', 'w')\n\tt = int(input())\n\tfor _ in range(t):\n\t\tn = int(input())\n\t\tif n == 1:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(n//2)\n\nif __name__ == '__main__':\n\tmain()"
}
2022-04-13 18:35:00.756506 REASON stop
2022-04-13 18:35:00.756862 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#SOLUTION\n\n#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        long long int n,i,j,k,l,m,p,q;\n        cin>>n;\n        if(n==1 || n==2)\n            cout<<\"0\"<<endl;\n        else if(n%2==0)\n        {\n            cout<<n/2-1<<endl;\n        }\n        else\n            cout<<n/2<<endl;\n    }\n    return 0;\n}"
}
2022-04-13 18:35:00.756908 REASON stop
2022-04-13 18:35:00.776688 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Returns the sum of all divisors of n\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i != n:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, otherwise False\n    \"\"\"\n    if math.sqrt(n) % 1 == 0:\n        return True\n    return False\n\ndef is_square_sum(n):\n    \"\"\"\n    Returns True if n is a sum of two perfect squares, otherwise False\n    \"\"\"\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if is_perfect_square(n - i * i):\n            return True\n    return False\n\ndef is_prime(n):\n    \"\"\"\n    Returns True if n is prime, otherwise False\n    \"\"\"\n    if n <= 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef is_prime_power(n):\n    \"\"\"\n    Returns True if n is a prime power, otherwise False\n    \"\"\"\n    if n == 1:\n        return True\n    if n == 4:\n        return True\n    if is_prime(n):\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if is_prime(i) and is_prime_power(n // i):\n                return True\n    return False\n\ndef num_ways(n):\n    \"\"\"\n    Returns the number of ways to distribute exactly n candies between two sisters in a way described in the problem statement.\n    \"\"\"\n    if is_prime_power(n):\n        return 0\n    if is_square_sum(n):\n        return 0\n    return sum_of_divisors(n) // 2\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(num_ways(n))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:35:00.776831 REASON stop
2022-04-13 18:35:00.790990 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    for i in range(1, n+1):\n        candies = int(input())\n        ways = 0\n        if candies % 2 == 0:\n            ways = (candies // 2) - 1\n        print(ways)\n\nmain()"
}
2022-04-13 18:35:00.791103 REASON stop
2022-04-13 18:35:00.791903 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            print(int(n / 2))\n        else:\n            print(0)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:35:00.791993 REASON stop
2022-04-13 18:35:00.792854 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(n):\n    return (n-1)//2\n\nif __name__ == \"__main__\":\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        print(solve(n))"
}
2022-04-13 18:35:00.792922 REASON stop
