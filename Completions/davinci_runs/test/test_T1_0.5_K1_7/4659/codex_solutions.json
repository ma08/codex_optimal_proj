["\n\n\ndef generate(numRows):\n    \"\"\"\n    :type numRows: int\n    :rtype: List[List[int]]\n    \"\"\"\n\n    if numRows <= 0:\n        return []\n\n    res = [[1]]\n    for i in range(1, numRows):\n        res.append([1])\n        for j in range(1, i):\n            res[i].append(res[i-1][j-1] + res[i-1][j])\n        res[i].append(1)\n\n    return res\n\n\nexamples = [\n    {\n        \"input\": {\n            \"numRows\": 5\n        },\n        \"output\": [\n            [1],\n            [1, 1],\n            [1, 2, 1],\n            [1, 3, 3, 1],\n            [1, 4, 6, 4, 1]\n        ]\n    }, {\n        \"input\": {\n            \"numRows\": 0\n        },\n        \"output\": []\n    }\n]\n\n\nimport time\nif __name__ == '__main__':\n    solution = Solution()\n    for n in dir(solution):\n        if not n.startswith('__'):\n            func = getattr(solution, n)\n    print(func)\n    for example in examples:\n        print '----------'\n        start = time.time()\n        v = func(**example['input'])\n        end = time.time()\n        print v, v == example['output'], end - start", "\n\n\"\"\"\nRuntime: 32 ms, faster than 91.72% of Python3 online submissions for Pascal's Triangle.\nMemory Usage: 12.9 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n\"\"\"\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        result = [[1], [1, 1]]\n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, i):\n                row.append(result[i-1][j-1] + result[i-1][j])\n            row.append(1)\n            result.append(row)\n        return result\n\nprint(Solution().generate(5))", "\n\n# \u52a8\u6001\u89c4\u5212\n# Runtime: 32 ms, faster than 99.26% of Python3 online submissions for Pascal's Triangle.\n# Memory Usage: 13.9 MB, less than 5.21% of Python3 online submissions for Pascal's Triangle.\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, i):\n                row.append(res[i-1][j-1] + res[i-1][j])\n            row.append(1)\n            res.append(row)\n        return res", "\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        else:\n            res = [[1], [1,1]]\n            for i in range(2, numRows):\n                res.append([1] * (i+1))\n                for j in range(1, i):\n                    res[i][j] = res[i-1][j-1] + res[i-1][j]\n            return res", "\nclass Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        res = [[1],[1,1]]\n        for i in range(2, numRows):\n            tmp = [1] * (i+1)\n            for j in range(1, i):\n                tmp[j] = res[i-1][j-1] + res[i-1][j]\n            res.append(tmp)\n        return res", "\nfrom typing import List\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            line = [1]\n            for j in range(i-1):\n                line.append(res[i-1][j] + res[i-1][j+1])\n            line.append(1)\n            res.append(line)\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.generate(5))", "\n\nclass Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        if numRows >= 3:\n            result = [[1], [1,1]]\n            for i in range(2, numRows):\n                row = []\n                for j in range(i+1):\n                    if j == 0 or j == i:\n                        row.append(1)\n                    else:\n                        row.append(result[i-1][j-1] + result[i-1][j])\n                result.append(row)\n            return result"]