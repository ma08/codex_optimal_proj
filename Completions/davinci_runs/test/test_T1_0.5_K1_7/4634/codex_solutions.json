["\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        s = []\n        for i in range(n):\n            if a[i] == 1:\n                s.append(i)\n        if len(s) == 1:\n            print(0)\n        else:\n            print(s[-1] - s[0] - len(s) + 1)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(n, a))\n\ndef solve(n, a):\n    left = right = 0\n    while a[left] == 0:\n        left += 1\n    while a[right] == 0:\n        right += 1\n    res = 0\n    while right < n:\n        if a[right] == 0:\n            if a[right + 1] == 0:\n                res += 1\n            else:\n                right += 1\n            res += 1\n        else:\n            right += 1\n    while left > 0:\n        if a[left] == 0:\n            if a[left - 1] == 0:\n                res += 1\n            else:\n                left -= 1\n            res += 1\n        else:\n            left -= 1\n    return res\n\nif __name__ == \"__main__\":\n    main()", "\n\n# cook your dish here\nimport sys\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    c=0\n    for i in range(n):\n        if a[i]==0:\n            c+=1\n        else:\n            break\n    for i in range(n-1,-1,-1):\n        if a[i]==0:\n            c+=1\n        else:\n            break\n    print(c)", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int,input().split()))\n        if a.count(1) == 1:\n            print(0)\n            continue\n        a_str = \"\".join(map(str,a))\n        a_str = a_str.split(\"1\")\n        a_str = [x for x in a_str if x != \"\"]\n        if a_str == []:\n            print(0)\n            continue\n        else:\n            a_str = [len(x) for x in a_str]\n            print(max(a_str))\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\n# This problem can be solved using the sliding window technique.\n# We can find the minimum number of moves required to collect all the books on the shelf as a contiguous segment\n# by finding the minimum number of moves required to collect all the books on the shelf as a contiguous segment\n# starting from the leftmost book, and the minimum number of moves required to collect all the books on the shelf\n# as a contiguous segment starting from the rightmost book.\n# The minimum number of moves required to collect all the books on the shelf as a contiguous segment\n# is the minimum of these two quantities.\n\n# The minimum number of moves required to collect all the books on the shelf as a contiguous segment\n# starting from the leftmost book can be found by iterating through the array from left to right,\n# and maintaining a variable l that stores the index of the leftmost book in the current contiguous segment.\n# The minimum number of moves required to collect all the books on the shelf as a contiguous segment\n# starting from the rightmost book can be found by iterating through the array from right to left,\n# and maintaining a variable r that stores the index of the rightmost book in the current contiguous segment.\n\n# Time complexity: O(n)\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    l = 0\n    r = n - 1\n\n    while l < n and a[l] == 0:\n        l += 1\n\n    while r >= 0 and a[r] == 0:\n        r -= 1\n\n    l_ans = l\n    r_ans = n - r - 1\n\n    for i in range(l, n):\n        if a[i] == 1:\n            l_ans = max(l_ans, i - l)\n        else:\n            l = i + 1\n\n    for i in range(r, -1, -1):\n        if a[i] == 1:\n            r_ans = max(r_ans, r - i)\n        else:\n            r = i - 1\n\n    print(min(l_ans, r_ans))", "\n\nimport sys\n\ndef min_moves(arr):\n    i = 0\n    n = len(arr)\n    while i < n and arr[i] == 0:\n        i += 1\n    j = n - 1\n    while j >= 0 and arr[j] == 0:\n        j -= 1\n    return n - (j - i + 1)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        print(min_moves(arr))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef min_moves(a):\n    \"\"\"\n    Find the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment.\n    \"\"\"\n    \n    # Find the number of gaps between books.\n    gaps = 0\n    for i in range(len(a) - 1):\n        if a[i] == 1 and a[i + 1] == 0:\n            gaps += 1\n    \n    # If there is no gap between books, return 0.\n    if gaps == 0:\n        return 0\n    \n    # Calculate the minimum number of moves.\n    return gaps - 1\n\nif __name__ == \"__main__\":\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        print(min_moves(a))"]