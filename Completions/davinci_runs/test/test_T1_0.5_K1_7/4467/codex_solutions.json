["\n\nimport sys\n\ndef solve(N, red, blue):\n    red.sort()\n    blue.sort()\n    res = 0\n    for i in range(N):\n        for j in range(N):\n            if red[i][0] < blue[j][0] and red[i][1] < blue[j][1]:\n                res += 1\n                break\n    return res\n\ndef main():\n    N = int(input())\n    red = []\n    blue = []\n    for _ in range(N):\n        x, y = map(int, input().split())\n        red.append((x, y))\n    for _ in range(N):\n        x, y = map(int, input().split())\n        blue.append((x, y))\n    print(solve(N, red, blue))\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef main():\n    n = int(input())\n    red = [tuple(map(int, input().split())) for _ in range(n)]\n    blue = [tuple(map(int, input().split())) for _ in range(n)]\n    print(solve(red, blue))\n\n\ndef solve(red, blue):\n    red.sort()\n    blue.sort(key=lambda b: (b[1], b[0]))\n    r_index = 0\n    b_index = 0\n    count = 0\n    while r_index < len(red) and b_index < len(blue):\n        rx, ry = red[r_index]\n        bx, by = blue[b_index]\n        if rx < bx and ry < by:\n            count += 1\n            r_index += 1\n            b_index += 1\n        else:\n            if ry < by:\n                r_index += 1\n            else:\n                b_index += 1\n    return count\n\n\nif __name__ == '__main__':\n    main()", "\n\nN = int(input())\nreds = []\nblues = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    reds.append([x, y])\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blues.append([x, y])\n\nreds.sort()\nblues.sort()\n\npairs = 0\nfor red in reds:\n    for blue in blues:\n        if red[0] < blue[0] and red[1] < blue[1]:\n            pairs += 1\n            blues.remove(blue)\n            break\n\nprint(pairs)", "\n\n# === Problem 1 ===\n\n# Input\nn = int(input())\nred_x = []\nred_y = []\nblue_x = []\nblue_y = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    red_x.append(a)\n    red_y.append(b)\nfor i in range(n):\n    c, d = map(int, input().split())\n    blue_x.append(c)\n    blue_y.append(d)\n\n# Sort\nred_x.sort()\nred_y.sort()\nblue_x.sort()\nblue_y.sort()\n\n# Count\ncount = 0\nfor i in range(n):\n    j = 0\n    while j < n:\n        if red_x[i] < blue_x[j] and red_y[i] < blue_y[j]:\n            count += 1\n            blue_x.pop(j)\n            blue_y.pop(j)\n            break\n        j += 1\n\nprint(count)", "\n\nN = int(input())\nreds = []\nblues = []\nfor _ in range(N):\n    rx, ry = map(int, input().split())\n    reds.append((rx, ry))\nfor _ in range(N):\n    bx, by = map(int, input().split())\n    blues.append((bx, by))\n\nreds.sort()\nblues.sort()\n\nans = 0\nfor r in reds:\n    for i, b in enumerate(blues):\n        if r[0] < b[0] and r[1] < b[1]:\n            ans += 1\n            del blues[i]\n            break\n\nprint(ans)", "\n\nN = int(input())\nred = []\nblue = []\n\nfor i in range(N):\n    red.append(list(map(int, input().split())))\n\nfor i in range(N):\n    blue.append(list(map(int, input().split())))\n\nred.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[0])\n\nresult = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            blue.remove(b)\n            result += 1\n            break\n\nprint(result)", "\n\nN = int(input())\nred = [list(map(int, input().split())) for _ in range(N)]\nblue = [list(map(int, input().split())) for _ in range(N)]\n\nred.sort()\nblue.sort()\n\ncount = 0\nred_idx = 0\nfor b in blue:\n    while red_idx < N and red[red_idx][0] < b[0] and red[red_idx][1] < b[1]:\n        red_idx += 1\n    if red_idx == N:\n        break\n    count += 1\n    red_idx += 1\n\nprint(count)"]