2022-04-13 19:59:34.834963 """
There is a grid of squares with H horizontal rows and W vertical columns.
The square at the i-th row from the top and the j-th column from the left is represented as (i, j).
Each square is black or white.
The color of the square is given as an H-by-W matrix (a_{i, j}).
If a_{i, j} is ., the square (i, j) is white; if a_{i, j} is #, the square (i, j) is black.
Snuke is compressing this grid.
He will do so by repeatedly performing the following operation while there is a row or column that consists only of white squares:
 - Operation: choose any one row or column that consists only of white squares, remove it and delete the space between the rows or columns.
It can be shown that the final state of the grid is uniquely determined regardless of what row or column is chosen in each operation.
Find the final state of the grid.

-----Constraints-----
 - 1 \leq H, W \leq 100
 - a_{i, j} is . or #.
 - There is at least one black square in the whole grid.

-----Input-----
Input is given from Standard Input in the following format:
H W
a_{1, 1}...a_{1, W}
:
a_{H, 1}...a_{H, W}

-----Output-----
Print the final state of the grid in the same format as input (without the numbers of rows and columns); see the samples for clarity.

-----Sample Input-----
4 4
##.#
....
##.#
.#.#

-----Sample Output-----
###
###
.##

The second row and the third column in the original grid will be removed.
"""
2022-04-13 19:59:34.834971 --------------------------
2022-04-13 19:59:54.521669 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nH, W = [int(x) for x in input().split()]\n\nmatrix = []\nfor _ in range(H):\n    matrix.append(list(input()))\n\n# check if row is all white\nfor i in range(H):\n    row_is_all_white = True\n    for j in range(W):\n        if matrix[i][j] == '#':\n            row_is_all_white = False\n            break\n    if row_is_all_white:\n        matrix.pop(i)\n        H -= 1\n        i -= 1\n\n# check if column is all white\nfor j in range(W):\n    column_is_all_white = True\n    for i in range(H):\n        if matrix[i][j] == '#':\n            column_is_all_white = False\n            break\n    if column_is_all_white:\n        for i in range(H):\n            matrix[i].pop(j)\n        W -= 1\n        j -= 1\n\nfor i in range(H):\n    line = ''\n    for j in range(W):\n        line += matrix[i][j]\n    print(line)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    H, W = map(int, input().split())\n    grid = []\n    for i in range(H):\n        grid.append(list(input()))\n\n    while True:\n        r = -1\n        c = -1\n        for i in range(H):\n            if set(grid[i]) == {'.'}:\n                r = i\n                break\n        if r == -1:\n            for i in range(W):\n                if set([grid[j][i] for j in range(H)]) == {'.'}:\n                    c = i\n                    break\n        if r == -1 and c == -1:\n            break\n        else:\n            if r == -1:\n                for j in range(H):\n                    del grid[j][c]\n            else:\n                del grid[r]\n    for i in range(len(grid)):\n        print(''.join(grid[i]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#-----main-----\n\n# input\nH, W = map(int, input().split())\na = [list(input()) for i in range(H)]\n\n# check\ncheck = [[0] * W for i in range(H)]\nfor i in range(H):\n    if a[i].count(\".\") == W:\n        check[i] = [1] * W\nfor i in range(W):\n    tmp = [a[j][i] for j in range(H)]\n    if tmp.count(\".\") == H:\n        for j in range(H):\n            check[j][i] = 1\n\n# output\nfor i in range(H):\n    for j in range(W):\n        if check[i][j] == 0:\n            print(a[i][j], end=\"\")\n    if check[i].count(0) != 0:\n        print()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    h, w = map(int, input().split())\n    grid = [list(input()) for _ in range(h)]\n    grid_t = [[grid[i][j] for i in range(h)] for j in range(w)]\n    grid_t = [list(x) for x in zip(*grid_t)]\n    for i in range(h):\n        if '#' not in grid[i]:\n            grid[i] = ['.' for _ in range(w)]\n    for i in range(w):\n        if '#' not in grid_t[i]:\n            grid_t[i] = ['.' for _ in range(h)]\n    grid = [list(x) for x in zip(*grid_t)]\n    for g in grid:\n        print(''.join(g))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\n\n# Read the input\nH, W = [int(x) for x in stdin.readline().split()]\ngrid = []\nfor _ in range(H):\n    grid.append(stdin.readline().strip())\n\n# Remove all the white rows\nwhile True:\n    if all(row.count('#') == 0 for row in grid):\n        # All the rows are white. Remove the first one.\n        grid.pop(0)\n    elif all(row.count('#') > 0 for row in grid):\n        # All the rows are black. Break.\n        break\n    else:\n        # There is at least one white column. Remove it.\n        grid = [row[1:] for row in grid]\n\n# Remove all the white columns\nwhile True:\n    if all(grid[0][i] == '.' for i in range(len(grid[0]))):\n        # All the columns are white. Remove the first one.\n        grid = [row[1:] for row in grid]\n    elif all(grid[0][i] == '#' for i in range(len(grid[0]))):\n        # All the columns are black. Break.\n        break\n    else:\n        # There is at least one white row. Remove it.\n        grid.pop(0)\n\n# Print the result\nfor row in grid:\n    print(row)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nh, w = map(int, input().split())\nm = []\nfor i in range(h):\n    m.append(list(input()))\n\nfor i in range(h):\n    for j in range(w):\n        if m[i][j] == '#':\n            break\n    else:\n        m.pop(i)\n        h -= 1\n        i -= 1\n\nfor j in range(w):\n    for i in range(h):\n        if m[i][j] == '#':\n            break\n    else:\n        for i in range(h):\n            m[i].pop(j)\n        w -= 1\n        j -= 1\n\nfor i in range(h):\n    print(''.join(m[i]))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nH, W = map(int, input().split())\ngrid = []\nfor i in range(H):\n    grid.append(list(input()))\n\n# remove rows that only contain white squares\nfor i in range(H):\n    if not '#' in grid[i]:\n        grid.pop(i)\n        H -= 1\n        i -= 1\n\n# remove columns that only contain white squares\nfor j in range(W):\n    column = []\n    for i in range(H):\n        column.append(grid[i][j])\n    if not '#' in column:\n        for i in range(H):\n            grid[i].pop(j)\n        W -= 1\n        j -= 1\n\n# print final state of the grid\nfor i in range(H):\n    print(''.join(grid[i]))"
    }
  ],
  "created": 1649879974,
  "id": "cmpl-4wdRGzvBfF1IfD9PMzzpGBsuiG7Tw",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 19:59:54.521945 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nH, W = [int(x) for x in input().split()]\n\nmatrix = []\nfor _ in range(H):\n    matrix.append(list(input()))\n\n# check if row is all white\nfor i in range(H):\n    row_is_all_white = True\n    for j in range(W):\n        if matrix[i][j] == '#':\n            row_is_all_white = False\n            break\n    if row_is_all_white:\n        matrix.pop(i)\n        H -= 1\n        i -= 1\n\n# check if column is all white\nfor j in range(W):\n    column_is_all_white = True\n    for i in range(H):\n        if matrix[i][j] == '#':\n            column_is_all_white = False\n            break\n    if column_is_all_white:\n        for i in range(H):\n            matrix[i].pop(j)\n        W -= 1\n        j -= 1\n\nfor i in range(H):\n    line = ''\n    for j in range(W):\n        line += matrix[i][j]\n    print(line)"
}
2022-04-13 19:59:54.521984 REASON stop
2022-04-13 19:59:54.522608 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    H, W = map(int, input().split())\n    grid = []\n    for i in range(H):\n        grid.append(list(input()))\n\n    while True:\n        r = -1\n        c = -1\n        for i in range(H):\n            if set(grid[i]) == {'.'}:\n                r = i\n                break\n        if r == -1:\n            for i in range(W):\n                if set([grid[j][i] for j in range(H)]) == {'.'}:\n                    c = i\n                    break\n        if r == -1 and c == -1:\n            break\n        else:\n            if r == -1:\n                for j in range(H):\n                    del grid[j][c]\n            else:\n                del grid[r]\n    for i in range(len(grid)):\n        print(''.join(grid[i]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 19:59:54.522744 REASON stop
2022-04-13 19:59:54.523254 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#-----main-----\n\n# input\nH, W = map(int, input().split())\na = [list(input()) for i in range(H)]\n\n# check\ncheck = [[0] * W for i in range(H)]\nfor i in range(H):\n    if a[i].count(\".\") == W:\n        check[i] = [1] * W\nfor i in range(W):\n    tmp = [a[j][i] for j in range(H)]\n    if tmp.count(\".\") == H:\n        for j in range(H):\n            check[j][i] = 1\n\n# output\nfor i in range(H):\n    for j in range(W):\n        if check[i][j] == 0:\n            print(a[i][j], end=\"\")\n    if check[i].count(0) != 0:\n        print()"
}
2022-04-13 19:59:54.523317 REASON stop
2022-04-13 19:59:54.543369 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    h, w = map(int, input().split())\n    grid = [list(input()) for _ in range(h)]\n    grid_t = [[grid[i][j] for i in range(h)] for j in range(w)]\n    grid_t = [list(x) for x in zip(*grid_t)]\n    for i in range(h):\n        if '#' not in grid[i]:\n            grid[i] = ['.' for _ in range(w)]\n    for i in range(w):\n        if '#' not in grid_t[i]:\n            grid_t[i] = ['.' for _ in range(h)]\n    grid = [list(x) for x in zip(*grid_t)]\n    for g in grid:\n        print(''.join(g))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 19:59:54.543468 REASON stop
2022-04-13 19:59:54.553678 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\n\n# Read the input\nH, W = [int(x) for x in stdin.readline().split()]\ngrid = []\nfor _ in range(H):\n    grid.append(stdin.readline().strip())\n\n# Remove all the white rows\nwhile True:\n    if all(row.count('#') == 0 for row in grid):\n        # All the rows are white. Remove the first one.\n        grid.pop(0)\n    elif all(row.count('#') > 0 for row in grid):\n        # All the rows are black. Break.\n        break\n    else:\n        # There is at least one white column. Remove it.\n        grid = [row[1:] for row in grid]\n\n# Remove all the white columns\nwhile True:\n    if all(grid[0][i] == '.' for i in range(len(grid[0]))):\n        # All the columns are white. Remove the first one.\n        grid = [row[1:] for row in grid]\n    elif all(grid[0][i] == '#' for i in range(len(grid[0]))):\n        # All the columns are black. Break.\n        break\n    else:\n        # There is at least one white row. Remove it.\n        grid.pop(0)\n\n# Print the result\nfor row in grid:\n    print(row)"
}
2022-04-13 19:59:54.553783 REASON stop
2022-04-13 19:59:54.573040 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nh, w = map(int, input().split())\nm = []\nfor i in range(h):\n    m.append(list(input()))\n\nfor i in range(h):\n    for j in range(w):\n        if m[i][j] == '#':\n            break\n    else:\n        m.pop(i)\n        h -= 1\n        i -= 1\n\nfor j in range(w):\n    for i in range(h):\n        if m[i][j] == '#':\n            break\n    else:\n        for i in range(h):\n            m[i].pop(j)\n        w -= 1\n        j -= 1\n\nfor i in range(h):\n    print(''.join(m[i]))"
}
2022-04-13 19:59:54.573138 REASON stop
2022-04-13 19:59:54.589818 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nH, W = map(int, input().split())\ngrid = []\nfor i in range(H):\n    grid.append(list(input()))\n\n# remove rows that only contain white squares\nfor i in range(H):\n    if not '#' in grid[i]:\n        grid.pop(i)\n        H -= 1\n        i -= 1\n\n# remove columns that only contain white squares\nfor j in range(W):\n    column = []\n    for i in range(H):\n        column.append(grid[i][j])\n    if not '#' in column:\n        for i in range(H):\n            grid[i].pop(j)\n        W -= 1\n        j -= 1\n\n# print final state of the grid\nfor i in range(H):\n    print(''.join(grid[i]))"
}
2022-04-13 19:59:54.589927 REASON stop
