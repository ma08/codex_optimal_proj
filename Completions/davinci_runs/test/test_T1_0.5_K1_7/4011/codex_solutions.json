["\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input()]\n    f = [int(x) for x in input().split()]\n\n    # Use a greedy approach to find the max number\n    # First, find the max number in a\n    max_num = max(a)\n    max_num_idx = a.index(max_num)\n\n    # Second, find the max number that can be obtained by using function f\n    max_f = max(f)\n    max_f_idx = f.index(max_f)\n\n    # Check if we should change the number\n    if max_f > max_num:\n        # If so, find where the max number occurs in a\n        a[max_num_idx] = max_f\n\n    # Use the function to change the rest of the numbers\n    a = [str(f[x-1]) for x in a]\n    print(\"\".join(a))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n = int(input())\n    a = list(input())\n    f = list(map(int, input().split()))\n    f = [f[int(i)-1] for i in a]\n    a = list(map(int, a))\n    for i in range(n-1):\n        if f[i] < f[i+1]:\n            a[i] = f[i]\n        else:\n            break\n    for i in reversed(range(1,n)):\n        if f[i-1] < f[i]:\n            a[i] = f[i]\n        else:\n            break\n    print(''.join(map(str, a)))\n\nmain()", "\nimport sys\n\nsys.stdin = open('input.txt', 'r')\nn = int(input())\na = input()\nf = [int(x) for x in input().split()]\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    if a[i] != '9':\n        l[i] = '9'\n    else:\n        l[i] = a[i]\n\nfor i in range(n - 1, -1, -1):\n    if a[i] != '1':\n        r[i] = '1'\n    else:\n        r[i] = a[i]\n\nans = ''\nfor i in range(n):\n    if l[i] == a[i]:\n        ans += a[i]\n    else:\n        ans += l[i]\n        break\n\nfor i in range(n - 1, -1, -1):\n    if r[i] == a[i]:\n        ans = a[i] + ans\n    else:\n        ans = r[i] + ans\n        break\n\nprint(ans)", "\n\nn = int(input())\na = input()\nf = list(map(int, input().split()))\n\n# If a map is a bijection, then the result is the same as the input\nif len(set(f)) == 9:\n    print(a)\n    exit()\n\n# If a map is not a bijection, then the result is the same as the input except the maximum digit is replaced by the maximum digit in the map\nelse:\n    print(int(a.replace(str(max(a)), str(max(f)))))", "\n\nn = int(input())\na = input()\nf = [int(i) for i in input().split()]\n\na = list(map(int, a))\n\nfor i in range(n):\n    a[i] = f[a[i] - 1]\n\na = list(map(str, a))\n\nfor i in range(n):\n    if a[i] != '9':\n        for j in range(i+1, n):\n            if a[j] == '9':\n                a[i], a[j] = a[j], a[i]\n                break\n\nprint(''.join(a))", "\n\n# SOLUTION\nn = int(input())\na = list(map(int, input()))\nf = list(map(int, input().split()))\n\ndef solve(a, f):\n    left = 0\n    right = 0\n    while left < len(a) and a[left] == f[a[left] - 1]:\n        left += 1\n    while right < len(a) and a[-right - 1] == f[a[-right - 1] - 1]:\n        right += 1\n    if left + right >= len(a):\n        return \"\".join(map(str, a))\n    else:\n        return \"\".join(map(str, a[:left] + [f[a[left] - 1]] + a[left+1:-right] + [f[a[-right-1] - 1]] + a[-right:]))\n\nprint(solve(a, f))", "\n\n#-----Solution-----\n\ndef max_number(a,f):\n    a = list(a)\n    for i in range(len(a)):\n        a[i] = f[int(a[i])-1]\n    a = ''.join(a)\n    return a\n\nn = int(input())\na = input()\nf = list(map(int,input().split()))\n\n# the max number can be obtained by replacing the segment with the largest possible digit\n# the segment can be either the leftmost or rightmost segment\n# the segment can be either the whole number or a contiguous subsegment\n# the segment can be either a segment of the same digit or a segment of different digits\n\n# try replacing the leftmost segment\na_left = a[0]\nfor i in range(1,n):\n    if a[i] != a[i-1]:\n        break\n    a_left += a[i]\na_left = max_number(a_left,f)\n\n# try replacing the rightmost segment\na_right = a[-1]\nfor i in range(n-2,-1,-1):\n    if a[i] != a[i+1]:\n        break\n    a_right = a[i] + a_right\na_right = max_number(a_right,f)\n\n# try replacing the whole number\na_whole = max_number(a,f)\n\n# try replacing the whole number but with the largest possible digit\na_whole_max = ''\nfor i in range(n):\n    a_whole_max += str(f[-1])\n\nprint(max(a_left,a_right,a_whole,a_whole_max))"]