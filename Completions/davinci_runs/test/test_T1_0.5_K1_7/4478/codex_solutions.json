["\n\nn = int(input())\n\nseqs = []\nfor i in range(n):\n    seqs.append([int(x) for x in input().split()])\n\ndef check_sums(seqs):\n    sums = []\n    for seq in seqs:\n        for i in range(len(seq)):\n            sums.append(sum(seq[:i]+seq[i+1:]))\n    return len(set(sums)) == len(sums)\n\ndef find_pair(seqs):\n    sums = []\n    for seq in seqs:\n        for i in range(len(seq)):\n            sums.append(sum(seq[:i]+seq[i+1:]))\n    sums.sort()\n    for i in range(len(sums)-1):\n        if sums[i] == sums[i+1]:\n            return sums[i]\n    return None\n\nif check_sums(seqs):\n    print(\"YES\")\n    pair_sum = find_pair(seqs)\n    for i in range(n):\n        for j in range(len(seqs[i])):\n            if pair_sum == sum(seqs[i][:j] + seqs[i][j+1:]):\n                print(i+1, j+1)\n                break\n        else:\n            continue\n        break\nelse:\n    print(\"NO\")", "\n\nk = int(input())\n\nfor n in range(k):\n    n_i = int(input())\n    a_i = list(map(int, input().split()))\n    s_i = sum(a_i)\n    a_i = [a_i[i] for i in range(n_i) if i != n_i - 1]\n    s_i_ = sum(a_i)\n    if s_i - s_i_ == 0:\n        print(\"YES\")\n        print(n + 1, n_i)\n        print(n + 1, n_i - 1)\n        break\nelse:\n    print(\"NO\")", "\n\ndef main():\n    n = int(input())\n    lst = []\n    for i in range(n):\n        lst.append([int(x) for x in input().split()])\n    for i in range(n):\n        lst[i].pop(0)\n    for i in range(n):\n        for j in range(len(lst[i])):\n            for k in range(n):\n                for l in range(len(lst[k])):\n                    if sum(lst[i][:j] + lst[i][j+1:]) == sum(lst[k][:l] + lst[k][l+1:]):\n                        print(\"YES\")\n                        print(i + 1, j + 1)\n                        print(k + 1, l + 1)\n                        return\n    print(\"NO\")\n\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\n\ndef read_array(typ):\n    return list(map(typ, input().strip().split()))\n\n\ndef main():\n    n = int(input().strip())\n    seqs = []\n    for i in range(n):\n        _ = int(input().strip())\n        seqs.append(read_array(int))\n\n    sums = []\n    for seq in seqs:\n        sums.append(sum(seq))\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if sums[i] - seqs[i][0] == sums[j] - seqs[j][0]:\n                    print(\"YES\")\n                    print(i + 1, 1)\n                    print(j + 1, 1)\n                    return\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if sums[i] - seqs[i][-1] == sums[j] - seqs[j][-1]:\n                    print(\"YES\")\n                    print(i + 1, len(seqs[i]))\n                    print(j + 1, len(seqs[j]))\n                    return\n    print(\"NO\")\n\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\n\ndef get_sum(a):\n    s = 0\n    for i in range(len(a)):\n        s += a[i]\n    return s\n\ndef get_sum_without(a, x):\n    s = 0\n    for i in range(len(a)):\n        if i != x:\n            s += a[i]\n    return s\n\ndef get_sums(a):\n    sums = []\n    for i in range(len(a)):\n        sums.append(get_sum_without(a, i))\n    return sums\n\ndef get_sum_sets(a):\n    sum_sets = []\n    for i in range(len(a)):\n        sum_sets.append(set(get_sums(a[i])))\n    return sum_sets\n\ndef get_sum_sets_intersects(a):\n    sum_sets_intersects = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            sum_sets_intersects.append(a[i] & a[j])\n    return sum_sets_intersects\n\ndef get_intersect_sums(a):\n    intersect_sums = set()\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            intersect_sums.add(a[i][j])\n    return intersect_sums\n\na = []\nfor i in range(n):\n    m = int(input())\n    a_i = [int(x) for x in input().split()]\n    a.append(a_i)\n\nsums = []\nfor i in range(len(a)):\n    sums.append(get_sum(a[i]))\n\nsum_sets = get_sum_sets(a)\nsum_sets_intersects = get_sum_sets_intersects(sum_sets)\nintersect_sums = get_intersect_sums(sum_sets_intersects)\n\nif len(intersect_sums) > 0:\n    print(\"YES\")\n    for i in range(len(sums)):\n        for j in range(len(a[i])):\n            if sums[i] - a[i][j] in intersect_sums:\n                print(i + 1, j + 1)\n                break\n    for i in range(len(sums)):\n        for j in range(len(a[i])):\n            if sums[i] - a[i][j] in intersect_sums:\n                print(i + 1, j + 1)\n                break\nelse:\n    print(\"NO\")", "\n\nn = int(input())\narr = []\nfor i in range(n):\n    length = int(input())\n    arr.append([int(x) for x in input().split()])\n\ndef is_equal(arr):\n    sums = []\n    for i in range(n):\n        sums.append(sum(arr[i]))\n    for i in range(n):\n        for j in range(i+1,n):\n            if sums[i] == sums[j]:\n                return True, i, j\n    return False, -1, -1\n\ndef remove_one(arr, i, j):\n    for k in range(len(arr[i])):\n        if sum(arr[i][:k] + arr[i][k+1:]) == sum(arr[j]):\n            return i, k+1\n    for k in range(len(arr[j])):\n        if sum(arr[j][:k] + arr[j][k+1:]) == sum(arr[i]):\n            return j, k+1\n    return -1, -1\n\nis_equal, i, j = is_equal(arr)\nif is_equal:\n    x, y = remove_one(arr, i, j)\n    print(\"YES\")\n    print(x+1, y)\n    print(j+1, y)\nelse:\n    print(\"NO\")", "\n\nk = int(input())\n\n# init array\na = []\n\nfor i in range(k):\n    n = int(input())\n    a.append([int(x) for x in input().split()])\n\n\ndef find_index_of_removable_element(sequence):\n    for i in range(len(sequence)):\n        if sequence[i] == sum(sequence[:i]) + sum(sequence[i+1:]):\n            return i\n    return None\n\n\ndef find_solution():\n    for i in range(k):\n        for j in range(i+1, k):\n            index_i = find_index_of_removable_element(a[i])\n            index_j = find_index_of_removable_element(a[j])\n            if index_i is not None and index_j is not None:\n                if sum(a[i][:index_i]) + sum(a[i][index_i+1:]) == sum(a[j][:index_j]) + sum(a[j][index_j+1:]):\n                    return True\n    return False\n\n\nif find_solution():\n    print(\"YES\")\nelse:\n    print(\"NO\")"]