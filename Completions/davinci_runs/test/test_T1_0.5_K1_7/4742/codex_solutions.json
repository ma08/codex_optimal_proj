["\n\ndef main():\n    \"\"\"main\"\"\"\n    note = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    note_num = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    note_dict = dict(zip(note, note_num))\n    _ = int(input())\n    note_1 = input().split()\n    note_2 = input().split()\n    if note_1 == note_2[::-1]:\n        print(\"Retrograde\")\n    elif note_1[0] == note_2[0]:\n        if note_dict[note_1[1]] + note_dict[note_2[1]] == 11:\n            print(\"Inversion\")\n        else:\n            print(\"Nonsense\")\n    else:\n        if note_dict[note_1[0]] + note_dict[note_2[0]] == 11:\n            print(\"Transposition\")\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    first = sys.stdin.readline().split(\" \")\n    second = sys.stdin.readline().split(\" \")\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Check if it is a transposition\n    transposition = True\n    for i in range(n):\n        if notes.index(first[i]) + 1 != notes.index(second[i]):\n            transposition = False\n            break\n    if transposition:\n        print(\"Transposition\")\n        return\n    # Check if it is a retrograde\n    retrograde = True\n    for i in range(n):\n        if first[i] != second[n - 1 - i]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n    # Check if it is an inversion\n    inversion = True\n    for i in range(1, n):\n        if notes.index(first[i]) - notes.index(first[0]) != notes.index(second[i]) - notes.index(second[0]):\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n    # If it is none of the above\n    print(\"Nonsense\")\n\nmain()", "\n\n# get the notes as a list\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef get_note_index(note):\n    return notes.index(note)\n\ndef get_note_value(index):\n    return notes[index]\n\n# get the first melody\nn = int(input())\nmelody1 = input().split()\n\n# get the second melody\nmelody2 = input().split()\n\n# create a list of the differences between the notes of the first melody\nmelody1_diff = []\nfor i in range(len(melody1) - 1):\n    melody1_diff.append(get_note_index(melody1[i + 1]) - get_note_index(melody1[i]))\n\n# create a list of the differences between the notes of the second melody\nmelody2_diff = []\nfor i in range(len(melody2) - 1):\n    melody2_diff.append(get_note_index(melody2[i + 1]) - get_note_index(melody2[i]))\n\n# check if the second melody is a transposition\nif melody1_diff == melody2_diff:\n    print(\"Transposition\")\n\n# check if the second melody is a retrograde\nelif melody1_diff == melody2_diff[::-1]:\n    print(\"Retrograde\")\n\n# check if the second melody is an inversion\nelif melody1_diff[0] == melody2_diff[0]:\n    # create a list of the inversions of the second melody\n    melody2_inv = [melody2_diff[0]]\n    for i in range(1, len(melody2_diff)):\n        melody2_inv.append(melody2_diff[0] - melody2_diff[i])\n\n    if melody1_diff == melody2_inv:\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\n# none of the above\nelse:\n    print(\"Nonsense\")", "\n\ndef isTransposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    return False\n\ndef isRetrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    return False\n\ndef isInversion(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    return False\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    if isTransposition(melody1, melody2):\n        print(\"Transposition\")\n    elif isRetrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif isInversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    semitones = [notes[i:] + notes[:i] for i in range(12)]\n    if melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    elif melody2 == [semitones[notes.index(melody1[0])][notes.index(melody1[i])] for i in range(l)]:\n        print(\"Inversion\")\n    elif melody2 == [semitones[notes.index(melody1[0])][notes.index(melody1[0]) + i] for i in range(1, l + 1)]:\n        print(\"Transposition\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef is_transposition(melody1, melody2):\n    \"\"\" Returns if melody2 is a transposition of melody1. \"\"\"\n    return melody1[1:] == melody2[1:]\n\n\ndef is_retrograde(melody1, melody2):\n    \"\"\" Returns if melody2 is a retrograde of melody1. \"\"\"\n    return melody1 == melody2[::-1]\n\n\ndef is_inversion(melody1, melody2):\n    \"\"\" Returns if melody2 is an inversion of melody1. \"\"\"\n    return melody1 == melody2 or melody1[0] == melody2[0]\n\n\ndef main():\n    \"\"\" Returns whether a melody is a transposition, retrograde, inversion, or nonsense. \"\"\"\n    num_notes = int(input())\n    melody1 = input().split(' ')\n    melody2 = input().split(' ')\n\n    if is_transposition(melody1, melody2):\n        print('Transposition')\n    elif is_retrograde(melody1, melody2):\n        print('Retrograde')\n    elif is_inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    n = int(lines[0])\n    m1 = lines[1].split()\n    m2 = lines[2].split()\n    trans = True\n    ret = True\n    inv = True\n    for i in range(n):\n        if m1[i] != m2[i]:\n            trans = False\n        if m1[i] != m2[n-i-1]:\n            ret = False\n        if notes.index(m1[0]) + notes.index(m2[i]) != 11:\n            inv = False\n    if trans:\n        print(\"Transposition\")\n    elif ret:\n        print(\"Retrograde\")\n    elif inv:\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nmain()"]