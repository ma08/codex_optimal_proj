["", "\n\n\ndef solve(n, k, c, f, h):\n    count = {}\n    for i in range(k * n):\n        if c[i] not in count:\n            count[c[i]] = 0\n        count[c[i]] += 1\n\n    total_joy = 0\n    for i in range(n):\n        if f[i] in count:\n            total_joy += h[count[f[i]]]\n    return total_joy\n\n\nif __name__ == \"__main__\":\n    n, k = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    f = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n\n    print(solve(n, k, c, f, h))", "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    cards = [int(x) for x in input().split()]\n    favs = [int(x) for x in input().split()]\n    joys = [int(x) for x in input().split()]\n    favs = list(zip(favs, joys))\n    favs.sort(key=lambda x: x[1])\n    favs = [x[0] for x in favs]\n    cards.sort()\n    count = 0\n    while len(cards)>0:\n        card = cards.pop()\n        if card in favs:\n            count += joys[favs.index(card)]\n        else:\n            cards.remove(card)\n    print(count)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn,k = map(int, input().split())\ncards = list(map(int, input().split()))\nfav = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\ncards.sort()\nfav.sort()\n\noccur = []\nfor i in range(len(fav)):\n    cnt = 0\n    j = 0\n    while j < len(cards):\n        if cards[j] == fav[i]:\n            cnt += 1\n            del cards[j]\n        else:\n            j += 1\n    occur.append(cnt)\n\noccur.sort()\n\nans = 0\nfor i in range(len(occur)):\n    if occur[i] < k:\n        ans += h[occur[i]]\n    else:\n        ans += h[k-1]\n\nprint(ans)", "\n\n\ndef main():\n    n, k = map(int, input().split())\n    cards = list(map(int, input().split()))\n    fav = list(map(int, input().split()))\n    joy = list(map(int, input().split()))\n\n    d = {}\n    for i in range(n):\n        if fav[i] in d:\n            d[fav[i]] += 1\n        else:\n            d[fav[i]] = 1\n\n    res = 0\n    for i in range(n):\n        if fav[i] in d:\n            res += joy[d[fav[i]]]\n            d[fav[i]] -= 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef max_total_joy(n, k, c, f, h):\n    c.sort()\n    f.sort()\n    h.sort()\n    total = 0\n    for x in range(n):\n        total += h[min(k, f.count(f[x]))]\n        f = f[f.count(f[x]):]\n    return total\n\nif __name__ == \"__main__\":\n    n, k = map(int, sys.stdin.readline().split())\n    c = list(map(int, sys.stdin.readline().split()))\n    f = list(map(int, sys.stdin.readline().split()))\n    h = list(map(int, sys.stdin.readline().split()))\n    print(max_total_joy(n, k, c, f, h))", "\n\nn, k = map(int, input().split())\ncards = list(map(int, input().split()))\nfav_nums = list(map(int, input().split()))\njoy_levels = list(map(int, input().split()))\n\nd = {}\nfor i in range(n):\n    d[fav_nums[i]] = joy_levels\n\ndef max_joy(cards, d):\n    max_joy = 0\n    for card in cards:\n        if card in d:\n            max_joy += max(d[card])\n    return max_joy\n\ncards.sort()\nprint(max_joy(cards, d))"]