["\n\nimport math\n\ndef solve(n, p, s, v):\n    c = 0.000000000001\n    while True:\n        c *= 2\n        t = (n * math.log(n, 2) ** c) / (p * 10 ** 9) + s * (1 + 1 / c) / v\n        if t > s / v:\n            break\n    while True:\n        c_new = (c + c / 2)\n        t_new = (n * math.log(n, 2) ** c_new) / (p * 10 ** 9) + s * (1 + 1 / c_new) / v\n        if t_new > s / v:\n            break\n        c = c_new\n        t = t_new\n    return t, c\n\ndef main():\n    n, p, s, v = map(float, input().split())\n    print(*solve(n, p, s, v))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main(n, p, s, v):\n    \"\"\"\n    >>> main(10, 8.9, 40075000, 272.1)\n    157079.04857106 15.598261092309\n    >>> main(10, 8.9, 40075000, 272.1)\n    157079.04857106 15.598261092309\n    >>> main(10, 8.9, 40075000, 272.1)\n    157079.04857106 15.598261092309\n    \"\"\"\n\n    if __name__ == \"__main__\":\n        n, p, s, v = [float(i) for i in input().split()]\n\n    # print(n, p, s, v)\n\n    # t = (n * math.log(n)**(c * math.sqrt(2))) / (p * 10**9)\n    # t = (s * (1 + 1/c)) / v\n\n    c = 0.00001\n    c_max = math.sqrt(2) * math.log(n, 2)\n    t_min = n * math.log(n)**(c_max * math.sqrt(2)) / (p * 10**9) + (s * (1 + 1/c_max)) / v\n\n    while c < c_max:\n        t = n * math.log(n)**(c * math.sqrt(2)) / (p * 10**9) + (s * (1 + 1/c)) / v\n        if t < t_min:\n            t_min = t\n            c_min = c\n        c += 0.00001\n\n    print(t_min, c_min)\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\nimport math\n\nn, p, s, v = map(float, input().split())\n\ndef f(c):\n    return math.log(n, 2) ** (c * math.sqrt(2))\n\ndef f_inv(x):\n    return math.log(x, n) ** (1 / (c * math.sqrt(2)))\n\ndef g(c):\n    return s * (1 + 1 / c) / v\n\ndef h(c):\n    return f_inv(p) + g(c)\n\nc_min = 1\nc_max = 2\n\nwhile h(c_max) < h(c_min):\n    c_min = c_max\n    c_max *= 2\n\nwhile c_max - c_min > 0.000001:\n    c_mid = (c_min + c_max) / 2\n    if h(c_mid) < h(c_min):\n        c_min = c_mid\n    else:\n        c_max = c_mid\n\nprint(h(c_min))\nprint(c_min)", "\n\nimport sys\nimport math\n\ndef main():\n    n, p, s, v = [float(x) for x in sys.stdin.read().split()]\n\n    # compute the minimum time to distribute the keys\n    # t = s(1 + 1/c) / v = s / v + s / (cv) = s / v + t_algo\n    # t_algo = s / (cv)\n    # t_algo = n * (log(n)**(c*sqrt(2))) / (p*10**9)\n    # n * (log(n)**(c*sqrt(2))) = s * p * 10**9 / (v * c)\n    # log(n)**(c*sqrt(2)) = (s * p * 10**9 / (v * c)) / n\n    # log(n) = ((s * p * 10**9 / (v * c)) / n)**(1/(c*sqrt(2)))\n    # n = exp(((s * p * 10**9 / (v * c)) / n)**(1/(c*sqrt(2))))\n    # n**(c*sqrt(2)) = exp(s * p * 10**9 / (v * c))\n    # (c*sqrt(2)) * log(n) = s * p * 10**9 / (v * c)\n    # c * sqrt(2) = (s * p * 10**9) / (v * n * log(n))\n    # c = (s * p * 10**9) / (v * n * log(n)) / sqrt(2)\n    c = (s * p * 10**9) / (v * n * math.log(n)) / math.sqrt(2)\n    t_algo = n * (math.log(n)**(c*math.sqrt(2))) / (p*10**9)\n    t = s / v + t_algo\n\n    # print the solution\n    print(\"{:.10f} {:.10f}\".format(t, c))\n\nif __name__ == \"__main__\":\n    main()", "\n\n### TODO: UNDERSTAND THE PROBLEM\n### TODO: PRECISION\n\nimport sys\nimport math\n\ndef readNumber(type):\n\tline = sys.stdin.readline()\n\treturn type(line)\n\ndef readNumbers(type):\n\treturn list(map(type, sys.stdin.readline().split()))\n\ndef main():\n\tn, p, s, v = readNumbers(float)\n\tc = 1\n\tt = s * (1 + 1 / c) / v\n\twhile t > (n * (math.log(n, 2) ** c * math.sqrt(2)) / (p * 10 ** 9)):\n\t\tc += 1\n\t\tt = s * (1 + 1 / c) / v\n\tprint(\"{:.6f} {:.6f}\".format(t, c))\n\nif __name__ == \"__main__\":\n\tmain()", "\n\nimport sys\n\nn, p, s, v = map(float, raw_input().strip().split())\n\ndef f(c):\n    return (n * (log(n, 2)**(c * sqrt(2))) / p) + s * (1 + 1/c) / v\n\ndef fprime(c):\n    return (n * (log(n, 2)**(c * sqrt(2))) / p) * (1.0/c**2 - 1.0/c) + s / (v * c**2)\n\ndef fprimeprime(c):\n    return (n * (log(n, 2)**(c * sqrt(2))) / p) * (-2.0/c**3 + 3.0/c**2) + 2 * s / (v * c**3)\n\ndef newton(x, f, fprime, fprimeprime, epsilon=0.00001):\n    while abs(f(x)) > epsilon:\n        x = x - f(x) / fprime(x)\n    return x\n\nc = newton(1, f, fprime, fprimeprime)\n\nprint '%f %f' % (f(c), c)", "\n\nimport sys\n\ndef main():\n    n, p, s, v = map(float, sys.stdin.readline().split())\n    c = (n * (log(n) / log(2)) ** 0.5) / p\n    time = s * (1 + 1 / c) / v\n    print(time, c)\n\nif __name__ == '__main__':\n    main()"]