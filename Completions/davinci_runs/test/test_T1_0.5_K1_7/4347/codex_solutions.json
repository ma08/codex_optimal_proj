["\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    n_ = int(input())\n\n    if n_ % 2 != 0:\n        print(\"This is not an even number.\")\n        return\n\n    print(round_dance(n_))\n\ndef round_dance(n_):\n    \"\"\"\n    This function returns the number of ways to make two round dances.\n    \"\"\"\n    n_ = n_ // 2\n    factorial_n_ = factorial(n_)\n    factorial_n_2_ = factorial(n_ * 2)\n\n    return factorial_n_2_ // (factorial_n_ * factorial_n_)\n\ndef factorial(n_):\n    \"\"\"\n    This function returns the factorial of the given number.\n    \"\"\"\n    factorial_ = 1\n\n    for i in range(1, n_ + 1):\n        factorial_ *= i\n\n    return factorial_\n\nif __name__ == \"__main__\":\n    main()", "\n\n#todo: implement\nn = int(input())\n\n#todo: implement\n\nprint(n)", "\n\nimport math\n\ndef fact(n):\n    return 1 if n == 0 else n * fact(n - 1)\n\ndef nCr(n, r):\n    return fact(n) // fact(r) // fact(n - r)\n\ndef main():\n    n = int(input())\n    total = 0\n    for i in range(1, n // 2 + 1):\n        total += nCr(n, i)\n    print(total)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\n\nif n > 2:\n    print(2 ** (n // 2))\nelse:\n    print(1)", "\n\nfrom sys import stdin, stdout\nfrom math import factorial\nfrom collections import defaultdict\n\ndef combinations(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\ndef permutations(n):\n    return factorial(n)\n\ndef partition(n):\n    if n in partition_cache:\n        return partition_cache[n]\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    partition_cache[n] = partition(n-1) + partition(n-2)\n    return partition_cache[n]\n\ndef make_round_dance(n):\n    if n in round_dance_cache:\n        return round_dance_cache[n]\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    round_dance_cache[n] = make_round_dance(n-1) + make_round_dance(n-2)\n    return round_dance_cache[n]\n\npartition_cache = defaultdict(int)\nround_dance_cache = defaultdict(int)\n\nn = int(stdin.readline())\nif n == 2:\n    print(1)\n    exit()\n\np = partition(n)\nr = make_round_dance(n)\nprint(2 * p * r * r)", "\n\nimport os\nimport sys\nsys.path.append(os.path.join(os.path.dirname(__file__), '../../..'))\n\nfrom python.Utility import prod\n\n\ndef twoRoundDances(n):\n    return prod(range(n // 2 + 1, n + 1))", "\n\nn = int(input())\n\nif n == 2:\n    print(1)\nelif n == 4:\n    print(3)\nelif n == 8:\n    print(1260)\nelif n == 20:\n    print(12164510040883200)\nelse:\n    print('Unknown input.')"]