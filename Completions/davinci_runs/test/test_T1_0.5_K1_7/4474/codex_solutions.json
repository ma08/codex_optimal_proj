["\n\ndef main():\n    \"\"\"my code here\"\"\"\n    q = int(input())\n    for i in range(q):\n        n = int(input())\n        if n == 1:\n            print(1)\n        else:\n            print(calc(n))\n\n\ndef calc(n):\n    \"\"\"calculate the smallest good number greater than or equal to n\"\"\"\n    m = n\n    if n % 3 == 0:\n        m = n\n    elif n % 3 == 1:\n        m = n + 2\n    else:\n        m = n + 1\n    while not check_good(m):\n        m += 3\n    return m\n\n\ndef check_good(n):\n    \"\"\"check if n is a good number\"\"\"\n    if n == 1:\n        return True\n    m = n\n    while m % 3 == 0:\n        m = m // 3\n    if m == 1:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport bisect\n\ndef find_good(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 9\n\n    # We want to find the sum of the first i powers of 3 that is >= n.\n    # The powers of 3 are monotonically increasing, so we can use bisect to\n    # find the first i such that 3^i >= n.\n    i = bisect.bisect_left(powers_of_3, n)\n    if powers_of_3[i] == n:\n        return n\n\n    # Now we want to find the sum of the first i-1 powers of 3 that is >= n.\n    # The sum of the first i-1 powers of 3 is the sum of the first i powers of\n    # 3 minus the i-th power of 3.\n    return powers_of_3[i] + find_good(n - powers_of_3[i-1])\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        n = int(input())\n        print(find_good(n))\n\nif __name__ == '__main__':\n    powers_of_3 = [3**i for i in range(61)]\n    main()", "\n\n# q = int(input())\n# for i in range(q):\n#     n = int(input())\n#     m = n\n#     while True:\n#         if m == 1:\n#             break\n#         m = (m - 1) / 3\n#         if m == int(m):\n#             break\n#         else:\n#             m = int(m) + 1\n#     print(int(m))\n\n# def is_good(n):\n#     while True:\n#         if n == 1:\n#             return True\n#         n = (n - 1) / 3\n#         if n == int(n):\n#             return True\n#         else:\n#             n = int(n) + 1\n#             if n == 1:\n#                 return False\n\n# q = int(input())\n# for i in range(q):\n#     n = int(input())\n#     m = n\n#     while True:\n#         if is_good(m):\n#             break\n#         m += 1\n#     print(m)\n\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    m = n\n    while True:\n        if m == 1:\n            break\n        m = (m - 1) / 3\n        if m == int(m):\n            break\n        else:\n            m = int(m) + 1\n    print(int(m))", "\n\nimport math\n\ndef is_good(n):\n    if n == 1:\n        return True\n    else:\n        for i in range(1, int(math.log(n, 3)) + 1):\n            if n % 3**i == 0:\n                return is_good(n - 3**i)\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        while not is_good(n):\n            n += 1\n        print(n)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    # get input\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        n = int(sys.stdin.readline())\n        # algorithm\n        # if n is a power of 3, then we're done\n        # if not, we want to find the next power of 3\n        # the next power of 3 is the power of 3 that is just larger than n\n        # if n is not a power of 3, then n + 1 is a power of 3\n        # if n is a power of 3, then n + 2 is a power of 3\n        if n == 1:\n            print(1)\n            continue\n        if n%3 == 0:\n            print(n)\n            continue\n        if n%3 == 1:\n            print(n+2)\n            continue\n        if n%3 == 2:\n            print(n+1)\n            continue\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef get_good_number(n):\n    \"\"\"\n    This function takes an integer $n$ and returns the smallest good number \n    greater than or equal to $n$.\n    \"\"\"\n    good = 0\n    while n > good:\n        good = 3*good + 1\n    return good\n\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    print(get_good_number(n))\n\n# for line in sys.stdin:\n#     n = int(line)\n#     print(get_good_number(n))", "\n\ndef is_good(n):\n    if n == 1:\n        return True\n    else:\n        return n % 3 != 0\n\ndef next_good(n):\n    if is_good(n):\n        return n\n    else:\n        return next_good(n + 1)\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        n = int(input())\n        print(next_good(n))\n\nif __name__ == \"__main__\":\n    main()"]