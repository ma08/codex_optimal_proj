["\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    s = [int(i) for i in sys.stdin.readline().split()]\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    l = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    t = []\n    for i in range(k):\n        t.append(l[i][0])\n    print(' '.join([str(i) for i in t]))\n\nif __name__ == '__main__':\n    main()", "\n\ndef get_max_count(s, k):\n    c = Counter(s)\n    c_items = c.most_common()\n    t = []\n    for i in range(k):\n        t.append(c_items[i][0])\n    return t\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    t = get_max_count(s, k)\n    print(*t)\n\nif __name__ == '__main__':\n    main()", "\n\ndef solve(s, k):\n    counts = {}\n    for i in range(len(s)):\n        if s[i] not in counts:\n            counts[s[i]] = 0\n        counts[s[i]] += 1\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    res = []\n    for i in range(k):\n        res.append(sorted_counts[i][0])\n    return res\n\n\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    print(*solve(s, k))", "\n\nimport sys\n\ndef main():\n    n, k = [int(x) for x in sys.stdin.readline().strip().split()]\n    s = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    #print(n, k, s)\n\n    # create dictionary of s\n    # key: element value\n    # value: count of elements\n    s_dict = {}\n    for el in s:\n        if el in s_dict:\n            s_dict[el] += 1\n        else:\n            s_dict[el] = 1\n\n    #print(s_dict)\n\n    # sort s_dict by count of elements\n    s_dict_sorted = sorted(s_dict.items(), key=lambda x: x[1], reverse=True)\n\n    #print(s_dict_sorted)\n\n    # cut out maximum number of copies of t from s\n    t = []\n    for i in range(k):\n        t.append(s_dict_sorted[i][0])\n\n    #print(t)\n\n    print(' '.join([str(x) for x in t]))\n\n\nif __name__ == '__main__':\n    main()", "\n\n\nfrom collections import Counter\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nc = Counter(a)\nans = []\n\nfor i in range(k):\n    mx = max(c, key=c.get)\n    ans.append(mx)\n    c[mx] -= 1\n\nprint(*ans)", "\n\n\nfrom collections import Counter\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\n\n# 1. Count the number of times each element appears in the list\n# 2. Sort the list in descending order by the number of times each element appears\n# 3. Print the first k elements\n\nsorted_s = sorted(Counter(s).items(), key=lambda x: x[1], reverse=True)\nprint(*[sorted_s[i][0] for i in range(k)])", "\n\nclass Solution:\n    def solve(self, n, k, s):\n        counts = {}\n        for i in s:\n            if i in counts:\n                counts[i] += 1\n            else:\n                counts[i] = 1\n        sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n        t = []\n        for i in range(k):\n            t.append(sorted_counts[i][0])\n        return t\n\nn, k = [int(i) for i in input().split()]\ns = [int(i) for i in input().split()]\n\nsolution = Solution()\n\nprint(*solution.solve(n, k, s))"]