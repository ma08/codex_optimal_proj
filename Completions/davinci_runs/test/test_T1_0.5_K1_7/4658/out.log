2022-04-13 22:32:52.970798 """
Reverse bits of a given 32 bits unsigned integer.

Note:

Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
Follow up:

If this function is called many times, how would you optimize it?

Example 1:

Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.

Example 2:

Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111. 

Constraints:

The input must be a binary string of length 32
"""
2022-04-13 22:32:52.970816 --------------------------
2022-04-13 22:33:16.446553 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        return int(bin(n)[2:].rjust(32, '0')[::-1], 2)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        return int(bin(n)[2:].zfill(32)[::-1], 2)\n\nclass Solution2:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans\n\nclass Solution3:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans\n\nclass Solution4:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans\n\nclass Solution5:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans\n\nclass Solution6:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        return int(bin(n)[2:].zfill(32)[::-1], 2)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        # get binary string\n        binary = bin(n)[2:].zfill(32)\n        # reverse string\n        reverse = binary[::-1]\n        # convert to int\n        return int(reverse, 2)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        temp = '{0:032b}'.format(n)\n        return int(temp[::-1], 2)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        res = 0\n        for i in range(32):\n            res <<= 1\n            res += n & 1\n            n >>= 1\n        return res"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        ret, power = 0, 31\n        while n:\n            ret += (n & 1) << power\n            n = n >> 1\n            power -= 1\n        return ret\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        ret, power = 0, 24\n        byte_arr = [n >> i & 0xff for i in range(0, 32, 8)]\n        for byte in byte_arr:\n            ret += self.reverseByte(byte) << power\n            power -= 8\n        return ret\n    \n    def reverseByte(self, byte):\n        ret = 0\n        for i in range(8):\n            ret = (ret << 1) + (byte & 1)\n            byte = byte >> 1\n        return ret"
    }
  ],
  "created": 1649889173,
  "id": "cmpl-4wfpduorne0ejnFBxuN4TMDGmBdCR",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:33:16.446819 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        return int(bin(n)[2:].rjust(32, '0')[::-1], 2)"
}
2022-04-13 22:33:16.446849 REASON stop
2022-04-13 22:33:16.447256 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        return int(bin(n)[2:].zfill(32)[::-1], 2)\n\nclass Solution2:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans\n\nclass Solution3:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans\n\nclass Solution4:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans\n\nclass Solution5:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans\n\nclass Solution6:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for _ in range(32):\n            ans = (ans << 1) + (n & 1)\n            n >>= 1\n        return ans"
}
2022-04-13 22:33:16.447371 REASON stop
2022-04-13 22:33:16.447730 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        return int(bin(n)[2:].zfill(32)[::-1], 2)"
}
2022-04-13 22:33:16.447771 REASON stop
2022-04-13 22:33:16.462670 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        # get binary string\n        binary = bin(n)[2:].zfill(32)\n        # reverse string\n        reverse = binary[::-1]\n        # convert to int\n        return int(reverse, 2)"
}
2022-04-13 22:33:16.462756 REASON stop
2022-04-13 22:33:16.480380 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        temp = '{0:032b}'.format(n)\n        return int(temp[::-1], 2)"
}
2022-04-13 22:33:16.480482 REASON stop
2022-04-13 22:33:16.481185 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        res = 0\n        for i in range(32):\n            res <<= 1\n            res += n & 1\n            n >>= 1\n        return res"
}
2022-04-13 22:33:16.481240 REASON stop
2022-04-13 22:33:16.482024 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        ret, power = 0, 31\n        while n:\n            ret += (n & 1) << power\n            n = n >> 1\n            power -= 1\n        return ret\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        ret, power = 0, 24\n        byte_arr = [n >> i & 0xff for i in range(0, 32, 8)]\n        for byte in byte_arr:\n            ret += self.reverseByte(byte) << power\n            power -= 8\n        return ret\n    \n    def reverseByte(self, byte):\n        ret = 0\n        for i in range(8):\n            ret = (ret << 1) + (byte & 1)\n            byte = byte >> 1\n        return ret"
}
2022-04-13 22:33:16.482120 REASON stop
