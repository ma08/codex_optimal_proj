["\n\nN = int(input())\nS = [input() for _ in range(N)]\n\nM = [s for s in S if s[0] == \"M\"]\nA = [s for s in S if s[0] == \"A\"]\nR = [s for s in S if s[0] == \"R\"]\nC = [s for s in S if s[0] == \"C\"]\nH = [s for s in S if s[0] == \"H\"]\n\nprint(len(M) * len(A) * len(R) + len(M) * len(A) * len(C) + len(M) * len(A) * len(H) + len(M) * len(R) * len(C) + len(M) * len(R) * len(H) + len(M) * len(C) * len(H) + len(A) * len(R) * len(C) + len(A) * len(R) * len(H) + len(A) * len(C) * len(H) + len(R) * len(C) * len(H))", "\n\nimport collections\n\nn = int(input())\ns = [input() for _ in range(n)]\n\ndic = collections.defaultdict(int)\nfor i in s:\n    dic[i[0]] += 1\n\nans = 1\nfor i in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n    ans *= dic[i]\n    ans %= (10**9 + 7)\n\nprint(ans)", "\n\nimport sys\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(input())\n\n# dict of first letter of names\nd = {}\nfor i in range(n):\n    if len(s[i]) >= 1:\n        if s[i][0] in d:\n            d[s[i][0]] += 1\n        else:\n            d[s[i][0]] = 1\n\n# number of people with names beginning with each of the letters\nm = d.get('M', 0)\na = d.get('A', 0)\nr = d.get('R', 0)\nc = d.get('C', 0)\nh = d.get('H', 0)\n\n# number of ways to choose three people\nprint(m*a*r + m*a*c + m*a*h + m*r*c + m*r*h + m*c*h + a*r*c + a*r*h + a*c*h + r*c*h)", "\n\nimport sys\nimport itertools\n\nn = int(sys.stdin.readline())\nnames = [sys.stdin.readline().strip() for i in range(n)]\n\n# Count the number of names that start with each letter\ncount = {\n    'M': 0,\n    'A': 0,\n    'R': 0,\n    'C': 0,\n    'H': 0,\n}\nfor name in names:\n    count[name[0]] += 1\n\n# The answer is the number of ways to choose 3 items from the list of counts\nanswer = sum(itertools.combinations(list(count.values()), 3))\nprint(answer)", "\n\ndef main():\n    n = int(input())\n    names = [input() for _ in range(n)]\n    m = {'M': 0, 'A': 0, 'R': 0, 'C': 0, 'H': 0}\n    for name in names:\n        if name[0] in m:\n            m[name[0]] += 1\n    ans = m['M'] * m['A'] * m['R']\n    ans += m['M'] * m['A'] * m['C']\n    ans += m['M'] * m['A'] * m['H']\n    ans += m['M'] * m['R'] * m['C']\n    ans += m['M'] * m['R'] * m['H']\n    ans += m['M'] * m['C'] * m['H']\n    ans += m['A'] * m['R'] * m['C']\n    ans += m['A'] * m['R'] * m['H']\n    ans += m['A'] * m['C'] * m['H']\n    ans += m['R'] * m['C'] * m['H']\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    names = [sys.stdin.readline().rstrip() for _ in range(n)]\n\n    names = [name[0] for name in names if name[0] in ['M', 'A', 'R', 'C', 'H']]\n    counter = collections.Counter(names)\n\n    ans = counter['M'] * counter['A'] * counter['R'] + counter['M'] * counter['A'] * counter['C'] + counter['M'] * counter['A'] * counter['H'] + counter['M'] * counter['R'] * counter['C'] + counter['M'] * counter['R'] * counter['H'] + counter['M'] * counter['C'] * counter['H'] + counter['A'] * counter['R'] * counter['C'] + counter['A'] * counter['R'] * counter['H'] + counter['A'] * counter['C'] * counter['H'] + counter['R'] * counter['C'] * counter['H']\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\ns = [input() for _ in range(n)]\n\nt = set()\nfor i in s:\n    if i[0] in \"MARCH\":\n        t.add(i[0])\nprint(len(t) * (len(t) - 1) * (len(t) - 2) // 6)"]