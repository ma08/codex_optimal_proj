["\nn, m = map(int, input().split())\nm_letters = input()\nciphertext = input()\n\nkey = ['a']*m\nkey[-n:] = m_letters\n\nfor i in range(m-n-1, -1, -1):\n    key[i] = chr((ord(ciphertext[i]) - ord(key[i+n])) % 26 + ord('a'))\n\nprint(''.join(key))", "\n\nimport sys\n\ndef decrypt(key, cipher):\n    plain = \"\"\n    for i in range(len(cipher)):\n        plain += chr((ord(cipher[i]) - ord(key[i]))%26 + 97)\n    return plain\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    key = sys.stdin.readline().strip()\n    cipher = sys.stdin.readline().strip()\n    for i in range(n, m):\n        key += cipher[i-1]\n    print(decrypt(key, cipher))\n\nmain()", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    prefix = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    key = \"\"\n    for i in range(n):\n        key += chr(ord('a') + i)\n    for i in range(n, m):\n        key += ciphertext[i - n]\n    plaintext = \"\"\n    for i in range(m):\n        plaintext += chr((ord(ciphertext[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    sys.stdout.write(plaintext)\n\nmain()", "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    last_n = sys.stdin.readline().strip()\n    cipher = sys.stdin.readline().strip()\n    plaintext = \"\"\n    for i in range(m):\n        plaintext += chr((ord(cipher[i]) - ord(last_n[i % n]) + 26) % 26 + ord('a'))\n    print(plaintext)\n\nmain()", "\n\ndef main():\n    n, m = map(int, input().split())\n    last_n_letters = input()\n    ciphertext = input()\n\n    plaintext = \"\"\n\n    for i in range(m):\n        letter = ciphertext[i]\n        if i < n:\n            plaintext += last_n_letters[i]\n        else:\n            plaintext += chr(97 + (ord(letter) - ord(plaintext[i-n])) % 26)\n\n    print(plaintext)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef autokey(n, m, plain, cipher):\n    key = plain\n    for i in range(n, m):\n        key += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + 97)\n    return key\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    plain = sys.stdin.readline().rstrip()\n    cipher = sys.stdin.readline().rstrip()\n    print(autokey(n, m, plain, cipher))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    data = sys.stdin.readlines()\n    data = [i.strip() for i in data]\n    n, m = [int(i) for i in data[0].split()]\n    a = [ord(i) - 97 for i in data[1]]\n    b = [ord(i) - 97 for i in data[2]]\n    a.reverse()\n    b.reverse()\n    k = [None for i in range(n)]\n    k[0] = a[0]\n    for i in range(1, n):\n        k[i] = a[i] - a[i-1]\n        if k[i] < 0:\n            k[i] += 26\n    for i in range(n, m):\n        k.append(b[i] - a[i])\n        if k[i] < 0:\n            k[i] += 26\n    a = b[:n]\n    for i in range(n, m):\n        a.append((a[i-1] + k[i]) % 26)\n    a = a[::-1]\n    a = [chr(i + 97) for i in a]\n    print(''.join(a))\n\nif __name__ == \"__main__\":\n    main()"]