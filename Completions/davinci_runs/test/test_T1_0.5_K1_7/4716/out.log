2022-04-13 22:49:38.978682 """
Snuke has N sticks.
The length of the i-th stick is l_i.
Snuke is making a snake toy by joining K of the sticks together.
The length of the toy is represented by the sum of the individual sticks that compose it.
Find the maximum possible length of the toy.

-----Constraints-----
 - 1 \leq K \leq N \leq 50
 - 1 \leq l_i \leq 50
 - l_i is an integer.

-----Input-----
Input is given from Standard Input in the following format:
N K
l_1 l_2 l_3 ... l_{N}

-----Output-----
Print the answer.

-----Sample Input-----
5 3
1 2 3 4 5

-----Sample Output-----
12

You can make a toy of length 12 by joining the sticks of lengths 3, 4 and 5, which is the maximum possible length.
"""
2022-04-13 22:49:38.978689 --------------------------
2022-04-13 22:49:52.787294 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom itertools import combinations\n\ndef main():\n    N, K = map(int, input().split())\n    l = list(map(int, input().split()))\n\n    # \u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u63a2\u7d22\u3059\u308b\n    combs = combinations(l, K)\n    ans = 0\n    for comb in combs:\n        ans = max(ans, sum(comb))\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef get_input():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    l = [int(i) for i in sys.stdin.readline().split()]\n    return n, k, l\n\ndef main():\n    n, k, l = get_input()\n    l.sort(reverse=True)\n    print(sum(l[:k]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\n\nl.sort(reverse=True)\n\nprint(sum(l[0:k]))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort()\nprint(sum(l[-k:]))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nfrom itertools import combinations\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nans = 0\nfor c in combinations(arr, k):\n    ans = max(ans, sum(c))\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    num_sticks, num_snake = [int(i) for i in sys.stdin.readline().strip().split()]\n    sticks = [int(i) for i in sys.stdin.readline().strip().split()]\n    sticks.sort()\n\n    print(sum(sticks[num_sticks - num_snake:]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, K = map(int, input().split())\n    l = sorted(list(map(int, input().split())))\n    print(sum(l[N - K:]))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649890179,
  "id": "cmpl-4wg5rCz8qelo7enY8l6KRjJrOjuRD",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:49:52.787584 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom itertools import combinations\n\ndef main():\n    N, K = map(int, input().split())\n    l = list(map(int, input().split()))\n\n    # \u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u63a2\u7d22\u3059\u308b\n    combs = combinations(l, K)\n    ans = 0\n    for comb in combs:\n        ans = max(ans, sum(comb))\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:49:52.787622 REASON stop
2022-04-13 22:49:52.788058 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef get_input():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    l = [int(i) for i in sys.stdin.readline().split()]\n    return n, k, l\n\ndef main():\n    n, k, l = get_input()\n    l.sort(reverse=True)\n    print(sum(l[:k]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:49:52.788167 REASON stop
2022-04-13 22:49:52.788538 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\n\nl.sort(reverse=True)\n\nprint(sum(l[0:k]))"
}
2022-04-13 22:49:52.788584 REASON stop
2022-04-13 22:49:52.804473 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort()\nprint(sum(l[-k:]))"
}
2022-04-13 22:49:52.804553 REASON stop
2022-04-13 22:49:52.805819 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nfrom itertools import combinations\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nans = 0\nfor c in combinations(arr, k):\n    ans = max(ans, sum(c))\n\nprint(ans)"
}
2022-04-13 22:49:52.805888 REASON stop
2022-04-13 22:49:52.813107 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    num_sticks, num_snake = [int(i) for i in sys.stdin.readline().strip().split()]\n    sticks = [int(i) for i in sys.stdin.readline().strip().split()]\n    sticks.sort()\n\n    print(sum(sticks[num_sticks - num_snake:]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:49:52.813174 REASON stop
2022-04-13 22:49:52.813834 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, K = map(int, input().split())\n    l = sorted(list(map(int, input().split())))\n    print(sum(l[N - K:]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:49:52.813898 REASON stop
