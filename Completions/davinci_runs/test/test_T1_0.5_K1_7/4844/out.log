2022-04-13 23:40:55.755423 """
Young jedi Ivan has infiltrated in The Death Star and his task is to destroy it. In order to destroy The Death Star, he needs an array of non-negative integers $a_ i$ of length $N$ that represents the code for initiating the self-destruction of The Death Star. Ivan doesn’t have the array, but he has a piece of paper with requirements for that array, given to him by his good old friend Darth Vader.

On the paper, a square matrix of the size $N$ is written down. In that matrix $m$ in the $i$-th row and $j$-th column there is a number that is equal to bitwise and between numbers $a_ i$ and $a_ j$. Unfortunately, a lightsaber has destroyed all the fields on the matrix’s main diagonal and Ivan cannot read what is on these fields. Help Ivan to reconstruct an array for the self-destruction of The Death Star that meets the requirements of the matrix.

The solution doesn’t need to be unique, but will always exist.

-----Input-----
The first line of input contains the integer $N$ ($1 \leq N \leq 1000$), size of the matrix. Each of the following $N$ lines contains $N$ numbers $m_{ij}$ ($0 \leq m_{ij} \leq 10^9$), the elements of the matrix.

-----Output-----
The first and only line of output must contain any array of $N$ non-negative integers at most $10^9$ that meet the requirements from the task.

-----Examples-----
Sample Input 1:
3
0 1 1
1 0 1
1 1 0
Sample Output 1:
1 1 1

Sample Input 2:
5
0 0 1 1 1
0 0 2 0 2
1 2 0 1 3
1 0 1 0 1
1 2 3 1 0
Sample Output 2:
1 2 3 1 11
"""
2022-04-13 23:40:55.755438 --------------------------
2022-04-13 23:42:57.917424 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    matrix = [list(map(int, input().split())) for i in range(n)]\n    output = []\n    for i in range(n):\n        j = i+1\n        while j < n:\n            if matrix[i][j] == matrix[i][i] or matrix[i][j] == matrix[j][j]:\n                output.append(matrix[i][j])\n                break\n            j += 1\n    output.append(matrix[-1][-1])\n    print(*output)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport itertools\n\ndef main():\n    n = int(input())\n    m = [list(map(int, input().split())) for _ in range(n)]\n    a = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i] |= m[i][j]\n            a[j] |= m[i][j]\n    print(*a)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\nmatrix = []\nfor i in range(n):\n    matrix.append([int(x) for x in input().split()])\n\na = []\nfor i in range(n):\n    a.append(matrix[i][(i+1)%n])\n\nfor i in range(n):\n    for j in range(n):\n        if i != j and i != (j+1)%n:\n            a[i] = a[i] ^ matrix[i][j]\n\nprint(' '.join([str(x) for x in a]))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# N = int(input())\n# a = []\n# for i in range(N):\n#     a.append([int(x) for x in input().split()])\n#\n# for i in range(N):\n#     for j in range(N):\n#         if i == j:\n#             a[i][j] = 0\n#\n# for i in range(N):\n#     for j in range(N):\n#         if a[i][j] == 0:\n#             continue\n#         for k in range(N):\n#             if a[i][k] == a[k][j]:\n#                 a[i][j] = a[i][k]\n#                 break\n#             else:\n#                 a[i][j] = 0\n#\n# for i in range(N):\n#     for j in range(N):\n#         if a[i][j] != 0:\n#             a[i][j] = a[i][j] | a[i][i]\n#\n# for i in range(N):\n#     for j in range(N):\n#         print(a[i][j], end=\" \")\n#     print()\n\nN = int(input())\na = []\nfor i in range(N):\n    a.append([int(x) for x in input().split()])\n\nfor i in range(N):\n    for j in range(N):\n        if i == j:\n            a[i][j] = 0\n\nfor i in range(N):\n    for j in range(N):\n        if a[i][j] == 0:\n            continue\n        for k in range(N):\n            if a[i][k] == a[k][j]:\n                a[i][j] = a[i][k]\n                break\n            else:\n                a[i][j] = 0\n\nfor i in range(N):\n    for j in range(N):\n        if a[i][j] != 0:\n            a[i][j] = a[i][j] | a[i][i]\n\nfor i in range(N):\n    for j in range(N):\n        print(a[i][j], end=\" \")\n    print()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    M = []\n    for i in range(N):\n        M.append(list(map(int, sys.stdin.readline().split())))\n    A = [0] * N\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                A[i] |= M[i][j]\n    print(' '.join(map(str, A)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n#Program Code:\n\nn = int(input())\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\nresult = [0 for i in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        if i != j:\n            result[i] = matrix[i][j] | result[i]\n\nprint(*result)"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN = int(input())\nmatrix = []\nfor i in range(N):\n    matrix.append(list(map(int, input().split())))\n\ndef get_diag(matrix):\n    diag = []\n    for i in range(len(matrix)):\n        diag.append(matrix[i][i])\n    return diag\n\ndef get_row(matrix, row):\n    return matrix[row]\n\ndef get_col(matrix, col):\n    return [matrix[i][col] for i in range(len(matrix))]\n\ndef get_diag_diff(matrix, row, col):\n    diag = get_diag(matrix)\n    row = get_row(matrix, row)\n    col = get_col(matrix, col)\n    diag_diff = []\n    for i in range(len(diag)):\n        diag_diff.append(row[i] & col[i] & diag[i])\n    return diag_diff\n\ndef get_row_and_col(matrix, row, col):\n    row = get_row(matrix, row)\n    col = get_col(matrix, col)\n    row_and_col = []\n    for i in range(len(matrix)):\n        row_and_col.append(row[i] & col[i])\n    return row_and_col\n\ndef get_row_and_col_and_diag_diff(matrix, row, col):\n    row_and_col = get_row_and_col(matrix, row, col)\n    diag_diff = get_diag_diff(matrix, row, col)\n    row_and_col_and_diag_diff = []\n    for i in range(len(row_and_col)):\n        row_and_col_and_diag_diff.append(row_and_col[i] & diag_diff[i])\n    return row_and_col_and_diag_diff\n\ndef get_bits(n):\n    bits = []\n    for i in range(n.bit_length()):\n        bits.append(n & 1)\n        n >>= 1\n    return bits\n\ndef get_bit_diff(bits1, bits2):\n    bit_diff = []\n    for i in range(len(bits1)):\n        bit_diff.append(bits1[i] & bits2[i])\n    return bit_diff\n\ndef get_bit_diff_sum(bit_diff):\n    sum = 0\n    for i in range(len(bit_diff)):\n        sum += bit_diff[i] * pow(2, i)\n    return sum\n\ndef get_bit_diff_sum_list(bit_diff):\n    sum_list = []\n    for i in range(len(bit_diff)):\n        sum_list.append(get_bit_diff_sum(bit_diff[i]))\n    return sum_list\n\ndef get_bit_diff_sum_list_and_row_and_col_and_diag_diff(matrix, row, col):\n    row_and_col_and_diag_diff = get_row_and_col_and_diag_diff(matrix, row, col)\n    bit_diff_sum_list = get_bit_diff_sum_list(row_and_col_and_diag_diff)\n    return bit_diff_sum_list\n\ndef get_diff(bit_diff_sum_list, row_and_col):\n    diff = []\n    for i in range(len(bit_diff_sum_list)):\n        diff.append(row_and_col[i] - bit_diff_sum_list[i])\n    return diff\n\ndef get_diff_bit_list(diff):\n    diff_bit_list = []\n    for i in range(len(diff)):\n        diff_bit_list.append(get_bits(diff[i]))\n    return diff_bit_list\n\ndef get_diff_bit_list_and_diag_diff(diff_bit_list, diag_diff):\n    diff_bit_list_and_diag_diff = []\n    for i in range(len(diff_bit_list)):\n        diff_bit_list_and_diag_diff.append(get_bit_diff(diff_bit_list[i], diag_diff[i]))\n    return diff_bit_list_and_diag_diff\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff(bit_diff_sum_list, diff_bit_list_and_diag_diff):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff = []\n    for i in range(len(bit_diff_sum_list)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff.append(get_bit_diff(bit_diff_sum_list[i], diff_bit_list_and_diag_diff[i]))\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list(bit_diff_sum_list_and_diff_bit_list_and_diag_diff):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list.append(get_bit_diff_sum(bit_diff_sum_list_and_diff_bit_list_and_diag_diff[i]))\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list, col):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list[i] | col[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col, row):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col[i] | row[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row, diag):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row[i] | diag[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag, diag_diff):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag[i] | diag_diff[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff, bit_diff_sum_list):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff[i] | bit_diff_sum_list[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list, row_and_col):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list[i] | row_and_col[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col, diag):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col[i] | diag[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag_and"
    }
  ],
  "created": 1649893255,
  "id": "cmpl-4wgtTWr5xu5czUXNmlIhYjLAFhOP8",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 23:42:57.917900 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    matrix = [list(map(int, input().split())) for i in range(n)]\n    output = []\n    for i in range(n):\n        j = i+1\n        while j < n:\n            if matrix[i][j] == matrix[i][i] or matrix[i][j] == matrix[j][j]:\n                output.append(matrix[i][j])\n                break\n            j += 1\n    output.append(matrix[-1][-1])\n    print(*output)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:42:57.917985 REASON stop
2022-04-13 23:42:57.918340 test/intro-questions.txt_dir/4844/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4844/solutions.json'
2022-04-13 23:42:57.918362 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport itertools\n\ndef main():\n    n = int(input())\n    m = [list(map(int, input().split())) for _ in range(n)]\n    a = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i] |= m[i][j]\n            a[j] |= m[i][j]\n    print(*a)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:42:57.918503 REASON stop
2022-04-13 23:42:57.918888 test/intro-questions.txt_dir/4844/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4844/solutions.json'
2022-04-13 23:42:57.918908 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\nmatrix = []\nfor i in range(n):\n    matrix.append([int(x) for x in input().split()])\n\na = []\nfor i in range(n):\n    a.append(matrix[i][(i+1)%n])\n\nfor i in range(n):\n    for j in range(n):\n        if i != j and i != (j+1)%n:\n            a[i] = a[i] ^ matrix[i][j]\n\nprint(' '.join([str(x) for x in a]))"
}
2022-04-13 23:42:57.918978 REASON stop
2022-04-13 23:42:57.932050 test/intro-questions.txt_dir/4844/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4844/solutions.json'
2022-04-13 23:42:57.932075 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# N = int(input())\n# a = []\n# for i in range(N):\n#     a.append([int(x) for x in input().split()])\n#\n# for i in range(N):\n#     for j in range(N):\n#         if i == j:\n#             a[i][j] = 0\n#\n# for i in range(N):\n#     for j in range(N):\n#         if a[i][j] == 0:\n#             continue\n#         for k in range(N):\n#             if a[i][k] == a[k][j]:\n#                 a[i][j] = a[i][k]\n#                 break\n#             else:\n#                 a[i][j] = 0\n#\n# for i in range(N):\n#     for j in range(N):\n#         if a[i][j] != 0:\n#             a[i][j] = a[i][j] | a[i][i]\n#\n# for i in range(N):\n#     for j in range(N):\n#         print(a[i][j], end=\" \")\n#     print()\n\nN = int(input())\na = []\nfor i in range(N):\n    a.append([int(x) for x in input().split()])\n\nfor i in range(N):\n    for j in range(N):\n        if i == j:\n            a[i][j] = 0\n\nfor i in range(N):\n    for j in range(N):\n        if a[i][j] == 0:\n            continue\n        for k in range(N):\n            if a[i][k] == a[k][j]:\n                a[i][j] = a[i][k]\n                break\n            else:\n                a[i][j] = 0\n\nfor i in range(N):\n    for j in range(N):\n        if a[i][j] != 0:\n            a[i][j] = a[i][j] | a[i][i]\n\nfor i in range(N):\n    for j in range(N):\n        print(a[i][j], end=\" \")\n    print()"
}
2022-04-13 23:42:57.932151 REASON stop
2022-04-13 23:42:57.950052 test/intro-questions.txt_dir/4844/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4844/solutions.json'
2022-04-13 23:42:57.950085 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    M = []\n    for i in range(N):\n        M.append(list(map(int, sys.stdin.readline().split())))\n    A = [0] * N\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                A[i] |= M[i][j]\n    print(' '.join(map(str, A)))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:42:57.950170 REASON stop
2022-04-13 23:42:57.950918 test/intro-questions.txt_dir/4844/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4844/solutions.json'
2022-04-13 23:42:57.950946 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n#Program Code:\n\nn = int(input())\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\nresult = [0 for i in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        if i != j:\n            result[i] = matrix[i][j] | result[i]\n\nprint(*result)"
}
2022-04-13 23:42:57.951013 REASON stop
2022-04-13 23:42:57.951597 test/intro-questions.txt_dir/4844/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4844/solutions.json'
2022-04-13 23:42:57.951618 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN = int(input())\nmatrix = []\nfor i in range(N):\n    matrix.append(list(map(int, input().split())))\n\ndef get_diag(matrix):\n    diag = []\n    for i in range(len(matrix)):\n        diag.append(matrix[i][i])\n    return diag\n\ndef get_row(matrix, row):\n    return matrix[row]\n\ndef get_col(matrix, col):\n    return [matrix[i][col] for i in range(len(matrix))]\n\ndef get_diag_diff(matrix, row, col):\n    diag = get_diag(matrix)\n    row = get_row(matrix, row)\n    col = get_col(matrix, col)\n    diag_diff = []\n    for i in range(len(diag)):\n        diag_diff.append(row[i] & col[i] & diag[i])\n    return diag_diff\n\ndef get_row_and_col(matrix, row, col):\n    row = get_row(matrix, row)\n    col = get_col(matrix, col)\n    row_and_col = []\n    for i in range(len(matrix)):\n        row_and_col.append(row[i] & col[i])\n    return row_and_col\n\ndef get_row_and_col_and_diag_diff(matrix, row, col):\n    row_and_col = get_row_and_col(matrix, row, col)\n    diag_diff = get_diag_diff(matrix, row, col)\n    row_and_col_and_diag_diff = []\n    for i in range(len(row_and_col)):\n        row_and_col_and_diag_diff.append(row_and_col[i] & diag_diff[i])\n    return row_and_col_and_diag_diff\n\ndef get_bits(n):\n    bits = []\n    for i in range(n.bit_length()):\n        bits.append(n & 1)\n        n >>= 1\n    return bits\n\ndef get_bit_diff(bits1, bits2):\n    bit_diff = []\n    for i in range(len(bits1)):\n        bit_diff.append(bits1[i] & bits2[i])\n    return bit_diff\n\ndef get_bit_diff_sum(bit_diff):\n    sum = 0\n    for i in range(len(bit_diff)):\n        sum += bit_diff[i] * pow(2, i)\n    return sum\n\ndef get_bit_diff_sum_list(bit_diff):\n    sum_list = []\n    for i in range(len(bit_diff)):\n        sum_list.append(get_bit_diff_sum(bit_diff[i]))\n    return sum_list\n\ndef get_bit_diff_sum_list_and_row_and_col_and_diag_diff(matrix, row, col):\n    row_and_col_and_diag_diff = get_row_and_col_and_diag_diff(matrix, row, col)\n    bit_diff_sum_list = get_bit_diff_sum_list(row_and_col_and_diag_diff)\n    return bit_diff_sum_list\n\ndef get_diff(bit_diff_sum_list, row_and_col):\n    diff = []\n    for i in range(len(bit_diff_sum_list)):\n        diff.append(row_and_col[i] - bit_diff_sum_list[i])\n    return diff\n\ndef get_diff_bit_list(diff):\n    diff_bit_list = []\n    for i in range(len(diff)):\n        diff_bit_list.append(get_bits(diff[i]))\n    return diff_bit_list\n\ndef get_diff_bit_list_and_diag_diff(diff_bit_list, diag_diff):\n    diff_bit_list_and_diag_diff = []\n    for i in range(len(diff_bit_list)):\n        diff_bit_list_and_diag_diff.append(get_bit_diff(diff_bit_list[i], diag_diff[i]))\n    return diff_bit_list_and_diag_diff\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff(bit_diff_sum_list, diff_bit_list_and_diag_diff):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff = []\n    for i in range(len(bit_diff_sum_list)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff.append(get_bit_diff(bit_diff_sum_list[i], diff_bit_list_and_diag_diff[i]))\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list(bit_diff_sum_list_and_diff_bit_list_and_diag_diff):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list.append(get_bit_diff_sum(bit_diff_sum_list_and_diff_bit_list_and_diag_diff[i]))\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list, col):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list[i] | col[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col, row):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col[i] | row[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row, diag):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row[i] | diag[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag, diag_diff):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag[i] | diag_diff[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff, bit_diff_sum_list):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff[i] | bit_diff_sum_list[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list, row_and_col):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list[i] | row_and_col[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col, diag):\n    bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag = []\n    for i in range(len(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col)):\n        bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag.append(bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col[i] | diag[i])\n    return bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag\n\ndef get_bit_diff_sum_list_and_diff_bit_list_and_diag_diff_sum_list_and_col_and_row_and_diag_and_diag_diff_and_bit_diff_sum_list_and_row_and_col_and_diag_and"
}
2022-04-13 23:42:57.951788 REASON length
