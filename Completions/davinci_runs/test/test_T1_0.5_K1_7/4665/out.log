2022-04-13 22:34:15.310377 """
=====Function Descriptions=====
collections.namedtuple()

Basically, namedtuples are easy to create, lightweight object types.
They turn tuples into convenient containers for simple tasks.
With namedtuples, you don’t have to use integer indices for accessing members of a tuple.

Example
Code 01
>>> from collections import namedtuple
>>> Point = namedtuple('Point','x,y')
>>> pt1 = Point(1,2)
>>> pt2 = Point(3,4)
>>> dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )
>>> print dot_product
11

Code 02
>>> from collections import namedtuple
>>> Car = namedtuple('Car','Price Mileage Colour Class')
>>> xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')
>>> print xyz
Car(Price=100000, Mileage=30, Colour='Cyan', Class='Y')
>>> print xyz.Class
Y

=====Problem Statement=====
Dr. John Wesley has a spreadsheet containing a list of student's IDs, marks, class and name.
Your task is to help Dr. Wesley calculate the average marks of the students.
Average = Sum of all marks / Total students

Note:
1. Columns can be in any order. IDs, marks, class and name can be written in any order in the spreadsheet.
2. Column names are ID, MARKS, CLASS and NAME. (The spelling and case type of these names won't change.)

=====Input Format=====
The first line contains an integer N, the total number of students.
The second line contains the names of the columns in any order.
The next N lines contains the marks, IDs, name and class, under their respective column names.

=====Constraints=====
0<N≤100

=====Output Format=====
Print the average marks of the list corrected to 2 decimal places.
"""
2022-04-13 22:34:15.310390 --------------------------
2022-04-13 22:34:29.657151 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom collections import namedtuple\n\nN = int(input())\ncolumns = input().split()\n\ntotal = 0\n\nfor _ in range(N):\n    student = namedtuple('student', columns)\n    column1, column2, column3, column4 = input().split()\n    student = student(column1, column2, column3, column4)\n    total += int(student.MARKS)\n\nprint('{:.2f}'.format(total / N))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import namedtuple\n\nn = int(input())\nStudent = namedtuple('Student', input())\n\ntotal = 0\nfor _ in range(n):\n    total += int(Student(*input().split()).MARKS)\n\nprint(total / n)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\nfrom collections import namedtuple\n\nN = int(input())\ncolumns = input().split()\n\nStudent = namedtuple('Student', columns)\n\nmarks = 0\nfor i in range(N):\n    student = Student(*input().split())\n    marks += int(student.MARKS)\n\nprint(marks / N)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nfrom collections import namedtuple\n\nn = int(input())\nstudents = namedtuple('students', input())\nprint(\"{:.2f}\".format(sum([int(students._make(input().split()).MARKS) for _ in range(n)]) / n))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import namedtuple\n\nn = int(input())\ncolumns = input().split()\n\nStudent = namedtuple('Student', columns)\nmarks = [int(Student._make(input().split()).MARKS) for _ in range(n)]\nprint((sum(marks) / len(marks)))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom __future__ import division\nfrom collections import namedtuple\n\nnum_students = int(raw_input())\ncolumn_names = raw_input().split()\n\nStudent = namedtuple('Student', ' '.join(column_names))\n\ntotal_marks = 0\n\nfor i in range(num_students):\n    student_info = raw_input().split()\n    student = Student(student_info[0], student_info[1], student_info[2], student_info[3])\n    total_marks += int(student.MARKS)\n\nprint total_marks / num_students"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import namedtuple\n\nn = int(input())\ncolumns = input().split()\n\ntotal = 0\nfor i in range(n):\n    student = namedtuple('student', columns)\n    column1, column2, column3, column4 = input().split()\n    student = student(column1, column2, column3, column4)\n    total += int(student.MARKS)\n\nprint('{:.2f}'.format(total/n))"
    }
  ],
  "created": 1649889255,
  "id": "cmpl-4wfqx8fkZiSyPwirel9y0D5uFTbkT",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:34:29.657459 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom collections import namedtuple\n\nN = int(input())\ncolumns = input().split()\n\ntotal = 0\n\nfor _ in range(N):\n    student = namedtuple('student', columns)\n    column1, column2, column3, column4 = input().split()\n    student = student(column1, column2, column3, column4)\n    total += int(student.MARKS)\n\nprint('{:.2f}'.format(total / N))"
}
2022-04-13 22:34:29.657495 REASON stop
2022-04-13 22:34:29.657922 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import namedtuple\n\nn = int(input())\nStudent = namedtuple('Student', input())\n\ntotal = 0\nfor _ in range(n):\n    total += int(Student(*input().split()).MARKS)\n\nprint(total / n)"
}
2022-04-13 22:34:29.658029 REASON stop
2022-04-13 22:34:29.658402 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\nfrom collections import namedtuple\n\nN = int(input())\ncolumns = input().split()\n\nStudent = namedtuple('Student', columns)\n\nmarks = 0\nfor i in range(N):\n    student = Student(*input().split())\n    marks += int(student.MARKS)\n\nprint(marks / N)"
}
2022-04-13 22:34:29.658462 REASON stop
2022-04-13 22:34:29.679489 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nfrom collections import namedtuple\n\nn = int(input())\nstudents = namedtuple('students', input())\nprint(\"{:.2f}\".format(sum([int(students._make(input().split()).MARKS) for _ in range(n)]) / n))"
}
2022-04-13 22:34:29.679562 REASON stop
2022-04-13 22:34:29.704610 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import namedtuple\n\nn = int(input())\ncolumns = input().split()\n\nStudent = namedtuple('Student', columns)\nmarks = [int(Student._make(input().split()).MARKS) for _ in range(n)]\nprint((sum(marks) / len(marks)))"
}
2022-04-13 22:34:29.704709 REASON stop
2022-04-13 22:34:29.705462 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom __future__ import division\nfrom collections import namedtuple\n\nnum_students = int(raw_input())\ncolumn_names = raw_input().split()\n\nStudent = namedtuple('Student', ' '.join(column_names))\n\ntotal_marks = 0\n\nfor i in range(num_students):\n    student_info = raw_input().split()\n    student = Student(student_info[0], student_info[1], student_info[2], student_info[3])\n    total_marks += int(student.MARKS)\n\nprint total_marks / num_students"
}
2022-04-13 22:34:29.705521 REASON stop
2022-04-13 22:34:29.706278 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import namedtuple\n\nn = int(input())\ncolumns = input().split()\n\ntotal = 0\nfor i in range(n):\n    student = namedtuple('student', columns)\n    column1, column2, column3, column4 = input().split()\n    student = student(column1, column2, column3, column4)\n    total += int(student.MARKS)\n\nprint('{:.2f}'.format(total/n))"
}
2022-04-13 22:34:29.706376 REASON stop
