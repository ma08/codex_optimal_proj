["", "\n\nq = int(input())\nfor i in range(q):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n < k:\n        print(\"NO\")\n        continue\n    # find subsegments with odd sum\n    odd_subsegments = []\n    odd_sum = 0\n    for j in range(n):\n        odd_sum += a[j]\n        if odd_sum % 2 == 1:\n            odd_subsegments.append(j + 1)\n            odd_sum = 0\n    if len(odd_subsegments) < k:\n        print(\"NO\")\n        continue\n    print(\"YES\")\n    print(\" \".join(map(str, odd_subsegments[:k])))", "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.visited = False\n        self.left = None\n        self.right = None\n        self.parent = None\n\ndef dfs(node, currSum):\n    if node.visited:\n        return currSum\n    node.visited = True\n    currSum += node.val\n    if node.left:\n        currSum = dfs(node.left, currSum)\n    if node.right:\n        currSum = dfs(node.right, currSum)\n    return currSum\n\ndef isValid(root, k):\n    if not root:\n        return True\n    if k == 0:\n        return False\n    if not root.visited:\n        if dfs(root, 0) % 2 == 1:\n            return isValid(root.left, k - 1) and isValid(root.right, k - 1)\n        else:\n            return isValid(root.left, k) and isValid(root.right, k)\n    else:\n        return isValid(root.left, k) and isValid(root.right, k)\n\ndef split(node, k):\n    if not node:\n        return\n    if node.visited:\n        split(node.left, k)\n        split(node.right, k)\n        return\n    if dfs(node, 0) % 2 == 1:\n        node.visited = True\n        k -= 1\n        split(node.left, k)\n        split(node.right, k)\n        return\n    else:\n        split(node.left, k)\n        split(node.right, k)\n        return\n\ndef find(node, currSum):\n    if node.visited:\n        return currSum\n    currSum += node.val\n    if node.left:\n        currSum = find(node.left, currSum)\n    if node.right:\n        currSum = find(node.right, currSum)\n    return currSum\n\ndef printSplit(node, currSum, k):\n    if node.visited:\n        return\n    currSum += node.val\n    if node.left:\n        currSum = find(node.left, currSum)\n    if node.right:\n        currSum = find(node.right, currSum)\n    if currSum % 2 == 1:\n        print(node.val, end = \" \")\n        k -= 1\n        node.visited = True\n        printSplit(node.left, 0, k)\n        printSplit(node.right, 0, k)\n        return\n    else:\n        printSplit(node.left, 0, k)\n        printSplit(node.right, 0, k)\n        return\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, k = map(int, input().split())\n        arr = list(map(int, input().split()))\n        root = Node(arr[0])\n        node = root\n        for i in range(1, n):\n            node.right = Node(arr[i])\n            node.right.parent = node\n            node = node.right\n        if isValid(root, k):\n            print(\"YES\")\n            split(root, k)\n            printSplit(root, 0, k)\n            print()\n        else:\n            print(\"NO\")\n\nmain()", "\n\nimport sys\n\nq = int(sys.stdin.readline())\n\nfor _ in range(q):\n  n, k = map(int, sys.stdin.readline().split())\n  a = map(int, sys.stdin.readline().split())\n\n  acc = 0\n  res = []\n  for i in range(n):\n    acc += a[i]\n    if acc % 2 == 1:\n      res.append(i+1)\n      acc = 0\n\n  if len(res) == k and res[-1] == n:\n    print \"YES\"\n    print \" \".join(map(str, res))\n  else:\n    print \"NO\"", "\n\nimport sys\n\n# q = int(input())\n# for _ in range(q):\n#     n, k = map(int, input().split())\n#     arr = list(map(int, input().split()))\n#     odd = 0\n#     even = 0\n#     for i in range(n):\n#         if arr[i] % 2 == 0:\n#             even += 1\n#         else:\n#             odd += 1\n#     if odd < k and even < k:\n#         print(\"NO\")\n#     else:\n#         print(\"YES\")\n#         if odd >= k:\n#             for i in range(k):\n#                 print(i+1, end=\" \")\n#         else:\n#             for i in range(1, k):\n#                 print(2*i, end=\" \")\n#         print()\n\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    odd = 0\n    even = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if odd < k and even < k:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        if odd >= k:\n            for i in range(k):\n                print(i+1, end=\" \")\n        else:\n            for i in range(1, k):\n                print(2*i, end=\" \")\n        print()", "\n\n# SOLUTION\nfor _ in range(int(input())):\n    n,k = map(int,input().split())\n    arr = list(map(int,input().split()))\n    pSum = [0]*(n+1)\n    for i in range(1,n+1):\n        pSum[i] = pSum[i-1] + arr[i-1]\n    if k > n:\n        print('NO')\n    elif k == n:\n        print('YES')\n        print(*[i+1 for i in range(n)])\n    else:\n        flag = 0\n        for i in range(1,n+1):\n            if pSum[i]%2 == 1:\n                flag = 1\n                break\n        if flag == 0:\n            print('NO')\n        else:\n            print('YES')\n            for i in range(1,k):\n                print(i,end=' ')\n            print(n)"]