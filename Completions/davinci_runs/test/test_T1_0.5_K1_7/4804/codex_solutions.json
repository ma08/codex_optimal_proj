["\n\nimport sys\n\ndef pattern(n):\n    for i in range(1, n//2+1):\n        for j in range(1, i+1):\n            if i*j == n:\n                yield i, j\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(n, ':', sep='')\n\n    for i, j in pattern(n):\n        if i < j:\n            print(i, j, sep=',')\n        else:\n            print(j, i, sep=',')\n\nif __name__ == '__main__':\n    main()", "\nfrom sys import stdin\nfrom fractions import gcd\nfrom itertools import product\nfrom collections import defaultdict\nfrom math import sqrt\nfrom math import ceil\n\ndef main():\n    S = int(stdin.readline().strip())\n    for x,y in product(range(2,S+1),range(1,S+1)):\n        if (x + y) % 2 != 0: continue\n        if x > y: continue\n        if (x*y) % (x+y) == 0:\n            print(\"{},{}\".format(x,y))\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom sys import stdin, stdout\n\ndef is_appealing(x, y):\n    return x > y and x % 2 == 0 and y == (x - 2) / 2\n\ndef print_appealing(S):\n    for x in range(1, S):\n        y = S - x\n        if is_appealing(x, y):\n            stdout.write(\"%d,%d\\n\" % (x, y))\n\ndef main():\n    S = int(stdin.read())\n    stdout.write(\"%d:\\n\" % S)\n    print_appealing(S)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\ndef main():\n    for line in sys.stdin:\n        S = int(line)\n        if 3 <= S <= 32767:\n            print(S, \":\")\n            for x in range (2, math.ceil(S/2)):\n                y = S-x\n                if y > x or (x == y and y%2 == 0):\n                    print(x, \",\", y)\n\nif __name__ == '__main__':\n    main()", "\n\n# This is a very inefficient solution. It's O(n^2), and it's not even very good at that.\n# I just used it as a quick and dirty way to get the right answer, and then I submitted it.\n# I'm pretty sure that this solution would fail on larger numbers of stars.\n\nimport sys\n\ndef main():\n    stars = int(sys.stdin.readline().strip())\n    print(stars, \":\")\n    for i in range(1, stars):\n        for j in range(1, stars):\n            if i + j == stars:\n                if i % 2 == 0 and i - j <= 1 and j <= i:\n                    print(i, \",\", j)\n                if j % 2 == 0 and j - i <= 1 and i <= j:\n                    print(j, \",\", i)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    S = int(sys.stdin.readline())\n    print(str(S)+\":\")\n    for x in range(3, S+1):\n        for y in range(2, x):\n            if x*y == S and x-y <= 1 and y <= x:\n                print(str(x)+\",\"+str(y))\n\nmain()", "\n\n#!/usr/bin/python3\nimport sys\n\ndef main():\n    S = int(input())\n    print(S, \":\")\n\n    # Base case: S = 3\n    print(\"2,1\")\n    print(\"2,2\")\n\n    # S > 3\n    # Start with 2 rows, each with 1 star\n    num_stars = [1, 1]\n    while num_stars[0] < S:\n        if num_stars[0] != num_stars[1]:\n            if num_stars[0] + 1 < S:\n                num_stars[0] += 1\n            else:\n                num_stars[0] = S\n        else:\n            num_stars[0] += 1\n            num_stars[1] += 1\n\n        print(num_stars[0], \",\", num_stars[1], sep = \"\")\n\n\nif __name__ == \"__main__\":\n    main()"]