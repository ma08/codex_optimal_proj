2022-04-13 22:50:16.871733 """
Snuke loves "paper cutting": he cuts out characters from a newspaper headline and rearranges them to form another string.
He will receive a headline which contains one of the strings S_1,...,S_n tomorrow.
He is excited and already thinking of what string he will create.
Since he does not know the string on the headline yet, he is interested in strings that can be created regardless of which string the headline contains.
Find the longest string that can be created regardless of which string among S_1,...,S_n the headline contains.
If there are multiple such strings, find the lexicographically smallest one among them.

-----Constraints-----
 - 1 \leq n \leq 50
 - 1 \leq |S_i| \leq 50 for every i = 1, ..., n.
 - S_i consists of lowercase English letters (a - z) for every i = 1, ..., n.

-----Input-----
Input is given from Standard Input in the following format:
n
S_1
...
S_n

-----Output-----
Print the lexicographically smallest string among the longest strings that satisfy the condition.
If the answer is an empty string, print an empty line.

-----Sample Input-----
3
cbaa
daacc
acacac

-----Sample Output-----
aac

The strings that can be created from each of cbaa, daacc and acacac, are aa, aac, aca, caa and so forth.
Among them, aac, aca and caa are the longest, and the lexicographically smallest of these three is aac.
"""
2022-04-13 22:50:16.871741 --------------------------
2022-04-13 22:52:10.496959 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom itertools import combinations\n\nn = int(input())\ns = [input() for _ in range(n)]\n\n# \u96c6\u5408\u306e\u8981\u7d20\u3092\u5168\u3066\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u7d44\u307f\u5408\u308f\u305b\u305f\u6587\u5b57\u5217\u3092\u4f5c\u308b\n# \u305d\u306e\u6587\u5b57\u5217\u304c\u8f9e\u66f8\u9806\u306b\u6700\u3082\u5c0f\u3055\u3044\u3082\u306e\u3092\u63a2\u3059\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u91cd\u8907\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u3001\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3092\u7d5e\u308b\n# \u7d44\u307f\u5408\u308f\u305b\u306e\u6587\u5b57\u5217\u304c\u7a7a\u6587\u5b57\u5217\u3060\u3063\u305f\u5834\u5408\u306f\u3001\u7a7a\u6587\u5b57\u5217\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\n\nfor i in range(n, 0, -1):\n    for j in combinations(s, i):\n        tmp = \"\".join(j)\n        if len(set(tmp)) == len(tmp):\n            print(tmp)\n            exit()\nprint()\n\n\"\"\"\nfor i in range(n, 0, -1):\n    for j in combinations(s, i):\n        tmp = \"\".join(j)\n        if len(set(tmp)) == len(tmp):\n            print(tmp)\n            exit()\nprint()\n\"\"\"\n\n\"\"\"\nfor i in range(n, 0, -1):\n    for j in combinations(s, i):\n        tmp = \"\".join(j)\n        if len(set(tmp)) == len(tmp):\n            print(tmp)\n            exit()\nprint()\n\"\"\"\n\n\"\"\"\nfor i in range(n, 0, -1):\n    for j in combinations(s, i):\n        tmp = \"\".join(j)\n        if len(set(tmp)) == len(tmp):\n            print(tmp)\n            exit()\nprint()\n\"\"\""
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef solve(S):\n    ans = \"\"\n    for s in S:\n        if ans > s:\n            ans = ans\n        else:\n            ans = s\n    return ans\n\nif __name__ == \"__main__\":\n    n = int(input())\n    S = []\n    for _ in range(n):\n        S.append(input())\n    print(solve(S))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = [input() for i in range(n)]\n\ndef solve(s):\n    ans = \"\"\n    for i in range(len(s[0])):\n        for j in range(i + 1, len(s[0]) + 1):\n            tmp = s[0][i:j]\n            ok = True\n            for k in range(1, len(s)):\n                if tmp not in s[k]:\n                    ok = False\n                    break\n            if ok:\n                if len(tmp) > len(ans):\n                    ans = tmp\n                elif len(tmp) == len(ans):\n                    if tmp < ans:\n                        ans = tmp\n    return ans\n\nprint(solve(s))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# ---- Input ----\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(input())\n\n# ---- Main ----\n# \u5404\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_list = []\nfor i in range(n):\n    s_list.append(set(s[i]))\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_set = set()\nfor i in range(n):\n    s_set = s_set.union(s_list[i])\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306b\u5171\u901a\u3059\u308b\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_common = set()\nfor i in range(n):\n    s_common = s_common.intersection(s_list[i])\n\n# \u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\ns_other = []\nfor i in range(n):\n    s_other.append(s_list[i].difference(s_common))\n\n# \u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_other_set = set()\nfor i in range(n):\n    s_other_set = s_other_set.union(s_other[i])\n\n# \u5171\u901a\u6587\u5b57\u5217\u3068\u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_set = s_common.union(s_other_set)\n\n# \u5171\u901a\u6587\u5b57\u5217\u3068\u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u30bd\u30fc\u30c8\ns_set = sorted(s_set)\n\n# \u5171\u901a\u6587\u5b57\u5217\u3068\u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\ns_str = ''\nfor i in range(len(s_set)):\n    s_str += s_set[i]\n\n# \u5171\u901a\u6587\u5b57\u5217\u3068\u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u306e\u6587\u5b57\u5217\u3092\u51fa\u529b\nprint(s_str)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\nS = []\nfor i in range(n):\n    S.append(input())\n\nS.sort()\n\nans = \"\"\nfor i in range(len(S[0])):\n    for j in range(len(S[0]) - i + 1):\n        tmp = S[0][i:i+j]\n        if all(tmp in s for s in S):\n            if len(tmp) > len(ans):\n                ans = tmp\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\nS_list = []\nfor i in range(n):\n    S_list.append(input())\n\nS_string = ''.join(S_list)\nS_set = set(S_string)\nS_string = ''.join(sorted(S_set))\n\ndp = [[0 for j in range(len(S_string))] for i in range(len(S_string))]\n\nfor i in range(len(S_string)):\n    for j in range(i+1, len(S_string)):\n        if S_string[i] == S_string[j]:\n            dp[i][j] = dp[i][j-1] + 1\n        else:\n            dp[i][j] = dp[i][j-1]\n\nmax_value = 0\nans = []\nfor i in range(len(S_string)):\n    for j in range(i, len(S_string)):\n        if dp[i][j] > max_value:\n            max_value = dp[i][j]\n            ans = [S_string[i:j+1]]\n        elif dp[i][j] == max_value:\n            ans.append(S_string[i:j+1])\n\nprint(min(ans))"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\n\nwords = []\n\nfor i in range(n):\n    words.append(input())\n\nwords.sort()\n\n#print(words)\n\n#print(words[0])\n#print(words[1])\n\n#print(words[0][0])\n#print(words[1][0])\n\n#print(words[0][-1])\n#print(words[1][-1])\n\n#print(words[0][0] == words[1][0])\n#print(words[0][-1] == words[1][-1])\n\n#print(words[0][0] == words[1][-1])\n#print(words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1])\n#print(words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1])\n#print(words[0][0] == words[1][-1] or words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1]["
    }
  ],
  "created": 1649890217,
  "id": "cmpl-4wg6TgCqm41o1CfIylEX6oAOtjgey",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:52:10.497450 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom itertools import combinations\n\nn = int(input())\ns = [input() for _ in range(n)]\n\n# \u96c6\u5408\u306e\u8981\u7d20\u3092\u5168\u3066\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u7d44\u307f\u5408\u308f\u305b\u305f\u6587\u5b57\u5217\u3092\u4f5c\u308b\n# \u305d\u306e\u6587\u5b57\u5217\u304c\u8f9e\u66f8\u9806\u306b\u6700\u3082\u5c0f\u3055\u3044\u3082\u306e\u3092\u63a2\u3059\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u91cd\u8907\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u3001\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3092\u7d5e\u308b\n# \u7d44\u307f\u5408\u308f\u305b\u306e\u6587\u5b57\u5217\u304c\u7a7a\u6587\u5b57\u5217\u3060\u3063\u305f\u5834\u5408\u306f\u3001\u7a7a\u6587\u5b57\u5217\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\n\nfor i in range(n, 0, -1):\n    for j in combinations(s, i):\n        tmp = \"\".join(j)\n        if len(set(tmp)) == len(tmp):\n            print(tmp)\n            exit()\nprint()\n\n\"\"\"\nfor i in range(n, 0, -1):\n    for j in combinations(s, i):\n        tmp = \"\".join(j)\n        if len(set(tmp)) == len(tmp):\n            print(tmp)\n            exit()\nprint()\n\"\"\"\n\n\"\"\"\nfor i in range(n, 0, -1):\n    for j in combinations(s, i):\n        tmp = \"\".join(j)\n        if len(set(tmp)) == len(tmp):\n            print(tmp)\n            exit()\nprint()\n\"\"\"\n\n\"\"\"\nfor i in range(n, 0, -1):\n    for j in combinations(s, i):\n        tmp = \"\".join(j)\n        if len(set(tmp)) == len(tmp):\n            print(tmp)\n            exit()\nprint()\n\"\"\""
}
2022-04-13 22:52:10.497509 REASON stop
2022-04-13 22:52:10.497929 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef solve(S):\n    ans = \"\"\n    for s in S:\n        if ans > s:\n            ans = ans\n        else:\n            ans = s\n    return ans\n\nif __name__ == \"__main__\":\n    n = int(input())\n    S = []\n    for _ in range(n):\n        S.append(input())\n    print(solve(S))"
}
2022-04-13 22:52:10.498050 REASON stop
2022-04-13 22:52:10.498454 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = [input() for i in range(n)]\n\ndef solve(s):\n    ans = \"\"\n    for i in range(len(s[0])):\n        for j in range(i + 1, len(s[0]) + 1):\n            tmp = s[0][i:j]\n            ok = True\n            for k in range(1, len(s)):\n                if tmp not in s[k]:\n                    ok = False\n                    break\n            if ok:\n                if len(tmp) > len(ans):\n                    ans = tmp\n                elif len(tmp) == len(ans):\n                    if tmp < ans:\n                        ans = tmp\n    return ans\n\nprint(solve(s))"
}
2022-04-13 22:52:10.498504 REASON stop
2022-04-13 22:52:10.514935 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# ---- Input ----\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(input())\n\n# ---- Main ----\n# \u5404\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_list = []\nfor i in range(n):\n    s_list.append(set(s[i]))\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_set = set()\nfor i in range(n):\n    s_set = s_set.union(s_list[i])\n\n# \u5168\u3066\u306e\u6587\u5b57\u5217\u306b\u5171\u901a\u3059\u308b\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_common = set()\nfor i in range(n):\n    s_common = s_common.intersection(s_list[i])\n\n# \u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\ns_other = []\nfor i in range(n):\n    s_other.append(s_list[i].difference(s_common))\n\n# \u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_other_set = set()\nfor i in range(n):\n    s_other_set = s_other_set.union(s_other[i])\n\n# \u5171\u901a\u6587\u5b57\u5217\u3068\u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u4f5c\u6210\ns_set = s_common.union(s_other_set)\n\n# \u5171\u901a\u6587\u5b57\u5217\u3068\u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u3092\u30bd\u30fc\u30c8\ns_set = sorted(s_set)\n\n# \u5171\u901a\u6587\u5b57\u5217\u3068\u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\ns_str = ''\nfor i in range(len(s_set)):\n    s_str += s_set[i]\n\n# \u5171\u901a\u6587\u5b57\u5217\u3068\u5171\u901a\u6587\u5b57\u5217\u3092\u9664\u5916\u3057\u305f\u6587\u5b57\u5217\u306e\u6587\u5b57\u306e\u96c6\u5408\u306e\u6587\u5b57\u5217\u3092\u51fa\u529b\nprint(s_str)"
}
2022-04-13 22:52:10.515034 REASON stop
2022-04-13 22:52:10.539871 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\nS = []\nfor i in range(n):\n    S.append(input())\n\nS.sort()\n\nans = \"\"\nfor i in range(len(S[0])):\n    for j in range(len(S[0]) - i + 1):\n        tmp = S[0][i:i+j]\n        if all(tmp in s for s in S):\n            if len(tmp) > len(ans):\n                ans = tmp\n\nprint(ans)"
}
2022-04-13 22:52:10.539972 REASON stop
2022-04-13 22:52:10.541279 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\nS_list = []\nfor i in range(n):\n    S_list.append(input())\n\nS_string = ''.join(S_list)\nS_set = set(S_string)\nS_string = ''.join(sorted(S_set))\n\ndp = [[0 for j in range(len(S_string))] for i in range(len(S_string))]\n\nfor i in range(len(S_string)):\n    for j in range(i+1, len(S_string)):\n        if S_string[i] == S_string[j]:\n            dp[i][j] = dp[i][j-1] + 1\n        else:\n            dp[i][j] = dp[i][j-1]\n\nmax_value = 0\nans = []\nfor i in range(len(S_string)):\n    for j in range(i, len(S_string)):\n        if dp[i][j] > max_value:\n            max_value = dp[i][j]\n            ans = [S_string[i:j+1]]\n        elif dp[i][j] == max_value:\n            ans.append(S_string[i:j+1])\n\nprint(min(ans))"
}
2022-04-13 22:52:10.541379 REASON stop
2022-04-13 22:52:10.542477 6 {
  "finish_reason": "length",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\n\nwords = []\n\nfor i in range(n):\n    words.append(input())\n\nwords.sort()\n\n#print(words)\n\n#print(words[0])\n#print(words[1])\n\n#print(words[0][0])\n#print(words[1][0])\n\n#print(words[0][-1])\n#print(words[1][-1])\n\n#print(words[0][0] == words[1][0])\n#print(words[0][-1] == words[1][-1])\n\n#print(words[0][0] == words[1][-1])\n#print(words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1])\n#print(words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1])\n#print(words[0][0] == words[1][-1] or words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1])\n\n#print(words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1][0] or words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] or words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] or words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][0] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] or words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][0] and words[0][-1] == words[1][-1] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0] and words[0][0] == words[1][-1] and words[0][-1] == words[1][0])\n\n#print(words[0][0] == words[1]["
}
2022-04-13 22:52:10.542603 REASON length
