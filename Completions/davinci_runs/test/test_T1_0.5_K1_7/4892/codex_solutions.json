["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    guess_list = []\n    for i in range(n):\n        guess_list.append(sys.stdin.readline().strip().split())\n    guess_list.sort(key=lambda x: float(x[1]), reverse=True)\n    guess_list = [x[1] for x in guess_list]\n    total = 0\n    for i in range(len(guess_list)):\n        total += (i+1)*float(guess_list[i])\n    print(total)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]))\n    passwords.reverse()\n    total = 0\n    for i in range(n):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().split(' '))\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n\n    num_attempts = 0\n    for i in range(n):\n        num_attempts += (i+1)*float(passwords[i][1])\n\n    print('{0:.4f}'.format(num_attempts))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    expected = 0\n    for i in range(n):\n        expected += (i+1)*float(passwords[i][1])\n    print(\"{:.4f}\".format(expected))\n\nmain()", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    passwords = {}\n    for i in range(N):\n        password, probability = sys.stdin.readline().strip().split()\n        passwords[password] = float(probability)\n\n    # sort the passwords by probability\n    sorted_passwords = sorted(passwords.items(), key=lambda x: x[1], reverse=True)\n\n    # calculate the expected number of attempts\n    expected_attempts = 0\n    for i in range(len(sorted_passwords)):\n        expected_attempts += (i+1)*sorted_passwords[i][1]\n\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom sys import stdin\nfrom heapq import heappush, heappop\n\ndef main():\n    passwords = []\n    for line in stdin:\n        line = line.split()\n        heappush(passwords, (float(line[1]), line[0]))\n\n    attempts = 0\n    while passwords:\n        p = heappop(passwords)[0]\n        attempts += p * (1 + attempts)\n    print(attempts)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for _ in range(n):\n        passwords.append(sys.stdin.readline().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    expected = 0\n    for i in range(n):\n        expected += (i + 1) * float(passwords[i][1])\n    print(expected)\n\nif __name__ == '__main__':\n    main()"]