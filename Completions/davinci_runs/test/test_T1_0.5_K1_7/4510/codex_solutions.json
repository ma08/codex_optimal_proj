["\n\ndef main():\n    \"\"\"\n    Solution to the problem\n    \"\"\"\n    # Get the input\n    input_numbers = input()\n    n, k = [int(x) for x in input_numbers.split()]\n    input_ids = input()\n    ids = [int(x) for x in input_ids.split()]\n\n    # Solution\n    conversation_list = []\n    for id_x in ids:\n        if id_x in conversation_list:\n            continue\n        else:\n            conversation_list.insert(0, id_x)\n            if len(conversation_list) > k:\n                conversation_list.pop()\n    print(len(conversation_list))\n    print(\" \".join([str(x) for x in conversation_list]))\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport collections\n\nn, k = list(map(int, sys.stdin.readline().split()))\nids = list(map(int, sys.stdin.readline().split()))\n\n# print(n, k, ids)\n\n# use a deque to keep track of the most recent k conversations\n# if the deque is full, pop the last one\n# if the deque is not full, append the new id to the front\n# if the deque is full and the id is already in the deque, do nothing\n# if the deque is full and the id is not in the deque, pop the last one, append the new id to the front\n\n# O(n*k) time\n# O(k) space\n\n# def solution(n, k, ids):\n#     deque = collections.deque()\n#     for id in ids:\n#         if id in deque:\n#             continue\n#         if len(deque) == k:\n#             deque.pop()\n#         deque.appendleft(id)\n#     return list(deque)\n\n# O(n) time\n# O(k) space\n\ndef solution(n, k, ids):\n    deque = collections.deque()\n    freq_dict = {}\n    for id in ids:\n        if id in freq_dict:\n            freq_dict[id] += 1\n            continue\n        if len(deque) == k:\n            last_id = deque.pop()\n            freq_dict[last_id] -= 1\n            if freq_dict[last_id] == 0:\n                del freq_dict[last_id]\n        freq_dict[id] = 1\n        deque.appendleft(id)\n    return list(deque)\n\nprint(len(solution(n, k, ids)))\nprint(' '.join(map(str, solution(n, k, ids))))", "\n\nn, k = map(int, input().split())\nid_i = list(map(int, input().split()))\n\nconversations = []\n\nfor i in id_i:\n  if i not in conversations:\n    if len(conversations) == k:\n      conversations.pop(0)\n\n    conversations.append(i)\n\nprint(len(conversations))\nfor i in conversations:\n  print(i, end=' ')", "\n\nn, k = input().split()\nn, k = int(n), int(k)\nid = list(map(int, input().split()))\n\nstack = []\nfor i in range(n):\n    if id[i] not in stack:\n        if len(stack) == k:\n            stack.pop()\n        stack.insert(0, id[i])\nprint(len(stack))\nprint(*stack)", "\n\ndef main():\n    n, k = map(int, input().split())\n    ids = list(map(int, input().split()))\n    print(len(set(ids[:k])))\n    print(*sorted(set(ids[:k])))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, k = map(int, input().split())\n    ids = list(map(int, input().split()))\n    ids_set = set()\n    ans = []\n    for id in ids:\n        if id not in ids_set:\n            if len(ans) == k:\n                ans.pop()\n            ans.insert(0, id)\n            ids_set.add(id)\n    print(len(ans))\n    print(*ans)\n\n\nif __name__ == '__main__':\n    main()"]