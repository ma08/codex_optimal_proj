["\n\n\ndef main():\n    name, parent = input().split()\n    if name[-2:] == 'ex':\n        print(name+parent)\n    elif name[-1] == 'e':\n        print(name[:-1]+'x'+parent)\n    else:\n        print(name[:-1]+'ex'+parent)\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    # Read the input\n    Y, P = sys.stdin.read().split()\n    # Get the length of Y\n    l = len(Y)\n    # Get the last character of Y\n    c = Y[l-1]\n    # If Y ends with e, then the extended name is Y+x+P\n    if c == 'e':\n        print(Y + 'x' + P)\n    # If Y ends with any other vowel (a,i,o, or u), we remove that final vowel from Y, and then extend Y with ex+P\n    elif c in ['a', 'i', 'o', 'u']:\n        print(Y[0:l-1] + 'ex' + P)\n    # If Y already ends with ex, then the extended name is simply Y+P\n    elif c == 'x' and Y[l-2] == 'e':\n        print(Y + P)\n    # Otherwise, the extended name is Y+ex+P\n    else:\n        print(Y + 'ex' + P)\n\n# This is the standard boilerplate that calls the main() function.\nif __name__ == '__main__':\n    main()", "\n\ndef extended_name(y, p):\n    if y[-2:] == 'ex':\n        return y + p\n    elif y[-1] == 'e':\n        return y + 'x' + p\n    elif y[-1] in 'aiou':\n        return y[:-1] + 'ex' + p\n    else:\n        return y + 'ex' + p\n\ny, p = raw_input().split()\nprint extended_name(y, p)", "\n\nimport sys\n\ndef main():\n    inp = sys.stdin.read().split()\n    y, p = inp[0], inp[1]\n    if y[-2:] == \"ex\":\n        print(y+p)\n    elif y[-1] == \"e\":\n        print(y[:-1]+\"x\"+p)\n    elif y[-1] in \"aiou\":\n        print(y[:-1]+\"ex\"+p)\n    else:\n        print(y+\"ex\"+p)\n\nif __name__ == \"__main__\":\n    main()", "\n\ny, p = input().split()\n\nif y[-1] == 'e':\n    print(y + 'x' + p)\nelif y[-1] in 'aiou':\n    print(y[:-1] + 'ex' + p)\nelif y[-2:] == 'ex':\n    print(y + p)", "\n\n# Solution\n\ny, p = input().split()\n\nif y[-1] == 'e':\n    print(y + 'x' + p)\nelif y[-1] in 'aiou':\n    print(y[:-1] + 'ex' + p)\nelif y[-2:] == 'ex':\n    print(y + p)", "\n\nY, P = input().split()\nif Y[-1] == \"e\":\n    print(Y + \"x\" + P)\nelif Y[-1] in [\"a\", \"i\", \"o\", \"u\"]:\n    print(Y[:-1] + \"ex\" + P)\nelif Y[-2:] == \"ex\":\n    print(Y + P)"]