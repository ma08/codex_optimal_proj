2022-04-13 22:15:12.448401 """
You are given a positive integer $n$. In one move, you can increase $n$ by one (i.e. make $n := n + 1$). Your task is to find the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 2 \cdot 10^4$) â€” the number of test cases. Then $t$ test cases follow.

The only line of the test case contains two integers $n$ and $s$ ($1 \le n \le 10^{18}$; $1 \le s \le 162$).


-----Output-----

For each test case, print the answer: the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.


-----Example-----
Input
5
2 1
1 1
500 4
217871987498122 10
100000000000000001 1

Output
8
0
500
2128012501878
899999999999999999
"""
2022-04-13 22:15:12.448413 --------------------------
2022-04-13 22:15:31.690354 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    Iterate through test cases, for each test case print the number of moves required to get to the target sum of digits\n    \"\"\"\n    t = int(input())\n    for _ in range(t):\n        n, s = [int(i) for i in input().split()]\n        moves = 0\n        while sum([int(i) for i in str(n)]) > s:\n            n += 1\n            moves += 1\n        print(moves)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# SOLUTION\ntestCases = int(input())\n\nfor i in range(testCases):\n    n, s = map(int, input().split())\n    sumOfDigits = sum(map(int, str(n)))\n\n    if sumOfDigits > s:\n        print(sumOfDigits - s + n)\n    else:\n        print(n)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\n#!/usr/bin/python3\n\nimport sys\n\ndef main():\n\n    num = int(input())\n    for i in range(num):\n        n, s = map(int, input().split())\n        if n == 1:\n            print(0)\n        else:\n            num_of_moves = 0\n            while get_sum_of_digits(n) > s:\n                num_of_moves += 1\n                n += 1\n            print(num_of_moves)\n\ndef get_sum_of_digits(n):\n    sum_of_digits = 0\n    while n != 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nfor _ in range(int(input())):\n    n, s = map(int, input().split())\n    t = sum(map(int, str(n)))\n    print(max(0, (s - t) + 9 * len(str(n))))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef is_possible(n, s):\n    if n == 0:\n        return True\n    elif s <= 0:\n        return False\n    else:\n        return is_possible(n // 10, s - n % 10)\n\ndef solve(n, s):\n    moves = 0\n    while not is_possible(n, s):\n        n += 1\n        moves += 1\n    return moves\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n, s = map(int, input().split())\n        print(solve(n, s))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split())\n    res = 0\n    while n > 0:\n        d = n % 10\n        if d > s:\n            res += 10 - d\n            n += 10 - d\n        s -= d\n        n //= 10\n    print(res)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n,s) = map(int, input().split())\n        print(calc(n,s))\n\ndef calc(n,s):\n    if n <= s:\n        return 0\n    else:\n        n_sum = sum_of_digits(n)\n        if n_sum <= s:\n            return 0\n        else:\n            return 1 + calc(n+1,s)\n\ndef sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649888112,
  "id": "cmpl-4wfYWLK5spSBZhvbxyGVMk1xm17vv",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:15:31.690625 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    Iterate through test cases, for each test case print the number of moves required to get to the target sum of digits\n    \"\"\"\n    t = int(input())\n    for _ in range(t):\n        n, s = [int(i) for i in input().split()]\n        moves = 0\n        while sum([int(i) for i in str(n)]) > s:\n            n += 1\n            moves += 1\n        print(moves)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 22:15:31.690663 REASON stop
2022-04-13 22:15:31.691102 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# SOLUTION\ntestCases = int(input())\n\nfor i in range(testCases):\n    n, s = map(int, input().split())\n    sumOfDigits = sum(map(int, str(n)))\n\n    if sumOfDigits > s:\n        print(sumOfDigits - s + n)\n    else:\n        print(n)"
}
2022-04-13 22:15:31.691211 REASON stop
2022-04-13 22:15:31.691575 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\n#!/usr/bin/python3\n\nimport sys\n\ndef main():\n\n    num = int(input())\n    for i in range(num):\n        n, s = map(int, input().split())\n        if n == 1:\n            print(0)\n        else:\n            num_of_moves = 0\n            while get_sum_of_digits(n) > s:\n                num_of_moves += 1\n                n += 1\n            print(num_of_moves)\n\ndef get_sum_of_digits(n):\n    sum_of_digits = 0\n    while n != 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:15:31.691620 REASON stop
2022-04-13 22:15:31.706854 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nfor _ in range(int(input())):\n    n, s = map(int, input().split())\n    t = sum(map(int, str(n)))\n    print(max(0, (s - t) + 9 * len(str(n))))"
}
2022-04-13 22:15:31.706945 REASON stop
2022-04-13 22:15:31.728364 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef is_possible(n, s):\n    if n == 0:\n        return True\n    elif s <= 0:\n        return False\n    else:\n        return is_possible(n // 10, s - n % 10)\n\ndef solve(n, s):\n    moves = 0\n    while not is_possible(n, s):\n        n += 1\n        moves += 1\n    return moves\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n, s = map(int, input().split())\n        print(solve(n, s))"
}
2022-04-13 22:15:31.728468 REASON stop
2022-04-13 22:15:31.729029 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split())\n    res = 0\n    while n > 0:\n        d = n % 10\n        if d > s:\n            res += 10 - d\n            n += 10 - d\n        s -= d\n        n //= 10\n    print(res)"
}
2022-04-13 22:15:31.729092 REASON stop
2022-04-13 22:15:31.729742 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n,s) = map(int, input().split())\n        print(calc(n,s))\n\ndef calc(n,s):\n    if n <= s:\n        return 0\n    else:\n        n_sum = sum_of_digits(n)\n        if n_sum <= s:\n            return 0\n        else:\n            return 1 + calc(n+1,s)\n\ndef sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 22:15:31.729797 REASON stop
