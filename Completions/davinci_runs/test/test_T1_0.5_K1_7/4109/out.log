2022-04-13 18:20:50.259803 """
Takahashi, who is a novice in competitive programming, wants to learn M algorithms.
Initially, his understanding level of each of the M algorithms is 0.
Takahashi is visiting a bookstore, where he finds N books on algorithms.
The i-th book (1\leq i\leq N) is sold for C_i yen (the currency of Japan). If he buys and reads it, his understanding level of the j-th algorithm will increase by A_{i,j} for each j (1\leq j\leq M).
There is no other way to increase the understanding levels of the algorithms.
Takahashi's objective is to make his understanding levels of all the M algorithms X or higher. Determine whether this objective is achievable. If it is achievable, find the minimum amount of money needed to achieve it.


"""
2022-04-13 18:20:50.259812 --------------------------
2022-04-13 18:21:08.166626 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN, M, X = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(N)]\nC = [int(input()) for _ in range(N)]\n\nans = float('inf')\nfor i in range(2 ** N):\n    money = 0\n    algo = [0] * M\n    for j in range(N):\n        if i >> j & 1:\n            for k in range(M):\n                algo[k] += A[j][k]\n            money += C[j]\n    if min(algo) >= X:\n        ans = min(ans, money)\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n,m,x = map(int,input().split())\n    c = []\n    a = []\n    for _ in range(n):\n        c_i = int(input())\n        a_i = list(map(int,input().split()))\n        c.append(c_i)\n        a.append(a_i)\n    #print(c)\n    #print(a)\n    ans = 10**18\n    for bit in range(1<<n):\n        #print(bit)\n        l = [0]*m\n        cost = 0\n        for i in range(n):\n            if (bit>>i)&1:\n                cost+=c[i]\n                for j in range(m):\n                    l[j]+=a[i][j]\n        #print(l)\n        if all([i>=x for i in l]):\n            ans = min(ans,cost)\n    if ans == 10**18:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    dp = [10 ** 10] * (2 ** m)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(2 ** m):\n            dp[j | a[i]] = min(dp[j | a[i]], dp[j] + c[i])\n    if dp[-1] == 10 ** 10:\n        print(-1)\n    else:\n        print(dp[-1])\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nN,M,X = map(int,input().split())\n\nA = []\nC = []\nfor _ in range(N):\n    c,*a = map(int,input().split())\n    C.append(c)\n    A.append(a)\n\nINF = 10**18\ndp = [[INF]*(X+1) for _ in range(M)]\n\nfor i in range(N):\n    for j in range(M):\n        if A[i][j] == 0:\n            continue\n        for k in range(X):\n            dp[j][k+A[i][j]] = min(dp[j][k+A[i][j]],dp[j][k]+C[i])\n\nif min(dp[j][X] for j in range(M)) == INF:\n    print(-1)\nelse:\n    print(sum(dp[j][X] for j in range(M)))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N,M,X = list(map(int,sys.stdin.readline().split()))\n    A = [list(map(int,sys.stdin.readline().split())) for _ in range(N)]\n    C = list(map(int,sys.stdin.readline().split()))\n\n    ans = 10**10\n    for i in range(2**N):\n        cost = 0\n        a = [0]*M\n        for j in range(N):\n            if (i>>j)&1:\n                cost += C[j]\n                for k in range(M):\n                    a[k] += A[j][k]\n        if all([x>=X for x in a]):\n            ans = min(ans,cost)\n\n    if ans == 10**10:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN,M=map(int,input().split())\nA=[]\nC=[]\nfor i in range(N):\n    x=list(map(int,input().split()))\n    A.append(x[:-1])\n    C.append(x[-1])\n    \n    \n    \n    \n\nX=list(map(int,input().split()))\n\n#print(A,C,X)\n\nINF=10**9\n\ndp=[[INF]*(M+1) for i in range(N+1)]\ndp[0][0]=0\n\nfor i in range(N):\n    for j in range(M):\n        if A[i][j]==0:\n            dp[i+1][j+1]=dp[i][j+1]\n        else:\n            dp[i+1][j+1]=min(dp[i+1][j+1],dp[i][j]+C[i])\n        dp[i+1][j+1]=min(dp[i+1][j+1],dp[i][j+1])\n\nif dp[N][M]==INF:\n    print(-1)\nelse:\n    print(dp[N][M])"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport heapq\nimport sys\ninput = sys.stdin.readline\n\ndef dijkstra(s):\n    # (\u6700\u77ed\u8ddd\u96e2, \u76f4\u524d\u306e\u9802\u70b9, \u9802\u70b9)\n    d = [(float('inf'), None, s)]\n    while d:\n        dist, prev, cur = heapq.heappop(d)\n        if dist > dist_from[cur]:\n            continue\n        for nxt, cost in graph[cur]:\n            alt = dist + cost\n            if alt < dist_from[nxt]:\n                dist_from[nxt] = alt\n                heapq.heappush(d, (alt, cur, nxt))\n\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n+1)]\ndist_from = [float('inf')] * (n+1)\nfor i in range(1, n+1):\n    c, *a = map(int, input().split())\n    for j in range(m):\n        graph[i].append((n+1+j, c*(a[j]-1)))\n    graph[0].append((i, c))\nfor i in range(m):\n    graph[n+1+i].append((n+m+1, 0))\n\ndijkstra(0)\nif dist_from[n+m+1] == float('inf'):\n    print(-1)\nelse:\n    print(dist_from[n+m+1])"
    }
  ],
  "created": 1649874050,
  "id": "cmpl-4wbtiTZfJB8mSlBzQU3nPJYyZXCtR",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:21:08.166923 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN, M, X = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(N)]\nC = [int(input()) for _ in range(N)]\n\nans = float('inf')\nfor i in range(2 ** N):\n    money = 0\n    algo = [0] * M\n    for j in range(N):\n        if i >> j & 1:\n            for k in range(M):\n                algo[k] += A[j][k]\n            money += C[j]\n    if min(algo) >= X:\n        ans = min(ans, money)\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)"
}
2022-04-13 18:21:08.166960 REASON stop
2022-04-13 18:21:08.167558 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n,m,x = map(int,input().split())\n    c = []\n    a = []\n    for _ in range(n):\n        c_i = int(input())\n        a_i = list(map(int,input().split()))\n        c.append(c_i)\n        a.append(a_i)\n    #print(c)\n    #print(a)\n    ans = 10**18\n    for bit in range(1<<n):\n        #print(bit)\n        l = [0]*m\n        cost = 0\n        for i in range(n):\n            if (bit>>i)&1:\n                cost+=c[i]\n                for j in range(m):\n                    l[j]+=a[i][j]\n        #print(l)\n        if all([i>=x for i in l]):\n            ans = min(ans,cost)\n    if ans == 10**18:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:21:08.167684 REASON stop
2022-04-13 18:21:08.168198 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    dp = [10 ** 10] * (2 ** m)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(2 ** m):\n            dp[j | a[i]] = min(dp[j | a[i]], dp[j] + c[i])\n    if dp[-1] == 10 ** 10:\n        print(-1)\n    else:\n        print(dp[-1])\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:21:08.168253 REASON stop
2022-04-13 18:21:08.184417 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nN,M,X = map(int,input().split())\n\nA = []\nC = []\nfor _ in range(N):\n    c,*a = map(int,input().split())\n    C.append(c)\n    A.append(a)\n\nINF = 10**18\ndp = [[INF]*(X+1) for _ in range(M)]\n\nfor i in range(N):\n    for j in range(M):\n        if A[i][j] == 0:\n            continue\n        for k in range(X):\n            dp[j][k+A[i][j]] = min(dp[j][k+A[i][j]],dp[j][k]+C[i])\n\nif min(dp[j][X] for j in range(M)) == INF:\n    print(-1)\nelse:\n    print(sum(dp[j][X] for j in range(M)))"
}
2022-04-13 18:21:08.184540 REASON stop
2022-04-13 18:21:08.204246 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N,M,X = list(map(int,sys.stdin.readline().split()))\n    A = [list(map(int,sys.stdin.readline().split())) for _ in range(N)]\n    C = list(map(int,sys.stdin.readline().split()))\n\n    ans = 10**10\n    for i in range(2**N):\n        cost = 0\n        a = [0]*M\n        for j in range(N):\n            if (i>>j)&1:\n                cost += C[j]\n                for k in range(M):\n                    a[k] += A[j][k]\n        if all([x>=X for x in a]):\n            ans = min(ans,cost)\n\n    if ans == 10**10:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:21:08.204363 REASON stop
2022-04-13 18:21:08.205382 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN,M=map(int,input().split())\nA=[]\nC=[]\nfor i in range(N):\n    x=list(map(int,input().split()))\n    A.append(x[:-1])\n    C.append(x[-1])\n    \n    \n    \n    \n\nX=list(map(int,input().split()))\n\n#print(A,C,X)\n\nINF=10**9\n\ndp=[[INF]*(M+1) for i in range(N+1)]\ndp[0][0]=0\n\nfor i in range(N):\n    for j in range(M):\n        if A[i][j]==0:\n            dp[i+1][j+1]=dp[i][j+1]\n        else:\n            dp[i+1][j+1]=min(dp[i+1][j+1],dp[i][j]+C[i])\n        dp[i+1][j+1]=min(dp[i+1][j+1],dp[i][j+1])\n\nif dp[N][M]==INF:\n    print(-1)\nelse:\n    print(dp[N][M])"
}
2022-04-13 18:21:08.205465 REASON stop
2022-04-13 18:21:08.206439 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport heapq\nimport sys\ninput = sys.stdin.readline\n\ndef dijkstra(s):\n    # (\u6700\u77ed\u8ddd\u96e2, \u76f4\u524d\u306e\u9802\u70b9, \u9802\u70b9)\n    d = [(float('inf'), None, s)]\n    while d:\n        dist, prev, cur = heapq.heappop(d)\n        if dist > dist_from[cur]:\n            continue\n        for nxt, cost in graph[cur]:\n            alt = dist + cost\n            if alt < dist_from[nxt]:\n                dist_from[nxt] = alt\n                heapq.heappush(d, (alt, cur, nxt))\n\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n+1)]\ndist_from = [float('inf')] * (n+1)\nfor i in range(1, n+1):\n    c, *a = map(int, input().split())\n    for j in range(m):\n        graph[i].append((n+1+j, c*(a[j]-1)))\n    graph[0].append((i, c))\nfor i in range(m):\n    graph[n+1+i].append((n+m+1, 0))\n\ndijkstra(0)\nif dist_from[n+m+1] == float('inf'):\n    print(-1)\nelse:\n    print(dist_from[n+m+1])"
}
2022-04-13 18:21:08.206511 REASON stop
