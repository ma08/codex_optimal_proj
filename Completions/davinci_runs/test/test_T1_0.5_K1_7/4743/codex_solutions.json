["\n\nimport sys\nimport math\n\ndef find_nearest_vowel(word):\n    for i in range(len(word)):\n        if word[i] in \"aeiou\":\n            return i\n    return -1\n\ndef find_nearest_consonant(word):\n    for i in range(len(word)):\n        if word[i] not in \"aeiou\":\n            return i\n    return -1\n\ndef find_nearest_hard_consonant(word):\n    for i in range(len(word)):\n        if word[i] in \"bcdfghjklmnpqrstvwxyz\":\n            return i\n    return -1\n\ndef find_nearest_soft_consonant(word):\n    for i in range(len(word)):\n        if word[i] in \"aeiou\":\n            return i\n    return -1\n\ndef translate_word(word):\n    if word == \"Each\":\n        return \"Dach\"\n    else:\n        first_hard_consonant_index = find_nearest_hard_consonant(word)\n        if first_hard_consonant_index != -1:\n            word = word[:first_hard_consonant_index] + word[first_hard_consonant_index].replace(\"b\", \"c\").replace(\"c\", \"d\").replace(\"d\", \"g\").replace(\"g\", \"k\").replace(\"k\", \"n\").replace(\"n\", \"p\").replace(\"p\", \"t\").replace(\"t\", \"b\") + word[first_hard_consonant_index + 1:]\n            word = word[:first_hard_consonant_index + 1] + word[first_hard_consonant_index + 1:].replace(\"b\", \"c\").replace(\"c\", \"d\").replace(\"d\", \"g\").replace(\"g\", \"k\").replace(\"k\", \"n\").replace(\"n\", \"p\").replace(\"p\", \"t\").replace(\"t\", \"b\")\n            last_hard_consonant_index = find_nearest_hard_consonant(word[first_hard_consonant_index:])\n            if last_hard_consonant_index != -1:\n                last_hard_consonant_index += first_hard_consonant_index\n                word = word[:last_hard_consonant_index] + word[last_hard_consonant_index].replace(\"b\", \"c\").replace(\"c\", \"d\").replace(\"d\", \"g\").replace(\"g\", \"k\").replace(\"k\", \"n\").replace(\"n\", \"p\").replace(\"p\", \"t\").replace(\"t\", \"b\") + word[last_hard_consonant_index + 1:]\n                word = word[:last_hard_consonant_index + 1] + word[last_hard_consonant_index + 1:].replace(\"b\", \"c\").replace(\"c\", \"d\").replace(\"d\", \"g\").replace(\"g\", \"k\").replace(\"k\", \"n\").replace(\"n\", \"p\").replace(\"p\", \"t\").replace(\"t\", \"b\")\n                last_hard_consonant_index = find_nearest_hard_consonant(word[first_hard_consonant_index:])\n                if last_hard_consonant_index != -1:\n                    last_hard_consonant_index += first_hard_consonant_index\n                    last_soft_consonant_index = find_nearest_soft_consonant(word[last_hard_consonant_index:])\n                    if last_soft_consonant_index != -1:\n                        last_soft_consonant_index += last_hard_consonant_index\n                        last_soft_consonant_letter = word[last_soft_consonant_index]\n                        if last_soft_consonant_letter < \"a\":\n                            word = word[:last_soft_consonant_index] + \"ah\" + word[last_soft_consonant_index + 1:]\n                        elif last_soft_consonant_letter < \"o\":\n                            word = word[:last_soft_consonant_index] + \"oh\" + word[last_soft_consonant_index + 1:]\n                        else:\n                            word = word[:last_soft_consonant_index] + \"uh\" + word[last_soft_consonant_index + 1:]\n                    else:\n                        word = word[:last_hard_consonant_index] + \"ah\" + word[last_hard_consonant_index + 1:]\n                else:\n                    word = word[:first_hard_consonant_index] + \"ah\" + word[first_hard_consonant_index + 1:]\n            else:\n                word = word[:first_hard_consonant_index] + \"ah\" + word[first_hard_consonant_index + 1:]\n        else:\n            word = word[:first_hard_consonant_index] + \"ah\" + word[first_hard_consonant_index + 1:]\n    return word\n\ndef main():\n    sentence = sys.stdin.readline().strip()\n    words = sentence.split()\n    translated_words = [translate_word(word) for word in words]\n    print(\" \".join(translated_words))\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom collections import deque\n\ndef translate(word):\n    word = deque(word)\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowels = 'aeiou'\n    first = word.popleft()\n    if first.lower() == 'e':\n        word.appendleft('d')\n        word.appendleft('a')\n        word.appendleft('c')\n        word.appendleft('h')\n    else:\n        if first.lower() in consonants:\n            word.appendleft(consonants[consonants.index(first.lower())-1])\n        else:\n            word.appendleft(first)\n    for i in range(len(word)):\n        if word[i].lower() in consonants:\n            if word[i-1].lower() in consonants:\n                word[i] = word[i-1].lower()\n    if word[-1].lower() in consonants:\n        if word[-1].lower() == 'a':\n            word.append('h')\n        elif word[-1].lower() == 'o':\n            word.append('h')\n        elif word[-1].lower() == 'u':\n            word.append('h')\n        elif word[-1].lower() == 'c':\n            word.append('c')\n            word.append('c')\n            word.append('a')\n            word.append('h')\n        elif word[-1].lower() == 'b':\n            word.append('a')\n            word.append('h')\n        elif word[-1].lower() == 'd':\n            word.append('a')\n            word.append('h')\n        elif word[-1].lower() == 'f':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'g':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'h':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'j':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'k':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'l':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'm':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'n':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'p':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'q':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'r':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 's':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 't':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'v':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'w':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'x':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'y':\n            word.append('e')\n            word.append('h')\n        elif word[-1].lower() == 'z':\n            word.append('e')\n            word.append('h')\n    return ''.join(word)\n\nsentence = input().split(' ')\nnimionese = []\nfor word in sentence:\n    nimionese.append(translate(word))\nprint(' '.join(nimionese))", "\n\nimport sys\n\ndef nimionese(word):\n    first_letter = word[0]\n    if first_letter in ['b', 'c', 'd', 'g', 'k', 'p', 't']:\n        word = 'H' + word[1:]\n    elif first_letter in ['f', 'h', 'j', 'l', 'm', 'n', 'r', 's', 'v', 'w', 'x', 'z']:\n        word = 'G' + word[1:]\n    elif first_letter == 'a':\n        word = 'H' + word[1:]\n    elif first_letter == 'e':\n        word = 'D' + word[1:]\n    elif first_letter == 'i':\n        word = 'G' + word[1:]\n    elif first_letter == 'o':\n        word = 'K' + word[1:]\n    elif first_letter == 'u':\n        word = 'K' + word[1:]\n    elif first_letter == 'y':\n        word = 'G' + word[1:]\n    word = word.replace('each', 'Dach')\n    word = word.replace('-', '')\n    word = word.replace(first_letter, 'H')\n    last_letter = word[-1]\n    if last_letter in ['b', 'c', 'd', 'g', 'k', 'p', 't']:\n        word += 'ah'\n    elif last_letter in ['f', 'h', 'j', 'l', 'm', 'n', 'r', 's', 'v', 'w', 'x', 'z']:\n        word += 'oh'\n    elif last_letter == 'a':\n        word += 'ah'\n    elif last_letter == 'e':\n        word += 'oh'\n    elif last_letter == 'i':\n        word += 'oh'\n    elif last_letter == 'o':\n        word += 'oh'\n    elif last_letter == 'u':\n        word += 'uh'\n    elif last_letter == 'y':\n        word += 'oh'\n    return word\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    sentence = sys.stdin.readline().strip()\n    words = sentence.split(' ')\n    print(' '.join([nimionese(word) for word in words]))\n\nif __name__ == \"__main__\":\n    main('nimionese')", "\n\nimport sys\nimport math\n\ndef is_vowel(char):\n    if char in ('a', 'e', 'i', 'o', 'u', 'y'):\n        return True\n    return False\n\ndef is_hard_consonant(char):\n    if char in ('b', 'c', 'd', 'g', 'k', 'n', 'p', 't'):\n        return True\n    return False\n\ndef replace_first_letter(char):\n    if char == 'a':\n        return 'b'\n    elif char == 'b':\n        return 'c'\n    elif char == 'c':\n        return 'd'\n    elif char == 'd':\n        return 'g'\n    elif char == 'e':\n        return 'g'\n    elif char == 'f':\n        return 'g'\n    elif char == 'g':\n        return 'k'\n    elif char == 'h':\n        return 'k'\n    elif char == 'i':\n        return 'k'\n    elif char == 'j':\n        return 'k'\n    elif char == 'k':\n        return 'n'\n    elif char == 'l':\n        return 'n'\n    elif char == 'm':\n        return 'n'\n    elif char == 'n':\n        return 'p'\n    elif char == 'o':\n        return 'p'\n    elif char == 'p':\n        return 't'\n    elif char == 'q':\n        return 't'\n    elif char == 'r':\n        return 't'\n    elif char == 's':\n        return 't'\n    elif char == 't':\n        return 't'\n    elif char == 'u':\n        return 't'\n    elif char == 'v':\n        return 't'\n    elif char == 'w':\n        return 't'\n    elif char == 'x':\n        return 't'\n    elif char == 'y':\n        return 't'\n    elif char == 'z':\n        return 't'\n    else:\n        return char\n\ndef replace_subsequent_syllable_consonants(first_letter, char):\n    if is_hard_consonant(char):\n        return first_letter\n    return char\n\ndef replace_ending_consonant(char):\n    if is_hard_consonant(char):\n        if is_vowel(char):\n            return char + 'oh'\n        else:\n            return char + 'ah'\n    return char\n\ndef main():\n    line = sys.stdin.readline().strip()\n    words = line.split(' ')\n    for word in words:\n        syllables = word.split('-')\n        first_letter = syllables[0][0]\n        syllables[0] = replace_first_letter(first_letter)\n        for syllable in syllables[1:]:\n            for i in range(len(syllable)):\n                syllable[i] = replace_subsequent_syllable_consonants(first_letter, syllable[i])\n        for i in range(len(syllables[-1])):\n            syllables[-1][i] = replace_ending_consonant(syllables[-1][i])\n        print(''.join(syllables), end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\ndef getLetter(c):\n    if c in 'bcdgpnt':\n        return c\n    if c in 'aeiou':\n        return 'a'\n    if c in 'fhjkqrvwxyz':\n        return 'h'\n    if c in 'BCDGPNT':\n        return c.lower()\n    if c in 'AEIOU':\n        return 'A'\n    if c in 'FHJKQRVWXYZ':\n        return 'H'\n\ndef getEnding(c):\n    if c in 'bcdgpnt':\n        return 'ah'\n    if c in 'aeiou':\n        return 'uh'\n    if c in 'fhjkqrvwxyz':\n        return 'oh'\n    if c in 'BCDGPNT':\n        return 'ah'\n    if c in 'AEIOU':\n        return 'uh'\n    if c in 'FHJKQRVWXYZ':\n        return 'oh'\n\ndef main():\n    s = sys.stdin.readline().strip()\n    s = s.replace('-', '')\n    s = s.replace('Each', 'Dach')\n    s = s.replace('each', 'dach')\n    s = s.split()\n\n    for i in range(len(s)):\n        word = s[i]\n        if word[0] in 'bcdgpnt':\n            s[i] = word[0] + word[1:]\n        else:\n            s[i] = getLetter(word[0]) + word[1:]\n        for j in range(1, len(word)):\n            if word[j] in 'bcdgpnt':\n                s[i] = s[i][:j] + word[0] + s[i][j+1:]\n        s[i] = s[i] + getEnding(word[-1])\n\n    print(' '.join(s))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    # Read input\n    words = sys.stdin.readline().strip().split()\n\n    # Translate each word\n    for word in words:\n        # Translate the word\n        translated = translate(word)\n\n        # Print the word\n        print(translated, end='')\n\n        # Print a space if this is not the last word\n        if word != words[-1]:\n            print(' ', end='')\n\n    # Print a new line\n    print()\n\ndef translate(word):\n    # Find the first vowel\n    first_vowel = 0\n    while first_vowel < len(word) and word[first_vowel] not in ('a', 'e', 'i', 'o', 'u'):\n        first_vowel += 1\n\n    # If the first letter was a vowel, return the word unchanged\n    if first_vowel == 0:\n        return word\n\n    # Replace the first letter with the nearest consonant\n    first_letter = word[0]\n    if first_letter >= 'A' and first_letter <= 'E':\n        word = 'B' + word[1:]\n    elif first_letter >= 'F' and first_letter <= 'K':\n        word = 'C' + word[1:]\n    elif first_letter >= 'L' and first_letter <= 'P':\n        word = 'D' + word[1:]\n    elif first_letter >= 'Q' and first_letter <= 'U':\n        word = 'G' + word[1:]\n    elif first_letter >= 'V' and first_letter <= 'Z':\n        word = 'K' + word[1:]\n\n    # Replace all consonants after the first with the first letter\n    for i in range(first_vowel + 1, len(word)):\n        if word[i] in ('b', 'c', 'd', 'g', 'k', 'n', 'p', 't'):\n            word = word[:i] + word[0] + word[i+1:]\n\n    # Replace \"each\" with \"dach\"\n    word = word.replace('each', 'dach')\n\n    # Replace the last consonant with the nearest vowel\n    last_consonant = 0\n    while last_consonant < len(word) and word[last_consonant] not in ('b', 'c', 'd', 'g', 'k', 'n', 'p', 't'):\n        last_consonant += 1\n\n    if last_consonant < len(word) - 1:\n        last_consonant += 1\n\n    if last_consonant < len(word) - 1:\n        if word[last_consonant] < 'a':\n            distance_to_a = ord('a') - ord(word[last_consonant])\n        else:\n            distance_to_a = ord(word[last_consonant]) - ord('a')\n\n        if word[last_consonant] < 'o':\n            distance_to_o = ord('o') - ord(word[last_consonant])\n        else:\n            distance_to_o = ord(word[last_consonant]) - ord('o')\n\n        if word[last_consonant] < 'u':\n            distance_to_u = ord('u') - ord(word[last_consonant])\n        else:\n            distance_to_u = ord(word[last_consonant]) - ord('u')\n\n        if distance_to_a <= distance_to_o and distance_to_a <= distance_to_u:\n            word = word[:last_consonant] + 'ah' + word[last_consonant+1:]\n        elif distance_to_o <= distance_to_a and distance_to_o <= distance_to_u:\n            word = word[:last_consonant] + 'oh' + word[last_consonant+1:]\n        elif distance_to_u <= distance_to_a and distance_to_u <= distance_to_o:\n            word = word[:last_consonant] + 'uh' + word[last_consonant+1:]\n\n    # Return the translated word\n    return word\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef nimionize(word):\n    if word[0] in \"bcdgknpt\":\n        word = word.replace(\"b\",\"p\")\n        word = word.replace(\"c\",\"k\")\n        word = word.replace(\"d\",\"t\")\n        word = word.replace(\"g\",\"k\")\n        word = word.replace(\"n\",\"k\")\n        word = word.replace(\"p\",\"t\")\n        word = word.replace(\"t\",\"d\")\n    else:\n        word = word.replace(\"a\",\"b\")\n        word = word.replace(\"e\",\"d\")\n        word = word.replace(\"i\",\"g\")\n        word = word.replace(\"o\",\"k\")\n        word = word.replace(\"u\",\"n\")\n        word = word.replace(\"y\",\"p\")\n    word = word.replace(\"each\",\"dach\")\n    if word[0] == \"h\":\n        word = word.replace(\"h\",\"g\")\n    word = word.replace(\"hip\",\"gip\")\n    word = word.replace(\"hip-\",\"gip-\")\n    word = word.replace(\"hip-po\",\"gip-go\")\n    word = word.replace(\"hip-pa\",\"gip-ga\")\n    word = word.replace(\"hip-pi\",\"gip-gi\")\n    word = word.replace(\"hip-pu\",\"gip-gu\")\n    word = word.replace(\"hip-py\",\"gip-gy\")\n    if word[-1] in \"bcdgknpt\":\n        if word[-1] == \"b\":\n            word = word + \"ah\"\n        elif word[-1] == \"c\":\n            word = word + \"oh\"\n        elif word[-1] == \"d\":\n            word = word + \"uh\"\n        elif word[-1] == \"g\":\n            word = word + \"ah\"\n        elif word[-1] == \"k\":\n            word = word + \"oh\"\n        elif word[-1] == \"n\":\n            word = word + \"oh\"\n        elif word[-1] == \"p\":\n            word = word + \"uh\"\n        elif word[-1] == \"t\":\n            word = word + \"ah\"\n    else:\n        word = word + \"ah\"\n    return word\n\ndef main():\n    sentence = sys.stdin.readline().strip().split(\" \")\n    for i in range(len(sentence)):\n        sentence[i] = nimionize(sentence[i])\n    print(\" \".join(sentence))\n\nmain()"]