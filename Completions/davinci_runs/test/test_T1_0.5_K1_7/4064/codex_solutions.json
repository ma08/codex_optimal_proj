["\n\nn, h, l, r = map(int, raw_input().split())\n\na = map(int, raw_input().split())\n\n# dp[i] is the maximum number of good sleeping times Vova can obtain if he acts optimally.\ndp = [0] * (n+1)\n\n# dp[i] = max(dp[i-1], dp[i-2]+1)\n# if dp[i-2]+1 is not valid, then dp[i] = dp[i-1]\n# if dp[i-2]+1 is valid, then dp[i] = max(dp[i-1], dp[i-2]+1)\n\nfor i in range(1, n+1):\n    if a[i-1] == h-1:\n        dp[i] = dp[i-1]\n    else:\n        if i == 1:\n            dp[i] = 1\n        else:\n            if a[i-2] + a[i-1] >= l and a[i-2] + a[i-1] <= r:\n                dp[i] = dp[i-2] + 1\n            else:\n                dp[i] = dp[i-1]\n\nprint dp[n]", "\n\nimport sys\n\n\ndef solve(n, h, l, r, a):\n    good = 0\n    bad = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            good += 1\n        else:\n            bad += 1\n    return good + min(bad, 1)\n\n\nif __name__ == '__main__':\n    n, h, l, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, h, l, r, a))", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    if l <= (a[i] - 1) % h <= r:\n        cnt += 1\n    elif l <= a[i] % h <= r:\n        cnt += 1\n    elif i != n - 1:\n        if l <= (a[i] - 1 + a[i + 1]) % h <= r:\n            cnt += 1\n            a[i + 1] += h\n        elif l <= (a[i] + a[i + 1]) % h <= r:\n            cnt += 1\n            a[i + 1] += h\nprint(cnt)", "\n\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define all(x) x.begin(), x.end()\n#define allr(x) x.rbegin(), x.rend()\n#define sz(x) (int)(x).size()\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n#define lb lower_bound\n#define ub upper_bound\n#define beg begin\n#define en end\n#define f(i, n) for(int i=0; i<n; i++)\n#define fr(i, n) for(int i=n-1; i>=0; i--)\n#define rf(i, n) for(int i=n; i>=0; i--)\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<pii> vpii;\ntypedef vector<pll> vpll;\ntypedef vector<vi> vvi;\ntypedef vector<vl> vvl;\n\nconst int MOD = 1e9 + 7;\nconst int INF = 1e9 + 5;\nconst ll LINF = 1e18;\nconst ld PI = acos(-1);\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int n, h, l, r, ans = 0, a, b;\n    cin >> n >> h >> l >> r;\n    vi v(n);\n    f(i, n) cin >> v[i];\n    f(i, n) {\n        a = (v[i] + h - 1) % h;\n        b = (v[i] + h) % h;\n        if (a >= l && a <= r) {\n            ans++;\n        }\n        else if (b >= l && b <= r) {\n            ans++;\n        }\n    }\n    cout << ans << endl;\n}", "\n\n\ndef solve(n, h, l, r, a):\n    result = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            result += 1\n        if i < n - 1:\n            if r < a[i]:\n                a[i + 1] = (a[i + 1] - 1) % h\n            elif a[i] < l:\n                a[i + 1] = (a[i + 1] + 1) % h\n    return result\n\n\ndef main():\n    n, h, l, r = (int(x) for x in input().split())\n    a = [int(x) for x in input().split()]\n    print(solve(n, h, l, r, a))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[-1 for j in range(h)] for i in range(n)]\n\nif l <= a[0] <= r:\n    dp[0][a[0] - 1] = 1\nelse:\n    dp[0][a[0] - 1] = 0\nif l <= a[0] - 1 <= r:\n    dp[0][a[0] - 2] = 1\nelse:\n    dp[0][a[0] - 2] = 0\n\nfor i in range(1, n):\n    for j in range(h):\n        if l <= (j + a[i]) % h <= r:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][(j + a[i] - 1) % h] + 1)\n        else:\n            dp[i][j] = dp[i - 1][j]\n        if l <= (j + a[i] - 1) % h <= r:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1, dp[i - 1][(j + a[i] - 2) % h] + 1)\n        else:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j])\n\nprint(max(dp[-1]))", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][1] = 1 if l <= a[0] <= r else 0\ndp[0][0] = 1 if l <= a[0] - 1 <= r else 0\nfor i in range(1, n):\n    dp[i][1] = max(dp[i-1][0], dp[i-1][1]) + (1 if l <= a[i] <= r else 0)\n    dp[i][0] = max(dp[i-1][0], dp[i-1][1]) + (1 if l <= a[i] - 1 <= r else 0)\nprint(max(dp[n-1]))"]