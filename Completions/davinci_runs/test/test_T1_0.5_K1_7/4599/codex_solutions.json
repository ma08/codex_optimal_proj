["\n\ndef scoreDiff(cards):\n    cards.sort()\n    alice = 0\n    bob = 0\n    for i in range(len(cards)):\n        if i % 2 == 0:\n            alice += cards.pop()\n        else:\n            bob += cards.pop()\n    return alice - bob\n\nnumCards = int(input())\ncards = [int(i) for i in input().split()]\nprint(scoreDiff(cards))", "\n\ndef main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice - bob)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\nalice = sum(a[::2])\nbob = sum(a[1::2])\n\nprint(alice - bob)", "\n\nN = int(input())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\nans = 0\nfor i in range(N):\n    if i % 2 == 0:\n        ans += a[i]\n    else:\n        ans -= a[i]\n\nprint(ans)", "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort(reverse=True)\nalice = 0\nbob = 0\nfor i in range(n):\n    if i % 2 == 0:\n        alice += a[i]\n    else:\n        bob += a[i]\nprint(alice - bob)", "\n\n\"\"\"\n-----Solution-----\n\nThe best strategy for Alice is to take the card with the maximum number, and for Bob to take the card with the maximum number of the remaining cards.\n\nThe best strategy for Bob is to take the card with the maximum number, and for Alice to take the card with the maximum number of the remaining cards.\n\nTherefore, the difference of their scores will be the maximum number of the cards minus the maximum number of the remaining cards.\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nprint(a[-1] - a[-2])", "\n\nN = int(input())\ncards = [int(i) for i in input().split()]\n\ncards = sorted(cards, reverse = True)\n\nAlice = sum(cards[0::2])\nBob = sum(cards[1::2])\n\nprint(Alice - Bob)"]