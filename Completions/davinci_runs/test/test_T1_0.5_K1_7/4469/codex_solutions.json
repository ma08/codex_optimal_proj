["", "\n\nimport sys\n\ndef main():\n    inp = sys.stdin.readlines()\n    q = int(inp[0])\n    queries = []\n    for i in range(1, q+1):\n        queries.append(inp[i].split())\n    left = []\n    right = []\n    for i in range(q):\n        if queries[i][0] == \"L\":\n            left.append(queries[i][1])\n        else:\n            right.append(queries[i][1])\n    for i in range(q):\n        if queries[i][0] == \"?\":\n            if queries[i][1] in left:\n                print(len(right))\n            else:\n                print(len(left))\n\nif __name__ == '__main__':\n    main()", "\n\nfrom collections import deque\n\ndef solution():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        queries.append(input())\n\n    books = deque()\n    for query in queries:\n        q = query.split()\n        if q[0] == 'L':\n            books.appendleft(q[1])\n        elif q[0] == 'R':\n            books.append(q[1])\n        else:\n            book = q[1]\n            i = 0\n            for b in books:\n                if b == book:\n                    break\n                i += 1\n            print(min(i, len(books) - i - 1))\n\nsolution()", "\n\nimport sys\nimport os\nimport heapq\nimport math\n\ndef solve(n, queries):\n    left = []\n    right = []\n    left_map = {}\n    right_map = {}\n    for q in queries:\n        if q[0] == 'L':\n            heapq.heappush(left, (q[1], q[2]))\n            left_map[q[2]] = len(left)\n        elif q[0] == 'R':\n            heapq.heappush(right, (q[1], q[2]))\n            right_map[q[2]] = len(right)\n        else:\n            if q[2] in left_map:\n                l = left_map[q[2]]\n                print(l)\n            elif q[2] in right_map:\n                r = right_map[q[2]]\n                print(r)\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    queries = []\n    for _ in range(n):\n        q = sys.stdin.readline().split()\n        if q[0] == 'L':\n            queries.append((q[0], q[1], len(queries)))\n        elif q[0] == 'R':\n            queries.append((q[0], q[1], len(queries)))\n        else:\n            queries.append((q[0], q[1], int(q[1])))\n    solve(n, queries)", "\n\ndef main():\n    \"\"\"\n    1 <= q <= 2 * 10^5\n    \"\"\"\n    q = int(input())\n    assert 1 <= q <= 2 * 10 ** 5\n\n    \"\"\"\n    1 <= id <= 2 * 10^5\n    \"\"\"\n    for i in range(q):\n        # L or R\n        op = input()\n        assert op == \"L\" or op == \"R\"\n\n        # id\n        id = int(input())\n        assert 1 <= id <= 2 * 10 ** 5\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef solve(q):\n    left = []\n    right = []\n    for q in q:\n        if q[0] == 'L':\n            left.append(q[1])\n        elif q[0] == 'R':\n            right.append(q[1])\n        else:\n            l = len(left)\n            r = len(right)\n            if l <= r:\n                for i in range(l):\n                    if left[-i-1] == q[1]:\n                        print(i)\n                        break\n            else:\n                for i in range(r):\n                    if right[i] == q[1]:\n                        print(i)\n                        break\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().rstrip())\n    q = []\n    for i in range(n):\n        q.append(tuple(sys.stdin.readline().rstrip().split()))\n    solve(q)", "\nimport sys\n\ndef main():\n    n = int(input())\n    l = []\n    r = []\n    for i in range(n):\n        s = input().split()\n        if s[0] == 'L':\n            l.append(s[1])\n        elif s[0] == 'R':\n            r.append(s[1])\n        else:\n            print(min(len(l) - l.index(s[1]) - 1, len(r) - r.index(s[1]) - 1))\n\nif __name__ == '__main__':\n    main()"]