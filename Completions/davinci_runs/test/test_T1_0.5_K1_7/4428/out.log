2022-04-13 20:44:00.727226 """
You are given an array $d_1, d_2, \dots, d_n$ consisting of $n$ integer numbers.

Your task is to split this array into three parts (some of which may be empty) in such a way that each element of the array belongs to exactly one of the three parts, and each of the parts forms a consecutive contiguous subsegment (possibly, empty) of the original array. 

Let the sum of elements of the first part be $sum_1$, the sum of elements of the second part be $sum_2$ and the sum of elements of the third part be $sum_3$. Among all possible ways to split the array you have to choose a way such that $sum_1 = sum_3$ and $sum_1$ is maximum possible.

More formally, if the first part of the array contains $a$ elements, the second part of the array contains $b$ elements and the third part contains $c$ elements, then:

$$sum_1 = \sum\limits_{1 \le i \le a}d_i,$$ $$sum_2 = \sum\limits_{a + 1 \le i \le a + b}d_i,$$ $$sum_3 = \sum\limits_{a + b + 1 \le i \le a + b + c}d_i.$$

The sum of an empty array is $0$.

Your task is to find a way to split the array such that $sum_1 = sum_3$ and $sum_1$ is maximum possible.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of elements in the array $d$.

The second line of the input contains $n$ integers $d_1, d_2, \dots, d_n$ ($1 \le d_i \le 10^9$) — the elements of the array $d$.


-----Output-----

Print a single integer — the maximum possible value of $sum_1$, considering that the condition $sum_1 = sum_3$ must be met.

Obviously, at least one valid way to split the array exists (use $a=c=0$ and $b=n$).


-----Examples-----
Input
5
1 3 1 1 4

Output
5

Input
5
1 3 2 1 4

Output
4

Input
3
4 1 2

Output
0



-----Note-----

In the first example there is only one possible splitting which maximizes $sum_1$: $[1, 3, 1], [~], [1, 4]$.

In the second example the only way to have $sum_1=4$ is: $[1, 3], [2, 1], [4]$.

In the third example there is only one way to split the array: $[~], [4, 1, 2], [~]$.
"""
2022-04-13 20:44:00.727241 --------------------------
2022-04-13 20:44:21.542560 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nd = list(map(int, input().split()))\n\nleft = [0] * n\nright = [0] * n\n\nfor i in range(1, n):\n    left[i] = left[i-1] + d[i-1]\n\nfor i in range(n-2, -1, -1):\n    right[i] = right[i+1] + d[i+1]\n\nans = 0\nfor i in range(n):\n    ans = max(ans, left[i] + right[i])\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    d = list(map(int, input().split()))\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + d[i]\n    prefix_sum_set = set(prefix_sum)\n    ans = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] in prefix_sum_set:\n                ans = max(ans, prefix_sum[j] - prefix_sum[i])\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\nd = list(map(int, input().split()))\n\n# first part of the array\nsum_1 = 0\n# second part of the array\nsum_2 = sum(d)\n# third part of the array\nsum_3 = 0\n# maximum possible value of sum_1\nmax_sum_1 = 0\n\n# iterate over elements of the array\nfor i in range(n):\n    sum_1 += d[i]\n    sum_2 -= d[i]\n    # if sum_1 is equal to sum_3, update max_sum_1\n    if sum_1 == sum_3:\n        max_sum_1 = max(max_sum_1, sum_1)\n    # if sum_2 is equal to sum_3, update max_sum_1\n    if sum_2 == sum_3:\n        max_sum_1 = max(max_sum_1, sum_1)\n    # sum_3 is equal to sum_1 + sum_2\n    sum_3 = sum_1 + sum_2\n\nprint(max_sum_1)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\nd = [int(x) for x in input().split()]\n\nd_sum = sum(d)\n\n#print(d_sum)\n\nmax_sum = 0\n\nfor i in range(n):\n    max_sum += d[i]\n    if max_sum > d_sum - max_sum:\n        break\n\nprint(max_sum)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef solve(arr):\n    n = len(arr)\n    left_sum = [0] * n\n    left_sum[0] = arr[0]\n    for i in range(1, n):\n        left_sum[i] = left_sum[i-1] + arr[i]\n    right_sum = [0] * n\n    right_sum[-1] = arr[-1]\n    for i in range(n-2, -1, -1):\n        right_sum[i] = right_sum[i+1] + arr[i]\n    res = 0\n    for i in range(n):\n        if left_sum[i] == right_sum[i]:\n            res = max(res, left_sum[i])\n    return res\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(solve(arr))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\ndef get_max_sum(n, d):\n    left_sum = 0\n    right_sum = sum(d)\n    max_sum = 0\n    for i in range(n):\n        left_sum += d[i]\n        right_sum -= d[i]\n        if left_sum == right_sum:\n            max_sum = left_sum\n    return max_sum\n\nn = int(input())\nd = list(map(int, input().split()))\nprint(get_max_sum(n, d))"
    }
  ],
  "created": 1649882640,
  "id": "cmpl-4we8GCU5Uh6LHQvPzTTl5lyPZjnH7",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 20:44:21.542814 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nd = list(map(int, input().split()))\n\nleft = [0] * n\nright = [0] * n\n\nfor i in range(1, n):\n    left[i] = left[i-1] + d[i-1]\n\nfor i in range(n-2, -1, -1):\n    right[i] = right[i+1] + d[i+1]\n\nans = 0\nfor i in range(n):\n    ans = max(ans, left[i] + right[i])\n\nprint(ans)"
}
2022-04-13 20:44:21.542848 REASON stop
2022-04-13 20:44:21.543287 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    d = list(map(int, input().split()))\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + d[i]\n    prefix_sum_set = set(prefix_sum)\n    ans = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] in prefix_sum_set:\n                ans = max(ans, prefix_sum[j] - prefix_sum[i])\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 20:44:21.543425 REASON stop
2022-04-13 20:44:21.543829 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\nd = list(map(int, input().split()))\n\n# first part of the array\nsum_1 = 0\n# second part of the array\nsum_2 = sum(d)\n# third part of the array\nsum_3 = 0\n# maximum possible value of sum_1\nmax_sum_1 = 0\n\n# iterate over elements of the array\nfor i in range(n):\n    sum_1 += d[i]\n    sum_2 -= d[i]\n    # if sum_1 is equal to sum_3, update max_sum_1\n    if sum_1 == sum_3:\n        max_sum_1 = max(max_sum_1, sum_1)\n    # if sum_2 is equal to sum_3, update max_sum_1\n    if sum_2 == sum_3:\n        max_sum_1 = max(max_sum_1, sum_1)\n    # sum_3 is equal to sum_1 + sum_2\n    sum_3 = sum_1 + sum_2\n\nprint(max_sum_1)"
}
2022-04-13 20:44:21.543893 REASON stop
2022-04-13 20:44:21.585038 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\nd = [int(x) for x in input().split()]\n\nd_sum = sum(d)\n\n#print(d_sum)\n\nmax_sum = 0\n\nfor i in range(n):\n    max_sum += d[i]\n    if max_sum > d_sum - max_sum:\n        break\n\nprint(max_sum)"
}
2022-04-13 20:44:21.585142 REASON stop
2022-04-13 20:44:21.594617 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": ""
}
2022-04-13 20:44:21.594710 REASON stop
2022-04-13 20:44:21.595305 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef solve(arr):\n    n = len(arr)\n    left_sum = [0] * n\n    left_sum[0] = arr[0]\n    for i in range(1, n):\n        left_sum[i] = left_sum[i-1] + arr[i]\n    right_sum = [0] * n\n    right_sum[-1] = arr[-1]\n    for i in range(n-2, -1, -1):\n        right_sum[i] = right_sum[i+1] + arr[i]\n    res = 0\n    for i in range(n):\n        if left_sum[i] == right_sum[i]:\n            res = max(res, left_sum[i])\n    return res\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(solve(arr))"
}
2022-04-13 20:44:21.595409 REASON stop
2022-04-13 20:44:21.595913 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\ndef get_max_sum(n, d):\n    left_sum = 0\n    right_sum = sum(d)\n    max_sum = 0\n    for i in range(n):\n        left_sum += d[i]\n        right_sum -= d[i]\n        if left_sum == right_sum:\n            max_sum = left_sum\n    return max_sum\n\nn = int(input())\nd = list(map(int, input().split()))\nprint(get_max_sum(n, d))"
}
2022-04-13 20:44:21.595965 REASON stop
