2022-04-13 23:31:03.152345 """
Recently, Pero has been into robotics, so he decided to make a robot that checks whether a deck of poker cards is complete.

He’s already done a fair share of work—he wrote a programme that recognizes the suits of the cards. For simplicity’s sake, we can assume that all cards have a suit and a number.

The suit of the card is one of the characters P, K, H, T, and the number of the card is an integer between $1$ and $13$. The robot labels each card in the format $TXY$ where $T$ is the suit and $XY$ is the number. If the card’s number consists of one digit, then $X = 0$. For example, the card of suit P and number $9$ is labelled P09.

A complete deck has $52$ cards in total—for each of the four suits there is exactly one card with a number between $1$ and $13$.

The robot has read the labels of all the cards in the deck and combined them into the string $S$. Help Pero finish the robot by writing a programme that reads the string made out of card labels and outputs how many cards are missing for each suit. If there are two exact same cards in the deck, output GRESKA (Croatian for ERROR).

-----Input-----
The first and only line of input contains the string $S$ ($1 \leq \left|S\right| \leq 1\ 000$), containing all the card labels.

-----Output-----
If there are two exact same cards in the deck, output “GRESKA”. Otherwise, the first and only line of output must consist of 4 space-separated numbers: how many cards of the suit P, K, H, T are missing, respectively.

-----Examples-----
Sample Input 1:
P01K02H03H04
Sample Output 1:
12 12 11 13

Sample Input 2:
H02H10P11H02
Sample Output 2:
GRESKA
"""
2022-04-13 23:31:03.152360 --------------------------
2022-04-13 23:31:31.463123 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    cards = input()\n    suits = {'P':0, 'K':0, 'H':0, 'T':0}\n    numbers = {'1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0, '10':0, '11':0, '12':0, '13':0}\n    for i in range(0, len(cards), 3):\n        card = cards[i:i+3]\n        if card[0] in suits:\n            if card[0] in numbers:\n                print('GRESKA')\n                return\n            suits[card[0]] += 1\n            numbers[card[1:]] += 1\n        else:\n            print('GRESKA')\n            return\n    for key in suits:\n        if suits[key] != 13:\n            print(13 - suits[key], end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ncards = input()\n\nif len(cards) % 3 != 0:\n    print(\"GRESKA\")\nelse:\n    p = 13\n    k = 13\n    h = 13\n    t = 13\n    for i in range(0, len(cards), 3):\n        if cards[i] == \"P\":\n            p -= 1\n        elif cards[i] == \"K\":\n            k -= 1\n        elif cards[i] == \"H\":\n            h -= 1\n        elif cards[i] == \"T\":\n            t -= 1\n\n    if p == 0 and k == 0 and h == 0 and t == 0:\n        print(p, k, h, t)\n    else:\n        print(\"GRESKA\")"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef is_card_in_deck(card, deck):\n    if len(card) == 4:\n        card = card[:3]\n    for i in deck:\n        if i[:3] == card:\n            return True\n    return False\n\ndef check_deck(deck):\n    if len(deck) != 52:\n        return False\n    suits = ['P', 'K', 'H', 'T']\n    for suit in suits:\n        for i in range(1, 14):\n            card = suit\n            if i < 10:\n                card += \"0\"\n            card += str(i)\n            if not is_card_in_deck(card, deck):\n                return False\n    return True\n\ndef main():\n    deck = input().split()\n    if check_deck(deck):\n        print(\"0 0 0 0\")\n    else:\n        print(\"GRESKA\")\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"main\"\"\"\n    #input\n    string = input()\n    #process\n    count_p = 0\n    count_k = 0\n    count_h = 0\n    count_t = 0\n    count_p_l = []\n    count_k_l = []\n    count_h_l = []\n    count_t_l = []\n    for i in range(0, len(string), 3):\n        if string[i] == 'P':\n            count_p += 1\n            count_p_l.append(string[i+1:i+3])\n        elif string[i] == 'K':\n            count_k += 1\n            count_k_l.append(string[i+1:i+3])\n        elif string[i] == 'H':\n            count_h += 1\n            count_h_l.append(string[i+1:i+3])\n        elif string[i] == 'T':\n            count_t += 1\n            count_t_l.append(string[i+1:i+3])\n    #output\n    if (count_p > 13) or (count_p_l.count(count_p_l[0]) == len(count_p_l)):\n        print('GRESKA')\n    elif (count_k > 13) or (count_k_l.count(count_k_l[0]) == len(count_k_l)):\n        print('GRESKA')\n    elif (count_h > 13) or (count_h_l.count(count_h_l[0]) == len(count_h_l)):\n        print('GRESKA')\n    elif (count_t > 13) or (count_t_l.count(count_t_l[0]) == len(count_t_l)):\n        print('GRESKA')\n    else:\n        print(13-count_p, 13-count_k, 13-count_h, 13-count_t)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n#-----main-----\ns = input()\n\n#p, k, h, t = 0, 0, 0, 0\n#\n#for i in range(0, len(s), 3):\n#    if s[i] == \"P\":\n#        p += 1\n#    elif s[i] == \"K\":\n#        k += 1\n#    elif s[i] == \"H\":\n#        h += 1\n#    elif s[i] == \"T\":\n#        t += 1\n#\n#if p > 1 or k > 1 or h > 1 or t > 1:\n#    print(\"GRESKA\")\n#else:\n#    print(13 - p, 13 - k, 13 - h, 13 - t)\n\np, k, h, t = [0] * 4\n\nfor i in range(0, len(s), 3):\n    if s[i] == \"P\":\n        p[int(s[i + 1:i + 3])] += 1\n    elif s[i] == \"K\":\n        k[int(s[i + 1:i + 3])] += 1\n    elif s[i] == \"H\":\n        h[int(s[i + 1:i + 3])] += 1\n    elif s[i] == \"T\":\n        t[int(s[i + 1:i + 3])] += 1\n\nif p[1:] > 1 or k[1:] > 1 or h[1:] > 1 or t[1:] > 1:\n    print(\"GRESKA\")\nelse:\n    print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n#Cards\n\nS = input()\n\nif (S.count('P') == 1 and S.count('K') == 1 and S.count('H') == 1 and S.count('T') == 1):\n    print(12 - int(S.count('P')), 12 - int(S.count('K')), 12 - int(S.count('H')), 12 - int(S.count('T')))\nelse:\n    print('GRESKA')"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef check_deck(s):\n    \"\"\"\n    >>> check_deck(\"P01K02H03H04\")\n    '12 12 11 13'\n\n    >>> check_deck(\"H02H10P11H02\")\n    'GRESKA'\n    \"\"\"\n\n    suits = {'P': [], 'K': [], 'H': [], 'T': []}\n    for i in range(0, len(s), 3):\n        card = s[i:i+3]\n        suit = card[0]\n        number = int(card[1:])\n        if number in suits[suit]:\n            return 'GRESKA'\n        else:\n            suits[suit].append(number)\n    for suit in suits:\n        suits[suit] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] - suits[suit]\n    return ' '.join([str(len(suits['P'])), str(len(suits['K'])), str(len(suits['H'])), str(len(suits['T']))])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    }
  ],
  "created": 1649892663,
  "id": "cmpl-4wgjvcL69Akyqce0BLYy2Cfb0ed2k",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 23:31:31.463397 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    cards = input()\n    suits = {'P':0, 'K':0, 'H':0, 'T':0}\n    numbers = {'1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0, '10':0, '11':0, '12':0, '13':0}\n    for i in range(0, len(cards), 3):\n        card = cards[i:i+3]\n        if card[0] in suits:\n            if card[0] in numbers:\n                print('GRESKA')\n                return\n            suits[card[0]] += 1\n            numbers[card[1:]] += 1\n        else:\n            print('GRESKA')\n            return\n    for key in suits:\n        if suits[key] != 13:\n            print(13 - suits[key], end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 23:31:31.463497 REASON stop
2022-04-13 23:31:31.463823 test/intro-questions.txt_dir/4821/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4821/solutions.json'
2022-04-13 23:31:31.463855 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ncards = input()\n\nif len(cards) % 3 != 0:\n    print(\"GRESKA\")\nelse:\n    p = 13\n    k = 13\n    h = 13\n    t = 13\n    for i in range(0, len(cards), 3):\n        if cards[i] == \"P\":\n            p -= 1\n        elif cards[i] == \"K\":\n            k -= 1\n        elif cards[i] == \"H\":\n            h -= 1\n        elif cards[i] == \"T\":\n            t -= 1\n\n    if p == 0 and k == 0 and h == 0 and t == 0:\n        print(p, k, h, t)\n    else:\n        print(\"GRESKA\")"
}
2022-04-13 23:31:31.463966 REASON stop
2022-04-13 23:31:31.464214 test/intro-questions.txt_dir/4821/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4821/solutions.json'
2022-04-13 23:31:31.464226 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef is_card_in_deck(card, deck):\n    if len(card) == 4:\n        card = card[:3]\n    for i in deck:\n        if i[:3] == card:\n            return True\n    return False\n\ndef check_deck(deck):\n    if len(deck) != 52:\n        return False\n    suits = ['P', 'K', 'H', 'T']\n    for suit in suits:\n        for i in range(1, 14):\n            card = suit\n            if i < 10:\n                card += \"0\"\n            card += str(i)\n            if not is_card_in_deck(card, deck):\n                return False\n    return True\n\ndef main():\n    deck = input().split()\n    if check_deck(deck):\n        print(\"0 0 0 0\")\n    else:\n        print(\"GRESKA\")\n\nmain()"
}
2022-04-13 23:31:31.464267 REASON stop
2022-04-13 23:31:31.475934 test/intro-questions.txt_dir/4821/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4821/solutions.json'
2022-04-13 23:31:31.475965 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"main\"\"\"\n    #input\n    string = input()\n    #process\n    count_p = 0\n    count_k = 0\n    count_h = 0\n    count_t = 0\n    count_p_l = []\n    count_k_l = []\n    count_h_l = []\n    count_t_l = []\n    for i in range(0, len(string), 3):\n        if string[i] == 'P':\n            count_p += 1\n            count_p_l.append(string[i+1:i+3])\n        elif string[i] == 'K':\n            count_k += 1\n            count_k_l.append(string[i+1:i+3])\n        elif string[i] == 'H':\n            count_h += 1\n            count_h_l.append(string[i+1:i+3])\n        elif string[i] == 'T':\n            count_t += 1\n            count_t_l.append(string[i+1:i+3])\n    #output\n    if (count_p > 13) or (count_p_l.count(count_p_l[0]) == len(count_p_l)):\n        print('GRESKA')\n    elif (count_k > 13) or (count_k_l.count(count_k_l[0]) == len(count_k_l)):\n        print('GRESKA')\n    elif (count_h > 13) or (count_h_l.count(count_h_l[0]) == len(count_h_l)):\n        print('GRESKA')\n    elif (count_t > 13) or (count_t_l.count(count_t_l[0]) == len(count_t_l)):\n        print('GRESKA')\n    else:\n        print(13-count_p, 13-count_k, 13-count_h, 13-count_t)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 23:31:31.476035 REASON stop
2022-04-13 23:31:31.493832 test/intro-questions.txt_dir/4821/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4821/solutions.json'
2022-04-13 23:31:31.493869 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n#-----main-----\ns = input()\n\n#p, k, h, t = 0, 0, 0, 0\n#\n#for i in range(0, len(s), 3):\n#    if s[i] == \"P\":\n#        p += 1\n#    elif s[i] == \"K\":\n#        k += 1\n#    elif s[i] == \"H\":\n#        h += 1\n#    elif s[i] == \"T\":\n#        t += 1\n#\n#if p > 1 or k > 1 or h > 1 or t > 1:\n#    print(\"GRESKA\")\n#else:\n#    print(13 - p, 13 - k, 13 - h, 13 - t)\n\np, k, h, t = [0] * 4\n\nfor i in range(0, len(s), 3):\n    if s[i] == \"P\":\n        p[int(s[i + 1:i + 3])] += 1\n    elif s[i] == \"K\":\n        k[int(s[i + 1:i + 3])] += 1\n    elif s[i] == \"H\":\n        h[int(s[i + 1:i + 3])] += 1\n    elif s[i] == \"T\":\n        t[int(s[i + 1:i + 3])] += 1\n\nif p[1:] > 1 or k[1:] > 1 or h[1:] > 1 or t[1:] > 1:\n    print(\"GRESKA\")\nelse:\n    print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))"
}
2022-04-13 23:31:31.493955 REASON stop
2022-04-13 23:31:31.494586 test/intro-questions.txt_dir/4821/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4821/solutions.json'
2022-04-13 23:31:31.494611 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n#Cards\n\nS = input()\n\nif (S.count('P') == 1 and S.count('K') == 1 and S.count('H') == 1 and S.count('T') == 1):\n    print(12 - int(S.count('P')), 12 - int(S.count('K')), 12 - int(S.count('H')), 12 - int(S.count('T')))\nelse:\n    print('GRESKA')"
}
2022-04-13 23:31:31.494674 REASON stop
2022-04-13 23:31:31.495419 test/intro-questions.txt_dir/4821/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4821/solutions.json'
2022-04-13 23:31:31.495441 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef check_deck(s):\n    \"\"\"\n    >>> check_deck(\"P01K02H03H04\")\n    '12 12 11 13'\n\n    >>> check_deck(\"H02H10P11H02\")\n    'GRESKA'\n    \"\"\"\n\n    suits = {'P': [], 'K': [], 'H': [], 'T': []}\n    for i in range(0, len(s), 3):\n        card = s[i:i+3]\n        suit = card[0]\n        number = int(card[1:])\n        if number in suits[suit]:\n            return 'GRESKA'\n        else:\n            suits[suit].append(number)\n    for suit in suits:\n        suits[suit] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] - suits[suit]\n    return ' '.join([str(len(suits['P'])), str(len(suits['K'])), str(len(suits['H'])), str(len(suits['T']))])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
}
2022-04-13 23:31:31.495520 REASON stop
2022-04-13 23:31:31.496123 test/intro-questions.txt_dir/4821/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4821/solutions.json'
