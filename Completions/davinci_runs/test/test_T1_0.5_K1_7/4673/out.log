2022-04-13 22:36:11.984949 """
=====Problem Statement=====
Let's use decorators to build a name directory! You are given some information about N people. Each person has a first name, last name, age and sex ('M' or 'F'). Print their names in a specific format sorted by their age in ascending order i.e. the youngest person's name should be printed first. For two people of the same age, print them in the order of their input.

For Henry Davids, the output should be:
Mr. Henry Davids

For Mary George, the output should be:
Ms. Mary George

=====Input Format=====
The first line contains the integer N, the number of people. N lines follow each containing the space separated values of the first name, last name, age and sex, respectively. 

=====Constraints=====
1≤N≤10

=====Output Format=====
Output N names on separate lines in the format described above in ascending order of age.
"""
2022-04-13 22:36:11.984959 --------------------------
2022-04-13 22:36:26.541186 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n\n\"\"\"\n=====Sample Input 0=====\n3\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\n\n=====Sample Output 0=====\nMr. Mike Thomson\nMs. Andria Bustle\nMr. Robert Bustle\n\"\"\""
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nfrom operator import itemgetter\n\n# get input\nN = int(input())\npeople = []\nfor i in range(N):\n    people.append(input().split())\n\n# sort by age and then by last name\npeople.sort(key=itemgetter(2, 1))\n\n# print in correct format\nfor i in range(N):\n    if people[i][3] == 'M':\n        print(\"Mr. \" + people[i][1], people[i][0])\n    else:\n        print(\"Ms. \" + people[i][1], people[i][0])"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f,sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\nfrom operator import itemgetter\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=itemgetter(2)))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
    }
  ],
  "created": 1649889372,
  "id": "cmpl-4wfsqFyEzgavJSpxYTd8N0Qkp7XcK",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:36:26.541510 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n\n\"\"\"\n=====Sample Input 0=====\n3\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\n\n=====Sample Output 0=====\nMr. Mike Thomson\nMs. Andria Bustle\nMr. Robert Bustle\n\"\"\""
}
2022-04-13 22:36:26.541550 REASON stop
2022-04-13 22:36:26.541972 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
}
2022-04-13 22:36:26.542078 REASON stop
2022-04-13 22:36:26.542436 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nfrom operator import itemgetter\n\n# get input\nN = int(input())\npeople = []\nfor i in range(N):\n    people.append(input().split())\n\n# sort by age and then by last name\npeople.sort(key=itemgetter(2, 1))\n\n# print in correct format\nfor i in range(N):\n    if people[i][3] == 'M':\n        print(\"Mr. \" + people[i][1], people[i][0])\n    else:\n        print(\"Ms. \" + people[i][1], people[i][0])"
}
2022-04-13 22:36:26.542481 REASON stop
2022-04-13 22:36:26.551690 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f,sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
}
2022-04-13 22:36:26.551759 REASON stop
2022-04-13 22:36:26.552533 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
}
2022-04-13 22:36:26.552587 REASON stop
2022-04-13 22:36:26.567719 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\nfrom operator import itemgetter\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=itemgetter(2)))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
}
2022-04-13 22:36:26.567836 REASON stop
2022-04-13 22:36:26.568448 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')"
}
2022-04-13 22:36:26.568502 REASON stop
