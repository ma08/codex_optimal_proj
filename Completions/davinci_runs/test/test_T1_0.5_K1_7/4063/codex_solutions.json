["\n\nN = int(input())\nd = list(map(int, input().split()))\n\nd.sort()\n\ncount = 0\n\nfor i in range(N):\n    if i < N/2:\n        if d[i] < d[int(N/2)] and d[i] >= d[int(N/2)-1]:\n            count += 1\n    else:\n        if d[i] > d[int(N/2)] and d[i] <= d[int(N/2)-1]:\n            count += 1\n\nprint(count)", "\n\ndef main():\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    d_mid = d[n//2-1]\n    left = 0\n    right = 0\n    for i in range(n):\n        if d[i] > d_mid:\n            right += 1\n        else:\n            left += 1\n    if left == right:\n        print(0)\n    else:\n        print(abs(left-right))\n\nif __name__ == '__main__':\n    main()", "\n\n# get input\nN = int(input())\nd = list(map(int, input().split()))\n\n# set up a dictionary for counting the number of problems for each difficulty\nd_dict = {}\nfor i in range(N):\n    if d[i] in d_dict:\n        d_dict[d[i]] += 1\n    else:\n        d_dict[d[i]] = 1\n\n# set up a list for counting the number of problems for each difficulty\nd_list = [0 for _ in range(N+1)]\nfor i in range(N):\n    d_list[d[i]] += 1\n\n# count the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same\n# (1) using dictionary\n# ans = 0\n# for i in range(N+1):\n#     if i in d_dict:\n#         ans += d_dict[i] * d_dict[N//2 - i]\n# print(ans)\n\n# (2) using list\nans = 0\nfor i in range(N+1):\n    if d_list[i] != 0:\n        ans += d_list[i] * d_list[N//2 - i]\nprint(ans)", "\n\n#N = int(input())\n#d = list(map(int, input().split()))\n\nN = 6\nd = [9, 1, 4, 4, 6, 7]\n\nd.sort()\n\nleft = 0\nright = N - 1\n\nmid = (left + right) // 2\n\ncount = 0\n\nwhile left < right:\n    if d[mid] == d[mid + 1]:\n        count += 1\n        mid += 1\n    elif d[mid] == d[mid - 1]:\n        count += 1\n        mid -= 1\n    else:\n        left = mid\n        right = mid\n    mid = (left + right) // 2\n\nprint(count)", "\n\n# Get input\nn = int(input())\nproblems = list(map(int, input().split()))\nproblems.sort()\n\n# Number of choices of K\ncount = 0\n\n# Iterate through all possible values of K\nfor k in range(1, 10**5):\n    # Number of problems for ARCs and ABCs\n    arcs = 0\n    abcs = 0\n\n    # Iterate through all problems\n    for problem in problems:\n        # If problem is K or higher\n        if problem >= k:\n            arcs += 1\n        # If problem is lower than K\n        else:\n            abcs += 1\n    \n    # If number of problems for ARCs and ABCs are the same\n    if arcs == abcs:\n        count += 1\n\nprint(count)", "\n\nimport sys\n\nN = int(sys.stdin.readline())\ndifficulty_list = list(map(int, sys.stdin.readline().split()))\n\ndifficulty_count_dict = {}\nfor difficulty in difficulty_list:\n    if difficulty in difficulty_count_dict:\n        difficulty_count_dict[difficulty] += 1\n    else:\n        difficulty_count_dict[difficulty] = 1\n\nanswer = 0\nfor difficulty in difficulty_count_dict:\n    answer += difficulty_count_dict[difficulty] * (difficulty_count_dict[difficulty] - 1) // 2\n\nprint(answer)", "\n\nn = int(input())\nd = list(map(int, input().split()))\n\n# d_i \u306e\u5408\u8a08\nnum_sum = sum(d)\n\n# d_i \u3092\u6607\u9806\u306b\u30bd\u30fc\u30c8\nd.sort()\n# \u5408\u8a08\u5024\u304c\u5076\u6570\u306a\u3089\u3070, d_i \u306e\u5408\u8a08\u306e\u534a\u5206\u304c\u7b54\u3048\nif num_sum % 2 == 0:\n    print(num_sum // 2)\n# \u5408\u8a08\u5024\u304c\u5947\u6570\u306a\u3089\u3070, d_i \u306e\u5408\u8a08\u306e\u534a\u5206\u306b + 1 \u3059\u308b\u3053\u3068\u3067\u7b54\u3048\u304c\u5f97\u3089\u308c\u308b\nelse:\n    print((num_sum + 1) // 2)"]