["\n\ndef main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\t# print(n, a)\n\n\tinc = []\n\tdec = []\n\t\n\ti = 0\n\twhile i < n:\n\t\tif i == n-1:\n\t\t\tinc.append(a[i])\n\t\t\tbreak\n\t\tif a[i] < a[i+1]:\n\t\t\tinc.append(a[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tbreak\n\n\twhile i < n:\n\t\tif i == n-1:\n\t\t\tdec.append(a[i])\n\t\t\tbreak\n\t\tif a[i] > a[i+1]:\n\t\t\tdec.append(a[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tbreak\n\n\tif i == n-1:\n\t\tdec.append(a[i])\n\n\tif i < n-1:\n\t\tprint(\"NO\")\n\t\treturn\n\n\tprint(\"YES\")\n\tprint(len(inc))\n\tprint(*inc)\n\tprint(len(dec))\n\tprint(*dec)\n\nif __name__ == '__main__':\n\tmain()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif len(set(a)) != len(a):\n    print(\"NO\")\n    exit()\n\nb = sorted(a)\nc = sorted(a, reverse=True)\n\nif b[0] < b[-1] and c[0] > c[-1]:\n    print(\"YES\")\n    print(n - a.index(b[-1]))\n    print(*b[:n - a.index(b[-1])])\n    print(n - a.index(c[0]))\n    print(*c[:n - a.index(c[0])])\nelse:\n    print(\"NO\")", "\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if len(set(a)) != n:\n        print(\"NO\")\n        return\n\n    inc = [0] * n\n    dec = [0] * n\n    inc_len = 0\n    dec_len = 0\n    i = 0\n    while i < n:\n        if a[i] > a[i - 1]:\n            inc[inc_len] = a[i]\n            inc_len += 1\n        else:\n            dec[dec_len] = a[i]\n            dec_len += 1\n        i += 1\n\n    if inc_len == 0 or dec_len == 0:\n        print(\"NO\")\n        return\n\n    inc = inc[:inc_len]\n    dec = dec[:dec_len]\n\n    print(\"YES\")\n    print(inc_len)\n    print(*inc)\n    print(dec_len)\n    print(*dec)\n\nsolve()", "\n\nfrom typing import List\n\n\ndef is_increasing(x: int, y: int) -> bool:\n    return x < y\n\n\ndef is_decreasing(x: int, y: int) -> bool:\n    return x > y\n\n\ndef is_increasing_sequence(arr: List[int]) -> bool:\n    for i in range(len(arr) - 1):\n        if not is_increasing(arr[i], arr[i + 1]):\n            return False\n    return True\n\n\ndef is_decreasing_sequence(arr: List[int]) -> bool:\n    for i in range(len(arr) - 1):\n        if not is_decreasing(arr[i], arr[i + 1]):\n            return False\n    return True\n\n\ndef is_increasing_or_decreasing_sequence(arr: List[int]) -> bool:\n    return is_increasing_sequence(arr) or is_decreasing_sequence(arr)\n\n\ndef split_sequence(arr: List[int]) -> List[List[int]]:\n    increasing_sequence = []\n    decreasing_sequence = []\n    for i in range(len(arr)):\n        if is_increasing_or_decreasing_sequence(arr[i:]) and is_increasing_or_decreasing_sequence(arr[:i]):\n            increasing_sequence = arr[:i]\n            decreasing_sequence = arr[i:]\n            break\n    return [increasing_sequence, decreasing_sequence]\n\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sequences = split_sequence(arr)\n    if not is_increasing_or_decreasing_sequence(sequences[0]) or not is_increasing_or_decreasing_sequence(sequences[1]):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(len(sequences[0]))\n        print(*sequences[0])\n        print(len(sequences[1]))\n        print(*sequences[1])\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    # check if there is contradiction\n    flag = False\n    for i in range(1, N):\n        if a[i] > a[i-1]:\n            flag = True\n        elif a[i] < a[i-1]:\n            flag = False\n        elif a[i] == a[i-1] and flag:\n            print(\"NO\")\n            return\n\n    # split\n    inc = []\n    dec = []\n    flag = False\n    for i in range(N):\n        if i == 0 or a[i] > a[i-1]:\n            inc.append(a[i])\n            flag = True\n        elif a[i] < a[i-1]:\n            dec.append(a[i])\n            flag = False\n        elif a[i] == a[i-1] and flag:\n            inc.append(a[i])\n        elif a[i] == a[i-1] and not flag:\n            dec.append(a[i])\n    \n    # output\n    print(\"YES\")\n    print(len(inc))\n    print(*inc)\n    print(len(dec))\n    print(*dec[::-1])\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef solve(n, a):\n    inc = []\n    dec = []\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            inc.append(a[i])\n        else:\n            dec.append(a[i])\n    if len(inc) + len(dec) != n:\n        return \"NO\"\n    return \"YES\\n{}\\n{}\\n{}\\n{}\".format(len(inc), \" \".join(map(str, inc)), len(dec), \" \".join(map(str, dec)))\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, a))\n\nif __name__ == '__main__':\n    main()", "\n\nfrom collections import defaultdict\nfrom sys import stdin\n\ndef main():\n\tn = int(stdin.readline())\n\tarr = list(map(int, stdin.readline().split()))\n\t\n\t# sort the array\n\tarr.sort()\n\t\n\t# create a hash table based on the array\n\tnum_counts = defaultdict(int)\n\tfor num in arr:\n\t\tnum_counts[num] += 1\n\t\n\t# find the median\n\tmedian_num = arr[n // 2]\n\t\n\t# create the increasing and decreasing sequences\n\tincreasing = []\n\tdecreasing = []\n\tfor num, count in num_counts.items():\n\t\tif num < median_num:\n\t\t\tincreasing.extend([num] * count)\n\t\telif num > median_num:\n\t\t\tdecreasing.extend([num] * count)\n\t\n\t# check if the median number is repeated\n\tif num_counts[median_num] > 1:\n\t\t# if the median number is repeated, then we can only use it in the decreasing sequence\n\t\t# if we use it in the increasing sequence, then the increasing sequence would be longer than the decreasing sequence\n\t\tdecreasing.extend([median_num] * num_counts[median_num])\n\telse:\n\t\t# otherwise we can use it in either sequence\n\t\tif len(increasing) <= len(decreasing):\n\t\t\tincreasing.append(median_num)\n\t\telse:\n\t\t\tdecreasing.append(median_num)\n\t\n\t# check if the increasing and decreasing sequences have the same length\n\tif len(increasing) != len(decreasing):\n\t\tprint(\"NO\")\n\t\treturn\n\t\n\t# print the increasing and decreasing sequences\n\tprint(\"YES\")\n\tprint(len(increasing))\n\tprint(\" \".join(map(str, increasing)))\n\tprint(len(decreasing))\n\tprint(\" \".join(map(str, decreasing)))\n\nif __name__ == \"__main__\":\n\tmain()"]