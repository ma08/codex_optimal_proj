["\n\ndef solution(n):\n    if n % 25 == 0:\n        return 0\n\n    n = str(n)\n    count = 0\n    i = 1\n    while i < len(n):\n        if n[i] == '0':\n            n = n[:i] + n[i+1:]\n            count += 1\n        else:\n            i += 1\n\n    return -1 if len(n) < 3 else count + 1\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solution(n))", "\n\n# Solution\n\nn = input()\n\nif len(n) == 1:\n    print(-1)\nelif len(n) == 2:\n    if int(n) % 25 == 0:\n        print(0)\n    else:\n        print(-1)\nelse:\n    moves = 0\n    while len(n) > 2:\n        if int(n[-2:]) % 25 == 0:\n            print(moves)\n            break\n        else:\n            n = n[:-2]\n            moves += 1\n\n    if len(n) == 2:\n        if int(n) % 25 == 0:\n            print(moves)\n        else:\n            print(-1)", "\n\ndef main():\n    \"\"\"\n    Find the minimum number of moves to obtain a number divisible by 25\n    \"\"\"\n    inp = input()\n    count = 0\n    for i in range(len(inp)-1):\n        if inp[i] == \"2\" and inp[i+1] == \"5\":\n            count += 1\n            inp = inp[:i] + \"5\" + inp[i+1:]\n    if int(inp) % 25 == 0:\n        print(count)\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()", "\n\n\ndef main():\n    n = input()\n    dig = [int(i) for i in n]\n    if dig[-2] == 0 and dig[-1] == 0:\n        print(0)\n        return\n    if dig[-2] == 0:\n        print(1)\n        return\n    if dig[-1] == 0:\n        print(1)\n        return\n    if dig[-1] == 5:\n        print(1)\n        return\n    if dig[-2] == 5:\n        print(2)\n        return\n    print(-1)\n\n\nif __name__ == '__main__':\n    main()", "\n\nn = input()\n\n# # O(n)\n# def get_num_moves(n):\n#     if n % 25 == 0:\n#         return 0\n#     elif len(n) == 1:\n#         return -1\n#     elif n[-1] == '0' or n[-1] == '5':\n#         return 1 + get_num_moves(n[:-1])\n#     else:\n#         return 1 + get_num_moves(n[:-2] + n[-1] + n[-2])\n\n# O(1)\ndef get_num_moves(n):\n    if n % 25 == 0:\n        return 0\n    elif len(n) == 1:\n        return -1\n    elif n[-1] == '0' or n[-1] == '5':\n        return 1 + get_num_moves(n[:-1])\n    else:\n        return 1 + get_num_moves(n[:-2] + n[-1] + n[-2])\n\nprint(get_num_moves(n))", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n % 25 == 0:\n        print 0\n    else:\n        n = str(n)\n        n = n[::-1]\n        moves = 0\n        for i in range(len(n)):\n            if n[i] == '0':\n                moves += 1\n            else:\n                break\n        if moves == len(n):\n            print -1\n        else:\n            print moves\n\nif __name__ == '__main__':\n    main()", "\n\ndef swap_nums(n):\n    if n % 25 == 0:\n        return 0\n    else:\n        if n % 5 == 0:\n            return 1\n        else:\n            return -1\n\nif __name__ == '__main__':\n    print(swap_nums(int(input())))"]