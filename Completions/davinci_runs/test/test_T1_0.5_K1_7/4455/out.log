2022-04-13 21:00:14.712879 """
In BerSoft $n$ programmers work, the programmer $i$ is characterized by a skill $r_i$.

A programmer $a$ can be a mentor of a programmer $b$ if and only if the skill of the programmer $a$ is strictly greater than the skill of the programmer $b$ $(r_a > r_b)$ and programmers $a$ and $b$ are not in a quarrel.

You are given the skills of each programmers and a list of $k$ pairs of the programmers, which are in a quarrel (pairs are unordered). For each programmer $i$, find the number of programmers, for which the programmer $i$ can be a mentor.


-----Input-----

The first line contains two integers $n$ and $k$ $(2 \le n \le 2 \cdot 10^5$, $0 \le k \le \min(2 \cdot 10^5, \frac{n \cdot (n - 1)}{2}))$ — total number of programmers and number of pairs of programmers which are in a quarrel.

The second line contains a sequence of integers $r_1, r_2, \dots, r_n$ $(1 \le r_i \le 10^{9})$, where $r_i$ equals to the skill of the $i$-th programmer.

Each of the following $k$ lines contains two distinct integers $x$, $y$ $(1 \le x, y \le n$, $x \ne y)$ — pair of programmers in a quarrel. The pairs are unordered, it means that if $x$ is in a quarrel with $y$ then $y$ is in a quarrel with $x$. Guaranteed, that for each pair $(x, y)$ there are no other pairs $(x, y)$ and $(y, x)$ in the input.


-----Output-----

Print $n$ integers, the $i$-th number should be equal to the number of programmers, for which the $i$-th programmer can be a mentor. Programmers are numbered in the same order that their skills are given in the input.


-----Examples-----
Input
4 2
10 4 10 15
1 2
4 3

Output
0 0 1 2 

Input
10 4
5 4 1 5 4 3 7 1 2 5
4 6
2 1
10 8
3 5

Output
5 4 0 5 3 3 9 0 2 5 



-----Note-----

In the first example, the first programmer can not be mentor of any other (because only the second programmer has a skill, lower than first programmer skill, but they are in a quarrel). The second programmer can not be mentor of any other programmer, because his skill is minimal among others. The third programmer can be a mentor of the second programmer. The fourth programmer can be a mentor of the first and of the second programmers. He can not be a mentor of the third programmer, because they are in a quarrel.
"""
2022-04-13 21:00:14.712895 --------------------------
2022-04-13 21:00:52.393887 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\nr = list(map(int, input().split()))\n\nq = [[] for i in range(n)]\nfor i in range(k):\n    x, y = map(int, input().split())\n    q[x - 1].append(y - 1)\n    q[y - 1].append(x - 1)\n\nfor i in range(n):\n    r[i] = (r[i], i)\n\nr.sort(reverse=True)\n\nfor i in range(n):\n    r[i] = r[i][1]\n\nans = [0] * n\n\nfor i in range(n):\n    for j in q[r[i]]:\n        ans[r[j]] += 1\n\nfor i in range(n):\n    print(ans[r[i]], end=' ')"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef solve(n, k, r, quarrel):\n    # Write your code here\n    # return a list of n integers\n    return [0] * n\n\n\nn, k = map(int, input().split())\nr = list(map(int, input().split()))\nquarrel = []\nfor _ in range(k):\n    quarrel.append(tuple(map(int, input().split())))\n\nans = solve(n, k, r, quarrel)\nprint(' '.join(map(str, ans)))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\nr = list(map(int, input().split()))\n\nq = []\nfor i in range(k):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    q.append((x, y))\n\ns = [0] * n\nfor i in range(n):\n    for j in range(n):\n        if i != j and r[i] > r[j] and (i, j) not in q:\n            s[i] += 1\n\nprint(' '.join(map(str, s)))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, K = map(int, input().split())\n    skills = [int(x) for x in input().split()]\n    pairs = []\n    for _ in range(K):\n        x, y = map(int, input().split())\n        pairs.append((x, y))\n    for i in range(N):\n        print(sum([1 for j in range(N) if j != i and (skills[j] < skills[i] and (i, j) not in pairs)]) + 1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\nskills = list(map(int, input().split()))\nquarrels = []\nfor i in range(k):\n    x, y = map(int, input().split())\n    quarrels.append((x, y))\n\n#print(n, k)\n#print(skills)\n#print(quarrels)\n\n\n# Brute force solution\n# Mentorships = [0] * n\n# for i in range(n):\n#     for j in range(n):\n#         if skills[i] > skills[j] and (i+1, j+1) not in quarrels:\n#             Mentorships[i] += 1\n# \n# print(' '.join(map(str, Mentorships)))\n\n# Optimized solution\nMentorships = [0] * n\nfor i in range(n):\n    for j in range(i+1, n):\n        if skills[i] > skills[j]:\n            Mentorships[i] += 1\n        else:\n            Mentorships[j] += 1\n\nfor i in range(k):\n    x, y = quarrels[i]\n    if skills[x-1] > skills[y-1]:\n        Mentorships[x-1] -= 1\n    else:\n        Mentorships[y-1] -= 1\n\nprint(' '.join(map(str, Mentorships)))"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    r = map(int, sys.stdin.readline().split())\n    d = [0] * n\n    for _ in range(k):\n        x, y = map(int, sys.stdin.readline().split())\n        d[x - 1] -= 1\n        d[y - 1] -= 1\n    for i in range(n):\n        for j in range(i):\n            if r[i] > r[j]:\n                d[i] += 1\n            if r[j] > r[i]:\n                d[j] += 1\n    sys.stdout.write(' '.join(map(str, d)))\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# n = int(input())\n# r = list(map(int, input().split()))\n# k = int(input())\n# q = [list(map(int, input().split())) for _ in range(k)]\n#\n#\n# def get_skills(n, r, q):\n#     skills = []\n#     for i in range(n):\n#         skills.append([])\n#     for i in range(n):\n#         for j in range(n):\n#             if i != j:\n#                 if r[i] > r[j] and not [i, j] in q and not [j, i] in q:\n#                     skills[i].append(j)\n#     return skills\n#\n#\n# def main(n, r, q):\n#     skills = get_skills(n, r, q)\n#     for i in range(n):\n#         print(len(skills[i]), end=\" \")\n#\n#\n# main(n, r, q)\n\n# n = int(input())\n# r = list(map(int, input().split()))\n# k = int(input())\n# q = [list(map(int, input().split())) for _ in range(k)]\n#\n#\n# def get_skills(n, r, q):\n#     skills = []\n#     for i in range(n):\n#         skills.append([])\n#     for i in range(n):\n#         for j in range(n):\n#             if i != j:\n#                 if r[i] > r[j] and not [i, j] in q and not [j, i] in q:\n#                     skills[i].append(j)\n#     return skills\n#\n#\n# def main(n, r, q):\n#     skills = get_skills(n, r, q)\n#     for i in range(n):\n#         print(len(skills[i]), end=\" \")\n#\n#\n# main(n, r, q)\n\n\n# n = int(input())\n# r = list(map(int, input().split()))\n# k = int(input())\n# q = [list(map(int, input().split())) for _ in range(k)]\n#\n#\n# def get_skills(n, r, q):\n#     skills = []\n#     for i in range(n):\n#         skills.append([])\n#     for i in range(n):\n#         for j in range(n):\n#             if i != j:\n#                 if r[i] > r[j] and not [i, j] in q and not [j, i] in q:\n#                     skills[i].append(j)\n#     return skills\n#\n#\n# def main(n, r, q):\n#     skills = get_skills(n, r, q)\n#     for i in range(n):\n#         print(len(skills[i]), end=\" \")\n#\n#\n# main(n, r, q)"
    }
  ],
  "created": 1649883614,
  "id": "cmpl-4weNy3DujePdajUgPNwLpxHPKsUUu",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 21:00:52.394164 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\nr = list(map(int, input().split()))\n\nq = [[] for i in range(n)]\nfor i in range(k):\n    x, y = map(int, input().split())\n    q[x - 1].append(y - 1)\n    q[y - 1].append(x - 1)\n\nfor i in range(n):\n    r[i] = (r[i], i)\n\nr.sort(reverse=True)\n\nfor i in range(n):\n    r[i] = r[i][1]\n\nans = [0] * n\n\nfor i in range(n):\n    for j in q[r[i]]:\n        ans[r[j]] += 1\n\nfor i in range(n):\n    print(ans[r[i]], end=' ')"
}
2022-04-13 21:00:52.394265 REASON stop
2022-04-13 21:00:52.394668 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef solve(n, k, r, quarrel):\n    # Write your code here\n    # return a list of n integers\n    return [0] * n\n\n\nn, k = map(int, input().split())\nr = list(map(int, input().split()))\nquarrel = []\nfor _ in range(k):\n    quarrel.append(tuple(map(int, input().split())))\n\nans = solve(n, k, r, quarrel)\nprint(' '.join(map(str, ans)))"
}
2022-04-13 21:00:52.394779 REASON stop
2022-04-13 21:00:52.395141 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\nr = list(map(int, input().split()))\n\nq = []\nfor i in range(k):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    q.append((x, y))\n\ns = [0] * n\nfor i in range(n):\n    for j in range(n):\n        if i != j and r[i] > r[j] and (i, j) not in q:\n            s[i] += 1\n\nprint(' '.join(map(str, s)))"
}
2022-04-13 21:00:52.395185 REASON stop
2022-04-13 21:00:52.424940 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, K = map(int, input().split())\n    skills = [int(x) for x in input().split()]\n    pairs = []\n    for _ in range(K):\n        x, y = map(int, input().split())\n        pairs.append((x, y))\n    for i in range(N):\n        print(sum([1 for j in range(N) if j != i and (skills[j] < skills[i] and (i, j) not in pairs)]) + 1)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 21:00:52.425048 REASON stop
2022-04-13 21:00:52.435335 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\nskills = list(map(int, input().split()))\nquarrels = []\nfor i in range(k):\n    x, y = map(int, input().split())\n    quarrels.append((x, y))\n\n#print(n, k)\n#print(skills)\n#print(quarrels)\n\n\n# Brute force solution\n# Mentorships = [0] * n\n# for i in range(n):\n#     for j in range(n):\n#         if skills[i] > skills[j] and (i+1, j+1) not in quarrels:\n#             Mentorships[i] += 1\n# \n# print(' '.join(map(str, Mentorships)))\n\n# Optimized solution\nMentorships = [0] * n\nfor i in range(n):\n    for j in range(i+1, n):\n        if skills[i] > skills[j]:\n            Mentorships[i] += 1\n        else:\n            Mentorships[j] += 1\n\nfor i in range(k):\n    x, y = quarrels[i]\n    if skills[x-1] > skills[y-1]:\n        Mentorships[x-1] -= 1\n    else:\n        Mentorships[y-1] -= 1\n\nprint(' '.join(map(str, Mentorships)))"
}
2022-04-13 21:00:52.435442 REASON stop
2022-04-13 21:00:52.436166 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    r = map(int, sys.stdin.readline().split())\n    d = [0] * n\n    for _ in range(k):\n        x, y = map(int, sys.stdin.readline().split())\n        d[x - 1] -= 1\n        d[y - 1] -= 1\n    for i in range(n):\n        for j in range(i):\n            if r[i] > r[j]:\n                d[i] += 1\n            if r[j] > r[i]:\n                d[j] += 1\n    sys.stdout.write(' '.join(map(str, d)))\n\nmain()"
}
2022-04-13 21:00:52.436226 REASON stop
2022-04-13 21:00:52.436706 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# n = int(input())\n# r = list(map(int, input().split()))\n# k = int(input())\n# q = [list(map(int, input().split())) for _ in range(k)]\n#\n#\n# def get_skills(n, r, q):\n#     skills = []\n#     for i in range(n):\n#         skills.append([])\n#     for i in range(n):\n#         for j in range(n):\n#             if i != j:\n#                 if r[i] > r[j] and not [i, j] in q and not [j, i] in q:\n#                     skills[i].append(j)\n#     return skills\n#\n#\n# def main(n, r, q):\n#     skills = get_skills(n, r, q)\n#     for i in range(n):\n#         print(len(skills[i]), end=\" \")\n#\n#\n# main(n, r, q)\n\n# n = int(input())\n# r = list(map(int, input().split()))\n# k = int(input())\n# q = [list(map(int, input().split())) for _ in range(k)]\n#\n#\n# def get_skills(n, r, q):\n#     skills = []\n#     for i in range(n):\n#         skills.append([])\n#     for i in range(n):\n#         for j in range(n):\n#             if i != j:\n#                 if r[i] > r[j] and not [i, j] in q and not [j, i] in q:\n#                     skills[i].append(j)\n#     return skills\n#\n#\n# def main(n, r, q):\n#     skills = get_skills(n, r, q)\n#     for i in range(n):\n#         print(len(skills[i]), end=\" \")\n#\n#\n# main(n, r, q)\n\n\n# n = int(input())\n# r = list(map(int, input().split()))\n# k = int(input())\n# q = [list(map(int, input().split())) for _ in range(k)]\n#\n#\n# def get_skills(n, r, q):\n#     skills = []\n#     for i in range(n):\n#         skills.append([])\n#     for i in range(n):\n#         for j in range(n):\n#             if i != j:\n#                 if r[i] > r[j] and not [i, j] in q and not [j, i] in q:\n#                     skills[i].append(j)\n#     return skills\n#\n#\n# def main(n, r, q):\n#     skills = get_skills(n, r, q)\n#     for i in range(n):\n#         print(len(skills[i]), end=\" \")\n#\n#\n# main(n, r, q)"
}
2022-04-13 21:00:52.436767 REASON stop
