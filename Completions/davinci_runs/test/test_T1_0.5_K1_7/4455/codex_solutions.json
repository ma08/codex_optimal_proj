["\n\nn, k = map(int, input().split())\nr = list(map(int, input().split()))\n\nq = []\nfor i in range(k):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    q.append((x, y))\n\ns = [0] * n\nfor i in range(n):\n    for j in range(n):\n        if i != j and r[i] > r[j] and (i, j) not in q:\n            s[i] += 1\n\nprint(' '.join(map(str, s)))", "\n\ndef solve(n, k, r, quarrel):\n    # Write your code here\n    # return a list of n integers\n    return [0] * n\n\n\nn, k = map(int, input().split())\nr = list(map(int, input().split()))\nquarrel = []\nfor _ in range(k):\n    quarrel.append(tuple(map(int, input().split())))\n\nans = solve(n, k, r, quarrel)\nprint(' '.join(map(str, ans)))", "\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\nr = list(map(int, input().split()))\n\nq = [[] for i in range(n)]\nfor i in range(k):\n    x, y = map(int, input().split())\n    q[x - 1].append(y - 1)\n    q[y - 1].append(x - 1)\n\nfor i in range(n):\n    r[i] = (r[i], i)\n\nr.sort(reverse=True)\n\nfor i in range(n):\n    r[i] = r[i][1]\n\nans = [0] * n\n\nfor i in range(n):\n    for j in q[r[i]]:\n        ans[r[j]] += 1\n\nfor i in range(n):\n    print(ans[r[i]], end=' ')", "\n\n# n = int(input())\n# r = list(map(int, input().split()))\n# k = int(input())\n# q = [list(map(int, input().split())) for _ in range(k)]\n#\n#\n# def get_skills(n, r, q):\n#     skills = []\n#     for i in range(n):\n#         skills.append([])\n#     for i in range(n):\n#         for j in range(n):\n#             if i != j:\n#                 if r[i] > r[j] and not [i, j] in q and not [j, i] in q:\n#                     skills[i].append(j)\n#     return skills\n#\n#\n# def main(n, r, q):\n#     skills = get_skills(n, r, q)\n#     for i in range(n):\n#         print(len(skills[i]), end=\" \")\n#\n#\n# main(n, r, q)\n\n# n = int(input())\n# r = list(map(int, input().split()))\n# k = int(input())\n# q = [list(map(int, input().split())) for _ in range(k)]\n#\n#\n# def get_skills(n, r, q):\n#     skills = []\n#     for i in range(n):\n#         skills.append([])\n#     for i in range(n):\n#         for j in range(n):\n#             if i != j:\n#                 if r[i] > r[j] and not [i, j] in q and not [j, i] in q:\n#                     skills[i].append(j)\n#     return skills\n#\n#\n# def main(n, r, q):\n#     skills = get_skills(n, r, q)\n#     for i in range(n):\n#         print(len(skills[i]), end=\" \")\n#\n#\n# main(n, r, q)\n\n\n# n = int(input())\n# r = list(map(int, input().split()))\n# k = int(input())\n# q = [list(map(int, input().split())) for _ in range(k)]\n#\n#\n# def get_skills(n, r, q):\n#     skills = []\n#     for i in range(n):\n#         skills.append([])\n#     for i in range(n):\n#         for j in range(n):\n#             if i != j:\n#                 if r[i] > r[j] and not [i, j] in q and not [j, i] in q:\n#                     skills[i].append(j)\n#     return skills\n#\n#\n# def main(n, r, q):\n#     skills = get_skills(n, r, q)\n#     for i in range(n):\n#         print(len(skills[i]), end=\" \")\n#\n#\n# main(n, r, q)", "\n\nn, k = map(int, input().split())\nskills = list(map(int, input().split()))\nquarrels = []\nfor i in range(k):\n    x, y = map(int, input().split())\n    quarrels.append((x, y))\n\n#print(n, k)\n#print(skills)\n#print(quarrels)\n\n\n# Brute force solution\n# Mentorships = [0] * n\n# for i in range(n):\n#     for j in range(n):\n#         if skills[i] > skills[j] and (i+1, j+1) not in quarrels:\n#             Mentorships[i] += 1\n# \n# print(' '.join(map(str, Mentorships)))\n\n# Optimized solution\nMentorships = [0] * n\nfor i in range(n):\n    for j in range(i+1, n):\n        if skills[i] > skills[j]:\n            Mentorships[i] += 1\n        else:\n            Mentorships[j] += 1\n\nfor i in range(k):\n    x, y = quarrels[i]\n    if skills[x-1] > skills[y-1]:\n        Mentorships[x-1] -= 1\n    else:\n        Mentorships[y-1] -= 1\n\nprint(' '.join(map(str, Mentorships)))", "\n\ndef main():\n    N, K = map(int, input().split())\n    skills = [int(x) for x in input().split()]\n    pairs = []\n    for _ in range(K):\n        x, y = map(int, input().split())\n        pairs.append((x, y))\n    for i in range(N):\n        print(sum([1 for j in range(N) if j != i and (skills[j] < skills[i] and (i, j) not in pairs)]) + 1)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    r = map(int, sys.stdin.readline().split())\n    d = [0] * n\n    for _ in range(k):\n        x, y = map(int, sys.stdin.readline().split())\n        d[x - 1] -= 1\n        d[y - 1] -= 1\n    for i in range(n):\n        for j in range(i):\n            if r[i] > r[j]:\n                d[i] += 1\n            if r[j] > r[i]:\n                d[j] += 1\n    sys.stdout.write(' '.join(map(str, d)))\n\nmain()"]