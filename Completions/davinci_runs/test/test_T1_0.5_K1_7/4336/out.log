2022-04-13 20:05:46.069442 """
There is a rectangle in a coordinate plane. The coordinates of the four vertices are (0,0), (W,0), (W,H), and (0,H).
You are given a point (x,y) which is within the rectangle or on its border. We will draw a straight line passing through (x,y) to cut the rectangle into two parts. Find the maximum possible area of the part whose area is not larger than that of the other. Additionally, determine if there are multiple ways to cut the rectangle and achieve that maximum.

-----Constraints-----
 - 1 \leq W,H \leq 10^9
 - 0\leq x\leq W
 - 0\leq y\leq H
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
W H x y

-----Output-----
Print the maximum possible area of the part whose area is not larger than that of the other, followed by 1 if there are multiple ways to cut the rectangle and achieve that maximum, and 0 otherwise.
The area printed will be judged correct when its absolute or relative error is at most 10^{-9}.

-----Sample Input-----
2 3 1 2

-----Sample Output-----
3.000000 0

The line x=1 gives the optimal cut, and no other line does.
"""
2022-04-13 20:05:46.069454 --------------------------
2022-04-13 20:07:47.932432 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    # Read input\n    W, H, x, y = map(int, input().split())\n\n    # Calculate the area of the rectangle\n    area = W * H\n\n    # Calculate the area of the half rectangle\n    # If the point is in the middle of the rectangle, there are two ways to cut the rectangle\n    if x == W/2 and y == H/2:\n        half_area = area / 2\n        multiple_ways = 1\n    # If the point is on one of the sides of the rectangle, the half is a triangle\n    elif x == 0 or x == W or y == 0 or y == H:\n        half_area = abs(W*y - H*x) / 2\n        multiple_ways = 0\n    # If the point is not on one of the sides of the rectangle, the half is a parallelogram\n    else:\n        half_area = abs(W*y - H*x)\n        multiple_ways = 0\n\n    # Print the result\n    print(\"{:.6f}\".format(half_area), multiple_ways)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport unittest\nfrom unittest import TestCase\nfrom typing import Tuple\n\n\ndef cut_rectangle(width: int, height: int, x: int, y: int) -> Tuple[float, int]:\n    area_1 = width * y\n    area_2 = height * x\n    area_3 = (width - x) * (height - y)\n    area_4 = x * (height - y)\n\n    max_area = max(area_1, area_2, area_3, area_4)\n\n    if max_area == area_1:\n        return max_area, x == 0 or x == width\n    elif max_area == area_2:\n        return max_area, y == 0 or y == height\n    elif max_area == area_3:\n        return max_area, x == 0 or x == width or y == 0 or y == height\n    else:\n        return max_area, x == width or y == 0 or y == height\n\n\nclass TestCutRectangle(TestCase):\n    def test_cut_rectangle(self):\n        self.assertEqual(cut_rectangle(2, 3, 1, 2), (3.0, 0))\n\n\nif __name__ == \"__main__\":\n    width, height, x, y = map(int, input().split())\n    max_area, multiple_ways = cut_rectangle(width, height, x, y)\n    print(f\"{max_area} {multiple_ways}\")"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef is_triangle(p1,p2,p3):\n    return (p1[0]*(p2[1]-p3[1]) + p2[0]*(p3[1]-p1[1]) + p3[0]*(p1[1]-p2[1])) != 0\n\ndef is_square(p1,p2,p3,p4):\n    return is_triangle(p1,p2,p3) and is_triangle(p1,p2,p4) and is_triangle(p1,p3,p4) and is_triangle(p2,p3,p4)\n\ndef get_area(p1,p2,p3):\n    return abs(p1[0]*(p2[1]-p3[1]) + p2[0]*(p3[1]-p1[1]) + p3[0]*(p1[1]-p2[1]))/2\n\ndef get_square_area(p1,p2,p3,p4):\n    return get_area(p1,p2,p3) + get_area(p1,p2,p4) + get_area(p1,p3,p4) + get_area(p2,p3,p4)\n\ndef get_line_equation(p1,p2):\n    a = p2[1] - p1[1]\n    b = p1[0] - p2[0]\n    c = p1[1]*p2[0] - p1[0]*p2[1]\n    return a,b,c\n\ndef get_line_intersection(p1,p2,p3,p4):\n    a1,b1,c1 = get_line_equation(p1,p2)\n    a2,b2,c2 = get_line_equation(p3,p4)\n    det = a1*b2 - a2*b1\n    if det == 0:\n        return None\n    else:\n        x = (b2*c1 - b1*c2)/det\n        y = (a1*c2 - a2*c1)/det\n        return (x,y)\n\ndef get_point_distance(p1,p2):\n    return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n\ndef get_point_distance_from_line(p1,p2,p3):\n    a,b,c = get_line_equation(p1,p2)\n    return abs(a*p3[0] + b*p3[1] + c)/math.sqrt(a**2 + b**2)\n\ndef main():\n    W,H,x,y = map(int, input().split())\n    p1 = (0,0)\n    p2 = (W,0)\n    p3 = (W,H)\n    p4 = (0,H)\n    p_cut = (x,y)\n    p_cut_d1 = get_point_distance(p_cut,p1)\n    p_cut_d2 = get_point_distance(p_cut,p2)\n    p_cut_d3 = get_point_distance(p_cut,p3)\n    p_cut_d4 = get_point_distance(p_cut,p4)\n    p_cut_d_min = min([p_cut_d1,p_cut_d2,p_cut_d3,p_cut_d4])\n    p_cut_d_max = max([p_cut_d1,p_cut_d2,p_cut_d3,p_cut_d4])\n    if p_cut_d_min == p_cut_d_max:\n        print(W*H/2, 1)\n    else:\n        if p_cut_d1 == p_cut_d_max:\n            p_cut_side = p2\n        elif p_cut_d2 == p_cut_d_max:\n            p_cut_side = p3\n        elif p_cut_d3 == p_cut_d_max:\n            p_cut_side = p4\n        elif p_cut_d4 == p_cut_d_max:\n            p_cut_side = p1\n        p_cut_side_d1 = get_point_distance(p_cut_side,p1)\n        p_cut_side_d2 = get_point_distance(p_cut_side,p2)\n        p_cut_side_d3 = get_point_distance(p_cut_side,p3)\n        p_cut_side_d4 = get_point_distance(p_cut_side,p4)\n        p_cut_side_d_min = min([p_cut_side_d1,p_cut_side_d2,p_cut_side_d3,p_cut_side_d4])\n        p_cut_side_d_max = max([p_cut_side_d1,p_cut_side_d2,p_cut_side_d3,p_cut_side_d4])\n        if p_cut_side_d_min == p_cut_side_d_max:\n            print(W*H/2, 1)\n        else:\n            if p_cut_side_d1 == p_cut_side_d_max:\n                p_cut_side_side = p2\n            elif p_cut_side_d2 == p_cut_side_d_max:\n                p_cut_side_side = p3\n            elif p_cut_side_d3 == p_cut_side_d_max:\n                p_cut_side_side = p4\n            elif p_cut_side_d4 == p_cut_side_d_max:\n                p_cut_side_side = p1\n            p_cut_side_side_d1 = get_point_distance(p_cut_side_side,p1)\n            p_cut_side_side_d2 = get_point_distance(p_cut_side_side,p2)\n            p_cut_side_side_d3 = get_point_distance(p_cut_side_side,p3)\n            p_cut_side_side_d4 = get_point_distance(p_cut_side_side,p4)\n            p_cut_side_side_d_min = min([p_cut_side_side_d1,p_cut_side_side_d2,p_cut_side_side_d3,p_cut_side_side_d4])\n            p_cut_side_side_d_max = max([p_cut_side_side_d1,p_cut_side_side_d2,p_cut_side_side_d3,p_cut_side_side_d4])\n            if p_cut_side_side_d_min == p_cut_side_side_d_max:\n                print(W*H/2, 1)\n            else:\n                if p_cut_side_side_d1 == p_cut_side_side_d_max:\n                    p_cut_side_side_side = p2\n                elif p_cut_side_side_d2 == p_cut_side_side_d_max:\n                    p_cut_side_side_side = p3\n                elif p_cut_side_side_d3 == p_cut_side_side_d_max:\n                    p_cut_side_side_side = p4\n                elif p_cut_side_side_d4 == p_cut_side_side_d_max:\n                    p_cut_side_side_side = p1\n                p_cut_side_side_side_d1 = get_point_distance(p_cut_side_side_side,p1)\n                p_cut_side_side_side_d2 = get_point_distance(p_cut_side_side_side,p2)\n                p_cut_side_side_side_d3 = get_point_distance(p_cut_side_side_side,p3)\n                p_cut_side_side_side_d4 = get_point_distance(p_cut_side_side_side,p4)\n                p_cut_side_side_side_d_min = min([p_cut_side_side_side_d1,p_cut_side_side_side_d2,p_cut_side_side_side_d3,p_cut_side_side_side_d4])\n                p_cut_side_side_side_d_max = max([p_cut_side_side_side_d1,p_cut_side_side_side_d2,p_cut_side_side_side_d3,p_cut_side_side_side_d4])\n                if p_cut_side_side_side_d_min == p_cut_side_side_side_d_max:\n                    print(W*H/2, 1)\n                else:\n                    if p_cut_side_side_side_d1 == p_cut_side_side_side_d_max:\n                        p_cut_side_side_side_side = p2\n                    elif p_cut_side_side_side_d2 == p_cut_side_side_side_d_max:\n                        p_cut_side_side_side_side = p3\n                    elif p_cut_side_side_side_d3 == p_cut_side_side_side_d_max:\n                        p_cut_side_side_side_side = p4\n                    elif p_cut_side_side_side_d4 == p_cut_side_side_side_d_max:\n                        p_cut_side_side_side_side = p1\n                    p_cut_side_side_side_side_d1 = get_point_distance(p_cut_side_side_side_side,p1)\n                    p_cut_side_side_side_side_d2 = get_point_distance(p_cut_side_side_side_side,p2)\n                    p_cut_side_side_side_side_d3 = get_point_distance(p_cut_side_side_side_side,p3)\n                    p_cut_side_side_side_side_d4 = get_point_distance(p_cut_side_side_side_side,p4)\n                    p_cut_side_side_side_side_d_min = min([p_cut_side_side_side_side_d1,p_cut_side_side_side_side_d2,p_cut_side_side_side_side_d3,p_cut_side_side_side_side_d4])\n                    p_cut_side_side_side_side_d_max = max([p_cut_side_side_side_side_d1,p_cut_side_side_side_side_d2,p_cut_side_side_side_side_d3,p_cut_side_side_side_side_d4])\n                    if p_cut_side_side_side_side_d_min == p_cut_side_side_side_side_d_max:\n                        print(W*H/2, 1)\n                    else:\n                        if p_cut_side_side_side_side_d1 == p_cut_side_side_side_side_d_max:\n                            p_cut_side_side_side_side_side = p2\n                        elif p_cut_side_side_side_side_d2 == p_cut_side_side_side_side_d_max:\n                            p_cut_side_side_side_side_side = p3\n                        elif p_cut_side_side_side_side_d3 == p_cut_side_side_side_side_d_max:\n                            p_cut_side_side_side_side_side = p4\n                        elif p_cut_side_side_side_side_d4 == p_cut_side_side_side_side_d_max:\n                            p_cut_side_side_side_side_side = p1\n                        p_cut_side_side_side_side_side_d1 = get_point_distance(p_cut_side_side_side_side_side,p1)\n                        p_cut_side_side_side_side_side_d2 = get_point_distance(p_cut_side_side_side_side_side,p2)\n                        p_cut_side_side_side_side_side_d3 = get_point_distance(p_cut_side_side_side_side_side,p3)\n                        p_cut_side_side_side_side_side_d4 = get_point_distance(p_cut_side_side_side_side_side,p4)\n                        p_cut_side_side_side_side_side_d_min = min([p_cut_side_side_side_side_side_d1,p_cut_side_side_side_side_side_d2,p_cut_side_side_side_side_side_d3,p_cut_side_side_side_side_side_d4])\n                        p_cut_side_side_side_side_side_d_max = max([p_cut_side_side_side_side_side_d1,p_cut_side_side_side_side_side_d2,p_cut_side_side_side_side_side_d3,p_cut_side_side_side_side_side_d4])\n                        if p_cut_side_side_side_side_side_d_min == p_cut_side_side_side_side_side_d_max:\n                            print(W*H/2, 1)\n                        else:\n                            if p_cut_side_side_side_side_side_d1 == p_cut_side_side_side_side_side_d_max:\n                                p_cut_side_side_side_side_side_side = p2\n                            elif p_cut_side_side_side_side_side_d2 == p_cut_side_side_side_side_side_d_max:\n                                p_cut_side_side_side_side_side_side = p3\n                            elif p_cut_side_side_side_side_side_d3 == p_cut_side_side_side_side_side_d_max:\n                                p_cut_side_side_side_side_side_side = p4\n                            elif p_cut_side_side_side_side_side_d4 == p_cut_side_side_side_side_side_d_max:\n                                p_cut_side_side_side_side_side_side = p1\n                            p_cut_side_side_side_side_side_side_d1 = get_point_distance(p_cut_side_side_side_side_side_side,p1)\n                            p_cut_side_side_side_side_side_side_d2 = get_point_distance(p_cut_side_side_side_side_side_side,p2)\n                            p_cut_side_side_side_side_side_side_d3 = get_point_distance(p_cut_side_side_side_side_side_side,p3)\n                            p_cut_side_side_side_side_side_side_d4 = get_point_distance(p_cut_side_side_side_side_side_side,p4)\n                            p_cut_side_side_side_side_side_side_d_min = min([p_cut_side_side_side_side_side_side_d1,p_cut_side_side_side_side_side_side_d2,p_cut_side_side_side_side_side_side_d3,p_cut_side_side_side_side_side_side_d4])\n                            p_cut_side_side_side_side_side_side_d_max = max([p_cut_side_side_side_side_side_side_d1,p_cut_side_side_side_side_side_side_d2,p_cut_side_side_side_side_side_side_d3,p_cut_side_side_side_side_side_side_d4])\n                            if p_cut_side_side_side_side_side_side_d_min == p_cut_side_side_side_side_side_side_d_max:\n                                print(W*H/2, 1)\n                            else:\n                                if p_cut_side_side_side_side_side"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip().split()\n    W = int(line[0])\n    H = int(line[1])\n    x = int(line[2])\n    y = int(line[3])\n\n    area = (W*y) + (H*x) - (W*H)\n\n    if x == 0 and y == 0:\n        print(0)\n        print(1)\n        return\n    elif x == 0 and y == H:\n        print(0)\n        print(1)\n        return\n    elif x == W and y == 0:\n        print(0)\n        print(1)\n        return\n    elif x == W and y == H:\n        print(0)\n        print(1)\n        return\n    elif x == 0:\n        print(area)\n        print(1)\n        return\n    elif x == W:\n        print(area)\n        print(1)\n        return\n    elif y == 0:\n        print(area)\n        print(1)\n        return\n    elif y == H:\n        print(area)\n        print(1)\n        return\n    elif (W-x) == y:\n        print(area)\n        print(1)\n        return\n    elif (H-y) == x:\n        print(area)\n        print(1)\n        return\n    else:\n        print(area)\n        print(0)\n        return\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    W, H, x, y = map(int, input().split())\n    area = W * H / 2.0\n    if x == 0 or x == W:\n        print(\"{0} {1}\".format(area, 1))\n    elif y == 0 or y == H:\n        print(\"{0} {1}\".format(area, 1))\n    else:\n        print(\"{0} {1}\".format(area, 0))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# \u521d\u671f\u5024\nW, H, x, y = map(int, input().split())\n\n# \u51fa\u529b\nprint(W*H/2, int(2*x==W and 2*y==H))"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    W, H, x, y = map(int, input().split())\n    if x == 0 or x == W or y == 0 or y == H:\n        print(W*H/2, 1)\n    else:\n        s = x*H\n        t = (W-x)*y\n        u = (W-x)*(H-y)\n        v = x*(H-y)\n        if s == t or s == u or s == v:\n            print(s, 1)\n        else:\n            print(s, 0)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649880346,
  "id": "cmpl-4wdXGsT1PN0ijF1DjVTV3KMygZz0K",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 20:07:47.932831 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    # Read input\n    W, H, x, y = map(int, input().split())\n\n    # Calculate the area of the rectangle\n    area = W * H\n\n    # Calculate the area of the half rectangle\n    # If the point is in the middle of the rectangle, there are two ways to cut the rectangle\n    if x == W/2 and y == H/2:\n        half_area = area / 2\n        multiple_ways = 1\n    # If the point is on one of the sides of the rectangle, the half is a triangle\n    elif x == 0 or x == W or y == 0 or y == H:\n        half_area = abs(W*y - H*x) / 2\n        multiple_ways = 0\n    # If the point is not on one of the sides of the rectangle, the half is a parallelogram\n    else:\n        half_area = abs(W*y - H*x)\n        multiple_ways = 0\n\n    # Print the result\n    print(\"{:.6f}\".format(half_area), multiple_ways)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 20:07:47.932884 REASON stop
2022-04-13 20:07:47.933264 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport unittest\nfrom unittest import TestCase\nfrom typing import Tuple\n\n\ndef cut_rectangle(width: int, height: int, x: int, y: int) -> Tuple[float, int]:\n    area_1 = width * y\n    area_2 = height * x\n    area_3 = (width - x) * (height - y)\n    area_4 = x * (height - y)\n\n    max_area = max(area_1, area_2, area_3, area_4)\n\n    if max_area == area_1:\n        return max_area, x == 0 or x == width\n    elif max_area == area_2:\n        return max_area, y == 0 or y == height\n    elif max_area == area_3:\n        return max_area, x == 0 or x == width or y == 0 or y == height\n    else:\n        return max_area, x == width or y == 0 or y == height\n\n\nclass TestCutRectangle(TestCase):\n    def test_cut_rectangle(self):\n        self.assertEqual(cut_rectangle(2, 3, 1, 2), (3.0, 0))\n\n\nif __name__ == \"__main__\":\n    width, height, x, y = map(int, input().split())\n    max_area, multiple_ways = cut_rectangle(width, height, x, y)\n    print(f\"{max_area} {multiple_ways}\")"
}
2022-04-13 20:07:47.933438 REASON stop
2022-04-13 20:07:47.933804 2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef is_triangle(p1,p2,p3):\n    return (p1[0]*(p2[1]-p3[1]) + p2[0]*(p3[1]-p1[1]) + p3[0]*(p1[1]-p2[1])) != 0\n\ndef is_square(p1,p2,p3,p4):\n    return is_triangle(p1,p2,p3) and is_triangle(p1,p2,p4) and is_triangle(p1,p3,p4) and is_triangle(p2,p3,p4)\n\ndef get_area(p1,p2,p3):\n    return abs(p1[0]*(p2[1]-p3[1]) + p2[0]*(p3[1]-p1[1]) + p3[0]*(p1[1]-p2[1]))/2\n\ndef get_square_area(p1,p2,p3,p4):\n    return get_area(p1,p2,p3) + get_area(p1,p2,p4) + get_area(p1,p3,p4) + get_area(p2,p3,p4)\n\ndef get_line_equation(p1,p2):\n    a = p2[1] - p1[1]\n    b = p1[0] - p2[0]\n    c = p1[1]*p2[0] - p1[0]*p2[1]\n    return a,b,c\n\ndef get_line_intersection(p1,p2,p3,p4):\n    a1,b1,c1 = get_line_equation(p1,p2)\n    a2,b2,c2 = get_line_equation(p3,p4)\n    det = a1*b2 - a2*b1\n    if det == 0:\n        return None\n    else:\n        x = (b2*c1 - b1*c2)/det\n        y = (a1*c2 - a2*c1)/det\n        return (x,y)\n\ndef get_point_distance(p1,p2):\n    return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n\ndef get_point_distance_from_line(p1,p2,p3):\n    a,b,c = get_line_equation(p1,p2)\n    return abs(a*p3[0] + b*p3[1] + c)/math.sqrt(a**2 + b**2)\n\ndef main():\n    W,H,x,y = map(int, input().split())\n    p1 = (0,0)\n    p2 = (W,0)\n    p3 = (W,H)\n    p4 = (0,H)\n    p_cut = (x,y)\n    p_cut_d1 = get_point_distance(p_cut,p1)\n    p_cut_d2 = get_point_distance(p_cut,p2)\n    p_cut_d3 = get_point_distance(p_cut,p3)\n    p_cut_d4 = get_point_distance(p_cut,p4)\n    p_cut_d_min = min([p_cut_d1,p_cut_d2,p_cut_d3,p_cut_d4])\n    p_cut_d_max = max([p_cut_d1,p_cut_d2,p_cut_d3,p_cut_d4])\n    if p_cut_d_min == p_cut_d_max:\n        print(W*H/2, 1)\n    else:\n        if p_cut_d1 == p_cut_d_max:\n            p_cut_side = p2\n        elif p_cut_d2 == p_cut_d_max:\n            p_cut_side = p3\n        elif p_cut_d3 == p_cut_d_max:\n            p_cut_side = p4\n        elif p_cut_d4 == p_cut_d_max:\n            p_cut_side = p1\n        p_cut_side_d1 = get_point_distance(p_cut_side,p1)\n        p_cut_side_d2 = get_point_distance(p_cut_side,p2)\n        p_cut_side_d3 = get_point_distance(p_cut_side,p3)\n        p_cut_side_d4 = get_point_distance(p_cut_side,p4)\n        p_cut_side_d_min = min([p_cut_side_d1,p_cut_side_d2,p_cut_side_d3,p_cut_side_d4])\n        p_cut_side_d_max = max([p_cut_side_d1,p_cut_side_d2,p_cut_side_d3,p_cut_side_d4])\n        if p_cut_side_d_min == p_cut_side_d_max:\n            print(W*H/2, 1)\n        else:\n            if p_cut_side_d1 == p_cut_side_d_max:\n                p_cut_side_side = p2\n            elif p_cut_side_d2 == p_cut_side_d_max:\n                p_cut_side_side = p3\n            elif p_cut_side_d3 == p_cut_side_d_max:\n                p_cut_side_side = p4\n            elif p_cut_side_d4 == p_cut_side_d_max:\n                p_cut_side_side = p1\n            p_cut_side_side_d1 = get_point_distance(p_cut_side_side,p1)\n            p_cut_side_side_d2 = get_point_distance(p_cut_side_side,p2)\n            p_cut_side_side_d3 = get_point_distance(p_cut_side_side,p3)\n            p_cut_side_side_d4 = get_point_distance(p_cut_side_side,p4)\n            p_cut_side_side_d_min = min([p_cut_side_side_d1,p_cut_side_side_d2,p_cut_side_side_d3,p_cut_side_side_d4])\n            p_cut_side_side_d_max = max([p_cut_side_side_d1,p_cut_side_side_d2,p_cut_side_side_d3,p_cut_side_side_d4])\n            if p_cut_side_side_d_min == p_cut_side_side_d_max:\n                print(W*H/2, 1)\n            else:\n                if p_cut_side_side_d1 == p_cut_side_side_d_max:\n                    p_cut_side_side_side = p2\n                elif p_cut_side_side_d2 == p_cut_side_side_d_max:\n                    p_cut_side_side_side = p3\n                elif p_cut_side_side_d3 == p_cut_side_side_d_max:\n                    p_cut_side_side_side = p4\n                elif p_cut_side_side_d4 == p_cut_side_side_d_max:\n                    p_cut_side_side_side = p1\n                p_cut_side_side_side_d1 = get_point_distance(p_cut_side_side_side,p1)\n                p_cut_side_side_side_d2 = get_point_distance(p_cut_side_side_side,p2)\n                p_cut_side_side_side_d3 = get_point_distance(p_cut_side_side_side,p3)\n                p_cut_side_side_side_d4 = get_point_distance(p_cut_side_side_side,p4)\n                p_cut_side_side_side_d_min = min([p_cut_side_side_side_d1,p_cut_side_side_side_d2,p_cut_side_side_side_d3,p_cut_side_side_side_d4])\n                p_cut_side_side_side_d_max = max([p_cut_side_side_side_d1,p_cut_side_side_side_d2,p_cut_side_side_side_d3,p_cut_side_side_side_d4])\n                if p_cut_side_side_side_d_min == p_cut_side_side_side_d_max:\n                    print(W*H/2, 1)\n                else:\n                    if p_cut_side_side_side_d1 == p_cut_side_side_side_d_max:\n                        p_cut_side_side_side_side = p2\n                    elif p_cut_side_side_side_d2 == p_cut_side_side_side_d_max:\n                        p_cut_side_side_side_side = p3\n                    elif p_cut_side_side_side_d3 == p_cut_side_side_side_d_max:\n                        p_cut_side_side_side_side = p4\n                    elif p_cut_side_side_side_d4 == p_cut_side_side_side_d_max:\n                        p_cut_side_side_side_side = p1\n                    p_cut_side_side_side_side_d1 = get_point_distance(p_cut_side_side_side_side,p1)\n                    p_cut_side_side_side_side_d2 = get_point_distance(p_cut_side_side_side_side,p2)\n                    p_cut_side_side_side_side_d3 = get_point_distance(p_cut_side_side_side_side,p3)\n                    p_cut_side_side_side_side_d4 = get_point_distance(p_cut_side_side_side_side,p4)\n                    p_cut_side_side_side_side_d_min = min([p_cut_side_side_side_side_d1,p_cut_side_side_side_side_d2,p_cut_side_side_side_side_d3,p_cut_side_side_side_side_d4])\n                    p_cut_side_side_side_side_d_max = max([p_cut_side_side_side_side_d1,p_cut_side_side_side_side_d2,p_cut_side_side_side_side_d3,p_cut_side_side_side_side_d4])\n                    if p_cut_side_side_side_side_d_min == p_cut_side_side_side_side_d_max:\n                        print(W*H/2, 1)\n                    else:\n                        if p_cut_side_side_side_side_d1 == p_cut_side_side_side_side_d_max:\n                            p_cut_side_side_side_side_side = p2\n                        elif p_cut_side_side_side_side_d2 == p_cut_side_side_side_side_d_max:\n                            p_cut_side_side_side_side_side = p3\n                        elif p_cut_side_side_side_side_d3 == p_cut_side_side_side_side_d_max:\n                            p_cut_side_side_side_side_side = p4\n                        elif p_cut_side_side_side_side_d4 == p_cut_side_side_side_side_d_max:\n                            p_cut_side_side_side_side_side = p1\n                        p_cut_side_side_side_side_side_d1 = get_point_distance(p_cut_side_side_side_side_side,p1)\n                        p_cut_side_side_side_side_side_d2 = get_point_distance(p_cut_side_side_side_side_side,p2)\n                        p_cut_side_side_side_side_side_d3 = get_point_distance(p_cut_side_side_side_side_side,p3)\n                        p_cut_side_side_side_side_side_d4 = get_point_distance(p_cut_side_side_side_side_side,p4)\n                        p_cut_side_side_side_side_side_d_min = min([p_cut_side_side_side_side_side_d1,p_cut_side_side_side_side_side_d2,p_cut_side_side_side_side_side_d3,p_cut_side_side_side_side_side_d4])\n                        p_cut_side_side_side_side_side_d_max = max([p_cut_side_side_side_side_side_d1,p_cut_side_side_side_side_side_d2,p_cut_side_side_side_side_side_d3,p_cut_side_side_side_side_side_d4])\n                        if p_cut_side_side_side_side_side_d_min == p_cut_side_side_side_side_side_d_max:\n                            print(W*H/2, 1)\n                        else:\n                            if p_cut_side_side_side_side_side_d1 == p_cut_side_side_side_side_side_d_max:\n                                p_cut_side_side_side_side_side_side = p2\n                            elif p_cut_side_side_side_side_side_d2 == p_cut_side_side_side_side_side_d_max:\n                                p_cut_side_side_side_side_side_side = p3\n                            elif p_cut_side_side_side_side_side_d3 == p_cut_side_side_side_side_side_d_max:\n                                p_cut_side_side_side_side_side_side = p4\n                            elif p_cut_side_side_side_side_side_d4 == p_cut_side_side_side_side_side_d_max:\n                                p_cut_side_side_side_side_side_side = p1\n                            p_cut_side_side_side_side_side_side_d1 = get_point_distance(p_cut_side_side_side_side_side_side,p1)\n                            p_cut_side_side_side_side_side_side_d2 = get_point_distance(p_cut_side_side_side_side_side_side,p2)\n                            p_cut_side_side_side_side_side_side_d3 = get_point_distance(p_cut_side_side_side_side_side_side,p3)\n                            p_cut_side_side_side_side_side_side_d4 = get_point_distance(p_cut_side_side_side_side_side_side,p4)\n                            p_cut_side_side_side_side_side_side_d_min = min([p_cut_side_side_side_side_side_side_d1,p_cut_side_side_side_side_side_side_d2,p_cut_side_side_side_side_side_side_d3,p_cut_side_side_side_side_side_side_d4])\n                            p_cut_side_side_side_side_side_side_d_max = max([p_cut_side_side_side_side_side_side_d1,p_cut_side_side_side_side_side_side_d2,p_cut_side_side_side_side_side_side_d3,p_cut_side_side_side_side_side_side_d4])\n                            if p_cut_side_side_side_side_side_side_d_min == p_cut_side_side_side_side_side_side_d_max:\n                                print(W*H/2, 1)\n                            else:\n                                if p_cut_side_side_side_side_side"
}
2022-04-13 20:07:47.933902 REASON length
2022-04-13 20:07:47.933908 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip().split()\n    W = int(line[0])\n    H = int(line[1])\n    x = int(line[2])\n    y = int(line[3])\n\n    area = (W*y) + (H*x) - (W*H)\n\n    if x == 0 and y == 0:\n        print(0)\n        print(1)\n        return\n    elif x == 0 and y == H:\n        print(0)\n        print(1)\n        return\n    elif x == W and y == 0:\n        print(0)\n        print(1)\n        return\n    elif x == W and y == H:\n        print(0)\n        print(1)\n        return\n    elif x == 0:\n        print(area)\n        print(1)\n        return\n    elif x == W:\n        print(area)\n        print(1)\n        return\n    elif y == 0:\n        print(area)\n        print(1)\n        return\n    elif y == H:\n        print(area)\n        print(1)\n        return\n    elif (W-x) == y:\n        print(area)\n        print(1)\n        return\n    elif (H-y) == x:\n        print(area)\n        print(1)\n        return\n    else:\n        print(area)\n        print(0)\n        return\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 20:07:47.933938 REASON stop
2022-04-13 20:07:47.951555 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    W, H, x, y = map(int, input().split())\n    area = W * H / 2.0\n    if x == 0 or x == W:\n        print(\"{0} {1}\".format(area, 1))\n    elif y == 0 or y == H:\n        print(\"{0} {1}\".format(area, 1))\n    else:\n        print(\"{0} {1}\".format(area, 0))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 20:07:47.951659 REASON stop
2022-04-13 20:07:47.970583 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# \u521d\u671f\u5024\nW, H, x, y = map(int, input().split())\n\n# \u51fa\u529b\nprint(W*H/2, int(2*x==W and 2*y==H))"
}
2022-04-13 20:07:47.970691 REASON stop
2022-04-13 20:07:47.971319 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    W, H, x, y = map(int, input().split())\n    if x == 0 or x == W or y == 0 or y == H:\n        print(W*H/2, 1)\n    else:\n        s = x*H\n        t = (W-x)*y\n        u = (W-x)*(H-y)\n        v = x*(H-y)\n        if s == t or s == u or s == v:\n            print(s, 1)\n        else:\n            print(s, 0)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 20:07:47.971386 REASON stop
