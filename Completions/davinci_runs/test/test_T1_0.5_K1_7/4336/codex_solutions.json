["\n\nimport math\n\ndef main():\n    W, H, x, y = map(int, input().split())\n    if x == 0 or x == W or y == 0 or y == H:\n        print(W*H/2, 1)\n    else:\n        s = x*H\n        t = (W-x)*y\n        u = (W-x)*(H-y)\n        v = x*(H-y)\n        if s == t or s == u or s == v:\n            print(s, 1)\n        else:\n            print(s, 0)\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef main():\n    # Read input\n    W, H, x, y = map(int, input().split())\n\n    # Calculate the area of the rectangle\n    area = W * H\n\n    # Calculate the area of the half rectangle\n    # If the point is in the middle of the rectangle, there are two ways to cut the rectangle\n    if x == W/2 and y == H/2:\n        half_area = area / 2\n        multiple_ways = 1\n    # If the point is on one of the sides of the rectangle, the half is a triangle\n    elif x == 0 or x == W or y == 0 or y == H:\n        half_area = abs(W*y - H*x) / 2\n        multiple_ways = 0\n    # If the point is not on one of the sides of the rectangle, the half is a parallelogram\n    else:\n        half_area = abs(W*y - H*x)\n        multiple_ways = 0\n\n    # Print the result\n    print(\"{:.6f}\".format(half_area), multiple_ways)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    W, H, x, y = map(int, input().split())\n    area = W * H / 2.0\n    if x == 0 or x == W:\n        print(\"{0} {1}\".format(area, 1))\n    elif y == 0 or y == H:\n        print(\"{0} {1}\".format(area, 1))\n    else:\n        print(\"{0} {1}\".format(area, 0))\n\nif __name__ == '__main__':\n    main()", "\n\n# \u521d\u671f\u5024\nW, H, x, y = map(int, input().split())\n\n# \u51fa\u529b\nprint(W*H/2, int(2*x==W and 2*y==H))", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip().split()\n    W = int(line[0])\n    H = int(line[1])\n    x = int(line[2])\n    y = int(line[3])\n\n    area = (W*y) + (H*x) - (W*H)\n\n    if x == 0 and y == 0:\n        print(0)\n        print(1)\n        return\n    elif x == 0 and y == H:\n        print(0)\n        print(1)\n        return\n    elif x == W and y == 0:\n        print(0)\n        print(1)\n        return\n    elif x == W and y == H:\n        print(0)\n        print(1)\n        return\n    elif x == 0:\n        print(area)\n        print(1)\n        return\n    elif x == W:\n        print(area)\n        print(1)\n        return\n    elif y == 0:\n        print(area)\n        print(1)\n        return\n    elif y == H:\n        print(area)\n        print(1)\n        return\n    elif (W-x) == y:\n        print(area)\n        print(1)\n        return\n    elif (H-y) == x:\n        print(area)\n        print(1)\n        return\n    else:\n        print(area)\n        print(0)\n        return\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport unittest\nfrom unittest import TestCase\nfrom typing import Tuple\n\n\ndef cut_rectangle(width: int, height: int, x: int, y: int) -> Tuple[float, int]:\n    area_1 = width * y\n    area_2 = height * x\n    area_3 = (width - x) * (height - y)\n    area_4 = x * (height - y)\n\n    max_area = max(area_1, area_2, area_3, area_4)\n\n    if max_area == area_1:\n        return max_area, x == 0 or x == width\n    elif max_area == area_2:\n        return max_area, y == 0 or y == height\n    elif max_area == area_3:\n        return max_area, x == 0 or x == width or y == 0 or y == height\n    else:\n        return max_area, x == width or y == 0 or y == height\n\n\nclass TestCutRectangle(TestCase):\n    def test_cut_rectangle(self):\n        self.assertEqual(cut_rectangle(2, 3, 1, 2), (3.0, 0))\n\n\nif __name__ == \"__main__\":\n    width, height, x, y = map(int, input().split())\n    max_area, multiple_ways = cut_rectangle(width, height, x, y)\n    print(f\"{max_area} {multiple_ways}\")"]