["", "\n\n\ndef find_parent(parent, x):\n    if parent[x] == x:\n        return x\n    parent[x] = find_parent(parent, parent[x])\n    return parent[x]\n\n\ndef union(parent, x, y):\n    x = find_parent(parent, x)\n    y = find_parent(parent, y)\n    if x != y:\n        parent[y] = x\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        parent = [i for i in range(n)]\n        gangs = {}\n        for i in range(n):\n            if a[i] not in gangs:\n                gangs[a[i]] = i\n            else:\n                union(parent, i, gangs[a[i]])\n        for i in range(n):\n            find_parent(parent, i)\n        if len(set(parent)) == n:\n            print(\"YES\")\n            for i in range(1, n):\n                print(i, parent[i])\n        else:\n            print(\"NO\")\n\n\nmain()", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if n == 2:\n            print(\"YES\")\n            print(1, 2)\n            continue\n        if len(set(a)) == 1:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        for i in range(1, n):\n            print(i, i + 1)\nmain()", "\ndef dfs(graph, start, visited):\n    visited[start] = True\n    for i in graph[start]:\n        if not visited[i]:\n            dfs(graph, i, visited)\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    graph = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i != j and a[i] != a[j]:\n                graph[i].append(j)\n    visited = [False for i in range(n)]\n    dfs(graph, 0, visited)\n    if False in visited:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(n):\n            for j in graph[i]:\n                print(i+1, j+1)\n                break", "\n\nimport sys\n\ndef readl():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve():\n    n = readl()[0]\n    a = readl()\n\n    g = {}\n    for i, x in enumerate(a):\n        if x not in g:\n            g[x] = []\n        g[x].append(i + 1)\n\n    if len(g) != n:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for i in range(n - 1):\n        x = g[a[i]].pop()\n        y = g[a[i + 1]].pop()\n        print(x, y)\n        g[a[i]].append(y)\n        g[a[i + 1]].append(x)\n\nt = int(input())\nfor i in range(t):\n    solve()", "\n\nimport pprint\n\n# def check_valid_input(n, a):\n#     if len(a) != n:\n#         return False\n#     return True\n\ndef is_connected(graph):\n    \"\"\"\n    Check if the graph is connected\n    \"\"\"\n    for key in graph:\n        if len(graph[key]) == 0:\n            return False\n    return True\n\ndef find_connected_components(graph):\n    \"\"\"\n    Find the number of connected components\n    \"\"\"\n    visited = []\n    connected_components = 0\n    for key in graph:\n        if key not in visited:\n            connected_components += 1\n            dfs(graph, visited, key)\n    return connected_components\n\ndef dfs(graph, visited, node):\n    visited.append(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph, visited, child)\n\ndef is_valid_graph(graph, a):\n    \"\"\"\n    Check if the graph is valid\n    \"\"\"\n    for key in graph:\n        for child in graph[key]:\n            if a[key] == a[child]:\n                return False\n    return True\n\ndef build_graph(n, a):\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    for i in range(n):\n        for j in range(n):\n            if a[i] != a[j]:\n                graph[i+1].append(j+1)\n    return graph\n\ndef build_roads(graph):\n    roads = []\n    visited = []\n    for key in graph:\n        if key not in visited:\n            if len(graph[key]) == 0:\n                return False\n            roads.append((key, graph[key][0]))\n            visited.append(key)\n            visited.append(graph[key][0])\n            graph[key].remove(graph[key][0])\n            graph[graph[key][0]].remove(key)\n    return roads\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        # if not check_valid_input(n, a):\n        #     print(\"NO\")\n        #     continue\n        graph = build_graph(n, a)\n        # print(graph)\n        if not is_connected(graph):\n            print(\"NO\")\n            continue\n        if not is_valid_graph(graph, a):\n            print(\"NO\")\n            continue\n        roads = build_roads(graph)\n        if not roads:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        for road in roads:\n            print(road[0], road[1])\n\nif __name__ == \"__main__\":\n    main()"]