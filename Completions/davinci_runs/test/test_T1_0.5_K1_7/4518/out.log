2022-04-13 21:26:56.074431 """
There are $n$ districts in the town, the $i$-th district belongs to the $a_i$-th bandit gang. Initially, no districts are connected to each other.

You are the mayor of the city and want to build $n-1$ two-way roads to connect all districts (two districts can be connected directly or through other connected districts).

If two districts belonging to the same gang are connected directly with a road, this gang will revolt.

You don't want this so your task is to build $n-1$ two-way roads in such a way that all districts are reachable from each other (possibly, using intermediate districts) and each pair of directly connected districts belong to different gangs, or determine that it is impossible to build $n-1$ roads to satisfy all the conditions.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 500$) — the number of test cases. Then $t$ test cases follow.

The first line of the test case contains one integer $n$ ($2 \le n \le 5000$) — the number of districts. The second line of the test case contains $n$ integers $a_1, a_2, \ldots, a_n$ ($1 \le a_i \le 10^9$), where $a_i$ is the gang the $i$-th district belongs to.

It is guaranteed that the sum of $n$ does not exceed $5000$ ($\sum n \le 5000$).


-----Output-----

For each test case, print:

  NO on the only line if it is impossible to connect all districts satisfying the conditions from the problem statement.  YES on the first line and $n-1$ roads on the next $n-1$ lines. Each road should be presented as a pair of integers $x_i$ and $y_i$ ($1 \le x_i, y_i \le n; x_i \ne y_i$), where $x_i$ and $y_i$ are two districts the $i$-th road connects. 

For each road $i$, the condition $a[x_i] \ne a[y_i]$ should be satisfied. Also, all districts should be reachable from each other (possibly, using intermediate districts).


-----Example-----
Input
4
5
1 2 2 1 3
3
1 1 1
4
1 1000 101 1000
4
1 2 3 4

Output
YES
1 3
3 5
5 4
1 2
NO
YES
1 2
2 3
3 4
YES
1 2
1 3
1 4
"""
2022-04-13 21:26:56.074450 --------------------------
2022-04-13 21:28:53.016795 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if n == 2:\n            print(\"YES\")\n            print(1, 2)\n            continue\n        if len(set(a)) == 1:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        for i in range(1, n):\n            print(i, i + 1)\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef readl():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve():\n    n = readl()[0]\n    a = readl()\n\n    g = {}\n    for i, x in enumerate(a):\n        if x not in g:\n            g[x] = []\n        g[x].append(i + 1)\n\n    if len(g) != n:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for i in range(n - 1):\n        x = g[a[i]].pop()\n        y = g[a[i + 1]].pop()\n        print(x, y)\n        g[a[i]].append(y)\n        g[a[i + 1]].append(x)\n\nt = int(input())\nfor i in range(t):\n    solve()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n\ndef find_parent(parent, x):\n    if parent[x] == x:\n        return x\n    parent[x] = find_parent(parent, parent[x])\n    return parent[x]\n\n\ndef union(parent, x, y):\n    x = find_parent(parent, x)\n    y = find_parent(parent, y)\n    if x != y:\n        parent[y] = x\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        parent = [i for i in range(n)]\n        gangs = {}\n        for i in range(n):\n            if a[i] not in gangs:\n                gangs[a[i]] = i\n            else:\n                union(parent, i, gangs[a[i]])\n        for i in range(n):\n            find_parent(parent, i)\n        if len(set(parent)) == n:\n            print(\"YES\")\n            for i in range(1, n):\n                print(i, parent[i])\n        else:\n            print(\"NO\")\n\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport pprint\n\n# def check_valid_input(n, a):\n#     if len(a) != n:\n#         return False\n#     return True\n\ndef is_connected(graph):\n    \"\"\"\n    Check if the graph is connected\n    \"\"\"\n    for key in graph:\n        if len(graph[key]) == 0:\n            return False\n    return True\n\ndef find_connected_components(graph):\n    \"\"\"\n    Find the number of connected components\n    \"\"\"\n    visited = []\n    connected_components = 0\n    for key in graph:\n        if key not in visited:\n            connected_components += 1\n            dfs(graph, visited, key)\n    return connected_components\n\ndef dfs(graph, visited, node):\n    visited.append(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph, visited, child)\n\ndef is_valid_graph(graph, a):\n    \"\"\"\n    Check if the graph is valid\n    \"\"\"\n    for key in graph:\n        for child in graph[key]:\n            if a[key] == a[child]:\n                return False\n    return True\n\ndef build_graph(n, a):\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    for i in range(n):\n        for j in range(n):\n            if a[i] != a[j]:\n                graph[i+1].append(j+1)\n    return graph\n\ndef build_roads(graph):\n    roads = []\n    visited = []\n    for key in graph:\n        if key not in visited:\n            if len(graph[key]) == 0:\n                return False\n            roads.append((key, graph[key][0]))\n            visited.append(key)\n            visited.append(graph[key][0])\n            graph[key].remove(graph[key][0])\n            graph[graph[key][0]].remove(key)\n    return roads\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        # if not check_valid_input(n, a):\n        #     print(\"NO\")\n        #     continue\n        graph = build_graph(n, a)\n        # print(graph)\n        if not is_connected(graph):\n            print(\"NO\")\n            continue\n        if not is_valid_graph(graph, a):\n            print(\"NO\")\n            continue\n        roads = build_roads(graph)\n        if not roads:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        for road in roads:\n            print(road[0], road[1])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\ndef dfs(graph, start, visited):\n    visited[start] = True\n    for i in graph[start]:\n        if not visited[i]:\n            dfs(graph, i, visited)\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    graph = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i != j and a[i] != a[j]:\n                graph[i].append(j)\n    visited = [False for i in range(n)]\n    dfs(graph, 0, visited)\n    if False in visited:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(n):\n            for j in graph[i]:\n                print(i+1, j+1)\n                break"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": ""
    }
  ],
  "created": 1649885216,
  "id": "cmpl-4wenoeOu2wKtP1cO5AlXX0KDzghpW",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 21:28:53.017210 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
}
2022-04-13 21:28:53.017350 REASON length
2022-04-13 21:28:53.017357 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if n == 2:\n            print(\"YES\")\n            print(1, 2)\n            continue\n        if len(set(a)) == 1:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        for i in range(1, n):\n            print(i, i + 1)\nmain()"
}
2022-04-13 21:28:53.017502 REASON stop
2022-04-13 21:28:53.017907 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef readl():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve():\n    n = readl()[0]\n    a = readl()\n\n    g = {}\n    for i, x in enumerate(a):\n        if x not in g:\n            g[x] = []\n        g[x].append(i + 1)\n\n    if len(g) != n:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for i in range(n - 1):\n        x = g[a[i]].pop()\n        y = g[a[i + 1]].pop()\n        print(x, y)\n        g[a[i]].append(y)\n        g[a[i + 1]].append(x)\n\nt = int(input())\nfor i in range(t):\n    solve()"
}
2022-04-13 21:28:53.017954 REASON stop
2022-04-13 21:28:53.018295 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n\ndef find_parent(parent, x):\n    if parent[x] == x:\n        return x\n    parent[x] = find_parent(parent, parent[x])\n    return parent[x]\n\n\ndef union(parent, x, y):\n    x = find_parent(parent, x)\n    y = find_parent(parent, y)\n    if x != y:\n        parent[y] = x\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        parent = [i for i in range(n)]\n        gangs = {}\n        for i in range(n):\n            if a[i] not in gangs:\n                gangs[a[i]] = i\n            else:\n                union(parent, i, gangs[a[i]])\n        for i in range(n):\n            find_parent(parent, i)\n        if len(set(parent)) == n:\n            print(\"YES\")\n            for i in range(1, n):\n                print(i, parent[i])\n        else:\n            print(\"NO\")\n\n\nmain()"
}
2022-04-13 21:28:53.018341 REASON stop
2022-04-13 21:28:53.035457 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport pprint\n\n# def check_valid_input(n, a):\n#     if len(a) != n:\n#         return False\n#     return True\n\ndef is_connected(graph):\n    \"\"\"\n    Check if the graph is connected\n    \"\"\"\n    for key in graph:\n        if len(graph[key]) == 0:\n            return False\n    return True\n\ndef find_connected_components(graph):\n    \"\"\"\n    Find the number of connected components\n    \"\"\"\n    visited = []\n    connected_components = 0\n    for key in graph:\n        if key not in visited:\n            connected_components += 1\n            dfs(graph, visited, key)\n    return connected_components\n\ndef dfs(graph, visited, node):\n    visited.append(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph, visited, child)\n\ndef is_valid_graph(graph, a):\n    \"\"\"\n    Check if the graph is valid\n    \"\"\"\n    for key in graph:\n        for child in graph[key]:\n            if a[key] == a[child]:\n                return False\n    return True\n\ndef build_graph(n, a):\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    for i in range(n):\n        for j in range(n):\n            if a[i] != a[j]:\n                graph[i+1].append(j+1)\n    return graph\n\ndef build_roads(graph):\n    roads = []\n    visited = []\n    for key in graph:\n        if key not in visited:\n            if len(graph[key]) == 0:\n                return False\n            roads.append((key, graph[key][0]))\n            visited.append(key)\n            visited.append(graph[key][0])\n            graph[key].remove(graph[key][0])\n            graph[graph[key][0]].remove(key)\n    return roads\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        # if not check_valid_input(n, a):\n        #     print(\"NO\")\n        #     continue\n        graph = build_graph(n, a)\n        # print(graph)\n        if not is_connected(graph):\n            print(\"NO\")\n            continue\n        if not is_valid_graph(graph, a):\n            print(\"NO\")\n            continue\n        roads = build_roads(graph)\n        if not roads:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        for road in roads:\n            print(road[0], road[1])\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 21:28:53.035573 REASON stop
2022-04-13 21:28:53.048290 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\ndef dfs(graph, start, visited):\n    visited[start] = True\n    for i in graph[start]:\n        if not visited[i]:\n            dfs(graph, i, visited)\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    graph = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i != j and a[i] != a[j]:\n                graph[i].append(j)\n    visited = [False for i in range(n)]\n    dfs(graph, 0, visited)\n    if False in visited:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(n):\n            for j in graph[i]:\n                print(i+1, j+1)\n                break"
}
2022-04-13 21:28:53.048390 REASON stop
2022-04-13 21:28:53.049181 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": ""
}
2022-04-13 21:28:53.049240 REASON stop
