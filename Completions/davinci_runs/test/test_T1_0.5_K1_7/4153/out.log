2022-04-13 18:49:54.373960 """
There are N cubes stacked vertically on a desk.
You are given a string S of length N. The color of the i-th cube from the bottom is red if the i-th character in S is 0, and blue if that character is 1.
You can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.
At most how many cubes can be removed?

-----Constraints-----
 - 1 \leq N \leq 10^5
 - |S| = N
 - Each character in S is 0 or 1.

-----Input-----
Input is given from Standard Input in the following format:
S

-----Output-----
Print the maximum number of cubes that can be removed.

-----Sample Input-----
0011

-----Sample Output-----
4

All four cubes can be removed, by performing the operation as follows:
 - Remove the second and third cubes from the bottom. Then, the fourth cube drops onto the first cube.
 - Remove the first and second cubes from the bottom.
"""
2022-04-13 18:49:54.373969 --------------------------
2022-04-13 18:50:07.617132 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom collections import deque\n\nS = input()\n\nstack = deque([])\n\nfor s in S:\n    stack.append(s)\n\nres = 0\nwhile len(stack) > 1:\n    if stack[0] == stack[1]:\n        stack.popleft()\n        stack.popleft()\n        res += 2\n    else:\n        stack.popleft()\n\nprint(res)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    s = str(sys.stdin.readline().strip())\n    zero = s.count(\"0\")\n    one = s.count(\"1\")\n    print(zero if zero > one else one)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ns = input()\n\nred = 0\nblue = 0\n\nfor i in range(len(s)):\n    if s[i] == \"0\":\n        red += 1\n    else:\n        blue += 1\n\nprint(min(red, blue) * 2)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main(n):\n    # n: length of the string\n    # s: string\n    s = input()\n\n    # count the number of 0s and 1s\n    num0 = s.count('0')\n    num1 = s.count('1')\n    # maximum number of cubes that can be removed\n    max_num = min(num0, num1) * 2\n    print(max_num)\n\n\nif __name__ == '__main__':\n    # input the length of the string\n    n = int(input())\n    main(n)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nN = int(input())\nS = input()\n\ncount = 0\nfor i in range(N):\n    if i == 0:\n        if S[i] != S[i+1]:\n            count += 1\n    elif i == N-1:\n        if S[i] != S[i-1]:\n            count += 1\n    else:\n        if S[i] != S[i-1] and S[i] != S[i+1]:\n            count += 1\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    S = input()\n    N = len(S)\n    cnt = 0\n    for i in range(N):\n        if S[i] == '0':\n            cnt += 1\n        elif S[i] == '1':\n            cnt -= 1\n        if cnt < 0:\n            cnt = 0\n    print(N-cnt)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\ns = input()\n\nstack = []\nans = 0\n\nfor i in range(n):\n    if len(stack) == 0:\n        stack.append(s[i])\n    else:\n        if stack[-1] != s[i]:\n            stack.pop()\n            ans += 2\n        else:\n            stack.append(s[i])\n\nprint(ans)"
    }
  ],
  "created": 1649875794,
  "id": "cmpl-4wcLqkstPRhHFQMjspzG0NWJkaCkj",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:50:07.617471 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom collections import deque\n\nS = input()\n\nstack = deque([])\n\nfor s in S:\n    stack.append(s)\n\nres = 0\nwhile len(stack) > 1:\n    if stack[0] == stack[1]:\n        stack.popleft()\n        stack.popleft()\n        res += 2\n    else:\n        stack.popleft()\n\nprint(res)"
}
2022-04-13 18:50:07.617513 REASON stop
2022-04-13 18:50:07.619162 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    s = str(sys.stdin.readline().strip())\n    zero = s.count(\"0\")\n    one = s.count(\"1\")\n    print(zero if zero > one else one)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:50:07.619302 REASON stop
2022-04-13 18:50:07.621288 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ns = input()\n\nred = 0\nblue = 0\n\nfor i in range(len(s)):\n    if s[i] == \"0\":\n        red += 1\n    else:\n        blue += 1\n\nprint(min(red, blue) * 2)"
}
2022-04-13 18:50:07.621399 REASON stop
2022-04-13 18:50:07.645558 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main(n):\n    # n: length of the string\n    # s: string\n    s = input()\n\n    # count the number of 0s and 1s\n    num0 = s.count('0')\n    num1 = s.count('1')\n    # maximum number of cubes that can be removed\n    max_num = min(num0, num1) * 2\n    print(max_num)\n\n\nif __name__ == '__main__':\n    # input the length of the string\n    n = int(input())\n    main(n)"
}
2022-04-13 18:50:07.645675 REASON stop
2022-04-13 18:50:07.657408 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nN = int(input())\nS = input()\n\ncount = 0\nfor i in range(N):\n    if i == 0:\n        if S[i] != S[i+1]:\n            count += 1\n    elif i == N-1:\n        if S[i] != S[i-1]:\n            count += 1\n    else:\n        if S[i] != S[i-1] and S[i] != S[i+1]:\n            count += 1\n\nprint(count)"
}
2022-04-13 18:50:07.657518 REASON stop
2022-04-13 18:50:07.677031 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    S = input()\n    N = len(S)\n    cnt = 0\n    for i in range(N):\n        if S[i] == '0':\n            cnt += 1\n        elif S[i] == '1':\n            cnt -= 1\n        if cnt < 0:\n            cnt = 0\n    print(N-cnt)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:50:07.677141 REASON stop
2022-04-13 18:50:07.683577 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\ns = input()\n\nstack = []\nans = 0\n\nfor i in range(n):\n    if len(stack) == 0:\n        stack.append(s[i])\n    else:\n        if stack[-1] != s[i]:\n            stack.pop()\n            ans += 2\n        else:\n            stack.append(s[i])\n\nprint(ans)"
}
2022-04-13 18:50:07.683684 REASON stop
