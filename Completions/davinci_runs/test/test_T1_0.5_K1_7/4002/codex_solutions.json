["", "\n\ndef solve(matrix, k):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    dp = [[[0, 0] for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j == 1:\n                dp[i][j][0] = dp[i - 1][j][0]\n                dp[i][j][1] = dp[i - 1][j][1] + matrix[i - 1][j - 1]\n            else:\n                dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + matrix[i - 1][j - 1])\n                dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] + matrix[i - 1][j - 1])\n\n    return dp[n][m][0]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(solve(matrix, k))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef solve(n, m, k, a):\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j], dp[i-1][j-1] + a[i-1][j-1])\n    return dp[n][m]\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split(\" \"))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, sys.stdin.readline().split(\" \"))))\n    print(solve(n, m, k, a))\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\n\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        dp[i][j] = dp[i][j-1]\n        for l in range(1, min(j, int(m/2))+1):\n            dp[i][j] = max(dp[i][j], dp[i-1][j-l] + sum(a[i-1][j-l:j]))\n\nprint(dp[n][m] - dp[n][m-int(m/2)])", "\n\nn, m, k = map(int, input().split())\na = [[int(x) for x in input().split()] for _ in range(n)]\n\ndef solve(n, m, k, a):\n    dp = [[[0 for _ in range(k)] for _ in range(m // 2 + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, min(m // 2 + 1, i + 1)):\n            for r in range(k):\n                dp[i][j][r] = max(dp[i - 1][j][r], dp[i - 1][j - 1][(r - a[i - 1][0] + k) % k] + a[i - 1][0],\n                                  dp[i - 1][j - 1][(r - a[i - 1][m - 1] + k) % k] + a[i - 1][m - 1])\n                if m > 2:\n                    for l in range(1, m - 1):\n                        dp[i][j][r] = max(dp[i][j][r], dp[i - 1][j - 1][(r - a[i - 1][l] + k) % k] + a[i - 1][l])\n    return dp[n][m // 2][0]\n\nprint(solve(n, m, k, a))", "\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    dp = [[0 for i in range(k)] for j in range(m+1)]\n    for i in range(n):\n        for j in range(m+1):\n            for p in range(k):\n                if j < m:\n                    dp[j+1][(p+a[i][j])%k] = max(dp[j+1][(p+a[i][j])%k], dp[j][p])\n        for j in range(m//2+1, m+1):\n            dp[j][0] = max(dp[j][0], dp[j-1][0])\n    print(dp[m][0])\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef solve(n, m, k, a):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j < m - j + 1:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1][j - 1])\n    return dp[n][m]\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    res = solve(n, m, k, a)\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()"]