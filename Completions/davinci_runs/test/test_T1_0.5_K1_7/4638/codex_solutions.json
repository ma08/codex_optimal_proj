["\n\nn, c = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# a[i] = a[i-1] + a[i]\nfor i in range(1, n-1):\n    a[i] += a[i-1]\n# b[i] = b[i-1] + b[i]\nfor i in range(1, n-1):\n    b[i] += b[i-1]\n\n# dp[i] = min(dp[i-1] + a[i], dp[i-1] + c + b[i])\ndp = [0] * n\nfor i in range(1, n):\n    dp[i] = min(dp[i-1] + a[i-1], dp[i-1] + c + b[i-1])\n\nprint(*dp)", "\n\nimport sys\n\ndef solve(a, b, c, n):\n    t = [0] * n\n    for i in range(1, n):\n        t[i] = min(t[i - 1] + a[i - 1], t[i - 1] + c + b[i - 1])\n    for i in reversed(range(1, n - 1)):\n        t[i] = min(t[i], t[i + 1] + a[i])\n    return t\n\ndef main():\n    n, c = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    print(' '.join(map(str, solve(a, b, c, n))))\n\nif __name__ == '__main__':\n    main()", "\n\n# n = 10\n# c = 2\n# a = [7, 6, 18, 6, 16, 18, 1, 17, 17]\n# b = [6, 9, 3, 10, 9, 1, 10, 1, 5]\n\nn = 10\nc = 1\na = [3, 2, 3, 1, 3, 3, 1, 4, 1]\nb = [1, 2, 3, 4, 4, 1, 2, 1, 3]\n\n# n = int(input())\n# c = int(input())\n# a = list(map(int, input().split()))\n# b = list(map(int, input().split()))\n\ndef min_time(n, c, a, b):\n    res = [0]*n\n    for i in range(1, n):\n        res[i] = min(res[i-1] + a[i-1], res[i-1] + c + b[i-1])\n    return res\n\nprint(*min_time(n, c, a, b))", "\n\nn, c = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# dp[i] = minimum time to reach the i-th floor from the 1st\ndp = [0]\n\n# Find the minimum time to reach the i-th floor from the 1st\nfor i in range(1, n):\n\t# Time to reach the i-th floor from the 1st using the stairs\n\tstairs = dp[i-1] + a[i-1]\n\t# Time to reach the i-th floor from the 1st using the elevator\n\televator = dp[i-1] + c + b[i-1]\n\t# Minimum time to reach the i-th floor from the 1st\n\tdp.append(min(stairs, elevator))\n\nprint(*dp)", "\n\ndef min_time_to_floor(n, c, a, b):\n    \"\"\"\n    Dynamic programming solution\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    T = [0]\n    for i in range(1, n):\n        # Take the elevator\n        t1 = T[i-1] + c + b[i-1]\n        # Take the stairs\n        t2 = T[i-1] + a[i-1]\n        # Take the elevator from the previous floor\n        t3 = T[i-2] + c + b[i-2] if i >= 2 else float(\"inf\")\n        # Take the stairs from the previous floor\n        t4 = T[i-2] + a[i-2] + a[i-1] if i >= 2 else float(\"inf\")\n        # Take the elevator from two floors below\n        t5 = T[i-3] + c + b[i-3] + b[i-2] + b[i-1] if i >= 3 else float(\"inf\")\n        # Take the stairs from two floors below\n        t6 = T[i-3] + a[i-3] + a[i-2] + a[i-1] if i >= 3 else float(\"inf\")\n        T.append(min(t1, t2, t3, t4, t5, t6))\n    return T\n\n\ndef main():\n    n, c = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    T = min_time_to_floor(n, c, a, b)\n    print(\" \".join(map(str, T)))\n\n\nif __name__ == \"__main__\":\n    main()", "\n\n# SOLUTION\nn, c = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nt = [0]\nfor i in range(n - 1):\n    t.append(min(t[i] + a[i], t[i] + c + b[i]))\n\nprint(*t)", "\n\nn, c = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n\ndef elevator(i, j):\n    return c + sum(b[i:j])\n\n\ndef stair(i, j):\n    return sum(a[i:j])\n\n\ndef min_time(i):\n    if i == 0:\n        return 0\n    elif i == 1:\n        return min(a[0], b[0] + c)\n    else:\n        return min(min_time(i - 1) + a[i - 1], min_time(i - 2) + elevator(i - 2, i))\n\n\nprint(*[min_time(i) for i in range(n)])"]