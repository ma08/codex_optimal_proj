["\n\nimport sys\n\nnum_tests = int(input())\n\nfor i in range(num_tests):\n    s = input()\n    m = int(input())\n    b = [int(x) for x in input().split()]\n    assert len(b) == m\n\n    def is_valid(s, b):\n        if len(s) != len(b):\n            return False\n        for i in range(len(s)):\n            distance = 0\n            for j in range(len(s)):\n                if s[j] > s[i]:\n                    distance += abs(i - j)\n            if distance != b[i]:\n                return False\n        return True\n\n    def permute(s, b):\n        if len(s) == 0:\n            return\n        if is_valid(s, b):\n            print(s)\n            sys.exit(0)\n        for i in range(len(s)):\n            permute(s[:i] + s[i+1:], b)\n\n    permute(s, b)", "\n\n\nimport sys\nimport itertools\n\ndef solve(s, b):\n    for p in itertools.permutations(s):\n        if list(map(lambda x: sum(map(lambda t: abs(t), x)), zip(b, [i+1 for i in range(len(b))]))) == list(map(lambda x: sum(map(lambda t: abs(t), x)), zip(b, [i+1 for i in range(len(b))]), p)):\n            return ''.join(p)\n\nq = int(sys.stdin.readline())\nfor _ in range(q):\n    s = sys.stdin.readline().strip()\n    m = int(sys.stdin.readline())\n    b = list(map(int, sys.stdin.readline().strip().split()))\n    print(solve(s, b))", "\n\nimport sys\n\ndef solve(s, b):\n    assert len(s) == len(b)\n    t = ''\n    for i in range(len(s)):\n        if b[i] == 0:\n            t += s[i]\n    for i in range(len(s)):\n        if b[i] > 0:\n            t = s[i] + t\n    return t\n\nq = int(sys.stdin.readline())\nfor i in range(q):\n    s = sys.stdin.readline().strip()\n    m = int(sys.stdin.readline())\n    b = [int(x) for x in sys.stdin.readline().strip().split()]\n    print solve(s, b)", "\n\nfrom collections import defaultdict\n\ndef polycarp(s, m, b):\n    if m == 1:\n        return s\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if b[0] == 0:\n            return s[1]\n        else:\n            return s[0]\n    if len(s) == 3:\n        if b[0] == 0:\n            return s[1:]\n        if b[1] == 0:\n            return s[0]+s[2]\n        if b[2] == 0:\n            return s[:2]\n    if len(s) == 4:\n        if b[0] == 0:\n            return s[1:]\n        if b[1] == 0:\n            return s[0]+s[2:]\n        if b[2] == 0:\n            return s[:2]+s[3]\n        if b[3] == 0:\n            return s[:3]\n    return s\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        print(polycarp(s, m, b))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = [int(i) for i in input().split()]\n        find_t(s, m, b)\n\ndef find_t(s, m, b):\n    s = sorted(s)\n    t = \"\"\n    b_temp = 0\n    for i in range(len(b)):\n        b_temp = b[i]\n        for j in range(len(s)):\n            if b_temp == 0:\n                t += s[j]\n                s[j] = \"\"\n                break\n            if b_temp >= j+1:\n                b_temp -= j+1\n            else:\n                t += s[j]\n                s[j] = \"\"\n                break\n    print(t)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    num_of_tests = int(input())\n    for i in range(num_of_tests):\n        s = input()\n        m = int(input())\n        b = list(map(int,input().split()))\n        print(get_t(s,m,b))\n\ndef get_t(s,m,b):\n    s = list(s)\n    b_copy = b.copy()\n    t = []\n    for i in range(m):\n        if i == 0:\n            t.append(s[0])\n            s.pop(0)\n        else:\n            if b_copy[i] == 0:\n                t.append(s[0])\n                s.pop(0)\n            else:\n                for j in range(len(s)):\n                    if ord(s[j]) > ord(t[i-1]):\n                        b_copy[i] -= abs(j-i)\n                        if b_copy[i] == 0:\n                            t.append(s[j])\n                            s.pop(j)\n                            break\n    return ''.join(t)\n\nif __name__ == '__main__':\n    main()"]