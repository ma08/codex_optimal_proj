2022-04-13 18:08:19.103317 """
Polycarp wrote on the board a string $s$ containing only lowercase Latin letters ('a'-'z'). This string is known for you and given in the input.

After that, he erased some letters from the string $s$, and he rewrote the remaining letters in any order. As a result, he got some new string $t$. You have to find it with some additional information.

Suppose that the string $t$ has length $m$ and the characters are numbered from left to right from $1$ to $m$. You are given a sequence of $m$ integers: $b_1, b_2, \ldots, b_m$, where $b_i$ is the sum of the distances $|i-j|$ from the index $i$ to all such indices $j$ that $t_j > t_i$ (consider that 'a'<'b'<...<'z'). In other words, to calculate $b_i$, Polycarp finds all such indices $j$ that the index $j$ contains a letter that is later in the alphabet than $t_i$ and sums all the values $|i-j|$.

For example, if $t$ = "abzb", then:  since $t_1$='a', all other indices contain letters which are later in the alphabet, that is: $b_1=|1-2|+|1-3|+|1-4|=1+2+3=6$;  since $t_2$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_2=|2-3|=1$;  since $t_3$='z', then there are no indexes $j$ such that $t_j>t_i$, thus $b_3=0$;  since $t_4$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_4=|4-3|=1$. 

Thus, if $t$ = "abzb", then $b=[6,1,0,1]$.

Given the string $s$ and the array $b$, find any possible string $t$ for which the following two requirements are fulfilled simultaneously:  $t$ is obtained from $s$ by erasing some letters (possibly zero) and then writing the rest in any order;  the array, constructed from the string $t$ according to the rules above, equals to the array $b$ specified in the input data. 


-----Input-----

The first line contains an integer $q$ ($1 \le q \le 100$)Â â€” the number of test cases in the test. Then $q$ test cases follow.

Each test case consists of three lines:  the first line contains string $s$, which has a length from $1$ to $50$ and consists of lowercase English letters;  the second line contains positive integer $m$ ($1 \le m \le |s|$), where $|s|$ is the length of the string $s$, and $m$ is the length of the array $b$;  the third line contains the integers $b_1, b_2, \dots, b_m$ ($0 \le b_i \le 1225$). 

It is guaranteed that in each test case an answer exists.


-----Output-----

Output $q$ lines: the $k$-th of them should contain the answer (string $t$) to the $k$-th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.


-----Example-----
Input
4
abac
3
2 1 0
abc
1
0
abba
3
1 0 1
ecoosdcefr
10
38 13 24 14 11 5 3 24 17 0

Output
aac
b
aba
codeforces



-----Note-----

In the first test case, such strings $t$ are suitable: "aac', "aab".

In the second test case, such trings $t$ are suitable: "a", "b", "c".

In the third test case, only the string $t$ equals to "aba" is suitable, but the character 'b' can be from the second or third position.
"""
2022-04-13 18:08:19.103334 --------------------------
2022-04-13 18:10:14.499720 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom collections import defaultdict\n\ndef polycarp(s, m, b):\n    if m == 1:\n        return s\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if b[0] == 0:\n            return s[1]\n        else:\n            return s[0]\n    if len(s) == 3:\n        if b[0] == 0:\n            return s[1:]\n        if b[1] == 0:\n            return s[0]+s[2]\n        if b[2] == 0:\n            return s[:2]\n    if len(s) == 4:\n        if b[0] == 0:\n            return s[1:]\n        if b[1] == 0:\n            return s[0]+s[2:]\n        if b[2] == 0:\n            return s[:2]+s[3]\n        if b[3] == 0:\n            return s[:3]\n    return s\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        print(polycarp(s, m, b))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    num_of_tests = int(input())\n    for i in range(num_of_tests):\n        s = input()\n        m = int(input())\n        b = list(map(int,input().split()))\n        print(get_t(s,m,b))\n\ndef get_t(s,m,b):\n    s = list(s)\n    b_copy = b.copy()\n    t = []\n    for i in range(m):\n        if i == 0:\n            t.append(s[0])\n            s.pop(0)\n        else:\n            if b_copy[i] == 0:\n                t.append(s[0])\n                s.pop(0)\n            else:\n                for j in range(len(s)):\n                    if ord(s[j]) > ord(t[i-1]):\n                        b_copy[i] -= abs(j-i)\n                        if b_copy[i] == 0:\n                            t.append(s[j])\n                            s.pop(j)\n                            break\n    return ''.join(t)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = [int(i) for i in input().split()]\n        find_t(s, m, b)\n\ndef find_t(s, m, b):\n    s = sorted(s)\n    t = \"\"\n    b_temp = 0\n    for i in range(len(b)):\n        b_temp = b[i]\n        for j in range(len(s)):\n            if b_temp == 0:\n                t += s[j]\n                s[j] = \"\"\n                break\n            if b_temp >= j+1:\n                b_temp -= j+1\n            else:\n                t += s[j]\n                s[j] = \"\"\n                break\n    print(t)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\nnum_tests = int(input())\n\nfor i in range(num_tests):\n    s = input()\n    m = int(input())\n    b = [int(x) for x in input().split()]\n    assert len(b) == m\n\n    def is_valid(s, b):\n        if len(s) != len(b):\n            return False\n        for i in range(len(s)):\n            distance = 0\n            for j in range(len(s)):\n                if s[j] > s[i]:\n                    distance += abs(i - j)\n            if distance != b[i]:\n                return False\n        return True\n\n    def permute(s, b):\n        if len(s) == 0:\n            return\n        if is_valid(s, b):\n            print(s)\n            sys.exit(0)\n        for i in range(len(s)):\n            permute(s[:i] + s[i+1:], b)\n\n    permute(s, b)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n\nimport sys\nimport itertools\n\ndef solve(s, b):\n    for p in itertools.permutations(s):\n        if list(map(lambda x: sum(map(lambda t: abs(t), x)), zip(b, [i+1 for i in range(len(b))]))) == list(map(lambda x: sum(map(lambda t: abs(t), x)), zip(b, [i+1 for i in range(len(b))]), p)):\n            return ''.join(p)\n\nq = int(sys.stdin.readline())\nfor _ in range(q):\n    s = sys.stdin.readline().strip()\n    m = int(sys.stdin.readline())\n    b = list(map(int, sys.stdin.readline().strip().split()))\n    print(solve(s, b))"
    },
    {
      "finish_reason": "length",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport re\n\ndef find_index(index, s):\n    \"\"\"\n    find the index of the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the index\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return i\n    return -1\n\ndef find_char(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_2(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_3(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_4(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_5(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_6(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_7(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_8(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_9(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_10(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_11(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_12(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_13(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_14(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_15(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_16(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_17(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_18(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_19(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_20(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_21(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_22(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_23(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_24(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_25(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_26(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_27(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_28(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_29(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_30(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_31(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_32(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_33(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_34(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_35(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_36(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(s, b):\n    assert len(s) == len(b)\n    t = ''\n    for i in range(len(s)):\n        if b[i] == 0:\n            t += s[i]\n    for i in range(len(s)):\n        if b[i] > 0:\n            t = s[i] + t\n    return t\n\nq = int(sys.stdin.readline())\nfor i in range(q):\n    s = sys.stdin.readline().strip()\n    m = int(sys.stdin.readline())\n    b = [int(x) for x in sys.stdin.readline().strip().split()]\n    print solve(s, b)"
    }
  ],
  "created": 1649873299,
  "id": "cmpl-4wbhbQS0kksvqogQYpApGVDJFb9n1",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:10:14.500140 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom collections import defaultdict\n\ndef polycarp(s, m, b):\n    if m == 1:\n        return s\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if b[0] == 0:\n            return s[1]\n        else:\n            return s[0]\n    if len(s) == 3:\n        if b[0] == 0:\n            return s[1:]\n        if b[1] == 0:\n            return s[0]+s[2]\n        if b[2] == 0:\n            return s[:2]\n    if len(s) == 4:\n        if b[0] == 0:\n            return s[1:]\n        if b[1] == 0:\n            return s[0]+s[2:]\n        if b[2] == 0:\n            return s[:2]+s[3]\n        if b[3] == 0:\n            return s[:3]\n    return s\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        print(polycarp(s, m, b))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:10:14.500189 REASON stop
2022-04-13 18:10:14.500578 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    num_of_tests = int(input())\n    for i in range(num_of_tests):\n        s = input()\n        m = int(input())\n        b = list(map(int,input().split()))\n        print(get_t(s,m,b))\n\ndef get_t(s,m,b):\n    s = list(s)\n    b_copy = b.copy()\n    t = []\n    for i in range(m):\n        if i == 0:\n            t.append(s[0])\n            s.pop(0)\n        else:\n            if b_copy[i] == 0:\n                t.append(s[0])\n                s.pop(0)\n            else:\n                for j in range(len(s)):\n                    if ord(s[j]) > ord(t[i-1]):\n                        b_copy[i] -= abs(j-i)\n                        if b_copy[i] == 0:\n                            t.append(s[j])\n                            s.pop(j)\n                            break\n    return ''.join(t)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:10:14.500683 REASON stop
2022-04-13 18:10:14.501018 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        s = input()\n        m = int(input())\n        b = [int(i) for i in input().split()]\n        find_t(s, m, b)\n\ndef find_t(s, m, b):\n    s = sorted(s)\n    t = \"\"\n    b_temp = 0\n    for i in range(len(b)):\n        b_temp = b[i]\n        for j in range(len(s)):\n            if b_temp == 0:\n                t += s[j]\n                s[j] = \"\"\n                break\n            if b_temp >= j+1:\n                b_temp -= j+1\n            else:\n                t += s[j]\n                s[j] = \"\"\n                break\n    print(t)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:10:14.501062 REASON stop
2022-04-13 18:10:14.524350 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\nnum_tests = int(input())\n\nfor i in range(num_tests):\n    s = input()\n    m = int(input())\n    b = [int(x) for x in input().split()]\n    assert len(b) == m\n\n    def is_valid(s, b):\n        if len(s) != len(b):\n            return False\n        for i in range(len(s)):\n            distance = 0\n            for j in range(len(s)):\n                if s[j] > s[i]:\n                    distance += abs(i - j)\n            if distance != b[i]:\n                return False\n        return True\n\n    def permute(s, b):\n        if len(s) == 0:\n            return\n        if is_valid(s, b):\n            print(s)\n            sys.exit(0)\n        for i in range(len(s)):\n            permute(s[:i] + s[i+1:], b)\n\n    permute(s, b)"
}
2022-04-13 18:10:14.524452 REASON stop
2022-04-13 18:10:14.548837 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n\nimport sys\nimport itertools\n\ndef solve(s, b):\n    for p in itertools.permutations(s):\n        if list(map(lambda x: sum(map(lambda t: abs(t), x)), zip(b, [i+1 for i in range(len(b))]))) == list(map(lambda x: sum(map(lambda t: abs(t), x)), zip(b, [i+1 for i in range(len(b))]), p)):\n            return ''.join(p)\n\nq = int(sys.stdin.readline())\nfor _ in range(q):\n    s = sys.stdin.readline().strip()\n    m = int(sys.stdin.readline())\n    b = list(map(int, sys.stdin.readline().strip().split()))\n    print(solve(s, b))"
}
2022-04-13 18:10:14.548940 REASON stop
2022-04-13 18:10:14.549763 5 {
  "finish_reason": "length",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport re\n\ndef find_index(index, s):\n    \"\"\"\n    find the index of the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the index\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return i\n    return -1\n\ndef find_char(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_2(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_3(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_4(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_5(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_6(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_7(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_8(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_9(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_10(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_11(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_12(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_13(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_14(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_15(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_16(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_17(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_18(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_19(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_20(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_21(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_22(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_23(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_24(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_25(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_26(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_27(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_28(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_29(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_30(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_31(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_32(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_33(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_34(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_35(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index]:\n            return s[i]\n    return ''\n\ndef find_char_36(index, s):\n    \"\"\"\n    find the first character in the string s that is equal to or greater than the character at the index\n    :param index: the index of the character in the string s\n    :param s: the string s\n    :return: the character\n    \"\"\"\n    for i in range(index + 1, len(s)):\n        if s[i] >= s[index"
}
2022-04-13 18:10:14.549909 REASON length
2022-04-13 18:10:14.549916 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(s, b):\n    assert len(s) == len(b)\n    t = ''\n    for i in range(len(s)):\n        if b[i] == 0:\n            t += s[i]\n    for i in range(len(s)):\n        if b[i] > 0:\n            t = s[i] + t\n    return t\n\nq = int(sys.stdin.readline())\nfor i in range(q):\n    s = sys.stdin.readline().strip()\n    m = int(sys.stdin.readline())\n    b = [int(x) for x in sys.stdin.readline().strip().split()]\n    print solve(s, b)"
}
2022-04-13 18:10:14.549955 REASON stop
