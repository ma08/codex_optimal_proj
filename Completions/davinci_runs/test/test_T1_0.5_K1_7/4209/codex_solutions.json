["\n\nn = int(input())\na = list(map(int,input().split()))\n\nprefix_sum = [a[0]]\nfor i in range(1,len(a)):\n    prefix_sum.append(prefix_sum[-1] + a[i])\n\nd = {}\nfor i in range(len(prefix_sum)):\n    if prefix_sum[i] not in d:\n        d[prefix_sum[i]] = [i+1]\n    else:\n        d[prefix_sum[i]].append(i+1)\n\nl = []\nfor k,v in d.items():\n    for i in range(len(v)):\n        for j in range(i,len(v)):\n            l.append((v[i],v[j]))\nl.sort(key=lambda x:x[1]-x[0],reverse=True)\n\nans = []\nfor i in range(len(l)):\n    if not ans:\n        ans.append(l[i])\n    else:\n        if l[i][0] > ans[-1][1]:\n            ans.append(l[i])\n\nprint(len(ans))\nfor i in ans:\n    print(str(i[0])+\" \"+str(i[1]))", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        for j in range(i+1, n+1):\n            s = sum(a[i:j])\n            if s not in d:\n                d[s] = [(i, j)]\n            else:\n                d[s].append((i, j))\n    for i in d:\n        d[i] = sorted(d[i])\n    for i in d:\n        if len(d[i]) == 1:\n            d.pop(i)\n    lst = []\n    for i in d:\n        for j in d[i]:\n            lst.append(j)\n    lst = sorted(lst)\n    ans = []\n    while lst:\n        x = lst.pop()\n        ans.append(x)\n        temp = []\n        for i in lst:\n            if x[1] <= i[0]:\n                temp.append(i)\n        lst = temp\n    print(len(ans))\n    for i in ans:\n        print(i[0]+1, i[1])\n\nif __name__ == '__main__':\n    main()", "\n\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            blocks.append((i, j))\n    return blocks\n\ndef check_blocks(blocks, a):\n    for i in range(len(blocks)):\n        for j in range(i + 1, len(blocks)):\n            if blocks[i][0] <= blocks[j][0] <= blocks[i][1] or blocks[i][0] <= blocks[j][1] <= blocks[i][1]:\n                return False\n    return True\n\ndef block_sum(block, a):\n    return sum(a[block[0]:block[1]])\n\ndef get_valid_blocks(blocks, a):\n    valid_blocks = []\n    for block in blocks:\n        if block_sum(block, a) == block_sum((0, len(a)), a):\n            valid_blocks.append(block)\n    return valid_blocks\n\ndef get_max_blocks(blocks):\n    max_blocks = []\n    max_len = 0\n    for block in blocks:\n        if block[1] - block[0] > max_len:\n            max_blocks = [block]\n            max_len = block[1] - block[0]\n        elif block[1] - block[0] == max_len:\n            max_blocks.append(block)\n    return max_blocks\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    blocks = get_valid_blocks(blocks, a)\n    blocks = get_max_blocks(blocks)\n    print(len(blocks))\n    for block in blocks:\n        print(block[0]+1, block[1])\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = 0\nfor i in range(n):\n    s += a[i]\n\nif s % n == 0:\n    print(n)\n    for i in range(n):\n        print(i+1, i+1)\nelse:\n    print(n-1)\n    print(1, n)\n    for i in range(1, n):\n        print(i, i)", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = 0\nfor i in range(n):\n    s += a[i]\n\nif s % n == 0:\n    print(n)\n    for i in range(n):\n        print(i+1, i+1)\nelse:\n    print(n-1)\n    for i in range(n):\n        if a[i] == s // n:\n            print(i+1, i+1)\n        else:\n            print(i+1, n)", "\nn = int(input())\na = list(map(int, input().split()))\n\ndef find_sets(a, n):\n    sets = []\n    set_sum = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            s = sum(a[i:j])\n            if s not in set_sum:\n                sets.append((i, j))\n                set_sum.append(s)\n    return sets\n\ndef check_sets(sets):\n    for i in range(len(sets)):\n        for j in range(i+1, len(sets)):\n            if sets[i][1] >= sets[j][0]:\n                return False\n    return True\n\nsets = find_sets(a, n)\nsets = list(filter(check_sets, sets))\nsets = sorted(sets, key=lambda x: x[1]-x[0], reverse=True)\n\nprint(len(sets))\nfor s in sets:\n    print(s[0]+1, s[1])"]