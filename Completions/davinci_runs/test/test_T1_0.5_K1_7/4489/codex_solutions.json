["\n\nN = int(input())\nblue_cards = []\nfor i in range(N):\n    blue_cards.append(input())\nM = int(input())\nred_cards = []\nfor i in range(M):\n    red_cards.append(input())\n\nblue_cards_set = set(blue_cards)\nred_cards_set = set(red_cards)\n\nintersection = blue_cards_set.intersection(red_cards_set)\n\nblue_cards_count = 0\nfor i in blue_cards_set:\n    if i not in intersection:\n        blue_cards_count += 1\n\nred_cards_count = 0\nfor i in red_cards_set:\n    if i not in intersection:\n        red_cards_count += 1\n\nprint(blue_cards_count - red_cards_count)", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = []\n    for i in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    m = int(sys.stdin.readline())\n    t = []\n    for i in range(m):\n        t.append(sys.stdin.readline().rstrip())\n    s_set = set(s)\n    t_set = set(t)\n    ans = 0\n    for word in s_set:\n        ans += s.count(word)\n    for word in t_set:\n        ans -= t.count(word)\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nn = int(input())\ns = [input() for _ in range(n)]\nm = int(input())\nt = [input() for _ in range(m)]\n\nprint(max(s.count(i) - t.count(i) for i in s + t))", "\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(input())\nm = int(input())\nt = []\nfor i in range(m):\n    t.append(input())\n\ncnt = 0\nfor i in s:\n    cnt += s.count(i) - t.count(i)\nprint(cnt)", "\n\nN = int(input())\nblue_cards = []\nfor i in range(N):\n    blue_cards.append(input())\nM = int(input())\nred_cards = []\nfor i in range(M):\n    red_cards.append(input())\n\nmax_earn = 0\n\nfor i in range(N):\n    earn = 0\n    for j in range(N):\n        if blue_cards[i] == blue_cards[j]:\n            earn += 1\n    for k in range(M):\n        if blue_cards[i] == red_cards[k]:\n            earn -= 1\n    if earn > max_earn:\n        max_earn = earn\n\nprint(max_earn)", "\n\nfrom collections import Counter\n\nN = int(input())\ns = [input() for _ in range(N)]\nM = int(input())\nt = [input() for _ in range(M)]\n\ns_counter = Counter(s)\nt_counter = Counter(t)\n\nmax_earn = 0\nfor key in s_counter.keys():\n    max_earn += s_counter[key] - t_counter[key]\nprint(max_earn)", "\n\nn = int(input())\ns = [input() for i in range(n)]\nm = int(input())\nt = [input() for i in range(m)]\n\nans = 0\nfor i in range(n):\n    x = s.count(s[i])\n    y = t.count(s[i])\n    ans += x - y\n\nprint(ans)"]