["\n\nN, K = map(int, input().split())\nprices = list(map(int, input().split()))\nprices.sort()\nprint(sum(prices[:K]))", "\n\nimport sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\nprint(sum(p[:k]))", "\n\nN, K = map(int, input().split())\np = list(map(int, input().split()))\n\np.sort()\nprint(sum(p[:K]))", "\n\n#import sys\n\n#def main():\n#    line = sys.stdin.readline().split()\n#    n = int(line[0])\n#    k = int(line[1])\n#    line = sys.stdin.readline().split()\n#    prices = [int(x) for x in line]\n#    prices.sort()\n#    print(sum(prices[:k]))\n\n#if __name__ == '__main__':\n#    main()\n\n#import sys\n\n#def main():\n#    n, k = [int(x) for x in sys.stdin.readline().split()]\n#    prices = [int(x) for x in sys.stdin.readline().split()]\n#    prices.sort()\n#    print(sum(prices[:k]))\n\n#if __name__ == '__main__':\n#    main()\n\n#import sys\n\n#def main():\n#    n, k = map(int, sys.stdin.readline().split())\n#    prices = list(map(int, sys.stdin.readline().split()))\n#    prices.sort()\n#    print(sum(prices[:k]))\n\n#if __name__ == '__main__':\n#    main()\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    prices = list(map(int, sys.stdin.readline().split()))\n    prices.sort()\n    print(sum(prices[:k]))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nfrom heapq import heapify, heappop\n\nN, K = map(int, sys.stdin.readline().rstrip().split(\" \"))\nP = [int(x) for x in sys.stdin.readline().rstrip().split(\" \")]\nheapify(P)\n\nans = 0\nfor i in range(K):\n    ans += heappop(P)\nprint(ans)", "\n\ndef main():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n    p.sort()\n    print(sum(p[:k]))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    prices = sorted(map(int, sys.stdin.readline().split()))\n    print(sum(prices[:k]))\n\nif __name__ == '__main__':\n    main()"]