["\n\ndef main():\n    \"\"\"\n    This problem is a little bit tricky. First, we need to find the minimum number of occupied houses.\n    We need to find the number of houses that are the same, and then we need to add one to the number of houses that are different.\n    We can find the number of houses that are the same by sorting the houses and finding the longest consecutive sequence.\n    We can find the number of houses that are different by finding the number of houses that are not in the longest consecutive sequence.\n    We can then use a greedy approach to find the maximum number of occupied houses.\n    We can sort the houses and then start from the first house and the last house.\n    We can move the pointer to the next house if the current house is the same as the next house.\n    We can move the pointer to the previous house if the current house is the same as the previous house.\n    We can move the pointer to the next house and the previous house if the current house is not the same as the next house and the previous house.\n    We can stop when the pointers meet.\n    \"\"\"\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    l = 0\n    m = 0\n    for i in range(n):\n        if i == 0 or x[i] == x[i-1]:\n            l += 1\n        else:\n            m = max(m, l)\n            l = 1\n    m = max(m, l)\n    a = 0\n    b = n-1\n    while a < b:\n        if x[a] == x[a+1]:\n            a += 1\n        elif x[b] == x[b-1]:\n            b -= 1\n        else:\n            a += 1\n            b -= 1\n    print(m, b-a+1)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn = int(input())\nx = list(map(int, input().split()))\n\nmin_ = n\nmax_ = 0\n\nfor i in range(n):\n    if x[i] == 1:\n        min_ = min(min_, 1)\n        max_ = max(max_, 2)\n    elif x[i] == n:\n        min_ = min(min_, 1)\n        max_ = max(max_, 2)\n    else:\n        min_ = min(min_, 2)\n        max_ = max(max_, 3)\n\nprint(min_, max_)", "\n\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    d = {}\n    for i in x:\n        d[i] = d.get(i, 0) + 1\n    mn = len(d)\n    mx = len(d)\n    if 1 in d.keys():\n        mn -= 1\n    if n in d.keys():\n        mn -= 1\n    if d.get(1, 0) > 0 and d.get(n, 0) > 0:\n        mx += 1\n    print(mn, mx)\n\n\nif __name__ == \"__main__\":\n    main()", "\nn = int(input())\nxs = [int(x) for x in input().split()]\n\ndiff = [x - y for x, y in zip(xs, xs[1:])]\n\nmin_h = max(1, len(set(xs)) - sum(1 for d in diff if d == 0))\nmax_h = len(set(xs)) + sum(1 for d in diff if d == -2)\n\nprint(min_h, max_h)", "\n\n\ndef min_max_occupied_houses(n, x):\n    \"\"\"\n    >>> min_max_occupied_houses(4, [1, 2, 4, 4])\n    (2, 4)\n    >>> min_max_occupied_houses(9, [1, 1, 8, 8, 8, 4, 4, 4, 4])\n    (3, 8)\n    >>> min_max_occupied_houses(7, [4, 3, 7, 1, 4, 3, 3])\n    (3, 6)\n    \"\"\"\n    min_houses = max_houses = 1\n    for i in range(1, n):\n        if x[i] != x[i - 1]:\n            min_houses += 1\n        if x[i - 1] + 1 != x[i] and x[i] + 1 != x[i - 1]:\n            max_houses += 1\n    return min_houses, max_houses\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = list(map(int, input().split()))\n    print(*min_max_occupied_houses(n, x))", "\n\nn = int(input())\nx = list(map(int, input().split()))\n\nprint(min(n, len(set(x)) + min(x.count(1), x.count(n))) , n + 1)", "\n\nn = int(input())\nx = list(map(int, input().split()))\n\nmin_houses = [0]*(n+1)\nmax_houses = [0]*(n+1)\n\nfor i in range(n):\n    min_houses[x[i]] += 1\n    max_houses[x[i]] += 1\n\nfor i in range(1, n+1):\n    min_houses[i] += min_houses[i-1]\n    max_houses[i] += max_houses[i-1]\n\nif min_houses[-1] == n:\n    print(1, 1)\nelse:\n    print(min_houses[-1] - max(min_houses[1:]) + 1, min_houses[-1] - min(min_houses[1:]))"]