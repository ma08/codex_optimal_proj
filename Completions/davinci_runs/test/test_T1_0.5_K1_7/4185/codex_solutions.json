["\n\n# Solution\n\nn, m = map(int, input().split())\n\na = [list(map(int, input().split())) for i in range(n)]\n\nc = [0 for i in range(n * m + 1)]\n\nfor i in range(n):\n    for j in range(m):\n        c[a[i][j]] += 1\n\nfor i in range(1, n * m + 1):\n    c[i] += c[i - 1]\n\nans = 0\n\nfor i in range(n):\n    for j in range(m):\n        ans += abs(c[(i) * m + j] - c[(i) * m + j - 1])\n\nprint(ans)", "\n\n# cook your dish here\nimport math\nfor _ in range(int(input())):\n    n,m=map(int,input().split())\n    l=[]\n    for i in range(n):\n        l.append(list(map(int,input().split())))\n    c=0\n    for i in range(n):\n        for j in range(m):\n            if l[i][j]!=(i*m)+j+1:\n                c+=1\n    print(c//2)", "\n\nimport itertools\n\ndef is_good(m):\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != (i * m + j + 1) % (n * m):\n                return False\n    return True\n\ndef shift(c):\n    for i in range(n - 1):\n        a[i][c] = a[i + 1][c]\n    a[n - 1][c] = tmp[c]\n\nn, m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\nif is_good(m):\n    print(0)\nelse:\n    tmp = a[n - 1]\n    for i in range(1, m + 1):\n        for c in itertools.combinations(range(m), i):\n            for _ in range(n):\n                for j in c:\n                    shift(j)\n            if is_good(m):\n                print(i)\n                exit()\n            else:\n                for j in range(n):\n                    a[j] = list(map(int, input().split()))\n                tmp = a[n - 1]", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != (i * m + j + 1):\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    res = 0\n    for j in range(m):\n        cnt = [0] * (n * m)\n        for i in range(n):\n            cnt[a[i][j] - 1] += 1\n        for i in range(1, n * m):\n            cnt[i] += cnt[i - 1]\n        for i in range(n):\n            a[i][j] = cnt[a[i][j] - 1]\n            res += abs(a[i][j] - ((i * m + j) % (n * m) + 1))\n    print(res // 2)\n\nif __name__ == '__main__':\n    main()", "\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nn, m = map(int, input().split())\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef check(matrix):\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m + j + 1):\n                return False\n    return True\n\ndef shift(matrix, col):\n    for i in range(n):\n        x = matrix[i][col]\n        if i == n - 1:\n            matrix[i][col] = x\n        else:\n            matrix[i][col] = matrix[i+1][col]\n    return matrix\n\ndef solve(matrix):\n    if check(matrix):\n        return 0\n    else:\n        for col in range(m):\n            for i in range(n):\n                if matrix[i][col] == (i * m + col + 1):\n                    continue\n                else:\n                    matrix[i][col] = (i * m + col + 1)\n                    return 1 + solve(shift(matrix, col))\n\nprint(solve(matrix))", "\n\n# cook your dish here\ndef is_sorted(matrix, n, m):\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i*m + j + 1):\n                return False\n    return True\n\ndef get_column(matrix, n, m, j):\n    column = list()\n    for i in range(n):\n        column.append(matrix[i][j])\n    return column\n\ndef shift_column(matrix, n, m, j):\n    for i in range(n-1):\n        matrix[i][j] = matrix[i+1][j]\n    matrix[n-1][j] = matrix[0][j]\n    return matrix\n\ndef get_min_moves(matrix, n, m):\n    if is_sorted(matrix, n, m):\n        return 0\n    min_moves = 0\n    for j in range(m):\n        column = get_column(matrix, n, m, j)\n        for i in range(n):\n            if column[i] != (i*m + j + 1):\n                min_moves += 1\n                matrix = shift_column(matrix, n, m, j)\n                i -= 1\n    return min_moves\n\ndef main():\n    n, m = map(int, input().split())\n    matrix = list()\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(get_min_moves(matrix, n, m))\n\nif __name__ == '__main__':\n    main()"]