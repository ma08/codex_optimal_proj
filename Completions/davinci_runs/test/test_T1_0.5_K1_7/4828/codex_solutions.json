["\n\nimport sys\n\ndef main():\n\tcode = sys.stdin.readline().strip()\n\tnop = 0\n\tfor i in range(len(code)):\n\t\tif code[i].isupper():\n\t\t\tif i%4 != 0:\n\t\t\t\tnop += 4 - i%4\n\tprint nop\n\nif __name__ == '__main__':\n\tmain()", "\n\nn = int(input())\n\n# NOPs are only needed when the instruction is not at a memory address that is\n# divisible by four\nnops = 0\n\n# The first instruction is always at an address that is divisible by four\n# (address 0), so we start at the second instruction\ni = 4\n\nwhile i < n:\n    # If the current instruction is not at an address that is divisible by four,\n    # insert a NOP instruction\n    if i % 4 != 0:\n        nops += 1\n    i += 1\n\nprint(nops)", "\n\ndef main():\n    s = raw_input()\n    n = 0\n    while len(s)%4 != 0:\n        s += 'NOP'\n        n += 1\n    print n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    inputString = input()\n    #print(inputString)\n    count = 0\n    for i in range(0, len(inputString), 4):\n        #print(inputString[i])\n        if inputString[i].isupper():\n            if i % 4 != 0:\n                for j in range(i, i - (i % 4), -1):\n                    #print(j)\n                    if inputString[j].islower():\n                        break\n                    else:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\nimport sys\n\ndef main():\n    code = sys.stdin.readline().strip()\n    count = 0\n    for i in range(len(code)):\n        if code[i].isupper():\n            if (i+1) % 4 == 0:\n                count += 0\n            elif (i+2) % 4 == 0:\n                count += 1\n            elif (i+3) % 4 == 0:\n                count += 2\n            elif (i+4) % 4 == 0:\n                count += 3\n    print(count)\n\nif __name__ == '__main__':\n    main()", "\n\ndef get_nops(line):\n    nops = 0\n    i = 0\n    while i < len(line):\n        if i % 4 == 0:\n            i += 1\n        else:\n            line = line[:i] + 'NOP' + line[i:]\n            nops += 1\n            i += 4\n    return nops\n\nif __name__ == '__main__':\n    print(get_nops(input()))"]