["\n\nn = int(input())\nlst = [int(i) for i in input().split()]\n\ndef check(lst):\n    if len(lst) == 1:\n        return True\n    if len(lst) == 4:\n        lst = sorted(lst)\n        if lst[0] == lst[1] and lst[2] == lst[3]:\n            return True\n        else:\n            return False\n    lst = sorted(lst)\n    if lst[0] == lst[1]:\n        return check(lst[2:])\n    else:\n        return check(lst[1:])\n\nif check(lst) and len(lst) == n*n:\n    print(\"YES\")\n    lst = sorted(lst)\n    matrix = []\n    while len(lst) > 0:\n        matrix.append([lst.pop(0), lst.pop()])\n    for i in range(len(matrix)):\n        print(\" \".join([str(j) for j in matrix[i]]))\nelse:\n    print(\"NO\")", "\n\n#-----Solution-----\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n\tprint(\"YES\")\n\tprint(*a)\nelse:\n\tif len(set(a)) != n*n:\n\t\tprint(\"NO\")\n\telse:\n\t\ta.sort()\n\t\tb = [a[:n]]\n\t\tfor i in range(1,n):\n\t\t\tb.append(a[i*n:(i+1)*n])\n\t\tif b == b[::-1]:\n\t\t\tprint(\"YES\")\n\t\t\tfor i in range(n):\n\t\t\t\tprint(*b[i])\n\t\telse:\n\t\t\tprint(\"NO\")", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\n\n#-----Solution-----\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(\"YES\")\n    print(a[0])\n    exit()\n\nif n % 2 == 0:\n    print(\"NO\")\n    exit()\n\nif n == 3:\n    if a[0] == a[2] and a[3] == a[5]:\n        print(\"YES\")\n        print(a[0], a[3])\n        print(a[4], a[1])\n        print(a[2], a[5])\n    else:\n        print(\"NO\")\nelse:\n    if a[0] == a[2] and a[3] == a[5] and a[6] == a[8]:\n        print(\"YES\")\n        print(a[0], a[3], a[6])\n        print(a[7], a[1], a[4])\n        print(a[8], a[5], a[2])\n    else:\n        print(\"NO\")", "\n\nn = int(input())\n\na = list(map(int, input().split()))\n\na.sort()\n\na.reverse()\n\nm = [[0 for _ in range(n)] for _ in range(n)]\n\ndef check():\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] != m[n - i - 1][n - j - 1]:\n                return False\n    return True\n\ndef check_column():\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] != m[n - i - 1][j]:\n                return False\n    return True\n\ndef check_row():\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] != m[i][n - j - 1]:\n                return False\n    return True\n\ndef check_diag():\n    for i in range(n):\n        if m[i][i] != m[n - i - 1][n - i - 1]:\n            return False\n    return True\n\ndef check_anti_diag():\n    for i in range(n):\n        if m[i][n - i - 1] != m[n - i - 1][i]:\n            return False\n    return True\n\ndef fill(x, y):\n    global a\n    if len(a) == 0:\n        return True\n    m[x][y] = a.pop()\n    if x == y and y == 0:\n        return fill(x + 1, y)\n    elif x == y and y == n - 1:\n        return fill(x, y - 1)\n    elif x == 0 and y == n - 1:\n        return fill(x + 1, y)\n    elif x == n - 1 and y == 0:\n        return fill(x, y + 1)\n    elif x == 0:\n        return fill(x, y - 1)\n    elif x == n - 1:\n        return fill(x, y + 1)\n    elif y == 0:\n        return fill(x + 1, y)\n    elif y == n - 1:\n        return fill(x - 1, y)\n    else:\n        if check_row() and check_column() and check_diag() and check_anti_diag():\n            return fill(x + 1, y)\n        else:\n            return fill(x - 1, y)\n\nif fill(0, 0):\n    print(\"YES\")\n    for i in range(n):\n        print(' '.join(map(str, m[i])))\nelse:\n    print(\"NO\")"]