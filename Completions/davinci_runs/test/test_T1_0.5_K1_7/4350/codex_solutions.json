["\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    row_col = input().split()\n    row = int(row_col[0])\n    col = int(row_col[1])\n    grid = []\n    for i in range(row):\n        grid.append(list(input()))\n    star_list = []\n    for i in range(row):\n        for j in range(col):\n            if grid[i][j] == '*':\n                star_list.append((i, j))\n    star_list.sort()\n    star_list = list(star_list for star_list,_ in itertools.groupby(star_list))\n    star_size_list = []\n    for star in star_list:\n        star_size_list.append(find_size(star, grid))\n    star_size_list.sort()\n    star_size_list = list(star_size_list for star_size_list,_ in itertools.groupby(star_size_list))\n    if star_size_list.count(1) == row*col:\n        print(row*col)\n        for i in range(row):\n            for j in range(col):\n                print(i+1, j+1, 1)\n    else:\n        print(-1)\n\ndef find_size(star, grid):\n    \"\"\"\n    Finds the size of the star in the grid.\n    \"\"\"\n    size = 1\n    while True:\n        if star[0] - size < 0 or star[1] - size < 0 or star[0] + size >= len(grid) or star[1] + size >= len(grid[0]):\n            break\n        for i in range(star[0] - size, star[0] + size + 1):\n            if grid[i][star[1] - size] != '*' or grid[i][star[1] + size] != '*':\n                return size\n        for j in range(star[1] - size, star[1] + size + 1):\n            if grid[star[0] - size][j] != '*' or grid[star[0] + size][j] != '*':\n                return size\n        size += 1\n    return size\n\nif __name__ == '__main__':\n    main()", "\n\ndef is_valid(grid, x, y, size):\n    if x - size < 0 or x + size >= len(grid):\n        return False\n    if y - size < 0 or y + size >= len(grid[0]):\n        return False\n\n    for i in range(size):\n        if grid[x - i][y - i] == '.':\n            return False\n        if grid[x + i][y + i] == '.':\n            return False\n        if grid[x - i][y + i] == '.':\n            return False\n        if grid[x + i][y - i] == '.':\n            return False\n\n    return True\n\ndef draw_star(grid, x, y, size):\n    for i in range(size):\n        grid[x - i][y - i] = '.'\n        grid[x + i][y + i] = '.'\n        grid[x - i][y + i] = '.'\n        grid[x + i][y - i] = '.'\n\ndef remove_star(grid, x, y, size):\n    for i in range(size):\n        grid[x - i][y - i] = '*'\n        grid[x + i][y + i] = '*'\n        grid[x - i][y + i] = '*'\n        grid[x + i][y - i] = '*'\n\ndef is_empty(grid):\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '*':\n                return False\n    return True\n\ndef solve(grid):\n    sol = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '*':\n                size = 1\n                while is_valid(grid, i, j, size):\n                    size += 1\n                size -= 1\n                if size > 0:\n                    sol.append((i, j, size))\n                    draw_star(grid, i, j, size)\n\n    if is_empty(grid):\n        print(len(sol))\n        for i, j, size in sol:\n            print(i + 1, j + 1, size)\n    else:\n        print(-1)\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n\n    solve(grid)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    \"\"\"\n    The main function\n    :return: None\n    \"\"\"\n    n, m = [int(i) for i in input().split()]\n    grid = []\n    for _ in range(n):\n        grid.append(input())\n    print(n, m)\n    print(grid)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n    result = []\n    for star in stars:\n        for size in range(1, n + m):\n            if check(grid, star, size):\n                result.append((star[0] + 1, star[1] + 1, size))\n                break\n    if len(result) == len(stars):\n        print(len(result))\n        for res in result:\n            print(*res)\n    else:\n        print(-1)\n\ndef check(grid, star, size):\n    if star[0] - size < 0 or star[0] + size >= len(grid):\n        return False\n    if star[1] - size < 0 or star[1] + size >= len(grid[0]):\n        return False\n    for i in range(1, size + 1):\n        if grid[star[0] - i][star[1]] != '*':\n            return False\n        if grid[star[0] + i][star[1]] != '*':\n            return False\n        if grid[star[0]][star[1] - i] != '*':\n            return False\n        if grid[star[0]][star[1] + i] != '*':\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\nimport math\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                star_size = 1\n                while i + star_size < n and j + star_size < m:\n                    if all([grid[i + star_size][j] == '*', grid[i + star_size][j + star_size] == '*', grid[i][j + star_size] == '*']):\n                        star_size += 1\n                    else:\n                        break\n                stars.append((i, j, star_size))\n    if len(stars) == 0:\n        print(-1)\n    else:\n        print(len(stars))\n        for star in stars:\n            print(*star)\n\nif __name__ == '__main__':\n    main()"]