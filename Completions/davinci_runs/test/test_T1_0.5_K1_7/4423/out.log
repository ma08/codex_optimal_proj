2022-04-13 20:43:26.892816 """
You have decided to write a book introducing good restaurants.
There are N restaurants that you want to introduce: Restaurant 1, Restaurant 2, ..., Restaurant N. Restaurant i is in city S_i, and your assessment score of that restaurant on a 100-point scale is P_i.
No two restaurants have the same score.
You want to introduce the restaurants in the following order:
 - The restaurants are arranged in lexicographical order of the names of their cities.
 - If there are multiple restaurants in the same city, they are arranged in descending order of score.
Print the identification numbers of the restaurants in the order they are introduced in the book.

-----Constraints-----
 - 1 ≤ N ≤ 100
 - S is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.
 - 0 ≤ P_i ≤ 100
 - P_i is an integer.
 - P_i ≠ P_j (1 ≤ i < j ≤ N)

-----Input-----
Input is given from Standard Input in the following format:
N
S_1 P_1
:
S_N P_N

-----Output-----
Print N lines. The i-th line (1 ≤ i ≤ N) should contain the identification number of the restaurant that is introduced i-th in the book.

-----Sample Input-----
6
khabarovsk 20
moscow 10
kazan 50
kazan 35
moscow 60
khabarovsk 40

-----Sample Output-----
3
4
6
1
5
2

The lexicographical order of the names of the three cities is kazan < khabarovsk < moscow. For each of these cities, the restaurants in it are introduced in descending order of score. Thus, the restaurants are introduced in the order 3,4,6,1,5,2.
"""
2022-04-13 20:43:26.892831 --------------------------
2022-04-13 20:43:40.872030 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN = int(input())\nrestaurant_list = []\nfor i in range(N):\n    city, score = input().split()\n    restaurant_list.append((city, int(score), i+1))\nrestaurant_list.sort()\nfor i in range(N):\n    print(restaurant_list[i][2])"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\n\nrestaurants = []\nfor i in range(n):\n    restaurants.append(input().split())\n\nrestaurants.sort(key=lambda x: (x[0], -int(x[1])))\n\nfor i in range(n):\n    print(restaurants[i][2])"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\nimport sys\n\ndef main():\n    N = int(input())\n    restaurants = []\n    for i in range(N):\n        restaurants.append([i+1] + list(map(str, input().split())))\n    restaurants.sort(key=lambda x: (x[1], int(x[2])), reverse=True)\n    for i in range(N):\n        print(restaurants[i][0])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\n\ndic = {}\n\nfor i in range(n):\n    s, p = input().split()\n    p = int(p)\n    if s not in dic:\n        dic[s] = [[p, i+1]]\n    else:\n        dic[s].append([p, i+1])\n\ncities = list(dic.keys())\ncities.sort()\n\nfor city in cities:\n    dic[city].sort(reverse=True)\n    for p, i in dic[city]:\n        print(i)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nrestaurants = []\nfor i in range(n):\n    city, score = input().split()\n    score = int(score)\n    restaurants.append([city, score, i+1])\n\nrestaurants.sort()\n\nfor restaurant in restaurants:\n    print(restaurant[2])"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\nrestaurants = []\nfor i in range(n):\n    restaurants.append(input().split())\n\nrestaurants = sorted(restaurants, key=lambda x: x[0])\nrestaurants = sorted(restaurants, key=lambda x: x[1], reverse=True)\n\nfor i in range(n):\n    print(i+1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\nrestaurants = []\n\nfor i in range(n):\n    restaurants.append(list(input().split()))\n\nrestaurants = sorted(restaurants, key=lambda x: x[0])\nrestaurants = sorted(restaurants, key=lambda x: int(x[1]), reverse=True)\n\nfor i in range(n):\n    print(restaurants[i][2])"
    }
  ],
  "created": 1649882607,
  "id": "cmpl-4we7jmFwG3H7TPVxa72LT3VqGB4Wy",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 20:43:40.872296 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN = int(input())\nrestaurant_list = []\nfor i in range(N):\n    city, score = input().split()\n    restaurant_list.append((city, int(score), i+1))\nrestaurant_list.sort()\nfor i in range(N):\n    print(restaurant_list[i][2])"
}
2022-04-13 20:43:40.872348 REASON stop
2022-04-13 20:43:40.872834 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\n\nrestaurants = []\nfor i in range(n):\n    restaurants.append(input().split())\n\nrestaurants.sort(key=lambda x: (x[0], -int(x[1])))\n\nfor i in range(n):\n    print(restaurants[i][2])"
}
2022-04-13 20:43:40.872960 REASON stop
2022-04-13 20:43:40.873342 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\nimport sys\n\ndef main():\n    N = int(input())\n    restaurants = []\n    for i in range(N):\n        restaurants.append([i+1] + list(map(str, input().split())))\n    restaurants.sort(key=lambda x: (x[1], int(x[2])), reverse=True)\n    for i in range(N):\n        print(restaurants[i][0])\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 20:43:40.873430 REASON stop
2022-04-13 20:43:40.881854 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\n\ndic = {}\n\nfor i in range(n):\n    s, p = input().split()\n    p = int(p)\n    if s not in dic:\n        dic[s] = [[p, i+1]]\n    else:\n        dic[s].append([p, i+1])\n\ncities = list(dic.keys())\ncities.sort()\n\nfor city in cities:\n    dic[city].sort(reverse=True)\n    for p, i in dic[city]:\n        print(i)"
}
2022-04-13 20:43:40.881916 REASON stop
2022-04-13 20:43:40.894527 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nrestaurants = []\nfor i in range(n):\n    city, score = input().split()\n    score = int(score)\n    restaurants.append([city, score, i+1])\n\nrestaurants.sort()\n\nfor restaurant in restaurants:\n    print(restaurant[2])"
}
2022-04-13 20:43:40.894601 REASON stop
2022-04-13 20:43:40.895469 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\nrestaurants = []\nfor i in range(n):\n    restaurants.append(input().split())\n\nrestaurants = sorted(restaurants, key=lambda x: x[0])\nrestaurants = sorted(restaurants, key=lambda x: x[1], reverse=True)\n\nfor i in range(n):\n    print(i+1)"
}
2022-04-13 20:43:40.895525 REASON stop
2022-04-13 20:43:40.912108 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\nrestaurants = []\n\nfor i in range(n):\n    restaurants.append(list(input().split()))\n\nrestaurants = sorted(restaurants, key=lambda x: x[0])\nrestaurants = sorted(restaurants, key=lambda x: int(x[1]), reverse=True)\n\nfor i in range(n):\n    print(restaurants[i][2])"
}
2022-04-13 20:43:40.912198 REASON stop
