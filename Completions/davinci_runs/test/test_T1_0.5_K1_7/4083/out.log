2022-04-13 18:03:26.601468 """
The only difference between easy and hard versions is the number of elements in the array.

You are given an array $a$ consisting of $n$ integers. In one move you can choose any $a_i$ and divide it by $2$ rounding down (in other words, in one move you can set $a_i := \lfloor\frac{a_i}{2}\rfloor$).

You can perform such an operation any (possibly, zero) number of times with any $a_i$.

Your task is to calculate the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.

Don't forget that it is possible to have $a_i = 0$ after some operations, thus the answer always exists.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 50$) — the number of elements in the array and the number of equal numbers required.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 2 \cdot 10^5$), where $a_i$ is the $i$-th element of $a$.


-----Output-----

Print one integer — the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.


-----Examples-----
Input
5 3
1 2 2 4 5

Output
1

Input
5 3
1 2 3 4 5

Output
2

Input
5 3
1 2 3 3 3

Output
0
"""
2022-04-13 18:03:26.601478 --------------------------
2022-04-13 18:05:24.753279 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\n# find the maximum\nmax_val = max(a)\n\n# find the number of operations required to make it equal to the max\noperations = [math.floor(i / max_val) for i in a]\n\n# find the number of operations required to make it equal to the max\noperations = [math.floor(i / max_val) for i in a]\n\n# find the minimum number of operations required to make all elements equal to the max\nmin_operations = min(operations)\n\n# find the number of operations required to make all elements equal to the max\noperations = [i - min_operations for i in operations]\n\n# find the number of elements that are not equal to the max\nunequal_elements = len([i for i in operations if i > 0])\n\n# find the number of operations required to make all elements equal to the max\noperations = [i - min_operations for i in operations]\n\n# find the number of elements that are not equal to the max\nunequal_elements = len([i for i in operations if i > 0])\n\n# if the number of elements that are not equal to the max is less than k\nif unequal_elements < k:\n    # find the number of elements that are equal to the max\n    equal_elements = n - unequal_elements\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    ans = 0\n    if a[0] == a[-1]:\n        print(0)\n    else:\n        if a[-1] % 2 == 0:\n            a[-1] = a[-1] // 2\n            ans += 1\n        else:\n            a[-1] = a[-1] // 2\n            ans += 1\n            a[-1] += 1\n        while a[0] != a[-1]:\n            a[0] = a[0] // 2\n            a[-1] = a[-1] // 2\n            ans += 1\n        if a[0] == a[-1]:\n            print(ans)\n        else:\n            print(-1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\"\"\"\nThe only difference between easy and hard versions is the number of elements in the array.\n\nYou are given an array $a$ consisting of $n$ integers. In one move you can choose any $a_i$ and divide it by $2$ rounding down (in other words, in one move you can set $a_i := \\lfloor\\frac{a_i}{2}\\rfloor$).\n\nYou can perform such an operation any (possibly, zero) number of times with any $a_i$.\n\nYour task is to calculate the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.\n\nDon't forget that it is possible to have $a_i = 0$ after some operations, thus the answer always exists.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 50$) \u2014 the number of elements in the array and the number of equal numbers required.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.\n\n\n-----Examples-----\nInput\n5 3\n1 2 2 4 5\n\nOutput\n1\n\nInput\n5 3\n1 2 3 4 5\n\nOutput\n2\n\nInput\n5 3\n1 2 3 3 3\n\nOutput\n0\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nans = 0\n\nif a[0] == a[k-1]:\n    print(0)\n\nelse:\n    ans = a[k-1] - a[0]\n    print(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef solve(n, k, a):\n    # sort the array\n    a.sort(reverse=True)\n    # find the number of operations required to get the same number\n    num_operations = a[0] - a[k-1]\n    return num_operations\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport math\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nmin_a = min(a)\nmax_a = max(a)\n\nmin_operations = math.inf\n\nfor i in range(min_a, max_a + 1):\n    operations = 0\n    for ai in a:\n        operations += (ai - i) // 2\n    if operations < min_operations:\n        min_operations = operations\n\nprint(min_operations)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    arr = list(map(int, sys.stdin.readline().split()))\n    num = [0] * 2 * 10 ** 5\n    for i in arr:\n        num[i] += 1\n    for i in range(2 * 10 ** 5 - 1, -1, -1):\n        num[i] += num[i + 1]\n    for i in range(1, 2 * 10 ** 5):\n        num[i] = min(num[i], num[i - 1])\n    ans = 2 * 10 ** 5\n    for i in range(2 * 10 ** 5):\n        if num[i] >= k:\n            ans = min(ans, i)\n    print(ans)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n\ndef solve(a, k):\n    return 0\n\ndef main():\n    input_n, input_k = map(int, input().split())\n    input_a = list(map(int, input().split()))\n    print(solve(input_a, input_k))\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649873006,
  "id": "cmpl-4wbcsdpnTolOOZbkFGel3p3SZHlq2",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 18:05:24.753762 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\n# find the maximum\nmax_val = max(a)\n\n# find the number of operations required to make it equal to the max\noperations = [math.floor(i / max_val) for i in a]\n\n# find the number of operations required to make it equal to the max\noperations = [math.floor(i / max_val) for i in a]\n\n# find the minimum number of operations required to make all elements equal to the max\nmin_operations = min(operations)\n\n# find the number of operations required to make all elements equal to the max\noperations = [i - min_operations for i in operations]\n\n# find the number of elements that are not equal to the max\nunequal_elements = len([i for i in operations if i > 0])\n\n# find the number of operations required to make all elements equal to the max\noperations = [i - min_operations for i in operations]\n\n# find the number of elements that are not equal to the max\nunequal_elements = len([i for i in operations if i > 0])\n\n# if the number of elements that are not equal to the max is less than k\nif unequal_elements < k:\n    # find the number of elements that are equal to the max\n    equal_elements = n - unequal_elements\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])\n    # find the number of operations required to make all elements equal to the max\n    operations = [i - min_operations for i in operations]\n    # find the number of elements that are not equal to the max\n    unequal_elements = len([i for i in operations if i > 0])"
}
2022-04-13 18:05:24.753875 REASON length
2022-04-13 18:05:24.753881 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    ans = 0\n    if a[0] == a[-1]:\n        print(0)\n    else:\n        if a[-1] % 2 == 0:\n            a[-1] = a[-1] // 2\n            ans += 1\n        else:\n            a[-1] = a[-1] // 2\n            ans += 1\n            a[-1] += 1\n        while a[0] != a[-1]:\n            a[0] = a[0] // 2\n            a[-1] = a[-1] // 2\n            ans += 1\n        if a[0] == a[-1]:\n            print(ans)\n        else:\n            print(-1)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 18:05:24.753972 REASON stop
2022-04-13 18:05:24.754358 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\"\"\"\nThe only difference between easy and hard versions is the number of elements in the array.\n\nYou are given an array $a$ consisting of $n$ integers. In one move you can choose any $a_i$ and divide it by $2$ rounding down (in other words, in one move you can set $a_i := \\lfloor\\frac{a_i}{2}\\rfloor$).\n\nYou can perform such an operation any (possibly, zero) number of times with any $a_i$.\n\nYour task is to calculate the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.\n\nDon't forget that it is possible to have $a_i = 0$ after some operations, thus the answer always exists.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 50$) \u2014 the number of elements in the array and the number of equal numbers required.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible number of operations required to obtain at least $k$ equal numbers in the array.\n\n\n-----Examples-----\nInput\n5 3\n1 2 2 4 5\n\nOutput\n1\n\nInput\n5 3\n1 2 3 4 5\n\nOutput\n2\n\nInput\n5 3\n1 2 3 3 3\n\nOutput\n0\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nans = 0\n\nif a[0] == a[k-1]:\n    print(0)\n\nelse:\n    ans = a[k-1] - a[0]\n    print(ans)"
}
2022-04-13 18:05:24.754412 REASON stop
2022-04-13 18:05:24.754762 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef solve(n, k, a):\n    # sort the array\n    a.sort(reverse=True)\n    # find the number of operations required to get the same number\n    num_operations = a[0] - a[k-1]\n    return num_operations\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))"
}
2022-04-13 18:05:24.754805 REASON stop
2022-04-13 18:05:24.780269 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport math\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nmin_a = min(a)\nmax_a = max(a)\n\nmin_operations = math.inf\n\nfor i in range(min_a, max_a + 1):\n    operations = 0\n    for ai in a:\n        operations += (ai - i) // 2\n    if operations < min_operations:\n        min_operations = operations\n\nprint(min_operations)"
}
2022-04-13 18:05:24.780389 REASON stop
2022-04-13 18:05:24.791039 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    arr = list(map(int, sys.stdin.readline().split()))\n    num = [0] * 2 * 10 ** 5\n    for i in arr:\n        num[i] += 1\n    for i in range(2 * 10 ** 5 - 1, -1, -1):\n        num[i] += num[i + 1]\n    for i in range(1, 2 * 10 ** 5):\n        num[i] = min(num[i], num[i - 1])\n    ans = 2 * 10 ** 5\n    for i in range(2 * 10 ** 5):\n        if num[i] >= k:\n            ans = min(ans, i)\n    print(ans)\n\nmain()"
}
2022-04-13 18:05:24.791165 REASON stop
2022-04-13 18:05:24.792275 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n\ndef solve(a, k):\n    return 0\n\ndef main():\n    input_n, input_k = map(int, input().split())\n    input_a = list(map(int, input().split()))\n    print(solve(input_a, input_k))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 18:05:24.792371 REASON stop
