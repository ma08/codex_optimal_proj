2022-04-13 21:01:24.163421 """
Given is a permutation P_1, \ldots, P_N of 1, \ldots, N.
Find the number of integers i (1 \leq i \leq N) that satisfy the following condition:  
 - For any integer j (1 \leq j \leq i), P_i \leq P_j.

-----Constraints-----
 - 1 \leq N \leq 2 \times 10^5
 - P_1, \ldots, P_N is a permutation of 1, \ldots, N.  
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N
P_1 ... P_N

-----Output-----
Print the number of integers i that satisfy the condition.

-----Sample Input-----
5
4 2 5 1 3

-----Sample Output-----
3

i=1, 2, and 4 satisfy the condition, but i=3 does not - for example, P_i > P_j holds for j = 1.

Similarly, i=5 does not satisfy the condition, either. Thus, there are three integers that satisfy the condition.
"""
2022-04-13 21:01:24.163428 --------------------------
2022-04-13 21:02:10.263426 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\np = list(map(int, input().split()))\n\nidx = [0]*(n+1)\nfor i in range(n):\n    idx[p[i]] = i\n\nans = 0\nm = 0\nfor i in range(n):\n    if m < idx[i+1]:\n        ans += 1\n        m = idx[i+1]\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\np_list = list(map(int, input().split()))\n\n# \u7d2f\u7a4dmax\u3092\u8a08\u7b97\u3059\u308b\n# \u53c2\u8003\uff1ahttps://note.nkmk.me/python-list-cumulative-product-cumulative-sum/\ncum_max = [0] * n\ncum_max[0] = p_list[0]\nfor i in range(1, n):\n    cum_max[i] = max(cum_max[i-1], p_list[i])\n\n# \u7d2f\u7a4dmax\u3068p_list\u3092\u6bd4\u8f03\u3057\u3066\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\ncnt = 0\nfor i in range(n):\n    if cum_max[i] <= p_list[i]:\n        cnt += 1\n\nprint(cnt)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    num_ints = int(input())\n    perm = [int(i) for i in input().split()]\n    perms_dict = dict()\n    for i in range(num_ints):\n        perms_dict[perm[i]] = i\n    perms_list = list(perms_dict.keys())\n    perms_list.sort()\n    perms_list.reverse()\n    count = 0\n    for i in range(len(perms_list)):\n        num = perms_list[i]\n        if perms_dict[num] >= i:\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\np = [int(x) for x in sys.stdin.readline().rstrip().split()]\n\n# initialize variables\ncount = 0\n\n# loop through the permutation\nfor i in range(n):\n    # a number satisfies the condition if it is less than or equal to the number of numbers before it\n    if p[i] <= i + 1:\n        count += 1\n\n# print output\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\np = list(map(int, input().split()))\n\n# \u5404\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u3088\u308a\u5de6\u5074\u306b\u3042\u308b\u8981\u7d20\u306e\u4e2d\u3067\u305d\u308c\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n# \u305d\u306e\u500b\u6570\u304c\u305d\u306e\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u306a\u308b\n\n# \u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5de6\u5074\u306b\u3042\u308b\u304b\u3092\u8868\u3059\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u5404\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u304c\u5de6\u5074\u306b\u3042\u308b\u3053\u3068\u3092\u8868\u3059\n# \u3053\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5de6\u5074\u306b\u3042\u308b\u304b\u3092\u8a18\u9332\n# \u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5de6\u5074\u306b\u3042\u308b\u8981\u7d20\u306e\u6570\u3092\u8a18\u9332\u3067\u304d\u308b\n\n# \u307e\u305f\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5c0f\u3055\u3044\u304b\u3092\u8868\u3059\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u3053\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5c0f\u3055\u3044\u304b\u3092\u8a18\u9332\n# \u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5c0f\u3055\u3044\u8981\u7d20\u306e\u6570\u3092\u8a18\u9332\u3067\u304d\u308b\n\n# \u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5de6\u5074\u306b\u3042\u308b\u304b\u3092\u8868\u3059\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u5404\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u304c\u5de6\u5074\u306b\u3042\u308b\u3053\u3068\u3092\u8868\u3059\n# \u3053\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5de6\u5074\u306b\u3042\u308b\u304b\u3092\u8a18\u9332\n# \u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5de6\u5074\u306b\u3042\u308b\u8981\u7d20\u306e\u6570\u3092\u8a18\u9332\u3067\u304d\u308b\n\n# \u307e\u305f\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5c0f\u3055\u3044\u304b\u3092\u8868\u3059\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u3053\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5c0f\u3055\u3044\u304b\u3092\u8a18\u9332\n# \u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5c0f\u3055\u3044\u8981\u7d20\u306e\u6570\u3092\u8a18\u9332\u3067\u304d\u308b\n\npositions = [0] * (n + 1)\nfor i in range(n):\n    positions[p[i]] = i\n\ncount = [0] * (n + 1)\nans = 0\nfor i in range(n):\n    j = positions[i + 1]\n    ans += i - count[j]\n    count[j] += 1\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN = int(input())\nP = list(map(int, input().split()))\n\n# dp[i] = max(dp[i-1], P[i-1])\ndp = [0] * N\ndp[0] = P[0]\n\nans = 1\nfor i in range(1, N):\n    dp[i] = max(dp[i-1], P[i-1])\n    if dp[i] == P[i-1]:\n        ans += 1\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nN = int(input())\nP = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    if P[i] == i+1:\n        ans += 1\n\nprint(ans)"
    }
  ],
  "created": 1649883684,
  "id": "cmpl-4weP6OBZVImFI0x2u4jQUANgNW1qz",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 21:02:10.263695 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\np = list(map(int, input().split()))\n\nidx = [0]*(n+1)\nfor i in range(n):\n    idx[p[i]] = i\n\nans = 0\nm = 0\nfor i in range(n):\n    if m < idx[i+1]:\n        ans += 1\n        m = idx[i+1]\n\nprint(ans)"
}
2022-04-13 21:02:10.263732 REASON stop
2022-04-13 21:02:10.264190 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\np_list = list(map(int, input().split()))\n\n# \u7d2f\u7a4dmax\u3092\u8a08\u7b97\u3059\u308b\n# \u53c2\u8003\uff1ahttps://note.nkmk.me/python-list-cumulative-product-cumulative-sum/\ncum_max = [0] * n\ncum_max[0] = p_list[0]\nfor i in range(1, n):\n    cum_max[i] = max(cum_max[i-1], p_list[i])\n\n# \u7d2f\u7a4dmax\u3068p_list\u3092\u6bd4\u8f03\u3057\u3066\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\ncnt = 0\nfor i in range(n):\n    if cum_max[i] <= p_list[i]:\n        cnt += 1\n\nprint(cnt)"
}
2022-04-13 21:02:10.264324 REASON stop
2022-04-13 21:02:10.264697 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    num_ints = int(input())\n    perm = [int(i) for i in input().split()]\n    perms_dict = dict()\n    for i in range(num_ints):\n        perms_dict[perm[i]] = i\n    perms_list = list(perms_dict.keys())\n    perms_list.sort()\n    perms_list.reverse()\n    count = 0\n    for i in range(len(perms_list)):\n        num = perms_list[i]\n        if perms_dict[num] >= i:\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-13 21:02:10.264764 REASON stop
2022-04-13 21:02:10.284737 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\np = [int(x) for x in sys.stdin.readline().rstrip().split()]\n\n# initialize variables\ncount = 0\n\n# loop through the permutation\nfor i in range(n):\n    # a number satisfies the condition if it is less than or equal to the number of numbers before it\n    if p[i] <= i + 1:\n        count += 1\n\n# print output\nprint(count)"
}
2022-04-13 21:02:10.284822 REASON stop
2022-04-13 21:02:10.302106 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\np = list(map(int, input().split()))\n\n# \u5404\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u3088\u308a\u5de6\u5074\u306b\u3042\u308b\u8981\u7d20\u306e\u4e2d\u3067\u305d\u308c\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n# \u305d\u306e\u500b\u6570\u304c\u305d\u306e\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u306a\u308b\n\n# \u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5de6\u5074\u306b\u3042\u308b\u304b\u3092\u8868\u3059\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u5404\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u304c\u5de6\u5074\u306b\u3042\u308b\u3053\u3068\u3092\u8868\u3059\n# \u3053\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5de6\u5074\u306b\u3042\u308b\u304b\u3092\u8a18\u9332\n# \u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5de6\u5074\u306b\u3042\u308b\u8981\u7d20\u306e\u6570\u3092\u8a18\u9332\u3067\u304d\u308b\n\n# \u307e\u305f\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5c0f\u3055\u3044\u304b\u3092\u8868\u3059\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u3053\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5c0f\u3055\u3044\u304b\u3092\u8a18\u9332\n# \u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5c0f\u3055\u3044\u8981\u7d20\u306e\u6570\u3092\u8a18\u9332\u3067\u304d\u308b\n\n# \u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5de6\u5074\u306b\u3042\u308b\u304b\u3092\u8868\u3059\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u5404\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u304c\u5de6\u5074\u306b\u3042\u308b\u3053\u3068\u3092\u8868\u3059\n# \u3053\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5de6\u5074\u306b\u3042\u308b\u304b\u3092\u8a18\u9332\n# \u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5de6\u5074\u306b\u3042\u308b\u8981\u7d20\u306e\u6570\u3092\u8a18\u9332\u3067\u304d\u308b\n\n# \u307e\u305f\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5c0f\u3055\u3044\u304b\u3092\u8868\u3059\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u3053\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u3001\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u5c0f\u3055\u3044\u304b\u3092\u8a18\u9332\n# \u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u5c0f\u3055\u3044\u8981\u7d20\u306e\u6570\u3092\u8a18\u9332\u3067\u304d\u308b\n\npositions = [0] * (n + 1)\nfor i in range(n):\n    positions[p[i]] = i\n\ncount = [0] * (n + 1)\nans = 0\nfor i in range(n):\n    j = positions[i + 1]\n    ans += i - count[j]\n    count[j] += 1\nprint(ans)"
}
2022-04-13 21:02:10.302202 REASON stop
2022-04-13 21:02:10.302967 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN = int(input())\nP = list(map(int, input().split()))\n\n# dp[i] = max(dp[i-1], P[i-1])\ndp = [0] * N\ndp[0] = P[0]\n\nans = 1\nfor i in range(1, N):\n    dp[i] = max(dp[i-1], P[i-1])\n    if dp[i] == P[i-1]:\n        ans += 1\n\nprint(ans)"
}
2022-04-13 21:02:10.303026 REASON stop
2022-04-13 21:02:10.303761 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nN = int(input())\nP = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    if P[i] == i+1:\n        ans += 1\n\nprint(ans)"
}
2022-04-13 21:02:10.303813 REASON stop
