["\n\nn = int(input())\nl = input()\nr = input()\n\n# print(n)\n# print(l)\n# print(r)\n\n# 1. Create a list of tuples (left boot, right boot)\n# 2. Sort the list by the left boot\n# 3. Sort the list by the right boot\n# 4. Compare the two sorted lists\n\n# 1. Create a list of tuples (left boot, right boot)\n# 2. Sort the list by the left boot\n# 3. Sort the list by the right boot\n# 4. Compare the two sorted lists\n\n# 1. Create a list of tuples (left boot, right boot)\ntuple_list = []\nfor i in range(n):\n    tuple_list.append((l[i], r[i]))\n\n# print(tuple_list)\n\n# 2. Sort the list by the left boot\nleft_boots = sorted(tuple_list, key=lambda x: x[0])\n# print(left_boots)\n\n# 3. Sort the list by the right boot\nright_boots = sorted(tuple_list, key=lambda x: x[1])\n# print(right_boots)\n\n# 4. Compare the two sorted lists\n\n# a) Create a list of tuples (left boot, right boot, index)\nleft_boots_index = []\nfor i in range(n):\n    left_boots_index.append((left_boots[i][0], left_boots[i][1], i+1))\n\n# print(left_boots_index)\n\n# b) Create a list of tuples (left boot, right boot, index)\nright_boots_index = []\nfor i in range(n):\n    right_boots_index.append((right_boots[i][0], right_boots[i][1], i+1))\n\n# print(right_boots_index)\n\n# c) Compare the two lists\nmax_pairs = 0\npairs = []\n\nfor i in range(n):\n    # If the left boot is compatible with the right boot\n    if left_boots_index[i][0] == right_boots_index[i][1] or left_boots_index[i][0] == \"?\" or right_boots_index[i][1] == \"?\":\n        # If the right boot is compatible with the left boot\n        if left_boots_index[i][1] == right_boots_index[i][0] or left_boots_index[i][1] == \"?\" or right_boots_index[i][0] == \"?\":\n            max_pairs += 1\n            pairs.append((left_boots_index[i][2], right_boots_index[i][2]))\n\n# print(max_pairs)\n# print(pairs)\n\n# Output\nprint(max_pairs)\nfor i in range(max_pairs):\n    print(pairs[i][0], pairs[i][1])", "\n\nimport sys\n\ndef pairs(l, r):\n\tn = len(l)\n\tm = len(r)\n\tif n != m:\n\t\treturn 0\n\t\n\ta = 0\n\tb = 0\n\tc = 0\n\td = 0\n\tfor i in range(n):\n\t\tif l[i] == '?' or r[i] == '?':\n\t\t\ta += 1\n\t\t\tcontinue\n\t\tif l[i] == r[i]:\n\t\t\tb += 1\n\t\t\tcontinue\n\t\tc += 1\n\t\td += 1\n\treturn a + min(b, c)\n\nn = int(sys.stdin.readline().strip())\nl = sys.stdin.readline().strip()\nr = sys.stdin.readline().strip()\nprint(pairs(l, r))", "\n\nimport sys\n\ndef solve(l, r):\n    n = len(l)\n    lefts = {}\n    rights = {}\n    for i in range(n):\n        if l[i] != '?':\n            if l[i] not in lefts:\n                lefts[l[i]] = set()\n            lefts[l[i]].add(i + 1)\n        if r[i] != '?':\n            if r[i] not in rights:\n                rights[r[i]] = set()\n            rights[r[i]].add(i + 1)\n    pairs = []\n    for color in lefts.keys():\n        if color in rights:\n            for left in lefts[color]:\n                for right in rights[color]:\n                    pairs.append((left, right))\n    for color in rights.keys():\n        if color not in lefts:\n            for right in rights[color]:\n                for left in lefts['?']:\n                    pairs.append((left, right))\n    for color in lefts.keys():\n        if color not in rights:\n            for left in lefts[color]:\n                for right in rights['?']:\n                    pairs.append((left, right))\n    for left in lefts['?']:\n        for right in rights['?']:\n            pairs.append((left, right))\n    return pairs\n\ndef main():\n    lines = sys.stdin.readlines()\n    n = int(lines[0])\n    l = lines[1].strip()\n    r = lines[2].strip()\n    pairs = solve(l, r)\n    print(len(pairs))\n    for pair in pairs:\n        print('%d %d' % (pair[0], pair[1]))\n\nif __name__ == '__main__':\n    main()", "\n\n\ndef main():\n    n = int(input())\n    l = input()\n    r = input()\n    dic = {}\n    for i in range(n):\n        if l[i] == '?':\n            if r[i] == '?':\n                dic.setdefault('?', []).append(i)\n            else:\n                dic.setdefault(r[i], []).append(i)\n        else:\n            if r[i] == '?':\n                dic.setdefault(l[i], []).append(i)\n            else:\n                if l[i] == r[i]:\n                    dic.setdefault(l[i], []).append(i)\n\n    res = []\n    for k, v in dic.items():\n        if len(v) % 2 == 1:\n            v.pop()\n        for i in range(0, len(v), 2):\n            res.append((v[i]+1, v[i+1]+1))\n    print(len(res))\n    for x, y in res:\n        print(x, y)\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nl = sys.stdin.readline().strip()\nr = sys.stdin.readline().strip()\n\n#print(n)\n#print(l)\n#print(r)\n\n#print(l[0])\n#print(r[0])\n\n#print(l.index('?'))\n#print(r.index('?'))\n\n#print(l[:l.index('?')])\n#print(l[l.index('?')+1:])\n\n#print(r[:r.index('?')])\n#print(r[r.index('?')+1:])\n\n#print(l[:l.find('?')])\n#print(l[l.find('?')+1:])\n\n#print(r[:r.find('?')])\n#print(r[r.find('?')+1:])\n\ndef max_pairs(n, l, r):\n    if '?' not in l and '?' not in r:\n        pairs = 0\n        for i in range(n):\n            if l[i] == r[i]:\n                pairs += 1\n        return pairs, [(i+1, i+1) for i, c in enumerate(l) if c == r[i]]\n\n    if '?' not in l:\n        pairs = 0\n        for i, c in enumerate(r):\n            if c == '?':\n                pairs += 1\n        return pairs, [(i+1, i+1) for i, c in enumerate(l)]\n\n    if '?' not in r:\n        pairs = 0\n        for i, c in enumerate(l):\n            if c == '?':\n                pairs += 1\n        return pairs, [(i+1, i+1) for i, c in enumerate(r)]\n\n    nl = l.replace('?', '')\n    nr = r.replace('?', '')\n    if nl == nr:\n        return n, [(i+1, i+1) for i in range(n)]\n\n    l_q = l.find('?')\n    r_q = r.find('?')\n    l_q_end = l.rfind('?')\n    r_q_end = r.rfind('?')\n\n    #print(l_q)\n    #print(r_q)\n    #print(l_q_end)\n    #print(r_q_end)\n\n    l_l = l[:l_q]\n    l_r = l[l_q_end+1:]\n    r_l = r[:r_q]\n    r_r = r[r_q_end+1:]\n\n    #print(l_l)\n    #print(l_r)\n    #print(r_l)\n    #print(r_r)\n\n    pairs = 0\n    if l_l == r_l:\n        pairs += len(l_l)\n    if l_r == r_r:\n        pairs += len(l_r)\n\n    return pairs, [(i+1, i+1) for i, c in enumerate(l) if c == r[i]]\n\n\npairs, pairs_list = max_pairs(n, l, r)\n\nprint(pairs)\nfor p in pairs_list:\n    print(p[0], p[1])", "\n\nclass Boot:\n    def __init__(self, id, color):\n        self.id = id\n        self.color = color\n\nclass Node:\n    def __init__(self, id, color, left=None, right=None):\n        self.id = id\n        self.color = color\n        self.left = left\n        self.right = right\n\ndef create_tree(a, left, right):\n    if left > right:\n        return None\n    mid = (left + right) // 2\n    root = Node(a[mid].id, a[mid].color)\n    root.left = create_tree(a, left, mid - 1)\n    root.right = create_tree(a, mid + 1, right)\n    return root\n\ndef find_max_pairs(left_root, right_root, pairs):\n    if left_root is None or right_root is None:\n        return\n    if left_root.color == '?' or right_root.color == '?' or left_root.color == right_root.color:\n        pairs.append((left_root.id, right_root.id))\n        find_max_pairs(left_root.left, right_root.right, pairs)\n        find_max_pairs(left_root.right, right_root.left, pairs)\n    else:\n        if left_root.left is None:\n            find_max_pairs(left_root, right_root.left, pairs)\n        else:\n            find_max_pairs(left_root.left, right_root, pairs)\n        if right_root.left is None:\n            find_max_pairs(left_root.right, right_root, pairs)\n        else:\n            find_max_pairs(left_root, right_root.left, pairs)\n\ndef test_task():\n    n = int(input())\n    left_colors = input()\n    right_colors = input()\n    left_boots = [Boot(i + 1, left_colors[i]) for i in range(n)]\n    right_boots = [Boot(i + 1, right_colors[i]) for i in range(n)]\n    left_root = create_tree(left_boots, 0, n - 1)\n    right_root = create_tree(right_boots, 0, n - 1)\n    pairs = []\n    find_max_pairs(left_root, right_root, pairs)\n    print(len(pairs))\n    for pair in pairs:\n        print(*pair)\n\ntest_task()"]