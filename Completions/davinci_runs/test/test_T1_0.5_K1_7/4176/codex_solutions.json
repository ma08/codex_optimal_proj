["\n\nfrom math import gcd\n\na, b = map(int, input().split())\n\nprint(a*b//gcd(a, b))", "\n\nimport sys\n\n# read a line from stdin and split into a list of integers\ndef get_nums():\n  return [int(s) for s in sys.stdin.readline().split()]\n\ndef main():\n  a, b = get_nums()\n  # we can always divide the snacks by the LCM of a and b\n  print(a*b // gcd(a, b))\n\ndef gcd(a, b):\n  while b:\n    a, b = b, a % b\n  return a\n\nif __name__ == '__main__':\n  main()", "\n\nimport sys\n\ndef main():\n    a, b = [int(x) for x in sys.stdin.readline().split()]\n    print(lcm(a, b))\n\ndef gcd(a, b):\n    \"\"\"\n    Calculate greatest common divisor using Euclidean Algorithm.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"\n    Calculate least common multiple.\n    \"\"\"\n    return a * b // gcd(a, b)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\n# Read from stdin\nA, B = list(map(int, sys.stdin.readline().split()))\n\n# Calculate the minimum number of pieces\n# that can be evenly distributed to the guests\n# in both of the cases with A guests and B guests.\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nprint(lcm(A, B))", "\n\n# a = int(input())\n# b = int(input())\na = int(2)\nb = int(3)\n\nif a > b:\n    print(a)\nelse:\n    print(b)", "\n\nimport sys\n\ndef main():\n    args = sys.stdin.readline().rstrip().split()\n    a = int(args[0])\n    b = int(args[1])\n    print(lcm(a, b))\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nif __name__ == '__main__':\n    main()", "\n\nimport math\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef main():\n    a, b = map(int, input().split())\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()"]