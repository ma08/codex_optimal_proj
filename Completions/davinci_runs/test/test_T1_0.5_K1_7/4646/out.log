2022-04-13 22:26:03.172358 """
You are given an array $a[0 \ldots n-1]$ of length $n$ which consists of non-negative integers. Note that array indices start from zero.

An array is called good if the parity of each index matches the parity of the element at that index. More formally, an array is good if for all $i$ ($0 \le i \le n - 1$) the equality $i \bmod 2 = a[i] \bmod 2$ holds, where $x \bmod 2$ is the remainder of dividing $x$ by 2.

For example, the arrays [$0, 5, 2, 1$] and [$0, 17, 0, 3$] are good, and the array [$2, 4, 6, 7$] is bad, because for $i=1$, the parities of $i$ and $a[i]$ are different: $i \bmod 2 = 1 \bmod 2 = 1$, but $a[i] \bmod 2 = 4 \bmod 2 = 0$.

In one move, you can take any two elements of the array and swap them (these elements are not necessarily adjacent).

Find the minimum number of moves in which you can make the array $a$ good, or say that this is not possible.


-----Input-----

The first line contains a single integer $t$ ($1 \le t \le 1000$) — the number of test cases in the test. Then $t$ test cases follow.

Each test case starts with a line containing an integer $n$ ($1 \le n \le 40$) — the length of the array $a$.

The next line contains $n$ integers $a_0, a_1, \ldots, a_{n-1}$ ($0 \le a_i \le 1000$) — the initial array.


-----Output-----

For each test case, output a single integer — the minimum number of moves to make the given array $a$ good, or -1 if this is not possible.


-----Example-----
Input
4
4
3 2 7 6
3
3 2 6
1
7
7
4 9 2 1 18 3 0

Output
2
1
-1
0



-----Note-----

In the first test case, in the first move, you can swap the elements with indices $0$ and $1$, and in the second move, you can swap the elements with indices $2$ and $3$.

In the second test case, in the first move, you need to swap the elements with indices $0$ and $1$.

In the third test case, you cannot make the array good.
"""
2022-04-13 22:26:03.172374 --------------------------
2022-04-13 22:26:23.337749 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef read_line():\n    return sys.stdin.readline().rstrip()\n\ndef read_int():\n    return int(read_line())\n\ndef read_ints():\n    return list(map(int, read_line().split()))\n\ndef solve(a):\n    n = len(a)\n    even = 0\n    odd = 0\n    for i, x in enumerate(a):\n        if x % 2 == i % 2:\n            continue\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if odd == even:\n        return odd\n    else:\n        return -1\n\ndef main():\n    t = read_int()\n    for _ in range(t):\n        n = read_int()\n        a = read_ints()\n        print(solve(a))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\nif __name__ == '__main__':\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        odd = even = 0\n        for i, a in enumerate(A):\n            if i % 2 == 0:\n                if a % 2 == 1:\n                    even += 1\n            else:\n                if a % 2 == 0:\n                    odd += 1\n        if odd != even:\n            print(-1)\n        else:\n            print(odd)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = [int(x) for x in sys.stdin.readline().split()]\n        if n == 1:\n            if a[0] % 2 == 0:\n                print(-1)\n            else:\n                print(0)\n        else:\n            even_cnt = 0\n            odd_cnt = 0\n            for j in range(n):\n                if j % 2 == 0 and a[j] % 2 == 0:\n                    even_cnt += 1\n                elif j % 2 == 1 and a[j] % 2 == 1:\n                    odd_cnt += 1\n            print(min(even_cnt, odd_cnt))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef is_good(a):\n    for i, v in enumerate(a):\n        if i % 2 != v % 2:\n            return False\n    return True\n\ndef find_min_moves(a):\n    if is_good(a):\n        return 0\n\n    even_positions = []\n    odd_positions = []\n    for i, v in enumerate(a):\n        if i % 2 == 0:\n            even_positions.append(v)\n        else:\n            odd_positions.append(v)\n\n    even_positions.sort()\n    odd_positions.sort()\n\n    moves = 0\n    for i, v in enumerate(a):\n        if i % 2 == 0:\n            if v != even_positions[i // 2]:\n                moves += 1\n        else:\n            if v != odd_positions[i // 2]:\n                moves += 1\n\n    return moves\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        input()\n        a = list(map(int, input().split()))\n        print(find_min_moves(a))"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\nif __name__ == \"__main__\":\n    f = sys.stdin\n    if len(sys.argv) >= 2:\n        fn = sys.argv[1]\n        if fn != '-':\n            f = open(fn)\n\n    t = int(f.readline())\n    for _t in xrange(t):\n        n = int(f.readline())\n        a = map(int, f.readline().split())\n        sum_odd = 0\n        sum_even = 0\n        for i in xrange(n):\n            if a[i] % 2 == 0:\n                sum_even += 1\n            else:\n                sum_odd += 1\n        if sum_odd % 2 == 0 and sum_even % 2 == 0:\n            print 0\n        elif sum_odd % 2 == 1 and sum_even % 2 == 1:\n            print 1\n        else:\n            print -1"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\n# SOLUTION\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        odd_idx = []\n        even_idx = []\n        for i in range(n):\n            if i % 2 == 0:\n                if a[i] % 2 != 0:\n                    odd_idx.append(i)\n            else:\n                if a[i] % 2 == 0:\n                    even_idx.append(i)\n        if len(odd_idx) == len(even_idx):\n            print(len(odd_idx))\n        else:\n            print(-1)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n# Assume the array is of even length.\n# If the length is odd, then the array cannot be made good.\n# If the length is even, then we can always make the array good by swapping\n# the elements at indices i and i+1 for all i.\n\n# Python 2/3 compatibility\nfrom __future__ import print_function\n\n# Read the number of test cases\nT = int(input())\n\n# Iterate over the test cases\nfor t in range(T):\n    # Read the number of elements in the array\n    N = int(input())\n    \n    # If the array has odd length, then print -1\n    if N % 2 == 1:\n        print(-1)\n        continue\n    \n    # Else, print 0\n    print(0)"
    }
  ],
  "created": 1649888763,
  "id": "cmpl-4wfj1vJkvG8qHiJHEDDhuGzrsmTQb",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-13 22:26:23.338033 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef read_line():\n    return sys.stdin.readline().rstrip()\n\ndef read_int():\n    return int(read_line())\n\ndef read_ints():\n    return list(map(int, read_line().split()))\n\ndef solve(a):\n    n = len(a)\n    even = 0\n    odd = 0\n    for i, x in enumerate(a):\n        if x % 2 == i % 2:\n            continue\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if odd == even:\n        return odd\n    else:\n        return -1\n\ndef main():\n    t = read_int()\n    for _ in range(t):\n        n = read_int()\n        a = read_ints()\n        print(solve(a))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:26:23.338070 REASON stop
2022-04-13 22:26:23.338495 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\nif __name__ == '__main__':\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        odd = even = 0\n        for i, a in enumerate(A):\n            if i % 2 == 0:\n                if a % 2 == 1:\n                    even += 1\n            else:\n                if a % 2 == 0:\n                    odd += 1\n        if odd != even:\n            print(-1)\n        else:\n            print(odd)"
}
2022-04-13 22:26:23.338636 REASON stop
2022-04-13 22:26:23.339043 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = [int(x) for x in sys.stdin.readline().split()]\n        if n == 1:\n            if a[0] % 2 == 0:\n                print(-1)\n            else:\n                print(0)\n        else:\n            even_cnt = 0\n            odd_cnt = 0\n            for j in range(n):\n                if j % 2 == 0 and a[j] % 2 == 0:\n                    even_cnt += 1\n                elif j % 2 == 1 and a[j] % 2 == 1:\n                    odd_cnt += 1\n            print(min(even_cnt, odd_cnt))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-13 22:26:23.339090 REASON stop
2022-04-13 22:26:23.356234 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef is_good(a):\n    for i, v in enumerate(a):\n        if i % 2 != v % 2:\n            return False\n    return True\n\ndef find_min_moves(a):\n    if is_good(a):\n        return 0\n\n    even_positions = []\n    odd_positions = []\n    for i, v in enumerate(a):\n        if i % 2 == 0:\n            even_positions.append(v)\n        else:\n            odd_positions.append(v)\n\n    even_positions.sort()\n    odd_positions.sort()\n\n    moves = 0\n    for i, v in enumerate(a):\n        if i % 2 == 0:\n            if v != even_positions[i // 2]:\n                moves += 1\n        else:\n            if v != odd_positions[i // 2]:\n                moves += 1\n\n    return moves\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        input()\n        a = list(map(int, input().split()))\n        print(find_min_moves(a))"
}
2022-04-13 22:26:23.356327 REASON stop
2022-04-13 22:26:23.371089 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\nif __name__ == \"__main__\":\n    f = sys.stdin\n    if len(sys.argv) >= 2:\n        fn = sys.argv[1]\n        if fn != '-':\n            f = open(fn)\n\n    t = int(f.readline())\n    for _t in xrange(t):\n        n = int(f.readline())\n        a = map(int, f.readline().split())\n        sum_odd = 0\n        sum_even = 0\n        for i in xrange(n):\n            if a[i] % 2 == 0:\n                sum_even += 1\n            else:\n                sum_odd += 1\n        if sum_odd % 2 == 0 and sum_even % 2 == 0:\n            print 0\n        elif sum_odd % 2 == 1 and sum_even % 2 == 1:\n            print 1\n        else:\n            print -1"
}
2022-04-13 22:26:23.371181 REASON stop
2022-04-13 22:26:23.372162 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\n# SOLUTION\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        odd_idx = []\n        even_idx = []\n        for i in range(n):\n            if i % 2 == 0:\n                if a[i] % 2 != 0:\n                    odd_idx.append(i)\n            else:\n                if a[i] % 2 == 0:\n                    even_idx.append(i)\n        if len(odd_idx) == len(even_idx):\n            print(len(odd_idx))\n        else:\n            print(-1)\n\nmain()"
}
2022-04-13 22:26:23.372235 REASON stop
2022-04-13 22:26:23.373065 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n# Assume the array is of even length.\n# If the length is odd, then the array cannot be made good.\n# If the length is even, then we can always make the array good by swapping\n# the elements at indices i and i+1 for all i.\n\n# Python 2/3 compatibility\nfrom __future__ import print_function\n\n# Read the number of test cases\nT = int(input())\n\n# Iterate over the test cases\nfor t in range(T):\n    # Read the number of elements in the array\n    N = int(input())\n    \n    # If the array has odd length, then print -1\n    if N % 2 == 1:\n        print(-1)\n        continue\n    \n    # Else, print 0\n    print(0)"
}
2022-04-13 22:26:23.373123 REASON stop
