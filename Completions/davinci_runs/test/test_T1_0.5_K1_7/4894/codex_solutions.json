["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    notes = sys.stdin.readline().strip().split()\n    staff = {'G': '', 'F': '', 'E': '', 'D': '', 'C': '', 'B': '', 'A': '', 'g': '', 'f': '', 'e': '', 'd': '', 'c': '', 'b': '', 'a': ''}\n    last_note = 'C'\n    last_dur = 1\n    for note in notes:\n        if note[0] in staff:\n            if note[0].islower():\n                last_note = note[0].upper()\n            else:\n                last_note = note[0]\n            if len(note) > 1:\n                last_dur = int(note[1])\n            else:\n                last_dur = 1\n        else:\n            if note[0] == '#':\n                last_note = chr(ord(last_note) + 1)\n            if note[0] == 'b':\n                last_note = chr(ord(last_note) - 1)\n            if len(note) > 1:\n                last_dur = int(note[1])\n            else:\n                last_dur = 1\n        staff[last_note] += '*'*last_dur + ' '\n    for key in staff:\n        print(key + ': ' + staff[key])\nmain()", "\n\ndef main():\n    # Read number of notes\n    n = int(input())\n\n    # Read notes\n    notes = input().split()\n\n    # Create a treble clef staff\n    staff = [\"G:\", \"F:\", \"E:\", \"D:\", \"C:\", \"B:\", \"A:\", \"g:\", \"f:\", \"e:\", \"d:\", \"c:\", \"b:\", \"a:\"]\n\n    # Initialize variables\n    row = 0\n    column = 0\n    octave = 0\n    previous_octave = 0\n\n    # For each note in the song\n    for note in notes:\n        # If the note is a letter\n        if note[0] in \"ABCDEFGabcdefg\":\n            # If the note is uppercase\n            if note[0] in \"ABCDEFG\":\n                # If the note is a B\n                if note[0] == \"B\":\n                    # Set the row to the B line\n                    row = 5\n                # If the note is an A\n                elif note[0] == \"A\":\n                    # Set the row to the A line\n                    row = 6\n                # If the note is a G\n                elif note[0] == \"G\":\n                    # Set the row to the G line\n                    row = 7\n                # If the note is an F\n                elif note[0] == \"F\":\n                    # Set the row to the F line\n                    row = 8\n                # If the note is an E\n                elif note[0] == \"E\":\n                    # Set the row to the E line\n                    row = 9\n                # If the note is a D\n                elif note[0] == \"D\":\n                    # Set the row to the D line\n                    row = 10\n                # If the note is a C\n                elif note[0] == \"C\":\n                    # Set the row to the C line\n                    row = 11\n\n                # Set the octave to the uppercase octave\n                octave = 1\n            # If the note is lowercase\n            else:\n                # If the note is a b\n                if note[0] == \"b\":\n                    # Set the row to the b line\n                    row = 0\n                # If the note is an a\n                elif note[0] == \"a\":\n                    # Set the row to the a line\n                    row = 1\n                # If the note is a g\n                elif note[0] == \"g\":\n                    # Set the row to the g line\n                    row = 2\n                # If the note is an f\n                elif note[0] == \"f\":\n                    # Set the row to the f line\n                    row = 3\n                # If the note is an e\n                elif note[0] == \"e\":\n                    # Set the row to the e line\n                    row = 4\n                # If the note is a d\n                elif note[0] == \"d\":\n                    # Set the row to the d line\n                    row = 5\n                # If the note is a c\n                elif note[0] == \"c\":\n                    # Set the row to the c line\n                    row = 6\n\n                # Set the octave to the lowercase octave\n                octave = 0\n\n            # If the octave is different than the previous octave\n            if octave != previous_octave:\n                # If the octave is the uppercase octave\n                if octave == 1:\n                    # Add spaces to the staff until the middle c line\n                    for i in range(11 - row):\n                        staff[i] += \" \" * (column + 1)\n\n                    # Set the row to the middle c line\n                    row = 11\n                # If the octave is the lowercase octave\n                else:\n                    # Add spaces to the staff until the bottom of the staff\n                    for i in range(row, 14):\n                        staff[i] += \" \" * (column + 1)\n\n                    # Set the row to the bottom of the staff\n                    row = 13\n\n            # If the note is a letter with no duration\n            if len(note) == 1:\n                # Add an asterisk to the staff at the row\n                staff[row] += \"*\"\n\n                # Increment the column by 1\n                column += 1\n            # If the note is a letter with a duration\n            else:\n                # Add the duration asterisks to the staff at the row\n                staff[row] += \"*\" * int(note[1])\n\n                # Increment the column by the duration\n                column += int(note[1])\n\n            # Set the previous octave to the current octave\n            previous_octave = octave\n\n        # If the note is a number\n        else:\n            # Add the duration asterisks to the staff at the row\n            staff[row] += \"*\" * int(note)\n\n            # Increment the column by the duration\n            column += int(note)\n\n        # Add a space to the staff at the row\n        staff[row] += \" \"\n\n        # Increment the column by 1\n        column += 1\n\n    # If the octave is the uppercase octave\n    if octave == 1:\n        # Add spaces to the staff until the bottom of the staff\n        for i in range(row, 14):\n            staff[i] += \" \" * (column + 1)\n    # If the octave is the lowercase octave\n    else:\n        # Add spaces to the staff until the middle c line\n        for i in range(11 - row):\n            staff[i] += \" \" * (column + 1)\n\n    # For each row in the treble clef staff\n    for row in staff:\n        # Add a line to the staff\n        row += \"-\" * (column - len(row))\n\n        # Print the row\n        print(row)\n\nmain()", "\n\nimport sys\n\ndef main():\n    # define the staff\n    staff = {'G':[], 'F':[], 'E':[], 'D':[], 'C':[], 'B':[], 'A':[], 'g':[], 'f':[], 'e':[], 'd':[], 'c':[], 'b':[], 'a':[]}\n    # read the number of notes from the first line\n    n = int(sys.stdin.readline().strip())\n    # read the notes from the second line\n    notes = sys.stdin.readline().strip().split()\n    # iterate through the notes adding them to the staff\n    for note in notes:\n        # if the note is a sharp or flat, skip it\n        if not (note[0].isalpha() and note[0].isupper()):\n            # get the pitch and the duration of the note\n            pitch = note[0]\n            duration = 1 if len(note) == 1 else int(note[1])\n            # add the note to the staff\n            staff[pitch].extend(['*' for i in range(duration)])\n    # print the staff\n    for key in staff:\n        # print the pitch\n        print(key + ':', end='')\n        # find the length of the longest note in the staff\n        longest = max(map(lambda x: len(x), staff.values()))\n        # if the staff line is empty, print the necessary number of spaces\n        if staff[key] == []:\n            print(' ' * longest)\n        # otherwise, print the notes\n        else:\n            # print the necessary number of spaces between the pitch and the first note\n            print(' ' * (longest - len(staff[key])), end='')\n            # print the notes\n            print(''.join(staff[key]))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    notes = sys.stdin.readline().split()\n    staff, notes = create_staff(notes)\n    print_staff(staff)\n\ndef create_staff(notes):\n    staff = {'G':[], 'F':[], 'E':[], 'D':[], 'C':[], 'B':[], 'A':[], 'g':[], 'f':[], 'e':[], 'd':[], 'c':[], 'b':[], 'a':[]}\n    for note in notes:\n        if len(note) > 1:\n            note, multiplier = note[0], int(note[1])\n        else:\n            multiplier = 1\n        staff = add_note(staff, note, multiplier)\n    return staff, notes\n\ndef add_note(staff, note, multiplier):\n    if note == 'C':\n        staff['C'].append('*'*multiplier)\n    elif note == 'D':\n        staff['D'].append(' '*multiplier)\n        staff['C'].append('*'*multiplier)\n    elif note == 'E':\n        staff['E'].append(' '*multiplier)\n        staff['D'].append('*'*multiplier)\n        staff['C'].append(' '*multiplier)\n    elif note == 'F':\n        staff['F'].append(' '*multiplier)\n        staff['E'].append('*'*multiplier)\n        staff['D'].append(' '*multiplier)\n        staff['C'].append(' '*multiplier)\n    elif note == 'G':\n        staff['G'].append(' '*multiplier)\n        staff['F'].append('*'*multiplier)\n        staff['E'].append(' '*multiplier)\n        staff['D'].append(' '*multiplier)\n        staff['C'].append(' '*multiplier)\n    elif note == 'A':\n        staff['A'].append(' '*multiplier)\n        staff['G'].append('*'*multiplier)\n        staff['F'].append(' '*multiplier)\n        staff['E'].append(' '*multiplier)\n        staff['D'].append(' '*multiplier)\n        staff['C'].append(' '*multiplier)\n    elif note == 'B':\n        staff['B'].append(' '*multiplier)\n        staff['A'].append('*'*multiplier)\n        staff['G'].append(' '*multiplier)\n        staff['F'].append(' '*multiplier)\n        staff['E'].append(' '*multiplier)\n        staff['D'].append(' '*multiplier)\n        staff['C'].append(' '*multiplier)\n    elif note == 'c':\n        staff['c'].append('*'*multiplier)\n        staff['B'].append(' '*multiplier)\n        staff['A'].append(' '*multiplier)\n        staff['G'].append(' '*multiplier)\n        staff['F'].append(' '*multiplier)\n        staff['E'].append(' '*multiplier)\n        staff['D'].append(' '*multiplier)\n        staff['C'].append(' '*multiplier)\n    elif note == 'd':\n        staff['d'].append(' '*multiplier)\n        staff['c'].append('*'*multiplier)\n        staff['B'].append(' '*multiplier)\n        staff['A'].append(' '*multiplier)\n        staff['G'].append(' '*multiplier)\n        staff['F'].append(' '*multiplier)\n        staff['E'].append(' '*multiplier)\n        staff['D'].append(' '*multiplier)\n        staff['C'].append(' '*multiplier)\n    elif note == 'e':\n        staff['e'].append(' '*multiplier)\n        staff['d'].append('*'*multiplier)\n        staff['c'].append(' '*multiplier)\n        staff['B'].append(' '*multiplier)\n        staff['A'].append(' '*multiplier)\n        staff['G'].append(' '*multiplier)\n        staff['F'].append(' '*multiplier)\n        staff['E'].append(' '*multiplier)\n        staff['D'].append(' '*multiplier)\n        staff['C'].append(' '*multiplier)\n    elif note == 'f':\n        staff['f'].append(' '*multiplier)\n        staff['e'].append('*'*multiplier)\n        staff['d'].append(' '*multiplier)\n        staff['c'].append(' '*multiplier)\n        staff['B'].append(' '*multiplier)\n        staff['A'].append(' '*multiplier)\n        staff['G'].append(' '*multiplier)\n        staff['F'].append(' '*multiplier)\n        staff['E'].append(' '*multiplier)\n        staff['D'].append(' '*multiplier)\n        staff['C'].append(' '*multiplier)\n    elif note == 'g':\n        staff['g'].append(' '*multiplier)\n        staff['f'].append('*'*multiplier)\n        staff['e'].append(' '*multiplier)\n        staff['d'].append(' '*multiplier)\n        staff['c'].append(' '*multiplier)\n        staff['B'].append(' '*multiplier)\n        staff['A'].append(' '*multiplier)\n        staff['G'].append(' '*multiplier)\n        staff['F'].append(' '*multiplier)\n        staff['E'].append(' '*multiplier)\n        staff['D'].append(' '*multiplier)\n        staff['C'].append(' '*multiplier)\n    return staff\n\ndef print_staff(staff):\n    for key in ['G', 'F', 'E', 'D', 'C', 'B', 'A', 'g', 'f', 'e', 'd', 'c', 'b', 'a']:\n        print(key+': '+''.join(staff[key]))\n\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    notes = sys.stdin.readline().strip().split()\n    if n != len(notes):\n        return\n    notes = [Note(note) for note in notes]\n    print_staff(notes)\n\nclass Note:\n    def __init__(self, note):\n        self.pitch = note[0]\n        self.duration = 1\n        if len(note) > 1:\n            self.duration = int(note[1:])\n\ndef print_staff(notes):\n    for i in range(8):\n        for n in notes:\n            if n.pitch == pitches[i]:\n                print(n.duration*'*', end='')\n            elif n.pitch == pitches[i+1]:\n                print(' '*(n.duration-1)+'*', end='')\n            else:\n                print(' '*n.duration, end='')\n            print(' ', end='')\n        print()\n\npitches = ['G', 'F', 'E', 'D', 'C', 'B', 'A', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    notes = sys.stdin.readline().strip().split(' ')\n    if n != len(notes):\n        return\n    note_map = {}\n    note_map['A'] = [3, 1]\n    note_map['B'] = [2, 1]\n    note_map['C'] = [1, 2]\n    note_map['D'] = [0, 2]\n    note_map['E'] = [1, 0]\n    note_map['F'] = [2, 0]\n    note_map['G'] = [3, 0]\n    note_map['a'] = [3, -1]\n    note_map['b'] = [2, -1]\n    note_map['c'] = [1, -2]\n    note_map['d'] = [0, -2]\n    note_map['e'] = [1, -4]\n    note_map['f'] = [2, -4]\n    note_map['g'] = [3, -4]\n    staff = [\n        ['G:'],\n        ['F:'],\n        ['E:'],\n        ['D:'],\n        ['C:'],\n        ['B:'],\n        ['A:'],\n        ['g:'],\n        ['f:'],\n        ['e:'],\n        ['d:'],\n        ['c:'],\n        ['b:'],\n        ['a:'],\n    ]\n    for note in notes:\n        duration = 1\n        if len(note) > 1:\n            duration = int(note[1])\n        note = note[0]\n        staff[note_map[note][0]][0] += ' ' * (duration - 1)\n        staff[note_map[note][0]][0] += '*'\n        if note_map[note][1] > 0:\n            staff[note_map[note][1]][0] += '-' * (duration - 1)\n            staff[note_map[note][1]][0] += '*'\n        if note_map[note][1] < 0:\n            staff[note_map[note][1]][0] += ' ' * (duration - 1)\n            staff[note_map[note][1]][0] += '*'\n    for line in staff:\n        print(line[0])\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    lines = open(sys.argv[1], 'r')\n    notes = lines.readlines()\n    lines.close()\n\n    notes = [line.strip() for line in notes]\n    song = notes[1]\n    song = song.split()\n\n    staff = {'G':[], 'F':[], 'E':[], 'D':[], 'C':[], 'B':[], 'A':[], 'g':[], 'f':[], 'e':[], 'd':[], 'c':[], 'b':[], 'a':[]}\n\n    for note in song:\n        if note[0] == 'C':\n            staff['C'].append(note)\n        elif note[0] == 'D':\n            staff['D'].append(note)\n        elif note[0] == 'E':\n            staff['E'].append(note)\n        elif note[0] == 'F':\n            staff['F'].append(note)\n        elif note[0] == 'G':\n            staff['G'].append(note)\n        elif note[0] == 'A':\n            staff['A'].append(note)\n        elif note[0] == 'B':\n            staff['B'].append(note)\n        elif note[0] == 'c':\n            staff['c'].append(note)\n        elif note[0] == 'd':\n            staff['d'].append(note)\n        elif note[0] == 'e':\n            staff['e'].append(note)\n        elif note[0] == 'f':\n            staff['f'].append(note)\n        elif note[0] == 'g':\n            staff['g'].append(note)\n\n    for key in staff:\n        if staff[key] == []:\n            staff[key] = ''\n        else:\n            staff[key] = ' '.join(staff[key])\n\n    for key in staff:\n        print(key + ': ' + staff[key])\n\nif __name__ == '__main__':\n    main()"]