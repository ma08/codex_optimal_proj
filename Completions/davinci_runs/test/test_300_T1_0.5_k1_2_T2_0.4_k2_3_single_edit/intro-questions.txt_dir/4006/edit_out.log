2022-04-20 00:36:05.575377 num operations 1
2022-04-20 00:36:05.575389 size on input set 1
2022-04-20 00:36:05.575538 using api key jaanu
2022-04-20 00:36:11.271789 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    f_in = open(\"f.in\", \"r\")\n    n = int(f_in.readline())\n\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\n\n    \"\"\"\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    f_in = open(\"f.in\", \"r\")  # open file\n    n = int(f_in.readline())  # read first line\n    print(count_reachable(n))  # print result\n\n# count number of reachable numbers\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n - 1) + is_reachable(n - 1, n)\n\n# check if n is reachable from m\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n // 10, m)\n    return is_reachable(n - 1, m)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    f_in = open(\"f.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n-1)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650414966,
  "object": "edit"
}
2022-04-20 00:36:11.272091 fix syntax errors 3 ['\n\ndef main():\n    f_in = open("f.in", "r")\n    n = int(f_in.readline())\n\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\n\n    """\n    :param n:\n    :param m:\n    :return:\n    """\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    f_in = open("f.in", "r")  # open file\n    n = int(f_in.readline())  # read first line\n    print(count_reachable(n))  # print result\n\n# count number of reachable numbers\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n - 1) + is_reachable(n - 1, n)\n\n# check if n is reachable from m\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n // 10, m)\n    return is_reachable(n - 1, m)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    f_in = open("f.in", "r")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n-1)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 00:36:11.272133 size on output set 3
2022-04-20 00:36:11.272145 num operations 1
2022-04-20 00:36:11.272152 size on input set 1
2022-04-20 00:36:11.272312 using api key kouti
2022-04-20 00:36:13.082852 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef f(n):\n    n = n + 1\n    while n % 10 == 0 and n != 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "def f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "def f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650414971,
  "object": "edit"
}
2022-04-20 00:36:13.083071 fix syntax errors 3 ['\ndef f(n):\n    n = n + 1\n    while n % 10 == 0 and n != 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == "__main__":\n    main()\n', 'def f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == "__main__":\n    main()\n', 'def f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 00:36:13.083099 size on output set 2
