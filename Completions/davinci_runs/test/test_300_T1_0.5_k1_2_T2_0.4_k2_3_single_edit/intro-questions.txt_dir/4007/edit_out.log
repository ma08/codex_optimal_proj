2022-04-20 00:36:13.476681 num operations 1
2022-04-20 00:36:13.476691 size on input set 1
2022-04-20 00:36:13.476866 using api key soukgp
2022-04-20 00:36:49.258311 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nf = [int(x) for x in input().split()]\n\n# Find friends who don't know who to give gifts to\n# and friends who don't know who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don't know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don't know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(\" \".join(str(x) for x in f))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nf = [int(x) for x in input().split()]\n\n# Find friends who don't know who to give gifts to\n# and friends who don't know who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don't know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don't know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(\" \".join(str(x) for x in f))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# In[2]:\n\n\ndf = pd.read_csv(\"C:/Users/Dell/Desktop/ML/ML/train.csv\")\n\n\n# In[3]:\n\n\ndf.head()\n\n\n# In[4]:\n\n\ndf.info()\n\n\n# In[5]:\n\n\ndf.describe()\n\n\n# In[6]:\n\n\ndf.columns\n\n\n# In[7]:\n\n\ndf.isnull().sum()\n\n\n# In[8]:\n\n\ndf.shape\n\n\n# In[9]:\n\n\ndf['Age'].hist(bins=20)\n\n\n# In[10]:\n\n\ndf['Age'].isnull().sum()\n\n\n# In[11]:\n\n\ndf['Age'].fillna(df['Age'].mean(),inplace=True)\n\n\n# In[12]:\n\n\ndf.isnull().sum()\n\n\n# In[13]:\n\n\ndf['Embarked'].value_counts()\n\n\n# In[14]:\n\n\ndf['Embarked'].fillna('S',inplace=True)\n\n\n# In[15]:\n\n\ndf.isnull().sum()\n\n\n# In[16]:\n\n\ndf.drop('Cabin',axis=1,inplace=True)\n\n\n# In[17]:\n\n\ndf.isnull().sum()\n\n\n# In[18]:\n\n\ndf.drop('PassengerId',axis=1,inplace=True)\n\n\n# In[19]:\n\n\ndf.isnull().sum()\n\n\n# In[20]:\n\n\ndf.drop('Name',axis=1,inplace=True)\n\n\n# In[21]:\n\n\ndf.isnull().sum()\n\n\n# In[22]:\n\n\ndf.drop('Ticket',axis=1,inplace=True)\n\n\n# In[23]:\n\n\ndf.isnull().sum()\n\n\n# In[24]:\n\n\ndf.head()\n\n\n# In[25]:\n\n\ndf['Sex'].value_counts()\n\n\n# In[26]:\n\n\ndf['Sex']=df['Sex'].map({'male':0,'female':1})\n\n\n# In[27]:\n\n\ndf.head()\n\n\n# In[28]:\n\n\ndf['Embarked'].value_counts()\n\n\n# In[29]:\n\n\ndf['Embarked']=df['Embarked'].map({'S':0,'C':1,'Q':2})\n\n\n# In[30]:\n\n\ndf.head()\n\n\n# In[31]:\n\n\ndf.info()\n\n\n# In[32]:\n\n\ndf.drop('Survived',axis=1,inplace=True)\n\n\n# In[33]:\n\n\ndf.info()\n\n\n# In[34]:\n\n\ndf.head()\n\n\n# In[35]:\n\n\ny=df['Survived']\n\n\n# In[36]:\n\n\ndf.drop('Survived',axis=1,inplace=True)\n\n\n# In[37]:\n\n\ndf.head()\n\n\n# In[38]:\n\n\nfrom sklearn.model_selection import train_test_split\n\n\n# In[39]:\n\n\nX_train,X_test,y_train,y_test=train_test_split(df,y,test_size=0.3,random_state=0)\n\n\n# In[40]:\n\n\nfrom sklearn.linear_model import LogisticRegression\n\n\n# In[41]:\n\n\nlogreg=LogisticRegression()\n\n\n# In[42]:\n\n\nlogreg.fit(X_train,y_train)\n\n\n# In[43]:\n\n\ny_pred=logreg.predict(X_test)\n\n\n# In[44]:\n\n\nfrom sklearn.metrics import confusion_matrix\n\n\n# In[45]:\n\n\nconfusion_matrix(y_test,y_pred)\n\n\n# In[46]:\n\n\nfrom sklearn.metrics import classification_report\n\n\n# In[47]:\n\n\nprint(classification_report(y_test,y_pred))\n\n\n# In[48]:\n\n\nfrom sklearn.metrics import accuracy_score\n\n\n# In[49]:\n\n\naccuracy_score(y_test,y_pred)\n\n\n# In[50]:\n\n\nfrom sklearn.metrics import roc_auc_score\n\n\n# In[51]:\n\n\nroc_auc_score(y_test,y_pred)\n\n\n# In[52]:\n\n\nfrom sklearn.metrics import roc_curve\n\n\n# In[53]:\n\n\ny_pred_proba=logreg.predict_proba(X_test)[:,1]\n\n\n# In[54]:\n\n\nfpr,tpr,thresholds=roc_curve(y_test,y_pred_proba)\n\n\n# In[55]:\n\n\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr,label='Logistic Regression')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Logistic Regression')\nplt.show()\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\nn = int(input())\nf = [int(x) for x in input().split()]\n\n# Find friends who don't know who to give gifts to\n# and friends who don't know who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don't know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don't know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(\" \".join(str(x) for x in f))\n"
    }
  ],
  "created": 1650414973,
  "object": "edit"
}
2022-04-20 00:36:49.258647 fix syntax errors 3 ['\nn = int(input())\nf = [int(x) for x in input().split()]\n\n# Find friends who don\'t know who to give gifts to\n# and friends who don\'t know who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don\'t know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don\'t know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(" ".join(str(x) for x in f))\n', '\nn = int(input())\nf = [int(x) for x in input().split()]\n\n# Find friends who don\'t know who to give gifts to\n# and friends who don\'t know who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don\'t know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don\'t know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(" ".join(str(x) for x in f))\n', '#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# In[2]:\n\n\ndf = pd.read_csv("C:/Users/Dell/Desktop/ML/ML/train.csv")\n\n\n# In[3]:\n\n\ndf.head()\n\n\n# In[4]:\n\n\ndf.info()\n\n\n# In[5]:\n\n\ndf.describe()\n\n\n# In[6]:\n\n\ndf.columns\n\n\n# In[7]:\n\n\ndf.isnull().sum()\n\n\n# In[8]:\n\n\ndf.shape\n\n\n# In[9]:\n\n\ndf[\'Age\'].hist(bins=20)\n\n\n# In[10]:\n\n\ndf[\'Age\'].isnull().sum()\n\n\n# In[11]:\n\n\ndf[\'Age\'].fillna(df[\'Age\'].mean(),inplace=True)\n\n\n# In[12]:\n\n\ndf.isnull().sum()\n\n\n# In[13]:\n\n\ndf[\'Embarked\'].value_counts()\n\n\n# In[14]:\n\n\ndf[\'Embarked\'].fillna(\'S\',inplace=True)\n\n\n# In[15]:\n\n\ndf.isnull().sum()\n\n\n# In[16]:\n\n\ndf.drop(\'Cabin\',axis=1,inplace=True)\n\n\n# In[17]:\n\n\ndf.isnull().sum()\n\n\n# In[18]:\n\n\ndf.drop(\'PassengerId\',axis=1,inplace=True)\n\n\n# In[19]:\n\n\ndf.isnull().sum()\n\n\n# In[20]:\n\n\ndf.drop(\'Name\',axis=1,inplace=True)\n\n\n# In[21]:\n\n\ndf.isnull().sum()\n\n\n# In[22]:\n\n\ndf.drop(\'Ticket\',axis=1,inplace=True)\n\n\n# In[23]:\n\n\ndf.isnull().sum()\n\n\n# In[24]:\n\n\ndf.head()\n\n\n# In[25]:\n\n\ndf[\'Sex\'].value_counts()\n\n\n# In[26]:\n\n\ndf[\'Sex\']=df[\'Sex\'].map({\'male\':0,\'female\':1})\n\n\n# In[27]:\n\n\ndf.head()\n\n\n# In[28]:\n\n\ndf[\'Embarked\'].value_counts()\n\n\n# In[29]:\n\n\ndf[\'Embarked\']=df[\'Embarked\'].map({\'S\':0,\'C\':1,\'Q\':2})\n\n\n# In[30]:\n\n\ndf.head()\n\n\n# In[31]:\n\n\ndf.info()\n\n\n# In[32]:\n\n\ndf.drop(\'Survived\',axis=1,inplace=True)\n\n\n# In[33]:\n\n\ndf.info()\n\n\n# In[34]:\n\n\ndf.head()\n\n\n# In[35]:\n\n\ny=df[\'Survived\']\n\n\n# In[36]:\n\n\ndf.drop(\'Survived\',axis=1,inplace=True)\n\n\n# In[37]:\n\n\ndf.head()\n\n\n# In[38]:\n\n\nfrom sklearn.model_selection import train_test_split\n\n\n# In[39]:\n\n\nX_train,X_test,y_train,y_test=train_test_split(df,y,test_size=0.3,random_state=0)\n\n\n# In[40]:\n\n\nfrom sklearn.linear_model import LogisticRegression\n\n\n# In[41]:\n\n\nlogreg=LogisticRegression()\n\n\n# In[42]:\n\n\nlogreg.fit(X_train,y_train)\n\n\n# In[43]:\n\n\ny_pred=logreg.predict(X_test)\n\n\n# In[44]:\n\n\nfrom sklearn.metrics import confusion_matrix\n\n\n# In[45]:\n\n\nconfusion_matrix(y_test,y_pred)\n\n\n# In[46]:\n\n\nfrom sklearn.metrics import classification_report\n\n\n# In[47]:\n\n\nprint(classification_report(y_test,y_pred))\n\n\n# In[48]:\n\n\nfrom sklearn.metrics import accuracy_score\n\n\n# In[49]:\n\n\naccuracy_score(y_test,y_pred)\n\n\n# In[50]:\n\n\nfrom sklearn.metrics import roc_auc_score\n\n\n# In[51]:\n\n\nroc_auc_score(y_test,y_pred)\n\n\n# In[52]:\n\n\nfrom sklearn.metrics import roc_curve\n\n\n# In[53]:\n\n\ny_pred_proba=logreg.predict_proba(X_test)[:,1]\n\n\n# In[54]:\n\n\nfpr,tpr,thresholds=roc_curve(y_test,y_pred_proba)\n\n\n# In[55]:\n\n\nplt.plot([0,1],[0,1],\'k--\')\nplt.plot(fpr,tpr,label=\'Logistic Regression\')\nplt.xlabel(\'False Positive Rate\')\nplt.ylabel(\'True Positive Rate\')\nplt.title(\'Logistic Regression\')\nplt.show()\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\nn = int(input())\nf = [int(x) for x in input().split()]\n\n# Find friends who don\'t know who to give gifts to\n# and friends who don\'t know who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don\'t know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don\'t know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(" ".join(str(x) for x in f))\n']
2022-04-20 00:36:49.258818 size on output set 2
2022-04-20 00:36:49.258833 num operations 1
2022-04-20 00:36:49.258840 size on input set 1
2022-04-20 00:36:49.258998 using api key sourya
2022-04-20 00:36:51.710802 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Find the first friend who has a gift\ni = 0\nwhile friends[i] != 0:\n    i += 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j < n:\n    if friends[j - 1] == 0:\n        friends[j - 1] = i + 1\n        i += 1\n    j += 1\n\n# Print out the friends\nprint(*friends)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Find the first friend who has a gift\ni = 0\nwhile friends[i] != 0:\n    i += 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j <= n:\n    if friends[j - 1] == 0:\n        friends[j - 1] = i + 1\n        i += 1\n    j += 1\n\n# Print out the friends\nprint(*friends)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Find the first friend who has a gift\ni = 0\nwhile friends[i] != 0:\n    i += 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j <= n:\n    if friends[j - 1] == 0:\n        friends[j - 1] = i + 1\n        i += 1\n    j += 1\n\n# Print out the friends\nprint(friends)\n"
    }
  ],
  "created": 1650415010,
  "object": "edit"
}
2022-04-20 00:36:51.711018 fix syntax errors 3 ["#!/usr/bin/env python3\n\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Find the first friend who has a gift\ni = 0\nwhile friends[i] != 0:\n    i += 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j < n:\n    if friends[j - 1] == 0:\n        friends[j - 1] = i + 1\n        i += 1\n    j += 1\n\n# Print out the friends\nprint(*friends)\n", "\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Find the first friend who has a gift\ni = 0\nwhile friends[i] != 0:\n    i += 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j <= n:\n    if friends[j - 1] == 0:\n        friends[j - 1] = i + 1\n        i += 1\n    j += 1\n\n# Print out the friends\nprint(*friends)\n", "#!/usr/bin/env python3\n\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Find the first friend who has a gift\ni = 0\nwhile friends[i] != 0:\n    i += 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j <= n:\n    if friends[j - 1] == 0:\n        friends[j - 1] = i + 1\n        i += 1\n    j += 1\n\n# Print out the friends\nprint(friends)\n"]
2022-04-20 00:36:51.711052 size on output set 3
