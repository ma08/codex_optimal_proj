2022-04-20 01:15:10.761841 num operations 1
2022-04-20 01:15:10.761862 size on input set 1
2022-04-20 01:15:10.762029 using api key sunu
2022-04-20 01:15:12.896932 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(str(i+1) + \" \" + str(j+1) + \" \" + str(s-1))\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1, j+1, s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    }
  ],
  "created": 1650417310,
  "object": "edit"
}
2022-04-20 01:15:12.897200 fix syntax errors 3 ["\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", '\n\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'*\':\n                k += 1\n                grid[i][j] = \'.\'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == \'*\' and grid[i-s][j] == \'*\' and grid[i][j+s] == \'*\' and grid[i][j-s] == \'*\':\n                        grid[i+s][j] = \'.\'\n                        grid[i-s][j] = \'.\'\n                        grid[i][j+s] = \'.\'\n                        grid[i][j-s] = \'.\'\n                        s += 1\n                    else:\n                        break\n                print(str(i+1) + " " + str(j+1) + " " + str(s-1))\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n', "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1, j+1, s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"]
2022-04-20 01:15:12.897248 size on output set 3
2022-04-20 01:15:12.897259 num operations 1
2022-04-20 01:15:12.897265 size on input set 1
2022-04-20 01:15:12.897420 using api key gabby
2022-04-20 01:15:28.511693 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m or grid[i-r][j-r] == '.' or grid[i-r][j+r] == '.' or grid[i+r][j-r] == '.' or grid[i+r][j+r] == '.'):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*' and grid[i][j-r] == '*' and grid[i][j+r] == '*' and grid[i-r][j] == '*' and grid[i+r][j] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m or grid[i-r][j-r] != '*' or grid[i-r][j+r] != '*' or grid[i+r][j-r] != '*' or grid[i+r][j+r] != '*'):\n                            flag = False\n                        else:\n                            stars.append([i+1,j+1,r])\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n                if (i > 0 and j > 0 and grid[i-1][j-1] == '*') or (i > 0 and grid[i-1][j] == '*') or (i > 0 and j < m-1 and grid[i-1][j+1] == '*') or (j > 0 and grid[i][j-1] == '*') or (j < m-1 and grid[i][j+1] == '*') or (i < n-1 and j > 0 and grid[i+1][j-1] == '*') or (i < n-1 and grid[i+1][j] == '*') or (i < n-1 and j < m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r < 0 or j-r < 0 or i+r >= n or j+r >= m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*') and (grid[i-r][j] == '*' and grid[i][j-r] == '*' and grid[i+r][j] == '*' and grid[i][j+r] == '*'):\n                                stars.append([i+1, j+1, r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0], stars[i][1], stars[i][2])\nmain()\n"
    }
  ],
  "created": 1650417312,
  "object": "edit"
}
2022-04-20 01:15:28.512047 fix syntax errors 3 ['\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m or grid[i-r][j-r] == \'.\' or grid[i-r][j+r] == \'.\' or grid[i+r][j-r] == \'.\' or grid[i+r][j+r] == \'.\'):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\' and grid[i][j-r] == \'*\' and grid[i][j+r] == \'*\' and grid[i-r][j] == \'*\' and grid[i+r][j] == \'*\'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n', '\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m or grid[i-r][j-r] != \'*\' or grid[i-r][j+r] != \'*\' or grid[i+r][j-r] != \'*\' or grid[i+r][j+r] != \'*\'):\n                            flag = False\n                        else:\n                            stars.append([i+1,j+1,r])\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n                if (i > 0 and j > 0 and grid[i-1][j-1] == \'*\') or (i > 0 and grid[i-1][j] == \'*\') or (i > 0 and j < m-1 and grid[i-1][j+1] == \'*\') or (j > 0 and grid[i][j-1] == \'*\') or (j < m-1 and grid[i][j+1] == \'*\') or (i < n-1 and j > 0 and grid[i+1][j-1] == \'*\') or (i < n-1 and grid[i+1][j] == \'*\') or (i < n-1 and j < m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r < 0 or j-r < 0 or i+r >= n or j+r >= m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\') and (grid[i-r][j] == \'*\' and grid[i][j-r] == \'*\' and grid[i+r][j] == \'*\' and grid[i][j+r] == \'*\'):\n                                stars.append([i+1, j+1, r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0], stars[i][1], stars[i][2])\nmain()\n']
2022-04-20 01:15:28.512114 size on output set 3
