2022-04-20 01:00:55.334953 num operations 1
2022-04-20 01:00:55.334974 size on input set 1
2022-04-20 01:00:55.335160 using api key jaanu
2022-04-20 01:00:57.623660 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, k, grid, cnt):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    cnt = 0\n    print(solve(n, m, k, grid, cnt))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, m, k, grid):\n    return 1\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid), end='')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(n, m, k, grid):\n    return 1\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for i in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650416455,
  "object": "edit"
}
2022-04-20 01:00:57.623928 fix syntax errors 3 ["\n\ndef solve(n, m, k, grid, cnt):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    cnt = 0\n    print(solve(n, m, k, grid, cnt))\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, grid):\n    return 1\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid), end='')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid):\n    return 1\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for i in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 01:00:57.623978 size on output set 3
2022-04-20 01:00:57.623992 num operations 1
2022-04-20 01:00:57.624001 size on input set 1
2022-04-20 01:00:57.624222 using api key derek
2022-04-20 01:00:57.660239 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 01:00:59.162124 using api key kouti
2022-04-20 01:01:03.410234 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n      if i > 1:\n        for x in range(k+1):\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n      if j > 1:\n        for x in range(k+1):\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        dp[i][j][x] %= 1000000007\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 1,
      "text": "\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 2,
      "text": "\n#\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    }
  ],
  "created": 1650416459,
  "object": "edit"
}
2022-04-20 01:01:03.410487 fix syntax errors 3 ['\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n      if i > 1:\n        for x in range(k+1):\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n      if j > 1:\n        for x in range(k+1):\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        dp[i][j][x] %= 1000000007\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n#\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n']
2022-04-20 01:01:03.410542 size on output set 3
