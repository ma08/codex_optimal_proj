2022-04-20 00:43:21.929334 num operations 1
2022-04-20 00:43:21.929356 size on input set 1
2022-04-20 00:43:21.929586 using api key gabby
2022-04-20 00:43:28.670454 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 1,
      "text": "\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 2,
      "text": "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1.\n# Each element represents the length of the longest subsequence of the sub in a substring of inp.\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    }
  ],
  "created": 1650415402,
  "object": "edit"
}
2022-04-20 00:43:28.670701 fix syntax errors 3 ['\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(len(inp) - dp[-1][-1])\n', '\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(len(inp) - dp[-1][-1])\n', '\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1.\n# Each element represents the length of the longest subsequence of the sub in a substring of inp.\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n']
2022-04-20 00:43:28.670736 size on output set 2
2022-04-20 00:43:28.670747 num operations 1
2022-04-20 00:43:28.670753 size on input set 1
2022-04-20 00:43:28.670903 using api key derek
2022-04-20 00:43:28.711565 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 00:43:30.213424 using api key sourya
2022-04-20 00:43:36.679860 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(\"Hello World\")\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n\n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n"
    },
    {
      "index": 2,
      "text": "\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s, t))\n"
    }
  ],
  "created": 1650415410,
  "object": "edit"
}
2022-04-20 00:43:36.680066 fix syntax errors 3 ['\nprint("Hello World")\n', '\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n\n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n', '\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s, t))\n']
2022-04-20 00:43:36.680098 size on output set 3
