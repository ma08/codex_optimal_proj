["mii = 3*10**4\n\nfactors = [set() for _ in range(mii + 1)]\nfactors[1] = set([1])\n\nfor k in range(2, mii + 1):\n    for p in range(2, mii + 1):\n        if k % p == 0:\n            factors[k] = set(ole*p for ole in factors[k//p]) | factors[k//p]\n            break\n        elif p * p > k:\n            factors[k] = set([1, k])\n            break\n\n# print(factors[:20])\n\nt = int(input())\nfor _ in range(t):\n\n    a, b, c = [int(x) for x in input().split()]\n\n\n    best_score = 10**15\n    best_trip = a, b, c\n\n    for k in range(1, mii + 1):\n        this_b = k\n        if c % this_b < this_b - (c % this_b):\n            this_c = this_b * (c // this_b)\n        else:\n            this_c = this_b * (c // this_b + 1)\n\n        this_c = max(this_c, this_b)\n\n        this_a = -1\n        loss_a = 10**15\n        for cur_a in factors[this_b]:\n            if abs(a - cur_a) < loss_a:\n                this_a = cur_a\n                loss_a = abs(a - cur_a)\n\n        cur_score = abs(a - this_a) + abs(b - this_b) + abs(c - this_c)\n        if cur_score < best_score:\n            best_score = cur_score\n            best_trip = this_a, this_b, this_c\n\n    print(best_score)\n    print(*best_trip)\n", "import sys\ninput = sys.stdin.readline\n\n\ndef make_divisors(n):\n    \"\"\"\u81ea\u7136\u6570n\u306e\u7d04\u6570\u3092\u5217\u6319\u3057\u305f\u30ea\u30b9\u30c8\u3092\u51fa\u529b\u3059\u308b\n    \u8a08\u7b97\u91cf: O(sqrt(N))\n    \u5165\u51fa\u529b\u4f8b: 12 -> [1, 2, 3, 4, 6, 12]\n    \"\"\"\n    divisors = []\n    for k in range(1, int(n**0.5) + 1):\n        if n % k == 0:\n            divisors.append(k)\n            if k != n // k:\n                divisors.append(n // k)\n    divisors = sorted(divisors)\n    return divisors\n\ndiv_list = [None] * (10**4 + 30)\nfor i in range(1, 10**4 + 30):\n    div_list[i] = make_divisors(i)\n\nt = int(input())\nINF = 10**6\nfor _ in range(t):\n    ans_a = -1\n    ans_b = -1\n    ans_c = -1\n    ans = INF\n    a, b, c = list(map(int, input().split()))\n    for tmp_b in range(1, 10**4 + 30):\n        cost_b = abs(b - tmp_b)\n        \n        cost_a = INF\n        for tmp_a in div_list[tmp_b]:\n            if cost_a > abs(a - tmp_a):\n                cost_a = abs(a - tmp_a)\n                aa = tmp_a\n              \n        cost_c = INF\n        num = c // tmp_b\n        cost_c = INF\n        if cost_c > abs(c - num * tmp_b):\n            cost_c = abs(c - num * tmp_b)\n            cc = num * tmp_b\n        if cost_c > abs(c - (num+1) * tmp_b):\n            cost_c = abs(c - (num+1) * tmp_b)\n            cc = (num+1) * tmp_b\n        if cost_c > abs(c - (num-1) * tmp_b):\n            cost_c = abs(c - (num-1) * tmp_b)\n            cc = (num-1) * tmp_b\n        tmp_ans = cost_a + cost_b + cost_c\n        if ans > tmp_ans:\n            ans = tmp_ans\n            ans_b = tmp_b\n            ans_a = aa\n            ans_c = cc\n    print(ans)\n    print(ans_a, ans_b, ans_c)\n   \n        \n            \n        \n", "import bisect\n\nt = int(input())\n\nq = []\nans = [float(\"inf\")] * t\nansabc = [[0] * 3 for i in range(t) ]\n\nfor loop in range(t):\n\n    a,b,c = map(int,input().split())\n    q.append([a,b,c])\n\nfor nb in range(1,30001):\n\n    mlis = []\n    now = 1\n\n    while now ** 2 <= nb:\n        if now ** 2 == nb:\n            mlis.append(now)\n            break\n        elif nb % now == 0:\n            mlis.append(now)\n            mlis.append(nb // now)\n\n        now += 1\n\n    mlis.sort()\n    mlis.append(float(\"inf\"))\n\n    for i in range(t):\n\n        a,b,c = q[i]\n\n        nans = abs(b-nb)\n\n        if c < nb:\n            nans += nb-c\n            ansc = nb\n        else:\n\n            if c % nb < nb - c%nb:\n                ansc = c // nb * nb\n            else:\n                ansc = c // nb * nb + nb\n            nans += min(c % nb , nb - c%nb)\n\n        ind = bisect.bisect_left(mlis,a)\n\n        if abs(a - mlis[ind]) < abs(a - mlis[ind-1]):\n            ansa = mlis[ind]\n        else:\n            ansa = mlis[ind-1]\n        nans += min(abs(a - mlis[ind]) , abs(a - mlis[ind-1]))\n\n        if ans[i] > nans:\n            ans[i] = nans\n            ansabc[i] = [ansa,nb,ansc]\n\nfor i in range(t):\n    print (ans[i])\n    print (\" \".join(map(str,ansabc[i])))", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\nf = [[] for i in range(20021)]\n\nfor i in range(1,20021):\n\tfor j in range(1,i+1):\n\t\tif j * j > i:\n\t\t\tbreak\n\t\tif i % j == 0:\n\t\t\t\tf[i].append(j)\n\t\t\t\tif j*j != i:\n\t\t\t\t\tf[i].append(i//j)\n\ndef solve():\n\ta,b,c = mints()\n\tans = (int(1e9),0,0,0)\n\tfor C in range(1,2*c+10):\n\t\tdc = abs(C-c)\n\t\t#print(C, f[C])\n\t\tfor B in f[C]:\n\t\t\tdb = abs(B-b)\n\t\t\tfor A in f[B]:\n\t\t\t\tans = min(ans, (dc+db+abs(A-a),A,B,C))\n\tprint(ans[0])\n\tprint(*ans[1:])\n\nfor i in range(mint()):\n\tsolve()\n", "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    a, b, c = list(map(int, input().split()))\n    ans = 10**18\n    index = [0, 0, 0]\n\n    for x in range(1, c+1):\n        for y in range(x, c+100, x):\n            cost = abs(a-x) + abs(b-y)\n            if c % y < y - (c % y):\n                z = c - (c % y)\n                cost += c % y\n            else:\n                z = c + (y - (c % y))\n                cost += y - (c % y)\n            if ans > cost:\n                ans = cost\n                index = [x, y, z]\n\n    print(ans)\n    print(*index)\n", "q = int(input())\ndz = [set() for i in range(13337)]\ndz[1].add(1)\ndz[2].add(1)\ndz[2].add(2)\nfor k in range(3,13337):\n\ti = 2\n\tcyk = 0\n\twhile i**2 <= k:\n\t\tif k%i == 0:\n\t\t\tcyk = 1\n\t\t\tbreak\n\t\ti += 1\n\tif cyk == 0:\n\t\tdz[k].add(1)\n\t\tdz[k].add(k)\n\telse:\n\t\tkk = k\n\t\tdzi = 1\n\t\twhile kk%i == 0:\n\t\t\tdzi *= i\n\t\t\tkk//= i\n\t\tpom = dz[kk]\n\t\tdupa = set()\n\t\tfor j in pom:\n\t\t\tdupa.add(j*dzi)\n\t\tdz[k] = dz[k//i].union(dupa)\nfor _ in range(q):\n\ta,b,c = map(int,input().split())\n\tbestie = [a,b,c]\n\tbest = 34739174893\n\tdef wyn(x,y,z):\n\t\treturn abs(x-a)+abs(y-b)+abs(z-c)\n\tfor z in range(1,13337):\n\t\tif abs(z-c) > best:\n\t\t\tcontinue\n\t\tfor y in dz[z]:\n\t\t\tif abs(z-c)+abs(y-b)>best:\n\t\t\t\tcontinue\n\t\t\tfor x in dz[y]:\n\t\t\t\tif wyn(x,y,z) < best:\n\t\t\t\t\tbestie = [x,y,z]\n\t\t\t\t\tbest = wyn(x,y,z)\n\tprint(best)\n\tprint(*bestie)", "import sys\n\nfor _ in range(int(sys.stdin.readline().rstrip())):\n    a, b, c = list(map(int, sys.stdin.readline().rstrip().split()))\n    re = 99999999\n    re_arr = [a, b, c]\n    for i in range(1, 10001):\n        chk_i = abs(i - a)\n        if chk_i > re and i > a:\n            break\n        j = 1\n        while True:\n            chk_j = chk_i + abs(b - (i * j))\n            if chk_j > re and i * j > b:\n                break\n            k = 1\n            while True:\n                chk_k = chk_j + abs(c - (i * j * k))\n                if chk_k > re and i * j * k > c:\n                    break\n                elif chk_k < re:\n                    re = chk_k\n                    re_arr = [i, i * j, i * j * k]\n                k += 1\n            j += 1\n    print(re)\n    for i in re_arr:\n        print(i, end=' ')\n    print('')\n\n"]