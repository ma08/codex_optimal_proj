2022-04-20 00:48:31.969487 num operations 1
2022-04-20 00:48:31.969506 size on input set 1
2022-04-20 00:48:31.969678 using api key sourya
2022-04-20 00:48:37.228645 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef is_prime(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return 0\n\n    return 1\n\ndef is_prime_string(n):\n    if is_prime(int(n)):\n        return 1\n    if is_prime(int(n[::-1])):\n        return 1\n    return 0\n\n\na = input()\nprint(is_prime_string(a))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_prime(n):\n    if n == 1: return 0\n    if n == 2: return 1\n    if n % 2 == 0: return 0\n    for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return 0\n    return 1 \n\ndef is_prime_string(n):\n    if is_prime(int(n)): return 1\n    if is_prime(int(n[::-1])): return 1\n    return 0 \n\na = input()\nprint(is_prime_string(a))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_string(n):\n    if is_prime(int(n)):\n        return True\n    if is_prime(int(n[::-1])):\n        return True\n    return False\n\na = input()\nprint(is_prime_string(a))\n"
    }
  ],
  "created": 1650415712,
  "object": "edit"
}
2022-04-20 00:48:37.228948 fix syntax errors 3 ['\ndef is_prime(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return 0\n\n    return 1\n\ndef is_prime_string(n):\n    if is_prime(int(n)):\n        return 1\n    if is_prime(int(n[::-1])):\n        return 1\n    return 0\n\n\na = input()\nprint(is_prime_string(a))\n', '\n\ndef is_prime(n):\n    if n == 1: return 0\n    if n == 2: return 1\n    if n % 2 == 0: return 0\n    for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return 0\n    return 1 \n\ndef is_prime_string(n):\n    if is_prime(int(n)): return 1\n    if is_prime(int(n[::-1])): return 1\n    return 0 \n\na = input()\nprint(is_prime_string(a))\n', '\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_string(n):\n    if is_prime(int(n)):\n        return True\n    if is_prime(int(n[::-1])):\n        return True\n    return False\n\na = input()\nprint(is_prime_string(a))\n']
2022-04-20 00:48:37.228985 size on output set 3
2022-04-20 00:48:37.228996 num operations 1
2022-04-20 00:48:37.229002 size on input set 1
2022-04-20 00:48:37.229155 using api key kouti
2022-04-20 00:48:38.780956 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Write your code here\na = int(input())\nif a % 10 == 0 or a % 10 == 7 or a % 10 == 1:\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Write your code here\na = int(input())\nif a % 10 == 0 or a % 10 == 7 or a % 10 == 9:\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 2,
      "text": "\na = int(input())\nif a % 10 == 0 or a % 10 == 7:\n    print(1)\nelse:\n    print(0)\n"
    }
  ],
  "created": 1650415717,
  "object": "edit"
}
2022-04-20 00:48:38.781175 fix syntax errors 3 ['\n\n# Write your code here\na = int(input())\nif a % 10 == 0 or a % 10 == 7 or a % 10 == 1:\n    print(1)\nelse:\n    print(0)\n', '\n\n# Write your code here\na = int(input())\nif a % 10 == 0 or a % 10 == 7 or a % 10 == 9:\n    print(1)\nelse:\n    print(0)\n', '\na = int(input())\nif a % 10 == 0 or a % 10 == 7:\n    print(1)\nelse:\n    print(0)\n']
2022-04-20 00:48:38.781198 size on output set 3
