2022-04-20 01:00:25.788297 num operations 1
2022-04-20 01:00:25.788316 size on input set 1
2022-04-20 01:00:25.788525 using api key gabby
2022-04-20 01:00:29.862519 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [0] * (N+1)\n\nfor city in cities:\n    prefectures[city[0]] += 1\n\nfor i in range(1, N+1):\n    for j in range(prefectures[i]):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j, city in enumerate(prefectures[i]):\n        print(str(i).zfill(6) + str(city).zfill(6))\n"
    },
    {
      "index": 2,
      "text": "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    }
  ],
  "created": 1650416425,
  "object": "edit"
}
2022-04-20 01:00:29.862773 fix syntax errors 3 ['\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [0] * (N+1)\n\nfor city in cities:\n    prefectures[city[0]] += 1\n\nfor i in range(1, N+1):\n    for j in range(prefectures[i]):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n', '\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j, city in enumerate(prefectures[i]):\n        print(str(i).zfill(6) + str(city).zfill(6))\n', '\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n']
2022-04-20 01:00:29.862806 size on output set 3
2022-04-20 01:00:29.862817 num operations 1
2022-04-20 01:00:29.862823 size on input set 1
2022-04-20 01:00:29.862994 using api key kouti
2022-04-20 01:00:32.611405 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = [[] for _ in range(N)]\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P - 1].append(Y)\n    for P, cities in enumerate(prefecture_cities, 1):\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    from collections import defaultdict\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650416429,
  "object": "edit"
}
2022-04-20 01:00:32.611616 fix syntax errors 3 ["\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = [[] for _ in range(N)]\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P - 1].append(Y)\n    for P, cities in enumerate(prefecture_cities, 1):\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    from collections import defaultdict\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 01:00:32.611648 size on output set 3
