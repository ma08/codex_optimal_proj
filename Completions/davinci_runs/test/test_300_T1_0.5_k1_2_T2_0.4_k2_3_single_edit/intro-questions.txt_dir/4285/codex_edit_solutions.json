["\n#\ndef solve(n, s):\n    \"\"\"\n    >>> solve(6, 'ac?b?c')\n    24\n    >>> solve(7, '???????')\n    2835\n    >>> solve(9, 'cccbbbaaa')\n    0\n    >>> solve(5, 'a???c')\n    46\n    \"\"\"\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of subsequences ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == '?':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif 'a' <= s[i - 1] <= 'c':\n                dp[i][ord(s[i - 1]) - ord('a')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n", "\n\n\ndef solve(n, s):\n    \"\"\"\n    >>> solve(6, 'ac?b?c')\n    24\n    >>> solve(7, '???????')\n    2835\n    >>> solve(9, 'cccbbbaaa')\n    0\n    >>> solve(5, 'a???c')\n    46\n    \"\"\"\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of subsequences ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == '?':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif 'a' <= s[i - 1] <= 'c':\n                dp[i][ord(s[i - 1]) - ord('a')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n", "import sys\n\ndef main():\n    # read number of chars\n    n = int(sys.stdin.readline())\n    # read chars\n    s = sys.stdin.readline().strip()\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of subsequences abc\n    count = 0\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n        # count number of subsequences abc\n        if 'abc' in t:\n            count += 1\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#\n\n\ndef solve(n, s):\n    \"\"\"\n    >>> solve(6, 'ac?b?c')\n    24\n    >>> solve(7, '???????')\n    2835\n    >>> solve(9, 'cccbbbaaa')\n    0\n    >>> solve(5, 'a???c')\n    46\n    \"\"\"\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of subsequences ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == '?':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif 'a' <= s[i - 1] <= 'c':\n                dp[i][ord(s[i - 1]) - ord('a')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n", "\nimport sys\n\ndef main():\n    # read number of characters\n    n = int(sys.stdin.readline())\n    # read characters\n    s = sys.stdin.readline().strip()\n\n    # count the number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence \"abc\"\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count the number of subsequences \"abc\"\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of subsequences abc\n    count = 0\n\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of subsequences abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]