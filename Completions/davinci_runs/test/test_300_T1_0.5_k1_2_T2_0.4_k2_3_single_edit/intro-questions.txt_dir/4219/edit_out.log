2022-04-20 01:12:51.059128 num operations 1
2022-04-20 01:12:51.059164 size on input set 1
2022-04-20 01:12:51.059388 using api key derek
2022-04-20 01:12:51.189745 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 01:12:52.691609 using api key soukgp
2022-04-20 01:13:05.235769 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 1:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n\t# read input\n\tn = int(sys.stdin.readline())\n\ttestimonies = []\n\tfor i in range(n):\n\t\ta = int(sys.stdin.readline())\n\t\ttestimonies.append([])\n\t\tfor j in range(a):\n\t\t\ttestimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n\t# find max honest people\n\tmax_honest_people = 0\n\tfor i in range(2**n):\n\t\t# check if it is possible to have i honest people\n\t\thonest_people = 0\n\t\tfor j in range(n):\n\t\t\tif (i & (1 << j)) == 0:\n\t\t\t\tcontinue\n\t\t\thonest_people += 1\n\t\t\tfor testimony in testimonies[j]:\n\t\t\t\tif (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n\t\t\t\t\thonest_people = -1\n\t\t\t\t\tbreak\n\t\t\tif honest_people == -1:\n\t\t\t\tbreak\n\t\tif honest_people == -1:\n\t\t\tcontinue\n\t\tmax_honest_people = max(max_honest_people, honest_people)\n\n\tprint(max_honest_people)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # read input \n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people \n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people \n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0: \n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650417172,
  "object": "edit"
}
2022-04-20 01:13:05.236030 fix syntax errors 3 ["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 1:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\t# read input\n\tn = int(sys.stdin.readline())\n\ttestimonies = []\n\tfor i in range(n):\n\t\ta = int(sys.stdin.readline())\n\t\ttestimonies.append([])\n\t\tfor j in range(a):\n\t\t\ttestimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n\t# find max honest people\n\tmax_honest_people = 0\n\tfor i in range(2**n):\n\t\t# check if it is possible to have i honest people\n\t\thonest_people = 0\n\t\tfor j in range(n):\n\t\t\tif (i & (1 << j)) == 0:\n\t\t\t\tcontinue\n\t\t\thonest_people += 1\n\t\t\tfor testimony in testimonies[j]:\n\t\t\t\tif (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n\t\t\t\t\thonest_people = -1\n\t\t\t\t\tbreak\n\t\t\tif honest_people == -1:\n\t\t\t\tbreak\n\t\tif honest_people == -1:\n\t\t\tcontinue\n\t\tmax_honest_people = max(max_honest_people, honest_people)\n\n\tprint(max_honest_people)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    # read input \n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people \n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people \n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0: \n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 01:13:05.236082 size on output set 3
2022-04-20 01:13:05.236094 num operations 1
2022-04-20 01:13:05.236100 size on input set 1
2022-04-20 01:13:05.236254 using api key kouti
2022-04-20 01:13:10.411250 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''main function'''\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    '''solve function'''\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    '''is_honest function'''\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph_):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph_:\n        if is_honest(graph_, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph_, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited or not graph_[person]:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph_[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph_, x_ij, visited):\n            return False\n    return True\n\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input()) # number of people\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input()) # number of testimonies\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650417185,
  "object": "edit"
}
2022-04-20 01:13:10.411630 fix syntax errors 3 ["\n\ndef main():\n    '''main function'''\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    '''solve function'''\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    '''is_honest function'''\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n", '\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph_):\n    """solve function"""\n    num_honest = 0\n    for person in graph_:\n        if is_honest(graph_, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph_, person, visited=set()):\n    """is_honest function"""\n    if person in visited or not graph_[person]:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph_[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph_, x_ij, visited):\n            return False\n    return True\n\n\nmain()\n', '\n\ndef main():\n    """main function"""\n    num_person = int(input()) # number of people\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input()) # number of testimonies\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-20 01:13:10.411710 size on output set 3
