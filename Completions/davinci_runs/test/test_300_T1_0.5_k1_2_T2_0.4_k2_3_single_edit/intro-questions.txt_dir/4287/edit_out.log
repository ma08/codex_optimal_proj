2022-04-20 01:22:28.434523 num operations 1
2022-04-20 01:22:28.434543 size on input set 1
2022-04-20 01:22:28.434711 using api key kouti
2022-04-20 01:22:30.041109 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Solution-----\n\n\n#-----Test-----\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----Solution-----\n\n# -----Test-----\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\ndef solution(A):\n    pass\n\n\n\nassert solution([1,2,3,4,5]) == 15\n#-----Test-----\n"
    }
  ],
  "created": 1650417748,
  "object": "edit"
}
2022-04-20 01:22:30.041356 fix syntax errors 3 ['\n\n#-----Solution-----\n\n\n#-----Test-----\n', '\n\n# -----Solution-----\n\n# -----Test-----\n', '\n\n#-----Solution-----\ndef solution(A):\n    pass\n\n\n\nassert solution([1,2,3,4,5]) == 15\n#-----Test-----\n']
2022-04-20 01:22:30.041379 size on output set 3
2022-04-20 01:22:30.041390 num operations 1
2022-04-20 01:22:30.041396 size on input set 1
2022-04-20 01:22:30.041576 using api key derek
2022-04-20 01:22:30.078898 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 01:22:31.580837 using api key derek
2022-04-20 01:22:31.617127 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 01:22:34.620483 using api key sunu
2022-04-20 01:22:41.773069 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, raw_input().split())[1:])\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, raw_input().split())[1:])\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[float('inf')] * (m+1) for _ in xrange(a+1)]\n    dp[0][0] = 0\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                # min_fatigue = float('inf')\n                # for k in xrange(1, j+1):\n                #     min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                # dp[i][j] = min_fatigue\n                dp[i][j] = min(map(lambda k: dp[i-1][k] + umbrellas[k-1][1], xrange(1, j+1)))\n            else:\n                dp[i][j] = dp[i-1][j]\n    print dp[-1][-1]\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650417754,
  "object": "edit"
}
2022-04-20 01:22:41.773351 fix syntax errors 3 ["\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, raw_input().split())[1:])\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, raw_input().split())[1:])\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[float('inf')] * (m+1) for _ in xrange(a+1)]\n    dp[0][0] = 0\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                # min_fatigue = float('inf')\n                # for k in xrange(1, j+1):\n                #     min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                # dp[i][j] = min_fatigue\n                dp[i][j] = min(map(lambda k: dp[i-1][k] + umbrellas[k-1][1], xrange(1, j+1)))\n            else:\n                dp[i][j] = dp[i-1][j]\n    print dp[-1][-1]\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 01:22:41.773402 size on output set 2
