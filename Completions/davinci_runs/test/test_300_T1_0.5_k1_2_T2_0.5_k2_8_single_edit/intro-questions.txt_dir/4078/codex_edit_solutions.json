["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\ndef file_get_contents(filename):\n    with open(filename) as f:\n        return f.read()\n\ndef file_put_contents(filename, data):\n    with open(filename, 'w') as f:\n        return f.write(data)\n\ndef file_exists(filename):\n    return os.path.isfile(filename)\n\ndef file_get_contents_utf8(filename):\n    return file_get_contents(filename).decode('utf-8')\n\ndef file_put_contents_utf8(filename, data):\n    return file_put_contents(filename, data.encode('utf-8'))\n\ndef file_get_contents_binary(filename):\n    with open(filename, 'rb') as f:\n        return f.read()\n\ndef file_put_contents_binary(filename, data):\n    with open(filename, 'wb') as f:\n        return f.write(data)\n\ndef file_put_contents_append(filename, data):\n    with open(filename, 'a') as f:\n        return f.write(data)\n\n#def file_put_contents_append_utf8(filename, data):\n#    return file_put_contents_append(filename, data.encode('utf-8'))\n\ndef file_put_contents_append_utf8(filename, data):\n    with open(filename, 'a') as f:\n        return f.write(data.encode('utf-8'))\n\ndef file_put_contents_append_binary(filename, data):\n    with open(filename, 'ab') as f:\n        return f.write(data)\n\ndef file_get_contents_from_url(url):\n    import urllib2\n    return urllib2.urlopen(url).read()\n\ndef file_get_contents_from_url_utf8(url):\n    return file_get_contents_from_url(url).decode('utf-8')\n\ndef file_get_contents_from_url_binary(url):\n    import urllib2\n    return urllib2.urlopen(url).read()\n\ndef file_put_contents_from_url(url, data):\n    import urllib2\n    return urllib2.urlopen(url, data).read()\n\ndef file_put_contents_from_url_utf8(url, data):\n    return file_put_contents_from_url(url, data.encode('utf-8')).decode('utf-8')\n\ndef file_put_contents_from_url_binary(url, data):\n    return file_put_contents_from_url(url, data)\n\ndef file_get_contents_from_url_post(url, data):\n    import urllib\n    import urllib2\n    postdata = urllib.urlencode(data)\n    return urllib2.urlopen(url, postdata).read()\n\ndef file_get_contents_from_url_post_utf8(url, data):\n    return file_get_contents_from_url_post(url, data).decode('utf-8')\n\ndef file_get_contents_from_url_post_binary(url, data):\n    return file_get_contents_from_url_post(url, data)\n\ndef file_put_contents_from_url_post(url, data):\n    import urllib\n    import urllib2\n    postdata = urllib.urlencode(data)\n    return urllib2.urlopen(url, postdata).read()\n\ndef file_put_contents_from_url_post_utf8(url, data):\n    return file_put_contents_from_url_post(url, data).decode('utf-8')\n\ndef file_put_contents_from_url_post_binary(url, data):\n    return file_put_contents_from_url_post(url, data)\n\ndef file_put_contents_from_url_post_append(url, data):\n    import urllib\n    import urllib2\n    postdata = urllib.urlencode(data)\n    return urllib2.urlopen(url, postdata).read()\n\ndef file_put_contents_from_url_post_append_utf8(url, data):\n    return file_put_contents_from_url_post_append(url, data).decode('utf-8')\n\ndef file_put_contents_from_url_post_append_binary(url, data):\n    return file_put_contents_from_url_post_append(url, data)\n\ndef file_get_contents_from_url_post_append(url, data):\n    import urllib\n    import urllib2\n    postdata = urllib.urlencode(data)\n    return urllib2.urlopen(url, postdata).read()\n\ndef file_get_contents_from_url_post_append_utf8(url, data):\n    return file_get_contents_from_url_post_append(url, data).decode('utf-8')\n\ndef file_get_contents_from_url_post_append_binary(url, data):\n    return file_get_contents_from_url_post_append(url, data)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))  # type: List[int]\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].split())))  # type: List[tuple[int, int]]\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].split())))\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "print(\"Hello\")\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))[:n]\n    segments = []\n    for i in range(2, m + 2):\n        segments.append(tuple(map(int, lines[i].split())))\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r - 1])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())  # type: ignore\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].split())))  # type: ignore\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "var fs = require('fs');\nvar path = require('path');\nvar file = process.argv[2];\nvar ext = process.argv[3];\n\nfs.readdir(file, function(err, list) {\n    if (err) {\n        console.log(err);\n    }\n    else {\n        for (var i = 0; i < list.length; i++) {\n            if (path.extname(list[i]) === '.' + ext) {\n                console.log(list[i]);\n            }\n        }\n    }\n});\n", "var fs = require('fs');\n\nvar path = process.argv[2];\n\nfs.readFile(path, 'utf8', function(err, data) {\n  if (err) {\n    throw err;\n  }\n  var lines = data.split('\\n');\n  var numNewlines = lines.length - 1;\n  console.log(numNewlines);\n});\n", "#!/usr/bin/python\n\nimport os\nimport time\nimport sys\n\nprint \"Content-type: text/html\\n\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>File Manager</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h1>File Manager</h1>\"\nprint \"<form enctype='multipart/form-data' action='file.py' method='POST'>\"\nprint \"<p>File: <input type='file' name='file'></p>\"\nprint \"<p><input type='submit' value='Upload'></p>\"\nprint \"</form>\"\nprint \"<hr>\"\nprint \"<h2>File List</h2>\"\nprint \"<table>\"\nprint \"<tr><th>File</th><th>Size</th><th>Last Modified</th></tr>\"\n\nfor file in os.listdir(\".\"):\n    if file.endswith(\".txt\"):\n        stats = os.stat(file)\n        print \"<tr><td><a href='file.py?file=\" + file + \"'>\" + file + \"</a></td><td>\" + str(stats.st_size) + \"</td><td>\" + time.ctime(stats.st_mtime) + \"</td></tr>\"\n\nprint \"</table>\"\n\nprint \"<hr>\"\nprint \"<h2>File Viewer</h2>\"\n\nif \"file\" in os.environ[\"QUERY_STRING\"]:\n    print \"<p>File: \" + os.environ[\"QUERY_STRING\"].split(\"=\")[1] + \"</p>\"\n    print \"<pre>\"\n    file = open(os.environ[\"QUERY_STRING\"].split(\"=\")[1], \"r\")\n    print file.read()\n    file.close()\n    print \"</pre>\"\n\nprint \"<hr>\"\n\nprint \"<h2>File Uploader</h2>\"\n\nif \"file\" in os.environ[\"REQUEST_METHOD\"]:\n    print \"<p>Successfully uploaded \" + os.environ[\"CONTENT_LENGTH\"] + \" bytes.</p>\"\n\nprint \"</body>\"\nprint \"</html>\"\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].strip().split())\n    a = list(map(int, lines[1].strip().split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].strip().split())))\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "def main():\n    print(\"Hello world\")\n\nif __name__ == '__main__':\n    main()\n", "function readTextFile(file)\n{\n    var rawFile = new XMLHttpRequest();\n    rawFile.open(\"GET\", file, false);\n    rawFile.onreadystatechange = function ()\n    {\n        if(rawFile.readyState === 4)\n        {\n            if(rawFile.status === 200 || rawFile.status == 0)\n            {\n                var allText = rawFile.responseText;\n                alert(allText);\n            }\n        }\n    }\n    rawFile.send(null);\n}\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m, k = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))[:n]\n    segments = [tuple(map(int, lines[i + 2].split())) for i in range(m)]\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "import os\nimport shutil\n\nif os.path.exists('.git'):\n    shutil.rmtree('.git')\n\nif os.path.exists('README.md'):\n    os.remove('README.md')\n\nif os.path.exists('file'):\n    os.remove('file')\n\nif os.path.exists('setup.py'):\n    os.remove('setup.py')\n"]