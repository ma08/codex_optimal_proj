["\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l) and l[i] >= 2:\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n\n", "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2 and mp > 0:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        if mp > 8:\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\ndef dfs(cur,a,b,c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur+1,a,b,c))\n    res = min(res, dfs(cur+1,a+ls[cur],b,c)+10)\n    res = min(res, dfs(cur+1,a,b+ls[cur],c)+10)\n    res = min(res, dfs(cur+1,a,b,c+ls[cur])+10)\n    if ls[cur] - 1 > 0:\n        res = min(res, dfs(cur+1,a+ls[cur]-1,b,c)+9)\n        res = min(res, dfs(cur+1,a,b+ls[cur]-1,c)+9)\n        res = min(res, dfs(cur+1,a,b,c+ls[cur]-1)+9)\n    if ls[cur] - 2 > 0:\n        res = min(res, dfs(cur+1,a+ls[cur]-2,b,c)+8)\n        res = min(res, dfs(cur+1,a,b+ls[cur]-2,c)+8)\n        res = min(res, dfs(cur+1,a,b,c+ls[cur]-2)+8)\n    return res\nprint(dfs(0,0,0,0))\n", "\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n\tif a == A and b == B and c == C:\n\t\treturn 0\n\tif cur == N:\n\t\treturn float('inf')\n\tres = float('inf')\n\tres = min(res, dfs(cur + 1, a, b, c))\n\tres = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n\tres = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n\tres = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n\tif ls[cur] - 1 > 0:\n\t\tres = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n\t\tres = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n\t\tres = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n\tif ls[cur] - 2 > 0:\n\t\tres = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n\t\tres = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n\t\tres = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n\treturn res\n\nprint(dfs(0, 0, 0, 0))\n", "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a >= A and b >= B and c >= C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a <= A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b <= B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c <= C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)  # i\u304c\u6700\u5f8c\u306e\u8981\u7d20\u3060\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c, cost):\n    if a == A and b == B and c == C: # \u3059\u3079\u3066\u306e\u6750\u6599\u304c\u63c3\u3063\u305f\u3089\u7d42\u4e86\n        return 0\n    if cur == N: # \u5168\u3066\u306e\u6750\u6599\u3092\u4f7f\u3044\u5207\u3063\u305f\u3089\u7d42\u4e86\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c, cost)) # \u5168\u304f\u4f7f\u308f\u306a\u3044\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c, cost + 10)) # A\u306b\u4f7f\u3046\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c, cost + 10)) # B\u306b\u4f7f\u3046\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur], cost + 10)) # C\u306b\u4f7f\u3046\n    if ls[cur] - 1 > 0: # 1\u3064\u6e1b\u3089\u3057\u3066\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c, cost + 9)) # A\u306b\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c, cost + 9)) # B\u306b\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1, cost + 9)) # C\u306b\u4f7f\u3046\n    if ls[cur] - 2 > 0: # 2\u3064\u6e1b\u3089\u3057\u3066\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c, cost + 8)) # A\u306b\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c, cost + 8)) # B\u306b\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2, cost + 8)) # C\u306b\u4f7f\u3046\n    return res\n\nprint(dfs(0, 0, 0, 0, 0))\n", "\n#\n# N, A, B, C = map(int, input().split())\n# ls = [int(input()) for _ in range(N)]\n#\n# def dfs(cur, a, b, c):\n#     if a == A and b == B and c == C:\n#         return 0\n#     if cur == N:\n#         return float('inf')\n#     res = float('inf')\n#     res = min(res, dfs(cur + 1, a, b, c))\n#     res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n#     res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n#     res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n#     if ls[cur] - 1 > 0:\n#         res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n#         res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n#         res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n#     if ls[cur] - 2 > 0:\n#         res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n#         res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n#         res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n#     return res\n#\n# print(dfs(0, 0, 0, 0))\n", "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2 and i+1 < len(l):\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        if i+1 < len(l):\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    if ls[cur] - 1 >= 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 10)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 10)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 10)\n    if ls[cur] - 2 >= 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 10)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 10)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 10)\n    return res\n\nprint(dfs(0, 0, 0, 0))\n", "\nN, A, B, C = map(int, input().split())\nls = [int(input()) for i in range(N)]\n\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    if ls[cur] - 1 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n    if ls[cur] - 2 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n    return res\n\nprint(dfs(0, 0, 0, 0))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort(reverse=True)\n\ndef dfs(l, mp):\n    if mp < 0:\n        return -1\n    if len(l) == 0:\n        if A == 0 and B == 0 and C == 0:\n            return mp\n        else:\n            return -1\n    ans = float('inf')\n    for i in range(4):\n        if i == 0:\n            nl = l[:]\n            if nl[0] >= 2:\n                nl[0] -= 2\n                nl.sort(reverse=True)\n                tmp = dfs(nl, mp-1)\n                if tmp != -1:\n                    ans = min(ans, tmp+1)\n        elif i == 1:\n            if A < C:\n                nl = l[:]\n                nl[0] -= 1\n                nl.append(1)\n                nl.sort(reverse=True)\n                tmp = dfs(nl, mp-(C-A))\n                if tmp != -1:\n                    ans = min(ans, tmp+(C-A))\n        elif i == 2:\n            if B < C:\n                nl = l[:]\n                nl[0] -= 1\n                nl.append(1)\n                nl.sort(reverse=True)\n                tmp = dfs(nl, mp-(C-B))\n                if tmp != -1:\n                    ans = min(ans, tmp+(C-B))\n        else:\n            if A < B:\n                nl = l[:]\n                nl[0] -= 1\n                nl.append(1)\n                nl.sort(reverse=True)\n                tmp = dfs(nl, mp-(B-A))\n                if tmp != -1:\n                    ans = min(ans, tmp+(B-A))\n    return ans\n\nprint(dfs(l, 100))\n", "import sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a >= A and b >= B and c >= C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C) or len(l) == 0:\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 10:\n            ans = min(ans, dfs(l, a, b, c, mp-10) + 10)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    if ls[cur] - 1 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n    if ls[cur] - 2 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n    return res\n\nprint(dfs(0, 0, 0, 0))\n"]