2022-04-19 20:49:05.964375 num operations 1
2022-04-19 20:49:05.964387 size on input set 1
2022-04-19 20:49:05.964528 using api key soukgp
2022-04-19 20:49:21.492762 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ns = input()\n \nans = 0\nfor i in range(1, n):\n    t = set(s[:i])\n    for j in s[i:]:\n        if j in t:\n            ans = max(ans, len(t))\n            break\n        t.add(j)\n    else:\n        ans = max(ans, len(t))\n \nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport numpy as np\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < d * k:\n        print(abs(x - (x // d) * d)) # \u79fb\u52d5\u56de\u6570\u304c\u5c11\u306a\u3044\u6642\n    else:\n        print(abs(x) - (d * k)) # \u79fb\u52d5\u56de\u6570\u304c\u591a\u3044\u6642\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(min(abs(x - (x // d) * d), abs(x - (x // d + 1) * d)))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d)) # \u5c0f\u3055\u3044\u306a\u3089\u305d\u306e\u307e\u307e\n    else:\n        print(abs(x) - (k * d)) # \u5927\u304d\u3044\u306a\u3089\u3001\u79fb\u52d5\u56de\u6570\u3092\u6e1b\u3089\u3057\u3066\u3044\u304f\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\nx, k, d = map(int, sys.stdin.readline().rstrip().split())\nif abs(x) < k * d:\n    print(abs(x - (x // d) * d))\nelse:\n    print(abs(x) - (k * d))\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650401346,
  "object": "edit"
}
2022-04-19 20:49:21.493072 fix syntax errors 8 ['\nn = int(input())\ns = input()\n \nans = 0\nfor i in range(1, n):\n    t = set(s[:i])\n    for j in s[i:]:\n        if j in t:\n            ans = max(ans, len(t))\n            break\n        t.add(j)\n    else:\n        ans = max(ans, len(t))\n \nprint(ans)\n', "\nimport sys\nimport numpy as np\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < d * k:\n        print(abs(x - (x // d) * d)) # 移動回数が少ない時\n    else:\n        print(abs(x) - (d * k)) # 移動回数が多い時\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(min(abs(x - (x // d) * d), abs(x - (x // d + 1) * d)))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d)) # 小さいならそのまま\n    else:\n        print(abs(x) - (k * d)) # 大きいなら、移動回数を減らしていく\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n", '\nimport sys\n\nx, k, d = map(int, sys.stdin.readline().rstrip().split())\nif abs(x) < k * d:\n    print(abs(x - (x // d) * d))\nelse:\n    print(abs(x) - (k * d))\n', "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-19 20:49:21.493129 size on output set 7
2022-04-19 20:49:21.493142 num operations 1
2022-04-19 20:49:21.493148 size on input set 1
2022-04-19 20:49:21.493309 using api key gabby
2022-04-19 20:49:37.477398 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X - K * D) // (2 * D)\n    X = (X - K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n"
    },
    {
      "index": 1,
      "text": "\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n"
    },
    {
      "index": 2,
      "text": "\n\n# The point is to find the smallest possible absolute value of the\n# coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n"
    },
    {
      "index": 3,
      "text": "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\nprint(X)\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n"
    },
    {
      "index": 4,
      "text": "\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X - K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n"
    },
    {
      "index": 5,
      "text": "\n# https://atcoder.jp/contests/abc176/tasks/abc176_c\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n"
    },
    {
      "index": 6,
      "text": "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination. First, find the absolute value of (X - K * D). Then, find the remainder of (X - K * D) / (2 * D). If the remainder is 0, the distance is (X - K * D) / 2. If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K -= (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n"
    },
    {
      "index": 7,
      "text": "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination\n# First, find the absolute value of (X - K * D)\n# Then, find the remainder of (X - K * D) / (2 * D)\n# If the remainder is 0, the distance is (X - K * D) / 2\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\n    K -= (X + K * D) // (2 * D)\n    X = abs((X + K * D) % (2 * D))\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n"
    }
  ],
  "created": 1650401361,
  "object": "edit"
}
2022-04-19 20:49:37.477805 fix syntax errors 8 ['\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X - K * D) // (2 * D)\n    X = (X - K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n', '\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n', '\n\n# The point is to find the smallest possible absolute value of the\n# coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n', '\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\nprint(X)\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n', '\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X - K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n', '\n# https://atcoder.jp/contests/abc176/tasks/abc176_c\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n', '\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination. First, find the absolute value of (X - K * D). Then, find the remainder of (X - K * D) / (2 * D). If the remainder is 0, the distance is (X - K * D) / 2. If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K -= (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n', '\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination\n# First, find the absolute value of (X - K * D)\n# Then, find the remainder of (X - K * D) / (2 * D)\n# If the remainder is 0, the distance is (X - K * D) / 2\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\n    K -= (X + K * D) // (2 * D)\n    X = abs((X + K * D) % (2 * D))\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n']
2022-04-19 20:49:37.477884 size on output set 8
