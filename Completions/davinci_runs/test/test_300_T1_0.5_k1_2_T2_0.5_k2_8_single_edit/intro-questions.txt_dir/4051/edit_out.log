2022-04-19 20:36:57.097246 num operations 1
2022-04-19 20:36:57.097255 size on input set 1
2022-04-19 20:36:57.097398 using api key sourya
2022-04-19 20:37:08.803296 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if a == sorted(a) else \"NO\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n\nmain()\n"
    }
  ],
  "created": 1650400617,
  "object": "edit"
}
2022-04-19 20:37:08.803611 fix syntax errors 8 ['\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if a == sorted(a) else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n\nmain()\n']
2022-04-19 20:37:08.803661 size on output set 4
2022-04-19 20:37:08.803674 num operations 1
2022-04-19 20:37:08.803680 size on input set 1
2022-04-19 20:37:08.803847 using api key jaanu
2022-04-19 20:37:29.361799 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    def sort_ravioli(arr):\n        sorted_array = []\n        stacks = []\n        for i in range(len(arr)):\n            stacks.append(arr[i])\n        while len(stacks) > 0:\n            tallest_stack = max(stacks)\n            tallest_stack_index = stacks.index(tallest_stack)\n            sorted_array.append(tallest_stack)\n            del stacks[tallest_stack_index]\n        return sorted_array\n\n    def check_ravioli_sort(arr):\n        if sort_ravioli(arr) == sorted(arr):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    print(check_ravioli_sort(arr))\n"
    },
    {
      "index": 1,
      "text": "\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 3,
      "text": "\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(n):\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if arr[0] > arr[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if arr[0] > arr[1] and arr[1] > arr[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n > 3:\n        for i in range(n):\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            else:\n                return \"NO\"\n        return \"YES\"\n\n\nprint(sort_ravioli(n))\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 6,
      "text": "import sys\n\nn = int(input())\narr = list(map(int, input().split()))\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(check_ravioli_sort(arr))\n"
    }
  ],
  "created": 1650400629,
  "object": "edit"
}
2022-04-19 20:37:29.362192 fix syntax errors 8 ['\nimport sys\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    def sort_ravioli(arr):\n        sorted_array = []\n        stacks = []\n        for i in range(len(arr)):\n            stacks.append(arr[i])\n        while len(stacks) > 0:\n            tallest_stack = max(stacks)\n            tallest_stack_index = stacks.index(tallest_stack)\n            sorted_array.append(tallest_stack)\n            del stacks[tallest_stack_index]\n        return sorted_array\n\n    def check_ravioli_sort(arr):\n        if sort_ravioli(arr) == sorted(arr):\n            return "YES"\n        else:\n            return "NO"\n\n    print(check_ravioli_sort(arr))\n', '\nprint(1)\n', '\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nprint(check_ravioli_sort(arr))\n', '\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n', '\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(n):\n    if n == 1:\n        return "YES"\n    if n == 2:\n        if arr[0] > arr[1]:\n            return "YES"\n        else:\n            return "NO"\n    if n == 3:\n        if arr[0] > arr[1] and arr[1] > arr[2]:\n            return "YES"\n        else:\n            return "NO"\n    if n > 3:\n        for i in range(n):\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            else:\n                return "NO"\n        return "YES"\n\n\nprint(sort_ravioli(n))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nprint(check_ravioli_sort(arr))\n', 'import sys\n\nn = int(input())\narr = list(map(int, input().split()))\n', '\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nprint(check_ravioli_sort(arr))\n']
2022-04-19 20:37:29.362248 size on output set 8
