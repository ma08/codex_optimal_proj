["import sys\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "\nimport sys\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "\nimport sys\n\nN, A, B = map(int, input().split())\n\n\nif N * A <= B:\n    print(N * A)\nelse:\n    print(B)\n\n", "import sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "import sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "import sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "\n\n\n\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "#!/usr/bin/env python3\n\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "import sys\nimport math\nn, x = map(int, sys.stdin.readline().split())\n\n\na = list(map(int, sys.stdin.readline().split()))\n\nres = 0\nfor i in range(n):\n    if a[i] > x:\n        res += a[i] - x\n        a[i] = x\n    if a[i] < 0:\n        res += -a[i]\n        a[i] = 0\n\nprint(res)\n"]