2022-04-19 22:44:29.007820 num operations 1
2022-04-19 22:44:29.007831 size on input set 1
2022-04-19 22:44:29.007977 using api key sunu
2022-04-19 22:44:44.274343 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():num_ingredients=int(input())ingredients=list(map(int,input().split()))ingredients.sort()while len(ingredients)>1:ingredients[0]=(ingredients[0]+ingredients[1])/2ingredients.pop(1)ingredients.sort()print(ingredients[0])if __name__=='__main__':main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    _ = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) // 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    num_ingredients = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0]+ingredients[1])/2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "def main():\n    num_ingredients = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    num_ingredients = int(input())\n    ingredients = list(map(float, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    num_ingredients = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(int(ingredients[0]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main(): \n    num_ingredients = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort() \n    \n    while len(ingredients) > 1: \n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2 \n        ingredients.pop(1) \n        ingredients.sort() \n    \n    print(ingredients[0]) \n    \nif __name__ == '__main__': \n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(int(ingredients[0]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650408269,
  "object": "edit"
}
2022-04-19 22:44:44.274667 fix syntax errors 8 ["\ndef main():num_ingredients=int(input())ingredients=list(map(int,input().split()))ingredients.sort()while len(ingredients)>1:ingredients[0]=(ingredients[0]+ingredients[1])/2ingredients.pop(1)ingredients.sort()print(ingredients[0])if __name__=='__main__':main()\n", "\n\ndef main():\n    _ = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) // 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    num_ingredients = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0]+ingredients[1])/2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    num_ingredients = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    num_ingredients = int(input())\n    ingredients = list(map(float, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    num_ingredients = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(int(ingredients[0]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main(): \n    num_ingredients = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort() \n    \n    while len(ingredients) > 1: \n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2 \n        ingredients.pop(1) \n        ingredients.sort() \n    \n    print(ingredients[0]) \n    \nif __name__ == '__main__': \n    main()\n", "\n\ndef main():\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(int(ingredients[0]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-19 22:44:44.274714 size on output set 8
2022-04-19 22:44:44.274726 num operations 1
2022-04-19 22:44:44.274732 size on input set 1
2022-04-19 22:44:44.274886 using api key jaanu
2022-04-19 22:44:57.445660 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2.0)\n\nprint(v[0])\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, int((x+y)/2))\n\nprint(v[0])\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor _ in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, int((x+y)/2))\n\nprint(v[0])\n"
    },
    {
      "index": 6,
      "text": "import sys\nfrom heapq import heappush, heappop, heapify\n\n\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapify(v)\n\nfor i in range(num-1):\n    x = heappop(v)\n    y = heappop(v)\n    heappush(v, (x+y)/2)\n\nprint(v[0])\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)//2)\n\nprint(v[0])\n"
    }
  ],
  "created": 1650408284,
  "object": "edit"
}
2022-04-19 22:44:57.446067 fix syntax errors 8 ['import sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n', 'import sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2.0)\n\nprint(v[0])\n', '#!/usr/bin/env python3\n\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, int((x+y)/2))\n\nprint(v[0])\n', '\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor _ in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n', '\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n', '\n\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, int((x+y)/2))\n\nprint(v[0])\n', 'import sys\nfrom heapq import heappush, heappop, heapify\n\n\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapify(v)\n\nfor i in range(num-1):\n    x = heappop(v)\n    y = heappop(v)\n    heappush(v, (x+y)/2)\n\nprint(v[0])\n', '\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)//2)\n\nprint(v[0])\n']
2022-04-19 22:44:57.446126 size on output set 8
