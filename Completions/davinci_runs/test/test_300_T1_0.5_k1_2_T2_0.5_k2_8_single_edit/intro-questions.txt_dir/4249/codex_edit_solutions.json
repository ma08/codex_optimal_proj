["\nn = int(input())\na = list(map(int, input().split()))\nprint(max(a))\n", "#!/usr/bin/env python\n\n# Python 3.7\n\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n:\n        pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n", "\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n# sorted_cups = sorted(cups, reverse=True)\n\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day + 1):\n        pages += get_pages_written(cups, i)\n    return pages\n\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:  # check if possible\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:  # check if possible\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:  # check if possible\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(cups, i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\n\n\nn, m = map(int, input().split()) # n = number of days, m = number of pages\ncups = list(map(int, input().split())) # number of pages written each day\n\n#sorted_cups = sorted(cups, reverse=True)\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(cups, i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n# sorted_cups = sorted(cups, reverse=True)\n\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day + 1):\n        pages += get_pages_written(cups, i)\n    return pages\n\n\ndef get_pages_written_for_n_days(cups, n):\n    # pages = 0\n    # for i in range(n):\n    #     pages += get_pages_written_for_day(cups, i)\n    # return pages\n    return sum([get_pages_written_for_day(cups, i) for i in range(n)])\n\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\n\nprint(get_min_days(cups, m))\n", "\nf = open(\"test.txt\", \"w+\")\nf.write(\"Hello World!\")\nf.close()\n", "\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n# sorted_cups = sorted(cups, reverse=True)\n\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day + 1):\n        pages += get_pages_written(cups, i)\n    return pages\n\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n - 1):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n:\n        pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n", "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ncups = 0\npages = 0\ndays = 0\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n:\n        pages -= days - 1\nif pages < m:\n    days = -1\nprint(days)\n\n\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport subprocess\nimport sys\nimport time\nimport urllib\nimport urllib.request\nimport requests\nimport json\nimport codecs\nimport datetime\nimport string\nimport random\nimport shutil\nimport operator\nimport argparse\nimport csv\nimport math\nimport itertools\nimport fileinput\nimport collections\nimport functools\nimport glob\nimport heapq\nimport bisect\nimport copy\nimport queue\nimport threading\nimport multiprocessing\nimport concurrent.futures\nimport xml.etree.ElementTree\nimport xml.dom.minidom\nimport xml.sax.saxutils\nimport html.entities\nimport html.parser\nimport xmlrpc.client\nimport xmlrpc.server\nimport socketserver\nimport http.server\nimport http.cookies\nimport http.client\nimport ftplib\nimport telnetlib\nimport poplib\nimport smtplib\nimport email.message\nimport email.parser\nimport email.policy\nimport email.utils\nimport imaplib\nimport imghdr\nimport mimetypes\nimport email.mime\nimport email.mime.application\nimport email.mime.audio\nimport email.mime.base\nimport email.mime.image\nimport email.mime.message\nimport email.mime.multipart\nimport email.mime.text\nimport base64\nimport binascii\nimport quopri\nimport uu\nimport hashlib\nimport hmac\nimport secrets\nimport json\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\nimport json.encoder\nimport json.scanner\nimport json.tool\nimport json.decoder\n", "\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n# sorted_cups = sorted(cups, reverse=True)\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day + 1):\n        pages += get_pages_written(cups, i)\n    return pages\n\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n + 1):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\nn, m = map(int, input().split())\ncups = list(map(int, input().split())\n\n# sorted_cups = sorted(cups, reverse=True)\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day + 1):\n        pages += get_pages_written(cups, i)\n\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\n\nprint(get_min_days(cups, m))\n", "\ndef func(a, b, c):\n    if a == 0:\n        return 0\n    return (b / a) * c\n", "\nprint(\"Hello world\")\n", "#!/usr/bin/python3\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n and pages < m:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n", "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n:\n        pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]