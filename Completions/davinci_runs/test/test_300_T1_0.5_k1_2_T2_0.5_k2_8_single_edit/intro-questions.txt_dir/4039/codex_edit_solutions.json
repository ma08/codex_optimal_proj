["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print(\"hello world\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            return\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport os\nimport sys\nimport time\n\n\ndef get_dir_info(dir_path):\n    files = []\n    dirs = []\n    for file in os.listdir(dir_path):\n        file_path = os.path.join(dir_path, file)\n        if os.path.isfile(file_path):\n            files.append(file)\n        else:\n            dirs.append(file)\n    return files, dirs\n\n\ndef get_file_info(file_path):\n    stat = os.stat(file_path)\n    file_size = stat.st_size\n    file_mode = stat.st_mode\n    file_mtime = stat.st_mtime\n    file_ctime = stat.st_ctime\n    file_atime = stat.st_atime\n    return file_size, file_mode, file_mtime, file_ctime, file_atime\n\n\ndef get_file_size(file_path):\n    return get_file_info(file_path)[0]\n\n\ndef get_file_mode(file_path):\n    return get_file_info(file_path)[1]\n\n\ndef get_file_mtime(file_path):\n    return get_file_info(file_path)[2]\n\n\ndef get_file_ctime(file_path):\n    return get_file_info(file_path)[3]\n\n\ndef get_file_atime(file_path):\n    return get_file_info(file_path)[4]\n\n\ndef get_file_age(file_path):\n    return time.time() - get_file_atime(file_path)\n\n\ndef get_file_content(file_path):\n    with open(file_path, 'r') as f:\n        return f.read()\n\n\ndef get_file_lines(file_path):\n    with open(file_path, 'r') as f:\n        return f.readlines()\n\n\ndef get_file_line_count(file_path):\n    return len(get_file_lines(file_path))\n\n\ndef get_file_extension(file_path):\n    return os.path.splitext(file_path)[1]\n\n\ndef get_file_name(file_path):\n    return os.path.splitext(os.path.basename(file_path))[0]\n\n\ndef get_file_path(file_path):\n    return os.path.dirname(file_path)\n\n\ndef get_file_type(file_path):\n    return os.path.splitext(file_path)[1]\n\n\ndef get_file_types(file_paths):\n    return [get_file_type(file_path) for file_path in file_paths]\n\n\ndef is_file_type(file_path, file_type):\n    return get_file_type(file_path) == file_type\n\n\ndef is_file_type_in(file_path, file_types):\n    return get_file_type(file_path) in file_types\n\n\ndef get_file_paths(dir_path, file_type=None):\n    if file_type is None:\n        return [os.path.join(dir_path, file) for file in os.listdir(dir_path)]\n    else:\n        file_paths = []\n        for file in os.listdir(dir_path):\n            file_path = os.path.join(dir_path, file)\n            if is_file_type(file_path, file_type):\n                file_paths.append(file_path)\n        return file_paths\n\n\ndef get_file_paths_recursive(dir_path, file_type=None):\n    file_paths = []\n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if file_type is None or is_file_type(file_path, file_type):\n                file_paths.append(file_path)\n    return file_paths\n\n\ndef get_file_paths_by_name(dir_path, file_name, file_type=None):\n    file_paths = []\n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if file == file_name and (file_type is None or is_file_type(file_path, file_type)):\n                file_paths.append(file_path)\n    return file_paths\n\n\ndef get_file_paths_by_name_and_extension(dir_path, file_name, file_extension=None):\n    file_paths = []\n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            if file == file_name:\n                file_path = os.path.join(root, file)\n                if file_extension is None or is_file_type(file_path, file_extension):\n                    file_paths.append(file_path)\n    return file_paths\n\n\ndef get_file_paths_by_extension(dir_path, file_extension):\n    file_paths = []\n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if is_file_type(file_path, file_extension):\n                file_paths.append(file_path)\n    return file_paths\n\n\ndef get_file_paths_by_name_and_extensions(dir_path, file_name, file_extensions):\n    file_paths = []\n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            if file == file_name:\n                file_path = os.path.join(root, file)\n                if is_file_type_in(file_path, file_extensions):\n                    file_paths.append(file_path)\n    return file_paths\n\n\ndef get_file_paths_by_extensions(dir_path, file_extensions):\n    file_paths = []\n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if is_file_type_in(file_path, file_extensions):\n                file_paths.append(file_path)\n    return file_paths\n\n\ndef get_file_paths_by_age(dir_path, file_type=None, age_threshold=0):\n    file_paths = []\n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if get_file_age(file_path) >= age_threshold and (file_type is None or is_file_type(file_path, file_type)):\n                file_paths.append(file_path)\n    return file_paths\n\n\ndef get_file_paths_by_size(dir_path, file_type=None, size_threshold=0):\n    file_paths = []\n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if get_file_size\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"]