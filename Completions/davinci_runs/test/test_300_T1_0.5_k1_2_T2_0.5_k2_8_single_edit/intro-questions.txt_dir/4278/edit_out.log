2022-04-19 22:48:31.035094 num operations 1
2022-04-19 22:48:31.035107 size on input set 1
2022-04-19 22:48:31.035251 using api key kouti
2022-04-19 22:49:19.815206 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2019/5/6 23:30\n# @Author  : GuoChang\n# @Site    : https://github.com/xiphodon\n# @File    : anagrams.py\n# @Software: PyCharm\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\n# import sys\n#\n# n = int(sys.stdin.readline())\n#\n# s = []\n# for _ in range(n):\n#     s.append(sys.stdin.readline().rstrip())\n#\n# m = dict()\n# for i in range(n):\n#     m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n#\n# ans = 0\n# for i in m.values():\n#     ans += len(i) * (len(i) - 1) // 2\n#\n# print(ans)\n"
    },
    {
      "index": 4,
      "text": "\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\n# my solution\nimport sys\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n# print the result\nprint(count)\n\n# a better solution\nimport sys\nn = int(sys.stdin.readline())\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline().rstrip())\n    s = []\n    for i in range(n):\n        s.append(sys.stdin.readline().rstrip())\n\n    # create a dictionary of anagrams\n    anagrams = {}\n    for i in range(n):\n        # sort characters\n        chars = list(s[i])\n        chars.sort()\n        # create a key for the dictionary\n        key = \"\".join(chars)\n        if key in anagrams:\n            anagrams[key].append(i)\n        else:\n            anagrams[key] = [i]\n\n    # count the number of pairs\n    count = 0\n    for key in anagrams:\n        if len(anagrams[key]) >= 2:\n            count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n    # print the result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n\n# a better solution for the same problem\ndef main():\n    n = int(sys.stdin.readline())\n\n    s = []\n    for _ in range(n):\n        s.append(sys.stdin.readline().rstrip())\n\n    m = dict()\n    for i in range(n):\n        m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\n    ans = 0\n    for i in m.values():\n        ans += len(i) * (len(i) - 1) // 2\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650408511,
  "object": "edit"
}
2022-04-19 22:49:19.815692 fix syntax errors 8 ['\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2019/5/6 23:30\n# @Author  : GuoChang\n# @Site    : https://github.com/xiphodon\n# @File    : anagrams.py\n# @Software: PyCharm\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\n# import sys\n#\n# n = int(sys.stdin.readline())\n#\n# s = []\n# for _ in range(n):\n#     s.append(sys.stdin.readline().rstrip())\n#\n# m = dict()\n# for i in range(n):\n#     m.setdefault("".join(sorted(s[i])), []).append(i)\n#\n# ans = 0\n# for i in m.values():\n#     ans += len(i) * (len(i) - 1) // 2\n#\n# print(ans)\n', '\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n# my solution\nimport sys\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n# print the result\nprint(count)\n\n# a better solution\nimport sys\nn = int(sys.stdin.readline())\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\nprint(ans)\n', '\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline().rstrip())\n    s = []\n    for i in range(n):\n        s.append(sys.stdin.readline().rstrip())\n\n    # create a dictionary of anagrams\n    anagrams = {}\n    for i in range(n):\n        # sort characters\n        chars = list(s[i])\n        chars.sort()\n        # create a key for the dictionary\n        key = "".join(chars)\n        if key in anagrams:\n            anagrams[key].append(i)\n        else:\n            anagrams[key] = [i]\n\n    # count the number of pairs\n    count = 0\n    for key in anagrams:\n        if len(anagrams[key]) >= 2:\n            count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n    # print the result\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n\n# a better solution for the same problem\ndef main():\n    n = int(sys.stdin.readline())\n\n    s = []\n    for _ in range(n):\n        s.append(sys.stdin.readline().rstrip())\n\n    m = dict()\n    for i in range(n):\n        m.setdefault("".join(sorted(s[i])), []).append(i)\n\n    ans = 0\n    for i in m.values():\n        ans += len(i) * (len(i) - 1) // 2\n\n    print(ans)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-19 22:49:19.815817 size on output set 6
2022-04-19 22:49:19.815833 num operations 1
2022-04-19 22:49:19.815839 size on input set 1
2022-04-19 22:49:19.816025 using api key jaanu
2022-04-19 22:49:32.643509 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c - 1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values(): ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = [''.join(sorted(s)) for s in S]\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef solve():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = [' '.join(sorted(s)) for s in S]\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n# My code here\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n    for _ in range(N):\n        S[i] = ''.join(sorted(S[i]))\n    S_sort = []\n    from collections import Counter\n    C = Counter(S)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650408559,
  "object": "edit"
}
2022-04-19 22:49:32.643823 fix syntax errors 8 ["# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c - 1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values(): ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = [''.join(sorted(s)) for s in S]\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = [' '.join(sorted(s)) for s in S]\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n# My code here\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n    for _ in range(N):\n        S[i] = ''.join(sorted(S[i]))\n    S_sort = []\n    from collections import Counter\n    C = Counter(S)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-19 22:49:32.643872 size on output set 8
