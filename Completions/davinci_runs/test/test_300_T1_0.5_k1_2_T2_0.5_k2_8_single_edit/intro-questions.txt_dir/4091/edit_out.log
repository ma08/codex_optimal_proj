2022-04-19 21:00:55.785846 num operations 1
2022-04-19 21:00:55.785856 size on input set 1
2022-04-19 21:00:55.785993 using api key jaanu
2022-04-19 21:01:20.182467 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days, dp[0][j] = 0\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n"
    },
    {
      "index": 1,
      "text": "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])..., dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l: i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n"
    },
    {
      "index": 2,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n"
    },
    {
      "index": 3,
      "text": "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n"
    },
    {
      "index": 4,
      "text": "from collections import defaultdict\n\n\ndef f(n, k, a):\n    dp = [defaultdict(int) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i < j:\n                continue\n            dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\n    ans = []\n    i, j = n, k\n    while j > 0:\n        for l in range(1, min(k, i) + 1):\n            if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n                ans.append(l)\n                i -= l\n                j -= 1\n                break\n\n    return dp[n][k], ans[::-1]\n\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(*f(n, k, a))\n"
    },
    {
      "index": 5,
      "text": "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n"
    },
    {
      "index": 6,
      "text": "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days, dp[0][0] = 0\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:i]), dp[i - 2][j - 1] + max(a[i - 2:i])...dp[i - k][j - 1] + max(a[i - k:i]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(i, k) + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:  # j days cannot finish i problems\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n"
    },
    {
      "index": 7,
      "text": "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n"
    }
  ],
  "created": 1650402055,
  "object": "edit"
}
2022-04-19 21:01:20.182786 fix syntax errors 8 ['\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days, dp[0][j] = 0\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n', '\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])..., dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l: i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n', '\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n', '\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n', 'from collections import defaultdict\n\n\ndef f(n, k, a):\n    dp = [defaultdict(int) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i < j:\n                continue\n            dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\n    ans = []\n    i, j = n, k\n    while j > 0:\n        for l in range(1, min(k, i) + 1):\n            if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n                ans.append(l)\n                i -= l\n                j -= 1\n                break\n\n    return dp[n][k], ans[::-1]\n\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(*f(n, k, a))\n', '\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n', '\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days, dp[0][0] = 0\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:i]), dp[i - 2][j - 1] + max(a[i - 2:i])...dp[i - k][j - 1] + max(a[i - k:i]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(i, k) + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:  # j days cannot finish i problems\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n', '\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n']
2022-04-19 21:01:20.183096 size on output set 6
2022-04-19 21:01:20.183115 num operations 1
2022-04-19 21:01:20.183122 size on input set 1
2022-04-19 21:01:20.183286 using api key sunu
2022-04-19 21:01:43.723809 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],dp[i-k]+a[i-1])\n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=\" \")\n        i = j\n    print()\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],a[i])\n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=\" \")\n        i = j\n    print()\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],a[i-1])\n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i-k]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and a[i] == a[j]:\n            j -= 1\n        print(j-i,end=\" \")\n        i = j\n    print()\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0]*(n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], a[i - 1])\n    ans = 0\n    for i in range(k, n + 1):\n        ans += dp[i - k]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i + k\n        if j > n: \n            j = n\n        while j > i and dp[i] == dp[j]: \n            j -= 1\n        print(j-i,end=\" \")\n        i = j\n    print()\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*n\n    for i in range(1,n):\n        dp[i] = max(dp[i-1],a[i])\n    ans = 0\n    for i in range(k,n):\n        ans += dp[i]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k-1\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=\" \")\n        i = j\n    print()\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    print(n,k)\n    print(a)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], a[i - 1])\n    ans = 0  # \u5168\u4f53\u306e\u6700\u5927\u5024\n    for i in range(k, n + 1):\n        ans += dp[i - k]  # \u6700\u5927\u5024\u3092k\u500b\u305a\u3064\u8db3\u3057\u3066\u3044\u304f\n    print(ans)  # \u5168\u4f53\u306e\u6700\u5927\u5024\u3092\u51fa\u529b\n    i = 0  # \u5168\u4f53\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u3068\u304d\u306e\u30eb\u30fc\u30d7\u5909\u6570\n    while i < n:  # \u6700\u5f8c\u307e\u3067\u7d9a\u3051\u308b\n        j = i + k  # j\u306f\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u3068\u304d\u306e\u30eb\u30fc\u30d7\u5909\u6570\n        if j > n:  # j\u304cn\u3092\u8d85\u3048\u305f\u3089n\u306b\u3059\u308b\n            j = n\n        while j > i and dp[i] == dp[j]:  # dp[i]\u3068dp[j]\u304c\u7b49\u3057\u304f\u306a\u308b\u307e\u3067\u7d9a\u3051\u308b\n            j -= 1  # j\u3092\u6e1b\u3089\u3059\n        print(j - i, end=\" \")  # \u6700\u5927\u5024\u3092\u51fa\u529b\n        i = j  # i\u3092j\u306b\u3059\u308b\n    print()  # \u6539\u884c\n\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],a[i-1])+a[i-1]\n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i-k]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=\" \")\n        i = j\n    print()\n\nmain()\n"
    }
  ],
  "created": 1650402080,
  "object": "edit"
}
2022-04-19 21:01:43.724097 fix syntax errors 8 ['\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],dp[i-k]+a[i-1])\n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=" ")\n        i = j\n    print()\n\nmain()\n', '\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],a[i])\n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=" ")\n        i = j\n    print()\n\nmain()\n', '\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],a[i-1])\n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i-k]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and a[i] == a[j]:\n            j -= 1\n        print(j-i,end=" ")\n        i = j\n    print()\n\nmain()\n', '\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0]*(n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], a[i - 1])\n    ans = 0\n    for i in range(k, n + 1):\n        ans += dp[i - k]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i + k\n        if j > n: \n            j = n\n        while j > i and dp[i] == dp[j]: \n            j -= 1\n        print(j-i,end=" ")\n        i = j\n    print()\n\nmain()\n', '\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*n\n    for i in range(1,n):\n        dp[i] = max(dp[i-1],a[i])\n    ans = 0\n    for i in range(k,n):\n        ans += dp[i]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k-1\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=" ")\n        i = j\n    print()\n\nmain()\n', '\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    print(n,k)\n    print(a)\n\nmain()\n', '\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], a[i - 1])\n    ans = 0  # 全体の最大値\n    for i in range(k, n + 1):\n        ans += dp[i - k]  # 最大値をk個ずつ足していく\n    print(ans)  # 全体の最大値を出力\n    i = 0  # 全体の最大値を求めるときのループ変数\n    while i < n:  # 最後まで続ける\n        j = i + k  # jは最大値を求めるときのループ変数\n        if j > n:  # jがnを超えたらnにする\n            j = n\n        while j > i and dp[i] == dp[j]:  # dp[i]とdp[j]が等しくなるまで続ける\n            j -= 1  # jを減らす\n        print(j - i, end=" ")  # 最大値を出力\n        i = j  # iをjにする\n    print()  # 改行\n\n\nmain()\n', '\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],a[i-1])+a[i-1]\n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i-k]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=" ")\n        i = j\n    print()\n\nmain()\n']
2022-04-19 21:01:43.724253 size on output set 8
