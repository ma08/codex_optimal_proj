["\nS, T = input().split()\nprint(T + S)\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:k])\n\na, b, c, k = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "A, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\n\nif A >= K:\n    print(K)  # 1\nelif A + B >= K:\n    print(A)  # 2\nelse:\n    print(A - (K - A - B))\n", "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "# -*- coding: utf-8 -*-\n# @Author: krocki\n# @Date:   2017-01-28 19:53:49\n# @Last Modified by:   krocki\n# @Last Modified time: 2017-01-28 19:54:05\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 2, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "# -*- coding: utf-8 -*-\n# AtCoder Beginner Contest\n# Problem C\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[: K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nN, K = map(int, input().split())\n# N, K = 2, 1, 1, 3\n\nif N % K == 0:\n    print(0)\nelse:\n    print(1)\n", "\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\n\n N, A, B = map(int, input().split())\n# N, A, B = 3, 2, 10\n\n\nif N <= A:\n    print(N)\nelse:\n    print(A)\n\n\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards, k):\n    cards.sort(key=itemgetter(1), reverse=True)  # sort by card value\n    return sum(card[1] for card in cards[:k])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "# https://atcoder.jp/contests/abc084/tasks/abc084_c\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K]) # K\u756a\u76ee\u307e\u3067\u306e\u30ab\u30fc\u30c9\u306e\u30b9\u30b3\u30a2\u306e\u5408\u8a08\n\nN = int(input())\ncards = []\nfor _ in range(N):\n    C, S, F = map(int, input().split())\n    cards.append((C, S, F))\n\nprint(get_max_possible_sum(cards))\n", "\n\nA, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\n\ndef get_max_possible_sum(cards, K):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards, K))\n"]