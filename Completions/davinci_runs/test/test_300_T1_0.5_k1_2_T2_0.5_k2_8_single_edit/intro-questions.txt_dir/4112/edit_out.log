2022-04-19 21:15:09.862840 num operations 1
2022-04-19 21:15:09.862850 size on input set 1
2022-04-19 21:15:09.863007 using api key soukgp
2022-04-19 21:15:34.394296 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\ndp = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    dp[i] = max(dp[i - 1], dp[i - k] + a[i - 1])\n    # print(dp)\n"
    },
    {
      "index": 1,
      "text": "\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 2,
      "text": "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 3,
      "text": "\nn, k, x = map(int, input().split())\npictures = [0] + list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n + 1):\n    for i in range(1, n + 1 - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n + 1):\n        for i in range(1, n + 1 - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 4,
      "text": "\n\n# n, k, x = map(int, input().split())\n# pictures = list(map(int, input().split()))\n\nn, k, x = 3, 2, 2\npictures = [1, 2, 3]\n\nprint(n, k, x)\nprint(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\nfor row in dp:\n    print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    for row in dp2:\n        print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun May 17 10:52:04 2020\n\n@author: konrad\n\"\"\"\n\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 6,
      "text": "\nn, k, x = map(int, input().split())\npictures = [int(x) for x in input().split()]\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]  # noqa: E741\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]  # noqa: E741\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 7,
      "text": "\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    }
  ],
  "created": 1650402910,
  "object": "edit"
}
2022-04-19 21:15:34.394731 fix syntax errors 8 ['\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\ndp = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    dp[i] = max(dp[i - 1], dp[i - k] + a[i - 1])\n    # print(dp)\n', '\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\nn, k, x = map(int, input().split())\npictures = [0] + list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n + 1):\n    for i in range(1, n + 1 - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n + 1):\n        for i in range(1, n + 1 - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\n\n# n, k, x = map(int, input().split())\n# pictures = list(map(int, input().split()))\n\nn, k, x = 3, 2, 2\npictures = [1, 2, 3]\n\nprint(n, k, x)\nprint(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\nfor row in dp:\n    print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    for row in dp2:\n        print(row)\n\n    print(dp2[0][n - 1])\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Sun May 17 10:52:04 2020\n\n@author: konrad\n"""\n\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\nn, k, x = map(int, input().split())\npictures = [int(x) for x in input().split()]\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]  # noqa: E741\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]  # noqa: E741\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n']
2022-04-19 21:15:34.394852 size on output set 7
2022-04-19 21:15:34.394865 num operations 1
2022-04-19 21:15:34.394871 size on input set 1
2022-04-19 21:15:34.395033 using api key sunu
2022-04-19 21:15:59.123982 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1 or (k == 2 and n == 2):\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef calc(n, k, A):\n    if k == 1:\n        return sum(A)\n    if k == 2:\n        return max(A)\n    if k == 3:\n        return max(A[0] + A[-1], max(A[1:n-1]))\n    if k == 4:\n        return max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2]))\n    if k == 5:\n        return max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3]))\n    return max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4]))\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k or k == 1:\n        print(calc(n, k, A))\n    else:\n        print(max(calc(n, k, A), calc(n, k-1, A)))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 0:\n        print(sum(A))\n        return\n    if k == 1:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k or n < k:\n        print(-1)\n        return\n    if n == k:\n        print(sum(A) + (k-1)*x)\n    elif k == 1:\n        print(sum(A))    \n    elif k == 2:\n        print(max(A))    \n    elif k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))    \n    elif k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))    \n    elif k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))    \n    else:\n        print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650402934,
  "object": "edit"
}
2022-04-19 21:15:59.124306 fix syntax errors 8 ["\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1 or (k == 2 and n == 2):\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef calc(n, k, A):\n    if k == 1:\n        return sum(A)\n    if k == 2:\n        return max(A)\n    if k == 3:\n        return max(A[0] + A[-1], max(A[1:n-1]))\n    if k == 4:\n        return max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2]))\n    if k == 5:\n        return max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3]))\n    return max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4]))\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k or k == 1:\n        print(calc(n, k, A))\n    else:\n        print(max(calc(n, k, A), calc(n, k-1, A)))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 0:\n        print(sum(A))\n        return\n    if k == 1:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k or n < k:\n        print(-1)\n        return\n    if n == k:\n        print(sum(A) + (k-1)*x)\n    elif k == 1:\n        print(sum(A))    \n    elif k == 2:\n        print(max(A))    \n    elif k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))    \n    elif k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))    \n    elif k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))    \n    else:\n        print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-19 21:15:59.124476 size on output set 7
