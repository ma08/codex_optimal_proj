["# coding: utf-8\n\nN = int(input())\nH = list(map(int, input().split()))\n\nans = 0\ncurr = 0\nfor i in range(N-1):\n    if H[i+1] <= H[i]:\n        curr += 1\n    else:\n        ans = max(ans, curr)\n        curr = 0\nprint(max(ans, curr))\n", "\nN = int(input())  # \u5165\u529b\u53d7\u3051\u53d6\u308a\nA = list(map(int, input().split()))  # \u5165\u529b\u53d7\u3051\u53d6\u308a\nA.sort()  # \u30bd\u30fc\u30c8\nprint(A[-1] - A[0])  # \u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u306e\u5dee\u3092\u51fa\u529b\n", "\nN = int(input())\nH = list(map(int, input().split()))\n\nans = 0\ncurr = 0\nfor i in range(N - 1):\n    if H[i + 1] <= H[i]:\n        curr += 1\n    else:\n        ans = max(ans, curr)\n        curr = 0\nprint(max(ans, curr))\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    while n > 0:\n        n -= 1\n        if n == 0:\n            ans += 1\n            break\n        if a[n] >= a[n-1]:\n            ans += 1\n        else:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    h = list(map(int, input().split()))[::-1]\n    ans = 0\n    while n > 0:\n        n -= 1\n        if n == 0:\n            ans += 1\n            break\n        if h[n] >= h[n-1]:\n            ans += 1\n        else:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nN = int(input())\nnums = list(map(int, input().split()))\n\nans = 0\ncur = 0\nfor i in range(N-1):\n    if nums[i+1] <= nums[i]:\n        cur += 1\n    else:\n        ans = max(ans, cur)\n        cur = 0\nprint(max(ans, cur))\n", "\ndef main():\n    n = int(input())\n    h = list(map(int, input().split()))[::-1]\n    ans = 0\n    for i in range(1, n):\n        if h[i] > h[i-1]:\n            ans += 1\n            continue\n        elif h[i] == h[i-1]:\n            continue\n        elif h[i] < h[i-1]:\n            ans += h[i-1] - h[i] + 1\n            h[i] = h[i-1] + 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\n\nN = int(input()) # \u6570\u5024\nA = [int(input()) for i in range(N)] # \u30ea\u30b9\u30c8\nA = list(map(int, input().split())) # \u30ea\u30b9\u30c8\uff08\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\uff09\nA = [list(map(int, input().split())) for i in range(N)] # \u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\uff08\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\uff09\nS = input() # \u6587\u5b57\u5217\n\n# \u518d\u5e30\u95a2\u6570\ndef rec(i):\n    if i == N:\n        print(A)\n        return\n    for j in range(N):\n        A[i] = j\n        rec(i + 1)\n\n# \u30b9\u30bf\u30c3\u30af\nstack = []\nstack.append(1)\nstack.append(2)\nstack.pop()\n\n# \u30ad\u30e5\u30fc\nfrom collections import deque\nqueue = deque()\nqueue.append(1)\nqueue.append(2)\nqueue.popleft()\n\n# \u6587\u5b57\u5217\nS = \"abc\"\nS[0] # \u6587\u5b57\u5217\u306e0\u756a\u76ee\u306e\u6587\u5b57\nS[-1] # \u6587\u5b57\u5217\u306e\u6700\u5f8c\u306e\u6587\u5b57\nS[1:3] # \u6587\u5b57\u5217\u306e1\u756a\u76ee\u304b\u30893\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\nS[::-1] # \u6587\u5b57\u5217\u3092\u9006\u306b\u3059\u308b\n\n# \u6587\u5b57\u5217\u306e\u691c\u7d22\nS.find(\"a\") # \u6587\u5b57\u5217S\u304b\u3089\u6587\u5b57\u5217a\u304c\u6700\u521d\u306b\u51fa\u3066\u304f\u308b\u4f4d\u7f6e\u3092\u8fd4\u3059\nS.rfind(\"a\") # \u6587\u5b57\u5217S\u304b\u3089\u6587\u5b57\u5217a\u304c\u6700\u5f8c\u306b\u51fa\u3066\u304f\u308b\u4f4d\u7f6e\u3092\u8fd4\u3059\nS.count(\"a\") # \u6587\u5b57\u5217S\u306b\u6587\u5b57\u5217a\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u8fd4\u3059\n\n# \u6587\u5b57\u5217\u306e\u7f6e\u63db\nS.replace(\"a\", \"b\") # \u6587\u5b57\u5217S\u306e\u4e2d\u306e\u6587\u5b57\u5217a\u3092b\u306b\u7f6e\u63db\u3059\u308b\n\n# \u6587\u5b57\u5217\u306e\u5206\u5272\nS.split(\"a\") # \u6587\u5b57\u5217S\u3092\u6587\u5b57\u5217a\u3067\u5206\u5272\u3057\u3066\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n# \u6587\u5b57\u5217\u306e\u7d50\u5408\n\"\".join([\"a\", \"b\", \"c\"]) # \u30ea\u30b9\u30c8[\"a\", \"b\", \"c\"]\u3092\u7a7a\u6587\u5b57\u5217\u3067\u7d50\u5408\u3059\u308b\n\n# \u6587\u5b57\u5217\u306e\u5224\u5b9a\nS.isalnum() # \u6587\u5b57\u5217S\u304c\u82f1\u6570\u5b57\u304b\u3069\u3046\u304b\nS.isalpha() # \u6587\u5b57\u5217S\u304c\u82f1\u5b57\u304b\u3069\u3046\u304b\nS.isdigit() # \u6587\u5b57\u5217S\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\nS.islower() # \u6587\u5b57\u5217S\u304c\u5c0f\u6587\u5b57\u304b\u3069\u3046\u304b\nS.isupper() # \u6587\u5b57\u5217S\u304c\u5927\u6587\u5b57\u304b\u3069\u3046\u304b\nS.isspace() # \u6587\u5b57\u5217S\u304c\u7a7a\u767d\u304b\u3069\u3046\u304b\nS.istitle() # \u6587\u5b57\u5217S\u304c\u30bf\u30a4\u30c8\u30eb\u30b1\u30fc\u30b9\u304b\u3069\u3046\u304b\n\n# \u6587\u5b57\u5217\u306e\u5909\u63db\nS.lower() # \u6587\u5b57\u5217S\u3092\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\nS.upper() # \u6587\u5b57\u5217S\u3092\u5927\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\nS.title() # \u6587\u5b57\u5217S\u3092\u30bf\u30a4\u30c8\u30eb\u30b1\u30fc\u30b9\u306b\u5909\u63db\u3059\u308b\n\n# \u6587\u5b57\u5217\u306e\u30c8\u30ea\u30df\u30f3\u30b0\nS.lstrip() # \u6587\u5b57\u5217S\u306e\u5de6\u7aef\u306e\u7a7a\u767d\u3092\u524a\u9664\u3059\u308b\nS.rstrip() # \u6587\u5b57\u5217S\u306e\u53f3\u7aef\u306e\u7a7a\u767d\u3092\u524a\u9664\u3059\u308b\nS.strip() # \u6587\u5b57\u5217S\u306e\u5de6\u53f3\u7aef\u306e\u7a7a\u767d\u3092\u524a\u9664\u3059\u308b\n\n# \u6587\u5b57\u5217\u306e\u51fa\u529b\nprint(\"%.2f\" % 1.2345) # \u6587\u5b57\u52171.2345\u3092\u5c0f\u6570\u70b9\u7b2c2\u4f4d\u307e\u3067\u8868\u793a\u3059\u308b\nprint(\"{} {}\".format(1, 2)) # \u6587\u5b57\u52171 2\u3092\u51fa\u529b\u3059\u308b\nprint(\"{0} {1}\".format(1, 2)) # \u6587\u5b57\u52171 2\u3092\u51fa\u529b\u3059\u308b\nprint(\"{1} {0}\".format(1, 2)) # \u6587\u5b57\u52172 1\u3092\u51fa\u529b\u3059\u308b\n\n# \u6570\u5024\na = 1\na += 1 # a = a + 1\u3068\u540c\u3058\na -= 1 # a = a - 1\u3068\u540c\u3058\na *= 2 # a = a * 2\u3068\u540c\u3058\na /= 2 # a = a / 2\u3068\u540c\u3058\na //= 2 # a = a // 2\u3068\u540c\u3058\na %= 2 # a = a % 2\u3068\u540c\u3058\na **= 2 # a = a ** 2\u3068\u540c\u3058\n\n# \u7d2f\u7a4d\u548c\nA = [1, 2, 3, 4, 5]\nB = [0]\nB.extend(accumulate(A))\n\n# \u30bd\u30fc\u30c8\nA = [1, 3, 2, 4, 5]\nA.sort() # A = [1, 2, 3, 4, 5]\nA.sort(reverse=True) # A = [5, 4, 3, 2, 1]\nsorted(A) # [1, 2, 3, 4, 5]\nsorted(A, reverse=True) # [5, 4, 3, 2, 1]\n\n# \u4e8c\u5206\u63a2\u7d22\ndef binary_search(A, x):\n    l = -1\n    r = len(A)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if A[mid] >= x:\n            r = mid\n        else:\n            l = mid\n    return r\n\n# \u9806\u5217\nfor p in permutations(A):\n    print(p)\n\n# \u7d44\u307f\u5408\u308f\u305b\nfor c in combinations(A, 3):\n    print(c)\n\n# \u7d44\u307f\u5408\u308f\u305b\uff08\u91cd\u8907\u3042\u308a\uff09\nfor c in combinations_with_replacement(A, 3):\n    print(c)\n\n# \u7d20\u6570\ndef is_prime(\n", "\ndef main():\n    n = int(input())\n    h = list(map(int, input().split()))\n    ans = 0\n    while n > 0:\n        n -= 1\n        if n == 0:\n            ans += 1\n            break\n        if h[n-1] >= h[n]:\n            ans += 1\n        else:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input())\nH = list(map(int, input().split()))\n\nans = 0\ncurr = 0\nfor i in range(N-1):\n    if H[i+1] <= H[i]:\n        curr += 1\n    else:\n        ans = max(ans, curr)\n        curr = 0\n\nprint(max(ans, curr))\n", "\nN = int(input())\nH = list(map(int, input().split()))\n\nans = 0\ncurr = 0\nfor i in range(N-1):\n    if H[i+1] <= H[i]:\n        curr += 1\n    else:\n        ans = max(ans, curr)\n        curr = 0\nprint(max(ans, curr))\n", "\nN = int(input())\nH = list(map(int, input().split()))\n\nans = 0\ncurr = 0\nfor i in range(N - 1):\n    if H[i+1] <= H[i]:\n        curr += 1\n    else:\n        ans = max(ans, curr)\n        curr = 0\nprint(max(ans, curr))\n", "\ndef main():\n    n = int(input())\n    h = [int(i) for i in input().split()]\n    ans = 0\n    while n > 0:\n        n -= 1\n        if n == 0:\n            ans += 1\n            break\n        if h[n] >= h[n-1]:\n            ans += 1\n        else:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    h = list(map(int, input().split()))\n    ans = 0\n    for i in range(n-1):\n        if h[i] <= h[i+1]:\n            ans\n        elif h[i] >= h[i+1]:\n            ans\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    N = int(input())\n    h = list(map(int, input().split(' ')))\n    ans = 0\n    while N > 0:\n        N -= 1\n        if N == 0:\n            ans += 1\n            break\n        if h[N] >= h[N-1]:\n            ans += 1\n        else:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    h = list(map(int, input().split()))\n    ans = 0\n    while n > 1:\n        n -= 1\n        if h[n] >= h[n-1]:\n            ans += 1\n        else:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]