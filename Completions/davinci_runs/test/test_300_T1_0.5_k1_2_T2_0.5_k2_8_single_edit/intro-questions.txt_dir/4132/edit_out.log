2022-04-19 21:26:31.991237 num operations 1
2022-04-19 21:26:31.991247 size on input set 1
2022-04-19 21:26:31.991390 using api key gabby
2022-04-19 21:27:09.374567 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# \u521d\u671f\u5316\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u540d\u524d\nmonsters = list(range(1, n+1))\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\nhealth = [a for a in A]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u751f\u6b7b\nalive = [True for _ in range(n)]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u653b\u6483\u3057\u305f\u56de\u6570\nattack_num = [0 for _ in range(n)]\n\n# \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\nalive_num = n\n# \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\nattack_count = 0\n\nwhile alive_num > 1:\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    attacker = random.choice(monsters)\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    defender = random.choice(monsters)\n\n    # \u653b\u6483\u3068\u9632\u5fa1\u304c\u540c\u3058\u30e2\u30f3\u30b9\u30bf\u30fc\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u653b\u6483\u3092\u7e70\u308a\u8fd4\u3059\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u653b\u6483\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_num[attacker-1] += 1\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u6e1b\u3089\u3059\n    health[defender-1] -= health[attacker-1]\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u304c0\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u5834\u5408\n    if health[defender-1] <= 0:\n        # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6b7b\u4ea1\u306b\u3059\u308b\n        alive[defender-1] = False\n        # \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n        alive_num -= 1\n\n    # \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_count += 1\n\n# \u6700\u5f8c\u306b\u751f\u304d\u6b8b\u3063\u305f\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u51fa\u529b\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n"
    },
    {
      "index": 1,
      "text": "\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# \u521d\u671f\u5316\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u540d\u524d\nmonsters = list(range(1, n+1))\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\nhealth = [a for a in A]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u751f\u6b7b\nalive = [True for _ in range(n)]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u653b\u6483\u3057\u305f\u56de\u6570\nattack_num = [0 for _ in range(n)]\n\n# \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\nalive_num = n\n# \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\nattack_count = 0\n\nwhile alive_num > 1:\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    attacker = random.choice(monsters)\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    defender = random.choice(monsters)\n\n    # \u653b\u6483\u3068\u9632\u5fa1\u304c\u540c\u3058\u30e2\u30f3\u30b9\u30bf\u30fc\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u653b\u6483\u3092\u7e70\u308a\u8fd4\u3059\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u653b\u6483\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_num[attacker-1] += 1\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u6e1b\u3089\u3059\n    health[defender-1] -= health[attacker-1]\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u304c0\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u5834\u5408\n    if health[defender-1] <= 0:\n        # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6b7b\u4ea1\u306b\u3059\u308b\n        alive[defender-1] = False\n        # \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n        alive_num -= 1\n\n    # \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_count += 1\n\n# \u6700\u5f8c\u306b\u751f\u304d\u6b8b\u3063\u305f\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u51fa\u529b\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n"
    },
    {
      "index": 2,
      "text": "\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# \u521d\u671f\u5316\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u540d\u524d\nmonsters = list(range(1, n+1))\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\nhealth = [a for a in A]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u751f\u6b7b\nalive = [True for _ in range(n)]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u653b\u6483\u3057\u305f\u56de\u6570\nattack_num = [0 for _ in range(n)]\n\n# \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\nalive_num = n\n# \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\nattack_count = 0\n\nwhile alive_num > 1:\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    attacker = random.choice(monsters)\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    defender = random.choice(monsters)\n\n    # \u653b\u6483\u3068\u9632\u5fa1\u304c\u540c\u3058\u30e2\u30f3\u30b9\u30bf\u30fc\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u653b\u6483\u3092\u7e70\u308a\u8fd4\u3059\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u653b\u6483\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_num[attacker-1] += 1\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u6e1b\u3089\u3059\n    health[defender-1] -= health[attacker-1]\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u304c0\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u5834\u5408\n    if health[defender-1] <= 0:\n        # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6b7b\u4ea1\u306b\u3059\u308b\n        alive[defender-1] = False\n        # \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n        alive_num -= 1\n\n    # \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_count += 1\n\n# \u6700\u5f8c\u306b\u751f\u304d\u6b8b\u3063\u305f\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u51fa\u529b\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n"
    },
    {
      "index": 3,
      "text": "\nimport itertools\n\nn = int(input())\n\n# \u6570\u5217\u306e\u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u751f\u6210\ncombinations = list(itertools.combinations(A, 2))\n\n# \u5404\u7d44\u307f\u5408\u308f\u305b\u3067\u751f\u304d\u6b8b\u3063\u305f\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6c42\u3081\u308b\nalive_monsters = []\nA = list(map(int, input().split()))\n\n# \u521d\u671f\u5316\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u540d\u524d\nmonsters = list(range(1, n+1))\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\nhealth = A[:]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u751f\u6b7b\nalive = [True for _ in range(n)]\n\nfor pair in combinations:\n    # \u653b\u6483\u3068\u9632\u5fa1\u304c\u540c\u3058\u30e2\u30f3\u30b9\u30bf\u30fc\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u653b\u6483\u3092\u7e70\u308a\u8fd4\u3059\n    while pair[0] == pair[1]:\n        pair = random.choice(combinations)\n\nwhile alive_num > 1:\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    attacker = random.choice(monsters)\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    defender = random.choice(monsters)\n\n    # \u653b\u6483\u3068\u9632\u5fa1\u304c\u540c\u3058\u30e2\u30f3\u30b9\u30bf\u30fc\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u653b\u6483\u3092\u7e70\u308a\u8fd4\u3059\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u653b\u6483\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_num[attacker-1] += 1\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u6e1b\u3089\u3059\n    health[defender-1] -= health[attacker-1]\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u304c0\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u5834\u5408\n    if health[defender-1] <= 0:\n        # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6b7b\u4ea1\u306b\u3059\u308b\n        alive[defender-1] = False\n        # \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n        alive_num -= 1\n\n    # \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_count += 1\n\n# \u6700\u5f8c\u306b\u751f\u304d\u6b8b\u3063\u305f\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u51fa\u529b\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n"
    },
    {
      "index": 4,
      "text": "\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# \u521d\u671f\u5316\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u540d\u524d\nmonsters = list(range(1, n+1))\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\nhealth = [a for a in A]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u751f\u6b7b\nalive = [True for _ in range(n)]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u653b\u6483\u3057\u305f\u56de\u6570\nattack_num = [0 for _ in range(n)]\n\n# \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\nalive_num = n\n# \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\nattack_count = 0\n\nwhile alive_num > 1:\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    attacker = random.choice(monsters)\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    defender = random.choice(monsters)\n\n    # \u653b\u6483\u3068\u9632\u5fa1\u304c\u540c\u3058\u30e2\u30f3\u30b9\u30bf\u30fc\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u653b\u6483\u3092\u7e70\u308a\u8fd4\u3059\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u653b\u6483\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_num[attacker-1] += 1\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u6e1b\u3089\u3059\n    health[defender-1] -= health[attacker-1]\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u304c0\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u5834\u5408\n    if health[defender-1] <= 0:\n        # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6b7b\u4ea1\u306b\u3059\u308b\n        alive[defender-1] = False\n        # \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n        alive_num -= 1\n\n    # \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_count += 1\n\n# \u6700\u5f8c\u306b\u751f\u304d\u6b8b\u3063\u305f\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u51fa\u529b\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n"
    },
    {
      "index": 5,
      "text": "\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# \u521d\u671f\u5316\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u540d\u524d\nmonsters = list(range(1, n+1))\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\nhealth = [a for a in A]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u751f\u6b7b\nalive = [True for _ in range(n)]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u653b\u6483\u3057\u305f\u56de\u6570\nattack_num = [0 for _ in range(n)]\n\n# \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\nalive_num = n\n# \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\nattack_count = 0\n\nwhile alive_num > 1:\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    attacker = random.choice(monsters)\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    defender = random.choice(monsters)\n\n    # \u653b\u6483\u3068\u9632\u5fa1\u304c\u540c\u3058\u30e2\u30f3\u30b9\u30bf\u30fc\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u653b\u6483\u3092\u7e70\u308a\u8fd4\u3059\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u653b\u6483\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_num[attacker-1] += 1\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u6e1b\u3089\u3059\n    health[defender-1] -= health[attacker-1]\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u304c0\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u5834\u5408\n    if health[defender-1] <= 0:\n        # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6b7b\u4ea1\u306b\u3059\u308b\n        alive[defender-1] = False\n        # \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n        alive_num -= 1\n\n    # \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_count += 1\n\n# \u6700\u5f8c\u306b\u751f\u304d\u6b8b\u3063\u305f\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u51fa\u529b\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n"
    },
    {
      "index": 6,
      "text": "\n\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# \u521d\u671f\u5316\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u540d\u524d\nmonsters = list(range(1, n+1))\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\nhealth = [a for a in A]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u751f\u6b7b\nalive = [True for _ in range(n)]\n# \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u653b\u6483\u3057\u305f\u56de\u6570\nattack_num = [0 for _ in range(n)]\n\n# \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\nalive_num = n\n# \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\nattack_count = 0\n\nwhile alive_num > 1:\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    attacker = random.choice(monsters)\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    defender = random.choice(monsters)\n\n    # \u653b\u6483\u3068\u9632\u5fa1\u304c\u540c\u3058\u30e2\u30f3\u30b9\u30bf\u30fc\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u653b\u6483\u3092\u7e70\u308a\u8fd4\u3059\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u653b\u6483\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_num[attacker-1] += 1\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u6e1b\u3089\u3059\n    health[defender-1] -= health[attacker-1]\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u304c0\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u5834\u5408\n    if health[defender-1] <= 0:\n        # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6b7b\u4ea1\u306b\u3059\u308b\n        alive[defender-1] = False\n        # \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n        alive_num -= 1\n\n    # \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_count += 1\n\n# \u6700\u5f8c\u306b\u751f\u304d\u6b8b\u3063\u305f\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u51fa\u529b\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n"
    },
    {
      "index": 7,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\nimport itertools\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# 1\u3064\u76ee\u306e\u888b\u3092\u7a7a\u306b\u3059\u308b\na.append(0)\n# 2\u3064\u76ee\u306e\u888b\u3092\u7a7a\u306b\u3059\u308b\nb.append(0)\n\n# \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\nalive_num = n\n# \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\nattack_count = 0\n\nwhile alive_num > 1:\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    attacker = random.choice(monsters)\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u9078\u629e\n    defender = random.choice(monsters)\n\n    # \u653b\u6483\u3068\u9632\u5fa1\u304c\u540c\u3058\u30e2\u30f3\u30b9\u30bf\u30fc\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u653b\u6483\u3092\u7e70\u308a\u8fd4\u3059\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # \u653b\u6483\u3059\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u653b\u6483\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_num[attacker-1] += 1\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u6e1b\u3089\u3059\n    health[defender-1] -= health[attacker-1]\n\n    # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u304c0\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u5834\u5408\n    if health[defender-1] <= 0:\n        # \u653b\u6483\u3055\u308c\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6b7b\u4ea1\u306b\u3059\u308b\n        alive[defender-1] = False\n        # \u751f\u304d\u3066\u3044\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n        alive_num -= 1\n\n    # \u653b\u6483\u3092\u884c\u3063\u305f\u56de\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    attack_count += 1\n\n# \u6700\u5f8c\u306b\u751f\u304d\u6b8b\u3063\u305f\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u4f53\u529b\u3092\u51fa\u529b\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n"
    }
  ],
  "created": 1650403592,
  "object": "edit"
}
2022-04-19 21:27:09.375030 fix syntax errors 8 ['\n\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# 初期化\n# 各モンスターの名前\nmonsters = list(range(1, n+1))\n# 各モンスターの体力\nhealth = [a for a in A]\n# 各モンスターの生死\nalive = [True for _ in range(n)]\n# 各モンスターが攻撃した回数\nattack_num = [0 for _ in range(n)]\n\n# 生きているモンスターの数\nalive_num = n\n# 攻撃を行った回数\nattack_count = 0\n\nwhile alive_num > 1:\n    # 攻撃するモンスターを選択\n    attacker = random.choice(monsters)\n    # 攻撃されるモンスターを選択\n    defender = random.choice(monsters)\n\n    # 攻撃と防御が同じモンスターであった場合、攻撃を繰り返す\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # 攻撃するモンスターの攻撃回数をインクリメント\n    attack_num[attacker-1] += 1\n\n    # 攻撃されるモンスターの体力を減らす\n    health[defender-1] -= health[attacker-1]\n\n    # 攻撃されるモンスターの体力が0以下になった場合\n    if health[defender-1] <= 0:\n        # 攻撃されるモンスターを死亡にする\n        alive[defender-1] = False\n        # 生きているモンスターの数をデクリメント\n        alive_num -= 1\n\n    # 攻撃を行った回数をインクリメント\n    attack_count += 1\n\n# 最後に生き残ったモンスターの体力を出力\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n', '\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# 初期化\n# 各モンスターの名前\nmonsters = list(range(1, n+1))\n# 各モンスターの体力\nhealth = [a for a in A]\n# 各モンスターの生死\nalive = [True for _ in range(n)]\n# 各モンスターが攻撃した回数\nattack_num = [0 for _ in range(n)]\n\n# 生きているモンスターの数\nalive_num = n\n# 攻撃を行った回数\nattack_count = 0\n\nwhile alive_num > 1:\n    # 攻撃するモンスターを選択\n    attacker = random.choice(monsters)\n    # 攻撃されるモンスターを選択\n    defender = random.choice(monsters)\n\n    # 攻撃と防御が同じモンスターであった場合、攻撃を繰り返す\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # 攻撃するモンスターの攻撃回数をインクリメント\n    attack_num[attacker-1] += 1\n\n    # 攻撃されるモンスターの体力を減らす\n    health[defender-1] -= health[attacker-1]\n\n    # 攻撃されるモンスターの体力が0以下になった場合\n    if health[defender-1] <= 0:\n        # 攻撃されるモンスターを死亡にする\n        alive[defender-1] = False\n        # 生きているモンスターの数をデクリメント\n        alive_num -= 1\n\n    # 攻撃を行った回数をインクリメント\n    attack_count += 1\n\n# 最後に生き残ったモンスターの体力を出力\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n', '\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# 初期化\n# 各モンスターの名前\nmonsters = list(range(1, n+1))\n# 各モンスターの体力\nhealth = [a for a in A]\n# 各モンスターの生死\nalive = [True for _ in range(n)]\n# 各モンスターが攻撃した回数\nattack_num = [0 for _ in range(n)]\n\n# 生きているモンスターの数\nalive_num = n\n# 攻撃を行った回数\nattack_count = 0\n\nwhile alive_num > 1:\n    # 攻撃するモンスターを選択\n    attacker = random.choice(monsters)\n    # 攻撃されるモンスターを選択\n    defender = random.choice(monsters)\n\n    # 攻撃と防御が同じモンスターであった場合、攻撃を繰り返す\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # 攻撃するモンスターの攻撃回数をインクリメント\n    attack_num[attacker-1] += 1\n\n    # 攻撃されるモンスターの体力を減らす\n    health[defender-1] -= health[attacker-1]\n\n    # 攻撃されるモンスターの体力が0以下になった場合\n    if health[defender-1] <= 0:\n        # 攻撃されるモンスターを死亡にする\n        alive[defender-1] = False\n        # 生きているモンスターの数をデクリメント\n        alive_num -= 1\n\n    # 攻撃を行った回数をインクリメント\n    attack_count += 1\n\n# 最後に生き残ったモンスターの体力を出力\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n', '\nimport itertools\n\nn = int(input())\n\n# 数列の全ての組み合わせを生成\ncombinations = list(itertools.combinations(A, 2))\n\n# 各組み合わせで生き残ったモンスターを求める\nalive_monsters = []\nA = list(map(int, input().split()))\n\n# 初期化\n# 各モンスターの名前\nmonsters = list(range(1, n+1))\n# 各モンスターの体力\nhealth = A[:]\n# 各モンスターの生死\nalive = [True for _ in range(n)]\n\nfor pair in combinations:\n    # 攻撃と防御が同じモンスターであった場合、攻撃を繰り返す\n    while pair[0] == pair[1]:\n        pair = random.choice(combinations)\n\nwhile alive_num > 1:\n    # 攻撃するモンスターを選択\n    attacker = random.choice(monsters)\n    # 攻撃されるモンスターを選択\n    defender = random.choice(monsters)\n\n    # 攻撃と防御が同じモンスターであった場合、攻撃を繰り返す\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # 攻撃するモンスターの攻撃回数をインクリメント\n    attack_num[attacker-1] += 1\n\n    # 攻撃されるモンスターの体力を減らす\n    health[defender-1] -= health[attacker-1]\n\n    # 攻撃されるモンスターの体力が0以下になった場合\n    if health[defender-1] <= 0:\n        # 攻撃されるモンスターを死亡にする\n        alive[defender-1] = False\n        # 生きているモンスターの数をデクリメント\n        alive_num -= 1\n\n    # 攻撃を行った回数をインクリメント\n    attack_count += 1\n\n# 最後に生き残ったモンスターの体力を出力\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n', '\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# 初期化\n# 各モンスターの名前\nmonsters = list(range(1, n+1))\n# 各モンスターの体力\nhealth = [a for a in A]\n# 各モンスターの生死\nalive = [True for _ in range(n)]\n# 各モンスターが攻撃した回数\nattack_num = [0 for _ in range(n)]\n\n# 生きているモンスターの数\nalive_num = n\n# 攻撃を行った回数\nattack_count = 0\n\nwhile alive_num > 1:\n    # 攻撃するモンスターを選択\n    attacker = random.choice(monsters)\n    # 攻撃されるモンスターを選択\n    defender = random.choice(monsters)\n\n    # 攻撃と防御が同じモンスターであった場合、攻撃を繰り返す\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # 攻撃するモンスターの攻撃回数をインクリメント\n    attack_num[attacker-1] += 1\n\n    # 攻撃されるモンスターの体力を減らす\n    health[defender-1] -= health[attacker-1]\n\n    # 攻撃されるモンスターの体力が0以下になった場合\n    if health[defender-1] <= 0:\n        # 攻撃されるモンスターを死亡にする\n        alive[defender-1] = False\n        # 生きているモンスターの数をデクリメント\n        alive_num -= 1\n\n    # 攻撃を行った回数をインクリメント\n    attack_count += 1\n\n# 最後に生き残ったモンスターの体力を出力\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n', '\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# 初期化\n# 各モンスターの名前\nmonsters = list(range(1, n+1))\n# 各モンスターの体力\nhealth = [a for a in A]\n# 各モンスターの生死\nalive = [True for _ in range(n)]\n# 各モンスターが攻撃した回数\nattack_num = [0 for _ in range(n)]\n\n# 生きているモンスターの数\nalive_num = n\n# 攻撃を行った回数\nattack_count = 0\n\nwhile alive_num > 1:\n    # 攻撃するモンスターを選択\n    attacker = random.choice(monsters)\n    # 攻撃されるモンスターを選択\n    defender = random.choice(monsters)\n\n    # 攻撃と防御が同じモンスターであった場合、攻撃を繰り返す\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # 攻撃するモンスターの攻撃回数をインクリメント\n    attack_num[attacker-1] += 1\n\n    # 攻撃されるモンスターの体力を減らす\n    health[defender-1] -= health[attacker-1]\n\n    # 攻撃されるモンスターの体力が0以下になった場合\n    if health[defender-1] <= 0:\n        # 攻撃されるモンスターを死亡にする\n        alive[defender-1] = False\n        # 生きているモンスターの数をデクリメント\n        alive_num -= 1\n\n    # 攻撃を行った回数をインクリメント\n    attack_count += 1\n\n# 最後に生き残ったモンスターの体力を出力\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n', '\n\nimport random\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# 初期化\n# 各モンスターの名前\nmonsters = list(range(1, n+1))\n# 各モンスターの体力\nhealth = [a for a in A]\n# 各モンスターの生死\nalive = [True for _ in range(n)]\n# 各モンスターが攻撃した回数\nattack_num = [0 for _ in range(n)]\n\n# 生きているモンスターの数\nalive_num = n\n# 攻撃を行った回数\nattack_count = 0\n\nwhile alive_num > 1:\n    # 攻撃するモンスターを選択\n    attacker = random.choice(monsters)\n    # 攻撃されるモンスターを選択\n    defender = random.choice(monsters)\n\n    # 攻撃と防御が同じモンスターであった場合、攻撃を繰り返す\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # 攻撃するモンスターの攻撃回数をインクリメント\n    attack_num[attacker-1] += 1\n\n    # 攻撃されるモンスターの体力を減らす\n    health[defender-1] -= health[attacker-1]\n\n    # 攻撃されるモンスターの体力が0以下になった場合\n    if health[defender-1] <= 0:\n        # 攻撃されるモンスターを死亡にする\n        alive[defender-1] = False\n        # 生きているモンスターの数をデクリメント\n        alive_num -= 1\n\n    # 攻撃を行った回数をインクリメント\n    attack_count += 1\n\n# 最後に生き残ったモンスターの体力を出力\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n', 'import sys\nsys.setrecursionlimit(10**6)\n\nimport itertools\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# 1つ目の袋を空にする\na.append(0)\n# 2つ目の袋を空にする\nb.append(0)\n\n# 生きているモンスターの数\nalive_num = n\n# 攻撃を行った回数\nattack_count = 0\n\nwhile alive_num > 1:\n    # 攻撃するモンスターを選択\n    attacker = random.choice(monsters)\n    # 攻撃されるモンスターを選択\n    defender = random.choice(monsters)\n\n    # 攻撃と防御が同じモンスターであった場合、攻撃を繰り返す\n    while attacker == defender:\n        defender = random.choice(monsters)\n\n    # 攻撃するモンスターの攻撃回数をインクリメント\n    attack_num[attacker-1] += 1\n\n    # 攻撃されるモンスターの体力を減らす\n    health[defender-1] -= health[attacker-1]\n\n    # 攻撃されるモンスターの体力が0以下になった場合\n    if health[defender-1] <= 0:\n        # 攻撃されるモンスターを死亡にする\n        alive[defender-1] = False\n        # 生きているモンスターの数をデクリメント\n        alive_num -= 1\n\n    # 攻撃を行った回数をインクリメント\n    attack_count += 1\n\n# 最後に生き残ったモンスターの体力を出力\nfor i in range(n):\n    if alive[i]:\n        print(health[i])\n']
2022-04-19 21:27:09.375219 size on output set 4
2022-04-19 21:27:09.375232 num operations 1
2022-04-19 21:27:09.375240 size on input set 1
2022-04-19 21:27:09.375411 using api key soukgp
2022-04-19 21:27:21.151835 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n"
    },
    {
      "index": 1,
      "text": "\n# My Solution\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n"
    },
    {
      "index": 2,
      "text": "\n# My Solution\nimport random\nn = int(input())\na = list(map(int, input().split()))\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n"
    },
    {
      "index": 3,
      "text": "\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n"
    },
    {
      "index": 4,
      "text": "\n# My Solution\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a) - 1)\n    victim = random.randint(0, len(a) - 1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n"
    },
    {
      "index": 5,
      "text": "\n# My Solution\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n"
    },
    {
      "index": 6,
      "text": "\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n"
    },
    {
      "index": 7,
      "text": "\n# My Solution\nimport random\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n"
    }
  ],
  "created": 1650403629,
  "object": "edit"
}
2022-04-19 21:27:21.152146 fix syntax errors 8 ['\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n', '\n# My Solution\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n', '\n# My Solution\nimport random\nn = int(input())\na = list(map(int, input().split()))\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n', '\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n', '\n# My Solution\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a) - 1)\n    victim = random.randint(0, len(a) - 1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n', '\n# My Solution\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n', '\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n', '\n# My Solution\nimport random\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nwhile len(a) > 1:\n    a.sort()\n    attacker = random.randint(0, len(a)-1)\n    victim = random.randint(0, len(a)-1)\n    if a[attacker] > a[victim]:\n        a[victim] = 0\n        a = [i for i in a if i != 0]\n    else:\n        a[attacker] = 0\n        a = [i for i in a if i != 0]\nprint(a[0])\n']
2022-04-19 21:27:21.152195 size on output set 5
