2022-04-19 20:47:34.588694 num operations 1
2022-04-19 20:47:34.588735 size on input set 1
2022-04-19 20:47:34.588904 using api key jaanu
2022-04-19 20:48:21.465056 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy import linalg\n\n\n\ndef main():\n    N, K = map(int, input().split())\n    A = np.array([int(input()) for _ in range(N)])\n    B = np.array([int(input()) for _ in range(N)])\n    C = np.array([int(input()) for _ in range(N)])\n    D = np.array([int(input()) for _ in range(N)])\n    E = np.array([int(input()) for _ in range(N)])\n    F = np.array([int(input()) for _ in range(N)])\n    # print(A)\n    # print(B)\n    # print(C)\n    # print(D)\n    # print(E)\n    # print(F)\n    A_sum = np.sum(A)\n    B_sum = np.sum(B)\n    C_sum = np.sum(C)\n    D_sum = np.sum(D)\n    E_sum = np.sum(E)\n    F_sum = np.sum(F)\n    # print(A_sum)\n    # print(B_sum)\n    # print(C_sum)\n    # print(D_sum)\n    # print(E_sum)\n    # print(F_sum)\n    A_ave = A_sum / N\n    B_ave = B_sum / N\n    C_ave = C_sum / N\n    D_ave = D_sum / N\n    E_ave = E_sum / N\n    F_ave = F_sum / N\n    # print(A_ave)\n    # print(B_ave)\n    # print(C_ave)\n    # print(D_ave)\n    # print(E_ave)\n    # print(F_ave)\n    A_var = np.var(A, ddof=1)\n    B_var = np.var(B, ddof=1)\n    C_var = np.var(C, ddof=1)\n    D_var = np.var(D, ddof=1)\n    E_var = np.var(E, ddof=1)\n    F_var = np.var(F, ddof=1)\n    # print(A_var)\n    # print(B_var)\n    # print(C_var)\n    # print(D_var)\n    # print(E_var)\n    # print(F_var)\n    cov_AB = np.cov(A, B, ddof=1)[0][1]\n    cov_AC = np.cov(A, C, ddof=1)[0][1]\n    cov_AD = np.cov(A, D, ddof=1)[0][1]\n    cov_AE = np.cov(A, E, ddof=1)[0][1]\n    cov_AF = np.cov(A, F, ddof=1)[0][1]\n    cov_BC = np.cov(B, C, ddof=1)[0][1]\n    cov_BD = np.cov(B, D, ddof=1)[0][1]\n    cov_BE = np.cov(B, E, ddof=1)[0][1]\n    cov_BF = np.cov(B, F, ddof=1)[0][1]\n    cov_CD = np.cov(C, D, ddof=1)[0][1]\n    cov_CE = np.cov(C, E, ddof=1)[0][1]\n    cov_CF = np.cov(C, F, ddof=1)[0][1]\n    cov_DE = np.cov(D, E, ddof=1)[0][1]\n    cov_DF = np.cov(D, F, ddof=1)[0][1]\n    cov_EF = np.cov(E, F, ddof=1)[0][1]\n    # print(cov_AB)\n    # print(cov_AC)\n    # print(cov_AD)\n    # print(cov_AE)\n    # print(cov_AF)\n    # print(cov_BC)\n    # print(cov_BD)\n    # print(cov_BE)\n    # print(cov_BF)\n    # print(cov_CD)\n    # print(cov_CE)\n    # print(cov_CF)\n    # print(cov_DE)\n    # print(cov_DF)\n    # print(cov_EF)\n    cov_matrix = np.array([[A_var, cov_AB, cov_AC, cov_AD, cov_AE, cov_AF],\n                           [cov_AB, B_var, cov_BC, cov_BD, cov_BE, cov_BF],\n                           [cov_AC, cov_BC, C_var, cov_CD, cov_CE, cov_CF],\n                           [cov_AD, cov_BD, cov_CD, D_var, cov_DE, cov_DF],\n                           [cov_AE, cov_BE, cov_CE, cov_DE, E_var, cov_EF],\n                           [cov_AF, cov_BF, cov_CF, cov_DF, cov_EF, F_var]])\n    # print(cov_matrix)\n    eig_val, eig_vec = linalg.eig(cov_matrix)\n    # print(eig_val)\n    # print(eig_vec)\n    eig_val_index = np.argsort(eig_val)[::-1]\n    # print(eig_val_index)\n    eig_vec_index = eig_vec[:, eig_val_index]\n    # print(eig_vec_index)\n    eig_vec_index_K = eig_vec_index[:, :K]\n    # print(eig_vec_index_K)\n    eig_vec_index_K_T = eig_vec_index_K.T\n    # print(eig_vec_index_K_T)\n    print(eig_vec_index_K_T.dot(np.array([A_ave, B_ave, C_ave, D_ave, E_ave, F_ave])))\n    # print(eig_vec_index_K_T.dot(np.array([A_ave, B_ave, C_ave, D_ave, E_ave, F_ave])))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "import numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "import numpy as np\n\ndef main():\n    n, m = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(m)]\n    dp = np.zeros((n + 1), dtype=np.int64)\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n    for i in broken_steps:\n        dp[i] = 0\n    for i in range(2, n + 1):\n        if i not in broken_steps:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n    print(dp[n])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split()) # \u6bb5\u6570\u3001\u58ca\u308c\u305f\u6bb5\n    broken_steps = [int(input()) for _ in range(M)] # \u58ca\u308c\u305f\u6bb5\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650401254,
  "object": "edit"
}
2022-04-19 20:48:21.465405 fix syntax errors 8 ['#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy import linalg\n\n\n\ndef main():\n    N, K = map(int, input().split())\n    A = np.array([int(input()) for _ in range(N)])\n    B = np.array([int(input()) for _ in range(N)])\n    C = np.array([int(input()) for _ in range(N)])\n    D = np.array([int(input()) for _ in range(N)])\n    E = np.array([int(input()) for _ in range(N)])\n    F = np.array([int(input()) for _ in range(N)])\n    # print(A)\n    # print(B)\n    # print(C)\n    # print(D)\n    # print(E)\n    # print(F)\n    A_sum = np.sum(A)\n    B_sum = np.sum(B)\n    C_sum = np.sum(C)\n    D_sum = np.sum(D)\n    E_sum = np.sum(E)\n    F_sum = np.sum(F)\n    # print(A_sum)\n    # print(B_sum)\n    # print(C_sum)\n    # print(D_sum)\n    # print(E_sum)\n    # print(F_sum)\n    A_ave = A_sum / N\n    B_ave = B_sum / N\n    C_ave = C_sum / N\n    D_ave = D_sum / N\n    E_ave = E_sum / N\n    F_ave = F_sum / N\n    # print(A_ave)\n    # print(B_ave)\n    # print(C_ave)\n    # print(D_ave)\n    # print(E_ave)\n    # print(F_ave)\n    A_var = np.var(A, ddof=1)\n    B_var = np.var(B, ddof=1)\n    C_var = np.var(C, ddof=1)\n    D_var = np.var(D, ddof=1)\n    E_var = np.var(E, ddof=1)\n    F_var = np.var(F, ddof=1)\n    # print(A_var)\n    # print(B_var)\n    # print(C_var)\n    # print(D_var)\n    # print(E_var)\n    # print(F_var)\n    cov_AB = np.cov(A, B, ddof=1)[0][1]\n    cov_AC = np.cov(A, C, ddof=1)[0][1]\n    cov_AD = np.cov(A, D, ddof=1)[0][1]\n    cov_AE = np.cov(A, E, ddof=1)[0][1]\n    cov_AF = np.cov(A, F, ddof=1)[0][1]\n    cov_BC = np.cov(B, C, ddof=1)[0][1]\n    cov_BD = np.cov(B, D, ddof=1)[0][1]\n    cov_BE = np.cov(B, E, ddof=1)[0][1]\n    cov_BF = np.cov(B, F, ddof=1)[0][1]\n    cov_CD = np.cov(C, D, ddof=1)[0][1]\n    cov_CE = np.cov(C, E, ddof=1)[0][1]\n    cov_CF = np.cov(C, F, ddof=1)[0][1]\n    cov_DE = np.cov(D, E, ddof=1)[0][1]\n    cov_DF = np.cov(D, F, ddof=1)[0][1]\n    cov_EF = np.cov(E, F, ddof=1)[0][1]\n    # print(cov_AB)\n    # print(cov_AC)\n    # print(cov_AD)\n    # print(cov_AE)\n    # print(cov_AF)\n    # print(cov_BC)\n    # print(cov_BD)\n    # print(cov_BE)\n    # print(cov_BF)\n    # print(cov_CD)\n    # print(cov_CE)\n    # print(cov_CF)\n    # print(cov_DE)\n    # print(cov_DF)\n    # print(cov_EF)\n    cov_matrix = np.array([[A_var, cov_AB, cov_AC, cov_AD, cov_AE, cov_AF],\n                           [cov_AB, B_var, cov_BC, cov_BD, cov_BE, cov_BF],\n                           [cov_AC, cov_BC, C_var, cov_CD, cov_CE, cov_CF],\n                           [cov_AD, cov_BD, cov_CD, D_var, cov_DE, cov_DF],\n                           [cov_AE, cov_BE, cov_CE, cov_DE, E_var, cov_EF],\n                           [cov_AF, cov_BF, cov_CF, cov_DF, cov_EF, F_var]])\n    # print(cov_matrix)\n    eig_val, eig_vec = linalg.eig(cov_matrix)\n    # print(eig_val)\n    # print(eig_vec)\n    eig_val_index = np.argsort(eig_val)[::-1]\n    # print(eig_val_index)\n    eig_vec_index = eig_vec[:, eig_val_index]\n    # print(eig_vec_index)\n    eig_vec_index_K = eig_vec_index[:, :K]\n    # print(eig_vec_index_K)\n    eig_vec_index_K_T = eig_vec_index_K.T\n    # print(eig_vec_index_K_T)\n    print(eig_vec_index_K_T.dot(np.array([A_ave, B_ave, C_ave, D_ave, E_ave, F_ave])))\n    # print(eig_vec_index_K_T.dot(np.array([A_ave, B_ave, C_ave, D_ave, E_ave, F_ave])))\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == "__main__":\n    main()\n', '\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == "__main__":\n    main()\n', 'import numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == "__main__":\n    main()\n', '\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == "__main__":\n    main()\n', 'import numpy as np\n\ndef main():\n    n, m = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(m)]\n    dp = np.zeros((n + 1), dtype=np.int64)\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n    for i in broken_steps:\n        dp[i] = 0\n    for i in range(2, n + 1):\n        if i not in broken_steps:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n    print(dp[n])\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split()) # 段数、壊れた段\n    broken_steps = [int(input()) for _ in range(M)] # 壊れた段\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == "__main__":\n    main()\n', '\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-19 20:48:21.465594 size on output set 5
2022-04-19 20:48:21.465607 num operations 1
2022-04-19 20:48:21.465613 size on input set 1
2022-04-19 20:48:21.465772 using api key sourya
2022-04-19 20:49:05.569236 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\n\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n"
    },
    {
      "index": 2,
      "text": "# https://www.acmicpc.net/problem/1520\n\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\nprint(dp[n] % 1000000007)\n"
    },
    {
      "index": 3,
      "text": "\nn = input()\nprint(int(n[0]) + int(n[1]))\n"
    },
    {
      "index": 4,
      "text": "\n\nn, m = map(int, input().split())\ncoins = [int(input()) for _ in range(m)]\n\ndp = [0] * (n + 1)\ndp[0] = 1 # \uc815\ub2f5\uc774 1\uac1c \ub098\uc62c \uc218 \uc788\ub2e4.\n\nfor coin in coins:\n    for i in range(coin, n+1):\n        dp[i] += dp[i - coin]\n\nprint(dp[n])\n"
    },
    {
      "index": 5,
      "text": "\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n + 1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n + 1):\n    if i in broken:\n        continue\n    dp[i] = dp[i - 1] + dp[i - 2]\n\nprint(dp[n] % 1000000007)\n"
    },
    {
      "index": 6,
      "text": "\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n"
    },
    {
      "index": 7,
      "text": "\n\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i not in broken:\n        dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n"
    }
  ],
  "created": 1650401301,
  "object": "edit"
}
2022-04-19 20:49:05.569540 fix syntax errors 8 ['\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n', '#!/usr/bin/python3\n\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n', '# https://www.acmicpc.net/problem/1520\n\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n\n# https://www.acmicpc.net/problem/1520\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\nprint(dp[n] % 1000000007)\n', '\nn = input()\nprint(int(n[0]) + int(n[1]))\n', '\n\nn, m = map(int, input().split())\ncoins = [int(input()) for _ in range(m)]\n\ndp = [0] * (n + 1)\ndp[0] = 1 # 정답이 1개 나올 수 있다.\n\nfor coin in coins:\n    for i in range(coin, n+1):\n        dp[i] += dp[i - coin]\n\nprint(dp[n])\n', '\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n + 1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n + 1):\n    if i in broken:\n        continue\n    dp[i] = dp[i - 1] + dp[i - 2]\n\nprint(dp[n] % 1000000007)\n', '\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n', '\n\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i not in broken:\n        dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n']
2022-04-19 20:49:05.569703 size on output set 7
