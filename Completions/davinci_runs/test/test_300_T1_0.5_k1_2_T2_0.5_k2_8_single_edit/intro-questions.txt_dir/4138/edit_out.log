2022-04-19 21:29:43.916062 num operations 1
2022-04-19 21:29:43.916072 size on input set 1
2022-04-19 21:29:43.916219 using api key soukgp
2022-04-19 21:30:00.142153 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length)//2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k - 1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    },
    {
      "index": 1,
      "text": "\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1 + (int(((8*k + 1)**0.5 - 1) / 2))\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    },
    {
      "index": 2,
      "text": "\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length + 1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k - 1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    },
    {
      "index": 3,
      "text": "#------------------------------------------------------------------------------#\n\n\ndef solve(n, m, k):\n    pass\n\n#------------------------------------------------------------------------------#\n\n# Read input\nn, m, k = map(int, input().split())\n\n# Solve problem\nsolve(n, m, k)\n"
    },
    {
      "index": 4,
      "text": "\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    pass\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    },
    {
      "index": 5,
      "text": "\n\n# ------------------------------------------------------------------------------\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length + 1) ** 2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length ** 2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k - 1])\n\n# ------------------------------------------------------------------------------\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    },
    {
      "index": 6,
      "text": "\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length)//2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    },
    {
      "index": 7,
      "text": "\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length + 1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    }
  ],
  "created": 1650403784,
  "object": "edit"
}
2022-04-19 21:30:00.142494 fix syntax errors 8 ['\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length)//2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k - 1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n', '\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1 + (int(((8*k + 1)**0.5 - 1) / 2))\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n', '\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length + 1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k - 1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n', '#------------------------------------------------------------------------------#\n\n\ndef solve(n, m, k):\n    pass\n\n#------------------------------------------------------------------------------#\n\n# Read input\nn, m, k = map(int, input().split())\n\n# Solve problem\nsolve(n, m, k)\n', '\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    pass\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n', '\n\n# ------------------------------------------------------------------------------\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length + 1) ** 2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length ** 2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k - 1])\n\n# ------------------------------------------------------------------------------\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n', '\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length)//2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n', '\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length + 1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n']
2022-04-19 21:30:00.142729 size on output set 8
