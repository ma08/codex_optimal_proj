2022-04-19 23:01:57.236513 num operations 1
2022-04-19 23:01:57.236527 size on input set 1
2022-04-19 23:01:57.236673 using api key sourya
2022-04-19 23:02:13.775701 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= 2 * D + 1:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math \n \ndef main():\n    N, K = map(int, input().split())\n    print(math.ceil(N / K))\n \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil((N - 1) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "import math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport numpy as np\nfrom scipy.sparse.csgraph import dijkstra\n\ndef main():\n    N, D = map(int, input().split())\n    L, R = [], []\n    for i in range(D):\n        l, r = map(int, input().split())\n        L.append(l - 1)\n        R.append(r - 1)\n    graph = np.full((N, N), 10 ** 9)\n    for i in range(N):\n        graph[i][i] = 0\n    for i in range(D):\n        graph[L[i]][R[i]] = 1\n        graph[R[i]][L[i]] = 1\n    dists = dijkstra(graph, directed=False)\n    all_sum = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            all_sum += dists[i][j]\n    for i in range(D):\n        print(all_sum - dists[L[i]][R[i]])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "import math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650409317,
  "object": "edit"
}
2022-04-19 23:02:13.776020 fix syntax errors 8 ['import math\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= 2 * D + 1:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport math \n \ndef main():\n    N, K = map(int, input().split())\n    print(math.ceil(N / K))\n \nif __name__ == "__main__":\n    main()\n', '\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil((N - 1) / (2 * D + 1)) + 1)\n\nif __name__ == "__main__":\n    main()\n', 'import math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport numpy as np\nfrom scipy.sparse.csgraph import dijkstra\n\ndef main():\n    N, D = map(int, input().split())\n    L, R = [], []\n    for i in range(D):\n        l, r = map(int, input().split())\n        L.append(l - 1)\n        R.append(r - 1)\n    graph = np.full((N, N), 10 ** 9)\n    for i in range(N):\n        graph[i][i] = 0\n    for i in range(D):\n        graph[L[i]][R[i]] = 1\n        graph[R[i]][L[i]] = 1\n    dists = dijkstra(graph, directed=False)\n    all_sum = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            all_sum += dists[i][j]\n    for i in range(D):\n        print(all_sum - dists[L[i]][R[i]])\n\nif __name__ == "__main__":\n    main()\n', 'import math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-19 23:02:13.776065 size on output set 7
2022-04-19 23:02:13.776076 num operations 1
2022-04-19 23:02:13.776082 size on input set 1
2022-04-19 23:02:13.776268 using api key jaanu
2022-04-19 23:02:25.790173 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, D = map(int, input().split())\n\nprint((N+D*2)//(D*2+1))\n"
    },
    {
      "index": 1,
      "text": "\n\nN, D = map(int, input().split())\nprint(N//(D*2+1))\n"
    },
    {
      "index": 2,
      "text": "\nN, D = map(int, input().split())\n\nprint(N//(D*2+1))\n"
    },
    {
      "index": 3,
      "text": "\nN, D = map(int, input().split())\n\nprint(N//(D*2+1))\n"
    },
    {
      "index": 4,
      "text": "\n\nN, D = map(int, input().split())\n\nprint(N//(D*2+1)+(1 if N%(D*2+1) != 0 else 0))\n"
    },
    {
      "index": 5,
      "text": "\n\nN, D = map(int, input().split())\n\nprint(N // (D * 2 + 1))\n"
    },
    {
      "index": 6,
      "text": "\n\nN, D = map(int, input().split()) #N is the number of ants, D is the length of the stick\n\nprint(N//(D*2+1)) #the number of ants on the stick is the number of ants divided by the length of the stick\n"
    },
    {
      "index": 7,
      "text": "\n\nN, D = map(int, input().split())\n\nprint((N+D*2)//(D*2+1))\n"
    }
  ],
  "created": 1650409333,
  "object": "edit"
}
2022-04-19 23:02:25.790478 fix syntax errors 8 ['\n\nN, D = map(int, input().split())\n\nprint((N+D*2)//(D*2+1))\n', '\n\nN, D = map(int, input().split())\nprint(N//(D*2+1))\n', '\nN, D = map(int, input().split())\n\nprint(N//(D*2+1))\n', '\nN, D = map(int, input().split())\n\nprint(N//(D*2+1))\n', '\n\nN, D = map(int, input().split())\n\nprint(N//(D*2+1)+(1 if N%(D*2+1) != 0 else 0))\n', '\n\nN, D = map(int, input().split())\n\nprint(N // (D * 2 + 1))\n', '\n\nN, D = map(int, input().split()) #N is the number of ants, D is the length of the stick\n\nprint(N//(D*2+1)) #the number of ants on the stick is the number of ants divided by the length of the stick\n', '\n\nN, D = map(int, input().split())\n\nprint((N+D*2)//(D*2+1))\n']
2022-04-19 23:02:25.790512 size on output set 6
