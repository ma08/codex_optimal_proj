["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    print(\"Hello World!\")\n    print(\"This is Python version {}.{}.{}\".format(sys.version_info.major, sys.version_info.minor, sys.version_info.micro))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\n#define MAX_SIZE 1024\n\nint main(int argc, char **argv)\n{\n\tint fd;\n\tchar buf[MAX_SIZE];\n\tint ret;\n\tchar *file_name;\n\tint flags;\n\tmode_t mode;\n\n\tif (argc < 2) {\n\t\tfprintf(stderr, \"Usage: %s file_name\\n\", argv[0]);\n\t\texit(1);\n\t}\n\n\tfile_name = argv[1];\n\tflags = O_WRONLY | O_CREAT | O_TRUNC;\n\tmode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;\n\n\tfd = open(file_name, flags, mode);\n\tif (fd < 0) {\n\t\tfprintf(stderr, \"open() failed\\n\");\n\t\texit(1);\n\t}\n\n\twhile (1) {\n\t\tret = read(STDIN_FILENO, buf, MAX_SIZE);\n\t\tif (ret == 0)\n\t\t\tbreak;\n\t\twrite(fd, buf, ret);\n\t}\n\n\tclose(fd);\n\treturn 0;\n}\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define FILENAME \"A-large-practice.in\"\n\nint main()\n{\n\tFILE *fp = fopen(FILENAME, \"r\");\n\tFILE *fp_out = fopen(\"output.txt\",\"w\");\n\tint t, n, s, p, i, j, k, score, num_surprise, num_pass;\n\tint *scores;\n\tfscanf(fp, \"%d\", &t);\n\tfor(i=0; i<t; i++)\n\t{\n\t\tfscanf(fp, \"%d %d %d\", &n, &s, &p);\n\t\tscores = (int *)malloc(sizeof(int)*n);\n\t\tfor(j=0; j<n; j++)\n\t\t{\n\t\t\tfscanf(fp, \"%d\", &scores[j]);\n\t\t}\n\t\tnum_pass = 0;\n\t\tnum_surprise = 0;\n\t\tfor(j=0; j<n; j++)\n\t\t{\n\t\t\tscore = scores[j];\n\t\t\tif(score % 3 == 0)\n\t\t\t{\n\t\t\t\tif(score/3 >= p)\n\t\t\t\t{\n\t\t\t\t\tnum_pass++;\n\t\t\t\t}\n\t\t\t\telse if(score/3 >= p-1 && score/3 > 0 && s > 0)\n\t\t\t\t{\n\t\t\t\t\tnum_pass++;\n\t\t\t\t\tnum_surprise++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(score % 3 == 1)\n\t\t\t{\n\t\t\t\tif(score/3 + 1 >= p)\n\t\t\t\t{\n\t\t\t\t\tnum_pass++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(score/3 + 1 >= p)\n\t\t\t\t{\n\t\t\t\t\tnum_pass++;\n\t\t\t\t}\n\t\t\t\telse if(score/3 + 2 >= p && s > 0)\n\t\t\t\t{\n\t\t\t\t\tnum_pass++;\n\t\t\t\t\tnum_surprise++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfprintf(fp_out, \"Case #%d: %d\\n\", i+1, num_pass);\n\t}\n\tfclose(fp);\n\tfclose(fp_out);\n\treturn 0;\n}\n", "#!/usr/bin/python\n\nimport re\nimport os\nimport sys\nimport subprocess\n\n# This script is to extract the number of the last commit\n# from the file \"commit.txt\" and then to compare with the\n# number of the commit of the current commit.\n# If the current commit is newer, the script will do the\n# following things:\n#   1. update the file \"commit.txt\" with the number of\n#      the current commit\n#   2. update the file \"commit_date.txt\" with the date\n#      of the current commit\n#   3. update the file \"commit_author.txt\" with the author\n#      of the current commit\n#   4. update the file \"commit_message.txt\" with the message\n#      of the current commit\n#   5. update the file \"commit_files.txt\" with the files\n#      of the current commit\n#   6. update the file \"commit_link.txt\" with the link of\n#      the current commit\n# If the current commit is not newer, the script will do\n# nothing.\n\n# get the number of the last commit\nf = open('commit.txt', 'r')\nlast_commit = f.readline()\nf.close()\n\n# get the number of the current commit\ncurrent_commit = subprocess.check_output([\"git\", \"rev-parse\", \"HEAD\"])\n\n# get the date of the current commit\ncurrent_date = subprocess.check_output([\"git\", \"log\", \"-1\", \"--format=%cd\"])\n\n# get the author of the current commit\ncurrent_author = subprocess.check_output([\"git\", \"log\", \"-1\", \"--format=%an\"])\n\n# get the message of the current commit\ncurrent_message = subprocess.check_output([\"git\", \"log\", \"-1\", \"--format=%B\"])\n\n# get the files of the current commit\ncurrent_files = subprocess.check_output([\"git\", \"log\", \"-1\", \"--name-only\", \"--format=%B\"])\n\n# get the link of the current commit\ncurrent_link = subprocess.check_output([\"git\", \"log\", \"-1\", \"--format=%H\"])\n\n# remove the '\\n' at the end of the strings\nlast_commit = last_commit.rstrip()\ncurrent_commit = current_commit.rstrip()\ncurrent_date = current_date.rstrip()\ncurrent_author = current_author.rstrip()\ncurrent_message = current_message.rstrip()\ncurrent_files = current_files.rstrip()\ncurrent_link = current_link.rstrip()\n\n# compare the current commit with the last commit\nif current_commit != last_commit:\n    # update the file \"commit.txt\" with the number of the current commit\n    f = open('commit.txt', 'w')\n    f.write(current_commit)\n    f.close()\n    # update the file \"commit_date.txt\" with the date of the current commit\n    f = open('commit_date.txt', 'w')\n    f.write(current_date)\n    f.close()\n    # update the file \"commit_author.txt\" with the author of the current commit\n    f = open('commit_author.txt', 'w')\n    f.write(current_author)\n    f.close()\n    # update the file \"commit_message.txt\" with the message of the current commit\n    f = open('commit_message.txt', 'w')\n    f.write(current_message)\n    f.close()\n    # update the file \"commit_files.txt\" with the files of the current commit\n    f = open('commit_files.txt', 'w')\n    f.write(current_files)\n    f.close()\n    # update the file \"commit_link.txt\" with the link of the current commit\n    f = open('commit_link.txt', 'w')\n    f.write(current_link)\n    f.close()\n\n\n", "\n\n\ndef main():\n    N, M = map(int, input().split())\n    print(N * M)\n\n\nif __name__ == '__main__':\n    main()\n", "const fs = require('fs');\n\nconst file = fs.createWriteStream('big.file');\n\nfor(let i = 0; i <= 1e6; i++) {\n  file.write('Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n');\n}\n\nfile.end();\n", "var fs = require('fs');\n\nfs.readFile('./file.txt', function(err, data){\n  if(err){\n    throw err;\n  }\n  console.log(data.toString());\n});\n\nconsole.log('this will be executed before the readFile callback');\n", "const fs = require('fs');\n\nconst file = fs.createWriteStream('./big.file');\n\nfor (let i = 0; i <= 1e6; i++) {\n  file.write('Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n');\n}\n\nfile.end();\n", "\n\ndef main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n"]