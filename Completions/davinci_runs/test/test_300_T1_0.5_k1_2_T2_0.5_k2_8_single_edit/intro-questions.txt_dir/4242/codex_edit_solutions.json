["import math\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return list(set(factors))\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\ndef main():\n    A, B, K = map(int, input().split())\n    print(find_num(A, B, K))\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\na, b, k = map(int, input().split())\ng = gcd(a, b)\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "import math\n\nA, B, K = map(int, input().split())\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\ndef find_num(A, B, k):\n    common_factors = list(set(factorization(A)) & set(factorization(B)))\n    return common_factors[k][0]\n\nprint(find_num(A, B, K-1))\n", "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\nA_factors = prime_factorization(A)\nB_factors = prime_factorization(B)\ncommon_factors = list(set(A_factors) & set(B_factors))\nprint(common_factors[-K])\n", "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n != 1:\n        factors.append(n)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n", "\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "import math\n\nA, B, K = map(int, input().split())  # A, B, K = 4, 10, 3\n\ndef prime_factorization(n):\n    factors = []  # factors = [2, 2]\n    for i in range(2, int(math.sqrt(n)) + 1):  # i = 2, 3, 4\n        while n % i == 0:  # n = 4, 2, 1\n            n //= i  # n = 2, 1\n            factors.append(i)  # factors = [2, 2]\n    return factors  # factors = [2, 2]\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)  # A_factors = [2, 2]\n    B_factors = prime_factorization(B)  # B_factors = [2, 5]\n    common_factors = list(set(A_factors) & set(B_factors))  # common_factors = [2]\n    return common_factors[-K]  # return 2\n\nprint(find_num(A, B, K))\n", "import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n", "\nimport math\n\nA, B, K = map(int, input().split())\n\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):  # \u30eb\u30fc\u30c8n\u307e\u3067\u8abf\u3079\u308c\u3070\u5341\u5206\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\n\nprint(find_num(A, B, K))\n", "\n\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# a, b, k = map(int, input().split())\n\n# g = gcd(a, b)\n\ndivisors = []\n# for i in range(1, int(math.sqrt(g)) + 1):\n#     if g % i == 0:\n#         divisors.append(i)\n#         if i != g // i:\n#             divisors.append(g // i)\n\n# divisors.sort(reverse=True)\n\n# print(divisors[k - 1])\n", "\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a, b, k = map(int, input().split())\n\n    g = gcd(a, b)\n\n    divisors = []\n    for i in range(1, int(math.sqrt(g)) + 1):\n        if g % i == 0:\n            divisors.append(i)\n            if i != g // i:\n                divisors.append(g // i)\n\n    divisors.sort(reverse=True)\n\n    print(divisors[k - 1])\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "import math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef find_prime_factors(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = find_prime_factors(A)\n    B_factors = find_prime_factors(B)\n    common_factors = list(set(A_factors) & set(B_factors)) # list(set(A_factors).intersection(set(B_factors)))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n"]