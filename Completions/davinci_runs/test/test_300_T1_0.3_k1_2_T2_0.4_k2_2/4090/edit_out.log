2022-04-19 00:57:56.964045 num operations 1
2022-04-19 00:57:56.964068 size on input set 1
2022-04-19 00:57:59.118048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    }
  ],
  "created": 1650329877,
  "object": "edit"
}
2022-04-19 00:57:59.118274 fix syntax errors 2 ["\n\nfrom collections import defaultdict\nfrom typing import List\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n", "\n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"]
2022-04-19 00:57:59.118306 size on output set 2
