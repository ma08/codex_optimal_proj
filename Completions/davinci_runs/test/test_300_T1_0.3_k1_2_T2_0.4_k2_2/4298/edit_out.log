2022-04-19 01:26:28.916398 num operations 1
2022-04-19 01:26:28.916417 size on input set 1
2022-04-19 01:26:31.971285 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n"
    },
    {
      "index": 1,
      "text": "\nimport math\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nprint(math.ceil(N/(2*D+1)))\n"
    }
  ],
  "created": 1650331589,
  "object": "edit"
}
2022-04-19 01:26:31.971510 fix syntax errors 2 ['\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n', '\nimport math\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nprint(math.ceil(N/(2*D+1)))\n']
2022-04-19 01:26:31.971552 size on output set 2
2022-04-19 01:26:31.971563 num operations 1
2022-04-19 01:26:31.971569 size on input set 1
2022-04-19 01:26:36.060161 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n"
    },
    {
      "index": 1,
      "text": "\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of\n# trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost\n# tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n"
    }
  ],
  "created": 1650331592,
  "object": "edit"
}
2022-04-19 01:26:36.060350 fix syntax errors 2 ['\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n', '\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of\n# trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost\n# tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n']
2022-04-19 01:26:36.060375 size on output set 2
