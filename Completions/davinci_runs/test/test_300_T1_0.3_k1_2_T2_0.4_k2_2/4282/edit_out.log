2022-04-19 01:24:01.420608 num operations 1
2022-04-19 01:24:01.420629 size on input set 1
2022-04-19 01:24:04.647255 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\n\ndef solve(n, a):\n    graph = defaultdict(list)\n    for i in range(n):\n        graph[a[i][0]].append(a[i][1])\n        graph[a[i][1]].append(a[i][0])\n    for i in range(1, n+1):\n        if len(graph[i]) != 2:\n            start = i\n            break\n    res = [start]\n    curr = start\n    while True:\n        for i in graph[curr]:\n            if i not in res:\n                res.append(i)\n                curr = i\n                break\n        else:\n            break\n    return res\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    print(*solve(n, a))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import defaultdict\n\ndef solve(n, a):\n    graph = defaultdict(list)\n    for i in range(n):\n        graph[a[i][0]].append(a[i][1])\n        graph[a[i][1]].append(a[i][0])\n    for i in range(1, n + 1):\n        if len(graph[i]) != 2:\n            start = i\n            break\n    else:\n        start = 1\n    res = [start]\n    curr = start\n    while len(res) != n:\n        for i in graph[curr]:\n            if i not in res:\n                res.append(i)\n                curr = i\n                break\n    return res\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split()))\n    print(*solve(n, a))\n"
    }
  ],
  "created": 1650331441,
  "object": "edit"
}
2022-04-19 01:24:04.647505 fix syntax errors 2 ['\n\nfrom collections import defaultdict\n\ndef solve(n, a):\n    graph = defaultdict(list)\n    for i in range(n):\n        graph[a[i][0]].append(a[i][1])\n        graph[a[i][1]].append(a[i][0])\n    for i in range(1, n+1):\n        if len(graph[i]) != 2:\n            start = i\n            break\n    res = [start]\n    curr = start\n    while True:\n        for i in graph[curr]:\n            if i not in res:\n                res.append(i)\n                curr = i\n                break\n        else:\n            break\n    return res\n\nif __name__ == "__main__":\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    print(*solve(n, a))\n', '\n\nfrom collections import defaultdict\n\ndef solve(n, a):\n    graph = defaultdict(list)\n    for i in range(n):\n        graph[a[i][0]].append(a[i][1])\n        graph[a[i][1]].append(a[i][0])\n    for i in range(1, n + 1):\n        if len(graph[i]) != 2:\n            start = i\n            break\n    else:\n        start = 1\n    res = [start]\n    curr = start\n    while len(res) != n:\n        for i in graph[curr]:\n            if i not in res:\n                res.append(i)\n                curr = i\n                break\n    return res\n\nif __name__ == "__main__":\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split()))\n    print(*solve(n, a))\n']
2022-04-19 01:24:04.647543 size on output set 2
