2022-04-19 01:23:42.038529 num operations 1
2022-04-19 01:23:42.038549 size on input set 1
2022-04-19 01:23:45.026257 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k) % 10)\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k))\n\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650331422,
  "object": "edit"
}
2022-04-19 01:23:45.026504 fix syntax errors 2 ["import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k) % 10)\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        print(get_digit(k))\n\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    else:\n        block_num = get_block_num(k)\n        block_start = get_block_start(block_num)\n        block_end = get_block_end(block_num)\n        block_length = block_end - block_start + 1\n        block_offset = k - block_start\n        digit = block_offset % block_length\n        return digit + 1\n\n\ndef get_block_num(k):\n    return int(math.ceil(math.sqrt(2 * k)))\n\n\ndef get_block_start(block_num):\n    return (block_num - 1) * block_num // 2 + 1\n\n\ndef get_block_end(block_num):\n    return block_num * (block_num + 1) // 2\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-19 01:23:45.026541 size on output set 2
