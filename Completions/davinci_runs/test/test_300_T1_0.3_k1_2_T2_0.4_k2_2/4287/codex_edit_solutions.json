["\nimport sys\n\n\ndef solve(a, n, m, rain, umbrellas, k):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (k + 1)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, k + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (k + 1)\n    for i in range(1, k + 1):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(k - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[k] == sys.maxsize:\n        return -1\n    return dp[k]\n\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    k = max(map(lambda x: x[1], rain))\n    print(solve(a, n, m, rain, umbrellas, k))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n", "import math\n\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1) # r[i] is the number of raindrops that fall on the i-th street\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1) # dp[i] is the minimum cost to reach the i-th street\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a] == math.inf:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()\n"]