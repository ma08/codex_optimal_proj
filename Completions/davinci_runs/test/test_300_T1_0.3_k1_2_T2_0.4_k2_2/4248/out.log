2022-04-18 21:40:15.688081 """
-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of points on a plane.

Each of the next n lines contains two real coordinates x_{i} and y_{i} of the $i^{\text{th}}$ point, specified with exactly 2 fractional digits. All coordinates are between  - 1000 and 1000, inclusive.


-----Output-----

Output a single real number θ — the answer to the problem statement. The absolute or relative error of your answer should be at most 10^{ - 2}.


-----Examples-----
Input
8
-2.14 2.06
-1.14 2.04
-2.16 1.46
-2.14 0.70
-1.42 0.40
-0.94 -0.48
-1.42 -1.28
-2.16 -1.62

Output
5.410

Input
5
2.26 1.44
2.28 0.64
2.30 -0.30
1.58 0.66
3.24 0.66

Output
5.620

Input
8
6.98 2.06
6.40 1.12
5.98 0.24
5.54 -0.60
7.16 0.30
7.82 1.24
8.34 0.24
8.74 -0.76

Output
5.480

Input
5
10.44 2.06
10.90 0.80
11.48 -0.48
12.06 0.76
12.54 2.06

Output
6.040

Input
8
16.94 2.42
15.72 2.38
14.82 1.58
14.88 0.50
15.76 -0.16
16.86 -0.20
17.00 0.88
16.40 0.92

Output
6.040

Input
7
20.62 3.00
21.06 2.28
21.56 1.36
21.66 0.56
21.64 -0.52
22.14 2.32
22.62 3.04

Output
6.720
"""
2022-04-18 21:40:15.688112 --------------------------
2022-04-18 21:41:41.533173 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef main():\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([float(x) for x in input().split()])\n\n    angles = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle = math.atan2(points[j][1] - points[i][1], points[j][0] - points[i][0])\n            angles.append(angle)\n\n    angles.sort()\n    angles.append(angles[0] + 2 * math.pi)\n\n    max_angle = 0\n    for i in range(n):\n        angle = angles[i + 1] - angles[i]\n        if angle > max_angle:\n            max_angle = angle\n\n    print(math.degrees(max_angle))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef get_angle(x1, y1, x2, y2):\n    return math.atan2(y2 - y1, x2 - x1)\n\ndef get_min_angle(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))\n\ndef get_max_angle(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))\n\ndef get_min_max_angle(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))\n\ndef get_min_max_angle_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]\n\ndef get_min_max_angle_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]\n\ndef get_min_max_angle_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]\n\ndef get_min_max_angle_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]\n\ndef get_min_max_angle_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]]]]]\n"
    }
  ],
  "created": 1650318015,
  "id": "cmpl-4yTOR2u95Pubv1tn6otmubMyZLNEm",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 21:41:41.533575 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef main():\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([float(x) for x in input().split()])\n\n    angles = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle = math.atan2(points[j][1] - points[i][1], points[j][0] - points[i][0])\n            angles.append(angle)\n\n    angles.sort()\n    angles.append(angles[0] + 2 * math.pi)\n\n    max_angle = 0\n    for i in range(n):\n        angle = angles[i + 1] - angles[i]\n        if angle > max_angle:\n            max_angle = angle\n\n    print(math.degrees(max_angle))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 21:41:41.533622 REASON stop
2022-04-18 21:41:41.547922 1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef get_angle(x1, y1, x2, y2):\n    return math.atan2(y2 - y1, x2 - x1)\n\ndef get_min_angle(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))\n\ndef get_max_angle(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))\n\ndef get_min_max_angle(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))\n\ndef get_min_max_angle_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]\n\ndef get_min_max_angle_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]\n\ndef get_min_max_angle_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]\n\ndef get_min_max_angle_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]\n\ndef get_min_max_angle_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]]]]\n\ndef get_min_max_angle_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list(x1, y1, x2, y2, x3, y3):\n    angle1 = get_angle(x1, y1, x2, y2)\n    angle2 = get_angle(x1, y1, x3, y3)\n    return [[[[[[[[[[[[[[[[[min(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2)), max(abs(angle1 - angle2), 2 * math.pi - abs(angle1 - angle2))]]]]]]]]]]]]]]]]]\n"
}
2022-04-18 21:41:41.548065 REASON length
