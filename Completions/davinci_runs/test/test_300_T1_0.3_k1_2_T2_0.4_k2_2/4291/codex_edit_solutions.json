["\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\n# create a list of the indices of where A occurs\na_indices = []\nfor i in range(n):\n    if a[i] == 1:\n        a_indices.append(i)\n\n# for each query, find the number of As in the substring\nfor i in range(m):\n    l, r = map(int, input().split()) - 1\n    print(a_indices[r] - a_indices[l] + 1)\n", "\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N-1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in ans:\n    print(i)\n", "\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N-1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "# https://atcoder.jp/contests/abc155/tasks/abc155_d\n# D - Handshake\nimport bisect\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\n# create a list of the number of pairs\npairs = []\nfor i in range(n):\n    for j in range(i+1, n):\n        pairs.append(a[i] * a[j])\npairs.sort()\n\n# find the kth largest pair\nprint(pairs[k-1])\n"]