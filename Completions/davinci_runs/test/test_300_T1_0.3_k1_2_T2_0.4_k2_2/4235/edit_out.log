2022-04-19 01:18:26.335472 num operations 1
2022-04-19 01:18:26.335493 size on input set 1
2022-04-19 01:18:35.745062 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.edges = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.edges[u].append(v)\n        self.edges[v].append(u)\n\n    def dfs(self, u, v):\n        if u == v:\n            return True\n        for w in self.edges[u]:\n            if w != v and self.dfs(w, v):\n                return True\n        return False\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    g = Graph(n, m)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        g.add_edge(u, v)\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and not g.dfs(u, v):\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for u in range(1, n + 1):\n        for v in g.edges[u]:\n            if v > u:\n                print(\"0\", end=\"\")\n            else:\n                print(\"1\", end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    g = Graph(n, m)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        g.add_edge(u, v)\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and not g.dfs(u, v):\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for u in range(1, n + 1):\n        for v in g.edges[u]:\n            if v > u:\n                print(\"0\", end=\"\")\n            else:\n                print(\"1\", end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650331106,
  "object": "edit"
}
2022-04-19 01:18:35.745278 fix syntax errors 2 ['\nimport sys\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.edges = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.edges[u].append(v)\n        self.edges[v].append(u)\n\n    def dfs(self, u, v):\n        if u == v:\n            return True\n        for w in self.edges[u]:\n            if w != v and self.dfs(w, v):\n                return True\n        return False\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    g = Graph(n, m)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        g.add_edge(u, v)\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and not g.dfs(u, v):\n                print("NO")\n                return\n    print("YES")\n    for u in range(1, n + 1):\n        for v in g.edges[u]:\n            if v > u:\n                print("0", end="")\n            else:\n                print("1", end="")\n    print()\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    g = Graph(n, m)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        g.add_edge(u, v)\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and not g.dfs(u, v):\n                print("NO")\n                return\n    print("YES")\n    for u in range(1, n + 1):\n        for v in g.edges[u]:\n            if v > u:\n                print("0", end="")\n            else:\n                print("1", end="")\n    print()\n\nif __name__ == "__main__":\n    main()\n']
2022-04-19 01:18:35.745315 size on output set 2
2022-04-19 01:18:35.745326 num operations 1
2022-04-19 01:18:35.745331 size on input set 1
2022-04-19 01:18:38.022483 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    print(\"YES\\n\", end=\"\")\n    for i in range(m):\n        if edges[i][0] < edges[i][1]:\n            print(\"0\", end=\"\")\n        else:\n            print(\"1\", end=\"\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    print(\"YES\")\n    for i in range(m):\n        if edges[i][0] < edges[i][1]:\n            print(\"0\", end=\"\")\n        else:\n            print(\"1\", end=\"\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650331115,
  "object": "edit"
}
2022-04-19 01:18:38.022670 fix syntax errors 2 ['\n\n\ndef main():\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    print("YES\\n", end="")\n    for i in range(m):\n        if edges[i][0] < edges[i][1]:\n            print("0", end="")\n        else:\n            print("1", end="")\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    print("YES")\n    for i in range(m):\n        if edges[i][0] < edges[i][1]:\n            print("0", end="")\n        else:\n            print("1", end="")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-19 01:18:38.022701 size on output set 2
