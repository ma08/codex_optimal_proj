["\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]  # prefectures[i] \u306f i \u756a\u76ee\u306e\u5730\u65b9\u306e\u5e02\u306e\u30ea\u30b9\u30c8\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))  # \u90fd\u5e02\u756a\u53f7\u3092\u5165\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5408\u308f\u305b\u3066\u51fa\u529b\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]  # prefectures[i] \u306f i \u756a\u76ee\u306e\u5730\u65b9\u306e\u5e02\u306e\u30ea\u30b9\u30c8\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "\nN = int(input())\nS = list(input())\nans = 0\nfor i in range(1, N):\n    if S[i] == S[i-1]:\n        ans += 1\nprint(ans)\n", "import math\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n    return True\n\n\nN, M = map(int, input().split())\n\nfor i in range(N+1):\n    if is_prime(i):\n        print(i)\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N + 1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N + 1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "from collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    # prefectures_cities = [[] for _ in range(N)]\n    prefectures_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefectures_cities[P].append(Y)\n    for P, cities in prefectures_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N + 1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N + 1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j + 1).zfill(6))\n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefectures_cities = [[] for _ in range(N)]\n    prefectures_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefectures_cities[P].append(Y)\n    for P, cities in prefectures_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "N, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "N, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N + 1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N + 1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "N, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N + 1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N + 1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j + 1).zfill(6))\n"]