["# \u5165\u529b\nimport sys\nN = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\n# \u89e3\u7b54 \nprint(sum(a))\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n# N, M = map(int, sys.stdin.readline().split())\nN, M = 2, 2\n\n# k_list = []\n# s_list = []\n# for i in range(M):\n#     k_list.append(int(sys.stdin.readline().split()[0]))\n#     s_list.append(list(map(int, sys.stdin.readline().split())))\n\n# p_list = list(map(int, sys.stdin.readline().split()))\n\nk_list = [1, 1]\ns_list = [[1], [2]]\np_list = [1, 0]\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\n# def make_light(state):\n#     # print(state)\n#     for i in range(M):\n#         odd_even = 0\n#         for j in range(k_list[i]):\n#             if state[s_list[i][j]-1] == 1:\n#                 odd_even += 1\n#         if odd_even % 2 != p_list[i]:\n#             return False\n#     return True\n\n# def make_state(state, n):\n#     if n == N:\n#         if make_light(state):\n#             return 1\n#         else:\n#             return 0\n#     else:\n#         return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\n# print(make_state([], 0))\n\ndef make_state(state, n):\n    if n == N:\n        print(state)\n        return\n    else:\n        make_state(state + [0], n+1)\n        make_state(state + [1], n+1)\n\nmake_state([], 0)\n", "def main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\n#\n# def main():\n#     n, m = map(int, input().split())\n#     bulbs = [list(map(int, input().split())) for _ in range(m)]\n#     states = list(map(int, input().split()))\n#     switches = [[False] * n for _ in range(m)]\n#     for i in range(m):\n#         for j in range(1, bulbs[i][0] + 1):\n#             switches[i][bulbs[i][j] - 1] = True\n#     # print(switches)\n#     cnt = 0\n#     for i in range(2 ** n):\n#         flag = True\n#         for j in range(m):\n#             c = 0\n#             for k in range(n):\n#                 if switches[j][k] and ((i >> k) & 1):\n#                     c += 1\n#             if c % 2 != states[j]:\n#                 flag = False\n#                 break\n#         if flag:\n#             cnt += 1\n#     print(cnt)\n#\n# if __name__ == '__main__':\n#     main()\n", "\n# \u3053\u308c\u306f\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3059\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split()))[1:])\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(1 << n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j] % 2:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for i in range(m)]\n    states = list(map(int, input().split()))  # \u30b9\u30a4\u30c3\u30c1\u306e\u72b6\u614b\n    switches = [[False] * n for i in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nBC = [list(map(int, sys.stdin.readline().split())) for _ in range(M)]\n\nA.sort(reverse=True)\nBC.sort(key=lambda x: x[1], reverse=True)\n\ncnt = 0\nfor b, c in BC:\n    for i in range(b):\n        if cnt >= N:\n            break\n        if A[cnt] < c:\n            A[cnt] = c\n        cnt += 1\n\nprint(sum(A))\n", "#\n# import sys\n#\n# def main():\n#     n, m = map(int, input().split())\n#     bulbs = [list(map(int, input().split())) for _ in range(m)]\n#     states = list(map(int, input().split()))\n#     switches = [[False] * n for _ in range(m)]\n#     for i in range(m):\n#         for j in range(1, bulbs[i][0] + 1):\n#             switches[i][bulbs[i][j] - 1] = True\n#     # print(switches)\n#     cnt = 0\n#     for i in range(2 ** n):\n#         flag = True\n#         for j in range(m):\n#             c = 0\n#             for k in range(n):\n#                 if switches[j][k] and ((i >> k) & 1):\n#                     c += 1\n#             if c % 2 != states[j]:\n#                 flag = False\n#                 break\n#         if flag:\n#             cnt += 1\n#     print(cnt)\n#\n# if __name__ == '__main__':\n#     main()\n", "# \u5165\u529b\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# \u89e3\u7b54\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(lambda x: int(x)-1, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\ndef main():n,m=map(int,input().split());bulbs=[list(map(int,input().split()))for _ in range(m)];states=list(map(int,input().split()));switches=[[False]*n for _ in range(m)];for i in range(m):for j in range(1,bulbs[i][0]+1):switches[i][bulbs[i][j]-1]=True;cnt=0;for i in range(2**n):flag=True;for j in range(m):c=0;for k in range(n):if switches[j][k]and((i>>k)&1):c+=1;if c%2!=states[j]:flag=False;break;if flag:cnt+=1;print(cnt)\nif __name__=='__main__':main()\n", "\n# \u5165\u529b\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0])-1)\n    s_list.append(list(map(int, sys.stdin.readline().split()))-1)\np_list = list(map(int, sys.stdin.readline().split()))\n\n# \u89e3\u7b54\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * m for _ in range(n)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[switches[i][j] - 1][i] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[k][j] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n# \u3053\u308c\u306f\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3059\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n"]