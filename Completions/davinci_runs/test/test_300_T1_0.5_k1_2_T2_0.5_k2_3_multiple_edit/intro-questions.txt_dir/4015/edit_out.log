2022-04-24 14:57:10.919068 num operations 2
2022-04-24 14:57:10.919085 size on input set 1
2022-04-24 14:57:10.919228 using api key soukgp
2022-04-24 14:57:20.541684 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]  # list(map(int, input().split()))\n\n\ndef solve(n, m):\n    if n == m:  # base case\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]  # read list of integers\n\n\ndef solve(n, m):\n    if n == m:  # if equal then no operations needed\n        return 0\n    if n > m:  # if n is greater than m then impossible\n        return -1\n    if m % n != 0:  # if m is not divisible by n then impossible\n    # check if m is divisible by n*2 or n*3 and return minimum\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650812231,
  "object": "edit"
}
2022-04-24 14:57:20.541947 fix spelling mistakes 3 ["\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\ndef get_input():\n    return [int(x) for x in input().split()]  # list(map(int, input().split()))\n\n\ndef solve(n, m):\n    if n == m:  # base case\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\ndef get_input():\n    return [int(x) for x in input().split()]  # read list of integers\n\n\ndef solve(n, m):\n    if n == m:  # if equal then no operations needed\n        return 0\n    if n > m:  # if n is greater than m then impossible\n        return -1\n    if m % n != 0:  # if m is not divisible by n then impossible\n    # check if m is divisible by n*2 or n*3 and return minimum\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]
2022-04-24 14:57:20.541997 size on output set 3
2022-04-24 14:57:20.542007 size on input set 3
2022-04-24 14:57:20.542188 using api key soukgp
2022-04-24 14:57:28.580565 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    return list(map(int, input().split()))\n\n\ndef solve(n, m):\n    if n == m:  # base case\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 1,
      "text": "\ndef get_input():\n    return [int(x) for x in input().split()]  # list(map(int, input().split()))\n\n\ndef solve(n, m):\n    if n == m:  # base case\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_input():\n    return list(map(int, input().split()))\n\n\ndef solve(n, m):\n    if n == m:  # base case\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650812240,
  "object": "edit"
}
2022-04-24 14:57:28.580757 fix syntax errors 3 ["\n\ndef get_input():\n    return list(map(int, input().split()))\n\n\ndef solve(n, m):\n    if n == m:  # base case\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\ndef get_input():\n    return [int(x) for x in input().split()]  # list(map(int, input().split()))\n\n\ndef solve(n, m):\n    if n == m:  # base case\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\ndef get_input():\n    return list(map(int, input().split()))\n\n\ndef solve(n, m):\n    if n == m:  # base case\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]
2022-04-24 14:57:28.580901 using api key jaanu
2022-04-24 14:57:39.752117 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    if m % (n * 2) == 0:\n        return solve(n * 2, m) + 1\n    else:\n        return solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650812248,
  "object": "edit"
}
2022-04-24 14:57:39.752312 fix syntax errors 3 ["\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    if m % (n * 2) == 0:\n        return solve(n * 2, m) + 1\n    else:\n        return solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]
2022-04-24 14:57:39.752540 using api key kouti
2022-04-24 14:57:47.822149 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    return solve(n * 2, m) + 1 if m % n == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 1,
      "text": "\n\n    return [int(x) for x in input().split()]\n\n\ndef get_input_str():\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input_str()\n    print(solve(n, m))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1 if m % (n * 3) == 0 else -1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650812259,
  "object": "edit"
}
2022-04-24 14:57:47.822359 fix syntax errors 3 ["\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    return solve(n * 2, m) + 1 if m % n == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\n    return [int(x) for x in input().split()]\n\n\ndef get_input_str():\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input_str()\n    print(solve(n, m))\n", "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1 if m % (n * 3) == 0 else -1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]
2022-04-24 14:57:47.822390 size on output set 7
2022-04-24 14:57:47.822400 num operations 2
2022-04-24 14:57:47.822406 size on input set 1
2022-04-24 14:57:47.822550 using api key kouti
2022-04-24 14:57:56.959600 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    }
  ],
  "created": 1650812267,
  "object": "edit"
}
2022-04-24 14:57:56.959779 fix spelling mistakes 3 ['\n\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n']
2022-04-24 14:57:56.959815 size on output set 2
2022-04-24 14:57:56.959822 size on input set 2
2022-04-24 14:57:56.959942 using api key derek
2022-04-24 14:58:04.844948 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----Solution------\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----Solution-----\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If m is even and n is odd, then the answer is -1, since n can never be made even.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    }
  ],
  "created": 1650812276,
  "object": "edit"
}
2022-04-24 14:58:04.845214 fix syntax errors 3 ['\n#-----Solution------\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n\n# -----Solution-----\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If m is even and n is odd, then the answer is -1, since n can never be made even.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n']
2022-04-24 14:58:04.845365 using api key jaanu
2022-04-24 14:58:19.069618 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# #-----Solution-----\n#\n# #This is a greedy algorithm.\n# #The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n# #Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n# #If the number is not m, then the answer is -1.\n#\n# n, m = map(int, input().split())\n#\n# if n == m:\n#     print(0)\n# elif m % 2 == 0 and n % 2 == 1:\n#     print(-1)\n# else:\n#     steps = 0\n#     while n < m:\n#         if n * 3 <= m:\n#             n *= 3\n#         else:\n#             n *= 2\n#         steps += 1\n#     if n == m:\n#         print(steps)\n#     else:\n#         print(-1)\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----#\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 2,
      "text": "\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    }
  ],
  "created": 1650812284,
  "object": "edit"
}
2022-04-24 14:58:19.069833 fix syntax errors 3 ['\n#\n# #-----Solution-----\n#\n# #This is a greedy algorithm.\n# #The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n# #Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n# #If the number is not m, then the answer is -1.\n#\n# n, m = map(int, input().split())\n#\n# if n == m:\n#     print(0)\n# elif m % 2 == 0 and n % 2 == 1:\n#     print(-1)\n# else:\n#     steps = 0\n#     while n < m:\n#         if n * 3 <= m:\n#             n *= 3\n#         else:\n#             n *= 2\n#         steps += 1\n#     if n == m:\n#         print(steps)\n#     else:\n#         print(-1)\n', '\n\n#-----Solution-----#\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n']
2022-04-24 14:58:19.069871 size on output set 6
