2022-04-24 18:23:38.530007 num operations 2
2022-04-24 18:23:38.530018 size on input set 1
2022-04-24 18:23:38.530141 using api key sunu
2022-04-24 18:23:59.432658 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u30eb\u30fc\u30d7\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3059\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3059\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3057\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\u3002\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\u3002\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\u3002\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    # i\u304cn\u6841\u306e\u6570\u5b57\u304b\u3064\u30010\u4ee5\u4e0a\u306e\u6570\u5b57\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    }
  ],
  "created": 1650824618,
  "object": "edit"
}
2022-04-24 18:23:59.432971 fix spelling mistakes 3 ["\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決めるループ\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙する\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙する\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙したので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている。\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する。\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、それらを組み合わせて、n桁の数字を作る。\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する。\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    # iがn桁の数字かつ、0以上の数字であることを確認する。\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"]
2022-04-24 18:23:59.433062 size on output set 3
2022-04-24 18:23:59.433070 size on input set 3
2022-04-24 18:23:59.433192 using api key derek
2022-04-24 18:24:09.699086 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3059\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3059\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3057\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3059\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3059\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])  # noqa\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i  # noqa\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3057\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3059\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3059\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\u3001\u3064\u307e\u308a\u3001i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u5217\u6319\u3057\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    }
  ],
  "created": 1650824639,
  "object": "edit"
}
2022-04-24 18:24:09.699399 fix syntax errors 3 ["\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙する\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙する\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙したので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙する\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙する\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])  # noqa\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i  # noqa\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙したので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙する\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙する\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す、つまり、i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を列挙したので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"]
2022-04-24 18:24:09.699599 using api key soukgp
2022-04-24 18:24:32.395215 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\u3002\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\u3002\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\u3002\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    # i\u304cn\u6841\u306e\u6570\u5b57\u304b\u3064\u30010\u4ee5\u4e0a\u306e\u6570\u5b57\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\u3002\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\u3002\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\u3002\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    # i\u304cn\u6841\u306e\u6570\u5b57\u304b\u3064\u30010\u4ee5\u4e0a\u306e\u6570\u5b57\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\n# n, m = map(int, input().split())\n# q = [list(map(int, input().split())) for i in range(m)]\n\n# ans = -1\n# for i in range(1000, 10000):\n#     s = str(i)\n#     ok = True\n#     for j in range(m):\n#         if s[q[j][0]-1] != str(q[j][1]):\n#             ok = False\n#     if ok:\n#         ans = i\n#         break\n# print(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\u3002\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    # i\u304cn\u6841\u306e\u6570\u5b57\u304b\u3064\u30010\u4ee5\u4e0a\u306e\u6570\u5b57\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    }
  ],
  "created": 1650824649,
  "object": "edit"
}
2022-04-24 18:24:32.395539 fix syntax errors 3 ["\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている。\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する。\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、それらを組み合わせて、n桁の数字を作る。\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する。\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    # iがn桁の数字かつ、0以上の数字であることを確認する。\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている。\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する。\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、それらを組み合わせて、n桁の数字を作る。\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する。\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    # iがn桁の数字かつ、0以上の数字であることを確認する。\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\n# n, m = map(int, input().split())\n# q = [list(map(int, input().split())) for i in range(m)]\n\n# ans = -1\n# for i in range(1000, 10000):\n#     s = str(i)\n#     ok = True\n#     for j in range(m):\n#         if s[q[j][0]-1] != str(q[j][1]):\n#             ok = False\n#     if ok:\n#         ans = i\n#         break\n# print(ans)\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている。\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する。\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    # iがn桁の数字かつ、0以上の数字であることを確認する。\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"]
2022-04-24 18:24:32.395759 using api key jaanu
2022-04-24 18:24:44.940986 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u30eb\u30fc\u30d7\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1]) # s_i: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059, c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    for j in range(10):\n        if str(j) != c_i: # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u30eb\u30fc\u30d7\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u30eb\u30fc\u30d7\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    }
  ],
  "created": 1650824672,
  "object": "edit"
}
2022-04-24 18:24:44.941286 fix syntax errors 3 ["\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決めるループ\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1]) # s_i: s_i番目の桁を表す, c_i: 桁に入る数字\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    for j in range(10):\n        if str(j) != c_i: # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、それ以外の数字を削除する\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決めるループ\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決めるループ\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"]
2022-04-24 18:24:44.941370 size on output set 8
2022-04-24 18:24:44.941381 num operations 2
2022-04-24 18:24:44.941387 size on input set 1
2022-04-24 18:24:44.941511 using api key soukgp
2022-04-24 18:24:53.037573 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    },
    {
      "index": 1,
      "text": "\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    }
  ],
  "created": 1650824684,
  "object": "edit"
}
2022-04-24 18:24:53.037817 fix spelling mistakes 3 ['\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n', '\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n', '\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n']
2022-04-24 18:24:53.037919 size on output set 1
2022-04-24 18:24:53.037928 size on input set 1
2022-04-24 18:24:53.038051 using api key kouti
2022-04-24 18:25:03.901706 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "N, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[1])\n    c.append(tmp[0])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num+1):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j] or int(num_str[0]) == 0:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    },
    {
      "index": 1,
      "text": "N, M = map(int, input().split())\ns, c = [], []\nfor i in range(M):\n    s_i, c_i = map(int, input().split())\n    s.append(s_i)\n    c.append(c_i)\nmin_num = 0\nmax_num = 10**N\nfor i in range(min_num, max_num):\n    is_match = True\n    for j in range(M):\n        if str(i)[s[j]-1] != str(c[j]):\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "N, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    }
  ],
  "created": 1650824693,
  "object": "edit"
}
2022-04-24 18:25:03.901934 fix syntax errors 3 ['N, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[1])\n    c.append(tmp[0])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num+1):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j] or int(num_str[0]) == 0:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n', 'N, M = map(int, input().split())\ns, c = [], []\nfor i in range(M):\n    s_i, c_i = map(int, input().split())\n    s.append(s_i)\n    c.append(c_i)\nmin_num = 0\nmax_num = 10**N\nfor i in range(min_num, max_num):\n    is_match = True\n    for j in range(M):\n        if str(i)[s[j]-1] != str(c[j]):\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\nprint(-1)\n', 'N, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n']
2022-04-24 18:25:03.901984 size on output set 3
