["\nimport sys\nimport math \n\nsys.setrecursionlimit(1000000)\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if math.sqrt(distance(points[i], points[j])).is_integer():\n            count += 1\n\nprint(count)\n", "\n#\nimport math, itertools\n\nn, d = map(int, input().split())  # n = number of points, d = dimension\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(d)]))\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n", "\n# take input from user\nimport math\n\nn, d = map(int, input().split())\n# define points list\n\n\n# append points in list\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n# define method to calculate distance\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n# define count variable\n\ncount = 0\n\n# check if distance is integer or not\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\n# print count\nprint(count)\n", "import sys\nimport math\n\ndef distance(p1, p2, d):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(d)]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n-1):\n            if distance(points[i], points[j], d) % 1 == 0:\n                count += 1\n\n    print(int(count))\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement me\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import os\nimport sys, math\n\ndef get_distance(point_1, point_2):\n    return math.sqrt(sum([(point_1[i] - point_2[i])**2 for i in range(len(point_1))]))\n\ndef main():\n    n, d = [int(i) for i in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(i) for i in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if get_distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\nn, d = map(int, input().split())  # n = number of points, d = dimension\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\n\ndef distance(p1, p2):\n\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(d)]))\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n", "\n\nimport math\n\nn, d = map(int, input().split())  # n = number of points, d = dimension\n\npoints = []\nfor _ in range(n):\n\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(d)]))\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2, d):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(d)]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         if distance(points[i], points[j], d) % 1 == 0:\n    #             count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\nn, d = map(int, input().split())\n\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n", "\n\nimport math \n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer:\n            count += 1\n\nprint(count)\n", "\n# TODO: implement me\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print count\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))\n\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().strip().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().strip().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count // 2)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2, d):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(d)]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append([int(x) for x in sys.stdin.readline().split()])\n\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if distance(points[i], points[j], d) % 1 == 0:\n                count += 1\n\n    print(int(count))\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in input().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in input().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math \n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n"]