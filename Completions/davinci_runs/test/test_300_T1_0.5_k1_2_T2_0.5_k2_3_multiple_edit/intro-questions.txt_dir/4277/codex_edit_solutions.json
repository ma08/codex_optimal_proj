["\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().split())\n\n\ndef min_expenses(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expenses(N, A, B))\n", "\n\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split()) # n, a, b\ub97c int\ud615\uc73c\ub85c \uc785\ub825\ubc1b\uc544\uc11c \uc800\uc7a5\n\nprint(min(n*a, b)) # n*a\uc640 b \uc911 \uc791\uc740 \uac12\uc744 \ucd9c\ub825\n", "print(1.0)\n", "# -*- coding: utf-8 -*-\nimport sys\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "\nimport sys\nN = int(sys.stdin.readline().rstrip())\n\n\ndef factorial(N):\n    if N == 0:\n        return 1\n    return N * factorial(N - 1)\n\n\nprint(factorial(N))\n", "import sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "\nimport sys\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B, count):\n    if N <= 0:\n        return count\n\n\n    if N % 2 == 0:\n        return min_expense(N//2, A, B, count+1)\n\n    if N % 2 == 1:\n        return min_expense(N-1, A, B, count+1)\n\n\nprint(min_expense(N, A, B, 0))\n", "\n\n\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().split())\n\n\ndef min_expenses(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expenses(N, A, B))\n", "import sys\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "\n\nfrom collections import deque\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nA = list(map(int, sys.stdin.readline().split()))\n\nA.sort()\n\ndef min_expenses(N, M, A):\n    d = deque(A)\n    ans = 0\n    for _ in range(M):\n        min_cost = d.popleft()\n        ans += min_cost\n        d.append(min_cost + 1)\n    return ans\n\n\nprint(min_expenses(N, M, A))\n", "\n\nimport sys \n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n * a, b))\n", "\nimport sys \n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "import sys\n\nn, a, b = map(int, sys.stdin.readline().split())  # \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \uc815\uc218 3\uac1c \ubc1b\uae30\n\nprint(min(n * a, b))  # n * a, b \uc911 \uc791\uc740 \uac12 \ucd9c\ub825\n", "import sys\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\ndef minExpense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(minExpense(N, A, B))\n", "#\n\nimport sys\n#\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n"]