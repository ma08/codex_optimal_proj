["\ndef f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memory = set()\n    while n not in memory: \n        memory.add(n)\n        n = f(n)\n    print(len(memory))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n += 1\n    if n % 10 == 0:\n        n = int(n / 10)\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memory = set()\n    while n not in memory:\n        memory.add(n)\n        n = f(n)\n    print(len(memory)) \n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    f_in = open(\"f_in.txt\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n, 0))\n\ndef count_reachable(n, total):\n    if n == 1:\n        return total\n    return count_reachable(n-1, total + is_reachable(n-1, n))\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\ndef main():\n    f_in = open(\"file.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n\tf_in = open(\"f_in.txt\", \"r\")\n\tn = int(f_in.readline())\n\tprint(count_reachable(n))\n\ndef count_reachable(n):\n\tif n == 1:\n\t\treturn 2\n\treturn count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n\tif n == m:\n\t\treturn 1\n\tif n < 1:\n\t\treturn 0\n\tif n % 10 == 0:\n\t\treturn is_reachable(n//10, m)\n\treturn is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n\tmain()\n", "\ndef main():\n    f_in = open(\"f_in.txt\", 'r')\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == '__main__':\n    main()\n", "\ndef f(n: int) -> int:\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\n\ndef main() -> None:\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"input.txt\", \"r\") #input.txt is the name of the file\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n += 1\n    while n % 10 == 0 and n != 0:\n        n //= 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"file.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n - 1) + is_reachable(n - 1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n // 10, m)\n    return is_reachable(n - 1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n  f_in = open(\"input.txt\", \"r\")\n  n = int(f_in.readline())\n  print(count_reachable(n))\n\ndef count_reachable(n):\n  if n == 1:\n    return 2\n  return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n  if n == m:\n    return 1\n  if n < 1:\n    return 0\n  if n % 10 == 0:\n    return is_reachable(n//10, m)\n  return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "def f(n):\n    n += 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(x):\n    x = x + 1\n    while x % 10 == 0:\n        x = x // 10\n    return x\n\ndef main():\n    x = int(input())\n    memory = set()\n    while x not in memory:\n        memory.add(x)\n        x = f(x)\n    print(len(memory))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"file.in\", \"r\") \n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"input.txt\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n-1)\n\ndef is_reachable(n, m):\n    if n == m: return 1\n    if n < 1:\n        return 0    \n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n"]