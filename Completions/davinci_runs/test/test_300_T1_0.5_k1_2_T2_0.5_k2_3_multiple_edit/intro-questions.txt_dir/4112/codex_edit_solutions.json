["\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    ans = sum(A)\n    for i in range(k):\n        ans = max(ans, sum(A[:i]) + sum(A[n-k+i:]) + x * (k - i - 1))\n    print(ans)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive) with j - i >= k\ndp = [[0] * n for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# https://atcoder.jp/contests/abc096/tasks/abc096_b\n\ndef main():\n    a, b, c = map(int, input().split())\n    k = int(input())\n    ans = a + b + c\n    for i in range(k):\n        if a < b:\n            a *= 2\n        elif b < c:\n            b *= 2\n        else:\n            c *= 2\n    print(ans - max(a, b, c))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i + 1 >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i + 1 >= k and j - i + 1 >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    print(dp2[0][n - 1])\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    ans = sum(A)\n    for i in range(k):\n        ans = max(ans, sum(A[:i]) + sum(A[n-k+i:]) + (k-i-1)*x)\n    print(ans)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i + 1 >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n        # dp[i][j] = max sum of pictures from range [i, j]\n        # with j - i + 1 >= k and j - i + 1 >= x\n        dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n", "\n\ndef main():\n    n,k,x=map(int,input().split())\n    A=list(map(int,input().split()))\n    if x<k:\n        print(-1)\n        return\n    if k==1:\n        print(sum(A))\n        return\n    if k==2:\n        print(max(A))\n        return\n    if k==3:\n        print(max(A[0]+A[-1],max(A[1:n-1])))\n        return\n    if k==4:\n        print(max(A[0]+A[1]+A[-2]+A[-1],max(A[2:n-2])))\n        return\n    if k==5:\n        print(max(A[0]+A[1]+A[2]+A[-3]+A[-2]+A[-1],max(A[3:n-3])))\n        return\n    print(max(A[0]+A[1]+A[2]+A[3]+A[-4]+A[-3]+A[-2]+A[-1],max(A[4:n-4])))\n    return\n\nif __name__=='__main__':\n    main()\n", "\n\ndef main():\nn,k,x=map(int,input().split())\nA=list(map(int,input().split()))if x<k:print(-1);return\nif k==1:print(sum(A));returnif k==2:print(max(A));return\nif k==3:print(max(A[0]+A[-1],max(A[1:n-1])));return\nif k==4:print(max(A[0]+A[1]+A[-2]+A[-1],max(A[2:n-2])));return\nif k==5:print(max(A[0]+A[1]+A[2]+A[-3]+A[-2]+A[-1],max(A[3:n-3])));return\nprint(max(A[0]+A[1]+A[2]+A[3]+A[-4]+A[-3]+A[-2]+A[-1],max(A[4:n-4])))\nreturn\nif __name__=='__main__':main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1],\n                  max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1],\n              max(A[4:n - 4])))\n    return\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef solve(pictures, k, x):\n    n = len(pictures)\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i + 1 >= k\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n    # for row in dp:\n    #     print(row)\n\n    if x == n:\n        return dp[0][n - 1]\n    elif x > n:\n        return -1\n    else:\n        # dp[i][j] = max sum of pictures from range [i, j]\n        # with j - i + 1 >= k and j - i + 1 >= x\n        dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            dp2[i][i] = pictures[i]\n\n        for width in range(1, n):\n            for i in range(n - width):\n                j = i + width\n                if j - i + 1 < k or j - i + 1 < x:\n                    dp2[i][j] = 0\n                else:\n                    dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n        # for row in dp2:\n        #     print(row)\n\n        return dp2[0][n - 1]\n\n\n# pictures = [3, 5, 2, 6]\n# k = 2\n# x = 3\n# print(solve(pictures, k, x))\n\n# pictures = [3, 2, 1]\n# k = 2\n# x = 2\n# print(solve(pictures, k, x))\n\n# pictures = [3, 2, 1]\n# k = 2\n# x = 3\n# print(solve(pictures, k, x))\n\n# pictures = [3, 2, 1]\n# k = 2\n# x = 4\n# print(solve(pictures, k, x))\n\n# pictures = [3, 2, 1]\n# k = 2\n# x = 1\n# print(solve(pictures, k, x))\n\n# pictures = [3, 2, 1]\n# k = 2\n# x = 0\n# print(solve(pictures, k, x))\n\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\nprint(solve(pictures, k, x))\n", "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] inclusive,\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] inclusive,\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n", "\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] inclusive\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] inclusive\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n", "\n\ndef main():\n    N, K, X = map(int, input().split())\n    A = list(map(int, input().split()))[:N]\n    if X < K:\n        print(-1)  # NONE\n    else:\n        ans = sum(A)\n        for i in range(K):\n            ans = max(ans, sum(A[:i]) + sum(A[N-K+i:]))\n        print(ans)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split())) # pictures[i] = quality of picture i\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n", "\n\ndef main():\n    n,k,x=map(int,input().split())\n    A=list(map(int,input().split()))\n    if x<k:\n        print(-1)\n        return\n    if k==1:\n        print(sum(A))\n        return\n    if k==2:\n        print(max(A))\n        return\n    if k==3:\n        print(max(A[0]+A[-1],max(A[1:n-1])))\n        return\n    if k==4:\n        print(max(A[0]+A[1]+A[-2]+A[-1],max(A[2:n-2])))\n        return\n    if k==5:\n        print(max(A[0]+A[1]+A[2]+A[-3]+A[-2]+A[-1],max(A[3:n-3])))\n        return\n    print(max(A[0]+A[1]+A[2]+A[3]+A[-4]+A[-3]+A[-2]+A[-1],max(A[4:n-4])))\n    return\nif __name__=='__main__':\n    main()\n", "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive) with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\n# dp2[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp2 = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp2[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp2[i][j] = 0\n        else:\n            dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n# for row in dp2:\n#     print(row)\n\nif x == n:\n    print(dp2[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp3[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp3 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp3[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp3[i][j] = 0\n            else:\n                dp3[i][j] = max(dp3[i][j - 1], dp3[i + 1][j], dp3[i][j - 1] + pictures[j])\n\n    # for row in dp3:\n    #     print(row)\n\n    print(dp3[0][n - 1])\n", "\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1: print(sum(A)); return\n    if k == 2: print(max(A)); return\n    if k == 3: print(max(A[0] + A[-1], max(A[1:n - 1]))); return\n    if k == 4: print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2]))); return\n    if k == 5: print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3]))); return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4]))); return\n    return\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] inclusive\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] inclusive\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"]