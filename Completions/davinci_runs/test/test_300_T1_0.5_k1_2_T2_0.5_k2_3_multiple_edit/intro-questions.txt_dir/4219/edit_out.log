2022-04-24 19:27:39.953149 num operations 2
2022-04-24 19:27:39.953160 size on input set 1
2022-04-24 19:27:39.953282 using api key kouti
2022-04-24 19:28:00.688401 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find maximum number of honest people\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input \n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650828460,
  "object": "edit"
}
2022-04-24 19:28:00.688630 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find maximum number of honest people\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input \n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 19:28:00.688680 size on output set 3
2022-04-24 19:28:00.688688 size on input set 3
2022-04-24 19:28:00.688810 using api key kouti
2022-04-24 19:28:12.490258 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650828480,
  "object": "edit"
}
2022-04-24 19:28:12.490535 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 19:28:12.490720 using api key kouti
2022-04-24 19:28:19.891966 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650828492,
  "object": "edit"
}
2022-04-24 19:28:19.892152 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 19:28:19.892444 using api key derek
2022-04-24 19:28:27.908363 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find maximum number of honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find maximum number of honest people\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find maximum number of honest people\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650828499,
  "object": "edit"
}
2022-04-24 19:28:27.908555 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find maximum number of honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find maximum number of honest people\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find maximum number of honest people\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 19:28:27.908603 size on output set 7
2022-04-24 19:28:27.908616 num operations 2
2022-04-24 19:28:27.908621 size on input set 1
2022-04-24 19:28:27.908744 using api key jaanu
2022-04-24 19:28:52.828700 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\"\"\"\nCODING CHALLENGE:\nThere are n people in a town. Each person has a\nlist of people that he or she trusts. For example,\nif there are 4 people, the list of trust might be\n[[1,2], [2,3], [3,4], [4,1]].\nThis means that person 1 trusts person 2, person 2\ntrusts person 3, person 3 trusts person 4, and\nperson 4 trusts person 1.\nWe want to find out how many people in this town\nare honest. An honest person is one who tells the\ntruth about who he or she trusts. A dishonest\nperson is one who lies about who he or she trusts.\nFor example, if person 1 says that he or she trusts\nperson 2, but person 2 says that he or she doesn't\ntrust person 1, then person 1 is dishonest.\nWrite a function that takes in a list of trust\nrelationships (e.g. [[1,2], [2,3], [3,4], [4,1]])\nand prints out the number of honest people in the\ntown.\n\"\"\"\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"\n    solve function\n    \"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"\n    is_honest function\n    \"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\" \n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650828507,
  "object": "edit"
}
2022-04-24 19:28:52.828974 fix spelling mistakes 3 ['\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '"""\nCODING CHALLENGE:\nThere are n people in a town. Each person has a\nlist of people that he or she trusts. For example,\nif there are 4 people, the list of trust might be\n[[1,2], [2,3], [3,4], [4,1]].\nThis means that person 1 trusts person 2, person 2\ntrusts person 3, person 3 trusts person 4, and\nperson 4 trusts person 1.\nWe want to find out how many people in this town\nare honest. An honest person is one who tells the\ntruth about who he or she trusts. A dishonest\nperson is one who lies about who he or she trusts.\nFor example, if person 1 says that he or she trusts\nperson 2, but person 2 says that he or she doesn\'t\ntrust person 1, then person 1 is dishonest.\nWrite a function that takes in a list of trust\nrelationships (e.g. [[1,2], [2,3], [3,4], [4,1]])\nand prints out the number of honest people in the\ntown.\n"""\n\ndef main():\n    """\n    main function\n    """\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """\n    solve function\n    """\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """\n    is_honest function\n    """\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function""" \n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-24 19:28:52.829030 size on output set 3
2022-04-24 19:28:52.829037 size on input set 3
2022-04-24 19:28:52.829195 using api key jaanu
2022-04-24 19:28:59.946265 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\" \n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\" \n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650828532,
  "object": "edit"
}
2022-04-24 19:28:59.946471 fix syntax errors 3 ['\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function""" \n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function""" \n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-24 19:28:59.946694 using api key kouti
2022-04-24 19:29:26.601563 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\"\"\"\nCODING CHALLENGE:\nThere are n people in a town. Each person has a\nlist of people that he or she trusts. For example,\nif there are 4 people, the list of trust might be\n[[1,2], [2,3], [3,4], [4,1]].\nThis means that person 1 trusts person 2, person 2\ntrusts person 3, person 3 trusts person 4, and\nperson 4 trusts person 1.\nWe want to find out how many people in this town\nare honest. An honest person is one who tells the\ntruth about who he or she trusts. A dishonest\nperson is one who lies about who he or she trusts.\nFor example, if person 1 says that he or she trusts\nperson 2, but person 2 says that he or she doesn't\ntrust person 1, then person 1 is dishonest.\nWrite a function that takes in a list of trust\nrelationships (e.g. [[1,2], [2,3], [3,4], [4,1]])\nand prints out the number of honest people in the\ntown.\n\"\"\"\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    num_persons = int(input())\n    graph = {}\n    for person in range(num_persons):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"\n    solve function\n    \"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"\n    is_honest function\n    \"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\"\"\"\nCODING CHALLENGE:\nThere are n people in a town. Each person has a\nlist of people that he or she trusts. For example,\nif there are 4 people, the list of trust might be\n[[1,2], [2,3], [3,4], [4,1]].\nThis means that person 1 trusts person 2, person 2\ntrusts person 3, person 3 trusts person 4, and\nperson 4 trusts person 1.\nWe want to find out how many people in this town\nare honest. An honest person is one who tells the\ntruth about who he or she trusts. A dishonest\nperson is one who lies about who he or she trusts.\nFor example, if person 1 says that he or she trusts\nperson 2, but person 2 says that he or she doesn't\ntrust person 1, then person 1 is dishonest.\nWrite a function that takes in a list of trust\nrelationships (e.g. [[1,2], [2,3], [3,4], [4,1]])\nand prints out the number of honest people in the\ntown.\n\"\"\"\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    # num_person = int(input())\n    # graph = {}\n    # for person in range(num_person):\n    #     graph[person + 1] = []\n    #     num_testimony = int(input())\n    #     for _ in range(num_testimony):\n    #         x_ij, y_ij = map(int, input().split())\n    #         graph[person + 1].append((x_ij, y_ij))\n    # print(solve(graph))\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 1)],\n    }\n    print(solve(graph)) # 1\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 0)],\n    }\n    print(solve(graph)) # 0\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 1), (4, 1)],\n    }\n    print(solve(graph)) # 1\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1), (3, 1)],\n        4: [(1, 1)],\n    }\n    print(solve(graph)) # 0\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 1)],\n        5: [(2, 1)],\n    }\n    print(solve(graph)) # 2\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 1)],\n        5: [(2, 1)],\n        6: [(2, 1)],\n    }\n    print(solve(graph)) # 3\n\ndef solve(graph):\n    \"\"\"\n    solve function\n    \"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"\n    is_honest function\n    \"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    if person in graph:\n        for x_ij, y_ij in graph[person]:\n            if y_ij == 0:\n                continue\n            if not is_honest(graph, x_ij, visited):\n                return False\n    return True\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\"\"\"\nCODING CHALLENGE:\nThere are n people in a town. Each person has a\nlist of people that he or she trusts. For example,\nif there are 4 people, the list of trust might be\n[[1,2], [2,3], [3,4], [4,1]].\nThis means that person 1 trusts person 2, person 2\ntrusts person 3, person 3 trusts person 4, and\nperson 4 trusts person 1.\nWe want to find out how many people in this town\nare honest. An honest person is one who tells the\ntruth about who he or she trusts. A dishonest\nperson is one who lies about who he or she trusts.\nFor example, if person 1 says that he or she trusts\nperson 2, but person 2 says that he or she doesn't\ntrust person 1, then person 1 is dishonest.\nWrite a function that takes in a list of trust\nrelationships (e.g. [[1,2], [2,3], [3,4], [4,1]])\nand prints out the number of honest people in the\ntown.\n\"\"\"\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    num_persons = int(input())\n    graph = {}\n    for person in range(num_persons):\n        graph[person + 1] = []\n        num_testimonies = int(input())\n        for _ in range(num_testimonies):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"\n    solve function\n    \"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"\n    is_honest function\n    \"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650828539,
  "object": "edit"
}
2022-04-24 19:29:26.601816 fix syntax errors 3 ['"""\nCODING CHALLENGE:\nThere are n people in a town. Each person has a\nlist of people that he or she trusts. For example,\nif there are 4 people, the list of trust might be\n[[1,2], [2,3], [3,4], [4,1]].\nThis means that person 1 trusts person 2, person 2\ntrusts person 3, person 3 trusts person 4, and\nperson 4 trusts person 1.\nWe want to find out how many people in this town\nare honest. An honest person is one who tells the\ntruth about who he or she trusts. A dishonest\nperson is one who lies about who he or she trusts.\nFor example, if person 1 says that he or she trusts\nperson 2, but person 2 says that he or she doesn\'t\ntrust person 1, then person 1 is dishonest.\nWrite a function that takes in a list of trust\nrelationships (e.g. [[1,2], [2,3], [3,4], [4,1]])\nand prints out the number of honest people in the\ntown.\n"""\n\ndef main():\n    """\n    main function\n    """\n    num_persons = int(input())\n    graph = {}\n    for person in range(num_persons):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """\n    solve function\n    """\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """\n    is_honest function\n    """\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '"""\nCODING CHALLENGE:\nThere are n people in a town. Each person has a\nlist of people that he or she trusts. For example,\nif there are 4 people, the list of trust might be\n[[1,2], [2,3], [3,4], [4,1]].\nThis means that person 1 trusts person 2, person 2\ntrusts person 3, person 3 trusts person 4, and\nperson 4 trusts person 1.\nWe want to find out how many people in this town\nare honest. An honest person is one who tells the\ntruth about who he or she trusts. A dishonest\nperson is one who lies about who he or she trusts.\nFor example, if person 1 says that he or she trusts\nperson 2, but person 2 says that he or she doesn\'t\ntrust person 1, then person 1 is dishonest.\nWrite a function that takes in a list of trust\nrelationships (e.g. [[1,2], [2,3], [3,4], [4,1]])\nand prints out the number of honest people in the\ntown.\n"""\n\ndef main():\n    """\n    main function\n    """\n    # num_person = int(input())\n    # graph = {}\n    # for person in range(num_person):\n    #     graph[person + 1] = []\n    #     num_testimony = int(input())\n    #     for _ in range(num_testimony):\n    #         x_ij, y_ij = map(int, input().split())\n    #         graph[person + 1].append((x_ij, y_ij))\n    # print(solve(graph))\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 1)],\n    }\n    print(solve(graph)) # 1\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 0)],\n    }\n    print(solve(graph)) # 0\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 1), (4, 1)],\n    }\n    print(solve(graph)) # 1\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1), (3, 1)],\n        4: [(1, 1)],\n    }\n    print(solve(graph)) # 0\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 1)],\n        5: [(2, 1)],\n    }\n    print(solve(graph)) # 2\n    graph = {\n        1: [(2, 1)],\n        2: [(3, 1)],\n        3: [(4, 1)],\n        4: [(1, 1)],\n        5: [(2, 1)],\n        6: [(2, 1)],\n    }\n    print(solve(graph)) # 3\n\ndef solve(graph):\n    """\n    solve function\n    """\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """\n    is_honest function\n    """\n    if person in visited:\n        return False\n    visited.add(person)\n    if person in graph:\n        for x_ij, y_ij in graph[person]:\n            if y_ij == 0:\n                continue\n            if not is_honest(graph, x_ij, visited):\n                return False\n    return True\n\nmain()\n', '"""\nCODING CHALLENGE:\nThere are n people in a town. Each person has a\nlist of people that he or she trusts. For example,\nif there are 4 people, the list of trust might be\n[[1,2], [2,3], [3,4], [4,1]].\nThis means that person 1 trusts person 2, person 2\ntrusts person 3, person 3 trusts person 4, and\nperson 4 trusts person 1.\nWe want to find out how many people in this town\nare honest. An honest person is one who tells the\ntruth about who he or she trusts. A dishonest\nperson is one who lies about who he or she trusts.\nFor example, if person 1 says that he or she trusts\nperson 2, but person 2 says that he or she doesn\'t\ntrust person 1, then person 1 is dishonest.\nWrite a function that takes in a list of trust\nrelationships (e.g. [[1,2], [2,3], [3,4], [4,1]])\nand prints out the number of honest people in the\ntown.\n"""\n\ndef main():\n    """\n    main function\n    """\n    num_persons = int(input())\n    graph = {}\n    for person in range(num_persons):\n        graph[person + 1] = []\n        num_testimonies = int(input())\n        for _ in range(num_testimonies):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """\n    solve function\n    """\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """\n    is_honest function\n    """\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-24 19:29:26.602137 using api key kouti
2022-04-24 19:29:35.359958 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph, is_honest):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650828566,
  "object": "edit"
}
2022-04-24 19:29:35.360197 fix syntax errors 3 ['\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph, is_honest):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-24 19:29:35.360245 size on output set 7
