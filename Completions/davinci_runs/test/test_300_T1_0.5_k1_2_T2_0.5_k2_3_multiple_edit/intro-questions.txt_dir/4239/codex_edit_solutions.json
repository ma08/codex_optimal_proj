["\nimport math\n\ndef main():\n    n = int(input())\n    count = 0\n    while n > 0:\n        if n % 6 == 0:\n            n = n // 6\n            count += 1\n        elif n % 9 == 0:\n            n = n // 9\n            count += 1\n        else:\n            n = n - 1\n            count += 1\n    print(count)\nif __name__ == '__main__':\n    main()\n", "\n\n\n\nimport math\n\ndef main():\n    n = int(input())\n    count = 0\n    while n > 0:\n        if n % 6 == 0:\n            n = n // 6\n            count += 1\n        elif n % 9 == 0:\n            n = n // 9\n            count += 1\n        else:\n            n = n - 1\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    count = 0\n    while n > 0:\n        if n % 6 == 0:\n            n = n // 6\n            count += 1\n        elif n % 9 == 0:\n            n = n // 9\n            count += 1\n        else:\n            n = n - 1\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# This file is part of file.\n# https://github.com/someuser/somepackage\n\n# Licensed under the MIT license:\n# http://www.opensource.org/licenses/MIT-license\n# Copyright (c) 2015, file <someuser@email.com>\n\nfrom setuptools import setup, find_packages\nfrom file import __version__\n\ntests_require = [\n    'mock',\n    'nose',\n    'coverage',\n    'yanc',\n    'preggy',\n    'tox',\n    'ipdb',\n    'coveralls',\n    'sphinx',\n]\n\nsetup(\n    name='file',\n    version=__version__,\n    description='file',\n    long_description='''\nfile\n''',\n    keywords='',\n    author='file',\n    author_email='someuser@email.com',\n    url='https://github.com/someuser/somepackage',\n    license='MIT',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Operating System :: Unix',\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        'Operating System :: OS Independent',\n    ],\n    packages=find_packages(),\n    include_package_data=False,\n    install_requires=[\n        # add your dependencies here\n        # remember to use 'package-name>=x.y.z,<x.(y+1).0' notation (this way you get bugfixes)\n    ],\n    extras_require={\n        'tests': tests_require,\n    },\n    entry_points={\n        'console_scripts': [\n            # add cli scripts here in this form:\n            # 'file=file.cli:main',\n        ],\n    },\n)\n", "\n\n#%%\n\nimport math\n\ndef main():\n    n = int(input())\n    count = 0\n    while n > 0:\n        if n % 6 == 0:\n            n = n // 6\n            count += 1\n        elif n % 9 == 0:\n            n = n // 9\n            count += 1\n        else:\n            n = n - 1\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport math\n\ndef main():\n    n = int(input())\n    count = 0\n    while n > 0:\n        if n % 6 == 0:\n            n = n // 6\n            count += 1\n        elif n % 9 == 0:\n            n = n // 9\n            count += 1\n        else:\n            n = n - 1\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nimport math\n\ndef main():\n    n = int(input())\n    count = 0\n    while n > 0:\n        if n % 6 == 0:\n            n = n // 6\n            count += 1\n        elif n % 9 == 0:\n            n = n // 9\n            count += 1\n        else:\n            n = n - 1\n            count += 1\n    print(count)\n \nif __name__ == '__main__':\n    main()\n", "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\nint main(int argc, char *argv[])\n{\n\tchar *file_name = argv[1];\n\tFILE *fp = fopen(file_name, \"r\");\n\tchar *line = NULL;\n\tsize_t len = 0;\n\tssize_t read;\n\tif (fp == NULL) exit(EXIT_FAILURE);\n\twhile ((read = getline(&line, &len, fp)) != -1)\n\t{\n\t\tprintf(\"Retrieved line of length %zu :\\n\", read);\n\t\tprintf(\"%s\", line);\n\t}\n\tfree(line);\n\tfclose(fp);\n\treturn 0;\n}\n"]