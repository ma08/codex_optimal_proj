["#this is a test file\n\nx = int(input())\nn = int(input())\np = list(map(int, input().split()))\n\np.sort()\n\nif x < p[0]:\n    print(p[0] - x)\nelif x > p[n-1]:\n    print(x - p[n-1])\nelse:\n    for i in range(1, n):\n        if p[i-1] < x and x < p[i]:\n            if abs(p[i-1] - x) < abs(p[i] - x):\n                print(abs(p[i-1] - x))\n            else:\n                print(abs(p[i] - x))\n            break\n", "\nx = int(input().split()[0])  # read first number\nn = int(input().split()[0])  # read second number\np = [int(i) for i in input().split()]  # read third number\np.sort()  # sort third number\n\nif x <= p[0]:\n    print(p[0] - x)\nelif x >= p[-1]:\n    print(x - p[-1])\nelse:\n    for i in range(1, n):\n        if x <= p[i]:\n            print(min(x - p[i-1], p[i] - x))\n            break\n", "\na = int(input().split()[1])\nb = int(input().split()[1])\nc = int(input().split()[1])\nd = int(input().split()[1])\n\nif a <= c and b >= d:\n    print(0)\nelif a <= c and b <= d:\n    print(d-b)\nelif a >= c and b >= d:\n    print(a-c)\nelse:\n    print(a-c + d-b)\n", "\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\nx = int(input())\n\nn = int(input())\n\np = sorted([int(i) for i in input().split()])\n\n\nif x <= p[0]:\n    \n    print(p[0] - x)\n\nelif x >= p[-1]:\n    \n    print(x - p[-1])\n\nelse:\n    \n    for i in range(1, n):\n        \n        if x <= p[i]:\n            \n            print(min(x - p[i - 1], p[i] - x))\n            \n            break\n", "\n\nx = int(input())\nn = int(input())\np = list(map(int, input().split()))\n\np.sort()\n\nif x < p[0]:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    print(p[0] - x)\nelif x > p[n-1]:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    print(x - p[n-1])\nelse:  # \u0438\u043d\u0430\u0447\u0435\n    for i in range(1, n):\n        if p[i-1] < x and x < p[i]:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435 \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n            if abs(p[i-1] - x) < abs(p[i] - x):  # \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u0447\u0438\u0441\u043b\u043e\u043c \u043c\u0435\u043d\u044c\u0448\u0435\n                print(p[i-1] - x)\n            else:\n                print(p[i] - x)\n            break\n", "\ndef solution(a, b, c, d):\n    if a <= c and b >= d:\n        return 0\n    elif a <= c and b <= d:\n        return d-b\n    elif a >= c and b >= d:\n        return a-c\n    else:\n        return a-c + d-b\n\n\nif __name__ == '__main__':\n    a = int(input().split()[0])\n    b = int(input().split()[0])\n    c = int(input().split()[0])\n    d = int(input().split()[0])\n\n    print(solution(a, b, c, d))\n", "\n\nx = int(input())  # the position of the center of the segment.\nn = int(input())\np = list(map(int, input().split()))  # the positions of the centers of the segments.\n\np.sort()\n\nif x < p[0]:\n    print(p[0] - x)\nelif x > p[n-1]:\n    print(x - p[n-1])\nelse:\n    for i in range(1, n):\n        if p[i-1] < x and x < p[i]:\n            if abs(p[i-1] - x) < abs(p[i] - x):\n                print(p[i-1] - x)\n            else:\n                print(p[i] - x)\n            break\n", "\nx = int(input().split()[0])  # read first number\nn = int(input().split()[0])  # read second number\np = [int(i) for i in input().split()]  # read third number\np.sort()  # sort third number\n\nif x <= p[0]:\n    print(p[0] - x)\nelif x >= p[-1]:\n    print(x - p[-1])\nelse:\n    for i in range(1, n):\n        if x <= p[i]:\n            print(min(x - p[i - 1], p[i] - x))\n            break\n", "\n\nx = int(input())  # \u0447\u0438\u0441\u043b\u043e, \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c\nn = int(input())  # \u0447\u0438\u0441\u043b\u043e \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\np = list(map(int, input().split()))  # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\np.sort()  # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\nif x < p[0]:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    print(p[0] - x)\nelif x > p[n-1]:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    print(x - p[n-1])\nelse:  # \u0438\u043d\u0430\u0447\u0435\n    for i in range(1, n):\n        if p[i-1] < x and x < p[i]:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435 \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n            if abs(p[i-1] - x) < abs(p[i] - x):  # \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u0447\u0438\u0441\u043b\u043e\u043c \u043c\u0435\u043d\u044c\u0448\u0435\n                print(p[i-1] - x)\n            else:\n                print(p[i] - x)\n\n            break\n", "# this is a test file\n\nx = int(input())\nn = int(input())\np = list(map(int, input().split()))\n\np.sort()\n\nif x < p[0]:\n    print(p[0] - x)\nelif x > p[n-1]:\n    print(x - p[n-1])\nelse:\n    for i in range(1, n):\n        if p[i-1] < x and x < p[i]:\n            if abs(p[i-1] - x) < abs(p[i] - x):\n                print(p[i-1] - x)\n            else:\n                print(p[i] - x)\n            break\n", "\n\nimport sys\n\ndef find_closest_segment(x, p):\n    p.sort()\n\n    if x < p[0]:\n        return p[0] - x\n    elif x > p[len(p)-1]:\n        return x - p[len(p)-1]\n    else:\n        for i in range(1, len(p)):\n            if p[i-1] < x and x < p[i]:\n                if abs(p[i-1] - x) < abs(p[i] - x):\n                    return p[i-1] - x\n                else:\n                    return p[i] - x\n                break\n\n\ndef main():\n    x = int(input())  # the position of the center of the segment\n    n = int(input())\n    p = list(map(int, input().split()))  # the positions of the centers of the segments\n\n    print(find_closest_segment(x, p))\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2 and sys.argv[1] == 'test':\n        print(find_closest_segment(0, [7, 8, 9]))\n        print(find_closest_segment(6, [4]))\n        print(find_closest_segment(3, [1, 4, -3]))\n        print(find_closest_segment(9, [1, 4, -3]))\n        print(find_closest_segment(0, [1, 4, -3]))\n        print(find_closest_segment(1, [1, 4, -3]))\n        print(find_closest_segment(2, [1, 4, -3]))\n        print(find_closest_segment(3, [1, 4, -3]))\n        print(find_closest_segment(4, [1, 4, -3]))\n        print(find_closest_segment(5, [1, 4, -3]))\n        print(find_closest_segment(6, [1, 4, -3]))\n        print(find_closest_segment(7, [1, 4, -3]))\n        print(find_closest_segment(8, [1, 4, -3]))\n        print(find_closest_segment(9, [1, 4, -3]))\n        print(find_closest_segment(10, [1, 4, -3]))\n\n        print(find_closest_segment(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(4, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(6, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(9, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(11, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(13, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(14, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(15, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(16, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(17, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(18, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(19, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n        print(find_closest_segment(20,\n            else:\n                print(p[i] - x)\n            break\n", "print(\"Hello\")\n", "x = int(input())\nn = int(input())\np = sorted([int(i) for i in input().split()])\n\nif x <= p[0]:\n    print(p[0] - x)\nelif x >= p[-1]:\n    print(x - p[-1])\nelse:\n    for i in range(1, n):\n        if x <= p[i]:\n            print(min(x - p[i - 1], p[i] - x))\n            break\n", "\nx = int(input().split()[0]) # read first integer\nn = int(input().split()[0]) # read second integer\np = [int(i) for i in input().split()] # read third integer\np.sort() # sort third integer\n\nif x <= p[0]:\n    print(p[0]-x)\nelif x >= p[-1]:\n    print(x-p[-1])\nelse:\n    for i in range(1, n):\n        if x <= p[i]:\n            print(min(x-p[i-1], p[i]-x))\n            break\n", "# this is a test file\n\n\nx = int(input())\n\nn = int(input())\n\np = list(map(int, input().split()))\n\np.sort()\n\nif x < p[0]:\n    print(p[0] - x)\nelif x > p[n - 1]:\n    print(x - p[n - 1])\nelse:\n    for i in range(1, n):\n        if p[i - 1] < x and x < p[i]:\n            if abs(p[i - 1] - x) < abs(p[i] - x):\n                print(p[i - 1] - x)\n            else:\n                print(p[i] - x)\n            break\n", "a, b = map(int, input().split())\nc, d = map(int, input().split())\n\nif a <= c and b >= d:\n    print(0)\nelif a <= c and b <= d:\n    print(d-b)\nelif a >= c and b >= d:\n    print(a-c)\nelse:\n    print(a-c + d-b)\n", "\n\nx = int(input())  # \u0447\u0438\u0441\u043b\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c\nn = int(input())  # \u0447\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\np = list(map(int, input().split()))  # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0447\u0438\u0441\u0435\u043b\n\np.sort()  # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\nif x < p[0]:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    print(p[0] - x)\nelif x > p[n-1]:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    print(x - p[n-1])\nelse:  # \u0438\u043d\u0430\u0447\u0435\n    for i in range(1, n):\n        if p[i-1] < x and x < p[i]:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435 \u043c\u0435\u0436\u0434\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n            if abs(p[i-1] - x) < abs(p[i] - x):  # \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u0447\u0438\u0441\u043b\u043e\u043c \u043c\u0435\u043d\u044c\u0448\u0435\n                print(p[i-1] - x)\n            else:\n                print(p[i] - x)\n            break\n", "\nimport sys\nx = int(input())  # the position of the center of the segment\nn = int(input())\np = list(map(int, input().split()))  # the positions of the centers of the segments\n\np.sort()\n\nif x < p[0]:\n    print(str(p[0] - x))\nelif x > p[n-1]:\n    print(str(x - p[n-1]))\nelse:\n    for i in range(1, n):\n        if p[i-1] < x and x < p[i]:\n            if abs(p[i-1] - x) < abs(p[i] - x):\n                print(str(p[i-1] - x))\n            else:\n                print(str(p[i] - x))\n            break\n"]