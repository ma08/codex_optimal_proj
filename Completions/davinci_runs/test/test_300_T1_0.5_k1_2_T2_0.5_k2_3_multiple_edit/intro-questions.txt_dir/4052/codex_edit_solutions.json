["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  file.py\n#  \n#  Copyright 2016 Dominique Revuz <dr@univ-mlv.fr>\n#  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "from flask import Flask, render_template, request, redirect, url_for, flash, jsonify\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom database_setup import Base, Restaurant, MenuItem\napp = Flask(__name__)\n\nengine = create_engine('sqlite:///restaurantmenu.db')\nBase.metadata.bind = engine\n\nDBSession = sessionmaker(bind=engine)\nsession = DBSession()\n\n\n@app.route('/restaurants/<int:restaurant_id>/menu/JSON')\ndef restaurantMenuJSON(restaurant_id):\n    restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()\n    items = session.query(MenuItem).filter_by(\n        restaurant_id=restaurant_id).all()\n    return jsonify(MenuItems=[i.serialize for i in items]) \n\n\n@app.route('/restaurants/<int:restaurant_id>/menu/<int:menu_id>/JSON')\ndef menuItemJSON(restaurant_id, menu_id):\n    Menu_Item = session.query(MenuItem).filter_by(id=menu_id).one()\n    return jsonify(Menu_Item=Menu_Item.serialize)\n\n\n@app.route('/restaurants/<int:restaurant_id>/')\ndef restaurantMenu(restaurant_id):\n    restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()\n    items = session.query(MenuItem).filter_by(restaurant_id=restaurant.id)\n    return render_template('menu.html', restaurant=restaurant, items=items)\n\n\n@app.route('/restaurants/<int:restaurant_id>/new/', methods=['GET', 'POST'])\ndef newMenuItem(restaurant_id):\n    if request.method == 'POST':\n        newItem = MenuItem(name=request.form['name'], restaurant_id=restaurant_id)\n        session.add(newItem)\n        session.commit()\n        flash(\"new menu item created!\")\n        return redirect(url_for('restaurantMenu', restaurant_id=restaurant_id))\n    else:\n        return render_template('newmenuitem.html', restaurant_id=restaurant_id)\n\n\n@app.route('/restaurants/<int:restaurant_id>/<int:menu_id>/edit/', methods=['GET', 'POST'])\ndef editMenuItem(restaurant_id, menu_id):\n    editedItem = session.query(MenuItem).filter_by(id=menu_id).one()\n    if request.method == 'POST':\n        if request.form['name']:\n            editedItem.name = request.form['name']\n        session.add(editedItem)\n        session.commit()\n        flash(\"menu item edited!\")\n        return redirect(url_for('restaurantMenu', restaurant_id=restaurant_id))\n    else:\n        return render_template('editmenuitem.html', restaurant_id=restaurant_id, menu_id=menu_id, item=editedItem)\n\n\n@app.route('/restaurants/<int:restaurant_id>/<int:menu_id>/delete/', methods=['GET', 'POST'])\ndef deleteMenuItem(restaurant_id, menu_id):\n    itemToDelete = session.query(MenuItem).filter_by(id=menu_id).one()\n    if request.method == 'POST':\n        session.delete(itemToDelete)\n        session.commit()\n        flash(\"menu item deleted!\")\n        return redirect(url_for('restaurantMenu', restaurant_id=restaurant_id))\n    else:\n        return render_template('deletemenuitem.html', item=itemToDelete)\n\n\nif __name__ == '__main__':\n    app.secret_key = 'super_secret_key'\n    app.debug = True\n    app.run(host='0.0.0.0', port=5000)\n", "# file\n\nprint(\"hello\")\n", "#include<iostream>\n#include<fstream>\n#include<string>\nusing namespace std;\nint main(){\n    string str;\n    ifstream inFile;\n    inFile.open(\"test.txt\");\n    while(!inFile.eof()){\n        getline(inFile,str);\n        cout<<str<<endl;\n    }\n    inFile.close();\n    return 0;\n}\n", "from flask import Flask, render_template, request, redirect, url_for, flash, jsonify\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom database_setup import Base, Restaurant, MenuItem\napp = Flask(__name__)\n\nengine = create_engine('sqlite:///restaurantmenu.db')\nBase.metadata.bind = engine\n\nDBSession = sessionmaker(bind=engine)\nsession = DBSession()\n\n\n@app.route('/restaurants/<int:restaurant_id>/menu/JSON')\ndef restaurantMenuJSON(restaurant_id):\n    restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()\n    items = session.query(MenuItem).filter_by(\n        restaurant_id=restaurant_id).all()\n    return jsonify(MenuItems=[i.serialize for i in items])\n\n\n@app.route('/restaurants/<int:restaurant_id>/menu/<int:menu_id>/JSON')\ndef menuItemJSON(restaurant_id, menu_id):\n    Menu_Item = session.query(MenuItem).filter_by(id=menu_id).one()\n    return jsonify(Menu_Item=Menu_Item.serialize)\n\n\n@app.route('/restaurants/<int:restaurant_id>/')\ndef restaurantMenu(restaurant_id):\n    restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()\n    items = session.query(MenuItem).filter_by(restaurant_id=restaurant.id).all()\n    return render_template('menu.html', restaurant=restaurant, items=items)\n\n\n@app.route('/restaurants/<int:restaurant_id>/new/', methods=['GET', 'POST'])\ndef newMenuItem(restaurant_id):\n    if request.method == 'POST':\n        newItem = MenuItem(name=request.form['name'], restaurant_id=restaurant_id)\n        session.add(newItem)\n        session.commit()\n        flash(\"new menu item created!\")\n        return redirect(url_for('restaurantMenu', restaurant_id=restaurant_id))\n    else:\n        return render_template('newmenuitem.html', restaurant_id=restaurant_id)\n\n\n@app.route('/restaurants/<int:restaurant_id>/<int:menu_id>/edit/', methods=['GET', 'POST'])\ndef editMenuItem(restaurant_id, menu_id):\n    editedItem = session.query(MenuItem).filter_by(id=menu_id).one()\n    if request.method == 'POST':\n        if request.form['name']:\n            editedItem.name = request.form['name']\n        session.add(editedItem)\n        session.commit()\n        flash(\"menu item edited!\")\n        return redirect(url_for('restaurantMenu', restaurant_id=restaurant_id))\n    else:\n        return render_template('editmenuitem.html', restaurant_id=restaurant_id, menu_id=menu_id, item=editedItem)\n\n\n@app.route('/restaurants/<int:restaurant_id>/<int:menu_id>/delete/', methods=['GET', 'POST'])\ndef deleteMenuItem(restaurant_id, menu_id):\n    itemToDelete = session.query(MenuItem).filter_by(id=menu_id).one()\n    if request.method == 'POST':\n        session.delete(itemToDelete)\n        session.commit()\n        flash(\"menu item deleted!\")\n        return redirect(url_for('restaurantMenu', restaurant_id=restaurant_id))\n    else:\n        return render_template('deletemenuitem.html', item=itemToDelete)\n\n\nif __name__ == '__main__':\n    app.secret_key = 'super_secret_key'\n    app.debug = True\n    app.run(host='0.0.0.0', port=5000)\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(input())\n    t = []\n    for i in range(n):\n        t.append(input())\n\n    # solve\n    for i in range(n):\n        if s[i] == t[i]:\n            print(0)\n        else:\n            # create a dictionary to store the number of occurrences of each character\n            d = {}\n            for j in range(len(s[i])):\n                if s[i][j] in d:\n                    d[s[i][j]] += 1\n                else:\n                    d[s[i][j]] = 1\n                if t[i][j] in d:\n                    d[t[i][j]] -= 1\n                else:\n                    d[t[i][j]] = -1\n            flag = True\n            for key in d:\n                if d[key] != 0:\n                    flag = False\n                    break\n            if flag:\n                k = 0\n                l = 0\n                count = 0\n                while k < len(s[i]) and l < len(t[i]):\n                    if s[i][k] == t[i][l]:\n                        k += 1\n                        l += 1\n                    else:\n                        k += 1\n                        count += 1\n                if count > 10000:\n                    print(-1)\n                else:\n                    print(count)\n                    k = 0\n                    l = 0\n                    while k < len(s[i]) and l < len(t[i]):\n                        if s[i][k] == t[i][l]:\n                            k += 1\n                            l += 1\n                        else:\n                            print(k, end=' ')\n                            k += 1\n                            count += 1\n            else:\n                print(-1)\n                if i != n - 1:\n                    i += 1\n\nmain()\n", "from flask import Flask, render_template, request, redirect, url_for, flash, jsonify\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom database_setup import Base, Restaurant, MenuItem, User\napp = Flask(__name__)\n\nengine = create_engine('sqlite:///restaurantmenu.db')\nBase.metadata.bind = engine\n\nDBSession = sessionmaker(bind=engine)\nsession = DBSession()\n\n\n@app.route('/restaurants/<int:restaurant_id>/menu/JSON')\ndef restaurantMenuJSON(restaurant_id):\n    restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()\n    items = session.query(MenuItem).filter_by(\n        restaurant_id=restaurant_id).all()\n    return jsonify(MenuItems=[i.serialize for i in items])\n\n\n@app.route('/restaurants/<int:restaurant_id>/menu/<int:menu_id>/JSON')\ndef menuItemJSON(restaurant_id, menu_id):\n    Menu_Item = session.query(MenuItem).filter_by(id=menu_id).one()\n    return jsonify(Menu_Item=Menu_Item.serialize)\n\n\n@app.route('/restaurants/<int:restaurant_id>/menu')\ndef restaurantMenu(restaurant_id):\n    restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()\n    items = session.query(MenuItem).filter_by(restaurant_id=restaurant.id)\n@app.route('/restaurants/<int:restaurant_id>/')\ndef restaurantMenu(restaurant_id):\n    restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()\n    items = session.query(MenuItem).filter_by(restaurant_id=restaurant.id)\n    return render_template('menu.html', restaurant=restaurant, items=items)\n\n\n    return render_template('menu.html', restaurant=restaurant, items=items)\n\n\n@app.route('/restaurants/<int:restaurant_id>/new/', methods=['GET', 'POST'])\ndef newMenuItem(restaurant_id):\n    if request.method == 'POST':\n        newItem = MenuItem(name=request.form['name'], restaurant_id=restaurant_id,\n                           user_id=1)\n        session.add(newItem)\n        session.commit()\n        flash(\"new menu item created!\")\n        return redirect(url_for('restaurantMenu', restaurant_id=restaurant_id))\n    else:\n        return render_template('newmenuitem.html', restaurant_id=restaurant_id)\n\n\n@app.route('/restaurants/<int:restaurant_id>/<int:menu_id>/edit/', methods=['GET', 'POST'])\ndef editMenuItem(restaurant_id, menu_id):\n    editedItem = session.query(MenuItem).filter_by(id=menu_id).one()\n    if request.method == 'POST':\n        if request.form['name']:\n            editedItem.name = request.form['name']\n        session.add(editedItem)\n        session.commit()\n        flash(\"menu item edited!\")\n        return redirect(url_for('restaurantMenu', restaurant_id=restaurant_id))\n    else:\n        return render_template('editmenuitem.html', restaurant_id=restaurant_id, menu_id=menu_id, item=editedItem)\n\n\n@app.route('/restaurants/<int:restaurant_id>/<int:menu_id>/delete/', methods=['GET', 'POST'])\ndef deleteMenuItem(restaurant_id, menu_id):\n    itemToDelete = session.query(MenuItem).filter_by(id=menu_id).one()\n    if request.method == 'POST':\n        session.delete(itemToDelete)\n        session.commit()\n        flash(\"menu item deleted!\")\n        return redirect(url_for('restaurantMenu', restaurant_id=restaurant_id))\n    else:\n        return render_template('deletemenuitem.html', item=itemToDelete)\n\n\nif __name__ == '__main__':\n    app.secret_key = 'super_secret_key'\n    app.debug = True\n    app.run(host='0.0.0.0', port=5000)\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input()\n\n    # solve\n    if s == t:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurrences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for k in d:\n            if d[k] != 0:\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            if count > 10000:\n                print(-1)\n            else:\n                print(count)\n                i = 0\n                j = 0\n                while i < n and j < n:\n                    if s[i] == t[j]:\n                        i += 1\n                        j += 1\n                    else:\n                        print(i, end=' ')\n                        i += 1\n                        count += 1\n        else:\n            print(-1)\n\nmain()\n", "\n\ndef main():\n    # read data for n sequences\n    n = int(input())\n    s = input()\n    t = input()\n\n    # solve\n    if s == t:\n        print(0)\n    else:\n        # create a dictionary to store the number of occurrences of each character\n        d = {}\n        for i in range(n):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n            if t[i] in d:\n                d[t[i]] -= 1\n            else:\n                d[t[i]] = -1\n        flag = True\n        for key in d:\n            if d[key] != 0:\n                flag = False\n                break\n        if flag:\n            i = 0\n            j = 0\n            count = 0\n            while i < n and j < n:\n                if s[i] == t[j]:\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    count += 1\n            if count > 10000:\n                print(-1)\n            else:\n                print(count)\n                i = 1\n                while i <= n:\n                    print(i, end=' ')\n                    i += 2\n        else:\n            print(-1)\n\nmain()\n"]