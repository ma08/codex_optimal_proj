["var fs = require('fs')\n\nvar file = fs.readFileSync(process.argv[2]).toString()\n\nvar newLines = file.split('\\n').length-1\n\nconsole.log(newLines)\n", "\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].strip().split())\n    a = list(map(int, lines[1].split()))\n    segments = [tuple(map(int, line.strip().split())) for line in lines[1:]]\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(f\"{max_diff}\\n\")\n        f.write(f\"{len(max_indices)}\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "This is a test file.\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].split())))\n\n    max_diff = -1\n    max_indices = set()\n    for i in range(m):\n        diff = 0\n        indices = set()\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.add(j + 1)\n            max_indices = indices\n        if diff > max_diff:\n            max_diff = diff\n\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].split())))\n    logging.info(f\"segments: {segments}\")\n\n    max_diff = 0\n    max_index = None\n    for i in range(m):\n        diff = 0\n        index = None\n        for j in range(m):\n            if j == i:\n                continue\n\n            logging.info(f\"diff: {diff}\")\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            index = j + 1\n        if diff > max_diff:\n            logging.info(f\"max_diff: {max_diff}\")\n            logging.info(f\"max_index: {max_index}\")\n            max_diff = diff\n            max_index = index\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(max_index) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=\"output.txt\")\n    args = parser.parse_args()\n\n    main(args)\n", "\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].split())))\n\n    max_diff = 0\n    max_indices = set()\n    for i in range(m):\n        diff = 0\n        indices = set()\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.add(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \" \")\n        f.write(\" \".join(map(str, max_indices)))\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "# GitLab\n\n## Introduction\n\nGitLab is the leading integrated product for modern software development. Connecting issue management, version control, code review, CI, CD, and monitoring into a single, easy-to-install application, we help teams go faster from planning to monitoring. GitLab provides a single data store, one user interface, and one permission model across the DevOps lifecycle allowing teams to collaborate, significantly reducing cycle time and focus exclusively on building great software quickly.\n\n## About this Chart\n\nThis chart bootstraps a [GitLab](https://gitlab.com) installation on a [Kubernetes](http://kubernetes.io) cluster using the [Helm](https://helm.sh) package manager.\n\n## Prerequisites\n\n- Kubernetes 1.6+ with Beta APIs enabled\n- PV provisioner support in the underlying infrastructure\n\n## Installing the Chart\n\nTo install the chart with the release name `my-release`:\n\n```console\n$ helm install --name my-release stable/gitlab\n```\n\nThe command deploys GitLab on the Kubernetes cluster in the default configuration. The [configuration](#configuration) section lists the parameters that can be configured during installation.\n\n> **Tip**: List all releases using `helm list`\n\n## Uninstalling the Chart\n\nTo uninstall/delete the `my-release` deployment:\n\n```console\n$ helm delete my-release\n```\n\nThe command removes all the Kubernetes components associated with the chart and deletes the release.\n\n## Configuration\n\nThe following table lists the configurable parameters of the GitLab chart and their default values.\n\n| Parameter                                          | Description                                                                                                                                                                                                                                                        | Default                                                                                                                                                          |\n| -------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `externalUrl`                                      | The GitLab URL.                                                                                                                                                                                                                                                    | `http://gitlab.example.com`                                                                                                                                        |\n| `image.registry`                                   | The GitLab image registry.                                                                                                                                                                                                                                         | `registry.gitlab.com`                                                                                                                                              |\n| `image.repository`                                 | The GitLab image repository.                                                                                                                                                                                                                                       | `gitlab/gitlab-ce`                                                                                                                                                  |\n| `image.tag`                                        | The GitLab image tag.                                                                                                                                                                                                                                             | `9.4.4-ce.0`                                                                                                                                                        |\n| `image.pullPolicy`                                 | The GitLab image pull policy.                                                                                                                                                                                                                                     | `IfNotPresent`                                                                                                                                                     |\n| `image.pullSecrets`                                | The GitLab image pull secrets.                                                                                                                                                                                                                                    | `[]`                                                                                                                                                               |\n| `gitlab.host`                                      | The GitLab host (without http/https).                                                                                                                                                                                                                             | `gitlab.example.com`                                                                                                                                                |\n| `gitlab.nginx.ssl.enabled`                         | Enable SSL for the GitLab web interface.                                                                                                                                                                                                                          | `false`                                                                                                                                                            |\n| `gitlab.nginx.ssl.certificate`                     | SSL certificate for the GitLab web interface.                                                                                                                                                                                                                     | `gitlab.example.com.crt`                                                                                                                                           |\n| `gitlab.nginx.ssl.certificateKey`                  | SSL certificate key for the GitLab web interface.                                                                                                                                                                                                                 | `gitlab.example.com.key`                                                                                                                                           |\n| `gitlab.sidekiq.resources.requests.cpu`            | The CPU resource requests for the Sidekiq process.                                                                                                                                                                                                                | `100m`                                                                                                                                                             |\n| `gitlab.sidekiq.resources.limits.cpu`              | The CPU resource limits for the Sidekiq process.                                                                                                                                                                                                                  | `500m`                                                                                                                                                             |\n| `gitlab.sidekiq.resources.requests.memory`         | The memory resource requests for the Sidekiq process.                                                                                                                                                                                                             | `256Mi`                                                                                                                                                            |\n| `gitlab.sidekiq.resources.limits.memory`           | The memory resource limits for the Sidekiq process.                                                                                                                                                                                                               | `512Mi`                                                                                                                                                            |\n| `gitlab.unicorn.resources.requests.cpu`            | The CPU resource requests for the Unicorn process.                                                                                                                                                                                                                | `100m`                                                                                                                                                             |\n| `gitlab.unicorn.resources.limits.cpu`              | The CPU resource limits for the Unicorn process.                                                                                                                                                                                                                  | `500m`                                                                                                                                                             |\n| `gitlab.unicorn.resources.requests.memory`         | The memory resource requests for the Unicorn process.                                                                                                                                                                                                             | `256Mi`                                                                                                                                                            |\n| `gitlab.unicorn.resources.limits.memory`           | The memory resource limits for the Unicorn process.                                                                                                                                                                                                               | `512Mi`                                                                                                                                                            |\n| `gitlab.unicorn.workerProcesses`                   | The number of Unicorn worker processes.                                                                                                                                                                                                                          | `2`                                                                                                                                                                |\n| `gitlab.minio.enabled`                             | Enable the Minio object storage server.                                                                                                                                                                                                                           | `false`                                                                                                                                                            |\n| `gitlab.minio.accessKey`                           | The Minio access key.                                                                                                                                                                                                                                             | `minio`                                                                                                                                                            |\n| `gitlab.minio.secretKey`                           | The Minio secret key.                                                                                                                                                                                                                                             | `minio123`                                                                                                                                                         |\n| `gitlab.minio.resources.requests.cpu`              | The CPU resource requests for the Minio process.                                                                                                                                                                                                                  | `100m`                                                                                                                                                             |\n| `gitlab.minio.resources.limits.cpu`                | The CPU resource limits for the Minio process.                                                                                                                                                                                                                    | `500m`                                                                                                                                                             |\n| `gitlab.minio.resources.requests.memory`           | The memory resource requests for the Minio process.                                                                                                                                                                                                               | `256Mi`                                                                                                                                                            |\n| `gitlab.minio.resources.limits.memory`             | The memory resource limits for the Minio process.                                                                                                                                                                                                                 | `512Mi`                                                                                                                                                            |\n| `gitlab.redis.persistence.enabled`                 | Enable a persistent Redis volume.                                                                                                                                                                                                                                 | `true`                                                                                                                                                             |\n| `gitlab.redis.persistence.size`                    | The Redis persistent volume size.                                                                                                                                                                                                                                | `8Gi`                                                                                                                                                              |\n| `gitlab.redis.resources.requests.cpu`              | The CPU resource requests for the Redis process.                                                                                                                                                                                                                  | `100m`                                                                                                                                                             |\n", "const fs = require('fs')\n\nconst file = fs.readFileSync(process.argv[2]).toString()\n\nconst newLines = file.split('\\n').length-1\n\nconsole.log(newLines)\n", "\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].rstrip().split())\n    a = list(map(int, lines[1].rstrip().split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].rstrip().split())))\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=\"output.txt\")\n    args = parser.parse_args()\n\n    main(args)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, lines[i + 2].split())))\n\n    max_diff = 0\n    max_indices = set()\n    for i in range(m):\n        diff = 0\n        indices = set()\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j][0], segments[j][1]\n            diff += sum(a[l - 1:r])\n            indices.add(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    # lines = args.input_file.readlines()\n    # n, m = map(int, lines[0].split())\n    # a = list(map(int, lines[1].split()))\n    # segments = []\n    # for i in range(m):\n    #     segments.append(tuple(map(int, lines[i + 2].split())))\n\n    # max_diff = 0\n    # max_indices = set()\n    # for i in range(m):\n    #     diff = 0\n    #     indices = set()\n    #     for j in range(m):\n    #         if j == i:\n    #             continue\n\n    #         l, r = segments[j]\n    #         diff += sum(a[l - 1:r])\n    #         indices.add(j + 1)\n    #     if diff > max_diff:\n    #         max_diff = diff\n    #         max_indices = indices\n\n    # with open(args.output_file, \"w\") as f:\n    #     f.write(str(max_diff) + \"\\n\")\n    #     f.write(str(len(max_indices)) + \"\\n\")\n    #     f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(1, m + 1):\n        segments.append(tuple(map(int, lines[i].split())))\n\n    max_diff = 0\n    max_index = None\n    for i in range(m):\n        diff = 0\n        index = None\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            index = j + 1\n        if diff > max_diff:\n            max_diff = diff\n            max_index = index\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(max_index) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m - 1):\n        segments.append(tuple(map(int, lines[i + 2].split())))\n\n    max_diff = 0\n    max_index = None\n    for i in range(m - 1):\n        diff = 0\n        index = None\n        for j in range(m - 1):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            index = j + 1\n        if diff > max_diff:\n            max_diff = diff\n            max_index = index\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(max_index) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n"]