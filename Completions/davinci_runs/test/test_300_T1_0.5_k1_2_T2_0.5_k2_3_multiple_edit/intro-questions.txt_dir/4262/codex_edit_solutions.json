["\n\n# My answer (Not the best one)\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1): # from n-1 to 0 (decreasing)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0 # Order of P\nQ_order = 0 # Order of Q\nfor i in range(len(permutations)):\n    if permutations[i] == P: # Find the order of P\n        P_order = i+1\n    if permutations[i] == Q: # Find the order of Q\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "def swap(l, i, j):\n    temp = l[i]\n    l[i] = l[j]\n    l[j] = temp\n    return l\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split())[:N])\n    Q = list(map(int, input().split())[:N])\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P = swap(P, i, j)\n                count += 1\n            if Q[i] > Q[j]:\n                Q = swap(Q, i, j)\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# My answer (Not the best one)\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(1, N+1):\n    permutations.append(i)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "\n# \u5165\u529b\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n\ndef main():\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = P[j], P[i]\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = Q[j], Q[i]\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# \u5165\u529b\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n\ndef main():\n    count1 = 0\n    count2 = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                count1 += 1\n            if Q[i] > Q[j]:\n                count2 += 1\n    print(count1)\n    print(count2)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "# My answer \n\n\n# Making permutations of size N\ndef permutation(n, r, permutations):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1, permutations)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "\nimport itertools\n# My answer (Not the best one)\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N (1, 2, ..., N)\npermutations = itertools.permutations(range(1, N+1), N)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "\ndef swap(p, q):\n    p, q = q, p\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count_p = 0\n    count_q = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count_p += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count_q += 1\n    print(count_p-count_q)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N-1):\n            if P[i] > P[j+1]:\n                P[i], P[j+1] = swap(P[i], P[j+1])\n                count += 1\n            if Q[i] > Q[j+1]:\n                Q[i], Q[j+1] = swap(Q[i], Q[j+1])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "# \u5165\u529b\nN = int(input())\nP = list(map(int, input().split()))  # P[i]\u306fi\u756a\u76ee\u306e\u82b1\u306e\u8272\nQ = list(map(int, input().split()))  # Q[i]\u306fi\u756a\u76ee\u306e\u82b1\u306e\u8272\n\n\ndef bubble_sort(arr):\n    count = 0\n    for i in range(N):\n        for j in range(N - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                count += 1\n    return count\n\n\ndef main():\n    count_P = bubble_sort(P)\n    count_Q = bubble_sort(Q)\n    print(count_P + count_Q)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "\nimport itertools\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N and putting it in a list\npermutations = list(itertools.permutations(range(1, N+1)))\n\n# Counting the order of P and Q in permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if list(permutations[i]) == P:\n        P_order = i+1\n    if list(permutations[i]) == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "\n\n\n# Making permutations of size N\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "\n\n# import itertools\n#\n# N = int(input())\n# P = list(map(int, input().split()))\n# Q = list(map(int, input().split()))\n#\n# permutations = list(itertools.permutations(range(1, N+1)))\n#\n# # Counting the order of P and Q\n# P_order = 0\n# Q_order = 0\n# for i in range(len(permutations)):\n#     if permutations[i] == tuple(P):\n#         P_order = i+1\n#     if permutations[i] == tuple(Q):\n#         Q_order = i+1\n#\n# print(abs(P_order-Q_order))\n\n# My answer 2\n# My answer \n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\nP_order = 0\nQ_order = 0\nfor i, permutation in enumerate(permutations):\n    if permutation == P:\n        P_order = i + 1\n    if permutation == Q:\n        Q_order = i + 1\n\nprint(abs(P_order-Q_order))\n"]