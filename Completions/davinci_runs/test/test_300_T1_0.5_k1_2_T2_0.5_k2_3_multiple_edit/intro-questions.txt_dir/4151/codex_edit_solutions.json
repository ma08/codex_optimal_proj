["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    assert 2 <= n <= 2 * 10 ** 5\n    assert len(a) == n\n    assert all(1 <= x <= 10 ** 9 for x in a)\n\n    # TODO: solve the problem\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    mod = 998244353\n    ans = 1\n    for i in range(len(d)):\n        if i == 0:\n            ans = (ans * pow(2, d[i][1], mod)) % mod\n        else:\n            ans = (ans * d[i][1]) % mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().split()))\n    assert 2 <= n <= 2 * 10 ** 5\n    assert len(a) == n\n    assert all(1 <= x <= 10 ** 9 for x in a)\n\n    # TODO: solve the problem\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef modpow(a, n, mod):\n    res = 1\n    while n > 0:\n        if n & 1:\n            res = res * a % mod\n        a = a * a % mod\n        n >>= 1\n    return res\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    mod = 998244353\n    ans = 1\n    for i in range(len(d)):\n        if i == 0:\n            ans = (ans * modpow(2, d[i][1]-1, mod)) % mod\n        else:\n            ans = (ans * d[i][1]) % mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    d = sorted(d.items(), key=lambda x: x[1], reverse=True)  # d.items() -> list of tuples\n    mod = 998244353\n    ans = 1\n    for i in range(len(d)):\n        if i == 0:\n            ans = (ans * pow(2, d[i][1], mod)) % mod\n        else:\n            ans = (ans * d[i][1]) % mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    assert 2 <= n <= 2 * 10**5\n    assert len(a) == n\n    assert all(1 <= x <= 10**9 for x in a)\n    # TODO: solve the problem.\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    mod = 998244353\n    ans = 1\n    for i in range(len(d)):\n        if i == 0:\n            ans = (ans * pow(2, d[i][1] - 1, mod)) % mod\n        else:\n            ans = (ans * d[i][1]) % mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    mod = 998244353\n    ans = 1\n    for i in range(len(d)):\n        if i == 0:\n            ans = (ans * pow(2, d[i][1]-1, mod)) % mod\n        else:\n            ans = (ans * d[i][1]) % mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\n# sys.stdin = open('input.txt', 'r')\nimport sys\n\ndef main():\n    # n = int(sys.stdin.readline().strip())\n    # a = list(map(int, sys.stdin.readline().strip().split()))\n    # assert 2 <= n <= 2 * 10**5\n    # assert len(a) == n\n    # assert all(1 <= x <= 10**9 for x in a)\n\n    # TODO: solve the problem.\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    assert 1 <= n <= 10**5\n    assert 1 <= m <= 10**5\n\n    # TODO: solve the problem.\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert 2 <= n <= 2 * 10 ** 5, \"n is not in [2..2*10**5]\"\n    assert len(a) == n, \"Wrong number of elements\"\n    assert all(1 <= x <= 10 ** 9 for x in a), \"All elements are not in [1..10**9]\"\n\n    # TODO: solve the problem\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    cnt = 0\n    if a[-1] < b[0]:\n        cnt += math.ceil(n / m)\n        a = b\n    while len(a) > 0:\n        print(a, b)\n        if a[-1] < b[0]:\n            cnt += math.ceil(len(a) / m)\n            a = b\n        else:\n            for i in range(len(b)):\n                if b[i] > a[-1]:\n                    a = a + b[:i]\n                    break\n            b = b[i:]\n    print(cnt)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    d = sorted(d.items(), key=lambda x: x[1])\n    mod = 998244353\n    ans = 1\n    for i in range(len(d)):\n        if i == 0:\n            ans = (ans * pow(2, d[i][1] - 1, mod)) % mod\n        else:\n            ans = (ans * d[i][1]) % mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    d = sorted(d.items(), key=lambda x:x[1], reverse=True)\n    mod = 998244353\n    ans = 1\n    for i in range(len(d)):\n        if i == 0:\n            ans = (ans * pow(2, d[i][1], mod)) % mod\n        else:\n            ans = (ans * d[i][1]) % mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"]