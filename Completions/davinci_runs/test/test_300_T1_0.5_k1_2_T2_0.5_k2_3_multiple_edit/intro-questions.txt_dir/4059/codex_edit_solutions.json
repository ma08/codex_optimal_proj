["\nn = int(input())\n\nans = 0\nfor a in range(1, n + 1):\n    for b in range(1, n + 1):\n        c = n - a * b \n        if c > 0:\n            ans += 1\n\nprint(ans)\n", "n = int(input())\n\nans = 0\nfor a in range(1, n + 1):\n    for b in range(1, n + 1):\n        c = n - a * b\n        if c > 0:\n            ans += 1\n\nprint(ans)\n", "\nN = int(input())\n\ncount = 0\nfor a in range(1, N+1):\n    for b in range(1, N+1):\n        c = N - a - b\n        if c > 0:\n            count += 1\n\nprint(count)\n", "\n\nn = int(input())\n\nans = 0\nfor a in range(1, n + 1):\n    for b in range(1, n + 1):\n        c = n - a * b\n        if c > 0:\n            ans += 1\n\nprint(ans)\n", "\nN = int(input())\n\ncount = 0\nfor a in range(1, N+1):\n    for b in range(1, N+1):\n        c = N - a * b\n        if c > 0:\n            count += 1\n\nprint(count)\n", "import sys\ninput = sys.stdin.readline\n\n\nN = int(input())\n\nans = 0 \nfor a in range(1, N + 1):\n    for b in range(1, N + 1):\n        if a * b <= N:\n            ans += 1\n\nprint(ans) \n", "#!/usr/bin/env python\n# coding: utf-8\nN = int(input())\n\nans = 0\nfor i in range(1, int(N ** 0.5) + 1):\n    if N % i == 0:\n        ans += 1\n        if i != N // i:\n            ans += 1\n\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\n\nN = int(input())\n\nans = 0\nfor a in range(1, N + 1):\n    for b in range(1, N + 1):\n        c = N - a * b\n        if c > 0:\n            ans += 1\n\nprint(ans)\n", "\n\nN = int(input()) # input the number of sides\n\ncount = 0\nfor a in range(1, N+1):\n    for b in range(1, N+1):\n        c = N - a*b # c is the number of the third side, c > 0\n        if c > 0:\n            count += 1\n\nprint(count)\n", "import numpy as np\nimport pandas as pd\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\n\n# Load the dataset\nin_file = 'titanic_data.csv'\nfull_data = pd.read_csv(in_file)\n\n# Store the 'Survived' feature in a new variable and remove it from the dataset\noutcomes = full_data['Survived']\nfeatures_raw = full_data.drop('Survived', axis = 1)\n\nprint(count)\n", "n = int(input())\n\nans = 0\nfor a in range(1, n + 1):\n    for b in range(1, n + 1):\n        if n - a * b > 0:\n            ans += 1\n\nprint(ans)\n", "\nN = int(input()) # input the number of test cases\n\ncount = 0\nfor a in range(1, N+1):\n    for b in range(1, N+1):\n        c = N - a*b # c is the number of the third side\n        if c > 0:\n            count += 1\n\nprint(count)\n", "n = int(input())\n\nans = 0\nfor a in range(1, n + 1):\n    for b in range(1, n + 1):\n        c = n - a - b\n        if c > 0:\n            ans += 1\n\nprint(ans)\n", "N = int(input())\n\ncount = 0\nfor a in range(1, N+1):\n    for b in range(1, N+1):\n        c = N - a - b\n        if c > 0:\n            count += 1\n\nprint(count)\n", "import math\n\nn = int(input())\n\nans = 0\nfor a in range(1, int(math.sqrt(n)) + 1):\n    b = n // a\n    if a * b == n:\n        ans += b\n        if a != b:\n            ans += a\n\nprint(ans)\n"]