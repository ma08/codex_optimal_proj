["\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n", "\n\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "# coding: utf-8\n\ndef solve():\n    n, m = map(int, input().split())\n    broken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n", "\nimport numpy as np\n\n\ndef main():\n    N, M = map(int, input().split())\n    broken_step = [int(input()) for _ in range(M)]\n    broken_step.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_step:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\nbroken = set(map(int, [input() for _ in range(n)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n", "\nn, m = map(int, input().split())\nbroken = set(map(int, input().split()))\n\ndp = [0 for _ in range(n+1)]\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport sys\nimport numpy as np\n\n\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport sys\nimport numpy as np\nsys.setrecursionlimit(10**7)\n\n\ndef main():\n    N, M = map(int, input().split())\n    broken_stairs = [int(input()) - 1 for _ in range(M)]\n    broken_stairs.sort()\n    dp[1] = 2\n    dp[2] = 4\n    for i in range(3, N+1):\n        if i in broken_stairs: continue\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n    print(dp[N] % 1000000007)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_stair = [int(input()) for _ in range(M)]\n    broken_stair.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_stair:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "n, m = map(int, input().split())\nbroken = set(map(int, input().split()))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n", "\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_stair = [int(input()) for _ in range(M)]\n    broken_stair.sort()\n    dp = np.zeros(N+1, dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_stair:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(n)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\n\n\n# \uc608\uc678\ucc98\ub9ac\ndef main():\n    try:\n        a, b = map(int, input().split())\n        print(a+b)\n    except:\n        print(\"\uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n# \uc785\ub825\uac12\uc774 \uc5c6\uc73c\uba74 \ubc14\ub85c \uc885\ub8cc\n# \uc785\ub825\uac12\uc774 \uc788\uc73c\uba74 \ubc14\ub85c \uc885\ub8cc\nimport sys\n\n\ndef main():\n    while True:\n        try:\n            a, b = map(int, input().split())\n            print(a+b)\n        except:\n            sys.exit(0)\n\n\nif __name__ == \"__main__\":\n    main()\nprint(dp[n] % 1000000007)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport sys\nimport numpy as np\n\n\n\ndef main():\n    N, M = map(int, input().split())\n    broken_stairs = [int(i) for i in input().split()]\n    broken_stairs.sort()\n    dp = np.zeros(N+1, dtype=np.int)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):  # i is the current stair\n        if i in broken_stairs:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % (10**9+7)  # mod\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n"]