2022-04-24 17:04:14.733613 num operations 2
2022-04-24 17:04:14.733630 size on input set 1
2022-04-24 17:04:14.733781 using api key jaanu
2022-04-24 17:04:23.196863 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1] # prefix sum\n        suffix = acc[k-1:] + [0] # suffix sum\n        max_suffix = [0] # max suffix sum\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k-1, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650819854,
  "object": "edit"
}
2022-04-24 17:04:23.197061 fix spelling mistakes 3 ['\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1] # prefix sum\n        suffix = acc[k-1:] + [0] # suffix sum\n        max_suffix = [0] # max suffix sum\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k-1, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-24 17:04:23.197103 size on output set 3
2022-04-24 17:04:23.197111 size on input set 3
2022-04-24 17:04:23.197243 using api key sunu
2022-04-24 17:04:32.059478 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a) * n\n    else:\n        acc = [0] + list(accumulate(a))\n        prefix = acc[:n-k+1] # prefix sum\n        suffix = acc[k:] + [0] # suffix sum\n        max_suffix = [0] # max suffix sum\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1] # prefix sum\n        suffix = acc[k-1:] + [0] # suffix sum\n        max_suffix = [0] # max suffix sum\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1] # prefix sum\n        suffix = acc[k-1:] + [0] # suffix sum\n        max_suffix = [0] # max suffix sum\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650819863,
  "object": "edit"
}
2022-04-24 17:04:32.059675 fix syntax errors 3 ['\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a) * n\n    else:\n        acc = [0] + list(accumulate(a))\n        prefix = acc[:n-k+1] # prefix sum\n        suffix = acc[k:] + [0] # suffix sum\n        max_suffix = [0] # max suffix sum\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1] # prefix sum\n        suffix = acc[k-1:] + [0] # suffix sum\n        max_suffix = [0] # max suffix sum\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1] # prefix sum\n        suffix = acc[k-1:] + [0] # suffix sum\n        max_suffix = [0] # max suffix sum\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-24 17:04:32.059933 using api key sunu
2022-04-24 17:04:43.189863 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = acc[:n-k+1]\n        suffix = acc[k-1:]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k-1, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]  # TODO: fix this\n        max_suffix = [0]\n        for i in range(n-k-1, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650819872,
  "object": "edit"
}
2022-04-24 17:04:43.190091 fix syntax errors 3 ['\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = acc[:n-k+1]\n        suffix = acc[k-1:]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k-1, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]  # TODO: fix this\n        max_suffix = [0]\n        for i in range(n-k-1, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-24 17:04:43.190255 using api key sunu
2022-04-24 17:04:49.699410 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "from sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "from sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650819883,
  "object": "edit"
}
2022-04-24 17:04:49.699593 fix syntax errors 3 ['\nfrom sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', 'from sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n', 'from sys import stdin\nfrom itertools import accumulate\n\ndef solve(n, k, x, a):\n    if x < k:\n        return -1\n    elif k == 1:\n        return sum(a)\n    else:\n        acc = list(accumulate(a))\n        prefix = [0] + acc[:n-k+1]\n        suffix = acc[k-1:] + [0]\n        max_suffix = [0]\n        for i in range(n-k, -1, -1):\n            max_suffix.append(max(max_suffix[-1], suffix[i]))\n        max_suffix = max_suffix[::-1]\n        res = 0\n        for i in range(n-k+1):\n            res = max(res, prefix[i]+max_suffix[i+1])\n        return res\n\ndef main():\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print(solve(n, k, x, a))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-24 17:04:49.699698 size on output set 7
2022-04-24 17:04:49.699712 num operations 2
2022-04-24 17:04:49.699718 size on input set 1
2022-04-24 17:04:49.699841 using api key soukgp
2022-04-24 17:05:06.303351 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the $i$-th segment of length $k$ and we have reposted $j$ pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If $i < k$ then we have not yet reached the first segment of length $k$.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If $i = k$ then we have reached the first segment of length $k$.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If $i > k$ then we are in the middle of some segment of length $k$.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of $i$ and $j$ using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the $i$-th segment of length $k$ and we have reposted $j$ pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If $i < k$ then we have not yet reached the first segment of length $k$.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If $i = k$ then we have reached the first segment of length $k$.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If $i > k$ then we are in the middle of some segment of length $k$.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of $i$ and $j$ using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the $i$-th segment of length $k$ and we have posted $j$ pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If $i < k$ then we have not yet reached the first segment of length $k$.\n#      In this case we can only post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If $i = k$ then we have reached the first segment of length $k$.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If $i > k$ then we are in the middle of some segment of length $k$.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of $i$ and $j$ using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    }
  ],
  "created": 1650819889,
  "object": "edit"
}
2022-04-24 17:05:06.303545 fix spelling mistakes 3 ["\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the $i$-th segment of length $k$ and we have reposted $j$ pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If $i < k$ then we have not yet reached the first segment of length $k$.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If $i = k$ then we have reached the first segment of length $k$.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If $i > k$ then we are in the middle of some segment of length $k$.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of $i$ and $j$ using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the $i$-th segment of length $k$ and we have reposted $j$ pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If $i < k$ then we have not yet reached the first segment of length $k$.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If $i = k$ then we have reached the first segment of length $k$.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If $i > k$ then we are in the middle of some segment of length $k$.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of $i$ and $j$ using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the $i$-th segment of length $k$ and we have posted $j$ pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If $i < k$ then we have not yet reached the first segment of length $k$.\n#      In this case we can only post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If $i = k$ then we have reached the first segment of length $k$.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If $i > k$ then we are in the middle of some segment of length $k$.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of $i$ and $j$ using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"]
2022-04-24 17:05:06.303693 size on output set 2
2022-04-24 17:05:06.303703 size on input set 2
2022-04-24 17:05:06.303818 using api key derek
2022-04-24 17:05:26.243499 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures\n#   if we are at the end of the $i$-th segment of length $k$ and we have posted $j$ pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If $i < k$ then we have not yet reached the first segment of length $k$.\n#      In this case we can only post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If $i = k$ then we have reached the first segment of length $k$.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If $i > k$ then we are in the middle of some segment of length $k$.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of $i$ and $j$ using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have posted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - k][j - 1].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have posted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    }
  ],
  "created": 1650819906,
  "object": "edit"
}
2022-04-24 17:05:26.243696 fix syntax errors 3 ["\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures\n#   if we are at the end of the $i$-th segment of length $k$ and we have posted $j$ pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If $i < k$ then we have not yet reached the first segment of length $k$.\n#      In this case we can only post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If $i = k$ then we have reached the first segment of length $k$.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If $i > k$ then we are in the middle of some segment of length $k$.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of $i$ and $j$ using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have posted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - k][j - 1].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have posted j pictures.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can post the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a[i - 1].\n#        b. We can not post the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"]
2022-04-24 17:05:26.243962 using api key derek
2022-04-24 17:05:39.178682 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"
    }
  ],
  "created": 1650819926,
  "object": "edit"
}
2022-04-24 17:05:39.178896 fix syntax errors 3 ["\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n", "\n\n# SOLUTION\n# Let's solve this problem using dynamic programming.\n# We will store the answer in the following array:\n#   dp[i][j] is the maximum possible sum of values of reposted pictures if we are at the end of the i-th segment of length k and we have reposted j pictures so far.\n# The answer to our problem is dp[n][x].\n#\n# Now let's consider the following cases:\n#   1. If i < k then we have not yet reached the first segment of length k.\n#      In this case we can only repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#   2. If i = k then we have reached the first segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - k][j].\n#   3. If i > k then we are in the middle of some segment of length k.\n#      In this case we have two options:\n#        a. We can repost the current picture and the answer is dp[i][j] = dp[i - 1][j - 1] + a_i.\n#        b. We can not repost the current picture and the answer is dp[i][j] = dp[i - 1][j].\n#\n# We can calculate the answer for all values of i and j using these three cases.\n# The answer to our problem is dp[n][x].\n#\n# Time Complexity: O(n * x)\n# Space Complexity: O(n * x)\n\nimport sys\nreadline = sys.stdin.readline\n\nn, k, x = map(int, readline().split())\na = list(map(int, readline().split()))\n\ndp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, min(i, x) + 1):\n        if i < k:\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n        elif i == k:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - k][j])\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + a[i - 1], dp[i - 1][j])\n\nif dp[n][x] == 0:\n    print(-1)\nelse:\n    print(dp[n][x])\n"]
2022-04-24 17:05:39.179040 size on output set 4
