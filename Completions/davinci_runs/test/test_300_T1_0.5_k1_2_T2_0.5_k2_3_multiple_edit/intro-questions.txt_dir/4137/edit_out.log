2022-04-24 17:44:57.409182 num operations 2
2022-04-24 17:44:57.409192 size on input set 1
2022-04-24 17:44:57.409316 using api key soukgp
2022-04-24 17:45:06.897080 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    # print(result)\n    return result\n\ndef bf_solve(expr):\n    result = eval(expr)\n    # print(result)\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bfs_solve(expr):\n    result = bfs_eval(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # bfs_solve(expr)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr, bf):\n    result = eval(expr, bf)\n    # print(result)\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr, bf)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650822297,
  "object": "edit"
}
2022-04-24 17:45:06.897298 fix spelling mistakes 3 ["\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    # print(result)\n    return result\n\ndef bf_solve(expr):\n    result = eval(expr)\n    # print(result)\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bfs_solve(expr):\n    result = bfs_eval(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # bfs_solve(expr)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr, bf):\n    result = eval(expr, bf)\n    # print(result)\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr, bf)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 17:45:06.897330 size on output set 3
2022-04-24 17:45:06.897337 size on input set 3
2022-04-24 17:45:06.897457 using api key derek
2022-04-24 17:45:20.363714 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr, bf):\n    result = eval(expr, bf)\n    # print(result)\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr, {})\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys, re\n\ndef solve(expr):\n\tresult = eval(expr)\n\tprint(result)\n\treturn result\n\ndef bf_solve(expr, bf):\n\tresult = eval(expr, bf)\n\t# print(result)\n\treturn result\n\ndef encode(expr):\n\tresult = bf_solve(expr, bf)\n\tprint(result)\n\ndef main():\n\texpr = sys.stdin.readline().strip()\n\t# print(expr)\n\tsolve(expr)\n\t# encode(expr)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\n\ndef bf_solve(expr, bf):\n    result = eval(expr, bf)\n    # print(result)\n\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr, bf)\n    print(result)\n\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650822306,
  "object": "edit"
}
2022-04-24 17:45:20.363897 fix syntax errors 3 ["\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr, bf):\n    result = eval(expr, bf)\n    # print(result)\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr, {})\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys, re\n\ndef solve(expr):\n\tresult = eval(expr)\n\tprint(result)\n\treturn result\n\ndef bf_solve(expr, bf):\n\tresult = eval(expr, bf)\n\t# print(result)\n\treturn result\n\ndef encode(expr):\n\tresult = bf_solve(expr, bf)\n\tprint(result)\n\ndef main():\n\texpr = sys.stdin.readline().strip()\n\t# print(expr)\n\tsolve(expr)\n\t# encode(expr)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\nimport re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\n\ndef bf_solve(expr, bf):\n    result = eval(expr, bf)\n    # print(result)\n\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr, bf)\n    print(result)\n\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 17:45:20.364042 using api key soukgp
2022-04-24 17:45:33.361001 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef bfs_eval(expr):\n    pass\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bfs_solve(expr):\n    result = bfs_eval(expr)\n    return result\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # bfs_solve(expr)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef bfs_eval(expr):\n    return expr\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bfs_solve(expr):\n    result = bfs_eval(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # bfs_solve(expr)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import deque\n\ndef bfs_eval(expr):\n    ops = {\n        '+': lambda a, b: a + b,\n        '-': lambda a, b: a - b,\n        '*': lambda a, b: a * b,\n        '/': lambda a, b: a / b,\n    }\n\n    q = deque()\n    q.append(expr)\n\n    while len(q) > 0:\n        expr = q.popleft()\n        print(expr)\n        if re.search(r'^[0-9]+$', expr):\n            return int(expr)\n        for i in range(len(expr)):\n            if expr[i] in ops.keys():\n                expr_left = expr[:i]\n                expr_right = expr[i+1:]\n                q.append(str(ops[expr[i]](bfs_eval(expr_left), bfs_eval(expr_right))))\n                break\n    return None\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bfs_solve(expr):\n    result = bfs_eval(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    # solve(expr)\n    bfs_solve(expr)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650822320,
  "object": "edit"
}
2022-04-24 17:45:33.361204 fix syntax errors 3 ["\n\n\ndef bfs_eval(expr):\n    pass\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bfs_solve(expr):\n    result = bfs_eval(expr)\n    return result\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # bfs_solve(expr)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef bfs_eval(expr):\n    return expr\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bfs_solve(expr):\n    result = bfs_eval(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # bfs_solve(expr)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import deque\n\ndef bfs_eval(expr):\n    ops = {\n        '+': lambda a, b: a + b,\n        '-': lambda a, b: a - b,\n        '*': lambda a, b: a * b,\n        '/': lambda a, b: a / b,\n    }\n\n    q = deque()\n    q.append(expr)\n\n    while len(q) > 0:\n        expr = q.popleft()\n        print(expr)\n        if re.search(r'^[0-9]+$', expr):\n            return int(expr)\n        for i in range(len(expr)):\n            if expr[i] in ops.keys():\n                expr_left = expr[:i]\n                expr_right = expr[i+1:]\n                q.append(str(ops[expr[i]](bfs_eval(expr_left), bfs_eval(expr_right))))\n                break\n    return None\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bfs_solve(expr):\n    result = bfs_eval(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    # solve(expr)\n    bfs_solve(expr)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 17:45:33.361428 using api key soukgp
2022-04-24 17:45:54.697005 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr):\n    result = \"\"\n    for c in expr:\n        result += c\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr):\n    result = eval(expr) # eval is not safe\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    # print(result)\n    return result\n\ndef bf_solve(expr):\n    result = bf_eval(expr)\n    # print(result)\n    return result\ndef bf_eval(expr):\n    expr = re.sub(\"\\d+\", \"\", expr)\n    # print(\"expr\",expr)\n    if len(expr) == 0:\n        return 0\n    if len(expr) == 1:\n        return 1\n    if len(expr) == 2:\n        return 2\n    if expr[0] == '+' and expr[1] == '+':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == '-' and expr[1] == '-':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == '*' and expr[1] == '*':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == '/' and expr[1] == '/':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == '+' and expr[1] == '-':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == '-' and expr[1] == '+':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == '*' and expr[1] == '/':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == '/' and expr[1] == '*':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == '+':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == '-':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == '*':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == '/':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == '(':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == ')':\n        return bf_eval(expr[1:]) + 1\n\n\ndef encode(expr):\n    # print(result)\n    # print(bf_solve(expr))\n    print(bf_solve(expr) - result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    # solve(expr)\n    encode(expr)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650822333,
  "object": "edit"
}
2022-04-24 17:45:54.697194 fix syntax errors 3 ['\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr):\n    result = ""\n    for c in expr:\n        result += c\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    solve(expr)\n    # encode(expr)\n\nif __name__ == \'__main__\':\n    main()\n', "\n\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    print(result)\n    return result\n\ndef bf_solve(expr):\n    result = eval(expr) # eval is not safe\n    return result\n\ndef encode(expr):\n    result = bf_solve(expr)\n    print(result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    solve(expr)\n    # encode(expr)\n\nif __name__ == '__main__':\n    main()\n", '\nimport math\nimport sys, re\n\ndef solve(expr):\n    result = eval(expr)\n    # print(result)\n    return result\n\ndef bf_solve(expr):\n    result = bf_eval(expr)\n    # print(result)\n    return result\ndef bf_eval(expr):\n    expr = re.sub("\\d+", "", expr)\n    # print("expr",expr)\n    if len(expr) == 0:\n        return 0\n    if len(expr) == 1:\n        return 1\n    if len(expr) == 2:\n        return 2\n    if expr[0] == \'+\' and expr[1] == \'+\':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == \'-\' and expr[1] == \'-\':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == \'*\' and expr[1] == \'*\':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == \'/\' and expr[1] == \'/\':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == \'+\' and expr[1] == \'-\':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == \'-\' and expr[1] == \'+\':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == \'*\' and expr[1] == \'/\':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == \'/\' and expr[1] == \'*\':\n        return bf_eval(expr[2:]) + 2\n    if expr[0] == \'+\':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == \'-\':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == \'*\':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == \'/\':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == \'(\':\n        return bf_eval(expr[1:]) + 1\n    if expr[0] == \')\':\n        return bf_eval(expr[1:]) + 1\n\n\ndef encode(expr):\n    # print(result)\n    # print(bf_solve(expr))\n    print(bf_solve(expr) - result)\n\ndef main():\n    expr = sys.stdin.readline().strip()\n    # print(expr)\n    # solve(expr)\n    encode(expr)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-24 17:45:54.697235 size on output set 9
2022-04-24 17:45:54.697247 num operations 2
2022-04-24 17:45:54.697253 size on input set 1
2022-04-24 17:45:54.697372 using api key soukgp
2022-04-24 17:46:03.976887 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i]\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650822354,
  "object": "edit"
}
2022-04-24 17:46:03.977208 fix spelling mistakes 3 ["\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i]\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 17:46:03.977317 size on output set 3
2022-04-24 17:46:03.977325 size on input set 3
2022-04-24 17:46:03.977445 using api key jaanu
2022-04-24 17:46:13.368173 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i]\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + ' '.join(expr)\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i]\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650822364,
  "object": "edit"
}
2022-04-24 17:46:13.368484 fix syntax errors 3 ["\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i]\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + ' '.join(expr)\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n", "\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i]\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = ''\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 17:46:13.368701 using api key derek
2022-04-24 17:46:22.086582 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * (len(expr) - 1)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport re\n\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split(' ')\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split(' ')\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650822373,
  "object": "edit"
}
2022-04-24 17:46:22.086858 fix syntax errors 3 ["\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * (len(expr) - 1)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport re\n\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split(' ')\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split(' ')\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '[>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '<-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 17:46:22.087070 using api key kouti
2022-04-24 17:46:29.330024 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650822382,
  "object": "edit"
}
2022-04-24 17:46:29.330332 fix syntax errors 3 ["\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0] + ' '\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport re\n\ndef brainfuck(expr):\n    expr = re.sub(r'([0-9]+)([+-])', r'\\1 \\2', expr)\n    expr = re.sub(r'([+-])([0-9]+)', r'\\1 \\2', expr)\n    expr = re.sub(r'([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18', expr)\n    expr = re.sub(r'([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)([+-])([0-9]+)', r'\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10 \\11 \\12 \\13 \\14 \\15 \\16 \\17 \\18 \\19 \\20', expr)\n    expr = expr.split()\n    result = 0\n    for i in range(0, len(expr), 2):\n        if expr[i] == '+':\n            result += int(expr[i+1])\n        else:\n            result -= int(expr[i+1])\n    expr = ' ' + expr[0]\n    for i in range(1, len(expr), 2):\n        expr = expr[:i] + ' ' + expr[i] + ' '\n    while '  ' in expr:\n        expr = expr.replace('  ', ' ')\n    expr = expr.split()\n    result_bf = '>'\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '+'\n        elif expr[i] == '-':\n            result_bf += '-'\n        else:\n            result_bf += '>'\n    result_bf += '<' * len(expr)\n    result_bf += '['\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            result_bf += '<+>'\n        elif expr[i] == '-':\n            result_bf += '<->'\n    result_bf += '-]<'\n    result_bf += '+' * result\n    result_bf += '.'\n    return result_bf\n\ndef main():\n    expr = input()\n    print(brainfuck(expr))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 17:46:29.330431 size on output set 7
