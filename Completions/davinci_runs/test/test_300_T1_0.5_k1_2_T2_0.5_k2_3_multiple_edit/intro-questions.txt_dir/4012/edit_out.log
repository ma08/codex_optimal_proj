2022-04-24 14:53:30.724609 num operations 2
2022-04-24 14:53:30.724630 size on input set 1
2022-04-24 14:53:30.724809 using api key derek
2022-04-24 14:53:40.555880 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, c))\n\ndef calculate(a, b, c):\n    res = 0\n    while b % a != 0 or c % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if c % b != 0:\n            c += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, d = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, d))\n\ndef calculate(a, b, d):\n    res = 0\n    while b % a != 0 or d % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if d % b != 0:\n            d += 1\n            res += 1\n    return res, a, b, d\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, c))\n\ndef calculate(a, b, c):\n    res = 0\n    while b % a != 0 or c % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if c % b != 0:\n            c += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650812010,
  "object": "edit"
}
2022-04-24 14:53:40.556071 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, c))\n\ndef calculate(a, b, c):\n    res = 0\n    while b % a != 0 or c % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if c % b != 0:\n            c += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, d = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, d))\n\ndef calculate(a, b, d):\n    res = 0\n    while b % a != 0 or d % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if d % b != 0:\n            d += 1\n            res += 1\n    return res, a, b, d\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, c))\n\ndef calculate(a, b, c):\n    res = 0\n    while b % a != 0 or c % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if c % b != 0:\n            c += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 14:53:40.556118 size on output set 2
2022-04-24 14:53:40.556126 size on input set 2
2022-04-24 14:53:40.556258 using api key jaanu
2022-04-24 14:53:48.137388 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, d = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, d))\n\ndef calculate(a, b, d):\n    res = 0\n    while b % a != 0 or d % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if d % b != 0:\n            d += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, d = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, d))\n\ndef calculate(a, b, d):\n    res = 0\n    while b % a != 0 or d % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if d % b != 0:\n            d += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        a, b, d = map(int, input().split())\n        print(calculate(a, b, d))\n\ndef calculate(a, b, d):\n    res = 0\n    while b % a != 0 or d % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if d % b != 0:\n            d += 1\n            res += 1\n    return res, a, b, d\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650812020,
  "object": "edit"
}
2022-04-24 14:53:48.137564 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, d = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, d))\n\ndef calculate(a, b, d):\n    res = 0\n    while b % a != 0 or d % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if d % b != 0:\n            d += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, d = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, d))\n\ndef calculate(a, b, d):\n    res = 0\n    while b % a != 0 or d % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if d % b != 0:\n            d += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        a, b, d = map(int, input().split())\n        print(calculate(a, b, d))\n\ndef calculate(a, b, d):\n    res = 0\n    while b % a != 0 or d % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if d % b != 0:\n            d += 1\n            res += 1\n    return res, a, b, d\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 14:53:48.137733 using api key sunu
2022-04-24 14:54:27.135708 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright 2014 The Plaso Project Authors.\n# Please see the AUTHORS file for details on individual authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for the Google Drive log file parser.\"\"\"\nimport __builtin__\nimport unittest\nimport os\nimport shutil\nimport tempfile\nimport time\nimport zipfile\n# pylint: disable=unused-import\nfrom plaso.formatters import googledrive as googledrive_formatter\nfrom plaso.lib import event\nfrom plaso.lib import eventdata\nfrom plaso.lib import timelib\nfrom plaso.parsers import googledrive\nfrom plaso.parsers import test_lib\n# pylint: enable=unused-import\nfrom plaso.winnt import time_zones\nimport pytz\nimport datetime\n\n\nclass GoogleDriveTest(test_lib.ParserTestCase):\n  \"\"\"Tests for the Google Drive log file parser.\"\"\"\n\n  def setUp(self):\n    \"\"\"Sets up the needed objects used throughout the test.\"\"\"\n    self._parser = googledrive.GoogleDriveParser()\n    self._time_zone = time_zones.TimeZone(\n        time_zones.TIME_ZONES['US/Pacific'])\n    self._timestamp = timelib.Timestamp.CopyFromString(\n        '2013-11-04 00:00:00')\n    self._timestamp_utc = timelib.Timestamp.CopyFromString(\n        '2013-11-04 00:00:00')\n    self._timestamp_utc = self._timestamp_utc.SetTimeZone(pytz.UTC)\n\n  def testParse(self):\n    \"\"\"Tests the Parse function.\"\"\"\n    test_file = self._GetTestFilePath([u'Drive.log'])\n    event_queue_consumer = self._ParseFile(self._parser, test_file)\n    event_objects = self._GetEventObjectsFromQueue(event_queue_consumer)\n\n    self.assertEqual(len(event_objects), 2)\n\n    event_object = event_objects[0]\n\n    expected_timestamp = timelib.Timestamp.CopyFromString(\n        '2013-11-04 00:00:00')\n    self.assertEqual(event_object.timestamp, expected_timestamp)\n\n    self.assertEqual(event_object.timestamp_desc, 'Last Updated')\n\n    expected_msg = (\n        u'[{0:s}] '\n        u'Version: 1.0.0.0 '\n        u'AppName: Google Drive '\n        u'AppVersion: 1.0.0.0 '\n        u'Last Updated: 2013-11-04 00:00:00 '\n        u'OS: Windows '\n        u'OS Version: 6.1.7601 '\n        u'Locale: en-US '\n        u'User Name: John Doe '\n        u'User Email: john@gmail.com '\n        u'User Google ID: 1234567890').format(test_file)\n\n    expected_msg_short = (\n        u'[{0:s}] Version: 1.0.0.0 AppName: Google Drive '\n        u'AppVersion: 1.0.0.0 Last Updated: 2013-11-04 00:00:00 OS: '\n        u'Windows OS Version: 6.1.7601 Locale: en-US User Name: John Doe '\n        u'User Email: john@gmail.com User Google ID: 1234567890').format(\n            test_file)\n\n    self._TestGetMessageStrings(event_object, expected_msg, expected_msg_short)\n\n    event_object = event_objects[1]\n\n    expected_timestamp = timelib.Timestamp.CopyFromString(\n        '2013-11-04 00:00:00')\n    self.assertEqual(event_object.timestamp, expected_timestamp)\n\n    self.assertEqual(event_object.timestamp_desc, 'Last Updated')\n\n    expected_msg = (\n        u'[{0:s}] '\n        u'Version: 1.0.0.0 '\n        u'AppName: Google Drive '\n        u'AppVersion: 1.0.0.0 '\n        u'Last Updated: 2013-11-04 00:00:00 '\n        u'OS: Windows '\n        u'OS Version: 6.1.7601 '\n        u'Locale: en-US '\n        u'User Name: John Doe '\n        u'User Email: john@gmail.com '\n        u'User Google ID: 1234567890 '\n        u'Sync Folder Path: C:\\\\GoogleDrive '\n        u'Sync Folder ID: 0Bz9-sT1-sT1-sT1-sT1-sT1 '\n        u'Sync Folder Title: Google Drive '\n        u'Sync Folder Type: My Drive '\n        u'Sync Enabled: True '\n        u'Sync Paused: False '\n        u'Sync Full Scan: False').format(test_file)\n\n    expected_msg_short = (\n        u'[{0:s}] Version: 1.0.0.0 AppName: Google Drive '\n        u'AppVersion: 1.0.0.0 Last Updated: 2013-11-04 00:00:00 OS: '\n        u'Windows OS Version: 6.1.7601 Locale: en-US User Name: John Doe '\n        u'User Email: john@gmail.com User Google ID: 1234567890 '\n        u'Sync Folder Path: C:\\\\GoogleDrive Sync Folder ID: '\n        u'0Bz9-sT1-sT1-sT1-sT1-sT1 Sync Folder Title: Google Drive '\n        u'Sync Folder Type: My Drive Sync Enabled: True Sync Paused: False '\n        u'Sync Full Scan: False').format(test_file)\n\n    self._TestGetMessageStrings(event_object, expected_msg, expected_msg_short)\n\n\nif __name__ == '__main__':\n  unittest.main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, sys.stdin.readline().split()) # get the inputs\n        print(calculate(a, b, c))\n\ndef calculate(a, b, c):\n    res = 0\n    while b % a != 0 or c % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if c % b != 0:\n            c += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\nimport sys\n\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, c))\n\n\ndef calculate(a, b, c):\n    if a == 0:\n        return 1\n    res = 0\n    while b % a != 0 or c % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if c % b != 0:\n            c += 1\n            res += 1\n    return res\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650812028,
  "object": "edit"
}
2022-04-24 14:54:27.135999 fix syntax errors 3 ['\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright 2014 The Plaso Project Authors.\n# Please see the AUTHORS file for details on individual authors.\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n"""Tests for the Google Drive log file parser."""\nimport __builtin__\nimport unittest\nimport os\nimport shutil\nimport tempfile\nimport time\nimport zipfile\n# pylint: disable=unused-import\nfrom plaso.formatters import googledrive as googledrive_formatter\nfrom plaso.lib import event\nfrom plaso.lib import eventdata\nfrom plaso.lib import timelib\nfrom plaso.parsers import googledrive\nfrom plaso.parsers import test_lib\n# pylint: enable=unused-import\nfrom plaso.winnt import time_zones\nimport pytz\nimport datetime\n\n\nclass GoogleDriveTest(test_lib.ParserTestCase):\n  """Tests for the Google Drive log file parser."""\n\n  def setUp(self):\n    """Sets up the needed objects used throughout the test."""\n    self._parser = googledrive.GoogleDriveParser()\n    self._time_zone = time_zones.TimeZone(\n        time_zones.TIME_ZONES[\'US/Pacific\'])\n    self._timestamp = timelib.Timestamp.CopyFromString(\n        \'2013-11-04 00:00:00\')\n    self._timestamp_utc = timelib.Timestamp.CopyFromString(\n        \'2013-11-04 00:00:00\')\n    self._timestamp_utc = self._timestamp_utc.SetTimeZone(pytz.UTC)\n\n  def testParse(self):\n    """Tests the Parse function."""\n    test_file = self._GetTestFilePath([u\'Drive.log\'])\n    event_queue_consumer = self._ParseFile(self._parser, test_file)\n    event_objects = self._GetEventObjectsFromQueue(event_queue_consumer)\n\n    self.assertEqual(len(event_objects), 2)\n\n    event_object = event_objects[0]\n\n    expected_timestamp = timelib.Timestamp.CopyFromString(\n        \'2013-11-04 00:00:00\')\n    self.assertEqual(event_object.timestamp, expected_timestamp)\n\n    self.assertEqual(event_object.timestamp_desc, \'Last Updated\')\n\n    expected_msg = (\n        u\'[{0:s}] \'\n        u\'Version: 1.0.0.0 \'\n        u\'AppName: Google Drive \'\n        u\'AppVersion: 1.0.0.0 \'\n        u\'Last Updated: 2013-11-04 00:00:00 \'\n        u\'OS: Windows \'\n        u\'OS Version: 6.1.7601 \'\n        u\'Locale: en-US \'\n        u\'User Name: John Doe \'\n        u\'User Email: john@gmail.com \'\n        u\'User Google ID: 1234567890\').format(test_file)\n\n    expected_msg_short = (\n        u\'[{0:s}] Version: 1.0.0.0 AppName: Google Drive \'\n        u\'AppVersion: 1.0.0.0 Last Updated: 2013-11-04 00:00:00 OS: \'\n        u\'Windows OS Version: 6.1.7601 Locale: en-US User Name: John Doe \'\n        u\'User Email: john@gmail.com User Google ID: 1234567890\').format(\n            test_file)\n\n    self._TestGetMessageStrings(event_object, expected_msg, expected_msg_short)\n\n    event_object = event_objects[1]\n\n    expected_timestamp = timelib.Timestamp.CopyFromString(\n        \'2013-11-04 00:00:00\')\n    self.assertEqual(event_object.timestamp, expected_timestamp)\n\n    self.assertEqual(event_object.timestamp_desc, \'Last Updated\')\n\n    expected_msg = (\n        u\'[{0:s}] \'\n        u\'Version: 1.0.0.0 \'\n        u\'AppName: Google Drive \'\n        u\'AppVersion: 1.0.0.0 \'\n        u\'Last Updated: 2013-11-04 00:00:00 \'\n        u\'OS: Windows \'\n        u\'OS Version: 6.1.7601 \'\n        u\'Locale: en-US \'\n        u\'User Name: John Doe \'\n        u\'User Email: john@gmail.com \'\n        u\'User Google ID: 1234567890 \'\n        u\'Sync Folder Path: C:\\\\GoogleDrive \'\n        u\'Sync Folder ID: 0Bz9-sT1-sT1-sT1-sT1-sT1 \'\n        u\'Sync Folder Title: Google Drive \'\n        u\'Sync Folder Type: My Drive \'\n        u\'Sync Enabled: True \'\n        u\'Sync Paused: False \'\n        u\'Sync Full Scan: False\').format(test_file)\n\n    expected_msg_short = (\n        u\'[{0:s}] Version: 1.0.0.0 AppName: Google Drive \'\n        u\'AppVersion: 1.0.0.0 Last Updated: 2013-11-04 00:00:00 OS: \'\n        u\'Windows OS Version: 6.1.7601 Locale: en-US User Name: John Doe \'\n        u\'User Email: john@gmail.com User Google ID: 1234567890 \'\n        u\'Sync Folder Path: C:\\\\GoogleDrive Sync Folder ID: \'\n        u\'0Bz9-sT1-sT1-sT1-sT1-sT1 Sync Folder Title: Google Drive \'\n        u\'Sync Folder Type: My Drive Sync Enabled: True Sync Paused: False \'\n        u\'Sync Full Scan: False\').format(test_file)\n\n    self._TestGetMessageStrings(event_object, expected_msg, expected_msg_short)\n\n\nif __name__ == \'__main__\':\n  unittest.main()\n', "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, sys.stdin.readline().split()) # get the inputs\n        print(calculate(a, b, c))\n\ndef calculate(a, b, c):\n    res = 0\n    while b % a != 0 or c % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if c % b != 0:\n            c += 1\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, sys.stdin.readline().split())\n        print(calculate(a, b, c))\n\n\ndef calculate(a, b, c):\n    if a == 0:\n        return 1\n    res = 0\n    while b % a != 0 or c % b != 0:\n        if b % a != 0:\n            b += 1\n            res += 1\n        if c % b != 0:\n            c += 1\n            res += 1\n    return res\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 14:54:27.136076 size on output set 5
