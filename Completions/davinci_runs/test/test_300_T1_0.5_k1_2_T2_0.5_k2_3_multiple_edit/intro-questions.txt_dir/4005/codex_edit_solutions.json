["#!/usr/bin/env python3\n\nimport sys\nimport os\n\nif len(sys.argv) < 2:\n    print(\"Usage: {} <file>\".format(sys.argv[0]))\n    sys.exit(0)\n\nfile_name = sys.argv[1]\n\n# check if file exists\nif not os.path.isfile(file_name):\n    print(\"File {} does not exist\".format(file_name))\n    sys.exit(0)\n\n# check if file is readable\nif not os.access(file_name, os.R_OK):\n    print(\"File {} is not readable\".format(file_name))\n    sys.exit(0)\n\n# check if file is executable\nif not os.access(file_name, os.X_OK):\n    print(\"File {} is not executable\".format(file_name))\n    sys.exit(0)\n\n# check if file is writable\nif not os.access(file_name, os.W_OK):\n    print(\"File {} is not writable\".format(file_name))\n    sys.exit(0)\n\nprint(\"File {} is OK\".format(file_name))\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n\tFILE *fp;\n\tchar *fname = \"./test.txt\";\n\tchar *mode = \"r\";\n\tchar *buf;\n\n\tif (argc == 2)\n\t\tfname = argv[1];\n\n\tfp = fopen(fname, mode);\n\tif (fp == NULL)\n\t{\n\t\tperror(\"failed to open file\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tbuf = (char *)malloc(sizeof(char) * BUFSIZ);\n\tif (buf == NULL)\n\t{\n\t\tperror(\"failed to allocate memory\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tmemset(buf, 0, BUFSIZ);\n\n\twhile (fgets(buf, BUFSIZ, fp) != NULL)\n\t\tprintf(\"%s\", buf);\n\n\tif (fclose(fp) == EOF)\n\t{\n\t\tperror(\"failed to close file\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tfree(buf);\n\texit(EXIT_SUCCESS);\n}\n", "#!/usr/bin/env python3\n\nimport sys\nimport os\n\nif len(sys.argv) < 2:\n    print(\"Usage: {} <file>\".format(sys.argv[0]))\n    sys.exit(0)\n\nf = sys.argv[1]\n\n# check if file exists\nif not os.path.isfile(f):\n    print(\"File {} does not exist\".format(f))\n    sys.exit(0)\n\n# check if file is readable\nif not os.access(f, os.R_OK):\n    print(\"File {} is not readable\".format(f))\n    sys.exit(0)\n\n# check if file is executable\nif not os.access(f, os.X_OK):\n    print(\"File {} is not executable\".format(f))\n    sys.exit(0)\n\n# check if file is writable\nif not os.access(f, os.W_OK):\n    print(\"File {} is not writable\".format(f))\n    sys.exit(0)\n\nprint(\"File {} is OK\".format(f))\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n\tFILE *fp;\n\tchar *fname = \"./test.txt\", *mode = \"r\";\n\tchar *buf;\n\n\tif (argc == 2)\n\t\tfname = argv[1];\n\n\tfp = fopen(fname, mode);\n\tif (fp == NULL) {\n\t\tperror(\"failed to open file\");\n\t\texit(EXIT_FAILURE);\n\t}\t\n\n\tbuf = (char *)malloc(sizeof(char) * BUFSIZ);\n\tif (buf == NULL) {\n\t\tperror(\"failed to allocate memory\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tmemset(buf, 0, BUFSIZ);\n\n\twhile (fgets(buf, BUFSIZ, fp) != NULL)\n\t\tprintf(\"%s\", buf);\n\n\tif (fclose(fp) == EOF) {\n\t\tperror(\"failed to close file\");\n\t\texit(EXIT_FAILURE);\n\t}\t\n\tfree(buf);\n\texit(EXIT_SUCCESS);\n}\n", "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x3 >= x1 and x3 <= x2 and y3 >= y1 and y3 <= y2) or (x4 >= x1 and x4 <= x2 and y4 >= y1 and y4 <= y2)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n\tFILE *fp;\n\tconst char *fname = \"./test.txt\";\n\tconst char *mode = \"r\";\n\tchar *buf;\n\n\tif (argc == 2)\n\t\tfname = (const char *)argv[1];\n\n\tfp = fopen((char *)fname, (char *)mode);\n\tif (fp == NULL) {\n\t\tperror(\"failed to open file\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tbuf = (char *)malloc(sizeof(*buf) * BUFSIZ);\n\tif (buf == NULL) {\n\t\tperror(\"failed to allocate memory\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tmemset((void *)buf, 0, BUFSIZ);\n\n\twhile (fgets(buf, BUFSIZ, fp) != NULL)\n\t\tprintf(\"%s\", buf);\n\n\tif (fclose(fp) == EOF) {\n\t\tperror(\"failed to close file\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tfree((void *)buf);\n\texit(EXIT_SUCCESS);\n}\n", "\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_or_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_or_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Jan  2 12:48:30 2020\n\n@author: dell\n\"\"\"\n\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('C:/Users/dell/Desktop/numbers/img.png') #input image\n\nimg = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.resize(img,(512,512)) #resize the image\n\n# plt.imshow(img)\n# plt.show()\n\nrows,cols,ch = img.shape\npts1 = np.float32([[56,65],[368,52],[28,387],[389,390]]) #src points\npts2 = np.float32([[0,0],[300,0],[0,300],[300,300]]) #destination points\n\nM = cv2.getPerspectiveTransform(pts1,pts2) #get the perspective transform\ndst = cv2.warpPerspective(img,M,(300,300)) #apply the perspective transform\n\nplt.subplot(121),plt.imshow(img),plt.title('Input')\nplt.subplot(122),plt.imshow(dst),plt.title('Output')\nplt.show()\n", "import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('img.png')\n\nimg = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.resize(img,(512,512))\n\n# plt.imshow(img)\n# plt.show()\n\nrows,cols,ch = img.shape\npts1 = np.float32([[56,65],[368,52],[28,387],[389,390]])\npts2 = np.float32([[0,0],[300,0],[0,300],[300,300]])\n\nM = cv2.getPerspectiveTransform(pts1,pts2)\ndst = cv2.warpPerspective(img,M,(300,300))\n\nplt.subplot(121),plt.imshow(img),plt.title('Input')\nplt.subplot(122),plt.imshow(dst),plt.title('Output')\nplt.show()\n", "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 <= x3 and x2 >= x4 and y1 <= y3 and y2 >= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return ((x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4))\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return ((x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4))\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (is_inside(x1, y1, x3, y3, x4, y4)) or (is_inside(x2, y2, x3, y3, x4, y4))\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4) or (x1 > x3 and x2 < x4 and y1 > y3 and y2 < y4)\n\ndef is_inside_or_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_or_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_or_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (\n    is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_or_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Jan  2 12:48:30 2020\n\n@author: dell\n\"\"\"\n\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('C:/Users/dell/Desktop/numbers/img.png')\n\nimg = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.resize(img,(512,512))\n\n# plt.imshow(img)\n# plt.show()\n\nrows,cols,ch = img.shape\npts1 = np.float32([[56,65],[368,52],[28,387],[389,390]]) # source points\npts2 = np.float32([[0,0],[300,0],[0,300],[300,300]]) # destination points\n\nM = cv2.getPerspectiveTransform(pts1,pts2)\ndst = cv2.warpPerspective(img,M,(300,300))\n\nplt.subplot(121),plt.imshow(img),plt.title('Input')\nplt.subplot(122),plt.imshow(dst),plt.title('Output')\nplt.show()\n"]