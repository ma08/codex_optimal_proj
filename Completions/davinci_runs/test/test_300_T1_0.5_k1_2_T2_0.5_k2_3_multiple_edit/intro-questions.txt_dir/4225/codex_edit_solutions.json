["\n\n# A, B, K = map(int, input().split())\nA, B, K = 2, 1, 3\n\n# if K <= A:\n#     print(K)\n# elif K <= A+B:\n#     print(A)\n# else:\n#     print(A - (K - A - B))\n\nprint(K if K <= A else A if K <= A+B else A - (K - A - B))\n", "from operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards)) \n", "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(files):\n    files.sort(key=itemgetter(1), reverse=True)\n    return sum(file[1] for file in files[:k])\n\na, b, c, k = map(int, input().split())\nfiles = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(files))\n", "from operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K]) - (K - 1) * 10\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\na, b, c, k = map(int, input().split())\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a - (k - a - b))\n", "# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 2, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B) + C)\n", "\n\nA, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "A, B, C, K = map(int, input().split())\nprint(min(A, K) - max(0, K-A-B))\n", "\n\na, b, c, k = map(int, input().split())\n# a, b, c, k = 2, 1, 1, 3\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a - (k - a - b))\n", "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(files):\n    files.sort(key=itemgetter(1), reverse=True)\n    return sum(file[1] for file in files[:3])\n\nA, B, C = map(int, input().split())\nfiles = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(files))\n", "\n\nA, B, K = map(int, input().split())\n# A, B, K = 2, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "def get_max_possible_sum(cards):\n    cards.sort(key=lambda x: x[1], reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())  # 4 3 2 3\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(files):\n    files.sort(key=itemgetter(1), reverse=True)\n    return sum(files[1] for files in files[:K])\n\nA, B, C, K = map(int, input().split())\nfiles = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(files))\n", "\n\nA, B, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "from operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "print(len(set(input().split())))\n", "'''\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n'''\n\ndef is_prime(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return n != 1\n\ndef main():\n    N = int(input())\n    if is_prime(N):\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"]