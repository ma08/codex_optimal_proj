2022-04-24 15:25:34.588512 num operations 2
2022-04-24 15:25:34.588532 size on input set 1
2022-04-24 15:25:34.588683 using api key jaanu
2022-04-24 15:25:41.507579 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, b+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    }
  ],
  "created": 1650813934,
  "object": "edit"
}
2022-04-24 15:25:41.507805 fix spelling mistakes 3 ['\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\n\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, b+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n']
2022-04-24 15:25:41.507830 size on output set 2
2022-04-24 15:25:41.507837 size on input set 2
2022-04-24 15:25:41.507954 using api key soukgp
2022-04-24 15:25:49.443167 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, 10000):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "print(\"Hello World\")\n"
    }
  ],
  "created": 1650813941,
  "object": "edit"
}
2022-04-24 15:25:49.443347 fix syntax errors 3 ['import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, 10000):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', 'print("Hello World")\n']
2022-04-24 15:25:49.443508 using api key soukgp
2022-04-24 15:25:58.402793 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, b+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 1,
      "text": "import math\na, b = map(int, input().split())\n\nfor i in range(1, b+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\na, b = map(float, input().split())\n\nif math.floor(b * 0.08) == a and math.floor(b * 0.1) == b:\n    print(b)\nelse:\n    print(-1)\n"
    }
  ],
  "created": 1650813949,
  "object": "edit"
}
2022-04-24 15:25:58.403000 fix syntax errors 3 ['\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, b+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', 'import math\na, b = map(int, input().split())\n\nfor i in range(1, b+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\nimport math\n\na, b = map(float, input().split())\n\nif math.floor(b * 0.08) == a and math.floor(b * 0.1) == b:\n    print(b)\nelse:\n    print(-1)\n']
2022-04-24 15:25:58.403024 size on output set 6
2022-04-24 15:25:58.403036 num operations 2
2022-04-24 15:25:58.403041 size on input set 1
2022-04-24 15:25:58.403158 using api key jaanu
2022-04-24 15:26:05.367971 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    }
  ],
  "created": 1650813958,
  "object": "edit"
}
2022-04-24 15:26:05.368157 fix spelling mistakes 3 ["\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"]
2022-04-24 15:26:05.368184 size on output set 1
2022-04-24 15:26:05.368191 size on input set 1
2022-04-24 15:26:05.368307 using api key soukgp
2022-04-24 15:26:16.392703 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport unittest\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 1,
      "text": "\n#\n# import unittest\n# import math\n#\n# def main(A, B):\n#     if B % A == 0:\n#         return B // A\n#     else:\n#         return -1\n#\n# class TestMain(unittest.TestCase):\n#     def test_main(self):\n#         self.assertEqual(main(2, 2), 1)\n#         self.assertEqual(main(8, 9), -1)\n#\n# if __name__ == '__main__':\n#     unittest.main()\n"
    },
    {
      "index": 2,
      "text": "\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    }
  ],
  "created": 1650813965,
  "object": "edit"
}
2022-04-24 15:26:16.392902 fix syntax errors 3 ["\n\nimport unittest\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n#\n# import unittest\n# import math\n#\n# def main(A, B):\n#     if B % A == 0:\n#         return B // A\n#     else:\n#         return -1\n#\n# class TestMain(unittest.TestCase):\n#     def test_main(self):\n#         self.assertEqual(main(2, 2), 1)\n#         self.assertEqual(main(8, 9), -1)\n#\n# if __name__ == '__main__':\n#     unittest.main()\n", "\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"]
2022-04-24 15:26:16.393013 size on output set 3
