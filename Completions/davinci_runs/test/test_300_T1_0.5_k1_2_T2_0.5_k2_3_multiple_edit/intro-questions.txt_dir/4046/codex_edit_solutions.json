["import sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in sys.stdin.readline().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# function to calculate the permutation\n\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n# main function\n\n\ndef main():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef solve(n, p):\n    p = [1, 1]\n    for i in range(n - 1):\n        if p[-2] + p[-1] > 0 and p[-2] + p[-1] <= n:\n            p.append(p[-2] + p[-1])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    print(*solve(n, p))\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in sys.stdin.readline().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = 1\n    p[1] = 1 + q[0]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef solve(n, p):\n    p = [p[0]]\n    for i in range(n - 1):\n        if p[-1] + p[i] > 0 and p[-1] + p[i] < n:\n            p.append(p[-1] + p[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    print(*solve(n, p))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint(2)\n", "import sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    q = [int(x) for x in sys.stdin.readline().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    sys.stdout.write(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        sys.stdout.write(\"-1\")\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 2:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\ndef create_permutation(n, q):\n    if n == 2:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef solve(n, p):\n    p = [1, 2]\n    for i in range(n - 1):\n        if p[-1] + p[i] > 0 and p[-1] + p[i] <= n and p[-1] + p[i] not in p:\n            p.append(p[-1] + p[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    print(*solve(n, p))\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef get_input():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    return n, p\n\ndef check_permutation(n, p):\n    if len(p) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in p:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, p):\n    if n == 1:\n        return [1]\n    q = [0] * n\n    q[0] = p[0]\n    q[1] = p[0] + p[1]\n    for i in range(2, n):\n        q[i] = q[i-1] + p[i-1]\n    return q\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, p = get_input()\n    if not check_permutation(n, p):\n        print(-1)\n        return\n    q = create_permutation(n, p)\n    print_permutation(q)\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    print(\"Hello World\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_input():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    return n, p\n\ndef check_permutation(n, p):\n    if len(p) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in p:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, p):\n    if n == 1:\n        return [1]\n    q = [0] * n\n    q[0] = p[0]\n    q[1] = p[0] + p[1]\n    for i in range(2, n):\n        q[i] = q[i-1] + p[i-1]\n    return q\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, p = get_input()\n    if not check_permutation(n, p):\n        print(-1)\n        return\n    q = create_permutation(n, p)\n    print_permutation(q)\n\nif __name__ == \"__main__\":\n    main()\n", "\n \nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 2:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 2:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport os\nimport sys\n\ndef get_input():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    return n, p\n\ndef check_permutation(n, p):\n    if len(p) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in p:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, p):\n    if n == 1:\n        return [1]\n    q = [0] * n\n    q[0] = p[0]\n    q[1] = p[0] + p[1]\n    for i in range(2, n):\n        q[i] = q[i-1] + p[i-1]\n    return q\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, p = get_input()\n    if not check_permutation(n, p):\n        print(-1)\n        return\n    q = create_permutation(n, p)\n    print_permutation(q)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n, q):\n    p = [1, ]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# function to calculate the permutation\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n# main function\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# function to calculate the permutation\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n# main function\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\nif __name__ == \"__main__\":\n    main()\n"]