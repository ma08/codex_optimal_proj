["\n\ndef sum_even_way(N, M, K):\n    return N*M*K\n\nN, M = [int(x) for x in input().split()]\nprint(sum_even_way(N, M))\n", "\n\nN, M = map(int, input().split())\n\nprint(N * M)\n", "\n\nN, M = map(int, input().split())  # the number of rows and columns\n\nprint(N * M)\n", "def sum_even_ways(N, M, C):\n    return N*M*C\n\n\nN, M, C = [int(x) for x in raw_input().split()]\nprint(sum_even_ways(N, M, C))\n", "\n\ndef sum_even_ways(n, m):\n    return n*m\n\nn, m = [int(x) for x in input().split()]\nprint(sum_even_ways(n, m))\n", "N, M = map(int, input().split())\nprint(N * M)\n", "\nN, M = map(int, input().split()) # the number of rows and columns\n\nprint(N * M)\n", "\n\ndef sum_even_ways(N, M, C):\n    return N*M\n\nN, M, C = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M, C))\n", "\n\ndef sum_even_ways(n):\n    return n*n\n\nn = int(input())\nprint(sum_even_ways(n))\n", "\n\ndef sum_even_way(n, m):\n    return n*m\n\nn, m = [int(x) for x in input().split()]\nprint(sum_even_way(n, m))\n", "\nN, M = map(int, input().split())\n\nprint(N * (M - 1) + 1)\n", "\n# input\nN, M = map(int, input().split())\n# output\nprint(N * (M - 1) + 1)\n", "\nN = int(input())\n\nprint(N * (N - 1) // 2)\n", "\nprint(\"Hello World\")\n", "\nN, M = map(int, input().split())  # read a list of integers, 2 in this case\n\nprint(N * M)\n"]