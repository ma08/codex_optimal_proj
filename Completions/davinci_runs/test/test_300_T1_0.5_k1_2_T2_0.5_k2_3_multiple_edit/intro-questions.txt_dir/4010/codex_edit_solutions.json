["\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\").readlines()\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(get_input()[0])\n\n\ndef get_array_length(test_case_number):\n    return int(get_input()[1])\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input()[2].split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subarrays(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]  # O(n^2)\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subarray in get_all_subarrays(array):\n        if len(subarray) >= 3 and is_array_palindrome(subarray):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n", "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length():\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subarrays(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)] + [array]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subarray in get_all_subarrays(array):\n        if len(subarray) >= 3 and is_array_palindrome(subarray):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n", "\n# Solution \n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subarrays(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)] + [array]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subarray in get_all_subarrays(array):\n        if len(subarray) >= 3 and is_array_palindrome(subarray):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem(input_file, output_file):\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem(get_input(), get_output())\n", "\n\n#!/usr/bin/env python\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        print(\"YES\" if list(map(int, input().split()))[0] == list(map(int, input().split()))[-1] else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subarrays(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]  # O(n^2)\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subarray in get_all_subarrays(array):\n        if len(subarray) >= 3 and is_array_palindrome(subarray):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n", "\n# Solution\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split())) # map() apply int() to every element in a list\n        if a[0] == a[-1]: # a[-1] is the last element of a list\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_input():\n    return open(\"input.txt\", \"r\").read()\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(get_input())\n\n\ndef get_array_length(test_case_number):\n    return int(get_input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subarrays(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]  # O(n^2)\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subarray in get_all_subarrays(array):\n        if len(subarray) >= 3 and is_array_palindrome(subarray):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output().write(output)\n\n\nsolve_problem()\n", "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subarrays(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)] + [array]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subarray in get_all_subarrays(array):\n        if len(subarray) >= 3 and is_array_palindrome(subarray):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n", "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subarrays(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subarray in get_all_subarrays(array):\n        if len(subarray) >= 3 and is_array_palindrome(subarray):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n", "\n\n\ndef get_input():\n    return open('input.txt', 'r')\ndef get_output():\n    return open('output.txt', 'w')\n\n\ndef get_number_of_test_cases():\n    return int(get_input().readline())\n\n\ndef get_array_length(test_case_number):\n    return int(get_input().readline())\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().readline().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subarrays(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subarray in get_all_subarrays(array):\n        if len(subarray) >= 3 and is_array_palindrome(subarray):\n            return 'YES'\n    return 'NO'\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output().write(output + '\\n')\n\n\nsolve_problem()\n", "\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n# Solution \n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"]