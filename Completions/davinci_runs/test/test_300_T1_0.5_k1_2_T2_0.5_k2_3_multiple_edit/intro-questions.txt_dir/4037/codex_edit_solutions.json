["\n\ndef solve(n, r, projects):\n\tprojects.sort(key = lambda x: x[1])\n\t\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\treturn count\n\ndef main(): \n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprint(solve(n, r, projects))\n\t\nif __name__ == '__main__':\n\tmain()\n", "# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\"\"\"\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 (\u043f\u043e\u043a\u0430 \u043d\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0435)\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n", "\n\n# 1st solution (\u043f\u043e\u0447\u0442\u0438 \u0432\u0435\u0440\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435)\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution (\u043f\u043e\u043a\u0430 \u043d\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0435)\n\n\"\"\"\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n", "\n\ndef main(): \n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split()) # a = deadline, b = points\n\t\tprojects.append((b, a))\n\n\tprojects.sort(key = lambda x: x[0], reverse=True) # sort by points\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r <= project[1]: # deadline\n\t\t\tr += project[0] # points\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n\n# 2nd solution\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 (\u043f\u043e\u043a\u0430 \u043d\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0435)\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n", "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n\n# 2nd solution\n\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n", "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n# 2nd solution\n\n\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n", "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append([a, b])\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r <= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r <= project[0]:\n\t\t\tr += project[1] \n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\tn, r = map(int, input().split())\n\ndef main(): \n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\n# 2nd solution\n\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n", "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1] \n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"]