["n = int(input())\nprefixes = []\nsuffixes = []\nfor i in range(n):\n    prefixes.append(input())\nfor i in range(n):\n    suffixes.append(input())\n\nprefixes = sorted(prefixes, key=lambda x: len(x), reverse=True)\nsuffixes = sorted(suffixes, key=lambda x: len(x), reverse=True)\n\ns = ''\nfor i in range(len(prefixes)):\n    if prefixes[i] == suffixes[i]:\n        s += 'P'\n    else:\n        s += 'S'\nfor i in range(len(suffixes)):\n    if prefixes[i] == suffixes[i]:\n        s += 'P'\n    else:\n        s += 'S'\nprint(s)\n", "n = int(input())\nprefixes = []\nsuffixes = []\nfor i in range(n - 1):\n    prefixes.append(input())\nfor i in range(n - 1):\n    suffixes.append(input())\n\nprefixes = sorted(prefixes, key=lambda x: len(x))\nsuffixes = sorted(suffixes, key=lambda x: len(x))\n\ns = ''\nfor i in range(len(prefixes)):\n    if prefixes[i] == suffixes[i]:\n        s += 'P'\n    else:\n        s += 'S'\nfor i in range(len(suffixes) - 1, -1, -1):\n    if prefixes[i] == suffixes[i]:\n        s += 'P'\n    else:\n        s += 'S'\nprint(s)\n", "\n\ndef game(n, words):\n    \"\"\"\n    >>> game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba'])\n    'SPSPSPSP'\n    >>> game(3, ['a', 'aa', 'aa', 'a'])\n    'PSPS'\n    >>> game(2, ['a', 'c'])\n    'PS'\n    \"\"\"\n    prefixes = set()\n    suffixes = set()\n    for word in words:\n        if word.endswith(prefixes[-1]) and len(prefixes) > 0:\n            prefixes.add(word)\n        else:\n            suffixes.add(word)\n    return ''.join(['P' if word in prefixes else 'S' for word in words])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    words = [input() for _ in range(2*n-2)]\n    print(game(n, words))\n", "\n\ndef game(n, words):\n    \"\"\"\n    >>> game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba'])\n    'SPPSPSPS' # doctest: +NORMALIZE_WHITESPACE\n    >>> game(3, ['a', 'aa', 'aa', 'a'])\n    'PPSS' # doctest: +NORMALIZE_WHITESPACE\n    >>> game(2, ['a', 'c'])\n    'PS' # doctest: +NORMALIZE_WHITESPACE\n    \"\"\"\n    prefixes = ['']\n    suffixes = ['']\n    for word in words:\n        if word.endswith(prefixes[-1]) or prefixes[-1].endswith(word):\n            prefixes.append(word)\n        else:\n            suffixes.append(word)\n    return ''.join(['P' if word in prefixes else 'S' for word in words])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    words = [input() for _ in range(2*n-2)]\n    print(game(n, words))\n", "\n\ndef game(n, words):\n    \"\"\"\n    >>> game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba']) == 'SPPSPSPS'\n    True\n    >>> game(3, ['a', 'aa', 'aa', 'a']) == 'PPSS'\n    True\n    >>> game(2, ['a', 'c']) == 'PS'\n    True\n    \"\"\"\n    prefixes = []\n    suffixes = []\n    for word in words:\n        if prefixes and word.endswith(prefixes[-1]):\n            prefixes.append(word)\n        else:\n            suffixes.append(word)\n    return ''.join(['P' if word in prefixes else 'S' for word in words])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    words = [input() for _ in range(2 * n - 2)]\n    print(game(n, words))\n", "\n\ndef game(n, words):\n    \"\"\"\n    >>> game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba'])\n    'SPPSPSPS'\n    >>> game(3, ['a', 'aa', 'aa', 'a'])\n    'PPSS'\n    >>> game(2, ['a', 'c']) # doctest: +NORMALIZE_WHITESPACE\n    'PS'\n    \"\"\"\n    prefixes = ['']\n    suffixes = ['']\n    for word in words:\n        if word.endswith(prefixes[-1]) or prefixes[-1].endswith(word):\n            prefixes.append(word)\n        else:\n            suffixes.append(word)\n    return ''.join(['P' if word in prefixes else 'S' for word in words])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    words = [input() for _ in range(2*n-2)]\n    print(game(n, words))\n", "\n\ndef game(n, words):\n    \"\"\"\n    >>> game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba'])\n    'SPSPSPSP'\n    >>> game(3, ['a', 'aa', 'aa', 'a'])\n    'PSPS'\n    >>> game(2, ['a', 'c'])\n    'PS'\n    \"\"\"\n    prefixes = ['']\n    suffixes = ['']\n    for word in words:\n        if word.endswith(prefixes[-1]):\n            prefixes.append(word)\n        else:\n            suffixes.append(word)\n    return ''.join(['P' if word in prefixes else 'S' for word in words])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    words = [input() for _ in range(2*n-2)]\n    print(game(n, words))\n", "\nn = int(input())\nprefixes = []\nsuffixes = []\nfor i in range(n-1):\n    prefixes.append(input())\nfor i in range(n-1):\n    suffixes.append(input())\n\nprefixes = sorted(prefixes, key=lambda x: len(x))\nsuffixes = sorted(suffixes, key=lambda x: len(x), reverse=True)\n\ns = ''\nfor i in range(len(prefixes)):\n    if prefixes[i] == suffixes[i]:\n        s += 'P'\n    else:\n        s += 'S'\nfor i in range(len(suffixes)-1, -1, -1):\n    if prefixes[i] == suffixes[i]:\n        s += 'P'\n    else:\n        s += 'S'\nprint(s)\n", "n=int(input())\np,s=[],[]\nfor i in range(n):\n    p.append(input())\nfor i in range(n):\n    s.append(input())\np=sorted(p,key=lambda x:len(x))\ns=sorted(s,key=lambda x:len(x))\nans=''\nfor i in range(n):\n    if p[i]==s[i]:\n        ans+='P'\n    else:\n        ans+='S'\nfor i in range(n-1,-1,-1):\n    if p[i]==s[i]:\n        ans+='P'\n    else:\n        ans+='S'\nprint(ans)\n", "\nn = int(input())\nprefixes = []\nsuffixes = []\nfor i in range(n-1):\n    prefixes.append(input())\nfor i in range(n-1):\n    suffixes.append(input())\n\nprefixes = sorted(prefixes, key=lambda x: len(x))\nsuffixes = sorted(suffixes, key=lambda x: len(x), reverse=True)\n\ns = ''\nfor i in range(len(prefixes)):\n    if prefixes[i] == suffixes[i]:\n        s += 'P'\n    else:\n        s += 'S'\n# for i in range(len(suffixes)-1, -1, -1):\n#     if prefixes[i] == suffixes[i]:\n#         s += 'P'\n#     else:\n#         s += 'S'\nprint(s)\n", "\n\ndef game(n, words):\n    \"\"\"\n    >>> game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba']) == 'SPPSPSPS'\n    True\n    >>> game(3, ['a', 'aa', 'aa', 'a']) == 'PPSS'\n    True\n    >>> game(2, ['a', 'c']) == 'PS'\n    True\n    \"\"\"\n    prefixes = ['']\n    suffixes = ['']\n    for word in words:\n        if word.endswith(prefixes[-1]) and not word.startswith(suffixes[-1]):\n            prefixes.append(word)\n        elif word.startswith(suffixes[-1]) and not word.endswith(prefixes[-1]):\n        elif not word.startswith(suffixes[-1]) and not word.endswith(prefixes[-1]):\n            prefixes.append(word)\n            suffixes.append(word)\n            suffixes.append(word)\n    return ''.join(['P' if word in prefixes else 'S' for word in words])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    words = [input() for _ in range(2 * n - 2)]\n    print(game(n, words))\n", "import unittest\n\n\ndef game(n, words):\n    \"\"\"\n    >>> game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba'])\n    'SPSPSPSP'\n    >>> game(3, ['a', 'aa', 'aa', 'a'])\n    'PSPS'\n    >>> game(2, ['a', 'c'])\n    'PS'\n    \"\"\"\n    prefixes = []\n    suffixes = []\n    for word in words:\n        if word.endswith(prefixes[-1]):\n            prefixes.append(word)\n        else:\n            suffixes.append(word)\n    return ''.join(['P' if word in prefixes else 'S' for word in words])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    words = [input() for _ in range(2 * n - 2)]\n    print(game(n, words))\n\n\nclass TestGame(unittest.TestCase):\n    def test_game(self):\n        self.assertEqual(game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba']), 'SPSPSPSP')\n        self.assertEqual(game(3, ['a', 'aa', 'aa', 'a']), 'PSPS')\n        self.assertEqual(game(2, ['a', 'c']), 'PS')\n", "\n\ndef game(n, words):\n    \"\"\"\n    >>> game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba']) # doctest: +NORMALIZE_WHITESPACE\n    'SPPSPSPS'\n    >>> game(3, ['a', 'aa', 'aa', 'a']) # doctest: +NORMALIZE_WHITESPACE\n    'PPSS'\n    >>> game(2, ['a', 'c']) # doctest: +NORMALIZE_WHITESPACE\n    'PS'\n    \"\"\"\n    prefixes = ['']\n    suffixes = ['']\n    for word in words:\n        if word.endswith(prefixes[-1]) or prefixes[-1].endswith(word):\n            prefixes.append(word)\n        else:\n            suffixes.append(word)\n    return ''.join(['P' if word in prefixes else 'S' for word in words])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    words = [input() for _ in range(2 * n - 2)]\n    print(game(n, words))\n", "\n\ndef game(n, words):\n    \"\"\"\n    >>> game(5, ['ba', 'a', 'abab', 'a', 'aba', 'baba', 'ab', 'aba']) == 'SPPSPSPS'\n    True\n    >>> game(3, ['a', 'aa', 'aa', 'a']) == 'PPSS'\n    True\n    >>> game(2, ['a', 'c']) == 'PS'\n    True\n    \"\"\"\n    prefixes = ['']\n    suffixes = ['']\n    for word in words:\n        if word.endswith(prefixes[-1]):\n            prefixes.append(word)\n        else:\n            suffixes.append(word)\n    return ''.join(['P' if word in prefixes else 'S' for word in words])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    words = [input() for _ in range(2 * n - 2)]\n    print(game(n, words))\n", "n=int(input())\np=[]\ns=[]\nfor i in range(n):\n    p.append(input())\nfor i in range(n):\n    s.append(input())\np=sorted(p,key=lambda x:len(x))\ns=sorted(s,key=lambda x:len(x))\nans=''\nfor i in range(n):\n    if p[i]==s[i]:\n        ans+='P'\n    else:\n        ans+='S'\nfor i in range(n-1,-1,-1):\n    if p[i]==s[i]:\n        ans+='P'\n    else:\n        ans+='S'\nprint(ans)\n"]