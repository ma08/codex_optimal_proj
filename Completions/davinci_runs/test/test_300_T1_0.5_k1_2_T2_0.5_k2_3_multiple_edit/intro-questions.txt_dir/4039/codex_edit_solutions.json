["\nimport sys\n\ndef main():\n    n, r = map(int, input().split()) # n is number of projects, r is the initial amount\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r: # if the amount needed is greater than the initial amount, then NO\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for project in projects:\n        if project[0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += project[1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, r = map(int, input().split()) # n is number of projects and r is the initial amount\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r: # if the amount needed is greater than the initial amount, then no\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print(\"Hello World\")\n    print(\"Hello World\")\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for project in projects:\n        if project[0] > r:\n            print(\"NO\")\n            return\n        r += project[1]\n        if r < 0:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\ndef fix_spelling(dictionary, misspelled_word):\n    return dictionary.get(misspelled_word)\n\n\ndef main():\n    dictionary = {'accomodation': 'accommodation',\n                  'acknowledgment': 'acknowledgement',\n                  'anemia': 'anaemia',\n                  'appologize': 'apologize',\n                  'archean': 'archaean',\n                  'athelete': 'athlete',\n                  'calender': 'calendar',\n                  'canceled': 'cancelled',\n                  'caraterized': 'characterized',\n                  'cemetary': 'cemetery',\n                  'committment': 'commitment',\n                  'definately': 'definitely',\n                  'dependance': 'dependence',\n                  'dissapear': 'disappear',\n                  'embarrass': 'embarrass',\n                  'enviroment': 'environment',\n                  'existance': 'existence',\n                  'foward': 'forward',\n                  'fulfillment': 'fulfilment',\n                  'inconvinient': 'inconvenient',\n                  'independant': 'independent',\n                  'judgement': 'judgment',\n                  'lieing': 'lying',\n                  'millenium': 'millennium',\n                  'occured': 'occurred',\n                  'occurence': 'occurrence',\n                  'paralell': 'parallel',\n                  'parl': 'pal',\n                  'persistance': 'persistence',\n                  'practise': 'practice',\n                  'questionaire': 'questionnaire',\n                  'recieve': 'receive',\n                  'recommend': 'recommend',\n                  'referred': 'referred',\n                  'refered': 'referred',\n                  'religous': 'religious',\n                  'remembered': 'remembered',\n                  'seperate': 'separate',\n                  'sence': 'sense',\n                  'succesful': 'successful',\n                  'superceed': 'supersede',\n                  'threshhold': 'threshold',\n                  'tommorow': 'tomorrow',\n                  'tounge': 'tongue',\n                  'truely': 'truly',\n                  'usefull': 'useful',\n                  'useing': 'using',\n                  'wierd': 'weird'}\n    print(fix_spelling(dictionary, 'accomodation'))\n    print(fix_spelling(dictionary, 'acknowledgment'))\n    print(fix_spelling(dictionary, 'anemia'))\n    print(fix_spelling(dictionary, 'appologize'))\n    print(fix_spelling(dictionary, 'archean'))\n    print(fix_spelling(dictionary, 'athelete'))\n    print(fix_spelling(dictionary, 'calender'))\n    print(fix_spelling(dictionary, 'canceled'))\n    print(fix_spelling(dictionary, 'caraterized'))\n    print(fix_spelling(dictionary, 'cemetary'))\n    print(fix_spelling(dictionary, 'committment'))\n    print(fix_spelling(dictionary, 'definately'))\n    print(fix_spelling(dictionary, 'dependance'))\n    print(fix_spelling(dictionary, 'dissapear'))\n    print(fix_spelling(dictionary, 'embarrass'))\n    print(fix_spelling(dictionary, 'enviroment'))\n    print(fix_spelling(dictionary, 'existance'))\n    print(fix_spelling(dictionary, 'foward'))\n    print(fix_spelling(dictionary, 'fulfillment'))\n    print(fix_spelling(dictionary, 'inconvinient'))\n    print(fix_spelling(dictionary, 'independant'))\n    print(fix_spelling(dictionary, 'judgement'))\n    print(fix_spelling(dictionary, 'lieing'))\n    print(fix_spelling(dictionary, 'millenium'))\n    print(fix_spelling(dictionary, 'occured'))\n    print(fix_spelling(dictionary, 'occurence'))\n    print(fix_spelling(dictionary, 'paralell'))\n    print(fix_spelling(dictionary, 'parl'))\n    print(fix_spelling(dictionary, 'persistance'))\n    print(fix_spelling(dictionary, 'practise'))\n    print(fix_spelling(dictionary, 'questionaire'))\n    print(fix_spelling(dictionary, 'recieve'))\n    print(fix_spelling(dictionary, 'recommend'))\n    print(fix_spelling(dictionary, 'referred'))\n    print(fix_spelling(dictionary, 'refered'))\n    print(fix_spelling(dictionary, 'religous'))\n    print(fix_spelling(dictionary, 'remembered'))\n    print(fix_spelling(dictionary, 'seperate'))\n    print(fix_spelling(dictionary, 'sence'))\n    print(fix_spelling(dictionary, 'succesful'))\n    print(fix_spelling(dictionary, 'superceed'))\n    print(fix_spelling(dictionary, 'threshhold'))\n    print(fix_spelling(dictionary, 'tommorow'))\n    print(fix_spelling(dictionary, 'tounge'))\n    print(fix_spelling(dictionary, 'truely'))\n    print(fix_spelling(dictionary, 'usefull'))\n    print(fix_spelling(dictionary, 'useing'))\n    print(fix_spelling(dictionary, 'wierd'))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, r = map(int, input().split()) # n is number of projects and r is the initial amount\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r: # if the amount needed is greater than the initial amount, then no\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n    print(r)\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main(msg):\n    print(msg)\n\nif __name__ == \"__main__\":\n    main(\"Hello World\")\n", "\nimport sys\nimport re\n\ndef fix_spelling(dictionary, misspelled_word):\n    return dictionary.get(misspelled_word)\n\n\ndef main():\n    if len(sys.argv) < 3:\n        print('Usage: python spellcheck.py <dictionary> <file>')\n        sys.exit(1)\n\n    dictionary_file = sys.argv[1]\n    text_file = sys.argv[2]\n\n    dictionary = {}\n    with open(dictionary_file) as file:\n        for line in file:\n            line = line.strip()\n            dictionary[line] = line\n    \n    with open(text_file) as file:\n        for line in file:\n            line = line.strip()\n            words = re.split(r'[^a-zA-Z]', line)\n            for word in words:\n                word = word.lower()\n                if word in dictionary:\n                    continue\n                else:\n                    print(word)\n                    replacement = fix_spelling(dictionary, word)\n                    if replacement:\n                        print(f'\\t{replacement}')\n                    else:\n                        print('\\t(unknown)')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport json\n\n\n\ndef fix_spelling(dictionary, misspelled_word):\n    with open('dictionary.json') as f:\n        data = json.load(f)\n    if misspelled_word in data:\n        return data[misspelled_word]\n    else:\n        return None\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n    for project in projects:\n        if project[0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += project[1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for project in projects:\n        if project[0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += project[1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\n\nif __name__ == '__main__':\n    main()\n"]