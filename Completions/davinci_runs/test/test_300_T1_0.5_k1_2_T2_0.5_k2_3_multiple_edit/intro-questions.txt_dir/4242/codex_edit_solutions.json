["\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n): \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n\n", "#!/usr/bin/env python3\n\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "# -*- coding: utf-8 -*-\nimport math\nimport collections\n\ndef main():\n    A, B, K = map(int, input().split())\n\n    def prime_factorisation(n):\n        factors = []\n        for i in range(2, int(math.sqrt(n)) + 1):\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n        return factors\n\n    def find_num(A, B, K):\n        A_factors = prime_factorisation(A)\n        B_factors = prime_factorisation(B)\n        common_factors = list(set(A_factors) & set(B_factors))\n        return common_factors[-K]\n\n    print(find_num(A, B, K))\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef gcd(a, b):\n    if a < b: a, b = b, a\n    while b != 0:\n        a, b = b, a%b\n    return a\n\na, b, k = map(int, input().split()) #takes input\n\ng = gcd(a, b) #finds gcd\n\ndivisors = [] #finds divisors\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g%i == 0:\n        divisors.append(i) \n        if i != g//i:\n            divisors.append(g//i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorisation(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1, 1):\n        while n % i == 0:\n            n = n // i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorisation(A)\n    B_factors = prime_factorisation(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n", "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n): \n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n", "import math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a # swap\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    while b != 0:\n        r = a % b\n        a, b = b, a % b\n    return b\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n): \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n", "print(\"hello\")\n", "import math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorisation(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(n1, n2, k):\n    n1_factors = prime_factorisation(n1)\n    n2_factors = prime_factorisation(n2)\n    common_factors = list(set(n1_factors) & set(n2_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n"]