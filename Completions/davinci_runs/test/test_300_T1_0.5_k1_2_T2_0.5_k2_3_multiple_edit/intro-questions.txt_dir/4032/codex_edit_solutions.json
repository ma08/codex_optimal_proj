["\n\ndef main():\n    a, b = map(int, input().split())\n    print(a * b)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# #\n\ndef main():\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    ans = 0\n    while len(problems) > 0:\n        if problems[0] <= k:\n            ans += 1\n            problems.pop(0)\n        elif problems[-1] <= k:\n            ans += 1\n            problems.pop()\n        else:\n            break\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    ans = 0\n    while len(problems) > 0:\n        if problems[0] <= k:\n            ans += 1\n            problems.pop(0)\n        elif problems[-1] <= k:\n            ans += 1\n            problems.pop(-1)\n        else:\n            break\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b = map(int, input().split())\n    print(a*b)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# input\ndef main():\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n\n    # solve\n    ans = 0\n    while len(problems) > 0:\n        if problems[0] <= k:\n            ans += 1\n            problems.pop(0)\n        elif problems[-1] <= k:\n            ans += 1\n            problems.pop()\n        else:\n            break\n    print(ans)\n# output\n\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\n    # input\ndef main():\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n\n    # solve\n    ans = 0\n    while len(problems) > 0:\n        if problems[0] <= k:\n            ans += 1\n            problems.pop(0)\n        elif problems[-1] <= k:\n            ans += 1\n            problems.pop()\n        else:\n            break\n    print(ans)\n    # output\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    A = list(map(int, input().split()))\n    i, j = 0, n - 1\n    ans = 0\n    while i <= j:\n        if A[i] > k and A[j] > k:\n            break\n        elif A[i] <= k and A[j] <= k:\n            ans += 2\n            i += 1\n            j -= 1\n        elif A[i] <= k:\n            ans += 1\n            i += 1\n        else:\n            ans += 1\n            j -= 1\n    print(ans)\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    ans = 0\n    while len(problems) > 0:\n        if problems[0] <= k:\n            ans += 1\n            problems.pop(0)\n        elif problems[-1] <= k:\n            ans += 1\n            problems.pop()\n        else:\n            break\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(n * k)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, k = map(int, input().split())\n    problems = sorted(map(int, input().split()))\n    ans = 0\n    while len(problems) > 0:\n        if problems[0] <= k:\n            ans += 1\n            problems.pop(0)\n        elif problems[-1] <= k:\n            ans += 1\n            problems.pop()\n        else:\n            break\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\n\ndef main():\n    n, k = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(A)\n    print(n + 1)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    ans = 0\n    for problem in problems:\n        if problem <= k:\n            ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(n + 1, end='')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# input\ndef main():\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n\n# solve\n    ans = 0\n    while len(problems) > 0:\n        if problems[0] <= k:\n            ans += 1\n            problems.pop(0)\n        elif problems[-1] <= k:\n            ans += 1\n            problems.pop()\n        else:\n            break\n    print(ans)\n# output\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    A = list(map(int, input().split()))\n    i, j = 0, n-1\n    ans = 0\n    while i <= j:\n        if A[i] > k and A[j] > k:\n            break\n        elif A[i] <= k and A[j] <= k:\n            ans += 2\n            i += 1\n            j -= 1\n        elif A[i] <= k:\n            ans += 1\n            i += 1\n        else:\n            ans += 1\n            j -= 1\n    print(ans)\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a, b = map(int, input().split())\n    print(a * b)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    ans = 0\n    while len(problems) > 0:\n        if problems[0] <= k:\n            ans += 1\n            problems.pop(0)\n        elif problems[-1] <= k:\n            ans += 1\n            problems.pop()\n        else:\n            break\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"]