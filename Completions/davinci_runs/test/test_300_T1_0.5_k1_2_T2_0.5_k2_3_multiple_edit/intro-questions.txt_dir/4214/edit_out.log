2022-04-24 19:22:32.688608 num operations 2
2022-04-24 19:22:32.688618 size on input set 1
2022-04-24 19:22:32.688745 using api key jaanu
2022-04-24 19:22:39.509280 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N) \n"
    },
    {
      "index": 1,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n"
    },
    {
      "index": 2,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n"
    }
  ],
  "created": 1650828152,
  "object": "edit"
}
2022-04-24 19:22:39.509481 fix spelling mistakes 3 ['\n\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N) \n', '\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n', '\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n']
2022-04-24 19:22:39.509514 size on output set 2
2022-04-24 19:22:39.509521 size on input set 2
2022-04-24 19:22:39.509688 using api key jaanu
2022-04-24 19:22:47.064131 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N) \n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import sqrt\nfrom itertools import permutations \n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n \npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n"
    },
    {
      "index": 2,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\npaths = permutations(points)\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\nprint(total_dist/N) \n"
    }
  ],
  "created": 1650828159,
  "object": "edit"
}
2022-04-24 19:22:47.064311 fix syntax errors 3 ['#!/usr/bin/env python3\n\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N) \n', '\n\nfrom math import sqrt\nfrom itertools import permutations \n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n \npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n', '\nfrom math import sqrt\nfrom itertools import permutations\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\npaths = permutations(points)\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\nprint(total_dist/N) \n']
2022-04-24 19:22:47.064460 using api key jaanu
2022-04-24 19:22:57.194638 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/(N*factorial(N)))\n"
    },
    {
      "index": 1,
      "text": "from math import sqrt\nfrom itertools import permutations\n\n\ndef dist(p1, p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N - 1):\n        dist_in_path += dist(path[i], path[i + 1])\n    total_dist += dist_in_path\n\nprint(total_dist / N)\n"
    },
    {
      "index": 2,
      "text": "\n"
    }
  ],
  "created": 1650828167,
  "object": "edit"
}
2022-04-24 19:22:57.194817 fix syntax errors 3 ['\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/(N*factorial(N)))\n', 'from math import sqrt\nfrom itertools import permutations\n\n\ndef dist(p1, p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N - 1):\n        dist_in_path += dist(path[i], path[i + 1])\n    total_dist += dist_in_path\n\nprint(total_dist / N)\n', '\n']
2022-04-24 19:22:57.194955 size on output set 6
2022-04-24 19:22:57.194968 num operations 2
2022-04-24 19:22:57.194973 size on input set 1
2022-04-24 19:22:57.195098 using api key kouti
2022-04-24 19:23:05.800968 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u9806\u5217\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u9806\u5217\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\u3002\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\uff08\u518d\u5e30\uff09\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    }
  ],
  "created": 1650828177,
  "object": "edit"
}
2022-04-24 19:23:05.801193 fix spelling mistakes 3 ['\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全順列を求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全順列の数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める。\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める（再帰）\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n']
2022-04-24 19:23:05.801253 size on output set 3
2022-04-24 19:23:05.801261 size on input set 3
2022-04-24 19:23:05.801393 using api key soukgp
2022-04-24 19:23:17.573759 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom math import sqrt\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\u3002\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\u3002\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(0, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = p[0]\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\u3002\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    }
  ],
  "created": 1650828185,
  "object": "edit"
}
2022-04-24 19:23:17.574039 fix syntax errors 3 ['\nfrom math import sqrt\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める。\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める。\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(0, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = p[0]\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n\n\n# 全組み合わせを求める。\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n']
2022-04-24 19:23:17.574222 using api key derek
2022-04-24 19:23:24.245031 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# coding: utf-8\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u9806\u5217\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u9806\u5217\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u9806\u5217\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u9806\u5217\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u9806\u5217\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u9806\u5217\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    }
  ],
  "created": 1650828197,
  "object": "edit"
}
2022-04-24 19:23:24.245226 fix syntax errors 3 ['# coding: utf-8\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全順列を求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全順列の数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', 'import math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全順列を求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全順列の数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全順列を求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全順列の数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n']
2022-04-24 19:23:24.245482 using api key kouti
2022-04-24 19:23:30.855987 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\uff08\u518d\u5e30\uff09\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\uff08\u518d\u5e30\uff09\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 2,
      "text": "# coding: utf-8\n\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\uff08\u518d\u5e30\uff09\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    }
  ],
  "created": 1650828204,
  "object": "edit"
}
2022-04-24 19:23:30.856191 fix syntax errors 3 ['import math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める（再帰）\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める（再帰）\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '# coding: utf-8\n\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める（再帰）\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n']
2022-04-24 19:23:30.856251 size on output set 9
