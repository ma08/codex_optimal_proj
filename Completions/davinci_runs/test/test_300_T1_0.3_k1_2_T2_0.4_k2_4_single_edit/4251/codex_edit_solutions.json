["\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][0] - a[i-1][0])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n", "\n# Problem\n\n# You are given an integer N. You need to print the series of all prime numbers till N.\n\n# Input Format\n\n# The first and only line of the input contains a single integer N denoting the number till where you need to find the series of prime number.\n\n# Output Format\n\n# Print the desired output in single line separated by spaces.\n\n# Constraints\n\n# 1<=N<=1000\n\n# Solution\n\ndef solve(n):\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * 2, n+1, p):\n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    for p in range(n+1):\n        if prime[p]:\n            print(p, end=\" \")\n\nif __name__ == \"__main__\":\n    n = int(input())\n    solve(n)\n", "\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(\" \")])\n    print(solution(matrix))\n", "\n# Solution\n\ndef solve(n, m, a):\n    a.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, a[i][1] - a[i-1][0])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(solve(n, m, a))\n", "\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split()]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split()])\n    print(solution(matrix))\n", "\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\n\n# ctci.5_9\n\n# Solution\n\ndef solve(n):\n    ans = []\n    for i in range(n+1):\n        if i == 0:\n            ans.append(0)\n        elif i == 1:\n            ans.append(1)\n        else:\n            ans.append(ans[i-1] + ans[i-2])\n    return ans[n]\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(solve(n))\n", "\ndef solution(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    k = 0\n    for i in range(m):\n        col = [matrix[j][i] for j in range(n)]\n        col.sort()\n        for j in range(1, n):\n            k = max(k, col[j] - col[j - 1])\n    return k\n\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(\" \")])\n    print(solution(matrix))\n", "\n\ndef solution(matrix, k):\n    n = len(matrix)\n    m = len(matrix[0])\n    ans = 0\n    for i in range(m):\n        col = sorted([matrix[j][i] for j in range(n)])\n        for j in range(n - 1):\n            ans = max(ans, col[j + 1] - col[j] - k)\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(s) for s in input().split(\" \")])\n    print(solution(matrix))\n"]