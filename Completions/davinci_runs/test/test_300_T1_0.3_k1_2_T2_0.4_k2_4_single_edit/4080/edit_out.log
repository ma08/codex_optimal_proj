2022-04-20 08:10:38.030249 num operations 1
2022-04-20 08:10:38.030272 size on input set 1
2022-04-20 08:10:38.030603 using api key gabby
2022-04-20 08:10:51.892981 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport itertools\nimport collections\nimport functools\n\ndef solve(n, a, m, segs):\n    segs.sort(key=lambda x: x[1] - x[0])\n    segs.reverse()\n    # print(segs)\n    # print(a)\n    ans = 0\n    used = [False] * m\n    for i in range(m):\n        seg = segs[i]\n        if not used[i]:\n            for j in range(seg[0]-1, seg[1]):\n                a[j] -= 1\n            ans += 1\n            used[i] = True\n            for j in range(i+1, m):\n                seg2 = segs[j]\n                if not used[j] and seg2[0] <= seg[0] and seg2[1] >= seg[1]:\n                    used[j] = True\n    # print(a)\n    return max(a) - min(a), ans, [i+1 for i in range(m) if used[i]]\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segs.append((l, r))\n    ans, q, c = solve(n, a, m, segs)\n    print(ans)\n    print(q)\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport itertools\nimport collections\nimport functools\n\ndef solve(n, a, m, segs):\n    segs.sort(key=lambda x: x[1] - x[0])\n    segs.reverse()\n    #print(segs)\n    #print(a)\n    ans = 0\n    used = [False] * m\n    for i in range(m):\n        seg = segs[i]\n        if not used[i]:\n            for j in range(seg[0]-1, seg[1]):\n                a[j] -= 1\n            ans += 1\n            used[i] = True\n            for j in range(i+1, m):\n                seg2 = segs[j]\n                if not used[j] and seg2[0] <= seg[0] and seg2[1] >= seg[1]:\n                    used[j] = True\n    #print(a)\n    return max(a) - min(a), ans, [i+1 for i in range(m) if used[i] == True]\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segs.append((l, r))\n    ans, q, c = solve(n, a, m, segs)\n    print(ans)\n    print(q)\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport itertools\nimport collections\nimport functools\n\ndef solve(n, a, m, segs, ans):\n    if m == 0:\n        return max(a) - min(a), ans\n    else:\n        segs.sort(key=lambda x: x[1] - x[0])\n        segs.reverse()\n        #print(segs)\n        #print(a)\n        used = [False] * m\n        for i in range(m):\n            seg = segs[i]\n            if not used[i]:\n                for j in range(seg[0]-1, seg[1]):\n                    a[j] -= 1\n                ans += 1\n                used[i] = True\n                for j in range(i+1, m):\n                    seg2 = segs[j]\n                    if not used[j] and seg2[0] <= seg[0] and seg2[1] >= seg[1]:\n                        used[j] = True\n        #print(a)\n        return solve(n, a, m, [seg for i, seg in enumerate(segs) if not used[i]], ans)\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segs.append((l, r))\n    ans, c = solve(n, a, m, segs, 0)\n    print(ans)\n    print(c)\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport itertools\nimport collections\nimport functools\n\ndef solve(n, a, m, segs):\n    segs.sort(key=lambda x: x[1] - x[0])\n    segs.reverse()\n    # print(segs)\n    # print(a)\n    ans = 0\n    used = [False] * m\n    for i in range(m):\n        seg = segs[i]\n        if not used[i]:\n            for j in range(seg[0]-1, seg[1]):\n                a[j] -= 1\n            ans += 1\n            used[i] = True\n            for j in range(i+1, m):\n                seg2 = segs[j]\n                if not used[j] and seg2[0] <= seg[0] and seg2[1] >= seg[1]:\n                    used[j] = True\n    # print(a)\n    return max(a) - min(a), ans, [i+1 for i in range(m) if used[i]]\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segs.append((l, r))\n    ans, q, c = solve(n, a, m, segs)\n    print(ans)\n    print(q)\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650442238,
  "object": "edit"
}
2022-04-20 08:10:51.893264 fix syntax errors 4 ["\nimport sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport itertools\nimport collections\nimport functools\n\ndef solve(n, a, m, segs):\n    segs.sort(key=lambda x: x[1] - x[0])\n    segs.reverse()\n    # print(segs)\n    # print(a)\n    ans = 0\n    used = [False] * m\n    for i in range(m):\n        seg = segs[i]\n        if not used[i]:\n            for j in range(seg[0]-1, seg[1]):\n                a[j] -= 1\n            ans += 1\n            used[i] = True\n            for j in range(i+1, m):\n                seg2 = segs[j]\n                if not used[j] and seg2[0] <= seg[0] and seg2[1] >= seg[1]:\n                    used[j] = True\n    # print(a)\n    return max(a) - min(a), ans, [i+1 for i in range(m) if used[i]]\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segs.append((l, r))\n    ans, q, c = solve(n, a, m, segs)\n    print(ans)\n    print(q)\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport itertools\nimport collections\nimport functools\n\ndef solve(n, a, m, segs):\n    segs.sort(key=lambda x: x[1] - x[0])\n    segs.reverse()\n    #print(segs)\n    #print(a)\n    ans = 0\n    used = [False] * m\n    for i in range(m):\n        seg = segs[i]\n        if not used[i]:\n            for j in range(seg[0]-1, seg[1]):\n                a[j] -= 1\n            ans += 1\n            used[i] = True\n            for j in range(i+1, m):\n                seg2 = segs[j]\n                if not used[j] and seg2[0] <= seg[0] and seg2[1] >= seg[1]:\n                    used[j] = True\n    #print(a)\n    return max(a) - min(a), ans, [i+1 for i in range(m) if used[i] == True]\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segs.append((l, r))\n    ans, q, c = solve(n, a, m, segs)\n    print(ans)\n    print(q)\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport itertools\nimport collections\nimport functools\n\ndef solve(n, a, m, segs, ans):\n    if m == 0:\n        return max(a) - min(a), ans\n    else:\n        segs.sort(key=lambda x: x[1] - x[0])\n        segs.reverse()\n        #print(segs)\n        #print(a)\n        used = [False] * m\n        for i in range(m):\n            seg = segs[i]\n            if not used[i]:\n                for j in range(seg[0]-1, seg[1]):\n                    a[j] -= 1\n                ans += 1\n                used[i] = True\n                for j in range(i+1, m):\n                    seg2 = segs[j]\n                    if not used[j] and seg2[0] <= seg[0] and seg2[1] >= seg[1]:\n                        used[j] = True\n        #print(a)\n        return solve(n, a, m, [seg for i, seg in enumerate(segs) if not used[i]], ans)\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segs.append((l, r))\n    ans, c = solve(n, a, m, segs, 0)\n    print(ans)\n    print(c)\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport itertools\nimport collections\nimport functools\n\ndef solve(n, a, m, segs):\n    segs.sort(key=lambda x: x[1] - x[0])\n    segs.reverse()\n    # print(segs)\n    # print(a)\n    ans = 0\n    used = [False] * m\n    for i in range(m):\n        seg = segs[i]\n        if not used[i]:\n            for j in range(seg[0]-1, seg[1]):\n                a[j] -= 1\n            ans += 1\n            used[i] = True\n            for j in range(i+1, m):\n                seg2 = segs[j]\n                if not used[j] and seg2[0] <= seg[0] and seg2[1] >= seg[1]:\n                    used[j] = True\n    # print(a)\n    return max(a) - min(a), ans, [i+1 for i in range(m) if used[i]]\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segs = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segs.append((l, r))\n    ans, q, c = solve(n, a, m, segs)\n    print(ans)\n    print(q)\n    print(' '.join(map(str, c)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 08:10:51.893444 size on output set 4
