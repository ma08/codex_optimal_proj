2022-04-20 08:38:06.728246 num operations 1
2022-04-20 08:38:06.728266 size on input set 1
2022-04-20 08:38:06.728474 using api key soukgp
2022-04-20 08:38:09.654063 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = [0] * M\n    B = [0] * M\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = a\n        B[i] = b\n    print(A)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][0])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = [0] * M\n    B = [0] * M\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = a\n        B[i] = b\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][0])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650443886,
  "object": "edit"
}
2022-04-20 08:38:09.654386 fix syntax errors 4 ['\n\ndef main():\n    N, M = map(int, input().split())\n    A = [0] * M\n    B = [0] * M\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = a\n        B[i] = b\n    print(A)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][0])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    A = [0] * M\n    B = [0] * M\n    for i in range(M):\n        a, b = map(int, input().split())\n        A[i] = a\n        B[i] = b\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(M):\n        a, b = map(int, input().split())\n        A.append([a, b])\n    print(A[0][0])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 08:38:09.654423 size on output set 3
2022-04-20 08:38:09.654436 num operations 1
2022-04-20 08:38:09.654442 size on input set 1
2022-04-20 08:38:09.654596 using api key derek
2022-04-20 08:38:09.690922 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 08:38:11.192861 using api key sourya
2022-04-20 08:38:14.461195 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1] - 1)\n        graph[edge[1] - 1].append(edge[0] - 1)\n\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n))\n\ndef dfs(graph, n):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True  # \u9802\u70b91\u3092\u8a2a\u554f\u6e08\u307f\u306b\u3059\u308b\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650443891,
  "object": "edit"
}
2022-04-20 08:38:14.461463 fix syntax errors 4 ["\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1] - 1)\n        graph[edge[1] - 1].append(edge[0] - 1)\n\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n))\n\ndef dfs(graph, n):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    print(dfs(graph, n, m))\n\n\ndef dfs(graph, n, m):\n    visited = [False for _ in range(n)]\n    visited[0] = True  # 頂点1を訪問済みにする\n    stack = [0]\n    count = 0\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(len(graph[v])):\n            if not visited[graph[v][i]]:\n                visited[graph[v][i]] = True\n                stack.append(graph[v][i])\n        if len(stack) == 0:\n            count += 1\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n    return count\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 08:38:14.461621 size on output set 4
