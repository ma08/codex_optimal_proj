2022-04-20 08:17:46.983421 num operations 1
2022-04-20 08:17:46.983439 size on input set 1
2022-04-20 08:17:46.983597 using api key kouti
2022-04-20 08:17:54.186380 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    print(n, m, k, roads)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys, heapq\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m+1)]\n    print(n, m, k)\n    print(roads)\n    # dijkstra\n    dist = [float('inf')] * (n+1)\n    dist[1] = 0\n    pq = []\n    heapq.heappush(pq, (0, 1))\n    while pq:\n        d, node = heapq.heappop(pq)\n        if dist[node] < d:\n            continue\n        for road in roads[node]:\n            if dist[road[0]] > dist[node] + road[1]:\n                dist[road[0]] = dist[node] + road[1]\n                heapq.heappush(pq, (dist[road[0]], road[0]))\n\n    print(dist)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import defaultdict\n\ndef get_city_roads(roads):\n    city_roads = defaultdict(list)\n    for road in roads:\n        city_roads[road[0]].append(road[1])\n        city_roads[road[1]].append(road[0])\n    return city_roads\n\ndef get_city_cost(roads, city_roads):\n    city_cost = defaultdict(int)\n    for road in roads:\n        city_cost[road[0]] += road[2]\n        city_cost[road[1]] += road[2]\n    return city_cost\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)] # [from, to, cost]\n    city_roads = get_city_roads(roads)\n    city_cost = get_city_cost(roads, city_roads)\n    print(city_roads)\n    print(city_cost)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    # print(n, m, k)\n    # print(roads)\n\n    # print(roads[0][0])\n    # print(roads[0][1])\n    # print(roads[0][2])\n    # print(roads[1][0])\n    # print(roads[1][1])\n    # print(roads[1][2])\n\n    # print(roads[0][0])\n    # print(roads[1][0])\n    # print(roads[2][0])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650442667,
  "object": "edit"
}
2022-04-20 08:17:54.186662 fix syntax errors 4 ['\n\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    print(n, m, k, roads)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys, heapq\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m+1)]\n    print(n, m, k)\n    print(roads)\n    # dijkstra\n    dist = [float(\'inf\')] * (n+1)\n    dist[1] = 0\n    pq = []\n    heapq.heappush(pq, (0, 1))\n    while pq:\n        d, node = heapq.heappop(pq)\n        if dist[node] < d:\n            continue\n        for road in roads[node]:\n            if dist[road[0]] > dist[node] + road[1]:\n                dist[road[0]] = dist[node] + road[1]\n                heapq.heappush(pq, (dist[road[0]], road[0]))\n\n    print(dist)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef get_city_roads(roads):\n    city_roads = defaultdict(list)\n    for road in roads:\n        city_roads[road[0]].append(road[1])\n        city_roads[road[1]].append(road[0])\n    return city_roads\n\ndef get_city_cost(roads, city_roads):\n    city_cost = defaultdict(int)\n    for road in roads:\n        city_cost[road[0]] += road[2]\n        city_cost[road[1]] += road[2]\n    return city_cost\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)] # [from, to, cost]\n    city_roads = get_city_roads(roads)\n    city_cost = get_city_cost(roads, city_roads)\n    print(city_roads)\n    print(city_cost)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    # print(n, m, k)\n    # print(roads)\n\n    # print(roads[0][0])\n    # print(roads[0][1])\n    # print(roads[0][2])\n    # print(roads[1][0])\n    # print(roads[1][1])\n    # print(roads[1][2])\n\n    # print(roads[0][0])\n    # print(roads[1][0])\n    # print(roads[2][0])\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 08:17:54.186706 size on output set 4
