2022-04-20 08:26:42.521348 num operations 1
2022-04-20 08:26:42.521366 size on input set 1
2022-04-20 08:26:42.521527 using api key derek
2022-04-20 08:26:42.634494 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 08:26:44.136375 using api key sunu
2022-04-20 08:26:49.135525 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -----Solution-----\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the array in descending order\na.sort(reverse=True)\n\n# Find the maximum number of operations required to make all elements equal\n# This is the number of operations required to make the largest element equal to the smallest element\nmax_ops = a[0] - a[-1]\n\n# Find the minimum number of operations required to make all elements equal\n# This is the number of operations required to make the smallest element equal to the largest element divided by 2\nmin_ops = (a[0] - a[-1]) // 2\n\n# If the minimum number of operations required to make all elements equal is less than the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the minimum number of operations\nif min_ops < max_ops:\n    print(min_ops)\n\n# If the minimum number of operations required to make all elements equal is greater than or equal to the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the maximum number of operations\nelse:\n    # Find the number of elements that are equal to the largest element\n    num_largest = a.count(a[0])\n\n    # If the number of elements that are equal to the largest element is greater than or equal to the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations\n    if num_largest >= k:\n        print(max_ops)\n\n    # If the number of elements that are equal to the largest element is less than the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations plus the number of operations required to make the largest element equal to the second largest element\n    else:\n        print(max_ops + (a[1] - a[0]) // 2)\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----Solution-----\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the array in descending order\na.sort(reverse=True)\n\n# Find the maximum number of operations required to make all elements equal\n# This is the number of operations required to make the largest element equal to the smallest element\nmax_ops = a[0] - a[-1]\n\n# Find the minimum number of operations required to make all elements equal\n# This is the number of operations required to make the smallest element equal to the largest element divided by 2\nmin_ops = (a[0] - a[-1]) // 2\n\n# If the minimum number of operations required to make all elements equal is less than the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the minimum number of operations\nif min_ops < max_ops:\n    print(min_ops)\n\n# If the minimum number of operations required to make all elements equal is greater than or equal to the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the maximum number of operations\nelse:\n    # Find the number of elements that are equal to the largest element\n    num_largest = a.count(a[0])\n\n    # If the number of elements that are equal to the largest element is greater than or equal to the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations\n    if num_largest >= k:\n        print(max_ops)\n\n    # If the number of elements that are equal to the largest element is less than the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations plus the number of operations required to make the largest element equal to the second largest element\n    else:\n        print(max_ops + (a[1] - a[0]) // 2)\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the array in descending order\na.sort(reverse=True)\n\n# Find the maximum number of operations required to make all elements equal\n# This is the number of operations required to make the largest element equal to the smallest element\nmax_ops = a[0] - a[-1]\n\n# Find the minimum number of operations required to make all elements equal\n# This is the number of operations required to make the smallest element equal to the largest element divided by two\nmin_ops = (a[0] - a[-1]) / 2\n\n# If the minimum number of operations required to make all elements equal is less than the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the minimum number of operations\nif min_ops < max_ops:\n    print(min_ops)\n\n# If the minimum number of operations required to make all elements equal is greater than or equal to the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the maximum number of operations\nelse:\n    # Find the number of elements that are equal to the largest element\n    num_largest = a.count(a[0])\n\n    # If the number of elements that are equal to the largest element is greater than or equal to the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations\n    if num_largest >= k:\n        print(max_ops)\n\n    # If the number of elements that are equal to the largest element is less than the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations plus the number of operations required to make the largest element equal to the second largest element divided by two\n    else:\n        print(max_ops + (a[1] - a[0]) / 2)\n"
    },
    {
      "index": 3,
      "text": "\n\n# -----Solution-----\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the array in descending order\na.sort(reverse=True)\n\n# Find the maximum number of operations required to make all elements equal\n# This is the number of operations required to make the largest element equal to the smallest element\nmax_ops = a[0] - a[-1]\n\n# Find the minimum number of operations required to make all elements equal\n# This is the number of operations required to make the smallest element equal to the largest element divided by 2\nmin_ops = (a[0] - a[-1]) // 2\n\n# If the minimum number of operations required to make all elements equal is less than the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the minimum number of operations\nif min_ops < max_ops:\n    print(min_ops)\n\n# If the minimum number of operations required to make all elements equal is greater than or equal to the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the maximum number of operations\nelse:\n    # Find the number of elements that are equal to the largest element\n    num_largest = a.count(a[0])\n\n    # If the number of elements that are equal to the largest element is greater than or equal to the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations\n    if num_largest >= k:\n        print(max_ops)\n\n    # If the number of elements that are equal to the largest element is less than the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations plus the number of operations required to make the largest element equal to the second largest element\n    else:\n        print(max_ops + (a[1] - a[0]) // 2)\n"
    }
  ],
  "created": 1650443204,
  "object": "edit"
}
2022-04-20 08:26:49.135833 fix syntax errors 4 ['\n\n# -----Solution-----\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the array in descending order\na.sort(reverse=True)\n\n# Find the maximum number of operations required to make all elements equal\n# This is the number of operations required to make the largest element equal to the smallest element\nmax_ops = a[0] - a[-1]\n\n# Find the minimum number of operations required to make all elements equal\n# This is the number of operations required to make the smallest element equal to the largest element divided by 2\nmin_ops = (a[0] - a[-1]) // 2\n\n# If the minimum number of operations required to make all elements equal is less than the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the minimum number of operations\nif min_ops < max_ops:\n    print(min_ops)\n\n# If the minimum number of operations required to make all elements equal is greater than or equal to the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the maximum number of operations\nelse:\n    # Find the number of elements that are equal to the largest element\n    num_largest = a.count(a[0])\n\n    # If the number of elements that are equal to the largest element is greater than or equal to the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations\n    if num_largest >= k:\n        print(max_ops)\n\n    # If the number of elements that are equal to the largest element is less than the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations plus the number of operations required to make the largest element equal to the second largest element\n    else:\n        print(max_ops + (a[1] - a[0]) // 2)\n', '\n\n# -----Solution-----\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the array in descending order\na.sort(reverse=True)\n\n# Find the maximum number of operations required to make all elements equal\n# This is the number of operations required to make the largest element equal to the smallest element\nmax_ops = a[0] - a[-1]\n\n# Find the minimum number of operations required to make all elements equal\n# This is the number of operations required to make the smallest element equal to the largest element divided by 2\nmin_ops = (a[0] - a[-1]) // 2\n\n# If the minimum number of operations required to make all elements equal is less than the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the minimum number of operations\nif min_ops < max_ops:\n    print(min_ops)\n\n# If the minimum number of operations required to make all elements equal is greater than or equal to the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the maximum number of operations\nelse:\n    # Find the number of elements that are equal to the largest element\n    num_largest = a.count(a[0])\n\n    # If the number of elements that are equal to the largest element is greater than or equal to the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations\n    if num_largest >= k:\n        print(max_ops)\n\n    # If the number of elements that are equal to the largest element is less than the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations plus the number of operations required to make the largest element equal to the second largest element\n    else:\n        print(max_ops + (a[1] - a[0]) // 2)\n', '\n\n#-----Solution-----\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the array in descending order\na.sort(reverse=True)\n\n# Find the maximum number of operations required to make all elements equal\n# This is the number of operations required to make the largest element equal to the smallest element\nmax_ops = a[0] - a[-1]\n\n# Find the minimum number of operations required to make all elements equal\n# This is the number of operations required to make the smallest element equal to the largest element divided by two\nmin_ops = (a[0] - a[-1]) / 2\n\n# If the minimum number of operations required to make all elements equal is less than the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the minimum number of operations\nif min_ops < max_ops:\n    print(min_ops)\n\n# If the minimum number of operations required to make all elements equal is greater than or equal to the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the maximum number of operations\nelse:\n    # Find the number of elements that are equal to the largest element\n    num_largest = a.count(a[0])\n\n    # If the number of elements that are equal to the largest element is greater than or equal to the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations\n    if num_largest >= k:\n        print(max_ops)\n\n    # If the number of elements that are equal to the largest element is less than the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations plus the number of operations required to make the largest element equal to the second largest element divided by two\n    else:\n        print(max_ops + (a[1] - a[0]) / 2)\n', '\n\n# -----Solution-----\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the array in descending order\na.sort(reverse=True)\n\n# Find the maximum number of operations required to make all elements equal\n# This is the number of operations required to make the largest element equal to the smallest element\nmax_ops = a[0] - a[-1]\n\n# Find the minimum number of operations required to make all elements equal\n# This is the number of operations required to make the smallest element equal to the largest element divided by 2\nmin_ops = (a[0] - a[-1]) // 2\n\n# If the minimum number of operations required to make all elements equal is less than the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the minimum number of operations\nif min_ops < max_ops:\n    print(min_ops)\n\n# If the minimum number of operations required to make all elements equal is greater than or equal to the maximum number of operations required to make all elements equal\n# Then we can make all elements equal in the maximum number of operations\nelse:\n    # Find the number of elements that are equal to the largest element\n    num_largest = a.count(a[0])\n\n    # If the number of elements that are equal to the largest element is greater than or equal to the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations\n    if num_largest >= k:\n        print(max_ops)\n\n    # If the number of elements that are equal to the largest element is less than the number of elements required to be equal\n    # Then we can make all elements equal in the maximum number of operations plus the number of operations required to make the largest element equal to the second largest element\n    else:\n        print(max_ops + (a[1] - a[0]) // 2)\n']
2022-04-20 08:26:49.136029 size on output set 2
2022-04-20 08:26:49.136045 num operations 1
2022-04-20 08:26:49.136052 size on input set 1
2022-04-20 08:26:49.136218 using api key jaanu
2022-04-20 08:26:51.759925 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[-1]:\n        print(0)\n    else:\n        print(a[-1] - a[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[-1]:\n        print(0)\n    else:\n        print(a[-1] - a[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[-1]:\n        print(0)\n    else:\n        print(a[-1] - a[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(max(0, a[-1] - a[0] - k))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650443209,
  "object": "edit"
}
2022-04-20 08:26:51.760144 fix syntax errors 4 ["\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[-1]:\n        print(0)\n    else:\n        print(a[-1] - a[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[-1]:\n        print(0)\n    else:\n        print(a[-1] - a[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[-1]:\n        print(0)\n    else:\n        print(a[-1] - a[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(max(0, a[-1] - a[0] - k))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 08:26:51.760177 size on output set 2
