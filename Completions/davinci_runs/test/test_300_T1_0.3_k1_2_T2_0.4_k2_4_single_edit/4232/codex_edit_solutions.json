["\n\n# SOLUTION\n# The problem is solved by binary search.\n# The idea is to find the smallest number x such that k elements of the array are less than or equal to x\n# This can be done by binary search on the array.\n# The time complexity is O(n log n)\n\nfrom sys import stdin, stdout\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\na.sort()\n\nlo = 1\nhi = 10**9\n\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    count = 0\n    for i in range(n):\n        if a[i] <= mid:\n            count += 1\n        else:\n            break\n    if count == k:\n        stdout.write(str(mid))\n        exit()\n    elif count < k:\n        lo = mid + 1\n    else:\n        hi = mid - 1\n\nstdout.write('-1')\n", "\n\n# SOLUTION\n# The problem is solved by binary search.\n# The idea is to find the smallest number x such that k elements of the array are less than or equal to x\n# This can be done by binary search on the array.\n# The time complexity is O(n log n).\n\nfrom sys import stdin, stdout\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\na.sort()\n\nlo = 1\nhi = 10**9\n\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    count = 0\n    for i in range(n):\n        if a[i] <= mid:\n            count += 1\n        else:\n            break\n    if count == k:\n        stdout.write(str(mid))\n        exit()\n    elif count < k:\n        lo = mid + 1\n    else:\n        hi = mid - 1\n\nstdout.write('-1')\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split())) \n    a.sort()\n    if k == 0:\n        print(1)\n        return\n    if a[k - 1] == a[k]:\n        print(-1)\n        return\n    print(a[k - 1])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if k == 0:\n        print(a[0])\n        return\n    if a[k - 1] == a[k]:\n        print(-1)\n        return\n    print(a[k - 1])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if k == 0:\n        print(1)\n        return\n    if a[k - 1] == a[k] and a[k - 1] == a[k - 2]:\n        print(-1)\n        return\n    print(a[k - 1])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if k == 0:\n        print(1)\n        return\n    if a[k - 1] == a[k] and k != n:\n        print(-1)\n        return\n    if a[k - 1] == a[k] and k == n:\n        print(a[k - 1])\n        return\n    else:\n        print(a[k - 1])\n\nif __name__ == '__main__':\n    main()\n", "\n# SOLUTION\n# The problem is solved by binary search.\n# The idea is to find the smallest number x such that k elements of the array are less than or equal to x.\n# This can be done by binary search on the array.\n# The time complexity is O(n log n).\n\nfrom sys import stdin, stdout\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\na.sort()\n\nlo = 1\nhi = 10**9\n\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    count = 0\n    for i in range(n):\n        if a[i] <= mid:\n            count += 1\n        else:\n            break\n    if count == k:\n        stdout.write(str(mid))\n        exit()\n    elif count < k:\n        lo = mid + 1\n    else:\n        hi = mid - 1\n\nstdout.write('-1')\n"]