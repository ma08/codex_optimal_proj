["\n# input\nn, m = map(int, input().split())\nx = list(map(int, input().split()))\n\n# sort\nx.sort()\n\n# get the median\nmedian = x[m // 2]\n\n# calculate the distance\nans = 0\nfor i in range(m):\n    ans += abs(x[i] - median)\n\nprint(ans)\n", "\n\nimport sys\n\ndef main():\n    # read input\n    m, n = map(int, input().split())\n    x = list(map(int, input().split()))\n\n    # sort the coordinates\n    x.sort()\n\n    # find the minimum number of moves required to achieve the objective\n    ans = 0 # initialize answer\n    for i in range(m):\n        ans += abs(x[i] - x[i-1]) # add the absolute difference between adjacent elements\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m = map(int, input().split())\n    x = list(map(int, input().split()))\n\n    # sort the coordinates\n    x.sort()\n\n    # find the minimum number of moves required to achieve the objective\n    ans = 0\n    for i in range(1, m):\n        ans += abs(x[i] - x[i-1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n# input\nn, m = map(int, input().split())\nx = list(map(int, input().split()))\n# sort\nx.sort()\n# get the median\nmedian = x[m // 2]\n# calculate the distance\nans = 0\nfor i in range(m):\n    ans += abs(x[i] - median)\n\nprint(ans)\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m = map(int, input().split())\n    x = list(map(int, input().split()))\n\n    # sort the coordinates\n    x.sort()\n\n    # find the minimum number of moves required to achieve the objective\n    ans = 0\n    for i in range(m):\n        ans += abs(x[i] - x[i + 1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    m = int(input())\n    x = list(map(int, input().split()))\n\n    # sort the coordinates\n    x.sort()\n\n    # find the minimum number of moves required to achieve the objective\n    ans = 0\n    for i in range(m):\n        ans += abs(x[i] - x[i-1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]