2022-04-20 08:15:16.416884 num operations 1
2022-04-20 08:15:16.416906 size on input set 1
2022-04-20 08:15:16.417106 using api key jaanu
2022-04-20 08:15:41.468477 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(\"YES\")\nn, k = map(int, input().split())\n\nif k == 1:\n    print(\"1 2\")\n    print(\"2 1\")\nelif n == 2:\n    print(\"1 2\")\n    print(\"2 1\")\nelif n == 3:\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 1\")\nelif n == 4:\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\nelif n == 5:\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\nelif n == 6:\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\nelif n == 7:\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\n    print(\"6 7\")\nelif n == 8:\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\n    print(\"6 7\")\n    print(\"7 8\")\nelif n == 9:\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\n    print(\"6 7\")\n    print(\"7 8\")\n    print(\"8 9\")\nelif n == 10:\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\n    print(\"6 7\")\n    print(\"7 8\")\n    print(\"8 9\")\n    print(\"9 10\")\n"
    },
    {
      "index": 1,
      "text": "\n\nn, k = map(int, input().split())\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nsys.setrecursionlimit(100000000)\nn, k = map(int, input().split())\n\ndef print_graph(graph):\n    for i in range(len(graph)):\n        for j in range(len(graph[i])):\n            print(graph[i][j], end=\" \")\n        print()\n\ndef dfs(graph, start, visited):\n    visited[start] = True\n    for i in range(len(graph[start])):\n        if graph[start][i] == 1 and visited[i] == False:\n            dfs(graph, i, visited)\n\ndef is_connected(graph):\n    visited = [False] * len(graph)\n    dfs(graph, 0, visited)\n    for i in range(len(visited)):\n        if visited[i] == False:\n            return False\n    return True\n\ndef is_eulerian(graph):\n    if is_connected(graph) == False:\n        return False\n    odd_count = 0\n    for i in range(len(graph)):\n        count = 0\n        for j in range(len(graph[i])):\n            if graph[i][j] == 1:\n                count += 1\n        if count % 2 != 0:\n            odd_count += 1\n    if odd_count == 0 or odd_count == 2:\n        return True\n    return False\n\ndef has_eulerian_cycle(graph):\n    if is_eulerian(graph) == True:\n        return True\n    return False\n\ndef has_eulerian_path(graph):\n    if is_eulerian(graph) == True:\n        return True\n    return False\n\ndef find_eulerian_cycle(graph):\n    print(\"YES\")\n    print_graph(graph)\n\ndef find_eulerian_path(graph):\n    print(\"YES\")\n    print_graph(graph)\n\ndef find_cycle(graph):\n    if has_eulerian_cycle(graph) == True:\n        find_eulerian_cycle(graph)\n    elif has_eulerian_path(graph) == True:\n        find_eulerian_path(graph)\n    else:\n        print(\"NO\")\n\ngraph = [[0 for i in range(n)] for j in range(n)]\nfor i in range(k):\n    a, b = map(int, input().split())\n    graph[a-1][b-1] = 1\n    graph[b-1][a-1] = 1\nfind_cycle(graph)\n"
    },
    {
      "index": 3,
      "text": "\nn, k = map(int, input().split())\n\nif k == 1:\n    print(\"NO\")\nelif n == 2:\n    print(\"YES\")\n    print(\"1 2\")\n    print(\"2 1\")\nelif n == 3:\n    print(\"YES\")\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 1\")\nelif n == 4:\n    print(\"YES\")\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\nelif n == 5:\n    print(\"YES\")\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\nelif n == 6:\n    print(\"YES\")\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\nelif n == 7:\n    print(\"YES\")\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\n    print(\"6 7\")\nelif n == 8:\n    print(\"YES\")\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\n    print(\"6 7\")\n    print(\"7 8\")\nelif n == 9:\n    print(\"YES\")\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\n    print(\"6 7\")\n    print(\"7 8\")\n    print(\"8 9\")\nelif n == 10:\n    print(\"YES\")\n    print(\"1 2\")\n    print(\"2 3\")\n    print(\"3 4\")\n    print(\"4 1\")\n    print(\"1 5\")\n    print(\"5 6\")\n    print(\"6 7\")\n    print(\"7 8\")\n    print(\"8 9\")\n    print(\"9 10\")\nelse:\n    print(\"NO\")\n"
    }
  ],
  "created": 1650442516,
  "object": "edit"
}
2022-04-20 08:15:41.468801 fix syntax errors 4 ['\nprint("YES")\nn, k = map(int, input().split())\n\nif k == 1:\n    print("1 2")\n    print("2 1")\nelif n == 2:\n    print("1 2")\n    print("2 1")\nelif n == 3:\n    print("1 2")\n    print("2 3")\n    print("3 1")\nelif n == 4:\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\nelif n == 5:\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\nelif n == 6:\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\nelif n == 7:\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\n    print("6 7")\nelif n == 8:\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\n    print("6 7")\n    print("7 8")\nelif n == 9:\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\n    print("6 7")\n    print("7 8")\n    print("8 9")\nelif n == 10:\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\n    print("6 7")\n    print("7 8")\n    print("8 9")\n    print("9 10")\n', '\n\nn, k = map(int, input().split())\n', '\nimport sys\nsys.setrecursionlimit(100000000)\nn, k = map(int, input().split())\n\ndef print_graph(graph):\n    for i in range(len(graph)):\n        for j in range(len(graph[i])):\n            print(graph[i][j], end=" ")\n        print()\n\ndef dfs(graph, start, visited):\n    visited[start] = True\n    for i in range(len(graph[start])):\n        if graph[start][i] == 1 and visited[i] == False:\n            dfs(graph, i, visited)\n\ndef is_connected(graph):\n    visited = [False] * len(graph)\n    dfs(graph, 0, visited)\n    for i in range(len(visited)):\n        if visited[i] == False:\n            return False\n    return True\n\ndef is_eulerian(graph):\n    if is_connected(graph) == False:\n        return False\n    odd_count = 0\n    for i in range(len(graph)):\n        count = 0\n        for j in range(len(graph[i])):\n            if graph[i][j] == 1:\n                count += 1\n        if count % 2 != 0:\n            odd_count += 1\n    if odd_count == 0 or odd_count == 2:\n        return True\n    return False\n\ndef has_eulerian_cycle(graph):\n    if is_eulerian(graph) == True:\n        return True\n    return False\n\ndef has_eulerian_path(graph):\n    if is_eulerian(graph) == True:\n        return True\n    return False\n\ndef find_eulerian_cycle(graph):\n    print("YES")\n    print_graph(graph)\n\ndef find_eulerian_path(graph):\n    print("YES")\n    print_graph(graph)\n\ndef find_cycle(graph):\n    if has_eulerian_cycle(graph) == True:\n        find_eulerian_cycle(graph)\n    elif has_eulerian_path(graph) == True:\n        find_eulerian_path(graph)\n    else:\n        print("NO")\n\ngraph = [[0 for i in range(n)] for j in range(n)]\nfor i in range(k):\n    a, b = map(int, input().split())\n    graph[a-1][b-1] = 1\n    graph[b-1][a-1] = 1\nfind_cycle(graph)\n', '\nn, k = map(int, input().split())\n\nif k == 1:\n    print("NO")\nelif n == 2:\n    print("YES")\n    print("1 2")\n    print("2 1")\nelif n == 3:\n    print("YES")\n    print("1 2")\n    print("2 3")\n    print("3 1")\nelif n == 4:\n    print("YES")\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\nelif n == 5:\n    print("YES")\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\nelif n == 6:\n    print("YES")\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\nelif n == 7:\n    print("YES")\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\n    print("6 7")\nelif n == 8:\n    print("YES")\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\n    print("6 7")\n    print("7 8")\nelif n == 9:\n    print("YES")\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\n    print("6 7")\n    print("7 8")\n    print("8 9")\nelif n == 10:\n    print("YES")\n    print("1 2")\n    print("2 3")\n    print("3 4")\n    print("4 1")\n    print("1 5")\n    print("5 6")\n    print("6 7")\n    print("7 8")\n    print("8 9")\n    print("9 10")\nelse:\n    print("NO")\n']
2022-04-20 08:15:41.468938 size on output set 4
2022-04-20 08:15:41.468951 num operations 1
2022-04-20 08:15:41.468958 size on input set 1
2022-04-20 08:15:41.469115 using api key kouti
2022-04-20 08:15:44.181518 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k = map(int, input().split())\n\nif n % 2 == 1:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(1, n // 2 + 1):\n        print(i, k - i + 1)\n    for i in range(1, n // 2 + 1):\n        print(k - i + 1, i)\n"
    },
    {
      "index": 1,
      "text": "\nn, k = map(int, input().split())\n\nif n % 2 == 1:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(1, n // 2 + 1):\n        print(i, k - i + 1)\n    for i in range(1, n // 2 + 1):\n        print(k - i + 1, i)\n"
    },
    {
      "index": 2,
      "text": "\nn, k = map(int, input().split())\n\nif n % 2 == 1:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(1, n // 2 + 1):\n        print(i, k - i + 1)\n    for i in range(1, n // 2 + 1):\n        print(k - i + 1, i)\n"
    },
    {
      "index": 3,
      "text": "\nn, k = map(int, input().split())\n\nif n % 2 == 1:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(1, n // 2):\n        print(i, k - i + 1)\n    for i in range(1, n // 2 + 1):\n        print(k - i + 1, i)\n"
    }
  ],
  "created": 1650442541,
  "object": "edit"
}
2022-04-20 08:15:44.181742 fix syntax errors 4 ['\nn, k = map(int, input().split())\n\nif n % 2 == 1:\n    print("NO")\nelse:\n    print("YES")\n    for i in range(1, n // 2 + 1):\n        print(i, k - i + 1)\n    for i in range(1, n // 2 + 1):\n        print(k - i + 1, i)\n', '\nn, k = map(int, input().split())\n\nif n % 2 == 1:\n    print("NO")\nelse:\n    print("YES")\n    for i in range(1, n // 2 + 1):\n        print(i, k - i + 1)\n    for i in range(1, n // 2 + 1):\n        print(k - i + 1, i)\n', '\nn, k = map(int, input().split())\n\nif n % 2 == 1:\n    print("NO")\nelse:\n    print("YES")\n    for i in range(1, n // 2 + 1):\n        print(i, k - i + 1)\n    for i in range(1, n // 2 + 1):\n        print(k - i + 1, i)\n', '\nn, k = map(int, input().split())\n\nif n % 2 == 1:\n    print("NO")\nelse:\n    print("YES")\n    for i in range(1, n // 2):\n        print(i, k - i + 1)\n    for i in range(1, n // 2 + 1):\n        print(k - i + 1, i)\n']
2022-04-20 08:15:44.181771 size on output set 2
