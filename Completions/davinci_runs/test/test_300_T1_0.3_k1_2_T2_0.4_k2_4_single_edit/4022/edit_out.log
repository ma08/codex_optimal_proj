2022-04-20 07:59:59.696257 num operations 1
2022-04-20 07:59:59.696276 size on input set 1
2022-04-20 07:59:59.696437 using api key sunu
2022-04-20 08:00:04.744785 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution\n\nn = int(input())\n\nleft = []\nright = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left.append(l)\n    right.append(r)\n\nleft.sort()\nright.sort()\n\nif n == 2:\n    print(right[1] - left[0])\nelse:\n    print(max(right[n - 2] - left[0], right[n - 1] - left[1], right[n - 1] - left[0]))\n"
    },
    {
      "index": 1,
      "text": "\n# Solution\n\nn = int(input())\n\nleft = []\nright = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left.append(l)\n    right.append(r)\n\nleft.sort()\nright.sort()\n\nif n == 2:\n    print(right[1] - left[0])\nelse:\n    print(max(right[n - 2] - left[0], right[n - 1] - left[1], right[n - 1] - left[0]))\n"
    },
    {
      "index": 2,
      "text": "\n# Solution\n\nn = int(input())\n\nleft = []\nright = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left.append(l)\n    right.append(r)\n\nleft.sort()\nright.sort()\n\nif n == 2:\n    print(right[1] - left[0])\nelse:\n    print(max(right[n - 2] - left[0], right[n - 1] - left[1], right[n - 1] - left[0]))\n"
    },
    {
      "index": 3,
      "text": "\n# Solution\n\nn = int(input())  # input the number of the lines\n\nleft = []  # list of left points\nright = []  # list of right points\n\nfor i in range(n):\n    l, r = map(int, input().split())  # input the coordinates of the lines\n    left.append(l)\n    right.append(r)\n\nleft.sort()  # sort the list of left points\nright.sort()  # sort the list of right points\n\nif n == 2:  # if there are only 2 lines\n    print(right[1] - left[0])\nelse:  # if there are more than 2 lines\n    print(max(right[n - 2] - left[0], right[n - 1] - left[1], right[n - 1] - left[0]))\n"
    }
  ],
  "created": 1650441599,
  "object": "edit"
}
2022-04-20 08:00:04.745052 fix syntax errors 4 ['\n# Solution\n\nn = int(input())\n\nleft = []\nright = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left.append(l)\n    right.append(r)\n\nleft.sort()\nright.sort()\n\nif n == 2:\n    print(right[1] - left[0])\nelse:\n    print(max(right[n - 2] - left[0], right[n - 1] - left[1], right[n - 1] - left[0]))\n', '\n# Solution\n\nn = int(input())\n\nleft = []\nright = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left.append(l)\n    right.append(r)\n\nleft.sort()\nright.sort()\n\nif n == 2:\n    print(right[1] - left[0])\nelse:\n    print(max(right[n - 2] - left[0], right[n - 1] - left[1], right[n - 1] - left[0]))\n', '\n# Solution\n\nn = int(input())\n\nleft = []\nright = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left.append(l)\n    right.append(r)\n\nleft.sort()\nright.sort()\n\nif n == 2:\n    print(right[1] - left[0])\nelse:\n    print(max(right[n - 2] - left[0], right[n - 1] - left[1], right[n - 1] - left[0]))\n', '\n# Solution\n\nn = int(input())  # input the number of the lines\n\nleft = []  # list of left points\nright = []  # list of right points\n\nfor i in range(n):\n    l, r = map(int, input().split())  # input the coordinates of the lines\n    left.append(l)\n    right.append(r)\n\nleft.sort()  # sort the list of left points\nright.sort()  # sort the list of right points\n\nif n == 2:  # if there are only 2 lines\n    print(right[1] - left[0])\nelse:  # if there are more than 2 lines\n    print(max(right[n - 2] - left[0], right[n - 1] - left[1], right[n - 1] - left[0]))\n']
2022-04-20 08:00:04.745099 size on output set 2
2022-04-20 08:00:04.745111 num operations 1
2022-04-20 08:00:04.745116 size on input set 1
2022-04-20 08:00:04.745277 using api key jaanu
2022-04-20 08:00:10.130353 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        elif i == n-1:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        else:\n            max_len = max(max_len, segments[i-1][1] - segments[i-1][0], segments[i+1][1] - segments[i+1][0])\n    print(max_len)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        elif i == n-1:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        else:\n            max_len = max(max_len, segments[i-1][1] - segments[i-1][0], segments[i+1][1] - segments[i+1][0])\n    print(max_len)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, segments[i+1][1] - segments[i][0])\n        elif i == n-1:\n            max_len = max(max_len, segments[i][1] - segments[i-1][0])\n        else:\n            max_len = max(max_len, segments[i][1] - segments[i-1][0], segments[i+1][1] - segments[i][0])\n    print(max_len)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        elif i == n-1:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        else:\n            max_len = max(max_len, segments[i-1][1] - segments[i-1][0], segments[i+1][1] - segments[i+1][0])\n    print(max_len)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650441604,
  "object": "edit"
}
2022-04-20 08:00:10.130617 fix syntax errors 4 ["\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        elif i == n-1:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        else:\n            max_len = max(max_len, segments[i-1][1] - segments[i-1][0], segments[i+1][1] - segments[i+1][0])\n    print(max_len)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        elif i == n-1:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        else:\n            max_len = max(max_len, segments[i-1][1] - segments[i-1][0], segments[i+1][1] - segments[i+1][0])\n    print(max_len)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, segments[i+1][1] - segments[i][0])\n        elif i == n-1:\n            max_len = max(max_len, segments[i][1] - segments[i-1][0])\n        else:\n            max_len = max(max_len, segments[i][1] - segments[i-1][0], segments[i+1][1] - segments[i][0])\n    print(max_len)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        elif i == n-1:\n            max_len = max(max_len, segments[i][1] - segments[i][0])\n        else:\n            max_len = max(max_len, segments[i-1][1] - segments[i-1][0], segments[i+1][1] - segments[i+1][0])\n    print(max_len)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 08:00:10.130749 size on output set 2
