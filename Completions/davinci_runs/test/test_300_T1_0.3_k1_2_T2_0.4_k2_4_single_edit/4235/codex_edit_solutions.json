["\nimport sys\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.edges[u].append(v)\n        self.edges[v].append(u)\n\n    def dfs(self, u, v):\n        if u == v:\n            return True\n        for w in self.edges[u]:\n            if w != v and self.dfs(w, v):\n                return True\n        return False\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    g = Graph(n)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        g.add_edge(u, v)\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and not g.dfs(u, v):\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for u in range(1, n + 1):\n        for v in g.edges[u]:\n            if v > u:\n                print(\"0\", end=\"\")\n            else:\n                print(\"1\", end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.edges = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.edges[u].append(v)\n        self.edges[v].append(u)\n\n    def dfs(self, u, v):\n        if u == v:\n            return True\n        for w in self.edges[u]:\n            if w != v and self.dfs(w, v):\n                return True\n        return False\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    g = Graph(n, m)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        g.add_edge(u, v)\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and not g.dfs(u, v):\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for u in range(1, n + 1):\n        for v in g.edges[u]:\n            if v > u:\n                print(\"0\", end=\"\")\n            else:\n                print(\"1\", end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    print(\"YES\")\n    for i in range(m):\n        if edges[i][0] < edges[i][1]:\n            print(\"0\", end=\"\")\n        else:\n            print(\"1\", end=\"\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.edges = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.edges[u].append(v)\n        self.edges[v].append(u)\n\n    def dfs(self, u, v):\n        if u == v:\n            return True\n        for w in self.edges[u]:\n            if w != v and self.dfs(w, v):\n                return True\n        return False\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    g = Graph(n, m)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        g.add_edge(u, v)\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and not g.dfs(u, v):\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for u in range(1, n + 1):\n        for v in g.edges[u]:\n            if v > u:\n                print(\"0\", end=\"\")\n            else:\n                print(\"1\", end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef main():\n    n, m = map(int, input().split())  # type: int, int\n    edges = []\n    for i in range(m):\n        u, v = map(int, input().split())  # type: int, int\n        edges.append((u, v))\n    print(\"YES\")\n    for i in range(m):\n        if edges[i][0] < edges[i][1]:\n            print(\"0\", end=\"\")  # type: str\n        else:\n            print(\"1\", end=\"\")  # type: str\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.edges = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.edges[u].append(v)\n        self.edges[v].append(u)\n\n    def dfs(self, u, v):\n        if u == v:\n            return True\n        for w in self.edges[u]:\n            if w != v and self.dfs(w, v):\n                return True\n        return False\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    g = Graph(n, m)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        g.add_edge(u, v)\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and not g.dfs(u, v):\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for u in range(1, n + 1):\n        for v in g.edges[u]:\n            if v > u:\n                print(\"0\", end=\"\")\n            else:\n                print(\"1\", end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n    main()\n"]