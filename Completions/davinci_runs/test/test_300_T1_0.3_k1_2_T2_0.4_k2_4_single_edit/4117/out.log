2022-04-18 20:32:50.438571 """
We have sticks numbered 1, \cdots, N. The length of Stick i (1 \leq i \leq N) is L_i.
In how many ways can we choose three of the sticks with different lengths that can form a triangle?
That is, find the number of triples of integers (i, j, k) (1 \leq i < j < k \leq N) that satisfy both of the following conditions:
 - L_i, L_j, and L_k are all different.
 - There exists a triangle whose sides have lengths L_i, L_j, and L_k.

-----Constraints-----
 - 1 \leq N \leq 100
 - 1 \leq L_i \leq 10^9
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N
L_1 L_2 \cdots L_N

-----Output-----
Print the number of ways to choose three of the sticks with different lengths that can form a triangle.

-----Sample Input-----
5
4 4 9 7 5

-----Sample Output-----
5

The following five triples (i, j, k) satisfy the conditions: (1, 3, 4), (1, 4, 5), (2, 3, 4), (2, 4, 5), and (3, 4, 5).
"""
2022-04-18 20:32:50.438596 --------------------------
2022-04-18 20:33:20.439968 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\nN = int(input())\nL = list(map(int, sys.stdin.readline().split()))\n\ncount = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        for k in range(j+1, N):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[j] + L[k] > L[i] and L[k] + L[i] > L[j]:\n                    count += 1\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# My answer\nN = int(input())\nL = list(map(int, input().split()))\n\ncount = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        for k in range(j+1, N):\n            if L[i] != L[j] and L[i] != L[k] and L[j] != L[k]:\n                if L[i] + L[j] > L[k] and L[i] + L[k] > L[j] and L[j] + L[k] > L[i]:\n                    count += 1\n\nprint(count)\n\n# Shortest answer\nN = int(input())\nL = list(map(int, input().split()))\n\ncount = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        for k in range(j+1, N):\n            if L[i] != L[j] and L[i] != L[k] and L[j] != L[k]:\n                if L[i] + L[j] > L[k] and L[i] + L[k] > L[j] and L[j] + L[k] > L[i]:\n                    count += 1\n\nprint(count)"
    }
  ],
  "created": 1650313970,
  "id": "cmpl-4ySLCErVyi1WdBrKmGjyRdnLEhvBP",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 20:33:20.440224 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\nN = int(input())\nL = list(map(int, sys.stdin.readline().split()))\n\ncount = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        for k in range(j+1, N):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[j] + L[k] > L[i] and L[k] + L[i] > L[j]:\n                    count += 1\n\nprint(count)"
}
2022-04-18 20:33:20.440259 REASON stop
2022-04-18 20:33:20.547448 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# My answer\nN = int(input())\nL = list(map(int, input().split()))\n\ncount = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        for k in range(j+1, N):\n            if L[i] != L[j] and L[i] != L[k] and L[j] != L[k]:\n                if L[i] + L[j] > L[k] and L[i] + L[k] > L[j] and L[j] + L[k] > L[i]:\n                    count += 1\n\nprint(count)\n\n# Shortest answer\nN = int(input())\nL = list(map(int, input().split()))\n\ncount = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        for k in range(j+1, N):\n            if L[i] != L[j] and L[i] != L[k] and L[j] != L[k]:\n                if L[i] + L[j] > L[k] and L[i] + L[k] > L[j] and L[j] + L[k] > L[i]:\n                    count += 1\n\nprint(count)"
}
2022-04-18 20:33:20.547590 REASON stop
