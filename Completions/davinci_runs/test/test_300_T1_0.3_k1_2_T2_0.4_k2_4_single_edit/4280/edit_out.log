2022-04-20 08:45:54.101754 num operations 1
2022-04-20 08:45:54.101775 size on input set 1
2022-04-20 08:45:54.101981 using api key jaanu
2022-04-20 08:46:05.347237 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n"
    },
    {
      "index": 1,
      "text": "\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i] - 1\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef dfs(v, p, k):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v, k)\n            if c[u] > k:\n                c[v] = k + 1\n    if c[v] > k:\n        c[v] = k + 1\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 3,
      "text": "\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i and c[i] > k:\n            ans[i] = c[i] - k\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    }
  ],
  "created": 1650444354,
  "object": "edit"
}
2022-04-20 08:46:05.347504 fix syntax errors 4 ['\n\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n', "\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i] - 1\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n", "\n\ndef dfs(v, p, k):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v, k)\n            if c[u] > k:\n                c[v] = k + 1\n    if c[v] > k:\n        c[v] = k + 1\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n", "\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i and c[i] > k:\n            ans[i] = c[i] - k\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"]
2022-04-20 08:46:05.347579 size on output set 4
2022-04-20 08:46:05.347591 num operations 1
2022-04-20 08:46:05.347598 size on input set 1
2022-04-20 08:46:05.347752 using api key derek
2022-04-20 08:46:05.384578 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 08:46:06.886539 using api key gabby
2022-04-20 08:46:10.620526 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)) + ' ')\n"
    },
    {
      "index": 1,
      "text": "\ndef dfs(start, parent):\n    global n, k, edges, visited, ans\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            ans.append(edge)\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\nans = []\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in ans))\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, sys.stdin.readline().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, sys.stdin.readline().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n)))\n"
    }
  ],
  "created": 1650444366,
  "object": "edit"
}
2022-04-20 08:46:10.620810 fix syntax errors 4 ["\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)) + ' ')\n", "\ndef dfs(start, parent):\n    global n, k, edges, visited, ans\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            ans.append(edge)\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\nans = []\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in ans))\n", "import sys\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, sys.stdin.readline().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, sys.stdin.readline().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n", "\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n)))\n"]
2022-04-20 08:46:10.620858 size on output set 4
