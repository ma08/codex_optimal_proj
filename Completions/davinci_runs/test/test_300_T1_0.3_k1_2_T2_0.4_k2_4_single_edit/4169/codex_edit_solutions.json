["\nimport sys\nimport sys\nn, m = map(int, sys.stdin.readline().split())\n\n# stores = []\n# for i in range(n):\n#     stores.append(list(map(int, sys.stdin.readline().split())))\nstores = [list(map(int, sys.stdin.readline().split())) for i in range(n)]\nstores.sort(key=lambda x: x[0])\ncost = 0\nfor store in stores:\n    if m <= store[1]:\n        cost += store[0] * m\n        break\n    else:\n        cost += store[0] * store[1]\n        m -= store[1]\nprint(cost)\n", "\nN, M = map(int, input().split())\nAB = [list(map(int, input().split())) for _ in range(N)]\n\nAB.sort(key=lambda x: x[0])\n\nans = 0\nfor i in range(N):\n    if M > AB[i][1]:\n        ans += AB[i][0] * AB[i][1]\n        M -= AB[i][1]\n    else:\n        ans += AB[i][0] * M\n        break\n\nprint(ans)\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\n# stores = []\n# for i in range(n):\n#     stores.append(list(map(int, sys.stdin.readline().split())))\n\nstores = [list(map(int, sys.stdin.readline().split())) for i in range(n)]\n\nstores.sort(key=lambda x: x[0])\n\ncost = 0\nfor store in stores:\n    if m <= store[1]:\n        cost += store[0] * m\n        break\n    else:\n        cost += store[0] * store[1]\n        m -= store[1]\n\nprint(cost)\n", "\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\n# stores = []\n# for i in range(n):\n#     stores.append(list(map(int, sys.stdin.readline().split())))\n\nstores = [list(map(int, sys.stdin.readline().split())) for i in range(n)]\n\nstores.sort(key=lambda x: x[0])\n\ncost = 0\nfor store in stores:\n    if m <= store[1]:\n        cost += store[0] * m\n        break\n    else:\n        cost += store[0] * store[1]\n        m -= store[1]\n\nprint(cost)\n", "\n# import sys\n\n# n, m = map(int, sys.stdin.readline().split())\n\n# # stores = []\n# # for i in range(n):\n# #     stores.append(list(map(int, sys.stdin.readline().split())))\n\n# stores = [list(map(int, sys.stdin.readline().split())) for i in range(n)]\n\n# stores.sort(key=lambda x: x[0])\n\nstores.sort(key=lambda x: x[0])\n\ncost = 0\nfor store in stores:\n    if m <= store[1]:\n        cost += store[0] * m\n        break\n    else:\n        cost += store[0] * store[1]\n        m -= store[1]\n\nprint(cost)\n"]