["\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == 'R':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n", "\nN = int(input())\nS = input()\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n", "\n# Get the number of cubes\n\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n", "\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n", "\n\n# N = int(input())\n# S = input()\n\n# # Initialize the number of cubes that can be removed\n# num_cubes_removed = 0\n\n# # Initialize the number of consecutive red cubes\n# num_consec_red = 0\n\n# # Initialize the number of consecutive blue cubes\n# num_consec_blue = 0\n\n# # Iterate through each cube\n# for i in range(N):\n#     # If the cube is red\n#     if S[i] == '0':\n#         # Increment the number of consecutive red cubes\n#         num_consec_red += 1\n#         # If there are two or more consecutive red cubes\n#         if num_consec_red >= 2:\n#             # Increment the number of cubes that can be removed\n#             num_cubes_removed += 1\n#             # Reset the number of consecutive red cubes\n#             num_consec_red = 0\n#         # Reset the number of consecutive blue cubes\n#         num_consec_blue = 0\n#     # If the cube is blue\n#     else:\n#         # Increment the number of consecutive blue cubes\n#         num_consec_blue += 1\n#         # If there are two or more consecutive blue cubes\n#         if num_consec_blue >= 2:\n#             # Increment the number of cubes that can be removed\n#             num_cubes_removed += 1\n#             # Reset the number of consecutive blue cubes\n#             num_consec_blue = 0\n#         # Reset the number of consecutive red cubes\n#         num_consec_red = 0\n\n# # Print the number of cubes that can be removed\n# print(num_cubes_removed)\n\n# N = int(input())\n# S = input()\n\n# # Initialize the number of cubes that can be removed\n# num_cubes_removed = 0\n\n# # Initialize the number of consecutive red cubes\n# num_consec_red = 0\n\n# # Initialize the number of consecutive blue cubes\n# num_consec_blue = 0\n\n# # Iterate through each cube\n# for i in range(N):\n#     # If the cube is red\n#     if S[i] == '0':\n#         # Increment the number of consecutive red cubes\n#         num_consec_red += 1\n#         # If there are two or more consecutive red cubes\n#         if num_consec_red >= 2:\n#             # Increment the number of cubes that can be removed\n#             num_cubes_removed += 1\n#             # Reset the number of consecutive red cubes\n#             num_consec_red = 0\n#         # Reset the number of consecutive blue cubes\n#         num_consec_blue = 0\n#     # If the cube is blue\n#     else:\n#         # Increment the number of consecutive blue cubes\n#         num_consec_blue += 1\n#         # If there are two or more consecutive blue cubes\n#         if num_consec_blue >= 2:\n#             # Increment the number of cubes that can be removed\n#             num_cubes_removed += 1\n#             # Reset the number of consecutive blue cubes\n#             num_consec_blue = 0\n#         # Reset the number of consecutive red cubes\n#         num_consec_red = 0\n\n# # Print the number of cubes that can be removed\n# print(num_cubes_removed)\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# Initialize the number of pairs\nnum_pairs = 0\n\n# Initialize the number of consecutive pairs\nnum_consec_pairs = 0\n\n# Iterate through each element in the list\nfor i in range(N):\n    # If the element is odd\n    if A[i] % 2 == 1:\n        # Increment the number of consecutive pairs\n        num_consec_pairs += 1\n        # If there are two or more consecutive pairs\n        if num_consec_pairs >= 2:\n            # Increment the number of pairs\n            num_pairs += 1\n            # Reset the number of consecutive pairs\n            num_consec_pairs = 0\n    # If the element is even\n    else:\n        # Reset the number of consecutive pairs\n        num_consec_pairs = 0\n\n# Print the number of pairs\nprint(num_pairs)\n", "\nN = int(input())\nS = input()\n\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))\n", "\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)\n", "\nprint(\"Hello world\")\n"]