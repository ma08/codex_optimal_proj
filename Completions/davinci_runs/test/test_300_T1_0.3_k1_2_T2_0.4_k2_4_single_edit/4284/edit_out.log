2022-04-20 08:46:43.686357 num operations 1
2022-04-20 08:46:43.686377 size on input set 1
2022-04-20 08:46:43.686573 using api key gabby
2022-04-20 08:46:47.182846 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print(\"\\n\".join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == \"__main__\":\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 1,
      "text": "\n#include <iostream>\nusing namespace std;\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 2,
      "text": "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 3,
      "text": "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n * b:\n        return -1\n    if k < n * a:\n        return 0\n    k -= n * a\n    return n - k // (a - b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    }
  ],
  "created": 1650444403,
  "object": "edit"
}
2022-04-20 08:46:47.183115 fix syntax errors 4 ['\n#!/usr/bin/env python3\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print("\\n".join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == "__main__":\n    write_responses(solve(read_queries()))\n', "\n#include <iostream>\nusing namespace std;\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n * b:\n        return -1\n    if k < n * a:\n        return 0\n    k -= n * a\n    return n - k // (a - b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"]
2022-04-20 08:46:47.183170 size on output set 4
2022-04-20 08:46:47.183181 num operations 1
2022-04-20 08:46:47.183187 size on input set 1
2022-04-20 08:46:47.183344 using api key derek
2022-04-20 08:46:47.219541 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 08:46:48.721416 using api key jaanu
2022-04-20 08:46:55.340248 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\n\n\ndef max_play_turns(n, k, a, b):\n    if k < b:\n        return 0\n    if k % b == 0:\n        return math.ceil(n / k) - 1\n    if k % b > a:\n        return math.ceil(n / k) - 1\n    if k % b < a:\n        return math.ceil(n / k)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n, k, a, b = map(int, input().split())\n        print(max_play_turns(n, k, a, b))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 3,
      "text": "\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b: \n        return n - (k % a) \n    return n - (k % b) \n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    }
  ],
  "created": 1650444408,
  "object": "edit"
}
2022-04-20 08:46:55.340607 fix syntax errors 4 ['import math\n\n\n\ndef max_play_turns(n, k, a, b):\n    if k < b:\n        return 0\n    if k % b == 0:\n        return math.ceil(n / k) - 1\n    if k % b > a:\n        return math.ceil(n / k) - 1\n    if k % b < a:\n        return math.ceil(n / k)\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        n, k, a, b = map(int, input().split())\n        print(max_play_turns(n, k, a, b))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b: \n        return n - (k % a) \n    return n - (k % b) \n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n']
2022-04-20 08:46:55.340650 size on output set 3
