["\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n * b:\n        return -1\n    if k < n * a:\n        return 0\n    k -= n * a\n    return n - k // (a - b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n#!/usr/bin/env python3\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print(\"\\n\".join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == \"__main__\":\n    write_responses(solve(read_queries()))\n", "\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b: \n        return n - (k % a) \n    return n - (k % b) \n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n", "import math\n\n\n\ndef max_play_turns(n, k, a, b):\n    if k < b:\n        return 0\n    if k % b == 0:\n        return math.ceil(n / k) - 1\n    if k % b > a:\n        return math.ceil(n / k) - 1\n    if k % b < a:\n        return math.ceil(n / k)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n, k, a, b = map(int, input().split())\n        print(max_play_turns(n, k, a, b))\n", "\n#include <iostream>\nusing namespace std;\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"]