2022-04-20 17:10:01.276613 num operations 1
2022-04-20 17:10:01.276634 size on input set 1
2022-04-20 17:10:01.276820 using api key kouti
2022-04-20 17:10:11.939027 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"
    },
    {
      "index": 1,
      "text": "\na = [1, 2, 3, 4, 5]\nprint(a[::-1])\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n# n = 5\n# a = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 3,
      "text": "\nfrom math import gcd\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2, sep=' ')\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 4,
      "text": "\nfrom math import gcd\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\n\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 5,
      "text": "\nfrom math import gcd\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2, sep=' ')\n\n\"\"\"\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    },
    {
      "index": 7,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // __gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n\"\"\"\ndef __lcm(a, b):\n    return a * b // __gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n\"\"\"\n"
    }
  ],
  "created": 1650474601,
  "object": "edit"
}
2022-04-20 17:10:11.939354 fix syntax errors 8 ['\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n', '\na = [1, 2, 3, 4, 5]\nprint(a[::-1])\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n# n = 5\n# a = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\nfrom math import gcd\n\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2, sep=\' \')\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\nfrom math import gcd\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\n\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\nfrom math import gcd\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2, sep=\' \')\n\n"""\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n', '\n\n# n = int(input())\n# a = list(map(int, input().split()))\nn = 5\na = [5, 2, 11, 3, 7]\n\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        res.append(a[i] * a[j] // __gcd(a[i], a[j]))\n\nprint(res.index(min(res)) + 1, res.index(min(res)) + 2)\n\n"""\ndef __lcm(a, b):\n    return a * b // __gcd(a, b)\n\n\ndef find(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append(lcm(arr[i], arr[j]))\n    return res.index(min(res)) + 1, res.index(min(res)) + 2\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(*find(a))\n"""\n']
2022-04-20 17:10:11.939531 size on output set 8
2022-04-20 17:10:11.939547 num operations 1
2022-04-20 17:10:11.939553 size on input set 1
2022-04-20 17:10:11.939713 using api key sourya
2022-04-20 17:10:20.459493 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y//gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(0,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y//gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport gcd\n\ndef lcm(x,y):\n    return x*y/gcd.gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y//gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(0,len(A)-1):\n        for j in range(i+1,len(A)-1):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a,b = A[0],A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a,b = A[i],A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__==\"__main__\":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n"
    }
  ],
  "created": 1650474611,
  "object": "edit"
}
2022-04-20 17:10:20.459787 fix syntax errors 8 ['\n', '\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y//gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(0,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y//gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nimport gcd\n\ndef lcm(x,y):\n    return x*y/gcd.gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y//gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(0,len(A)-1):\n        for j in range(i+1,len(A)-1):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nfrom gcd import *\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a,b = A[0],A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a,b = A[i],A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n', '\n\nfrom gcd import gcd\n\ndef lcm(x,y):\n    return x*y/gcd(x,y)\n\n\ndef minimum_lcm(A):\n    minimum = lcm(A[0],A[1])\n    a = A[0]\n    b = A[1]\n    for i in range(1,len(A)-1):\n        for j in range(i+1,len(A)):\n            if lcm(A[i],A[j])<minimum:\n                minimum = lcm(A[i],A[j])\n                a = A[i]\n                b = A[j]\n    return a,b\n\nif __name__=="__main__":\n    n = int(raw_input())\n    A = map(int,raw_input().split())\n    print minimum_lcm(A)\n']
2022-04-20 17:10:20.459842 size on output set 7
2022-04-20 17:10:20.459856 num operations 1
2022-04-20 17:10:20.459863 size on input set 1
2022-04-20 17:10:20.460025 using api key jaanu
2022-04-20 17:10:37.771872 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef lcm(a, b):\n    return a * b // gcd(a, b) \n\ndef gcd(a, b):\n    if b == 0: return a \n    return gcd(b, a % b) \n\ndef solve(a):\n    # Write your code here \n    n = len(a) \n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)] \n\n    for i in range(n):\n        gcd_dp[i][i] = a[i] \n        for j in range(i + 1, n): \n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j]) \n\n    mini = 10 ** 9 + 1 \n    ans = [0, 0] \n    for i in range(n - 1): \n        for j in range(i + 1, n): \n            temp = lcm(gcd_dp[i][j], a[i]) \n            if temp < mini: \n                mini = temp \n                ans = [i + 1, j + 1] \n    return ans \n\ndef main():\n    n = int(input()) \n    a = [int(x) for x in input().split()] \n    ans = solve(a) \n    print(ans[0], ans[1]) \n\nif __name__ == '__main__':\n    main() \n"
    },
    {
      "index": 1,
      "text": "\n\nclass Solution:\n    def lcm(self, a, b):\n        return a * b // self.gcd(a, b)\n\n    def gcd(self, a, b):\n        if b == 0: return a\n        return self.gcd(b, a % b)\n\n    def solve(self, a):\n        # Write your code here\n        n = len(a)\n        gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            gcd_dp[i][i] = a[i]\n            for j in range(i + 1, n):\n                gcd_dp[i][j] = self.gcd(gcd_dp[i][j - 1], a[j])\n\n        mini = 10 ** 9 + 1\n        ans = [0, 0]\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                temp = self.lcm(gcd_dp[i][j], a[i])\n                if temp < mini:\n                    mini = temp\n                    ans = [i + 1, j + 1]\n        return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = Solution().solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 7\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here.\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef lcm(a, b):\n    return a * b // gcd(a, b) \n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)] \n\n    for i in range(n):\n        gcd_dp[i][i] = a[i] \n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j]) \n\n    mini = 10 ** 9 + 1 \n    ans = [0, 0] \n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i]) \n            if temp < mini: \n                mini = temp \n                ans = [i + 1, j + 1] \n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650474620,
  "object": "edit"
}
2022-04-20 17:10:37.772276 fix syntax errors 8 ["\ndef lcm(a, b):\n    return a * b // gcd(a, b) \n\ndef gcd(a, b):\n    if b == 0: return a \n    return gcd(b, a % b) \n\ndef solve(a):\n    # Write your code here \n    n = len(a) \n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)] \n\n    for i in range(n):\n        gcd_dp[i][i] = a[i] \n        for j in range(i + 1, n): \n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j]) \n\n    mini = 10 ** 9 + 1 \n    ans = [0, 0] \n    for i in range(n - 1): \n        for j in range(i + 1, n): \n            temp = lcm(gcd_dp[i][j], a[i]) \n            if temp < mini: \n                mini = temp \n                ans = [i + 1, j + 1] \n    return ans \n\ndef main():\n    n = int(input()) \n    a = [int(x) for x in input().split()] \n    ans = solve(a) \n    print(ans[0], ans[1]) \n\nif __name__ == '__main__':\n    main() \n", "\n\nclass Solution:\n    def lcm(self, a, b):\n        return a * b // self.gcd(a, b)\n\n    def gcd(self, a, b):\n        if b == 0: return a\n        return self.gcd(b, a % b)\n\n    def solve(self, a):\n        # Write your code here\n        n = len(a)\n        gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            gcd_dp[i][i] = a[i]\n            for j in range(i + 1, n):\n                gcd_dp[i][j] = self.gcd(gcd_dp[i][j - 1], a[j])\n\n        mini = 10 ** 9 + 1\n        ans = [0, 0]\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                temp = self.lcm(gcd_dp[i][j], a[i])\n                if temp < mini:\n                    mini = temp\n                    ans = [i + 1, j + 1]\n        return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = Solution().solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 7\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n", "\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n", "\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\nif __name__ == '__main__':\n    main()\n", "\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    # Write your code here.\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n", "\ndef lcm(a, b):\n    return a * b // gcd(a, b) \n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve(a):\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)] \n\n    for i in range(n):\n        gcd_dp[i][i] = a[i] \n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j]) \n\n    mini = 10 ** 9 + 1 \n    ans = [0, 0] \n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i]) \n            if temp < mini: \n                mini = temp \n                ans = [i + 1, j + 1] \n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(a):\n    # Write your code here\n    n = len(a)\n    gcd_dp = [[0 for _ in range(n)] for _ in range(n)]\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n    for i in range(n):\n        gcd_dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            gcd_dp[i][j] = gcd(gcd_dp[i][j - 1], a[j])\n\n    mini = 10 ** 9 + 1\n    ans = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = lcm(gcd_dp[i][j], a[i])\n            if temp < mini:\n                mini = temp\n                ans = [i + 1, j + 1]\n    return ans\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = solve(a)\n    print(ans[0], ans[1])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 17:10:37.772410 size on output set 8
