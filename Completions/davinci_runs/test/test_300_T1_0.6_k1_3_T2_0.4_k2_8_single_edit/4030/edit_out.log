2022-04-20 16:49:17.918527 num operations 1
2022-04-20 16:49:17.918547 size on input set 1
2022-04-20 16:49:17.918737 using api key sunu
2022-04-20 16:49:25.797856 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n"
    },
    {
      "index": 5,
      "text": "\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nn = int(input())\ns = input()\nprint(solve(n, s))\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())  # number of elements\ns = input()  # input string\n\n\ndef solve(n, s):  # function to solve\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0  # start index\n    cur = 0  # current index\n    res = 0  # result\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)  # max of current and result\n        else:\n            cur = 0\n\n    return res + 1\n\n\nprint(solve(n, s))\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    return 1\n\nprint(solve(n, s))\n"
    }
  ],
  "created": 1650473358,
  "object": "edit"
}
2022-04-20 16:49:25.798173 fix syntax errors 8 ['\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n', '\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n', '\n\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n', '\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n', '\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nprint(solve(n, s))\n', '\ndef solve(n, s):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)\n        else:\n            cur = 0\n\n    return res + 1\n\nn = int(input())\ns = input()\nprint(solve(n, s))\n', '\n\nn = int(input())  # number of elements\ns = input()  # input string\n\n\ndef solve(n, s):  # function to solve\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if s[0] <= s[1] else 2\n\n    start = 0  # start index\n    cur = 0  # current index\n    res = 0  # result\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            cur += 1\n            res = max(res, cur)  # max of current and result\n        else:\n            cur = 0\n\n    return res + 1\n\n\nprint(solve(n, s))\n', '\nn = int(input())\ns = input()\n\ndef solve(n, s):\n    return 1\n\nprint(solve(n, s))\n']
2022-04-20 16:49:25.798232 size on output set 5
2022-04-20 16:49:25.798244 num operations 1
2022-04-20 16:49:25.798249 size on input set 1
2022-04-20 16:49:25.798424 using api key derek
2022-04-20 16:49:25.834721 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 16:49:27.336627 using api key derek
2022-04-20 16:49:27.373150 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 16:49:30.376541 using api key gabby
2022-04-20 16:49:39.180278 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef coloring(string):\n    list = []\n    count = 1\n    for i in range(len(string)-1):\n        if string[i] != string[i+1]:\n            list.append(count)\n            count+=1\n        else:\n            list.append(count)\n    list.append(count)\n    return list\n\nn = int(input())\nstring = input()\n\nprint(max(coloring(string)))\nprint(*coloring(string))\n"
    },
    {
      "index": 1,
      "text": "\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n"
    },
    {
      "index": 2,
      "text": "\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n"
    },
    {
      "index": 3,
      "text": "\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n"
    },
    {
      "index": 4,
      "text": "\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c+=1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c), c += 1\n        else:\n            l.append(c), c += 1\n    l.append(c)\n\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n"
    },
    {
      "index": 7,
      "text": "\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n"
    }
  ],
  "created": 1650473370,
  "object": "edit"
}
2022-04-20 16:49:39.180752 fix syntax errors 8 ['\ndef coloring(string):\n    list = []\n    count = 1\n    for i in range(len(string)-1):\n        if string[i] != string[i+1]:\n            list.append(count)\n            count+=1\n        else:\n            list.append(count)\n    list.append(count)\n    return list\n\nn = int(input())\nstring = input()\n\nprint(max(coloring(string)))\nprint(*coloring(string))\n', '\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n', '\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n', '\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n', '\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c+=1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n', '\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n', '\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c), c += 1\n        else:\n            l.append(c), c += 1\n    l.append(c)\n\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n', '\n\ndef coloring(s):\n    l = []\n    c = 1\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            l.append(c)\n            c += 1\n        else:\n            l.append(c)\n    l.append(c)\n    return l\n\nn = int(input())\ns = input()\n\nprint(max(coloring(s)))\nprint(*coloring(s))\n']
2022-04-20 16:49:39.180807 size on output set 8
2022-04-20 16:49:39.180822 num operations 1
2022-04-20 16:49:39.180829 size on input set 1
2022-04-20 16:49:39.181000 using api key sunu
2022-04-20 16:49:47.876153 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n"
    },
    {
      "index": 2,
      "text": "import sys\n\nclass Solver:\n    def __init__(self, n, s, k):\n        self.n = n\n        self.k = k\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    k = int(input())\n    solver = Solver(n, s, k)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n\n        self.s = s\n        \"\"\"\n        :return: [max_color, colors]\n        \"\"\"\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n"
    },
    {
      "index": 5,
      "text": "\n\n\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n"
    },
    {
      "index": 6,
      "text": "\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), \" \".join(map(str, colors))]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n"
    }
  ],
  "created": 1650473379,
  "object": "edit"
}
2022-04-20 16:49:47.876569 fix syntax errors 8 ['import sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), " ".join(map(str, colors))]\n\n\nif __name__ == "__main__":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n', '\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), " ".join(map(str, colors))]\n\n\nif __name__ == "__main__":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n', 'import sys\n\nclass Solver:\n    def __init__(self, n, s, k):\n        self.n = n\n        self.k = k\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), " ".join(map(str, colors))]\n\n\nif __name__ == "__main__":\n    n = int(input())\n    s = input()\n\n    k = int(input())\n    solver = Solver(n, s, k)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n', '\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), " ".join(map(str, colors))]\n\n\nif __name__ == "__main__":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n', '\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n\n        self.s = s\n        """\n        :return: [max_color, colors]\n        """\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), " ".join(map(str, colors))]\n\n\nif __name__ == "__main__":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n', '\n\n\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), " ".join(map(str, colors))]\n\n\nif __name__ == "__main__":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n', '\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), " ".join(map(str, colors))]\n\n\nif __name__ == "__main__":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n', '\nimport sys\n\nclass Solver:\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n\n    def solve(self):\n        def get_colors(s):\n            colors = [1]\n            for i in range(1, len(s)):\n                if s[i] != s[i - 1]:\n                    colors.append(colors[i - 1] + 1)\n                else:\n                    colors.append(colors[i - 1])\n            return colors\n\n        colors = get_colors(self.s)\n        sorted_colors = get_colors(sorted(self.s))\n        return [max(colors), " ".join(map(str, colors))]\n\n\nif __name__ == "__main__":\n    n = int(input())\n    s = input()\n\n    solver = Solver(n, s)\n    res = solver.solve()\n    print(res[0])\n    print(res[1])\n']
2022-04-20 16:49:47.876643 size on output set 6
