["\nimport sys\n\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = input_lines[i + 1].strip()\n        cases.append(case)\n    return cases\n\n\ndef solve(case):\n    return case\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip())\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    return n\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\n\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip())\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    if n < 4:  # no possible answer\n        return 0\n    if n % 2 == 1:  # n is odd, then we can always find an answer\n        return int(n / 2)\n    return int(n / 2 - 1)  # n is even, then we can always find an answer\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for case in range(1, num_cases + 1):\n        num_piles = int(input_lines[case].strip())\n        piles = []\n        for pile in range(num_piles):\n            piles.append(int(input_lines[case + pile + 1].strip()))\n        cases.append(piles)\n    return cases\n\n\ndef solve(piles):\n    return\n\n\ndef print_result(results):\n    for i, result in enumerate(results):\n        print(\"Case #{}: {}\".format(i + 1, result))\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tprint(max(0, (n + 1) // 2))\n", "\n\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tprint(max(0, (n - 1) // 2))\n", "\nimport sys\n\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip())\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    if n < 4:\n        return 0\n    if n % 2 == 1:\n        return n // 2\n    return n // 2 - 1\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\nimport sys\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip())\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    return 0\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(max(0, (n + 1) // 2))\n", "import sys\nfrom collections import defaultdict\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0])\n    case_lines = input_lines[1:]\n    case_lines = [line.strip() for line in case_lines]\n    return num_cases, case_lines\n\n\ndef solve(case):\n    num_students, num_pairs, students = case\n    students = students.split(\" \")\n    students = [int(student) for student in students]\n    students.sort()\n    pairs = defaultdict(list)\n    for i in range(num_students):\n        pairs[students[i]].append(i)\n    pairs = pairs.values()\n    pairs = [pair for pair in pairs if len(pair) > 1]\n    pairs = sorted(pairs, key=lambda pair: pair[1] - pair[0])\n    pairs = pairs[::-1]\n    print(pairs)\n    for pair in pairs:\n        for i in range(len(pair)):\n            student = pair[i]\n            if student + 1 in students:\n                students.remove(student + 1)\n            elif student - 1 in students:\n                students.remove(student - 1)\n            else:\n                return \"NO\"\n    return \"YES\"\n\n\ndef print_result(result):\n    print(result)\n\n\ndef main():\n    num_cases, cases = get_input()\n    for i in range(num_cases):\n        num_students, num_pairs, students = cases[i].split(\" \")\n        num_students = int(num_students)\n        num_pairs = int(num_pairs)\n        result = solve((num_students, num_pairs, students))\n        print_result(result)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/bin/python3\n\n\nimport sys\n\n\ndef find_max_sum(arr):\n    n = len(arr)\n    max_sum = -sys.maxsize\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = 0\n            for k in range(i, j+1):\n                curr_sum += arr[k]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n\n\n    sys.setrecursionlimit(10**6)\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split()))\n        print(find_max_sum(arr))\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = Counter(s)\n    print(min(c['a'], c['b']))\n", "\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    t = int(input().strip())\n\n    for _ in range(t):\n        n = int(input().strip())\n\n        ans = (n-1)//2\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef get_input():\n    input_lines = sys.stdin.readlines()\n    num_cases = int(input_lines[0].strip())\n    cases = []\n    for i in range(num_cases):\n        case = int(input_lines[i + 1].strip())\n        cases.append(case)\n    return cases\n\n\ndef solve(n):\n    if n < 4:\n        return 0\n    if n % 2 == 1:\n        return int(n / 2)\n    return int(n / 2 - 1)\n\n\ndef print_result(results):\n    for result in results:\n        print(result)\n\n\ndef main():\n    cases = get_input()\n    results = []\n    for case in cases:\n        result = solve(case)\n        results.append(result)\n    print_result(results)\n\n\nif __name__ == \"__main__\":\n    main()\n"]