2022-04-20 17:08:19.892195 num operations 1
2022-04-20 17:08:19.892215 size on input set 1
2022-04-20 17:08:19.892389 using api key soukgp
2022-04-20 17:08:48.883410 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve_dp(n, a, b):\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n    for i in range(n):\n        for j in range(n):\n            if i + j == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = max(dp[i - 1][j] + a[i - 1], dp[i][j - 1] + b[j - 1])\n    return dp[n - 1][n - 1]\n\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nprint(solve_dp(n, a, b))\n"
    },
    {
      "index": 2,
      "text": "\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(\n                    dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(\n                    dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"
    },
    {
      "index": 3,
      "text": "\n\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef solve_dp(n, k, h, l, r, a):\n    dp = [[[0] * h for i in range(k + 1)] for j in range(n)]\n    dp[0][0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(k + 1):\n            for t in range(h):\n                if dp[i][j][t] == 0:\n                    continue\n                if (t + a[i + 1]) % h >= l and (t + a[i + 1]) % h <= r:\n                    dp[i + 1][j][(t + a[i + 1]) % h] = max(dp[i + 1][j][(t + a[i + 1]) % h], dp[i][j][t] + 1)\n                if j < k and (t + a[i + 1] - 1) % h >= l and (t + a[i + 1] - 1) % h <= r:\n                    dp[i + 1][j + 1][(t + a[i + 1] - 1) % h] = max(dp[i + 1][j + 1][(t + a[i + 1] - 1) % h], dp[i][j][t] + 1)\n    return max([max(dp[n - 1][k]) for k in range(k + 1)])\n\n\nn, k, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"
    },
    {
      "index": 5,
      "text": "\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for _ in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"
    },
    {
      "index": 6,
      "text": "\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"
    },
    {
      "index": 7,
      "text": "\n\n# https://atcoder.jp/contests/dp/tasks/dp_d\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"
    }
  ],
  "created": 1650474500,
  "object": "edit"
}
2022-04-20 17:08:48.883733 fix syntax errors 8 ['\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n', '\n\ndef solve_dp(n, a, b):\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n    for i in range(n):\n        for j in range(n):\n            if i + j == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = max(dp[i - 1][j] + a[i - 1], dp[i][j - 1] + b[j - 1])\n    return dp[n - 1][n - 1]\n\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nprint(solve_dp(n, a, b))\n', '\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(\n                    dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(\n                    dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n', '\n\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n', '\n\ndef solve_dp(n, k, h, l, r, a):\n    dp = [[[0] * h for i in range(k + 1)] for j in range(n)]\n    dp[0][0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(k + 1):\n            for t in range(h):\n                if dp[i][j][t] == 0:\n                    continue\n                if (t + a[i + 1]) % h >= l and (t + a[i + 1]) % h <= r:\n                    dp[i + 1][j][(t + a[i + 1]) % h] = max(dp[i + 1][j][(t + a[i + 1]) % h], dp[i][j][t] + 1)\n                if j < k and (t + a[i + 1] - 1) % h >= l and (t + a[i + 1] - 1) % h <= r:\n                    dp[i + 1][j + 1][(t + a[i + 1] - 1) % h] = max(dp[i + 1][j + 1][(t + a[i + 1] - 1) % h], dp[i][j][t] + 1)\n    return max([max(dp[n - 1][k]) for k in range(k + 1)])\n\n\nn, k, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n', '\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for _ in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n', '\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n', '\n\n# https://atcoder.jp/contests/dp/tasks/dp_d\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n']
2022-04-20 17:08:48.883899 size on output set 7
2022-04-20 17:08:48.883914 num operations 1
2022-04-20 17:08:48.883920 size on input set 1
2022-04-20 17:08:48.884085 using api key sunu
2022-04-20 17:09:09.102718 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    },
    {
      "index": 1,
      "text": "# coding: utf-8\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    },
    {
      "index": 2,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    },
    {
      "index": 3,
      "text": "# coding: utf-8\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    },
    {
      "index": 4,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * 2 for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    },
    {
      "index": 5,
      "text": "import sys\ninput = sys.stdin.readline\n\n\nn = int(input())\na = list(map(int, input().split())) + [0]\nb = list(map(int, input().split())) + [0]\n\ndp = [[0, 0] for i in range(n + 1)]\n\nfor i in range(n + 1):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + a[i])\n    dp[i][1] = max(dp[i - 1][0] + b[i], dp[i - 1][1])\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    },
    {
      "index": 6,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    },
    {
      "index": 7,
      "text": "import sys\nsys.setrecursionlimit(10**7)\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for i in range(h)] for j in range(n)]\n\ndp[0][a[0]] = 1\n\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] > l and j - a[i] < r:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]] + 1)\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]])\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    }
  ],
  "created": 1650474528,
  "object": "edit"
}
2022-04-20 17:09:09.103043 fix syntax errors 8 ['\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n', '# coding: utf-8\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n', '# coding: utf-8\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * 2 for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n', 'import sys\ninput = sys.stdin.readline\n\n\nn = int(input())\na = list(map(int, input().split())) + [0]\nb = list(map(int, input().split())) + [0]\n\ndp = [[0, 0] for i in range(n + 1)]\n\nfor i in range(n + 1):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + a[i])\n    dp[i][1] = max(dp[i - 1][0] + b[i], dp[i - 1][1])\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n', 'import sys\nsys.setrecursionlimit(10**7)\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for i in range(h)] for j in range(n)]\n\ndp[0][a[0]] = 1\n\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] > l and j - a[i] < r:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]] + 1)\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]])\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n']
2022-04-20 17:09:09.103179 size on output set 5
2022-04-20 17:09:09.103194 num operations 1
2022-04-20 17:09:09.103201 size on input set 1
2022-04-20 17:09:09.103363 using api key gabby
2022-04-20 17:09:17.986008 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][a[0]] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0 and j - a[i] + 1 < h:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1]) + (j >= l and j <= r)\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1] + (j >= l and j <= r)\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i - 1] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i - 1]], dp[i - 1][j - a[i - 1] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i - 1] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n        if j - a[i] + 1 >= 0:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i] + 1])\n        \nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\ndp[0][a[0]] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1]) + (l <= j <= r)\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1] + (l <= j <= r)\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n"
    }
  ],
  "created": 1650474549,
  "object": "edit"
}
2022-04-20 17:09:17.986325 fix syntax errors 8 ['\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][a[0]] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0 and j - a[i] + 1 < h:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1]) + (j >= l and j <= r)\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1] + (j >= l and j <= r)\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i - 1] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i - 1]], dp[i - 1][j - a[i - 1] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i - 1] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n', '\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n        if j - a[i] + 1 >= 0:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i] + 1])\n        \nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n', '\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\ndp[0][a[0]] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1]) + (l <= j <= r)\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1] + (l <= j <= r)\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h):\n        if j - a[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n']
2022-04-20 17:09:17.986452 size on output set 5
