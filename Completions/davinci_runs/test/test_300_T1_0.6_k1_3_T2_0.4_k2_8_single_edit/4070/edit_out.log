2022-04-20 17:12:10.002963 num operations 1
2022-04-20 17:12:10.002989 size on input set 1
2022-04-20 17:12:10.003209 using api key sourya
2022-04-20 17:12:17.646410 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers_of_2(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers_of_2(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n%10\n        n = n//10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p<=n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input(\"\"))\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n, p):\n    return sum(get_sum_of_digits(i) for i in range(1, n + 1) if i % p == 0)\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n, 2))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n //10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *=2\n    return s\n\ndef main():\n    n=int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p < n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650474730,
  "object": "edit"
}
2022-04-20 17:12:17.646726 fix syntax errors 8 ["\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers_of_2(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers_of_2(n))\n\nif __name__ == '__main__':\n    main()\n", '\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n%10\n        n = n//10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p<=n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input(""))\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == \'__main__\':\n    main()\n', "\n\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n, p):\n    return sum(get_sum_of_digits(i) for i in range(1, n + 1) if i % p == 0)\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n, 2))\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n //10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *=2\n    return s\n\ndef main():\n    n=int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p < n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 17:12:17.646777 size on output set 8
2022-04-20 17:12:17.646789 num operations 1
2022-04-20 17:12:17.646794 size on input set 1
2022-04-20 17:12:17.646960 using api key sunu
2022-04-20 17:12:29.145532 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 1,
      "text": "\n# Version 1\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n# Version 2\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 2,
      "text": "\ndef solution(n): \n    # Your code here \n    nums = list(str(n)) \n    while len(nums) > 1: \n        next_sum = 0 \n        for i in nums: \n            next_sum += int(i) ** 2 \n        nums = list(str(next_sum)) \n    return nums[0] \n \n# Version 2 \n \ndef solution(n): \n    # Your code here \n    nums = list(str(n)) \n    while len(nums) > 1: \n        next_sum = 0 \n        for i in nums: \n            next_sum += int(i) ** 2 \n        nums = list(str(next_sum)) \n    return nums[0] \n"
    },
    {
      "index": 3,
      "text": "\n\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 4,
      "text": "\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 5,
      "text": "\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 6,
      "text": "\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 7,
      "text": "\n\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    }
  ],
  "created": 1650474737,
  "object": "edit"
}
2022-04-20 17:12:29.145914 fix syntax errors 8 ['\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n# Version 1\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n# Version 2\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\ndef solution(n): \n    # Your code here \n    nums = list(str(n)) \n    while len(nums) > 1: \n        next_sum = 0 \n        for i in nums: \n            next_sum += int(i) ** 2 \n        nums = list(str(next_sum)) \n    return nums[0] \n \n# Version 2 \n \ndef solution(n): \n    # Your code here \n    nums = list(str(n)) \n    while len(nums) > 1: \n        next_sum = 0 \n        for i in nums: \n            next_sum += int(i) ** 2 \n        nums = list(str(next_sum)) \n    return nums[0] \n', '\n\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n']
2022-04-20 17:12:29.145988 size on output set 6
2022-04-20 17:12:29.146002 num operations 1
2022-04-20 17:12:29.146007 size on input set 1
2022-04-20 17:12:29.146168 using api key jaanu
2022-04-20 17:12:37.890250 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef chess_knight(n):\n    return chess_knight(n // 2) + 1 if n % 2 == 0 else chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(1)\n    elif n == 3:\n        print(3)\n    else:\n        print(chess_knight(n))\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n//2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 2,
      "text": "\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n//2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 3,
      "text": "\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n//2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef chess_knight(n):\n    if n <= 1:\n        return 0\n    elif n % 2 == 0:\n        return chess_knight(n//2)\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2))\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 5,
      "text": "\n\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 7,
      "text": "\n\ndef chess_knight(n):\n    if n == 1: return 0\n    elif n == 2: return 1\n    elif n == 3: return 3\n    elif n % 2 == 0: return chess_knight(n//2) + 1\n    elif n % 2 != 0: return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input()))) \n"
    }
  ],
  "created": 1650474749,
  "object": "edit"
}
2022-04-20 17:12:37.890574 fix syntax errors 8 ["\n\ndef chess_knight(n):\n    return chess_knight(n // 2) + 1 if n % 2 == 0 else chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(1)\n    elif n == 3:\n        print(3)\n    else:\n        print(chess_knight(n))\n", "\n\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n//2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n//2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n//2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\n\ndef chess_knight(n):\n    if n <= 1:\n        return 0\n    elif n % 2 == 0:\n        return chess_knight(n//2)\n    elif n % 2 != 0:\n        return chess_knight(((n+1)//2))\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\n\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\n\ndef chess_knight(n):\n    if n == 1: return 0\n    elif n == 2: return 1\n    elif n == 3: return 3\n    elif n % 2 == 0: return chess_knight(n//2) + 1\n    elif n % 2 != 0: return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input()))) \n"]
2022-04-20 17:12:37.890695 size on output set 7
