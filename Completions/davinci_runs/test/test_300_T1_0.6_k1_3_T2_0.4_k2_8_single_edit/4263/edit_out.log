2022-04-20 19:02:52.629878 num operations 1
2022-04-20 19:02:52.629896 size on input set 1
2022-04-20 19:02:52.630058 using api key derek
2022-04-20 19:02:52.746994 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:02:54.248969 using api key gabby
2022-04-20 19:02:54.286216 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 19:02:57.289137 using api key sunu
2022-04-20 19:03:07.749483 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 047\n# Problem A\n\nif __name__ == '__main__':\n    a, b, c = list(map(int, input().split()))\n\n    if a + b == c or a + c == b or b + c == a:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
      "index": 1,
      "text": "\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n"
    },
    {
      "index": 2,
      "text": "\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n"
    },
    {
      "index": 3,
      "text": "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*- \n# @Author:\twjsaya(http://www.wjsaya.top) \n# @Date:\t2018-08-03 15:12:42 \n# @Last Modified by:\twjsaya(http://www.wjsaya.top) \n# @Last Modified time:\t2018-08-03 15:12:42 \n\n# AtCoder Beginner Contest 070\n# Problem A\n\nif __name__ == '__main__':\n    n = int(input())\n    if n % 10 == n // 100:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
      "index": 4,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 094\n# Problem A\n\nif __name__ == '__main__':\n    A, B, X = list(map(int, input().split()))\n\n    if A <= X <= A + B:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 5,
      "text": "\n\n# -*- coding: utf-8 -*- \n# AtCoder Beginner Contest \n# Problem A \n\nif __name__ == '__main__':\n    a, b = list(map(int, input().split()))\n    print(a * b)\n"
    },
    {
      "index": 6,
      "text": "\n\n# AtCoder Beginner Contest 089\n# Problem A\n\nif __name__ == '__main__':\n    print(int(input()) // 3)\n"
    },
    {
      "index": 7,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 082\n# Problem A\n\nif __name__ == '__main__':\n    a, b = list(map(int, input().split()))\n    print((a + b + 1) // 2)\n"
    }
  ],
  "created": 1650481377,
  "object": "edit"
}
2022-04-20 19:03:07.749794 fix syntax errors 8 ["\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 047\n# Problem A\n\nif __name__ == '__main__':\n    a, b, c = list(map(int, input().split()))\n\n    if a + b == c or a + c == b or b + c == a:\n        print('Yes')\n    else:\n        print('No')\n", "\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n", "\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = str(input())\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n", "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*- \n# @Author:\twjsaya(http://www.wjsaya.top) \n# @Date:\t2018-08-03 15:12:42 \n# @Last Modified by:\twjsaya(http://www.wjsaya.top) \n# @Last Modified time:\t2018-08-03 15:12:42 \n\n# AtCoder Beginner Contest 070\n# Problem A\n\nif __name__ == '__main__':\n    n = int(input())\n    if n % 10 == n // 100:\n        print('Yes')\n    else:\n        print('No')\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 094\n# Problem A\n\nif __name__ == '__main__':\n    A, B, X = list(map(int, input().split()))\n\n    if A <= X <= A + B:\n        print('YES')\n    else:\n        print('NO')\n", "\n\n# -*- coding: utf-8 -*- \n# AtCoder Beginner Contest \n# Problem A \n\nif __name__ == '__main__':\n    a, b = list(map(int, input().split()))\n    print(a * b)\n", "\n\n# AtCoder Beginner Contest 089\n# Problem A\n\nif __name__ == '__main__':\n    print(int(input()) // 3)\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 082\n# Problem A\n\nif __name__ == '__main__':\n    a, b = list(map(int, input().split()))\n    print((a + b + 1) // 2)\n"]
2022-04-20 19:03:07.749843 size on output set 7
2022-04-20 19:03:07.749855 num operations 1
2022-04-20 19:03:07.749861 size on input set 1
2022-04-20 19:03:07.750020 using api key gabby
2022-04-20 19:03:07.785529 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:03:09.287462 using api key sourya
2022-04-20 19:03:21.605055 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T and have length >= 5\nacgt_strings = [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if \"A\" in s[i:j] and \"C\" in s[i:j] and \"G\" in s[i:j] and \"T\" in s[i:j] and len(s[i:j]) >= 5]\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]) if acgt_strings else 0)\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 2,
      "text": "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 3,
      "text": "\n \ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 4,
      "text": "\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        substring = s[i:j]\n        if \"A\" in substring and \"C\" in substring and \"G\" in substring and \"T\" in substring:\n            acgt_strings.append(substring)\n\n# print the length of the longest substring\nprint(max([len(substring) for substring in acgt_strings]))\n"
    },
    {
      "index": 5,
      "text": "\nprint(s)\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string and \"A\" != acgt_string and \"C\" != acgt_string and \"G\" != acgt_string and \"T\" != acgt_string:\n        print(acgt_strings)\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 6,
      "text": "\n \ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 7,
      "text": "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T and have length of 4\nacgt_strings_length_4 = []\nfor i in range(len(s)-3):\n    for j in range(i+1, len(s)-2):\n        for k in range(j+1, len(s)-1):\n            for l in range(k+1, len(s)):\n                acgt_string = s[i:j] + s[j:k] + s[k:l] + s[l:]\n                if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n                    acgt_strings_length_4.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings_length_4]))\n"
    }
  ],
  "created": 1650481389,
  "object": "edit"
}
2022-04-20 19:03:21.605542 fix syntax errors 8 ['\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T and have length >= 5\nacgt_strings = [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if "A" in s[i:j] and "C" in s[i:j] and "G" in s[i:j] and "T" in s[i:j] and len(s[i:j]) >= 5]\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]) if acgt_strings else 0)\n', '\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\n \ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        substring = s[i:j]\n        if "A" in substring and "C" in substring and "G" in substring and "T" in substring:\n            acgt_strings.append(substring)\n\n# print the length of the longest substring\nprint(max([len(substring) for substring in acgt_strings]))\n', '\nprint(s)\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string and "A" != acgt_string and "C" != acgt_string and "G" != acgt_string and "T" != acgt_string:\n        print(acgt_strings)\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\n \ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T and have length of 4\nacgt_strings_length_4 = []\nfor i in range(len(s)-3):\n    for j in range(i+1, len(s)-2):\n        for k in range(j+1, len(s)-1):\n            for l in range(k+1, len(s)):\n                acgt_string = s[i:j] + s[j:k] + s[k:l] + s[l:]\n                if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n                    acgt_strings_length_4.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings_length_4]))\n']
2022-04-20 19:03:21.605635 size on output set 6
2022-04-20 19:03:21.605651 num operations 1
2022-04-20 19:03:21.605661 size on input set 1
2022-04-20 19:03:21.605901 using api key sunu
2022-04-20 19:04:00.534284 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\ns = input()\nans = 1\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"])) \n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n"
    },
    {
      "index": 4,
      "text": "\ns = input().strip()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j] and j-i > ans:\n            ans = max(ans,j-i)\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\ns = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j] == s[i:j].upper():\n            ans = max(ans,j-i)\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    }
  ],
  "created": 1650481401,
  "object": "edit"
}
2022-04-20 19:04:00.534741 fix syntax errors 8 ['s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n', 's = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n', '\ns = input()\nans = 1\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n', '\n# s = input()\n# ans = 0\n# for i in range(len(s)):\n#     for j in range(i+1,len(s)+1):\n#         if s[i:j].upper() == s[i:j]:\n#             ans = max(ans,j-i)\n# print(ans)\n\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"])) \n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n\n# def find_longest_word(words_list):  \n#     word_len = []  \n#     for n in words_list:  \n#         word_len.append((len(n), n))  \n#     word_len.sort()  \n#     return word_len[-1][1]  \n# print(find_longest_word(["PHP", "Exercises", "Backend"]))\n', '\ns = input().strip()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j] and j-i > ans:\n            ans = max(ans,j-i)\nprint(ans)\n', 's = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n', '\ns = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j] == s[i:j].upper():\n            ans = max(ans,j-i)\nprint(ans)\n', 's = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n']
2022-04-20 19:04:00.534808 size on output set 5
