["import sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\n# print(N)\n# print(d)\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n", "import sys\n\nN = int(input())\nd = list(map(int, input().split()))\n\nprint(N)\nprint(d)\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n", "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    # Read the number of elements\n    N = int(input().strip())\n\n    # Read the elements\n    elements = [int(x) for x in input().split()]\n\n    # Sort the elements in ascending order\n    elements.sort()\n\n    # Calculate the number of elements for each difficulty\n    elements_by_difficulty = {}\n    for element in elements:\n        if element not in elements_by_difficulty:\n            elements_by_difficulty[element] = 0\n        elements_by_difficulty[element] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in elements_by_difficulty:\n        if difficulty in elements_by_difficulty:\n            count += elements_by_difficulty[difficulty] * elements_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    d = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # print(N)\n    # print(d)\n\n    count = 0\n    for i in range(1, N):\n        if sum(d[:i]) == sum(d[i:]):\n            count += 1\n\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return 0\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    # Read the number of students\n    N = int(input())  # type: int\n\n    # Read the height of each student\n    heights = [int(x) for x in input().split()]  # type: list[int]\n\n    # Sort the heights in ascending order\n    heights.sort()\n\n    # Calculate the number of students for each height\n    heights_by_count = {}\n    for height in heights:\n        if height not in heights_by_count:\n            heights_by_count[height] = 0\n        heights_by_count[height] += 1\n\n    # Calculate the number of choices of the integer X\n    count = 0\n    for height in heights_by_count:\n        if height in heights_by_count:\n            count += heights_by_count[height] * heights_by_count[N//2-height]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    # Read the number of problems\n    N = int(input())\n\n    # Read the difficulty of each problem\n    problems = [int(x) for x in input().split()]\n\n    # Sort the problems in ascending order\n    problems.sort()\n\n    # Calculate the number of problems for each difficulty\n    problems_by_difficulty = {}\n    for problem in problems:\n        if problem not in problems_by_difficulty:\n            problems_by_difficulty[problem] = 0\n        problems_by_difficulty[problem] += 1\n\n    # Calculate the number of choices of the integer K\n    count = 0\n    for difficulty in problems_by_difficulty:\n        if difficulty in problems_by_difficulty:\n            count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n\n    # Print the answer\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n", "import sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport numpy as np\nfrom collections import deque\nfrom itertools import combinations, permutations\nsys.setrecursionlimit(10**9)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(sys.stdin.readline())\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef gcd(x, y): return x if y == 0 else gcd(y, x % y)\ndef comb(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\ndef divisors(n):\n    divisors = []\n    for i in range(1, int(pow(n, 0.5))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\ndef is_prime(n):\n    if n < 2: return False\n    for i in range(2, int(pow(n, 0.5))+1):\n        if n % i == 0:\n            return False\n    return True\ndef eratosthenes_sieve(n):\n    table = [0] * (n + 1)\n    prime_list = []\n    for i in range(2, n+1):\n        if table[i] == 0:\n            prime_list.append(i)\n            for j in range(i + i, n + 1, i):\n                table[j] = 1\n    return prime_list\ndef prime_factorization(n):\n    if n == 1: return []\n    prime_list = eratosthenes_sieve(int(pow(n, 0.5))+1)\n    prime_factor = []\n    for prime in prime_list:\n        if prime > n: break\n        exponent = 0\n        while n % prime == 0:\n            exponent += 1\n            n //= prime\n        if exponent != 0:\n            prime_factor.append([prime, exponent])\n    if n != 1: prime_factor.append([n, 1])\n    return prime_factor\ndef get_divisor(n):\n    prime_factor = prime_factorization(n)\n    divisor = []\n    for prime, exponent in prime_factor:\n        divisor.extend([prime**i for i in range(exponent + 1)])\n    divisor.sort()\n    return divisor\ndef get_digit(n):\n    digit = []\n    while n != 0:\n        digit.append(n % 10)\n        n //= 10\n    return digit\ndef digit_sum(n):\n    digit = get_digit(n)\n    return sum(digit)\ndef digit_len(n):\n    digit = get_digit(n)\n    return len(digit)\ndef digit_count(n, k):\n    digit = get_digit(n)\n    return digit.count(k)\ndef digit_num(n, k):\n    digit = get_digit(n)\n    return digit.index(k)\ndef digit_to_num(digit):\n    n = 0\n    for d in digit:\n        n = n * 10 + d\n    return n\ndef is_permutation(n, m):\n    digit_n = get_digit(n)\n    digit_m = get_digit(m)\n    return True if sorted(digit_n) == sorted(digit_m) else False\ndef is_palindrome(n):\n    digit = get_digit(n)\n    return True if digit == digit[::-1] else False\ndef is_pandigital(n, s=9):\n    digit = get_digit(n)\n    return len(digit) == s and not any(digit.count(d) != 1 for d in digit)\ndef is_pandigital_from_to(n, fr, to):\n    digit = get_digit(n)\n    return len(digit) == to - fr + 1 and not any(digit.count(d) != 1 for d in range(fr, to+1))\ndef is_pandigital_zero_to(n, to):\n    digit = get_digit(n)\n    return len(digit) == to and not any(digit.count(d) != 1 for d in range(to+1))\ndef is_pandigital_from(n, fr):\n    digit = get_digit(n)\n    return len(digit) == 9 and not any(digit.count(d) != 1 for d in range(1, fr+1))\ndef is_pandigital_zero_from(n, fr):\n    digit = get_digit(n)\n    return len(digit) == 10 and not any(digit.count(d) != 1 for d in range(fr, 10))\ndef is_pandigital_zero_to_from(n, to, fr):\n    digit = get_digit(n)\n    return len(digit) == to - fr + 1 and not any(digit.count(d) != 1 for d in range(fr, to+1))\ndef is_pandigital_zero_to_from_to(n, to1, fr1, to2, fr2):\n    digit = get_digit(n)\n    return len(digit) == to1 - fr1 + 1 + to2 - fr2 + 1 and not any(digit.count(d) != 1 for d in range(fr1, to1+1)) and not any(digit.count(d) != 1 for d in range(fr2, to2+1))\ndef is_narcissistic(n):\n    digit = get_digit(n)\n    n_digit = len(digit)\n    return n == sum(d**n_digit for d in digit)\ndef is_smith(n):\n    prime_factor = prime_factorization(n)\n    digit_sum = 0\n    for prime, exponent in prime_factor:\n        digit_sum += sum(get_digit(prime)) * exponent\n    return digit_sum == digit_sum(n)\ndef is_harshad(n):\n    return n % digit_sum(n) == 0\ndef is_harshad_strong(n):\n    return is_harshad(n) and is_prime(n // digit_sum(n))\ndef is_harshad_strong_right(n):\n    digit = get_digit(n)\n    for i in range(len(digit)):\n        if not is_harshad_strong(digit_to_num(digit[i:])):\n            return False\n    return True\ndef is_harshad_strong_left(n):\n    digit = get_digit(n)\n    for i in range(len(digit)):\n        if not is_harshad_strong(digit_to_num(digit[:i+1])):\n            return False\n    return True\ndef is_harshad_strong_both(n):\n    return is_harshad_strong_right(n) and is_harshad_strong_left(n)\ndef is_polydivisible(n):\n    digit = get_digit(n)\n", "\ndef main():\n    # Read the number of test cases\n    T = int(input())\n    for _ in range(T):\n        # Read the number of problems\n        N = int(input())\n        # Read the difficulty of each problem\n        problems = [int(x) for x in input().split()]\n        # Sort the problems in ascending order\n        problems.sort()\n        # Calculate the number of problems for each difficulty\n        problems_by_difficulty = {}\n        for problem in problems:\n            if problem not in problems_by_difficulty:\n                problems_by_difficulty[problem] = 0\n            problems_by_difficulty[problem] += 1\n        # Calculate the number of choices of the integer K\n        count = 0\n        for difficulty in problems_by_difficulty:\n            if difficulty in problems_by_difficulty:\n                count += problems_by_difficulty[difficulty] * problems_by_difficulty[N//2-difficulty]\n        # Print the answer\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(N, d):\n    d.sort()\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return K_max - K_min + 1\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(N, d):\n    d.sort()\n    d_median = d[N // 2]\n\n    l, r = 0, 0\n    for i in range(N // 2):\n        l += d[i]\n    for i in range(N // 2, N):\n        r += d[i]\n\n    K_min = d[0]\n    K_max = d[-1]\n\n    if l == r:\n        return K_max - K_min + 1\n\n    return K_max - K_min + 1\n\n\ndef main():\n    N = int(input())\n    d = list(map(int, input().split()))\n\n    print(solve(N, d))\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nN = int(sys.stdin.readline())\nd = list(map(int, sys.stdin.readline().split()))\n\nprint(d)\n", "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split())\n\nprint(N)\nprint(d)\n\ncount = 0\nfor i in range(1, N):\n    if sum(d[:i]) == sum(d[i:]):\n        count += 1\n\nprint(count)\n"]