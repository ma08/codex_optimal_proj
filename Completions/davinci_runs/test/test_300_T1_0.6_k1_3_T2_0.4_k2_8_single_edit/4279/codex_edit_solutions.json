["\n\n\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10**num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10**(num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10**(num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10**(num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n", "\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) < 2*k:\n        n += 1\n    if n*(n+1) == 2*k:\n        return 0\n    else:\n        m = n*(n+1)//2\n        return k-m\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(query, solution):\n\tif query == 1:\n\t\tsolution.append(1)\n\telif query == 2:\n\t\tsolution.append(2)\n\telse:\n\t\t# 1 + 2 + 3 + 4 + ... + n = n(n+1)/2\n\t\tn = 1\n\t\twhile n*(n+1) < query*2:\n\t\t\tn += 1\n\t\tn -= 1\n\t\t# I need to find the digit at the position (query-n) in the block from 1 to n\n\t\t# So I find the position of query-n in the sequence\n\t\tpos = 0\n\t\tfor i in range(1, n+1):\n\t\t\tpos += i*(i+1)//2\n\t\tpos = query - pos\n\t\t\n\t\t# I find the number at this position\n\t\tnum = 0\n\t\twhile pos != 0:\n\t\t\tnum += 1\n\t\t\tif pos > num:\n\t\t\t\tpos -= num\n\t\t\telse:\n\t\t\t\tbreak\n\t\t# And finally I find the digit\n\t\tsolution.append(str(num)[pos-1])\n\t\t\n\treturn solution\n\t\ndef main():\n\tq = int(input())\n\tqueries = [int(input()) for _ in range(q)]\n\tsolution = []\n\tfor query in queries:\n\t\tsolve(query, solution)\n\tprint('\\n'.join(solution))\n\t\nmain()\n", "\n\ndef solve(query, solution):\n\tif query == 1:\n\t\tsolution.append('1')\n\telif query == 2:\n\t\tsolution.append('2')\n\telse:\n\t\t# 1 + 2 + 3 + 4 + ... + n\n\t\tn = 1\n\t\twhile n*(n+1) < query*2:\n\t\t\tn += 1\n\t\tn -= 1\n\t\t# I need to find the digit at the position query-n in the block from 1 to n\n\t\t# So I find the position of query-n in the sequence\n\t\tpos = 0\n\t\tfor i in range(1, n+1):\n\t\t\tpos += i*(i+1)\n\t\tpos = query - pos\n\t\t\n\t\t# I find the number at this position\n\t\tnum = 0\n\t\twhile pos != 0:\n\t\t\tnum += 1\n\t\t\tif pos > num:\n\t\t\t\tpos -= num\n\t\t\telse:\n\t\t\t\tbreak\n\t\t# And finally I find the digit\n\t\tsolution.append(str(num)[pos-1])\n\t\t\n\treturn solution\n\t\ndef main():\n\tq = int(input())\n\tqueries = [int(input()) for _ in range(q)]\n\tsolution = []\n\tfor query in queries:\n\t\tsolve(query, solution)\n\tprint('\\n'.join(solution))\n\t\nmain()\n", "\nimport sys\n\ndef main():\n    print('Hello World')\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n * (n + 1) < 2 * k:\n        n += 1\n    if n * (n + 1) == 2 * k:\n        return 0\n    else:\n        m = n * (n + 1) // 2\n        return k - m\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint(\"Hello World\")\n", "\n\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) <= 2*k:\n        n += 1\n    m = n*(n-1)//2\n    return k-m\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) < 2*k:\n        n += 1\n    if n*(n+1) == 2*k:\n        return 0\n    else:\n        m = n*(n+1)//2\n        return k-m\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10 ** num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10 ** (num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10 ** (num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10 ** (num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n", "\n\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10**num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10**(num_digits - 1) + 1) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10**(num_digits - 1) + num_index - 1\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10**(num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(solve(k))\n\ndef solve(k):\n    n = 1\n    while n*(n+1) < 2*k:\n        n += 1\n    if n*(n+1) == 2*k:\n        return 0\n    else:\n        m = n*(n+1)//2\n        return k-m\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    print(solve(n))\n\ndef solve(n):\n    return n\n\nif __name__ == \"__main__\":\n    main()\n", "def get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10**num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10**(num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10**(num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10**(num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10**num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10**(num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10**(num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10**(num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n", "\n\ndef get_digit(k):\n    \"\"\"\n    Returns the digit at position k in the sequence\n    \"\"\"\n    if k == 1:\n        return 1\n    # Get the number of digits in the number that k corresponds to\n    # This is the number of digits in the block that k is in\n    num_digits = 1\n    while 10**num_digits < k:\n        num_digits += 1\n    # Get the index of the number that k corresponds to\n    # This is the index of the number in the block that k is in\n    num_index = (k - 10**(num_digits - 1)) // num_digits\n    # Get the number that k corresponds to\n    # This is the number in the block that k is in\n    num = 10**(num_digits - 1) + num_index\n    # Get the index of the digit that k corresponds to\n    # This is the index of the digit in the number that k is in\n    digit_index = (k - 10**(num_digits - 1)) % num_digits\n    # Get the digit that k corresponds to\n    # This is the digit in the number that k is in\n    digit = int(str(num)[digit_index])\n    return str(digit)\n\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(get_digit(k))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(query, solution):\n\tif query == 1:\n\t\tsolution.append(1)\n\telif query == 2:\n\t\tsolution.append(2)\n\telse:\n\t\t# 1 + 2 + 3 + 4 + ... + n\n\t\tn = 1\n\t\twhile n*(n+1) < query*2:\n\t\t\tn += 1\n\t\tn -= 1\n\t\t# I need to find the digit at the position query-n in the block from 1 to n\n\t\t# So I find the position of query-n in the sequence\n\t\tpos = 0\n\t\tfor i in range(1, n+1):\n\t\t\tpos += i*(i+1)\n\t\tpos = query - pos\n\t\t\n\t\t# I find the number at this position\n\t\tnum = 0\n\t\twhile pos != 0:\n\t\t\tnum += 1\n\t\t\tif pos > num:\n\t\t\t\tpos -= num\n\t\t\telse:\n\t\t\t\tbreak\n\t\t# And finally I find the digit\n\t\tsolution.append(str(num)[pos-1:pos])\n\t\t\n\treturn solution\n\t\ndef main():\n\tq = int(input())\n\tqueries = [int(input()) for _ in range(q)]\n\tsolution = []\n\tfor query in queries:\n\t\tsolve(query, solution)\n\tprint('\\n'.join(solution))\n\t\nmain()\n", "\n\ndef get_digit(n):\n    \"\"\"\n    Returns the digit at position n in the sequence\n    \"\"\"\n    if n == 1:\n        return 1\n    # Get the number of digits in the number that n corresponds to\n    # This is the number of digits in the block that n is in\n    num_digits = 1\n    while 10**num_digits < n:\n        num_digits += 1\n    # Get the index of the number that n corresponds to\n    # This is the index of the number in the block that n is in\n    num_index = (n - 10**(num_digits - 1)) // num_digits\n    # Get the number that n corresponds to\n    # This is the number in the block that n is in\n    num = 10**(num_digits - 1) + num_index\n    # Get the index of the digit that n corresponds to\n    # This is the index of the digit in the number that n is in\n    digit_index = (n - 10**(num_digits - 1)) % num_digits\n    # Get the digit that n corresponds to\n    # This is the digit in the number that n is in\n    digit = int(str(num)[digit_index])\n    return digit\n\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    print(get_digit(n))\n"]