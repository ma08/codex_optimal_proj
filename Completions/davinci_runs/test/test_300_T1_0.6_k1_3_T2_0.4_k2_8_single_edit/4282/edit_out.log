2022-04-20 19:14:38.697523 num operations 1
2022-04-20 19:14:38.697540 size on input set 1
2022-04-20 19:14:38.697709 using api key gabby
2022-04-20 19:14:38.827458 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:14:40.329118 using api key gabby
2022-04-20 19:14:40.370397 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 19:14:43.373835 using api key gabby
2022-04-20 19:14:43.414155 in retry 4 6.0 <class 'Exception'>, Retrying in 6 seconds...
2022-04-20 19:14:49.420618 using api key sourya
2022-04-20 19:15:11.909366 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited = set()\n    cycle = [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input_data):\n    kids = defaultdict(set)\n    for i in range(len(input_data)):\n        kids[input_data[i][0]].add(i+1)\n        kids[input_data[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3, 5], [1, 4], [2, 4], [1, 5], [2, 3]]))))\nprint(' '.join(map(str, solve([[2, 3], [3, 1], [1, 2]]))))\n"
    },
    {
      "index": 2,
      "text": "\n\n#from collections import defaultdict\n\n#def find_cycle(graph, start):\n#    visited, cycle = set(), [start]\n#    while True:\n#        if cycle[-1] in visited:\n#            return cycle[cycle.index(cycle[-1]):]\n#        else:\n#            visited.add(cycle[-1])\n#            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"
    },
    {
      "index": 3,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))  # 1 2 3 4 5\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))  # 1 2 3\n"
    },
    {
      "index": 4,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"
    },
    {
      "index": 5,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"
    },
    {
      "index": 6,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3, 5], [1, 4], [2, 4], [1, 5], [2, 3]]))))\nprint(' '.join(map(str, solve([[2, 3], [3, 1], [1, 2]]))))\n"
    },
    {
      "index": 7,
      "text": "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)  # {kid: [parents]}\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)  # kid: parent\n        kids[input[i][1]].add(i+1)  # kid: parent\n    cycles = find_all_cycles(kids)\n    res = []  # result\n    for cycle in cycles:\n        res.append(cycle[0])  # first parent\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())  # second parent\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"
    }
  ],
  "created": 1650482089,
  "object": "edit"
}
2022-04-20 19:15:11.909804 fix syntax errors 8 ["\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited = set()\n    cycle = [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n", "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input_data):\n    kids = defaultdict(set)\n    for i in range(len(input_data)):\n        kids[input_data[i][0]].add(i+1)\n        kids[input_data[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3, 5], [1, 4], [2, 4], [1, 5], [2, 3]]))))\nprint(' '.join(map(str, solve([[2, 3], [3, 1], [1, 2]]))))\n", "\n\n#from collections import defaultdict\n\n#def find_cycle(graph, start):\n#    visited, cycle = set(), [start]\n#    while True:\n#        if cycle[-1] in visited:\n#            return cycle[cycle.index(cycle[-1]):]\n#        else:\n#            visited.add(cycle[-1])\n#            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n", "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))  # 1 2 3 4 5\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))  # 1 2 3\n", "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n", "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n", "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)\n        kids[input[i][1]].add(i+1)\n    cycles = find_all_cycles(kids)\n    res = []\n    for cycle in cycles:\n        res.append(cycle[0])\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())\n    return res\n\nprint(' '.join(map(str, solve([[3, 5], [1, 4], [2, 4], [1, 5], [2, 3]]))))\nprint(' '.join(map(str, solve([[2, 3], [3, 1], [1, 2]]))))\n", "\nfrom collections import defaultdict\n\ndef find_cycle(graph, start):\n    visited, cycle = set(), [start]\n    while True:\n        if cycle[-1] in visited:\n            return cycle[cycle.index(cycle[-1]):]\n        else:\n            visited.add(cycle[-1])\n            cycle.append(graph[cycle[-1]])\n\ndef find_all_cycles(graph):\n    cycles = []\n    visited = set()\n    for start in graph:\n        if start not in visited:\n            cycle = find_cycle(graph, start)\n            cycles.append(cycle)\n            visited |= set(cycle)\n    return cycles\n\ndef solve(input):\n    kids = defaultdict(set)  # {kid: [parents]}\n    for i in range(len(input)):\n        kids[input[i][0]].add(i+1)  # kid: parent\n        kids[input[i][1]].add(i+1)  # kid: parent\n    cycles = find_all_cycles(kids)\n    res = []  # result\n    for cycle in cycles:\n        res.append(cycle[0])  # first parent\n        for i in range(1, len(cycle)):\n            res.append(kids[cycle[i-1]].difference(set([cycle[i]])).pop())  # second parent\n    return res\n\nprint(' '.join(map(str, solve([[3,5],[1,4],[2,4],[1,5],[2,3]]))))\nprint(' '.join(map(str, solve([[2,3],[3,1],[1,2]]))))\n"]
2022-04-20 19:15:11.909922 size on output set 7
2022-04-20 19:15:11.909936 num operations 1
2022-04-20 19:15:11.909942 size on input set 1
2022-04-20 19:15:11.910103 using api key soukgp
2022-04-20 19:15:21.337022 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef adj_list(n, edges):\n    adj = [[] for _ in range(n)]\n    for i, (u, v) in enumerate(edges):\n        adj[u - 1].append(i + 1)\n        adj[v - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    edges = []\n    for _ in range(n):\n        edges.append(tuple(map(int, input().split())))\n    adj = adj_list(n, edges)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i)\n        adj[a[i][1] - 1].append(i)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650482111,
  "object": "edit"
}
2022-04-20 19:15:21.337337 fix syntax errors 8 ["\n\ndef adj_list(n, edges):\n    adj = [[] for _ in range(n)]\n    for i, (u, v) in enumerate(edges):\n        adj[u - 1].append(i + 1)\n        adj[v - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    edges = []\n    for _ in range(n):\n        edges.append(tuple(map(int, input().split())))\n    adj = adj_list(n, edges)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i)\n        adj[a[i][1] - 1].append(i)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v-1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v-1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef adj_list(n, a):\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i][0] - 1].append(i + 1)\n        adj[a[i][1] - 1].append(i + 1)\n    return adj\n\ndef eulerian_cycle(adj):\n    n = len(adj)\n    cycle = []\n    stk = [1]\n    while stk:\n        v = stk[-1]\n        if not adj[v - 1]:\n            cycle.append(v)\n            stk.pop()\n        else:\n            w = adj[v - 1].pop()\n            stk.append(w)\n    return cycle[::-1]\n\ndef main():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(tuple(map(int, input().split())))\n    adj = adj_list(n, a)\n    cycle = eulerian_cycle(adj)\n    print(' '.join([str(i) for i in cycle]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:15:21.337544 size on output set 6
2022-04-20 19:15:21.337560 num operations 1
2022-04-20 19:15:21.337567 size on input set 1
2022-04-20 19:15:21.337738 using api key sourya
2022-04-20 19:15:33.431199 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0] + 1\n    p[2] = a[0, 1] + 1\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] + 1 if a[p[i - 1] - 1, 0] != p[i - 2] - 1 else a[p[i - 1] - 1, 1] + 1\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0] if a[0, 0] != 1 else a[0, 1]\n    for i in range(2, n - 1):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]  # noqa: E501\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=np.int64)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=np.int64)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom collections import defaultdict\n\n\ndef main():\n    n = int(input())\n    a = defaultdict(list)\n    for i in range(n):\n        x, y = map(int, input().split())\n        a[x].append(i + 1)\n        a[y].append(i + 1)\n    p = [-1] * n\n    p[0] = 1\n    p[2] = a[1][0]\n    for i in range(3, n):\n        p[i] = a[p[i - 1]][0] if a[p[i - 1]][0] != p[i - 2] else a[p[i - 1]][1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650482121,
  "object": "edit"
}
2022-04-20 19:15:33.431534 fix syntax errors 8 ["\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0] + 1\n    p[2] = a[0, 1] + 1\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] + 1 if a[p[i - 1] - 1, 0] != p[i - 2] - 1 else a[p[i - 1] - 1, 1] + 1\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0] if a[0, 0] != 1 else a[0, 1]\n    for i in range(2, n - 1):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]  # noqa: E501\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=np.int64)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=np.int64)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import defaultdict\n\n\ndef main():\n    n = int(input())\n    a = defaultdict(list)\n    for i in range(n):\n        x, y = map(int, input().split())\n        a[x].append(i + 1)\n        a[y].append(i + 1)\n    p = [-1] * n\n    p[0] = 1\n    p[2] = a[1][0]\n    for i in range(3, n):\n        p[i] = a[p[i - 1]][0] if a[p[i - 1]][0] != p[i - 2] else a[p[i - 1]][1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport numpy as np\n\n\ndef main():\n    n = int(input())\n    a = np.zeros((n, 2), dtype=int)\n    for i in range(n):\n        a[i, 0], a[i, 1] = map(int, input().split())\n    p = np.full(n, -1, dtype=int)\n    p[0] = 1\n    p[1] = a[0, 0]\n    p[2] = a[0, 1]\n    for i in range(2, n):\n        p[i] = a[p[i - 1] - 1, 0] if a[p[i - 1] - 1, 0] != p[i - 2] else a[p[i - 1] - 1, 1]\n    print(*p)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:15:33.431593 size on output set 6
