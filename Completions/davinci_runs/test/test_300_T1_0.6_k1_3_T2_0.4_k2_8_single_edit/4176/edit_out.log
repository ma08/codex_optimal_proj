2022-04-20 18:09:35.752073 num operations 1
2022-04-20 18:09:35.752091 size on input set 1
2022-04-20 18:09:35.752284 using api key sourya
2022-04-20 18:09:41.184917 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in raw_input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in raw_input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650478175,
  "object": "edit"
}
2022-04-20 18:09:41.185249 fix syntax errors 8 ["\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in raw_input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in raw_input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 18:09:41.185292 size on output set 4
2022-04-20 18:09:41.185303 num operations 1
2022-04-20 18:09:41.185314 size on input set 1
2022-04-20 18:09:41.185481 using api key gabby
2022-04-20 18:09:41.223927 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 18:09:42.725846 using api key sourya
2022-04-20 18:09:48.911114 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# ==========\n# Solution 1\n# ==========\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution 1:\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# Solution 2:\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    },
    {
      "index": 2,
      "text": "\n#\n# ==========\n# Solution 1\n# ==========\n#\na, b = list(map(int, input().split()))\n#\nif a > b:\n    a, b = b, a\n#\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n#\na, b = list(map(int, input().split()))\n#\nif a > b:\n    a, b = b, a\n#\nprint(a)\n"
    },
    {
      "index": 3,
      "text": "\n\n# ===========\n# Solution 1:\n# ===========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ===========\n# Solution 2:\n# ===========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    },
    {
      "index": 4,
      "text": "\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    },
    {
      "index": 5,
      "text": "# ==========\n# Solution 1\n# ==========\na, b = list(map(int, input().split()))\nif a > b:\n    a, b = b, a\nprint(a)\n# ==========\n# Solution 2\n# ==========\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\nprint(a)\n"
    },
    {
      "index": 6,
      "text": "\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n"
    },
    {
      "index": 7,
      "text": "\n\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\nif a > b:\n    a, b = b, a\nprint(a)\n"
    }
  ],
  "created": 1650478182,
  "object": "edit"
}
2022-04-20 18:09:48.911464 fix syntax errors 8 ['\n# ==========\n# Solution 1\n# ==========\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n', '\n\n# Solution 1:\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# Solution 2:\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n', '\n#\n# ==========\n# Solution 1\n# ==========\n#\na, b = list(map(int, input().split()))\n#\nif a > b:\n    a, b = b, a\n#\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n#\na, b = list(map(int, input().split()))\n#\nif a > b:\n    a, b = b, a\n#\nprint(a)\n', '\n\n# ===========\n# Solution 1:\n# ===========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ===========\n# Solution 2:\n# ===========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n', '\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n', '# ==========\n# Solution 1\n# ==========\na, b = list(map(int, input().split()))\nif a > b:\n    a, b = b, a\nprint(a)\n# ==========\n# Solution 2\n# ==========\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\nprint(a)\n', '\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n', '\n\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\nif a > b:\n    a, b = b, a\nprint(a)\n']
2022-04-20 18:09:48.911602 size on output set 7
2022-04-20 18:09:48.911616 num operations 1
2022-04-20 18:09:48.911623 size on input set 1
2022-04-20 18:09:48.911788 using api key jaanu
2022-04-20 18:09:55.003823 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases. \n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly\ndistributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases. \n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650478188,
  "object": "edit"
}
2022-04-20 18:09:55.004124 fix syntax errors 8 ['\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases. \n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n\n\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly\ndistributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases. \n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n', '\n"""\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A × B ÷ GCD(A, B)\n"""\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 18:09:55.004275 size on output set 4
