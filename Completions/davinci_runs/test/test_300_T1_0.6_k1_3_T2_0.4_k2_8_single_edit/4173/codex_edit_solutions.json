["\n\n\ndef solve(n, a, b):\n    if b < 2*a:\n        return (n//2) * b + (n%2) * a\n    else:\n        return n*a\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        print(solve(n, a, b))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n % 2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\n\nimport sys\n\n\ndef main(args):\n    q = int(args[1])\n    for i in range(2, q+2):\n        n, a, b = map(int, args[i].split())\n        print((n//2) * b + (n%2) * a if b < 2*a else n*a)\n\n\nmain(sys.argv)\n", "\nimport sys\n\ndef solve(n, a, b):\n    a, b = min(a, b), max(a, b) \n    if a == b:\n        return n * a \n    else:\n        if n % 2 == 0: \n            return (a * (n//2)) + (b * (n//2)) \n        else:\n            return (a * (n//2)) + (b * (n//2)) + a \n\nq = int(input().strip())\nfor a0 in xrange(q):\n    n, a, b = input().strip().split(' ')\n    n, a, b = [int(n), int(a), int(b)] \n    print(solve(n, a, b))\n", "import sys\n\ndef solve(n, a, b):\n    a, b = min(a, b), max(a, b)\n    if a == b:\n        return n * a\n    else:\n        if n % 2 == 0:\n            return (a * (n//2)) + (b * (n//2))\n        else:\n            return (a * (n//2)) + (b * (n//2)) + a\n\nq = int(input().strip())\nfor a0 in xrange(q):\n    n, a, b = input().strip().split(' ')\n    n, a, b = [int(n), int(a), int(b)]\n    print solve(n, a, b)\n", "\nimport math\n\ndef minimum_cost_bottles(n, a, b):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return min(2*a, b)\n    else:\n        return min(n*a, n//2*b + n%2*a)\n\ndef main():\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        print(minimum_cost_bottles(query[0], query[1], query[2]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef solve(n, m):\n    if m == 1:\n        return 2\n    elif n == m:\n        return 2 * n - 2\n    else: \n        return n + m - 2\n\nq = int(raw_input().strip())\nfor i in xrange(q):\n    n, m = raw_input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    print solve(n, m)\n", "\n\ndef minimum_cost_bottles(n, a, b):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return min(2*a, b)\n    else:\n        return min(n*a, n//2*b + n%2*a)\n\ndef main():\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        print(minimum_cost_bottles(query[0], query[1], query[2]))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n%2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n", "\n#!/bin/python\n#\n# HackerRank\n# Algorithms: Implementation\n#\nimport sys, re\nfrom collections import Counter\n#\n# Complete the function below.\n#\ndef isValid(s):\n    #\n    # Write your code here.\n    #\n    cnt = Counter(s)\n    cnt = cnt.values()\n    m = min(cnt)\n    cnt = Counter(cnt)\n    if len(cnt) == 1:\n        return \"YES\"\n    elif len(cnt) == 2:\n        if m in cnt.keys() and 1 in cnt.values():\n            return \"YES\"\n        elif m + 1 in cnt.keys() and 1 in cnt.values():\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n#\ns = raw_input().strip()\nresult = isValid(s)\nprint(result)\n", "\n\nimport sys\n\ndef solve(n, a, b):\n    a, b = sorted([a, b])\n    if a == b: return n * a\n    if n % 2 == 0: return (a * (n//2)) + (b * (n//2))\n    return (a * (n//2)) + (b * (n//2)) + a\n\nq = int(raw_input().strip())\nfor a0 in xrange(q):\n    n, a, b = raw_input().strip().split(' ')\n    n, a, b = [int(n), int(a), int(b)]\n    print solve(n, a, b)\n", "def minimum_cost_bottles(n, a, b):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return min(2*a, b)\n    else:\n        return min(n*a, n//2*b + n%2*a)\n\ndef main():\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        print(minimum_cost_bottles(query[0], query[1], query[2]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n%2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n%2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(n, a, b):\n    a, b = min(a, b), max(a, b)\n    if a == b:\n        return n * a\n    else:\n        if n % 2 == 0:\n            return (a * (n//2)) + (b * (n//2))\n        else:\n            return (a * (n//2)) + (b * (n//2)) + a\n\nq = int(raw_input().strip())\nfor a0 in xrange(q):\n    n, a, b = raw_input().strip().split(' ')\n    n, a, b = [int(n), int(a), int(b)]\n    print solve(n, a, b)\n", "import sys\ndef solve(n, a, b):\n    a, b = min(a, b), max(a, b)\n    if a == b:\n        return n * a\n    else:\n        if n % 2 == 0:\n            return (a * (n//2)) + (b * (n//2))\n        else:\n            return (a * (n//2)) + (b * (n//2)) + a\n\nq = int(raw_input().strip())\nfor a0 in xrange(q):\n    n, a, b = raw_input().strip().split(' ')\n    n, a, b = [int(n), int(a), int(b)]\n    print solve(n, a, b)\n", "\nimport sys\n\ndef solve(n,a,b):\n    a, b = min(a, b), max(a, b)\n    if a==b:\n        return n*a\n    elif n%2==0:\n        return (a*(n//2))+(b*(n//2))\n    else :\n        return (a*(n//2))+(b*(n//2))+a\n\nq = int(input().strip())\nfor a0 in xrange(q):\n    n,a,b = input().strip().split(' ')\n    n,a,b = [int(n),int(a),int(b)]\n    print(solve(n,a,b))\n"]