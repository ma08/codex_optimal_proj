2022-04-20 18:11:48.040827 num operations 1
2022-04-20 18:11:48.040846 size on input set 1
2022-04-20 18:11:48.041010 using api key kouti
2022-04-20 18:12:21.674443 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B[0] monsters attacking the first town, so he will defeat B[0] monsters attacking the first town.\n    # The second hero can defeat at most B[0] + B[1] monsters attacking the first and second town, so he will defeat B[1] monsters attacking the second town.\n    # The i-th hero can defeat at most B[0] + B[1] + ... + B[i-1] + B[i] monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B[i-1] monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B[0] + B[1] + ... + B[N-1] + B[N] monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B[N-1] monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B[0] + B[1] + ... + B[N-1].\n    # However, some monsters may have already been defeated.\n    # For example, if B[0] + B[1] < A[0] + A[1], the third hero must defeat at least A[0] + A[1] - (B[0] + B[1]) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B[0] + B[1] + ... + B[N-1] + (A[0] + A[1] - (B[0] + B[1])) + (A[1] + A[2] - (B[1] + B[2])) + ... + (A[N] + A[N+1] - (B[N-1] + B[N])).\n    # This can be simplified as B[0] + B[1] + ... + B[N-1] + A[0] + A[1] + ... + A[N+1] - (B[0] + B[1] + ... + B[N-1] + B[0] + B[1] + ... + B[N-1] + B[1] + B[2] + ... + B[N-1] + ... + B[N-2] + B[N-1] + B[N])\n    # This can be simplified as B[0] + B[1] + ... + B[N-1] + A[0] + A[1] + ... + A[N+1] - (N * B[0] + (N-1) * B[1] + ... + 2 * B[N-1] + B[N])\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N))\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_i monsters attacking the i-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_N monsters attacking the N-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N} + B_{N+1})).\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N} + B_1 + B_2 + ... + B_{N} + B_2 + B_3 + ... + B_{N} + ... + B_{N-1} + B_{N} + B_{N+1})\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N} + B_{N+1})\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N))\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B[0] monsters attacking the first town, so he will defeat B[0] monsters attacking the first town.\n    # The second hero can defeat at most B[0] + B[1] monsters attacking the first and second town, so he will defeat B[1] monsters attacking the second town.\n    # The i-th hero can defeat at most B[0] + B[1] + ... + B[i-1] + B[i] monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B[i-1] monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B[0] + B[1] + ... + B[N-1] + B[N] monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B[N-1] monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B[0] + B[1] + ... + B[N-1].\n    # However, some monsters may have already been defeated.\n    # For example, if B[0] + B[1] < A[0] + A[1], the third hero must defeat at least A[0] + A[1] - (B[0] + B[1]) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B[0] + B[1] + ... + B[N-1] + (A[0] + A[1] - (B[0] + B[1])) + (A[1] + A[2] - (B[1] + B[2])) + ... + (A[N] + A[N+1] - (B[N-1] + B[N])).\n    # This can be simplified as B[0] + B[1] + ... + B[N-1] + A[0] + A[1] + ... + A[N+1] - (B[0] + B[1] + ... + B[N-1] + B[0] + B[1] + ... + B[N-1] + B[1] + B[2] + ... + B[N-1] + ... + B[N-2] + B[N-1] + B[N])\n    # This can be simplified as B[0] + B[1] + ... + B[N-1] + A[0] + A[1] + ... + A[N+1] - (N * B[0] + (N-1) * B[1] + ... + 2 * B[N-1] + B[N])\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i} monsters attacking the i-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N} monsters attacking the N-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the second town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N} + B_{N+1})).\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N} + B_1 + B_2 + ... + B_{N} + B_2 + B_3 + ... + B_{N} + ... + B_{N-1} + B_{N} + B_{N+1})\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N))\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N) \n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i} monsters attacking the i-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N} monsters attacking the N-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N} + B_{N+1})).\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N} + B_1 + B_2 + ... + B_{N} + B_2 + B_3 + ... + B_{N} + ... + B_{N-1} + B_{N} + B_{N+1})\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_{N})\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650478308,
  "object": "edit"
}
2022-04-20 18:12:21.674914 fix syntax errors 8 ['\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B[0] monsters attacking the first town, so he will defeat B[0] monsters attacking the first town.\n    # The second hero can defeat at most B[0] + B[1] monsters attacking the first and second town, so he will defeat B[1] monsters attacking the second town.\n    # The i-th hero can defeat at most B[0] + B[1] + ... + B[i-1] + B[i] monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B[i-1] monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B[0] + B[1] + ... + B[N-1] + B[N] monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B[N-1] monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B[0] + B[1] + ... + B[N-1].\n    # However, some monsters may have already been defeated.\n    # For example, if B[0] + B[1] < A[0] + A[1], the third hero must defeat at least A[0] + A[1] - (B[0] + B[1]) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B[0] + B[1] + ... + B[N-1] + (A[0] + A[1] - (B[0] + B[1])) + (A[1] + A[2] - (B[1] + B[2])) + ... + (A[N] + A[N+1] - (B[N-1] + B[N])).\n    # This can be simplified as B[0] + B[1] + ... + B[N-1] + A[0] + A[1] + ... + A[N+1] - (B[0] + B[1] + ... + B[N-1] + B[0] + B[1] + ... + B[N-1] + B[1] + B[2] + ... + B[N-1] + ... + B[N-2] + B[N-1] + B[N])\n    # This can be simplified as B[0] + B[1] + ... + B[N-1] + A[0] + A[1] + ... + A[N+1] - (N * B[0] + (N-1) * B[1] + ... + 2 * B[N-1] + B[N])\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N))\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_i monsters attacking the i-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_N monsters attacking the N-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N} + B_{N+1})).\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N} + B_1 + B_2 + ... + B_{N} + B_2 + B_3 + ... + B_{N} + ... + B_{N-1} + B_{N} + B_{N+1})\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N} + B_{N+1})\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N))\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B[0] monsters attacking the first town, so he will defeat B[0] monsters attacking the first town.\n    # The second hero can defeat at most B[0] + B[1] monsters attacking the first and second town, so he will defeat B[1] monsters attacking the second town.\n    # The i-th hero can defeat at most B[0] + B[1] + ... + B[i-1] + B[i] monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B[i-1] monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B[0] + B[1] + ... + B[N-1] + B[N] monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B[N-1] monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B[0] + B[1] + ... + B[N-1].\n    # However, some monsters may have already been defeated.\n    # For example, if B[0] + B[1] < A[0] + A[1], the third hero must defeat at least A[0] + A[1] - (B[0] + B[1]) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B[0] + B[1] + ... + B[N-1] + (A[0] + A[1] - (B[0] + B[1])) + (A[1] + A[2] - (B[1] + B[2])) + ... + (A[N] + A[N+1] - (B[N-1] + B[N])).\n    # This can be simplified as B[0] + B[1] + ... + B[N-1] + A[0] + A[1] + ... + A[N+1] - (B[0] + B[1] + ... + B[N-1] + B[0] + B[1] + ... + B[N-1] + B[1] + B[2] + ... + B[N-1] + ... + B[N-2] + B[N-1] + B[N])\n    # This can be simplified as B[0] + B[1] + ... + B[N-1] + A[0] + A[1] + ... + A[N+1] - (N * B[0] + (N-1) * B[1] + ... + 2 * B[N-1] + B[N])\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i} monsters attacking the i-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N} monsters attacking the N-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the second town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N} + B_{N+1})).\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N} + B_1 + B_2 + ... + B_{N} + B_2 + B_3 + ... + B_{N} + ... + B_{N-1} + B_{N} + B_{N+1})\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N))\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N) \n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i} monsters attacking the i-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N} monsters attacking the N-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N} + B_{N+1})).\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N} + B_1 + B_2 + ... + B_{N} + B_2 + B_3 + ... + B_{N} + ... + B_{N-1} + B_{N} + B_{N+1})\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_{N})\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 18:12:21.675110 size on output set 6
2022-04-20 18:12:21.675125 num operations 1
2022-04-20 18:12:21.675131 size on input set 1
2022-04-20 18:12:21.675297 using api key derek
2022-04-20 18:12:21.712264 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 18:12:23.214160 using api key derek
2022-04-20 18:12:23.250429 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 18:12:26.253860 using api key sunu
2022-04-20 18:12:38.117704 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    },
    {
      "index": 1,
      "text": "\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    },
    {
      "index": 2,
      "text": "\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main(n, monsters, heroes):\n    monsters.sort(reverse = True)\n    heroes.sort(reverse = True)\n    total = 0.0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += float(monster)\n        else:\n            total += float(heroes[hero])\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n\n    monsters.sort()\n    heroes.sort()\n\n    for monster in monsters[::-1]:\n        for hero in heroes[::-1]:\n            if monster <= hero:\n                heroes.remove(hero)\n                break\n        else:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(monsters, heroes))\n"
    },
    {
      "index": 6,
      "text": "\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    },
    {
      "index": 7,
      "text": "\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    }
  ],
  "created": 1650478346,
  "object": "edit"
}
2022-04-20 18:12:38.118008 fix syntax errors 8 ["\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n", "\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n", "\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n", "\n\ndef main(n, monsters, heroes):\n    monsters.sort(reverse = True)\n    heroes.sort(reverse = True)\n    total = 0.0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += float(monster)\n        else:\n            total += float(heroes[hero])\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n", '\n\ndef main():\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n\n    monsters.sort()\n    heroes.sort()\n\n    for monster in monsters[::-1]:\n        for hero in heroes[::-1]:\n            if monster <= hero:\n                heroes.remove(hero)\n                break\n        else:\n            print("NO")\n            return\n\n    print("YES")\n\n\nif __name__ == \'__main__\':\n    main()\n', "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(monsters, heroes))\n", "\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n", "\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"]
2022-04-20 18:12:38.118134 size on output set 6
2022-04-20 18:12:38.118148 num operations 1
2022-04-20 18:12:38.118154 size on input set 1
2022-04-20 18:12:38.118317 using api key sourya
2022-04-20 18:12:43.491916 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solved by Tashfia Rahman\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 2,
      "text": "\n# solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 3,
      "text": "\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 4,
      "text": "\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 5,
      "text": "\n\n# Solved by Tashfia Rahman \n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    }
  ],
  "created": 1650478358,
  "object": "edit"
}
2022-04-20 18:12:43.492188 fix syntax errors 8 ['\n#\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\n\n# Solved by Tashfia Rahman\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\n# solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\n\n# Solved by Tashfia Rahman \n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n']
2022-04-20 18:12:43.492238 size on output set 7
