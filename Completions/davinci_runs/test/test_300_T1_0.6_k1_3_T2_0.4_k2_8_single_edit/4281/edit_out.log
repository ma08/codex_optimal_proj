2022-04-20 19:13:53.666732 num operations 1
2022-04-20 19:13:53.666750 size on input set 1
2022-04-20 19:13:53.666972 using api key sourya
2022-04-20 19:14:05.481331 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n):\n        ans += min(a[i], b[i])\n        b[i] -= min(a[i], b[i])\n        ans += min(a[i+1], b[i])\n        a[i+1] -= min(a[i+1], b[i])\n\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\"\"\"\nhttps://atcoder.jp/contests/abc049/tasks/arc065_b\n\"\"\"\n\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650482033,
  "object": "edit"
}
2022-04-20 19:14:05.481672 fix syntax errors 8 ["import sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n):\n        ans += min(a[i], b[i])\n        b[i] -= min(a[i], b[i])\n        ans += min(a[i+1], b[i])\n        a[i+1] -= min(a[i+1], b[i])\n\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == '__main__':\n    main()\n", '"""\nhttps://atcoder.jp/contests/abc049/tasks/arc065_b\n"""\n\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    idxs = [[] for _ in range(n+1)]\n    for i, xi in enumerate(x):\n        idxs[xi].append(i)\n\n    min_p = max_p = 0\n    for i, idx in enumerate(idxs):\n        if len(idx) > 0:\n            min_p += 1\n            max_p += 1\n\n            if i == 0:\n                max_p += len(idx) - 1\n            elif i == n:\n                max_p += len(idx) - 1\n            else:\n                max_p += len(idx)\n\n    print(min_p, max_p)\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-20 19:14:05.481833 size on output set 4
2022-04-20 19:14:05.481848 num operations 1
2022-04-20 19:14:05.481856 size on input set 1
2022-04-20 19:14:05.482020 using api key kouti
2022-04-20 19:14:15.758038 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == \"__main__\":\n    _ = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print(\"{} {}\".format(answer[0], answer[1]))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_answer(n, x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(n, x)\n    print(\"{} {}\".format(answer[0], answer[1]))\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i - 1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i - 1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print(\"{} {}\".format(answer[0], answer[1]))\n"
    },
    {
      "index": 3,
      "text": "\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print(\"{} {}\".format(answer[0], answer[1]))\n"
    },
    {
      "index": 4,
      "text": "\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print(\"{} {}\".format(answer[0], answer[1]))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef get_answer(n, x):\n    if n == 1:\n        return 1\n\n    min_count = 1\n    max_count = 1\n\n    i = 1\n    while i < n:\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < n:\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return max_count - min_count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = sorted(list(map(int, input().split())))\n    answer = get_answer(n, x)\n    print(answer)\n"
    },
    {
      "index": 6,
      "text": "\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print(\"{} {}\".format(answer[0], answer[1]))\n"
    },
    {
      "index": 7,
      "text": "\n\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print(answer[0], answer[1])\n"
    }
  ],
  "created": 1650482045,
  "object": "edit"
}
2022-04-20 19:14:15.758382 fix syntax errors 8 ['\n\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == "__main__":\n    _ = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print("{} {}".format(answer[0], answer[1]))\n', '\n\ndef get_answer(n, x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == "__main__":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(n, x)\n    print("{} {}".format(answer[0], answer[1]))\n', '\n\n\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i - 1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i - 1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == "__main__":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print("{} {}".format(answer[0], answer[1]))\n', '\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == "__main__":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print("{} {}".format(answer[0], answer[1]))\n', '\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == "__main__":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print("{} {}".format(answer[0], answer[1]))\n', '\n\ndef get_answer(n, x):\n    if n == 1:\n        return 1\n\n    min_count = 1\n    max_count = 1\n\n    i = 1\n    while i < n:\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < n:\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return max_count - min_count\n\n\nif __name__ == "__main__":\n    n = int(input())\n    x = sorted(list(map(int, input().split())))\n    answer = get_answer(n, x)\n    print(answer)\n', '\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == "__main__":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print("{} {}".format(answer[0], answer[1]))\n', '\n\ndef get_answer(x):\n    x.sort()\n    if len(x) == 1:\n        return 1, 1\n\n    min_count, max_count = 1, 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            min_count += 1\n            i += 2\n        else:\n            i += 1\n\n    i = 1\n    while i < len(x):\n        if x[i] - x[i-1] == 1:\n            max_count += 1\n            i += 2\n        else:\n            max_count += 1\n            i += 1\n\n    return min_count, max_count\n\n\nif __name__ == "__main__":\n    n = int(input())\n    x = list(map(int, input().split()))\n    answer = get_answer(x)\n    print(answer[0], answer[1])\n']
2022-04-20 19:14:15.758533 size on output set 6
2022-04-20 19:14:15.758548 num operations 1
2022-04-20 19:14:15.758554 size on input set 1
2022-04-20 19:14:15.758711 using api key soukgp
2022-04-20 19:14:38.309883 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    # Sort the input array\n    a.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = a[0]\n    maximum = a[-1]\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if a[i] != a[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if a[i] != a[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the first and\n    # last elements of the array\n    minimum = x[0] + 1\n    maximum = x[-1] + 1\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if x[i] != x[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of friends\n    # that are equal to the first element of the array, plus one,\n    # because the only way to reach the minimum number is to have all\n    # friends at the house with the smallest coordinate\n    minimum += count\n\n    # The maximum number of occupied houses is the number of friends\n    # that are equal to the last element of the array, plus one,\n    # because the only way to reach the maximum number is to have all\n    # friends at the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if x[i] != x[-1]:\n            break\n        count += 1\n    maximum += count\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = x[0]\n    maximum = x[-1]\n\n    # Initialize the count variable to be the number of elements\n    # in the array\n    count = n\n\n    # The minimum number of occupied houses is the number of\n    # elements in the array, because the only way to reach the\n    # minimum number is to have all friends at the house with the\n    # smallest coordinate\n    minimum += count\n\n    # The maximum number of occupied houses is the number of\n    # elements in the array, because the only way to reach the\n    # maximum number is to have all friends at the house with the\n    # largest coordinate\n    maximum += count\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = x[0]\n    maximum = x[-1]\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if x[i] != x[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 2, -1, -1):\n        if x[i] != x[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n = int(input()) # number of houses\n    x = list(map(int, input().split())) # coordinates of houses\n\n    # sort the coordinates\n    x.sort() \n\n    # initialize the minimum and maximum result to be the sum of the first and last elements of the array\n    minimum = x[0] \n    maximum = x[-1] \n\n    # initialize the count variable to be the number of elements with the same value as the first element of the array\n    count = 1 \n    for i in range(1, n): \n        if x[i] != x[0]: \n            break \n        count += 1 \n\n    # the minimum number of occupied houses is the number of elements that are equal to the first element of the array, because the only way to reach the minimum number is to have all friends at the house with the smallest coordinate\n    minimum += count - 1 \n\n    # the maximum number of occupied houses is the number of elements that are equal to the last element of the array, because the only way to reach the maximum number is to have all friends at the house with the largest coordinate\n    count = 1 \n    for i in range(n - 1, 0, -1): \n        if x[i] != x[-1]: \n            break \n        count += 1 \n    maximum += count - 1 \n\n    # print the minimum and maximum result\n    print(minimum, maximum) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = x[0]\n    maximum = x[-1]\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if x[i] != x[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if x[i] != x[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result.\n    print(minimum, maximum)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the sum of the first and last elements of the array\n    minimum = x[0]\n    maximum = x[-1]\n\n    # Initialize the count variable to be the number of elements with the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if x[i] != x[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if x[i] != x[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Sort the input array\n    a.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = a[0]\n    maximum = a[-1]\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if a[i] != a[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if a[i] != a[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650482055,
  "object": "edit"
}
2022-04-20 19:14:38.310291 fix syntax errors 8 ['\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    # Sort the input array\n    a.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = a[0]\n    maximum = a[-1]\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if a[i] != a[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if a[i] != a[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the first and\n    # last elements of the array\n    minimum = x[0] + 1\n    maximum = x[-1] + 1\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if x[i] != x[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of friends\n    # that are equal to the first element of the array, plus one,\n    # because the only way to reach the minimum number is to have all\n    # friends at the house with the smallest coordinate\n    minimum += count\n\n    # The maximum number of occupied houses is the number of friends\n    # that are equal to the last element of the array, plus one,\n    # because the only way to reach the maximum number is to have all\n    # friends at the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if x[i] != x[-1]:\n            break\n        count += 1\n    maximum += count\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = x[0]\n    maximum = x[-1]\n\n    # Initialize the count variable to be the number of elements\n    # in the array\n    count = n\n\n    # The minimum number of occupied houses is the number of\n    # elements in the array, because the only way to reach the\n    # minimum number is to have all friends at the house with the\n    # smallest coordinate\n    minimum += count\n\n    # The maximum number of occupied houses is the number of\n    # elements in the array, because the only way to reach the\n    # maximum number is to have all friends at the house with the\n    # largest coordinate\n    maximum += count\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = x[0]\n    maximum = x[-1]\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if x[i] != x[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 2, -1, -1):\n        if x[i] != x[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input()) # number of houses\n    x = list(map(int, input().split())) # coordinates of houses\n\n    # sort the coordinates\n    x.sort() \n\n    # initialize the minimum and maximum result to be the sum of the first and last elements of the array\n    minimum = x[0] \n    maximum = x[-1] \n\n    # initialize the count variable to be the number of elements with the same value as the first element of the array\n    count = 1 \n    for i in range(1, n): \n        if x[i] != x[0]: \n            break \n        count += 1 \n\n    # the minimum number of occupied houses is the number of elements that are equal to the first element of the array, because the only way to reach the minimum number is to have all friends at the house with the smallest coordinate\n    minimum += count - 1 \n\n    # the maximum number of occupied houses is the number of elements that are equal to the last element of the array, because the only way to reach the maximum number is to have all friends at the house with the largest coordinate\n    count = 1 \n    for i in range(n - 1, 0, -1): \n        if x[i] != x[-1]: \n            break \n        count += 1 \n    maximum += count - 1 \n\n    # print the minimum and maximum result\n    print(minimum, maximum) \n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = x[0]\n    maximum = x[-1]\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if x[i] != x[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if x[i] != x[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result.\n    print(minimum, maximum)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Sort the input array\n    x.sort()\n\n    # Initialize the minimum and maximum result to be the sum of the first and last elements of the array\n    minimum = x[0]\n    maximum = x[-1]\n\n    # Initialize the count variable to be the number of elements with the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if x[i] != x[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if x[i] != x[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Sort the input array\n    a.sort()\n\n    # Initialize the minimum and maximum result to be the sum of\n    # the first and last elements of the array\n    minimum = a[0]\n    maximum = a[-1]\n\n    # Initialize the count variable to be the number of elements with\n    # the same value as the first element of the array\n    count = 1\n    for i in range(1, n):\n        if a[i] != a[0]:\n            break\n        count += 1\n\n    # The minimum number of occupied houses is the number of elements\n    # that are equal to the first element of the array, because the\n    # only way to reach the minimum number is to have all friends at\n    # the house with the smallest coordinate\n    minimum += count - 1\n\n    # The maximum number of occupied houses is the number of elements\n    # that are equal to the last element of the array, because the\n    # only way to reach the maximum number is to have all friends at\n    # the house with the largest coordinate\n    count = 1\n    for i in range(n - 1, 0, -1):\n        if a[i] != a[-1]:\n            break\n        count += 1\n    maximum += count - 1\n\n    # Print the minimum and maximum result\n    print(minimum, maximum)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 19:14:38.310455 size on output set 8
