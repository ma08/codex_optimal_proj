["\n\nimport math\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n", "var fs = require('fs');\n\nvar contents = fs.readFileSync('file.txt', 'utf8');\nconsole.log(contents);\n\nfs.writeFileSync('file.txt', 'Hello World');\n\nvar contents = fs.readFileSync('file.txt', 'utf8');\nconsole.log(contents);\n", "// file.js\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar file = {\n  /**\n   * \u521b\u5efa\u6587\u4ef6\u5939\n   * @param  {String} dirname \u76ee\u5f55\n   * @return {Boolean}        \u521b\u5efa\u7ed3\u679c\n   */\n  mkdirsSync: function(dirname) {\n    if (fs.existsSync(dirname)) {\n      return true;\n    } else {\n      if (file.mkdirsSync(path.dirname(dirname))) {\n        fs.mkdirSync(dirname);\n        return true;\n      }\n    }\n  },\n  /**\n   * \u521b\u5efa\u6587\u4ef6\u5939\n   * @param  {String}   dirname     \u76ee\u5f55\n   * @param  {Function} callback    \u56de\u8c03\n   */\n  mkdirs: function(dirname, callback) {\n    fs.exists(dirname, function(exists) {\n      if (exists) {\n        callback();\n      } else {\n        //\u5c1d\u8bd5\u521b\u5efa\u7236\u76ee\u5f55\uff0c\u7136\u540e\u518d\u521b\u5efa\u5f53\u524d\u76ee\u5f55\n        file.mkdirs(path.dirname(dirname), function() {\n          fs.mkdir(dirname, callback);\n          console.log('\u5728' + path.dirname(dirname) + '\u76ee\u5f55\u521b\u5efa\u597d' + dirname + '\u76ee\u5f55');\n        });\n      }\n    });\n  },\n  /**\n   * \u521b\u5efa\u6587\u4ef6\n   * @param  {String}   filename \u6587\u4ef6\u540d\n   * @param  {Function} callback \u56de\u8c03\n   */\n  createFile: function(filename, callback) {\n    fs.open(filename, 'w', function(err, fd) {\n      if (err) {\n        throw 'could not open file: ' + err;\n      }\n      //\u6587\u4ef6\u521b\u5efa\u6210\u529f\u540e\uff0c\u5199\u5165\u5185\u5bb9\uff0c\u5982\u679c\u6587\u4ef6\u539f\u6765\u5b58\u5728\uff0c\u5219\u4f1a\u88ab\u622a\u65ad\u4e3a\u96f6\u957f\u5ea6\n      fs.write(fd, '', 0, 'utf8', function(err, written, buffer) {});\n      callback();\n    });\n  },\n  /**\n   * \u5220\u9664\u6587\u4ef6\n   * @param  {String}   filename \u6587\u4ef6\u540d\n   * @param  {Function} callback \u56de\u8c03\n   */\n  deleteFile: function(filename, callback) {\n    fs.unlink(filename, function(err) {\n      if (err) {\n        throw err;\n      }\n      callback();\n    });\n  },\n  /**\n   * \u5199\u5165\u6587\u4ef6\n   * @param  {String}   filename \u6587\u4ef6\u540d\n   * @param  {String}   content  \u5185\u5bb9\n   * @param  {Function} callback \u56de\u8c03\n   */\n  writeFile: function(filename, content, callback) {\n    fs.writeFile(filename, content, function(err) {\n      if (err) throw err;\n      callback();\n    });\n  },\n  /**\n   * \u8ffd\u52a0\u6587\u4ef6\n   * @param  {String}   filename \u6587\u4ef6\u540d\n   * @param  {String}   content  \u5185\u5bb9\n   * @param  {Function} callback \u56de\u8c03\n   */\n  appendFile: function(filename, content, callback) {\n    fs.appendFile(filename, content, function(err) {\n      if (err) throw err;\n      callback();\n    });\n  },\n  /**\n   * \u8bfb\u53d6\u6587\u4ef6\n   * @param  {String}   filename \u6587\u4ef6\u540d\n   * @param  {Function} callback \u56de\u8c03\n   */\n  readFile: function(filename, callback) {\n    fs.readFile(filename, 'utf-8', function(err, data) {\n      if (err) throw err;\n      callback(data);\n    });\n  },\n  /**\n   * \u8bfb\u53d6\u6587\u4ef6\n   * @param  {String}   filename \u6587\u4ef6\u540d\n   * @param  {Function} callback \u56de\u8c03\n   */\n  readImg: function(filename, callback) {\n    fs.readFile(filename, function(err, data) {\n      if (err) throw err;\n      callback(data);\n    });\n  },\n  /**\n   * \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\n   * @param  {String}   filename \u6587\u4ef6\u540d\n   * @param  {Function} callback \u56de\u8c03\n   */\n  statFile: function(filename, callback) {\n    fs.stat(filename, function(err, stat) {\n      if (err) throw err;\n      callback(stat);\n    });\n  },\n  /**\n   * \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\n   * @param  {String}   filename \u6587\u4ef6\u540d\n   * @param  {Function} callback \u56de\u8c03\n   */\n  isFile: function(filename, callback) {\n    file.statFile(filename, function(stat) {\n      callback(stat.isFile());\n    });\n  },\n  /**\n   * \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\n   * @param  {String}   filename \u6587\u4ef6\u540d\n   * @param  {Function} callback \u56de\u8c03\n   */\n  isDir: function(filename, callback) {\n    file.statFile(filename, function(stat) {\n      callback(stat.isDirectory());\n    });\n  },\n  /**\n   * \u904d\u5386\u76ee\u5f55\n   * @param  {String}   pathname  \u8def\u5f84\n   * @param  {Function} callback  \u56de\u8c03\n   */\n  readDir: function(pathname, callback) {\n    fs.readdir(pathname, function(err, files) {\n      if (err) throw err;\n      callback(files);\n    });\n  }\n};\n\nmodule.exports = file;\n", "\nimport math\nimport sys\n\ninput_list = sys.stdin.read().split()\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n", "import math\nimport sys\n\ninput_list = sys.stdin.read().split()\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n", "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"file.go\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tstat, err := file.Stat()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tbs := make([]byte, stat.Size())\n\t_, err = file.Read(bs)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tstr := string(bs)\n\tfmt.Println(str)\n\n\tbs, err = ioutil.ReadFile(\"file.go\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tstr = string(bs)\n\tfmt.Println(str)\n}\n", "\nimport math\nimport sys\n\ninput_list = sys.stdin.read().split()\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 and m % 3:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    if len(sys.argv) > 1:\n        file_name = sys.argv[1]\n        print(file_name)\n    else:\n        print(\"No file name\")\n\nif __name__ == '__main__':\n    main()\n", "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n", "\nsteps = 0\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n", "var fs = require('fs');\n\nvar file = fs.createReadStream('file.txt');\n\nfile.on('readable', function () {\n  var chunk = null;\n  while (null !== (chunk = file.read())) {\n    console.log(chunk.toString());\n  }\n});\n\nfile.on('end', function () {\n  console.log('done');\n});\n", "var fs = require('fs');\n\nfunction read(file, callback) {\n  fs.readFile(file, 'utf8', function(err, data) {\n    if (err) {\n      console.log(err);\n    }\n    callback(data);\n  });\n}\n\nfunction write(file, data, callback) {\n  fs.writeFile(file, data, function(err) {\n    if (err) {\n      console.log(err);\n    }\n    callback();\n  });\n}\n\nmodule.exports = {\n  read: read,\n  write: write\n};\n", "\nimport math\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n", "\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nprint(a)\n", "#!/bin/bash\n\n# This script is used to fix syntax errors in the files.\n#\n# Author: Yuxiang Chen\n# Date: 02/26/2019\n\n# Fix syntax errors in the files.\nfor file in \"$@\"\ndo\n    # Check whether the file exists.\n    if [ ! -f \"$file\" ]; then\n        echo \"$file does not exist.\"\n        continue\n    fi\n\n    # Check whether the file is empty.\n    if [ ! -s \"$file\" ]; then\n        echo \"$file is empty.\"\n        continue\n    fi\n\n    # Check whether the file is a text file.\n    if file \"$file\" | grep -q \"text\"; then\n        echo \"$file is a text file.\"\n    else\n        echo \"$file is not a text file.\"\n        continue\n    fi\n\n    # Check whether the file has syntax errors.\n    if grep -q \"^$\" \"$file\"; then\n        echo \"$file has syntax errors.\"\n        sed -i '/^$/d' \"$file\"\n        echo \"Syntax errors in $file are fixed.\"\n    else\n        echo \"$file has no syntax errors.\"\n    fi\ndone\n", "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n", "\nimport math\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n", "import os\nimport shutil\n\ndef main():\n    print(\"Starting directory is: {}\".format(os.getcwd()))\n\n    os.chdir('Lyrics/Christmas')\n    #print(os.listdir('.'))\n\n    for filename in os.listdir('.'):\n        if os.path.isdir(filename):\n            continue\n\n        new_name = get_fixed_filename(filename)\n        print(\"Renaming {} to {}\".format(filename, new_name))\n\n        # Option 1: rename file to new name - in place\n        #os.rename(filename, new_name)\n\n        # Option 2: move file to new place, with new name\n        #shutil.move(filename, 'temp/' + new_name)\n\n\ndef get_fixed_filename(filename):\n    new_name = filename.replace(\" \", \"_\").replace(\".TXT\", \".txt\")\n    return new_name\n\n\ndef demo_walk():\n    os.chdir('Lyrics')\n    for directory_name, subdirectories, filenames in os.walk('.'):\n        print(\"Directory:\", directory_name)\n        print(\"\\tcontains subdirectories:\", subdirectories)\n        print(\"\\tand files:\", filenames)\n        print(\"(Current working directory is: {})\".format(os.getcwd()))\n\n        for filename in filenames:\n            full_name = os.path.join(directory_name, filename)\n            new_name = os.path.join(directory_name, get_fixed_filename(filename))\n            os.rename(full_name, new_name)\n\n\nmain()\n#demo_walk()\n", "\nprint(n, m)\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\nprint(n, m)\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\nprint(n, m)\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\nprint(n, m)\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n", "\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n"]