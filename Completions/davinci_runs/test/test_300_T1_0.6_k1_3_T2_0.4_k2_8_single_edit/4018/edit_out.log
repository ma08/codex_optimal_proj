2022-04-20 16:40:53.926108 num operations 1
2022-04-20 16:40:53.926128 size on input set 1
2022-04-20 16:40:53.926295 using api key sunu
2022-04-20 16:40:59.940089 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef solve(n, k, s, t):\n    return -1\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, k, s):\n    return -1\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef solve(n, k, s, a):\n    return -1\n"
    },
    {
      "index": 3,
      "text": "\n\n\ndef solve(n, k, s, t):\n    return -1\n"
    },
    {
      "index": 4,
      "text": "\ndef solve(n, k, s):\n    return -1\n"
    },
    {
      "index": 5,
      "text": "\ndef solve(n, k, s):\n    return 1\n"
    },
    {
      "index": 6,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef solve(n, k, s):\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n    return -1\n"
    },
    {
      "index": 7,
      "text": "\ndef solve(n, k, s):\n    return -1\n"
    }
  ],
  "created": 1650472854,
  "object": "edit"
}
2022-04-20 16:40:59.940410 fix syntax errors 8 ['\n\n\ndef solve(n, k, s, t):\n    return -1\n', '\ndef solve(n, k, s):\n    return -1\n', '\n\n\ndef solve(n, k, s, a):\n    return -1\n', '\n\n\ndef solve(n, k, s, t):\n    return -1\n', '\ndef solve(n, k, s):\n    return -1\n', '\ndef solve(n, k, s):\n    return 1\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef solve(n, k, s):\n\nif __name__ == "__main__":\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n    return -1\n', '\ndef solve(n, k, s):\n    return -1\n']
2022-04-20 16:40:59.940443 size on output set 5
2022-04-20 16:40:59.940456 num operations 1
2022-04-20 16:40:59.940461 size on input set 1
2022-04-20 16:40:59.940619 using api key kouti
2022-04-20 16:41:17.516551 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # read in the number of characters in the string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the entire string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is less than k and we have reached the end of the string, then it is impossible to generate k unique subsequences\n    if sub_num < k:\n        print(-1) \n    # if the number of subsequences generated is equal to k and we have reached the end of the string, then we have generated k unique subsequences\n    elif sub_num == k:\n        print(cost) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        if sub_num < k:\n            # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n            # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n        else:\n            # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n            print(-1)\n            break\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    # read in the number of characters in the string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the entire string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost; the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences, so print the cost\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences, so print -1\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    elif sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    # read in the number of test cases\n    t = int(input())\n    # loop through the test cases\n    for i in range(t):\n        # read in the number of characters in string and the number of subsequences to generate\n        n, k = [int(x) for x in input().split()]\n        # read in the string\n        s = input()\n        # set the initial cost to 0\n        cost = 0\n        # set the number of subsequences generated to 1, since the total string is a subsequence\n        sub_num = 1\n        # loop through the string\n        for i in s:\n            # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n            if sub_num > k:\n                print(-1)\n                break\n            # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n            # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n            else:\n                cost += n - sub_num\n                # increment the number of subsequences by 1\n                sub_num += 1\n        # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n        if sub_num == k:\n            print(cost)\n        # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n        elif sub_num < k:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650472859,
  "object": "edit"
}
2022-04-20 16:41:17.517055 fix syntax errors 8 ['\n\ndef main():\n    # read in the number of characters in the string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the entire string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is less than k and we have reached the end of the string, then it is impossible to generate k unique subsequences\n    if sub_num < k:\n        print(-1) \n    # if the number of subsequences generated is equal to k and we have reached the end of the string, then we have generated k unique subsequences\n    elif sub_num == k:\n        print(cost) \n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        if sub_num < k:\n            # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n            # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n        else:\n            # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n            print(-1)\n            break\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read in the number of characters in the string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the entire string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost; the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences, so print the cost\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences, so print -1\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    elif sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read in the number of test cases\n    t = int(input())\n    # loop through the test cases\n    for i in range(t):\n        # read in the number of characters in string and the number of subsequences to generate\n        n, k = [int(x) for x in input().split()]\n        # read in the string\n        s = input()\n        # set the initial cost to 0\n        cost = 0\n        # set the number of subsequences generated to 1, since the total string is a subsequence\n        sub_num = 1\n        # loop through the string\n        for i in s:\n            # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n            if sub_num > k:\n                print(-1)\n                break\n            # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n            # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n            else:\n                cost += n - sub_num\n                # increment the number of subsequences by 1\n                sub_num += 1\n        # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n        if sub_num == k:\n            print(cost)\n        # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n        elif sub_num < k:\n            print(-1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 16:41:17.517194 size on output set 8
2022-04-20 16:41:17.517209 num operations 1
2022-04-20 16:41:17.517215 size on input set 1
2022-04-20 16:41:17.517380 using api key kouti
2022-04-20 16:41:26.395549 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\nprint dp[-1][-1]\n"
    },
    {
      "index": 1,
      "text": "\n\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i and dp[i - 1][j - 1] != 0:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1]) if dp[i][j] != 0 else i - 1 + dp[i - 1][j - 1]\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j]) if dp[i][j] != 0 else dp[i - 1][j]\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n"
    },
    {
      "index": 2,
      "text": "\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[n][k] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n"
    },
    {
      "index": 3,
      "text": "\n\nn, k = map(int, input().split())\ns = input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print(dp[-1][-1])\nelse:\n    print(-1)\n"
    },
    {
      "index": 4,
      "text": "\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i and j <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - j][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0 and dp[-1][-1] != 10 ** 10:\n    print dp[-1][-1]\nelse:\n    print -1\n"
    },
    {
      "index": 5,
      "text": "\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n"
    },
    {
      "index": 6,
      "text": "\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + i - 1)\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n"
    },
    {
      "index": 7,
      "text": "\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i: \n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n"
    }
  ],
  "created": 1650472877,
  "object": "edit"
}
2022-04-20 16:41:26.395957 fix syntax errors 8 ['\n\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\nprint dp[-1][-1]\n', '\n\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i and dp[i - 1][j - 1] != 0:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1]) if dp[i][j] != 0 else i - 1 + dp[i - 1][j - 1]\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j]) if dp[i][j] != 0 else dp[i - 1][j]\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n', '\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[n][k] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n', '\n\nn, k = map(int, input().split())\ns = input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print(dp[-1][-1])\nelse:\n    print(-1)\n', '\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i and j <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - j][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0 and dp[-1][-1] != 10 ** 10:\n    print dp[-1][-1]\nelse:\n    print -1\n', '\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n', '\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + i - 1)\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n', '\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i: \n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1\n']
2022-04-20 16:41:26.396091 size on output set 8
