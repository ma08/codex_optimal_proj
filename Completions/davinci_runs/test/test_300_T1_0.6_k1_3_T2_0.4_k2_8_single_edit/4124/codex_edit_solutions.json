["\ndef solve(s, t):\n    if s == t:\n        return 0\n    elif len(s) < len(t):\n        return len(t) - len(s)\n    else:\n        return len(s) - len(t)\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))\n", "#!/usr/bin/env python\n\n#\n#  Copyright (C) 2011-2014, 2016, 2018  Smithsonian Astrophysical Observatory\n#\n#\n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License along\n#  with this program; if not, write to the Free Software Foundation, Inc.,\n#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n\n\nimport os\nimport sys\nimport glob\nimport shutil\nimport fnmatch\n\nfrom sherpa.utils import SherpaTestCase\nfrom sherpa.utils import SherpaTest\n\n\nclass test_file(SherpaTestCase):\n\n    def setUp(self):\n        self.datadir = os.path.join(os.path.dirname(__file__), 'tst')\n        self.model = os.path.join(self.datadir, 'model.py')\n        self.model_c = os.path.join(self.datadir, 'model.so')\n        self.model_c_dir = os.path.join(self.datadir, 'model_dir')\n        self.model_c_dir_file = os.path.join(self.model_c_dir, 'model.so')\n        self.model_c_dir_file_py = os.path.join(self.model_c_dir, 'model.py')\n\n    def tearDown(self):\n        for f in glob.glob(os.path.join(self.datadir, '*.so')):\n            os.remove(f)\n        if os.path.exists(self.model_c_dir):\n            shutil.rmtree(self.model_c_dir)\n\n    @SherpaTest\n    def test_load_model_py(self):\n        self.assertFalse(os.path.exists(self.model_c))\n        self.assertFalse(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.assertRaises(IOError, self.load_model, self.model_c)\n        self.assertRaises(IOError, self.load_model, self.model_c_dir)\n\n        self.load_model(self.model)\n        self.assertFalse(os.path.exists(self.model_c))\n        self.assertFalse(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.load_model(self.model_c_dir)\n        self.assertFalse(os.path.exists(self.model_c))\n        self.assertTrue(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.load_model(self.model_c_dir_file)\n        self.assertFalse(os.path.exists(self.model_c))\n        self.assertTrue(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.load_model(self.model_c_dir_file_py)\n        self.assertFalse(os.path.exists(self.model_c))\n        self.assertTrue(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.load_model(self.model_c)\n        self.assertTrue(os.path.exists(self.model_c))\n        self.assertTrue(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n    @SherpaTest\n    def test_load_model_py_c(self):\n        self.assertFalse(os.path.exists(self.model_c))\n        self.assertFalse(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.load_model(self.model_c)\n        self.assertTrue(os.path.exists(self.model_c))\n        self.assertFalse(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.load_model(self.model_c_dir)\n        self.assertTrue(os.path.exists(self.model_c))\n        self.assertTrue(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.load_model(self.model_c_dir_file)\n        self.assertTrue(os.path.exists(self.model_c))\n        self.assertTrue(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.load_model(self.model_c_dir_file_py)\n        self.assertTrue(os.path.exists(self.model_c))\n        self.assertTrue(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\n        self.load_model(self.model)\n        self.assertTrue(os.path.exists(self.model_c))\n        self.assertTrue(os.path.exists(self.model_c_dir_file))\n        self.assertFalse(os.path.exists(self.model_c_dir_file_py))\n\nif __name__ == '__main__':\n\n    import sys\n    if len(sys.argv) > 1:\n        SherpaTest(sys.argv[1:]).test()\n    else:\n        SherpaTest().test()\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main(int argc, char *argv[])\n{\n\tint fd, fd2;\n\tchar buf[1024];\n\tssize_t size;\n\n\tif (argc < 2) {\n\t\tfprintf(stderr, \"Usage: %s <file>\\n\", argv[0]);\n\t\texit(1);\n\t}\n\n\tfd = open(argv[1], O_RDONLY);\n\tif (fd < 0) {\n\t\tfprintf(stderr, \"open() failed: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\n\tfd2 = dup(fd);\n\tif (fd2 < 0) {\n\t\tfprintf(stderr, \"dup() failed: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\n\tsize = read(fd, buf, sizeof(buf));\n\tif (size < 0) {\n\t\tfprintf(stderr, \"read() failed: %s\\n\", strerror(errno));\n\t\texit(1);\n\t}\n\n\tprintf(\"fd = %d\\n\", fd);\n\tprintf(\"fd2 = %d\\n\", fd2);\n\n\tfprintf(stdout, \"%.*s\", (int)size, buf);\n\treturn 0;\n}\n", "\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[n][m]\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))\n", "const fs = require('fs');\n\nfs.writeFileSync('notes.txt', 'My name is Akshay.');\nfs.appendFileSync('notes.txt', '\\nI am a web developer.');\n", "\n\ndef solve(s, t):\n    if s == t or len(s) == len(t):\n        return 0\n    elif len(s) < len(t):\n        return len(t) - len(s)\n    else:\n        return len(s) - len(t)\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))\n", "\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[n][m]\n\ns = input()\nt = input()\nprint(solve(s, t))\n", "\ndef solve(s, t):\n    if s == t:\n        return 0\n    else:\n        if len(s) < len(t):\n            return len(t) - len(s)\n        else:\n            return len(s) - len(t)\n\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))\n", "\n\ndef solve(s, t):\n    if s == t:\n        return 0\n    else:\n        if len(s) < len(t):\n            return len(t) - len(s)\n        else:\n            return len(s) - len(t)\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))\n", "\ndef solve(s, t):\n    return len(s) - len(t)\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))\n", "\n\ndef solve(s, t):\n    if s == t:\n        return 0\n    elif len(s) < len(t):\n        return len(t) - len(s)\n    else:\n        return len(s) - len(t)\n\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))\n", "{\n\t\"cmd\": [\"/usr/local/bin/python3\", \"-u\", \"$file\"],\n}\n\ndef print_models(unprinted_designs, completed_models):\n\t\"\"\"\n\tSimulate printing each design, until none are left.\n\tMove each design to completed_models after printing.\n\t\"\"\"\n\twhile unprinted_designs:\n\t\tcurrent_design = unprinted_designs.pop()\n\n\t\t# Simulate creating a 3D print from the design.\n\t\tprint(\"Printing model: \" + current_design)\n\t\tcompleted_models.append(current_design)\n\ndef show_completed_models(completed_models):\n\t\"\"\"Show all the models that were printed.\"\"\"\n\tprint(\"\\nThe following models have been printed:\")\n\tfor completed_model in completed_models:\n\t\tprint(completed_model)\n\nunprinted_designs = ['iphone case', 'robot pendant', 'dodecahedron']\ncompleted_models = []\n\nprint_models(unprinted_designs, completed_models)\nshow_completed_models(completed_models)\n", "var fs = require('fs');\n\nvar readStream = fs.createReadStream('file.txt');\n\nreadStream.on('open', function () {\n  console.log('The file is open');\n});\n", "import os\nimport csv\n\n# Path to collect data from the Resources folder\nbudget_csv = os.path.join('..', 'Resources', 'budget_data.csv')\n\n# Read in the CSV file\nwith open(budget_csv, 'r') as csvfile:\n\n    # Split the data on commas\n    csvreader = csv.reader(csvfile, delimiter=',')\n\n    header = next(csvreader)\n    #print(f\"CSV Header: {header}\")\n\n    month_count = 0\n    total_profit = 0\n    profit_list = []\n    month_list = []\n    change_list = []\n\n    # Loop through the data\n    for row in csvreader:\n        month_count = month_count + 1\n        total_profit = total_profit + int(row[1])\n        profit_list.append(row[1])\n        month_list.append(row[0])\n\n    for i in range(1,len(profit_list)):\n        change_list.append(int(profit_list[i]) - int(profit_list[i-1]))\n        avg_change = sum(change_list)/len(change_list)\n        max_change = max(change_list)\n        min_change = min(change_list)\n        max_month = month_list[change_list.index(max(change_list)) + 1]\n        min_month = month_list[change_list.index(min(change_list)) + 1]\n\n    print(\"Financial Analysis\")\n    print(\"-------------------------\")\n    print(\"Total Months: \" + str(month_count))\n    print(\"Total: $\" + str(total_profit))\n    print(\"Average Change: $\" + str(round(avg_change,2)))\n    print(\"Greatest Increase in Profits: \" + str(max_month) + \" ($\" + str(max_change) + \")\")\n    print(\"Greatest Decrease in Profits: \" + str(min_month) + \" ($\" + str(min_change) + \")\")\n\nwith open(\"financial_analysis.txt\", \"w\") as text_file:\n    print(\"Financial Analysis\", file=text_file)\n    print(\"-------------------------\", file=text_file)\n    print(\"Total Months: \" + str(month_count), file=text_file)\n    print(\"Total: $\" + str(total_profit), file=text_file)\n    print(\"Average Change: $\" + str(round(avg_change,2)), file=text_file)\n    print(\"Greatest Increase in Profits: \" + str(max_month) + \" ($\" + str(max_change) + \")\", file=text_file)\n    print(\"Greatest Decrease in Profits: \" + str(min_month) + \" ($\" + str(min_change) + \")\", file=text_file)\n", "const fs = require('fs');\n\nconst readFile = (filename, enc) => {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filename, enc, (err, data) => {\n            if (err) reject(err);\n            resolve(data);\n        });\n    });\n};\n\nconst writeFile = (filename, data, enc) => {\n    return new Promise((resolve, reject) => {\n        fs.writeFile(filename, data, enc, (err) => {\n            if (err) reject(err);\n            resolve();\n        });\n    });\n};\n\nmodule.exports = {\n    readFile,\n    writeFile\n};\n", "\n\ndef solve(s):\n    return s\n\nif __name__ == '__main__':\n    s = input()\n    print(solve(s))\n", "<?php\n\n$file = fopen(\"file.txt\", \"r\");\n\n$content = fread($file, filesize(\"file.txt\"));\n\necho $content;\n\nfclose($file);\n\n\n?>\n", "\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[n][m]\n\n\ndef main():\n    s = input()\n    t = input()\n    print(solve(s, t))\n\n\nif __name__ == \"__main__\":\n    main()\n"]