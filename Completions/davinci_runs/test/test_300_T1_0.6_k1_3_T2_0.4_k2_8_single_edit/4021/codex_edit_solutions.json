["\n\nimport math\n\ninput_file = open(\"input.txt\", \"r\")\ninput = int(input_file.readline())\n\nprint(math.floor(math.log(input, 2)))\n", "\n#1. My Solution\ndef solve(a):\n    return int(((a-1)/2) + 1)\n\n#2. Other Solution\ndef solve(a):\n    return (a+1)/2\n\n#3. Other Solution\ndef solve(a):\n    return (a+1)/2\n\n#4. Other Solution\nsolve=lambda a:(a+1)/2\n", "\na = input()\nb = input()\nc = input()\nprint(a + b + c)\n", "\nimport math\n\ninputFile = open(\"input.txt\", \"r\")\ninput = int(inputFile.readline())\n\nprint(math.floor(math.log(input, 2)))\n", "\n\nimport math\n\ninput = open(\"input.txt\", \"r\")\ninput = int(input.readline())\n\nprint(math.floor(math.log(input, 2)) + 1)\n", "\n\nimport math\n\ninput = open(\"input.txt\", \"r\")\ninput = int(input.readline())\noutput = math.floor(math.log(input, 2))\noutput = str(output)\noutput = open(\"output.txt\", \"w\")\noutput.write(output)\n", "\n# 1. My Solution\ndef solve(a):\n    return int(((a-1)/2) + 1)\n\n\n# 2. Other Solution\ndef solve(a):\n    return (a+1)/2\n\n\n# 3. Other Solution\ndef solve(a):\n    return (a+1)/2\n\n\n# 4. Other Solution\nsolve=lambda a:(a+1)/2\n", "\n\n# 1. My Solution\ndef solve(a):\n    return int(((a-1)/2) + 1)\n\n# 2. Other Solution\ndef solve(a):\n    return (a+1)/2\n\n# 3. Other Solution\ndef solve(a):\n    return (a+1)/2\n\n# 4. Other Solution\nsolve=lambda a:(a+1)/2\n", "\n\na = int(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e: '))\n\nx = 1\n\nif a == 1:\n    print(1)\nelse:\n    for i in range(a):\n        if 2**i <= a and a < 2**(i + 1):\n            x = i + 1\n\nprint(x)\n", "\n\na = int(input())\n\nx = 1\n\nif a == 1:\n    print(1)\nelse:\n    for i in range(a + 1):\n        if 2**i <= a and a < 2**(i + 1):\n            x = i + 1\n\nprint(x)\n", "\na = int(input())\nx = 1\n\nif a == 1:\n    print(1)\nelse:\n    for i in range(a):\n        if 2**i <= a and a < 2**(i + 1):\n            x = i + 1\n\nprint(x)\n", "\na = int(input())\nx = 1\n\nif a == 1:\n    print(1)\nelse:\n    for i in range(a):\n        if 2**i <= a and a < 2**(i + 1):\n            x = i + 1\nprint(x)\n", "\nprint(\"Hello world\")\n", "\n\n# import math\n\n# input = open(\"input.txt\", \"r\")\n# input = int(input.readline())\n\n# print(math.floor(math.log(input, 2)))\n\n# def fib(n):\n#     a, b = 0, 1\n#     for _ in range(n):\n#         a, b = b, a + b\n#     return a\n\n# print(fib(10))\n\n# def fib_rec(n):\n#     if n == 0:\n#         return 0\n#     elif n == 1:\n#         return 1\n#     else:\n#         return fib_rec(n - 1) + fib_rec(n - 2)\n\n# print(fib_rec(20))\n\n# def fib_memo(n, memo):\n#     if memo[n] is not None:\n#         return memo[n]\n#     if n == 1 or n == 2:\n#         result = 1\n#     else:\n#         result = fib_memo(n - 1, memo) + fib_memo(n - 2, memo)\n#     memo[n] = result\n#     return result\n\n# def fib_memo_wrapper(n):\n#     memo = [None] * (n + 1)\n#     return fib_memo(n, memo)\n\n# print(fib_memo_wrapper(20))\n\n# def fib_bottom_up(n):\n#     if n == 1 or n == 2:\n#         return 1\n#     bottom_up = [None] * (n + 1)\n#     bottom_up[1] = 1\n#     bottom_up[2] = 1\n#     for i in range(3, n + 1):\n#         bottom_up[i] = bottom_up[i - 1] + bottom_up[i - 2]\n#     return bottom_up[n]\n\n# print(fib_bottom_up(20))\n\n# def fib_bottom_up_space_efficient(n):\n#     if n == 1 or n == 2:\n#         return 1\n#     bottom_up_2 = 1\n#     bottom_up_1 = 1\n#     for _ in range(3, n + 1):\n#         bottom_up = bottom_up_1 + bottom_up_2\n#         bottom_up_2 = bottom_up_1\n#         bottom_up_1 = bottom_up\n#     return bottom_up\n\n# print(fib_bottom_up_space_efficient(20))\n\n# def fib_bottom_up_space_efficient_2(n):\n#     if n == 1 or n == 2:\n#         return 1\n#     bottom_up_2 = 1\n#     bottom_up_1 = 1\n#     for _ in range(3, n + 1):\n#         bottom_up = bottom_up_1 + bottom_up_2\n#         bottom_up_2 = bottom_up_1\n#         bottom_up_1 = bottom_up\n#     return bottom_up\n\n# print(fib_bottom_up_space_efficient_2(20))\n\n# def fib_bottom_up_space_efficient_3(n):\n#     if n == 1 or n == 2:\n#         return 1\n#     bottom_up_2 = 1\n#     bottom_up_1 = 1\n#     for _ in range(3, n + 1):\n#         bottom_up = bottom_up_1 + bottom_up_2\n#         bottom_up_2 = bottom_up_1\n#         bottom_up_1 = bottom_up\n#     return bottom_up\n\n# print(fib_bottom_up_space_efficient_3(20))\n\n# def fib_bottom_up_space_efficient_4(n):\n#     if n == 1 or n == 2:\n#         return 1\n#     bottom_up_2 = 1\n#     bottom_up_1 = 1\n#     for _ in range(3, n + 1):\n#         bottom_up = bottom_up_1 + bottom_up_2\n#         bottom_up_2 = bottom_up_1\n#         bottom_up_1 = bottom_up\n#     return bottom_up\n\n# print(fib_bottom_up_space_efficient_4(20))\n\n# def fib_bottom_up_space_efficient_5(n):\n#     if n == 1 or n == 2:\n#         return 1\n#     bottom_up_2 = 1\n#     bottom_up_1 = 1\n#     for _ in range(3, n + 1):\n#         bottom_up = bottom_up_1 + bottom_up_2\n#         bottom_up_2 = bottom_up_1\n#         bottom_up_1 = bottom_up\n#     return bottom_up\n\n# print(fib_bottom_up_space_efficient_5(20))\n\n# def fib_bottom_up_space_efficient_6(n):\n#     if n == 1 or n == 2:\n#         return 1\n#     bottom_up_2 = 1\n#     bottom_up_1 = 1\n#     for _ in range(3, n + 1):\n#         bottom_up = bottom_up_1 + bottom_up_2\n#         bottom_up_2 = bottom_up_1\n#         bottom_up_1 = bottom_up\n#     return bottom_up\n\n# print(fib_bottom_up_space_efficient_6(20))\n\n# def fib_bottom_up_space_efficient_7(n):\n#     if n == 1 or n == 2:\n#         return 1\n#     bottom_up_2 = 1\n#     bottom_up_1 = 1\n#     for _ in range(3, n + 1):\n#         bottom_up = bottom_up_1 + bottom_up_2\n#         bottom_up_2 = bottom_up_1\n#         bottom_up_1 = bottom_up\n#     return bottom_up\n\n# print(fib_bottom_up_space_efficient_7(20))\n\n# def fib_bottom_up_space_efficient_8(n):\n#     if n == 1 or n == 2:\n#         return 1\n#     bottom_up_2 = 1\n#     bottom_up_1 = 1\n#     for _ in range(3, n + 1):\n#         bottom_up = bottom_up_1 + bottom_up_2\n#         bottom_up_2 = bottom_up_1\n#         bottom_up_1 = bottom_up\n#     return bottom_up\n\n# print(fib_bottom_up_space_efficient_8(20))\n", "\ndef solution(n):\n    x = 1\n    if n == 1:\n        return 1\n    else:\n        for i in range(n):\n            if 2**i <= n and n < 2**(i + 1):\n                x = i + 1\n    return x\n", "\n\nimport math\n\ninputFile = open(\"input.txt\", \"r\")\ninput = int(inputFile.readline())\n\nprint(math.floor(math.log(input, 2)))\n", "\nimport math\n\ninput = open(\"input.txt\", \"r\").readline()\ninput = int(input)\n\nprint(math.floor(math.log(input, 2)))\n", "\na = input()\nprint(a)\n", "\n#1. My Solution\ndef solve(a):\n    return int(((a - 1) / 2) + 1)\n\n#2. Other Solution\ndef solve(a):\n    return (a + 1) / 2\n\n#3. Other Solution\ndef solve(a):\n    return (a + 1) / 2\n\n#4. Other Solution\nsolve = lambda a: (a + 1) / 2\n", "\nimport math\n\ninput_file = open(\"input.txt\", \"r\")\ninput = int(input_file.readline())\n\nprint(math.floor(math.log(input, 2)))\n"]