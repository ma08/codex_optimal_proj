["import sys\n\nsys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n)) \n", "\n\n#-------------------------------------------------------------------------------\n# Name:        module1\n# Purpose:\n#\n# Author:      v.osipov\n#\n# Created:     16/10/2018\n# Copyright:   (c) v.osipov 2018\n# Licence:     <your licence>\n\n\n#-------------------------------------------------------------------------------\n\ndef main():\n\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nsys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a or k < b:\n        return -1\n    if k < a+b:\n        return k//b\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n", "\n\n#-------------------------------------------------------------------------------\n# Name:        module1\n# Purpose:\n#\n# Author:      v.osipov\n#\n# Created:     16/10/2018\n# Copyright:   (c) v.osipov 2018\n# Licence:     <your licence>\nimport os\nimport sys\n\n#-------------------------------------------------------------------------------\n\ndef main():\n    print(\"Hello, World!\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nsys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n", "\nprint(\"Hello world\")\n", "\n\n#!/usr/bin/python3\n\nimport sys\nimport os\nimport subprocess\n\n#print(sys.argv[1])\n\ndef get_file_extension(file_name):\n    return os.path.splitext(file_name)[1]\n\ndef get_file_name(file_name):\n    return os.path.splitext(file_name)[0]\n\ndef check_file_extension(file_name):\n    if get_file_extension(file_name) == \".mp3\":\n        return True\n    else:\n        return False\n\ndef convert_mp3_to_wav(file_name):\n    command = \"ffmpeg -i \" + file_name + \" \" + get_file_name(file_name) + \".wav\"\n    subprocess.call(command, shell=True)\n\ndef convert_wav_to_mp3(file_name):\n    command = \"ffmpeg -i \" + file_name + \" \" + get_file_name(file_name) + \".mp3\"\n    subprocess.call(command, shell=True)\n\ndef convert_file(file_name):\n    if check_file_extension(file_name):\n        convert_mp3_to_wav(file_name)\n    else:\n        convert_wav_to_mp3(file_name)\n\ndef check_argument(arg):\n    if arg == \"convert\":\n        convert_file(sys.argv[2])\n    else:\n        print(\"Error: wrong argument\")\n\n\ndef main():\n    check_argument(sys.argv[1])\n\nif __name__ == '__main__':\n    if len(sys.argv) == 3:\n        main()\n    else:\n        print(\"Error: wrong number of arguments\")\n", "\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - (n * b))\n", "\n\nimport sys\nimport os\nimport shutil\nimport time\nimport datetime\nimport argparse\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Move files to archive')\n    parser.add_argument('--dir', help='Directory to move files from', required=True)\n    parser.add_argument('--archive', help='Directory to move files to', required=True)\n    parser.add_argument('--days', help='Days to keep files', required=True)\n    return parser.parse_args()\n\ndef get_files(dir, days):\n    files = []\n    for filename in os.listdir(dir):\n        full_path = os.path.join(dir, filename)\n        if os.path.isfile(full_path):\n            file_time = os.path.getmtime(full_path)\n            if (time.time() - file_time) // (24 * 3600) > days:\n                files.append(full_path)\n    return files\n\ndef move_files(files, archive):\n    for file in files:\n        shutil.move(file, archive)\n\ndef main(dir, archive, days):\n    files = get_files(dir, days)\n    move_files(files, archive)\n\nif __name__ == \"__main__\":\n    args = parse_args()\n    main(args.dir, args.archive, int(args.days))\n", "\nimport sys\n\nsys.stdin = open('input.txt')\n\n\ndef play(k, n, a, b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k // b\n    if k < a + b:\n        return 1\n    return (k - a) // b + 1\n\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(min(play(k, n, a, b), n))\n", "\n\n#-------------------------------------------------------------------------------\n# Name:        file\n# Purpose:\n#\n# Author:      v.osipov\n#\n# Created:     16/10/2018\n# Copyright:   (c) v.osipov 2018\n# Licence:     <your licence>\n#-------------------------------------------------------------------------------\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n", "import sys\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n", "import sys\n\nsys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n", "\nimport sys\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n", "\n#\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n", "\n\n\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\n#-------------------------------------------------------------------------------\n# Name:        file\n# Purpose:\n#\n# Author:      v.osipov, k.kuklin\n#\n# Created:     16/10/2018\n# Copyright:   (c) v.osipov, k.kuklin 2018\nimport os\nimport sys\nimport argparse\nimport shutil\nimport time\n\n\ndef create_parser():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--source', nargs='?', default=os.getcwd())\n    parser.add_argument('-d', '--destination', nargs='?', default=os.getcwd())\n    parser.add_argument('-n', '--name', nargs='?', default='')\n    parser.add_argument('-t', '--type', nargs='?', default='file')\n    return parser\n\n\ndef get_list(path):\n    list_of_files = os.listdir(path)\n    return list_of_files\n\n\ndef get_file_list(path):\n    list_of_files = get_list(path)\n    file_list = []\n    for file in list_of_files:\n        if os.path.isfile(os.path.join(path, file)):\n            file_list.append(file)\n    return file_list\n\n\ndef get_dir_list(path):\n    list_of_files = get_list(path)\n    dir_list = []\n    for dir in list_of_files:\n        if os.path.isdir(os.path.join(path, dir)):\n            dir_list.append(dir)\n    return dir_list\n\n\ndef get_file_ext(file_name):\n    return os.path.splitext(file_name)[1]\n\n\ndef get_file_name(file_name):\n    return os.path.splitext(file_name)[0]\n\n\ndef copy_files(source, destination, file_list):\n    for file in file_list:\n        shutil.copy(os.path.join(source, file), destination)\n\n\ndef copy_dirs(source, destination, dir_list):\n    for dir in dir_list:\n        shutil.copytree(os.path.join(source, dir), os.path.join(destination, dir))\n\n\ndef copy_file(source, destination, file_name):\n    shutil.copy(os.path.join(source, file_name), destination)\n\n\ndef copy_dir(source, destination, dir_name):\n    shutil.copytree(os.path.join(source, dir_name), os.path.join(destination, dir_name))\n\n\ndef copy_files_by_ext(source, destination, file_list, ext):\n    for file in file_list:\n        if get_file_ext(file) == ext:\n            copy_file(source, destination, file)\n\n\ndef copy_files_by_name(source, destination, file_list, name):\n    for file in file_list:\n        if get_file_name(file) == name:\n            copy_file(source, destination, file)\n\n\ndef copy_dirs_by_name(source, destination, dir_list, name):\n    for dir in dir_list:\n        if dir == name:\n            copy_dir(source, destination, dir)\n\n\ndef copy_by_ext(source, destination, ext):\n    file_list = get_file_list(source)\n    copy_files_by_ext(source, destination, file_list, ext)\n\n\ndef copy_by_name(source, destination, name):\n    file_list = get_file_list(source)\n    dir_list = get_dir_list(source)\n    copy_files_by_name(source, destination, file_list, name)\n    copy_dirs_by_name(source, destination, dir_list, name)\n\n\ndef copy_all(source, destination):\n    file_list = get_file_list(source)\n    dir_list = get_dir_list(source)\n    copy_files(source, destination, file_list)\n    copy_dirs(source, destination, dir_list)\n\n\ndef copy_file_by_time(source, destination, file_name, time_delta):\n    if time.time() - os.path.getmtime(os.path.join(source, file_name)) < time_delta:\n        copy_file(source, destination, file_name)\n\n\ndef copy_dir_by_time(source, destination, dir_name, time_delta):\n    if time.time() - os.path.getmtime(os.path.join(source, dir_name)) < time_delta:\n        copy_dir(source, destination, dir_name)\n\n\ndef copy_by_time(source, destination, time_delta):\n    file_list = get_file_list(source)\n    dir_list = get_dir_list(source)\n    for file in file_list:\n        copy_file_by_time(source, destination, file, time_delta)\n    for dir in dir_list:\n        copy_dir_by_time(source, destination, dir, time_delta)\n\n# Licence:     <your licence>\n#-------------------------------------------------------------------------------\n\ndef main():\n    parser = create_parser()\n    namespace = parser.parse_args(sys.argv[1:])\n    if namespace.type == 'file':\n        if namespace.name:\n            copy_by_name(namespace.source, namespace.destination, namespace.name)\n        else:\n            copy_all(namespace.source, namespace.destination)\n    elif namespace.type == 'dir':\n        if namespace.name:\n            copy_dirs_by_name(namespace.source, namespace.destination, get_dir_list(namespace.source), namespace.name)\n        else:\n            copy_dirs(namespace.source, namespace.destination, get_dir_list(namespace.source))\n    elif namespace.type == 'ext':\n        copy_by_ext(namespace.source, namespace.destination, namespace.name)\n    elif namespace.type == 'time':\n        copy_by_time(namespace.source, namespace.destination, namespace.name)\n    else:\n        print('Error')\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n", "\nimport sys\n\nsys.stdin = open('input.txt')\n\ndef play(k, n, a, b):\n    if k < a:\n        return k // b\n    if k < a + b:\n        return 1 + (k - a) // b\n    return -1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n"]