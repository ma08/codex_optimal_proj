["\n", "\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\nline = stdin.readline()\nt = line.rstrip()\ni = 0\nj = 0\nres = 0\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\nres += len(s) - len(t) - i\nprint(res)\n", "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - j\n\nprint(res)\n", "s = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if not t:\n        break\n\nif not t:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n", "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(t) - j\n\nprint(res)\n", "\n\nfrom sys import stdin, stdout\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - i\n\nstdout.write(str(res))\n", "\nfrom sys import stdin\nline = stdin.readline()\ns = line.rstrip()\nline = stdin.readline()\nt = line.rstrip()\ni = 0\nj = 0\nres = 0\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\nres += len(s) - len(t) - i\nprint(res)\n", "\ns = raw_input()\nt = raw_input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n", "\n\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n", "\n\ndef find_longest_substring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print find_longest_substring(s, t)\n", "\ns = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt + 1)\nelse:\n    print(len(s))\n", "# coding: utf-8\ns = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n", "\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = input()\n    t = input()\n    print findLongestSubstring(s, t)\n", "\n\ndef findLongestSubstring(s, t): \n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n", "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t)\n\nprint(res)\n", "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0 or len(t) == 0:\n        return 0\n\n    if len(s) == 1:\n        return 0 if s == t else 1\n\n    if len(t) == 1:\n        return 0 if t in s else 1\n\n    left, right = 0, len(s)\n    while right - left > 2:\n        mid = (left + right) // 2\n        if t in s[mid:]:\n            right = mid\n        elif t in s[:mid]:\n            left = mid\n        else:\n            break\n\n    if t in s[right:]:\n        return len(s) - right + 1\n    elif t in s[left:]:\n        return len(s) - left + 1\n    else:\n        return 0\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n", "\ns = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n        if len(t) == 0:\n            break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"]