2022-04-20 17:09:18.389081 num operations 1
2022-04-20 17:09:18.389098 size on input set 1
2022-04-20 17:09:18.389284 using api key jaanu
2022-04-20 17:09:27.704295 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n"
    },
    {
      "index": 1,
      "text": "\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n"
    },
    {
      "index": 2,
      "text": "\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef main():\n    a = list(map(int, input().split()))\n    print(getMaxContest(a))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef getMaxContest(a, n):\n\tdp = [1] * n\n\tfor i in range(n):\n\t\tfor j in range(i):\n\t\t\tif a[i] <= 2 * a[j]:\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1)\n\treturn max(dp)\nn = int(input())\na = list(map(int, input().split()))\nprint(getMaxContest(a, n))\n"
    },
    {
      "index": 4,
      "text": "\n#\n# def getMaxContest(a):\n#     n = len(a)\n#     dp = [1] * n\n#     for i in range(n):\n#         for j in range(i):\n#             if a[i] <= 2 * a[j]:\n#                 dp[i] = max(dp[i], dp[j] + 1)\n#     return max(dp)\n#\n# a = list(map(int, input().split()))\n# print(getMaxContest(a))\n"
    },
    {
      "index": 5,
      "text": "# -*- coding: utf-8 -*-\n\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n"
    },
    {
      "index": 6,
      "text": "\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef main():\n    a = list(map(int, input().split()))\n    print(getMaxContest(a))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n"
    }
  ],
  "created": 1650474558,
  "object": "edit"
}
2022-04-20 17:09:27.704615 fix syntax errors 8 ['\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n', '\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n', "\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef main():\n    a = list(map(int, input().split()))\n    print(getMaxContest(a))\n\nif __name__ == '__main__':\n    main()\n", '\ndef getMaxContest(a, n):\n\tdp = [1] * n\n\tfor i in range(n):\n\t\tfor j in range(i):\n\t\t\tif a[i] <= 2 * a[j]:\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1)\n\treturn max(dp)\nn = int(input())\na = list(map(int, input().split()))\nprint(getMaxContest(a, n))\n', '\n#\n# def getMaxContest(a):\n#     n = len(a)\n#     dp = [1] * n\n#     for i in range(n):\n#         for j in range(i):\n#             if a[i] <= 2 * a[j]:\n#                 dp[i] = max(dp[i], dp[j] + 1)\n#     return max(dp)\n#\n# a = list(map(int, input().split()))\n# print(getMaxContest(a))\n', '# -*- coding: utf-8 -*-\n\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n', "\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef main():\n    a = list(map(int, input().split()))\n    print(getMaxContest(a))\n\n\nif __name__ == '__main__':\n    main()\n", '\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n']
2022-04-20 17:09:27.704665 size on output set 7
2022-04-20 17:09:27.704676 num operations 1
2022-04-20 17:09:27.704682 size on input set 1
2022-04-20 17:09:27.704889 using api key sunu
2022-04-20 17:09:34.146776 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = deque([a[0]])\nfor i in range(1, n):\n    if a[i] <= 2 * q[0]:\n        q[0] = a[i]\n    else:\n        q.appendleft(a[i])\n\nprint(len(q))\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\nprint(len(q))\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n"
    },
    {
      "index": 7,
      "text": "# coding: utf-8\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n"
    }
  ],
  "created": 1650474567,
  "object": "edit"
}
2022-04-20 17:09:34.147097 fix syntax errors 8 ['\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n', '\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = deque([a[0]])\nfor i in range(1, n):\n    if a[i] <= 2 * q[0]:\n        q[0] = a[i]\n    else:\n        q.appendleft(a[i])\n\nprint(len(q))\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\nprint(len(q))\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n', '# coding: utf-8\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n']
2022-04-20 17:09:34.147222 size on output set 4
2022-04-20 17:09:34.147238 num operations 1
2022-04-20 17:09:34.147244 size on input set 1
2022-04-20 17:09:34.147412 using api key derek
2022-04-20 17:09:34.183320 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 17:09:35.685229 using api key derek
2022-04-20 17:09:35.721207 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 17:09:38.724608 using api key jaanu
2022-04-20 17:10:00.873119 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nclass Problem:\n    def __init__(self, name, contest, index):\n        self.name = name\n        self.contest = contest\n        self.index = index\n\n    def __str__(self):\n        return self.name\n\n    def __repr__(self):\n        return self.name\n\n\nclass Contest:\n    def __init__(self, name, problems):\n        self.name = name\n        self.problems = problems\n\n    def __str__(self):\n        return self.name\n\n    def __repr__(self):\n        return self.name\n\n\nclass Problemset:\n    def __init__(self, problems):\n        self.problems = problems\n        self.contests = set()\n        for problem in problems:\n            self.contests.add(problem.contest)\n\n    def __str__(self):\n        return str(self.problems)\n\n    def __repr__(self):\n        return str(self.problems)\n\n\ndef get_max_contest(problemset):\n    pass\n\n# TODO: make solution\n\n\ndef get_problemset():\n    problems = [\n        Problem(\"A\", \"Educational Codeforces Round 1\", 1),\n        Problem(\"B\", \"Educational Codeforces Round 1\", 2),\n        Problem(\"C\", \"Educational Codeforces Round 1\", 3),\n        Problem(\"D\", \"Educational Codeforces Round 1\", 4),\n        Problem(\"E\", \"Educational Codeforces Round 1\", 5),\n        Problem(\"F\", \"Educational Codeforces Round 1\", 6),\n        Problem(\"G\", \"Educational Codeforces Round 1\", 7),\n        Problem(\"H\", \"Educational Codeforces Round 1\", 8),\n        Problem(\"A\", \"Educational Codeforces Round 2\", 1),\n        Problem(\"B\", \"Educational Codeforces Round 2\", 2),\n        Problem(\"C\", \"Educational Codeforces Round 2\", 3),\n        Problem(\"D\", \"Educational Codeforces Round 2\", 4),\n        Problem(\"E\", \"Educational Codeforces Round 2\", 5),\n        Problem(\"F\", \"Educational Codeforces Round 2\", 6),\n        Problem(\"G\", \"Educational Codeforces Round 2\", 7),\n        Problem(\"H\", \"Educational Codeforces Round 2\", 8),\n        Problem(\"A\", \"Educational Codeforces Round 3\", 1),\n        Problem(\"B\", \"Educational Codeforces Round 3\", 2),\n        Problem(\"C\", \"Educational Codeforces Round 3\", 3),\n        Problem(\"D\", \"Educational Codeforces Round 3\", 4),\n        Problem(\"E\", \"Educational Codeforces Round 3\", 5),\n        Problem(\"F\", \"Educational Codeforces Round 3\", 6),\n        Problem(\"G\", \"Educational Codeforces Round 3\", 7),\n        Problem(\"H\", \"Educational Codeforces Round 3\", 8),\n        Problem(\"A\", \"Educational Codeforces Round 4\", 1),\n        Problem(\"B\", \"Educational Codeforces Round 4\", 2),\n        Problem(\"C\", \"Educational Codeforces Round 4\", 3),\n        Problem(\"D\", \"Educational Codeforces Round 4\", 4),\n        Problem(\"E\", \"Educational Codeforces Round 4\", 5),\n        Problem(\"F\", \"Educational Codeforces Round 4\", 6),\n        Problem(\"G\", \"Educational Codeforces Round 4\", 7),\n        Problem(\"H\", \"Educational Codeforces Round 4\", 8),\n    ]\n    return Problemset(problems)\n\n\nif __name__ == \"__main__\":\n    problemset = get_problemset()\n    print(problemset)\n"
    },
    {
      "index": 1,
      "text": "\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    pass\n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
      "index": 2,
      "text": "\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    print(get_max_contest(\"problemset.txt\"))\n\n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
      "index": 3,
      "text": "\n\n# TODO: make solution.\n\n\ndef get_max_contest(problemset):\n    pass\n\n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
      "index": 4,
      "text": "\n\n# TODO: make solution.\n\n\ndef get_max_contest(problemset):\n    pass\n\n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
      "index": 5,
      "text": "\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    print(get_max_contest())\n\n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
      "index": 6,
      "text": "\n\n# TODO: make solution \n\n\ndef get_max_contest(problemset):\n    pass\n\n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
      "index": 7,
      "text": "\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    print(get_max_contest([1, 2, 3]))\n\n\nif __name__ == \"__main__\":\n    pass\n"
    }
  ],
  "created": 1650474578,
  "object": "edit"
}
2022-04-20 17:10:00.873442 fix syntax errors 8 ['\n\n\nclass Problem:\n    def __init__(self, name, contest, index):\n        self.name = name\n        self.contest = contest\n        self.index = index\n\n    def __str__(self):\n        return self.name\n\n    def __repr__(self):\n        return self.name\n\n\nclass Contest:\n    def __init__(self, name, problems):\n        self.name = name\n        self.problems = problems\n\n    def __str__(self):\n        return self.name\n\n    def __repr__(self):\n        return self.name\n\n\nclass Problemset:\n    def __init__(self, problems):\n        self.problems = problems\n        self.contests = set()\n        for problem in problems:\n            self.contests.add(problem.contest)\n\n    def __str__(self):\n        return str(self.problems)\n\n    def __repr__(self):\n        return str(self.problems)\n\n\ndef get_max_contest(problemset):\n    pass\n\n# TODO: make solution\n\n\ndef get_problemset():\n    problems = [\n        Problem("A", "Educational Codeforces Round 1", 1),\n        Problem("B", "Educational Codeforces Round 1", 2),\n        Problem("C", "Educational Codeforces Round 1", 3),\n        Problem("D", "Educational Codeforces Round 1", 4),\n        Problem("E", "Educational Codeforces Round 1", 5),\n        Problem("F", "Educational Codeforces Round 1", 6),\n        Problem("G", "Educational Codeforces Round 1", 7),\n        Problem("H", "Educational Codeforces Round 1", 8),\n        Problem("A", "Educational Codeforces Round 2", 1),\n        Problem("B", "Educational Codeforces Round 2", 2),\n        Problem("C", "Educational Codeforces Round 2", 3),\n        Problem("D", "Educational Codeforces Round 2", 4),\n        Problem("E", "Educational Codeforces Round 2", 5),\n        Problem("F", "Educational Codeforces Round 2", 6),\n        Problem("G", "Educational Codeforces Round 2", 7),\n        Problem("H", "Educational Codeforces Round 2", 8),\n        Problem("A", "Educational Codeforces Round 3", 1),\n        Problem("B", "Educational Codeforces Round 3", 2),\n        Problem("C", "Educational Codeforces Round 3", 3),\n        Problem("D", "Educational Codeforces Round 3", 4),\n        Problem("E", "Educational Codeforces Round 3", 5),\n        Problem("F", "Educational Codeforces Round 3", 6),\n        Problem("G", "Educational Codeforces Round 3", 7),\n        Problem("H", "Educational Codeforces Round 3", 8),\n        Problem("A", "Educational Codeforces Round 4", 1),\n        Problem("B", "Educational Codeforces Round 4", 2),\n        Problem("C", "Educational Codeforces Round 4", 3),\n        Problem("D", "Educational Codeforces Round 4", 4),\n        Problem("E", "Educational Codeforces Round 4", 5),\n        Problem("F", "Educational Codeforces Round 4", 6),\n        Problem("G", "Educational Codeforces Round 4", 7),\n        Problem("H", "Educational Codeforces Round 4", 8),\n    ]\n    return Problemset(problems)\n\n\nif __name__ == "__main__":\n    problemset = get_problemset()\n    print(problemset)\n', '\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    pass\n\nif __name__ == "__main__":\n    pass\n', '\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    print(get_max_contest("problemset.txt"))\n\n\nif __name__ == "__main__":\n    pass\n', '\n\n# TODO: make solution.\n\n\ndef get_max_contest(problemset):\n    pass\n\n\nif __name__ == "__main__":\n    pass\n', '\n\n# TODO: make solution.\n\n\ndef get_max_contest(problemset):\n    pass\n\n\nif __name__ == "__main__":\n    pass\n', '\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    print(get_max_contest())\n\n\nif __name__ == "__main__":\n    pass\n', '\n\n# TODO: make solution \n\n\ndef get_max_contest(problemset):\n    pass\n\n\nif __name__ == "__main__":\n    pass\n', '\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    print(get_max_contest([1, 2, 3]))\n\n\nif __name__ == "__main__":\n    pass\n']
2022-04-20 17:10:00.873573 size on output set 7
