["\n\ndef solver(n, a, b, c):\n    pass\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    print(solver(n, a, b, c))\n", "\ndef main():\n    wall_len = int(input())\n    wall_cond = list(map(int, input().split()))\n    max_h = max(wall_cond)\n    min_h = min(wall_cond)\n    if max_h - min_h > 1:\n        print('NO')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef main():\n    num = int(input())\n    for i in range(num):\n        wall_len = int(input())\n        wall_cond = list(map(int, input().split()))\n        max_h = max(wall_cond)\n        min_h = min(wall_cond)\n        if max_h - min_h > 1:\n            print('NO')\n        else:\n            print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solver(n, k, a):\n    return\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    a = list(map(int, input().split().split()))\n    print(solver(n, k, a))\n", "#!/usr/bin/env python3\n\nimport os\nimport sys\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: {} <file>\".format(sys.argv[0]))\n        sys.exit(1)\n\n    filename = sys.argv[1]\n\n    if not os.path.exists(filename):\n        print(\"{} doesn't exist\".format(filename))\n        sys.exit(1)\n\n    if os.path.isfile(filename):\n        print(\"{} is a file\".format(filename))\n    elif os.path.isdir(filename):\n        print(\"{} is a directory\".format(filename))\n    else:\n        print(\"{} is something else\".format(filename))\n\n    sys.exit(0)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_h = max(arr)\n    min_h = min(arr)\n    if max_h - min_h > 1: print('NO')\n    else:\n        print('YES') \n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\nimport os\n\nprint(os.listdir('./'))\n\nfile = open('test.txt', 'w')\nfile.write('Hello World')\nfile.close()\n\nfile = open('test.txt', 'r')\nprint(file.read())\nfile.close()\n\nfile = open('test.txt', 'a')\nfile.write('\\nHello again')\nfile.close()\n\nfile = open('test.txt', 'r')\nprint(file.read())\nfile.close()\n\nfile = open('test.txt', 'r')\nprint(file.readlines())\nfile.close()\n\nwith open('test.txt', 'r') as file:\n    print(file.read())\n", "#!/usr/bin/env python\nimport sys\nimport os\nimport time\nimport re\nimport argparse\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Process some integers.')\n    parser.add_argument('--file', type=str, help='file name')\n    parser.add_argument('--dir', type=str, help='dir name')\n    parser.add_argument('--regex', type=str, help='regex')\n    parser.add_argument('--replace', type=str, help='replace')\n    return parser.parse_args()\n\ndef main():\n    args = parse_args()\n    if args.file is not None:\n        print(args.file)\n        file = args.file\n        if os.path.exists(file):\n            with open(file, 'r') as f:\n                content = f.read()\n                if args.regex is not None:\n                    regex = args.regex\n                    if args.replace is not None:\n                        replace = args.replace\n                        content = re.sub(regex, replace, content)\n                    else:\n                        content = re.findall(regex, content)\n                print(content)\n    elif args.dir is not None:\n        print(args.dir)\n        dir = args.dir\n        if os.path.exists(dir):\n            for root, dirs, files in os.walk(dir):\n                for file in files:\n                    print(os.path.join(root, file))\n                    with open(os.path.join(root, file), 'r') as f:\n                        content = f.read()\n                        if args.regex is not None:\n                            regex = args.regex\n                            if args.replace is not None:\n                                replace = args.replace\n                                content = re.sub(regex, replace, content)\n                            else:\n                                content = re.findall(regex, content)\n                        print(content)\n        else:\n            print('dir is not exists')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    wall_len = int(input())\n    wall_cond = list(map(int, input().split()))  # list of wall conditions\n    max_h = max(wall_cond)  # max height of wall\n    min_h = min(wall_cond)  # min height of wall\n    if max_h - min_h > 1:  # if diff between max and min is more than 1\n        print('NO')  # then it's not possible to make the wall\n    else:  # if it's possible\n        print('YES')  # then print yes\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    wall_len = int(input())\n    count_1 = 0\n    count_2 = 0\n    count_3 = 0\n    for i in wall_cond:\n        if i == 1:\n            count_1 += 1\n        elif i == 2:\n            count_2 += 1\n        elif i == 3:\n            count_3 += 1\n    if count_1 > 0 and count_2 > 0 and count_3 > 0:\n        print('NO')\n        return\n    wall_cond = list(map(int, input().split()))\n    max_h = max(wall_cond)\n    min_h = min(wall_cond)\n    if max_h - min_h >= 2:\n        print('NO')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    wall_len = int(input())\n    wall_cond = list(map(int, input().split(' ')))\n    max_h = max(wall_cond)\n    min_h = min(wall_cond)\n    if max_h - min_h > 1:\n        print('NO')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "const fs = require('fs');\n\nfunction readFile(filename, callback) {\n  fs.readFile(filename, 'utf8', function(err, data) {\n    if (err) {\n      console.log(err);\n    } else {\n      callback(data);\n    }\n  });\n}\n\nfunction writeFile(filename, data, callback) {\n  fs.writeFile(filename, data, function(err) {\n    if (err) {\n      console.log(err);\n    } else {\n      callback();\n    }\n  });\n}\n\nmodule.exports = {\n  readFile: readFile,\n  writeFile: writeFile\n};\n", "\n\ndef solver(n, m, a):\n    return 0\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    a = [list(map(int, input().split())) for _ in range(m)]\n    print(solver(n, m, a))\n", "var fs = require('fs');\n\nvar file = fs.readFileSync(process.argv[2]);\n\nvar lines = file.toString().split('\\n').length - 1;\n\nconsole.log(lines);\n", "#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    string line;\n    ifstream myfile (\"example.txt\");\n    if (myfile.is_open())\n    {\n        while ( getline (myfile,line) )\n        {\n            cout << line << '\\n';\n        }\n        myfile.close();\n    }\n\n    else cout << \"Unable to open file\";\n\n    return 0;\n}\n", "\n\ndef solver(n, a):\n    max_height = a[0]\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(max_height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "var fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', function(err, data) {\n    if (err) throw err;\n    console.log(data);\n});\n", "\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n"]