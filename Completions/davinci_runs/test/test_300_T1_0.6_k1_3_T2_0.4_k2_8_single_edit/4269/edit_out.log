2022-04-20 19:06:04.478599 num operations 1
2022-04-20 19:06:04.478617 size on input set 1
2022-04-20 19:06:04.478790 using api key sunu
2022-04-20 19:06:11.332025 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    s = input()\n\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[0] == s[2] or s[0] == s[3] or s[1] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]: \n        print(\"Bad\")\n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    s = input()\n\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    s = str(input())\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    s = input()  # input\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\")  # output\n    else:\n        print(\"Good\")  # output\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    s = input(\"\")\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n    \n    \nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650481564,
  "object": "edit"
}
2022-04-20 19:06:11.332374 fix syntax errors 8 ['\ndef main():\n    s = input()\n\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print("Bad")\n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[0] == s[2] or s[0] == s[3] or s[1] == s[3]:\n        print("Bad")\n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5]:\n        print("Bad")\n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = input()\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]: \n        print("Bad")\n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = input()\n\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print("Bad")\n    else:\n        print("Good")\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = str(input())\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print("Bad")\n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = input()  # input\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print("Bad")  # output\n    else:\n        print("Good")  # output\n    \n    \nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = input("")\n    \n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        print("Bad")\n    else:\n        print("Good")\n    \n    \nif __name__ == \'__main__\':\n    main()\n']
2022-04-20 19:06:11.332417 size on output set 8
2022-04-20 19:06:11.332429 num operations 1
2022-04-20 19:06:11.332434 size on input set 1
2022-04-20 19:06:11.332590 using api key sourya
2022-04-20 19:06:20.117638 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read in the 4-digit number\n    s = raw_input()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print(\"Bad\")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Read in the 4-digit number\n    s = input(\"Enter a 4-digit number:\")\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in range(len(s)):\n        # Check if the current digit is the same as the previous digit\n        if s[i] == p:\n            # If so, then print Bad and exit\n            print(\"Bad\")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = s[i]\n    # If no digit is the same as the previous digit, then print Good\n    print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Read in the 4-digit number\n    s = input() # s = \"1234\"\n    # Initialize the previous digit\n    p = 0 # p = 0\n    # Loop through each digit\n    for i in s:\n        print(i) # i = 1, 2, 3, 4\n        print(p) # p = 0, 1, 2, 3\n        # Check if the current digit is the same as the previous digit\n            print(\"Bad\")\n        if i == p:\n            # If so, then print Bad and exit\n            return\n        print(\"Good\")\n        # Otherwise, set the previous digit to the current digit\n        p = i\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    s = input()\n    p = 0\n    for i in s:\n        if i == p:\n            print(\"Bad\")\n            return\n        p = i\n    print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    # Read in the 4-digit number\n    s = input().strip()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print(\"Bad\")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    print(\"hello world\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n\ndef main():\n    # Read in the 4-digit number\n    s = input()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print(\"Bad\")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main()\n    # Read in the 4-digit number\n    s = input\n    # Initialize the previous digit\n    p = 0:\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print(\"Bad\")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print(\"Good\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650481571,
  "object": "edit"
}
2022-04-20 19:06:20.118054 fix syntax errors 8 ['\n\ndef main():\n    # Read in the 4-digit number\n    s = raw_input()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print("Bad")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    # Read in the 4-digit number\n    s = input("Enter a 4-digit number:")\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in range(len(s)):\n        # Check if the current digit is the same as the previous digit\n        if s[i] == p:\n            # If so, then print Bad and exit\n            print("Bad")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = s[i]\n    # If no digit is the same as the previous digit, then print Good\n    print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    # Read in the 4-digit number\n    s = input() # s = "1234"\n    # Initialize the previous digit\n    p = 0 # p = 0\n    # Loop through each digit\n    for i in s:\n        print(i) # i = 1, 2, 3, 4\n        print(p) # p = 0, 1, 2, 3\n        # Check if the current digit is the same as the previous digit\n            print("Bad")\n        if i == p:\n            # If so, then print Bad and exit\n            return\n        print("Good")\n        # Otherwise, set the previous digit to the current digit\n        p = i\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    s = input()\n    p = 0\n    for i in s:\n        if i == p:\n            print("Bad")\n            return\n        p = i\n    print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    # Read in the 4-digit number\n    s = input().strip()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print("Bad")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    print("hello world")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\n\ndef main():\n    # Read in the 4-digit number\n    s = input()\n    # Initialize the previous digit\n    p = 0\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print("Bad")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print("Good")\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main()\n    # Read in the 4-digit number\n    s = input\n    # Initialize the previous digit\n    p = 0:\n    # Loop through each digit\n    for i in s:\n        # Check if the current digit is the same as the previous digit\n        if i == p:\n            # If so, then print Bad and exit\n            print("Bad")\n            return\n        # Otherwise, set the previous digit to the current digit\n        p = i\n    # If no digit is the same as the previous digit, then print Good\n    print("Good")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-20 19:06:20.118115 size on output set 8
2022-04-20 19:06:20.118128 num operations 1
2022-04-20 19:06:20.118135 size on input set 1
2022-04-20 19:06:20.118294 using api key kouti
2022-04-20 19:06:31.776791 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 1,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 2,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 3,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 4,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 5,
      "text": "\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 6,
      "text": "\n\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit(): # isdigit()\u306f\u3001\u5f15\u6570\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    },
    {
      "index": 7,
      "text": "\n\n# -----Answer-----\n\nS = input()\n\n# \u5165\u529b\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u9577\u3055\u304c4\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\u3002\nif len(S) == 4:\n    # \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u6570\u5b57\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # \u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3068\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print(\"Bad\")\n        else:\n            print(\"Good\")\n    else:\n        print(\"Bad\")\nelse:\n    print(\"Bad\")\n"
    }
  ],
  "created": 1650481580,
  "object": "edit"
}
2022-04-20 19:06:31.777215 fix syntax errors 8 ['\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit(): # isdigit()は、引数が数字かどうかを判定する\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n', '\n\n# -----Answer-----\n\nS = input()\n\n# 入力される文字列の長さが4であることを利用する。\nif len(S) == 4:\n    # 文字列をリストに変換して、それぞれの要素が数字かどうかを判定する。\n    if S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        # リストに変換して、それぞれの要素とその一つ前の要素を比較して等しいかどうかを判定する。\n        if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n            print("Bad")\n        else:\n            print("Good")\n    else:\n        print("Bad")\nelse:\n    print("Bad")\n']
2022-04-20 19:06:31.777296 size on output set 3
