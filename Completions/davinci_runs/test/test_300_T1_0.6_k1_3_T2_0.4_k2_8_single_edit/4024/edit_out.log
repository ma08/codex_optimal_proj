2022-04-20 16:45:41.405753 num operations 1
2022-04-20 16:45:41.405774 size on input set 1
2022-04-20 16:45:41.405964 using api key soukgp
2022-04-20 16:45:52.194756 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == \"__main__\":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == \"__main__\":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s) or k == 1:\n      return -1 if k > len(s) else cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == \"__main__\":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n"
    },
    {
      "index": 3,
      "text": "import sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == \"__main__\":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n"
    },
    {
      "index": 4,
      "text": "\n\n\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n    cost = 0\n    while k > 0:\n        if k > len(s):\n            return -1\n        if k == 1:\n            return cost + len(s)\n        counts = defaultdict(int)\n        for c in s:\n            counts[c] += 1\n        maxCount = max(counts.values())\n        cost += (len(s) - maxCount)\n        s = s[:maxCount]\n        k -= 1\n    return cost\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, sys.stdin.readline().strip().split())\n    s = sys.stdin.readline().strip()\n    print(minCost(n, k, s))\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == \"__main__\":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == \"__main__\":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > n:\n      return -1\n    if k == 1:\n      return cost + n\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (n - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == \"__main__\":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n"
    }
  ],
  "created": 1650473141,
  "object": "edit"
}
2022-04-20 16:45:52.195132 fix syntax errors 8 ['\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == "__main__":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n', '\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == "__main__":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n', '\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s) or k == 1:\n      return -1 if k > len(s) else cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == "__main__":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n', 'import sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == "__main__":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n', '\n\n\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n    cost = 0\n    while k > 0:\n        if k > len(s):\n            return -1\n        if k == 1:\n            return cost + len(s)\n        counts = defaultdict(int)\n        for c in s:\n            counts[c] += 1\n        maxCount = max(counts.values())\n        cost += (len(s) - maxCount)\n        s = s[:maxCount]\n        k -= 1\n    return cost\n\n\nif __name__ == "__main__":\n    n, k = map(int, sys.stdin.readline().strip().split())\n    s = sys.stdin.readline().strip()\n    print(minCost(n, k, s))\n', '\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == "__main__":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n', '\n\nimport sys\n\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > len(s):\n      return -1\n    if k == 1:\n      return cost + len(s)\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (len(s) - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == "__main__":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n', '\nimport sys\nfrom collections import defaultdict\n\ndef minCost(n, k, s):\n  cost = 0\n  while k > 0:\n    if k > n:\n      return -1\n    if k == 1:\n      return cost + n\n    counts = defaultdict(int)\n    for c in s:\n      counts[c] += 1\n    maxCount = max(counts.values())\n    cost += (n - maxCount)\n    s = s[:maxCount]\n    k -= 1\n  return cost\n\nif __name__ == "__main__":\n  n, k = map(int, sys.stdin.readline().strip().split())\n  s = sys.stdin.readline().strip()\n  print(minCost(n, k, s))\n']
2022-04-20 16:45:52.195279 size on output set 6
2022-04-20 16:45:52.195293 num operations 1
2022-04-20 16:45:52.195299 size on input set 1
2022-04-20 16:45:52.195478 using api key gabby
2022-04-20 16:45:59.941775 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(input())\n    count = 0\n    # print(s)\n    while len(s) > 0:\n        print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(input())\n    count = 0\n    # print(s)\n    while len(s) > 0:\n        # print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    # print(s)\n    while len(s) > 0:\n        # print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1 - k\n                s = s[1:]\n        else:\n            count += n - 1 - k\n            s = s[1:]\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(input())\n    count = 0\n    # print(s)\n    while len(s) > 0:\n        print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650473152,
  "object": "edit"
}
2022-04-20 16:45:59.942071 fix syntax errors 8 ['\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(input())\n    count = 0\n    # print(s)\n    while len(s) > 0:\n        print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(input())\n    count = 0\n    # print(s)\n    while len(s) > 0:\n        # print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    # print(s)\n    while len(s) > 0:\n        # print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1 - k\n                s = s[1:]\n        else:\n            count += n - 1 - k\n            s = s[1:]\n    print(count)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, k = map(int, input().split())\n    s = list(input())\n    count = 0\n    # print(s)\n    while len(s) > 0:\n        print(s)\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                # print(s[0])\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n,k = map(int,input().split())\n    s = list(input())\n    count = 0\n    while len(s) > 0:\n        if len(s) >= 2:\n            if s[0] == s[1]:\n                count += 1\n                s = s[1:]\n            else:\n                count += n - 1\n                s = s[1:]\n        else:\n            count += n - 1\n            s = s[1:]\n    print(count)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 16:45:59.942202 size on output set 5
2022-04-20 16:45:59.942218 num operations 1
2022-04-20 16:45:59.942224 size on input set 1
2022-04-20 16:45:59.942437 using api key kouti
2022-04-20 16:46:32.111663 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost):\n    if k == 0:\n        return 0\n\n    if i == n:\n        return 10**9\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost))\n\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    ans = dfs(0, n, k, s, cost)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n - 1 and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo, dp):\n        return memo[i][k]\n    if dp[i][k] != -1:\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo, dp)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo, dp))\n\n    dp[i][k] = res\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1 for _ in range(k + 1)] for _ in range(n + 1)]\n    dp = [[-1 for _ in range(k + 1)] for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo, dp)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don't use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n - 1 and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650473159,
  "object": "edit"
}
2022-04-20 16:46:32.111956 fix syntax errors 8 ['import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost):\n    if k == 0:\n        return 0\n\n    if i == n:\n        return 10**9\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost))\n\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    ans = dfs(0, n, k, s, cost)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n - 1 and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo, dp):\n        return memo[i][k]\n    if dp[i][k] != -1:\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo, dp)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo, dp))\n\n    dp[i][k] = res\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1 for _ in range(k + 1)] for _ in range(n + 1)]\n    dp = [[-1 for _ in range(k + 1)] for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo, dp)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n + 1)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(i, n, k, s, cost, memo):\n    if memo[i][k] != -1:\n        return memo[i][k]\n\n    if k == 0:\n        return 0\n\n    # if we don\'t use s[i]\n    res = dfs(i + 1, n, k, s, cost, memo)\n\n    # if we use s[i]\n    if i + 1 <= n - 1 and s[i] != s[i + 1]:\n        res = min(res, cost[i + 1] + dfs(i + 1, n, k - 1, s, cost, memo))\n\n    memo[i][k] = res\n    return res\n\n\ndef solve(n, k, s):\n    cost = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        cost[i] = cost[i + 1] + (n - i)\n\n    memo = [[-1] * (k + 1) for _ in range(n)]\n    ans = dfs(0, n, k, s, cost, memo)\n    if ans >= 10**9:\n        return -1\n    return ans\n\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 16:46:32.112135 size on output set 5
