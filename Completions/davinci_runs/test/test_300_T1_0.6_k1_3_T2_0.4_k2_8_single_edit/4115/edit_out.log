2022-04-20 17:33:22.213073 num operations 1
2022-04-20 17:33:22.213089 size on input set 1
2022-04-20 17:33:22.213265 using api key kouti
2022-04-20 17:33:30.048121 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S)//2):\n    if S[i] != S[len(S)-i-1]:\n        print(i+1)\n        break\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S)//2):\n    if S[i] != S[len(S)-i-1]:\n        print(i+1)\n        break\nelse:\n    print(0)\n"
    },
    {
      "index": 2,
      "text": "import sys\n\nS = sys.stdin.readline().strip()\n\nif S == S[::-1]:\n    print(0) # \ud68c\ubb38\uc774\uba74 0 \ucd9c\ub825\nelse: # \ud68c\ubb38\uc774 \uc544\ub2c8\uba74\n    for i in range(len(S)):\n        if S[i] != S[len(S)-i-1]:\n            print(i+1)\n            break\n        else:\n            print(len(S)-i)\n"
    },
    {
      "index": 3,
      "text": "import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n        print(i + 1)\n        break\nelse:\n    print(0)\n"
    },
    {
      "index": 4,
      "text": "import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n        print(i + 1)\n        break\nelse:\n    print(0)\n"
    },
    {
      "index": 5,
      "text": "import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n        print(i + 1)\n        break\nelse:\n    print(0)\n"
    },
    {
      "index": 6,
      "text": "import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S)//2):\n    if S[i] != S[-i-1]:\n        print(i + 1)\n        break\nelse:\n    print(0)\n"
    },
    {
      "index": 7,
      "text": "import sys\n\nS = sys.stdin.readline().strip()\nfor i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n        print(i + 1)\n        exit()\nprint(0)\n"
    }
  ],
  "created": 1650476002,
  "object": "edit"
}
2022-04-20 17:33:30.048453 fix syntax errors 8 ['import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S)//2):\n    if S[i] != S[len(S)-i-1]:\n        print(i+1)\n        break\nelse:\n    print(0)\n', 'import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S)//2):\n    if S[i] != S[len(S)-i-1]:\n        print(i+1)\n        break\nelse:\n    print(0)\n', 'import sys\n\nS = sys.stdin.readline().strip()\n\nif S == S[::-1]:\n    print(0) # 회문이면 0 출력\nelse: # 회문이 아니면\n    for i in range(len(S)):\n        if S[i] != S[len(S)-i-1]:\n            print(i+1)\n            break\n        else:\n            print(len(S)-i)\n', 'import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n        print(i + 1)\n        break\nelse:\n    print(0)\n', 'import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n        print(i + 1)\n        break\nelse:\n    print(0)\n', 'import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n        print(i + 1)\n        break\nelse:\n    print(0)\n', 'import sys\n\nS = sys.stdin.readline().strip()\n\nfor i in range(len(S)//2):\n    if S[i] != S[-i-1]:\n        print(i + 1)\n        break\nelse:\n    print(0)\n', 'import sys\n\nS = sys.stdin.readline().strip()\nfor i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n        print(i + 1)\n        exit()\nprint(0)\n']
2022-04-20 17:33:30.048503 size on output set 5
2022-04-20 17:33:30.048514 num operations 1
2022-04-20 17:33:30.048520 size on input set 1
2022-04-20 17:33:30.048676 using api key jaanu
2022-04-20 17:33:36.495797 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n"
    },
    {
      "index": 2,
      "text": "\n# -----Answer-----\ns = input()  # input string\nif s == s[::-1]:  # check if string is palindrome\n    print(0)  # if palindrome print 0\nelse:  # if not palindrome\n    print(1)  # print 1\n"
    },
    {
      "index": 3,
      "text": "\n\n# -----Answer-----#\ns = input()#\n\nif s == s[::-1]:#\n    print(0)#\nelse:#\n    print(1)#\n"
    },
    {
      "index": 4,
      "text": "\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n"
    },
    {
      "index": 5,
      "text": "\n\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\n\nelse:\n    print(1)\n"
    },
    {
      "index": 6,
      "text": "\n\n# -----Answer-----#\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n"
    },
    {
      "index": 7,
      "text": "\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n"
    }
  ],
  "created": 1650476010,
  "object": "edit"
}
2022-04-20 17:33:36.496092 fix syntax errors 8 ['\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n', '\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n', '\n# -----Answer-----\ns = input()  # input string\nif s == s[::-1]:  # check if string is palindrome\n    print(0)  # if palindrome print 0\nelse:  # if not palindrome\n    print(1)  # print 1\n', '\n\n# -----Answer-----#\ns = input()#\n\nif s == s[::-1]:#\n    print(0)#\nelse:#\n    print(1)#\n', '\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n', '\n\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\n\nelse:\n    print(1)\n', '\n\n# -----Answer-----#\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n', '\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n']
2022-04-20 17:33:36.496125 size on output set 6
2022-04-20 17:33:36.496137 num operations 1
2022-04-20 17:33:36.496143 size on input set 1
2022-04-20 17:33:36.496309 using api key soukgp
2022-04-20 17:33:43.945609 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = input()\n    print(get_minimum_palindrome(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = input()\n    print(get_minimum_palindrome(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef can_be_palindrome(string):\n    \"\"\"Checks if a string can be a palindrome.\"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"Returns a palindrome from a string.\"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"Returns the minimum number of characters to change to make a string a palindrome.\"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    string = raw_input()\n    print get_minimum_palindrome(string)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = input()\n    print(get_minimum_palindrome(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] // 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = raw_input()\n    print get_minimum_palindrome(string)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] // 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = raw_input()\n    print get_minimum_palindrome(string)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = input()\n    print(get_minimum_palindrome(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] // 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = raw_input()\n    print get_minimum_palindrome(string)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650476016,
  "object": "edit"
}
2022-04-20 17:33:43.946055 fix syntax errors 8 ['\n\ndef can_be_palindrome(string):\n    """\n    Checks if a string can be a palindrome.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    """\n    Returns a palindrome from a string.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = ""\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    """\n    Returns the minimum number of characters to change to make a string a palindrome.\n    """\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    """\n    Main function.\n    """\n    string = input()\n    print(get_minimum_palindrome(string))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef can_be_palindrome(string):\n    """\n    Checks if a string can be a palindrome.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    """\n    Returns a palindrome from a string.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = ""\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    """\n    Returns the minimum number of characters to change to make a string a palindrome.\n    """\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    """\n    Main function.\n    """\n    string = input()\n    print(get_minimum_palindrome(string))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef can_be_palindrome(string):\n    """Checks if a string can be a palindrome."""\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    """Returns a palindrome from a string."""\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = ""\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    """Returns the minimum number of characters to change to make a string a palindrome."""\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    """Main function."""\n    string = raw_input()\n    print get_minimum_palindrome(string)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef can_be_palindrome(string):\n    """\n    Checks if a string can be a palindrome.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    """\n    Returns a palindrome from a string.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = ""\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    """\n    Returns the minimum number of characters to change to make a string a palindrome.\n    """\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    """\n    Main function.\n    """\n    string = input()\n    print(get_minimum_palindrome(string))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef can_be_palindrome(string):\n    """\n    Checks if a string can be a palindrome.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    """\n    Returns a palindrome from a string.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = ""\n    for key in string_dict:\n        palindrome += key * (string_dict[key] // 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    """\n    Returns the minimum number of characters to change to make a string a palindrome.\n    """\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    """\n    Main function.\n    """\n    string = raw_input()\n    print get_minimum_palindrome(string)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef can_be_palindrome(string):\n    """\n    Checks if a string can be a palindrome.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    """\n    Returns a palindrome from a string.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = ""\n    for key in string_dict:\n        palindrome += key * (string_dict[key] // 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    """\n    Returns the minimum number of characters to change to make a string a palindrome.\n    """\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    """\n    Main function.\n    """\n    string = raw_input()\n    print get_minimum_palindrome(string)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef can_be_palindrome(string):\n    """\n    Checks if a string can be a palindrome.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    """\n    Returns a palindrome from a string.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = ""\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    """\n    Returns the minimum number of characters to change to make a string a palindrome.\n    """\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    """\n    Main function.\n    """\n    string = input()\n    print(get_minimum_palindrome(string))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef can_be_palindrome(string):\n    """\n    Checks if a string can be a palindrome.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    """\n    Returns a palindrome from a string.\n    """\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = ""\n    for key in string_dict:\n        palindrome += key * (string_dict[key] // 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    """\n    Returns the minimum number of characters to change to make a string a palindrome.\n    """\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    """\n    Main function.\n    """\n    string = raw_input()\n    print get_minimum_palindrome(string)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 17:33:43.946185 size on output set 3
