["\n\ns = list(map(int, input().split()))\n\ntotal = 0\nfor i in range(len(s)-1):\n    if s[i] == s[i+1]:\n        total += 1\n\nprint(total)\n", "def main():\n    s = input()\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\ns = list(map(int, input()))\n\ntotal = 0\nfor i in range(len(s)-1):\n    if s[i] == s[i+1]:\n        total += 1\n\nprint(total)\n", "\ns = list(input())\n\ntotal = 0\nfor i in range(len(s)-1):\n    if s[i] == s[i+1]:\n        total += 1\n\nprint(total)\n", "#!/usr/bin/env python3\n\ns = input()\n\n# count the number of black tiles\ncounter = 0\nfor c in s:\n    if c == '0':\n        counter += 1\n\n# count the number of black tiles but ignoring the beginning and ending of the string\n# this is done by counting the number of consecutive '0' characters starting from the beginning\n# and the number of consecutive '0' characters starting from the end\n# we take the maximum of the two\ncounter_ignore_ends = 0\ncounter_end = 0\nfor c in s:\n    if c == '0':\n        counter_ignore_ends += 1\n    else:\n        break\nfor c in reversed(s):\n    if c == '0':\n        counter_end += 1\n    else:\n        break\ncounter_ignore_ends = max(counter_ignore_ends, counter_end)\n\n# the answer is the minimum of the two\nprint(min(counter, counter_ignore_ends))\n", "\n\n# s = list(map(int, input()))\n\n# total = 0\n# for i in range(len(s)-1):\n#     if s[i] == s[i+1]:\n#         total += 1\n\n# print(total)\n\n# def is_prime(n):\n#     if n == 1:\n#         return False\n#     for i in range(2, int(n**0.5)+1):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# N = int(input())\n# cnt = 0\n# for i in range(N):\n#     if is_prime(i+1):\n#         cnt += 1\n# print(cnt)\n\n# def is_prime(n):\n#     if n == 1:\n#         return False\n#     for i in range(2, int(n**0.5)+1):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# N = int(input())\n# cnt = 0\n# for i in range(N):\n#     if is_prime(i+1):\n#         cnt += 1\n# print(cnt)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# ans = 0\n# for i in range(n):\n#     ans += a[i]*(n-i)\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n", "\ndef main():\n    s = input()\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ns = list(map(int, input()))\n\ntotal = 0\nfor i in range(len(s)-1):\n    if s[i] == s[i+1]:\n        total += 1\n\nprint(total)\n", "\n\n\ndef main():\n    s = input()\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\n\ndef main():\n    s = input()\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ns = input()\n\n# count the number of black tiles\ncounter = 0\nfor c in s:\n    if c == '0':\n        counter += 1\nprint(counter)\n", "\ns = input()\n\n# count the number of black tiles\ncounter = 0\nfor c in s:\n    if c == '0':\n        counter += 1\n\n# count the number of black tiles but ignoring the beginning and ending of the string\n# this is done by counting the number of consecutive '0' characters starting from the beginning\n# and the number of consecutive '0' characters starting from the end\n# we take the maximum of the two\ncounter_ignore_ends = 0\ncounter_end = 0\nfor c in s:\n    if c == '0':\n        counter_ignore_ends += 1\n    else:\n        break\nfor c in reversed(s):\n    if c == '0':\n        counter_end += 1\n    else:\n        break\ncounter_ignore_ends = max(counter_ignore_ends, counter_end)\n\n# the answer is the minimum of the two\nprint(min(counter, counter_ignore_ends))\n", "\n\ns = raw_input()\n\n# count the number of black tiles\ncounter = 0\nfor c in s:\n    if c == '0':\n        counter += 1\n\n# count the number of black tiles but ignoring the beginning and ending of the string\n# this is done by counting the number of consecutive '0' characters starting from the beginning\n# and the number of consecutive '0' characters starting from the end\n# we take the maximum of the two\ncounter_ignore_ends = 0\ncounter_end = 0\nfor c in s:\n    if c == '0':\n        counter_ignore_ends += 1\n    else:\n        break\nfor c in reversed(s):\n    if c == '0':\n        counter_end += 1\n    else:\n        break\ncounter_ignore_ends = max(counter_ignore_ends, counter_end)\n\n# the answer is the minimum of the two\nprint(min(counter, counter_ignore_ends))\n", "\n\ns = input(\"\")\n\n# count the number of black tiles\ncounter = 0\nfor c in s:\n    if c == '0':\n        counter += 1\n\n# count the number of black tiles but ignoring the beginning and ending of the string\n# this is done by counting the number of consecutive '0' characters starting from the beginning\n# and the number of consecutive '0' characters starting from the end\n# we take the maximum of the two\ncounter_ignore_ends = 0\ncounter_end = 0\nfor c in s:\n    if c == '0':\n        counter_ignore_ends += 1\n    else:\n        break\nfor c in reversed(s):\n    if c == '0':\n        counter_end += 1\n    else:\n        break\ncounter_ignore_ends = max(counter_ignore_ends, counter_end)\n\n# the answer is the minimum of the two\nprint(min(counter, counter_ignore_ends)) \n", "\ns = input()\n\n# count the number of black tiles\ncounter = 0\nfor c in s:\n    if c == '0':\n        counter += 1\n# count the number of black tiles but ignoring the beginning and ending of the string\n# this is done by counting the number of consecutive '0' characters starting from the beginning\n# and the number of consecutive '0' characters starting from the end\n# we take the maximum of the two\ncounter_ignore_ends = 0\ncounter_end = 0\nfor c in s:\n    if c == '0':\n        counter_ignore_ends += 1\n    else:\n        break\nfor c in reversed(s):\n    if c == '0':\n        counter_end += 1\n    else:\n        break\ncounter_ignore_ends = max(counter_ignore_ends, counter_end)\n# the answer is the minimum of the two\nprint(min(counter, counter_ignore_ends))\n"]