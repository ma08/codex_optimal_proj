["t = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    if n % k == 0:\n        print(n // k)\n    else:\n        print(n // k + 1)\n", "#!/usr/bin/python\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n", "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k + 1):\n        if n % i == 0:\n            packages = n // i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:\n        return None\n    if shovels == 0:\n        return 0\n    if shovels == 1:\n        return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets:\n            min_packets = packets\n    if min_packets == sys.maxsize:\n        return None\n    return min_packets + 1\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\nif __name__ == \"__main__\":\n    main()\n", "'''\nhttps://www.hackerearth.com/practice/basic-programming/input-output/basics-of-input-output/practice-problems/algorithm/divide-the-candies-1/\n'''\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\n\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k + 1):\n        if n % i == 0:\n            packages = n // i\n            if packages < min_packages:\n                min_packages = packages\n\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_coins(amount, coins):\n    if amount == 0:\n        return 0, []\n    if amount < 0:\n        return None, None\n\n    min_coins = sys.maxsize\n    min_coins_list = None\n    for c in coins:\n        coins_count, coins_list = get_min_coins(amount - c, coins)\n        if coins_count is not None and coins_count < min_coins:\n            min_coins = coins_count\n            min_coins_list = coins_list\n    if min_coins == sys.maxsize:\n        return None, None\n    return min_coins + 1, coins_list + [c]\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        amount = int(sys.stdin.readline().strip())\n        coins = [1, 2, 5, 10, 20, 50, 100, 200, 500, 2000]\n        coins_count, coins_list = get_min_coins(amount, coins)\n        print(coins_count)\n        print(\" \".join(map(str, coins_list)))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef get_min_packets(shovels, types, packets):\n    if shovels == 0 or shovels == 1:\n        return shovels\n\n    if packets[shovels] != -1:\n        return packets[shovels]\n\n    min_packets = sys.maxsize - 1\n    for t in range(1, types + 1):\n        packets_required = get_min_packets(shovels - t, types, packets)\n        if packets_required < min_packets:\n            min_packets = packets_required\n    packets[shovels] = min_packets + 1\n    return packets[shovels]\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        packets = [-1] * (N + 1)\n        print(get_min_packets(N, K, packets))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        pass\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Mar  1 19:09:13 2019\n\n@author: abhijithneilabraham\n\"\"\"\n\ndef divisible(n,k):\n    if n%k == 0:\n        return n//k\n    else:\n        return n//k + 1\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    print(divisible(n,k))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "import sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nimport sys\n\n\nsys.setrecursionlimit(10**6)\n\n\ndef get_min_packets(shovels, types):\n  if shovels < 0:\n    return None\n  if shovels == 0:\n    return 0\n  if shovels == 1:\n    return 1\n\n  min_packets = sys.maxsize\n  for t in range(types, 0, -1):\n    packets = get_min_packets(shovels - t, types)\n    if packets is not None and packets < min_packets:\n      min_packets = packets\n  if min_packets == sys.maxsize:\n    return None\n  return min_packets + 1\n\n\ndef main():\n  T = int(sys.stdin.readline().strip())\n  for t in range(T):\n    N, K = map(int, sys.stdin.readline().strip().split())\n    print(get_min_packets(N, K))\n\n\nif __name__ == \"__main__\":\n  main()\n"]