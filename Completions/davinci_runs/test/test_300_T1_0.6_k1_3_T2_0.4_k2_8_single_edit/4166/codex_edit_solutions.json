["\n\ndef main():\n    n, m = map(int, input().split())\n    a = [1] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s-1] = c if a[s-1] == c else -1\n    if n != 1 and a[0] == 0:\n        print(-1)\n        return\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[i], end=\"\")\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < constraints[i][1]:\n    print(number)\nelse:\n    print(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s - 1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[i], end=\"\")\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < constraints[0]:\n    print(number)\nelse:\n    print(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s-1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1, end=\"\")\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[i], end=\"\")\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [1] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s-1] = c\n    for i in range(n):\n        print(a[i], end=\"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [1] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < constraints[0]:\n    print(number)\nelse:\n    print(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        if a[s-1] != 0 and a[s-1] != c:\n            print(-1)\n            return\n        else:\n            a[s-1] = c\n    for i in range(n):\n        if i == 0:\n            if a[i] == 0:\n                print(1, end=\"\")\n            else:\n                print(a[i], end=\"\")\n        else:\n            if a[i] == 0:\n                print(0, end=\"\")\n            else:\n                print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\nN, M = map(int, input().split())\nfor i in range(10 ** N):\n    if all(str(i).zfill(N)[s - 1] == str(c) for s, c in (map(int, input().split()) for _ in range(M))):\n        print(i)\n        exit()\nprint(-1)\n", "N, M = map(int, input().split())\nfor i in range(10 ** N):\n    if all(str(i).zfill(N)[s - 1] == str(c) for s, c in (map(int, input().split()) for _ in range(M))):\n        print(i)\n        exit()\nprint(-1)\n", "\n\n# The number of digits\nN = int(input())\n# The number of constraints\nM = int(input())\n# List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n# Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n# If the number is less than all constraints\nif number < constraints:\n    print(number)\nelse:\n    print(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n  # \u521d\u671f\u5024\u306f0\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s - 1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0:  # \u5148\u982d\u304c0\u306e\u5834\u5408\u306fNG\n            print(-1)  # NG\n            exit()  # \u7d42\u4e86\n        elif i == 0 and a[i] != 0:  # \u5148\u982d\u304c0\u3067\u306a\u3044\u5834\u5408\n            print(a[i], end=\"\")  # \u51fa\u529b\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s - 1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0 and n != 1:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0 and n != 1:\n        elif i == 0 and a[i] == 0 and n == 1:\n            print(0)\n            return\n        elif i == 0 and a[i] != 0 and n == 1:\n            print(a[i])\n            return\n            print(a[i], end=\"\")\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < constraints[0]:\n    print(number[0])\nelse:\n    print(-1)\n", "\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()]) \n\n#Determine the least possible number\nnumber = [0] * N \nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < constraints:\n    print(number)\nelse:\n    print(-1)\n", "\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < constraints[0]:\n    print(*number, sep='')\nelse:\n    print(-1)\n", "\nimport sys\ninput = sys.stdin.readline\n \nN, M = map(int, input().split()) \nfor i in range(10 ** N): \n    if all(str(i).zfill(N)[s - 1] == str(c) for s, c in (map(int, input().split()) for _ in range(M))): \n        print(i) \n        exit() \nprint(-1) \n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        if a[s-1] == 0:\n            a[s-1] = c\n        elif a[s-1] != c:\n            print(-1)\n            return\n    for i in range(n):\n        if i == 0 and a[i] == 0 and n != 1:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[i], end=\"\")\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n"]