["\n\nfrom sys import stdin\ns = s[:-1]\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n", "\nfrom collections import deque\n\nn = int(input())\ns = deque(input().strip())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n", "\n\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n", "\n\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input(\"\")\n    max_removal = find_max_removal(s)\n    print(max_removal)\n", "\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input(\"Enter a string of 1s and 0s: \")\n    max_removal = find_max_removal(s)\n    print(max_removal)\n", "\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables.\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter.\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal.\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop.\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n", "\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop.\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n", "\n\ndef f(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return f(n - 1) + f(n - 2)\n\nprint(f(10))\n", "\nfrom collections import deque\n\nn = int(input())\ns = deque(input())\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n", "\nfrom collections import deque\n\nn = int(input())\ns = deque(input())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n", "\n\n\nfrom collections import deque\n\nn = int(input())\ns = deque(input())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n", "\nfrom sys import stdin\n\ns = stdin.readline()\n", "\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s.\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n", "\n\ndef find_max_removal(s, n):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s (length n)\n    :param n: length of string\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for i in range(n):\n        # If the digit is the same as the previous digit, increment the counter\n        if s[i] == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = s[i]\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    n = len(s)\n    max_removal = find_max_removal(s, n)\n    print(max_removal)\n", "\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s, representing red and blue cubes\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n", "\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)  # noqa\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n", "\n\nfrom sys import stdin\n\ns = stdin.readline()\n\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n", "\n\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0s and 1s\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint min(count.values()) * 2\n"]