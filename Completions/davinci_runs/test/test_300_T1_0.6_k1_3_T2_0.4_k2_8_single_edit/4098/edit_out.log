2022-04-20 17:23:08.347276 num operations 1
2022-04-20 17:23:08.347342 size on input set 1
2022-04-20 17:23:08.347519 using api key gabby
2022-04-20 17:23:17.720448 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    #print(a)\n    cnt = 0\n            print(a[i])\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    # print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5) # append a dummy element to the end of the array\n    #print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    # print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n"
    },
    {
      "index": 4,
      "text": "\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    # print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)  # \u4e0b\u9650\u3092\u6c7a\u3081\u308b\n    #print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:  # \u521d\u3081\u304b\u3001\u524d\u306e\u3082\u306e\u30685\u4ee5\u4e0a\u96e2\u308c\u3066\u3044\u308b\u304b\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n"
    },
    {
      "index": 7,
      "text": "\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    # print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n"
    }
  ],
  "created": 1650475388,
  "object": "edit"
}
2022-04-20 17:23:17.720777 fix syntax errors 8 ['\n\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    #print(a)\n    cnt = 0\n            print(a[i])\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n', '\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    # print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n', '\n\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5) # append a dummy element to the end of the array\n    #print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n', '\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    # print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n', '\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    # print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n', '\n\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n', '\n\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)  # 下限を決める\n    #print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:  # 初めか、前のものと5以上離れているか\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n', '\ndef solve(n, k, a):\n    a.sort()\n    a.append(a[-1] + 5)\n    # print(a)\n    cnt = 0\n    for i in range(n):\n        if i == 0 or a[i] - a[i-1] > 5:\n            cnt += 1\n            if cnt == k + 1:\n                return i\n    return n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n']
2022-04-20 17:23:17.720839 size on output set 5
2022-04-20 17:23:17.720851 num operations 1
2022-04-20 17:23:17.720857 size on input set 1
2022-04-20 17:23:17.721021 using api key jaanu
2022-04-20 17:23:29.029617 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndp = [0] * (n + 1)  # dp[i]:=i\u756a\u76ee\u307e\u3067\u306e\u8981\u7d20\u3092\u4f7f\u3063\u3066\u4f5c\u308c\u308b\u6700\u5927\u306e\u90e8\u5206\u5217\u306e\u9577\u3055\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]  # \u4eca\u56de\u306e\u8981\u7d20\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)  # \u4eca\u56de\u306e\u8981\u7d20\u3092\u4f7f\u3046\u5834\u5408\n\nprint(max(dp[n - k + 1:]))\n"
    },
    {
      "index": 1,
      "text": "\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 2, -1, -1):\n        if a[i - 1] - a[j] <= k:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Date    : 2018-07-29 15:24:15\n# @Author  : Your Name (you@example.org)\n# @Link    : http://example.org\n# @Version : $Id$\n\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n"
    }
  ],
  "created": 1650475397,
  "object": "edit"
}
2022-04-20 17:23:29.030023 fix syntax errors 8 ['n, k = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndp = [0] * (n + 1)  # dp[i]:=i番目までの要素を使って作れる最大の部分列の長さ\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]  # 今回の要素を使わない場合\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)  # 今回の要素を使う場合\n\nprint(max(dp[n - k + 1:]))\n', '\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n', '\n\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 2, -1, -1):\n        if a[i - 1] - a[j] <= k:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Date    : 2018-07-29 15:24:15\n# @Author  : Your Name (you@example.org)\n# @Link    : http://example.org\n# @Version : $Id$\n\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n', '\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n', '\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n', '\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n', '\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1, -1, -1):\n        if a[i - 1] - a[j] <= 5:\n            dp[i] = max(dp[i], dp[j] + i - j)\n\nans = 0\nfor i in range(n, n - k, -1):\n    ans = max(ans, dp[i])\nprint(ans)\n']
2022-04-20 17:23:29.030085 size on output set 4
2022-04-20 17:23:29.030098 num operations 1
2022-04-20 17:23:29.030104 size on input set 1
2022-04-20 17:23:29.030267 using api key gabby
2022-04-20 17:23:41.541885 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n, k = 5, 2\n# a = [1, 2, 15, 15, 15]\n\n# n, k = 6, 1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n, k = 4, 4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\n\ndef get_teams(skills, k):\n    if len(skills) > k:\n        return []\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    return teams\n\n\nteams = get_teams(skills, k)\nfor i in range(n - 1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\na.sort()\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\nteams = get_teams(skills, k)\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in sorted(skills.keys()):\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in sorted(skills.keys()):\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n"
    }
  ],
  "created": 1650475409,
  "object": "edit"
}
2022-04-20 17:23:41.542290 fix syntax errors 8 ['\nfrom sys import stdin\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n, k = 5, 2\n# a = [1, 2, 15, 15, 15]\n\n# n, k = 6, 1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n, k = 4, 4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\n\ndef get_teams(skills, k):\n    if len(skills) > k:\n        return []\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    return teams\n\n\nteams = get_teams(skills, k)\nfor i in range(n - 1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n', '\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\na.sort()\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\nteams = get_teams(skills, k)\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n', '\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n', '\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n', '\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n', '\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n', '\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in skills:\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in skills:\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n', '\n\nfrom sys import stdin\nfrom collections import defaultdict\n\nn,k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n# n,k = 5,2\n# a = [1, 2, 15, 15, 15]\n\n# n,k = 6,1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n,k = 4,4\n# a = [1, 10, 100, 1000]\n\na.sort()\n\nskills = defaultdict(list)\nfor i in range(n):\n    skills[a[i]].append(i)\n\ndef get_teams(skills, k):\n    teams = []\n    for skill in sorted(skills.keys()):\n        while len(skills[skill]) >= 2:\n            teams.append((skills[skill].pop(0), skills[skill].pop()))\n    for skill in sorted(skills.keys()):\n        if skills[skill]:\n            teams.append((skills[skill].pop(),))\n    if len(teams) > k:\n        return []\n    return teams\n\nteams = get_teams(skills, k)\n\nfor i in range(n-1, -1, -1):\n    if a[i] - a[0] <= 5:\n        skills[a[i]].append(skills[a[0]].pop(0))\n        if not skills[a[0]]:\n            del skills[a[0]]\n        teams = get_teams(skills, k)\n        if teams:\n            break\n\nprint(sum(map(len, teams)))\n']
2022-04-20 17:23:41.542416 size on output set 4
