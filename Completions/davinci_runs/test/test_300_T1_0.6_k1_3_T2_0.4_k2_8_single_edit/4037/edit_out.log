2022-04-20 16:53:24.279342 num operations 1
2022-04-20 16:53:24.279361 size on input set 1
2022-04-20 16:53:24.279571 using api key jaanu
2022-04-20 16:53:33.300906 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [0]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        r.append(max(r[-1] - b, 0))\n        if a > r[-1]: r[-1] = r[-2]\n    print(len(r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nn, r = map(int, sys.stdin.readline().split())\nr = [r]\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    if a > r[-1]:\n        r.append(r[-1])\n    else:\n        r.append(max(r[-1] - b, 0))\nprint(len(r) - 1)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [0]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r] * n\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650473604,
  "object": "edit"
}
2022-04-20 16:53:33.301230 fix syntax errors 8 ['\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [0]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        r.append(max(r[-1] - b, 0))\n        if a > r[-1]: r[-1] = r[-2]\n    print(len(r))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\nn, r = map(int, sys.stdin.readline().split())\nr = [r]\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    if a > r[-1]:\n        r.append(r[-1])\n    else:\n        r.append(max(r[-1] - b, 0))\nprint(len(r) - 1)\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [0]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r] * n\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    r = [r]\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        if a > r[-1]:\n            r.append(r[-1])\n        else:\n            r.append(max(r[-1] - b, 0))\n    print(len(r) - 1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 16:53:33.301277 size on output set 6
2022-04-20 16:53:33.301291 num operations 1
2022-04-20 16:53:33.301296 size on input set 1
2022-04-20 16:53:33.301474 using api key jaanu
2022-04-20 16:53:46.805668 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]):\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main():\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int: \n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef main() -> None:\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int: \n    num_projects = 0\n    for required_rating, rating_change in projects: \n        if rating >= required_rating:\n            rating += rating_change \n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split() \n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = [] \n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split() \n        projects.append((int(project_rating), int(rating_change))) \n\n    projects.sort(key=lambda x: x[1]) \n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    num_projects, initial_rating = map(int, stdin.readline().split())\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    new_projects = []\n    for i, (required_rating, rating_change) in enumerate(projects):\n        if rating >= required_rating: new_projects.append((i, rating_change))\n\n    return new_projects\n\n\ndef get_max_num_projects_helper(rating: int, projects: List[Tuple[int, int]]) -> int:\n    if len(projects) == 0: return 0\n\n    max_num_projects = 0\n    for index, rating_change in projects:\n        new_rating = rating + rating_change\n        new_projects = projects[:index] + projects[index + 1:]\n        max_num_projects = max(max_num_projects, 1 + get_max_num_projects_helper(new_rating, new_projects))\n\n    return max_num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n        projects.append((int(project_rating), int(rating_change)))\n\n    new_projects = get_max_num_projects(initial_rating, projects)\n    new_projects.sort(key=lambda x: x[1])\n    new_projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects_helper(initial_rating, new_projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650473613,
  "object": "edit"
}
2022-04-20 16:53:46.806084 fix syntax errors 8 ["\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]):\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main():\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int: \n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef main() -> None:\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int: \n    num_projects = 0\n    for required_rating, rating_change in projects: \n        if rating >= required_rating:\n            rating += rating_change \n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split() \n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = [] \n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split() \n        projects.append((int(project_rating), int(rating_change))) \n\n    projects.sort(key=lambda x: x[1]) \n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    num_projects, initial_rating = map(int, stdin.readline().split())\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple, Dict\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    new_projects = []\n    for i, (required_rating, rating_change) in enumerate(projects):\n        if rating >= required_rating: new_projects.append((i, rating_change))\n\n    return new_projects\n\n\ndef get_max_num_projects_helper(rating: int, projects: List[Tuple[int, int]]) -> int:\n    if len(projects) == 0: return 0\n\n    max_num_projects = 0\n    for index, rating_change in projects:\n        new_rating = rating + rating_change\n        new_projects = projects[:index] + projects[index + 1:]\n        max_num_projects = max(max_num_projects, 1 + get_max_num_projects_helper(new_rating, new_projects))\n\n    return max_num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n        projects.append((int(project_rating), int(rating_change)))\n\n    new_projects = get_max_num_projects(initial_rating, projects)\n    new_projects.sort(key=lambda x: x[1])\n    new_projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects_helper(initial_rating, new_projects))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom typing import List, Tuple\n\n\ndef get_max_num_projects(rating: int, projects: List[Tuple[int, int]]) -> int:\n    num_projects = 0\n    for required_rating, rating_change in projects:\n        if rating >= required_rating:\n            rating += rating_change\n            num_projects += 1\n\n    return num_projects\n\n\ndef main() -> None:\n    input_line = stdin.readline().split()\n    num_projects, initial_rating = int(input_line[0]), int(input_line[1])\n    projects: List[Tuple[int, int]] = []\n    for _ in range(num_projects):\n        project_rating, rating_change = stdin.readline().split()\n        projects.append((int(project_rating), int(rating_change)))\n\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    print(get_max_num_projects(initial_rating, projects))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 16:53:46.806170 size on output set 8
2022-04-20 16:53:46.806185 num operations 1
2022-04-20 16:53:46.806191 size on input set 1
2022-04-20 16:53:46.806366 using api key soukgp
2022-04-20 16:54:24.362577 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# # Not my solution, but I understand it and it's so damn clever and fast\n# # https://codeforces.com/contest/1206/submission/59559046\n#\n# # n, r = map(int, input().split())\n# # p = [list(map(int, input().split())) for _ in range(n)]\n# # p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# # for i in range(n):\n# #     r -= p[i][0]\n# #     if r < 0:\n# #         print(i)\n# #         exit()\n# #     r += p[i][1]\n# # print(n)\n#\n# # My solution\n#\n# # def get_max(lst, x):\n# #     for i in range(len(lst)):\n# #         if lst[i][0] > x:\n# #             continue\n# #         else:\n# #             return i\n# #\n# # n, r = map(int, input().split())\n# # lst = [list(map(int, input().split())) for _ in range(n)]\n# # lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n# #\n# # ans = 0\n# # while lst:\n# #     num = get_max(lst, r)\n# #     if num is None:\n# #         break\n# #     for i in range(num + 1):\n# #         r -= lst[i][0]\n# #         r += lst[i][1]\n# #     lst = lst[num + 1:]\n# #     ans += 1\n# # print(ans)\n#\n# # It's the same solution as above, but the code is a bit more compact\n# # https://codeforces.com/contest/1206/submission/59560137\n#\n# n, r = map(int, input().split())\n# a = [list(map(int, input().split())) for _ in range(n)]\n# a.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i, j in a:\n#     r -= i\n#     if r < 0:\n#         print(i)\n#         break\n#     r += j\n# else:\n#     print(n)\n\n# https://codeforces.com/contest/1206/submission/59560137\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# https://codeforces.com/contest/1206/submission/59560842\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n\n# https://codeforces.com/contest/1206/submission/59561905\n"
    },
    {
      "index": 1,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i + 1)\n#         exit()\n#     r += p[i][1]\n# print(n + 1)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n + 1)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n#\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n#\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n#\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 3,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num == None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 4,
      "text": "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 5,
      "text": "\n"
    },
    {
      "index": 6,
      "text": "\n\n# # Not my solution, but I understand it and it's so damn clever and fast\n# # https://codeforces.com/contest/1206/submission/59559046\n#\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# n, r = map(int, input().split())\n# a = [list(map(int, input().split())) for _ in range(n)]\n# a.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i, j in a:\n#     r -= i\n#     if r < 0:\n#         print(i)\n#         break\n#     r += j\n# else:\n#     print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n"
    },
    {
      "index": 7,
      "text": "# https://codeforces.com/contest/1206/problem/B\n# https://codeforces.com/contest/1206/submission/59559046\n\n\nn, r = map(int, input().split())\np = [list(map(int, input().split())) for _ in range(n)]\np.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i in range(n):\n    r -= p[i][0]\n    if r < 0:\n        print(i)\n        exit()\n    r += p[i][1]\nprint(n)\n\n# My solution\n\ndef get_max(lst, x):\n    for i in range(len(lst)):\n        if lst[i][0] > x:\n            continue\n        else:\n            return i\n\nn, r = map(int, input().split())\nlst = [list(map(int, input().split())) for _ in range(n)]\nlst.sort(key=lambda x: x[1] / x[0], reverse=True)\n\nans = 0\nwhile lst:\n    num = get_max(lst, r)\n    if num is None:\n        break\n    for i in range(num + 1):\n        r -= lst[i][0]\n        r += lst[i][1]\n    lst = lst[num + 1:]\n    ans += 1\nprint(ans)\n\n# My solution\n\n# It's the same solution as above, but the code is a bit more compact and fast\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n"
    }
  ],
  "created": 1650473626,
  "object": "edit"
}
2022-04-20 16:54:24.363004 fix syntax errors 8 ["\n\n# # Not my solution, but I understand it and it's so damn clever and fast\n# # https://codeforces.com/contest/1206/submission/59559046\n#\n# # n, r = map(int, input().split())\n# # p = [list(map(int, input().split())) for _ in range(n)]\n# # p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# # for i in range(n):\n# #     r -= p[i][0]\n# #     if r < 0:\n# #         print(i)\n# #         exit()\n# #     r += p[i][1]\n# # print(n)\n#\n# # My solution\n#\n# # def get_max(lst, x):\n# #     for i in range(len(lst)):\n# #         if lst[i][0] > x:\n# #             continue\n# #         else:\n# #             return i\n# #\n# # n, r = map(int, input().split())\n# # lst = [list(map(int, input().split())) for _ in range(n)]\n# # lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n# #\n# # ans = 0\n# # while lst:\n# #     num = get_max(lst, r)\n# #     if num is None:\n# #         break\n# #     for i in range(num + 1):\n# #         r -= lst[i][0]\n# #         r += lst[i][1]\n# #     lst = lst[num + 1:]\n# #     ans += 1\n# # print(ans)\n#\n# # It's the same solution as above, but the code is a bit more compact\n# # https://codeforces.com/contest/1206/submission/59560137\n#\n# n, r = map(int, input().split())\n# a = [list(map(int, input().split())) for _ in range(n)]\n# a.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i, j in a:\n#     r -= i\n#     if r < 0:\n#         print(i)\n#         break\n#     r += j\n# else:\n#     print(n)\n\n# https://codeforces.com/contest/1206/submission/59560137\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# https://codeforces.com/contest/1206/submission/59560842\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n\n# https://codeforces.com/contest/1206/submission/59561905\n", "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i + 1)\n#         exit()\n#     r += p[i][1]\n# print(n + 1)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n + 1)\n", "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n#\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n#\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n#\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n", "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num == None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n)\n", "\n\n# Not my solution, but I understand it and it's so damn clever and fast\n# https://codeforces.com/contest/1206/submission/59559046\n\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i + 1)\n        break\n    r += j\nelse:\n    print(n)\n", '\n', "\n\n# # Not my solution, but I understand it and it's so damn clever and fast\n# # https://codeforces.com/contest/1206/submission/59559046\n#\n# n, r = map(int, input().split())\n# p = [list(map(int, input().split())) for _ in range(n)]\n# p.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i in range(n):\n#     r -= p[i][0]\n#     if r < 0:\n#         print(i)\n#         exit()\n#     r += p[i][1]\n# print(n)\n\n# n, r = map(int, input().split())\n# a = [list(map(int, input().split())) for _ in range(n)]\n# a.sort(key=lambda x: x[1] / x[0], reverse=True)\n# for i, j in a:\n#     r -= i\n#     if r < 0:\n#         print(i)\n#         break\n#     r += j\n# else:\n#     print(n)\n\n# My solution\n\n# def get_max(lst, x):\n#     for i in range(len(lst)):\n#         if lst[i][0] > x:\n#             continue\n#         else:\n#             return i\n#\n# n, r = map(int, input().split())\n# lst = [list(map(int, input().split())) for _ in range(n)]\n# lst.sort(key=lambda x: x[1] / x[0], reverse=True)\n#\n# ans = 0\n# while lst:\n#     num = get_max(lst, r)\n#     if num is None:\n#         break\n#     for i in range(num + 1):\n#         r -= lst[i][0]\n#         r += lst[i][1]\n#     lst = lst[num + 1:]\n#     ans += 1\n# print(ans)\n\n# It's the same solution as above, but the code is a bit more compact\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n", "# https://codeforces.com/contest/1206/problem/B\n# https://codeforces.com/contest/1206/submission/59559046\n\n\nn, r = map(int, input().split())\np = [list(map(int, input().split())) for _ in range(n)]\np.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i in range(n):\n    r -= p[i][0]\n    if r < 0:\n        print(i)\n        exit()\n    r += p[i][1]\nprint(n)\n\n# My solution\n\ndef get_max(lst, x):\n    for i in range(len(lst)):\n        if lst[i][0] > x:\n            continue\n        else:\n            return i\n\nn, r = map(int, input().split())\nlst = [list(map(int, input().split())) for _ in range(n)]\nlst.sort(key=lambda x: x[1] / x[0], reverse=True)\n\nans = 0\nwhile lst:\n    num = get_max(lst, r)\n    if num is None:\n        break\n    for i in range(num + 1):\n        r -= lst[i][0]\n        r += lst[i][1]\n    lst = lst[num + 1:]\n    ans += 1\nprint(ans)\n\n# My solution\n\n# It's the same solution as above, but the code is a bit more compact and fast\n# https://codeforces.com/contest/1206/submission/59560137\n\nn, r = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na.sort(key=lambda x: x[1] / x[0], reverse=True)\nfor i, j in a:\n    r -= i\n    if r < 0:\n        print(i)\n        break\n    r += j\nelse:\n    print(n)\n"]
2022-04-20 16:54:24.363146 size on output set 8
