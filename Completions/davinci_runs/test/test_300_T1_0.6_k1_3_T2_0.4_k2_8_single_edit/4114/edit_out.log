2022-04-20 17:32:38.734485 num operations 1
2022-04-20 17:32:38.734501 size on input set 1
2022-04-20 17:32:38.734680 using api key sunu
2022-04-20 17:32:49.069941 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2  # x\u5ea7\u6a19\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2  # y\u5ea7\u6a19\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])  # \u9ad8\u3055\nprint(cx, cy, h)  # \u51fa\u529b\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\nprint(cx, cy, h)\n"
    },
    {
      "index": 2,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0])/2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1])/2\nh = arr[0][2] - abs(cx-arr[0][0]) - abs(cy-arr[0][1])\nprint(cx, cy, h)\n"
    },
    {
      "index": 3,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\nprint(cx, cy, h)\n"
    },
    {
      "index": 4,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0])/2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1])/2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])/2\nprint(cx, cy, h)\n"
    },
    {
      "index": 5,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\nprint(cx, cy, h)\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n = int(input())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    \n    cx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\n    cy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\n    h = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\n    print(cx, cy, h)\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) / 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) / 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1]) / 2\nprint(cx, cy, h)\n"
    }
  ],
  "created": 1650475958,
  "object": "edit"
}
2022-04-20 17:32:49.070295 fix syntax errors 8 ['n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2  # x座標\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2  # y座標\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])  # 高さ\nprint(cx, cy, h)  # 出力\n', 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\nprint(cx, cy, h)\n', 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0])/2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1])/2\nh = arr[0][2] - abs(cx-arr[0][0]) - abs(cy-arr[0][1])\nprint(cx, cy, h)\n', 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\nprint(cx, cy, h)\n', 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0])/2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1])/2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])/2\nprint(cx, cy, h)\n', 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\nprint(cx, cy, h)\n', "\ndef main():\n    n = int(input())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    \n    cx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\n    cy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\n    h = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\n    print(cx, cy, h)\n    \nif __name__ == '__main__':\n    main()\n", 'n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) / 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) / 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1]) / 2\nprint(cx, cy, h)\n']
2022-04-20 17:32:49.070388 size on output set 7
2022-04-20 17:32:49.070402 num operations 1
2022-04-20 17:32:49.070408 size on input set 1
2022-04-20 17:32:49.070568 using api key derek
2022-04-20 17:32:49.110202 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 17:32:50.612124 using api key sunu
2022-04-20 17:33:05.468904 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(0, 101):\n    for y in range(0, 101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 3,
      "text": "n = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())  # \u5ea7\u6a19\u3068\u9ad8\u3055\u3092\u53d6\u5f97\n    coord_dict[(x, y)] = h  # \u8f9e\u66f8\u306b\u8ffd\u52a0\n\nfor x in range(101):  # 0\u304b\u3089100\u307e\u3067\u306eX\u5ea7\u6a19\u3092\u8a66\u3059\n    for y in range(101):  # 0\u304b\u3089100\u307e\u3067\u306eY\u5ea7\u6a19\u3092\u8a66\u3059\n        h = -1  # \u6700\u521d\u306f-1\n        for (x_, y_), h_ in coord_dict.items():  # \u8f9e\u66f8\u304b\u3089\u5ea7\u6a19\u3068\u9ad8\u3055\u3092\u53d6\u308a\u51fa\u3059\n            if h == -1:  # \u6700\u521d\u306e\u30eb\u30fc\u30d7\u306e\u6642\u306f\u9ad8\u3055\u3092\u8a2d\u5b9a\n                h = h_ + abs(x - x_) + abs(y - y_)  # \u9ad8\u3055\u3092\u8a2d\u5b9a\n            elif h != h_ + abs(x - x_) + abs(y - y_):  # \u9ad8\u3055\u304c\u4e00\u81f4\u3057\u306a\u3044\u6642\u306f\u6b21\u306e\u30eb\u30fc\u30d7\u306b\u9032\u3080\n                break  # \u6b21\u306e\u30eb\u30fc\u30d7\u306b\u9032\u3080\n        else:  # \u5168\u3066\u306e\u30eb\u30fc\u30d7\u304c\u7d42\u4e86\u3057\u305f\u6642\n            print(x, y, h)  # \u7b54\u3048\u3092\u51fa\u529b\n            exit()  # \u7d42\u4e86\n"
    },
    {
      "index": 5,
      "text": "n = int(input())\nh_list = []\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    h_list.append((x, y, h))\n\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for x, y, h_ in h_list:\n            if h_ > 0:\n                h = h_ + abs(cx - x) + abs(cy - y)\n        if all(h_ == max(h - abs(cx - x) - abs(cy - y), 0) for x, y, h_ in h_list):\n            print(cx, cy, h)\n            exit(0)\n"
    },
    {
      "index": 6,
      "text": "# coding: utf-8\n\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n"
    }
  ],
  "created": 1650475970,
  "object": "edit"
}
2022-04-20 17:33:05.469283 fix syntax errors 8 ['\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', '\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', '\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(0, 101):\n    for y in range(0, 101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', 'n = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', '\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())  # 座標と高さを取得\n    coord_dict[(x, y)] = h  # 辞書に追加\n\nfor x in range(101):  # 0から100までのX座標を試す\n    for y in range(101):  # 0から100までのY座標を試す\n        h = -1  # 最初は-1\n        for (x_, y_), h_ in coord_dict.items():  # 辞書から座標と高さを取り出す\n            if h == -1:  # 最初のループの時は高さを設定\n                h = h_ + abs(x - x_) + abs(y - y_)  # 高さを設定\n            elif h != h_ + abs(x - x_) + abs(y - y_):  # 高さが一致しない時は次のループに進む\n                break  # 次のループに進む\n        else:  # 全てのループが終了した時\n            print(x, y, h)  # 答えを出力\n            exit()  # 終了\n', 'n = int(input())\nh_list = []\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    h_list.append((x, y, h))\n\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for x, y, h_ in h_list:\n            if h_ > 0:\n                h = h_ + abs(cx - x) + abs(cy - y)\n        if all(h_ == max(h - abs(cx - x) - abs(cy - y), 0) for x, y, h_ in h_list):\n            print(cx, cy, h)\n            exit(0)\n', '# coding: utf-8\n\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n', '\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n']
2022-04-20 17:33:05.469368 size on output set 6
2022-04-20 17:33:05.469382 num operations 1
2022-04-20 17:33:05.469388 size on input set 1
2022-04-20 17:33:05.469546 using api key soukgp
2022-04-20 17:33:21.815407 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# coding: utf-8\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 2,
      "text": "import numpy as np\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = -1\n        for p in points:\n            h = max(h, p[2] + abs(p[0] - cx) + abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            sys.exit()\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9, 10^9-1, 10^9-2, ..., 1, 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 6,
      "text": "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y, h = map(int, input().split())\n        points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n"
    }
  ],
  "created": 1650475985,
  "object": "edit"
}
2022-04-20 17:33:21.815787 fix syntax errors 8 ['# coding: utf-8\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', '\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', 'import numpy as np\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = -1\n        for p in points:\n            h = max(h, p[2] + abs(p[0] - cx) + abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', '\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', 'import sys\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            sys.exit()\n', '\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9, 10^9-1, 10^9-2, ..., 1, 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', 'import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y, h = map(int, input().split())\n        points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n', '\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n']
2022-04-20 17:33:21.815857 size on output set 6
