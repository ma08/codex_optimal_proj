["from math import sqrt\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n", "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn //= i\n\n\tif (n > 2):\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n", "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n**0.5) + 1, 2):\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn //= i\n\n\tif (n > 2):\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n", "from math import sqrt\n\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n", "\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n**0.5) + 1, 2):\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn /= i\n\n\tif (n > 2):\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n", "\n", "\n\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1\n    factors = []\n    for i in range(2, m+1):\n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)):\n        for j in range(len(a)):\n            if a[j] % factors[i] != 0:\n                factors[i] = 0\n                break\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n", "\n\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1\n\n    factors = []\n    for i in range(2, m + 1):\n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)):\n        for j in range(len(a)):\n            if a[j] % factors[i] != 0:\n                factors[i] = 0\n                break\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n", "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n    if (b == 0):\n        return a\n    return gcd(b, a % b)\n\ndef get_prime_factors(n):\n    factors = Counter()\n\n    while (n % 2 == 0):\n        factors[2] += 1\n        n /= 2\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while (n % i == 0):\n            factors[i] += 1\n            n /= i\n\n    if (n > 2):\n        factors[n] += 1\n\n    return factors\n\n\nif __name__ == '__main__':\n    _ = input()\n    arr = list(map(int, input().split()))\n\n    n = len(arr)\n\n    gcd_so_far = arr[0]\n    for i in range(1, n):\n        gcd_so_far = gcd(gcd_so_far, arr[i])\n\n    if (gcd_so_far == 1):\n        print(1)\n    else:\n        factors = get_prime_factors(gcd_so_far)\n        print(len(factors))\n", "\n\n\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1\n\n    factors = []\n    for i in range(2, m + 1):\n        if m % i == 0:\n            factors.append(i)\n\n    # for i in range(len(factors)):\n    #     for j in range(len(a)):\n    #         if a[j] % factors[i] != 0:\n    #             factors[i] = 0\n    #             break\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n", "\nfrom math import sqrt\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor i in range(1, n):\n    gcd = gcd(gcd, a[i])\n\ndivisors = []\n\nfor i in range(1, int(sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        divisors.append(i)\n        if i != gcd // i:\n            divisors.append(gcd // i)\n\nprint(len(divisors))\n", "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn //= i\n\n\tif (n > 2):\n\t\tfactors[int(n)] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n", "\n\ndef solve(n, a):\n    if n == 1:\n        return a[0]\n\n    if n == 2:\n        return a[0] + a[1]\n\n    if n == 3:\n        return a[0] + a[1] + a[2]\n\n    a.sort()\n    if n == 4:\n        return max(a[0] + a[1] + a[2] + a[3], a[0] + a[3] + a[3])\n\n    return max(a[0] + a[1] + a[2] + a[3], a[0] + a[1] + a[3] + a[4])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(n, a))\n", "\ndef solve(a):\n    m = min(a)\n    if m == 1:\n        return 1\n\n    factors = []\n    for i in range(2, m+1):\n        if m % i == 0:\n            factors.append(i)\n\n    for i in range(len(factors)):\n        for j in range(len(a)):\n            if a[j] % factors[i] != 0:\n                factors[i] = 0\n                break\n\n    return len([x for x in factors if x != 0])\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n", "\n\nfrom collections import Counter\n\ndef gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef get_prime_factors(n):\n\tfactors = Counter()\n\n\twhile (n % 2 == 0):\n\t\tfactors[2] += 1\n\t\tn /= 2\n\n\tfor i in range(3, int(n**0.5) + 1, 2):\t\t\n\t\twhile (n % i == 0):\n\t\t\tfactors[i] += 1\n\t\t\tn /= i\t\t\t\n\t\n\tif (n > 2):\n\t\tfactors[n] += 1\n\n\treturn factors\n\n\nif __name__ == '__main__':\n\t_ = input()\n\tarr = list(map(int, input().split()))\n\n\tn = len(arr)\n\n\tgcd_so_far = arr[0]\n\tfor i in range(1, n):\n\t\tgcd_so_far = gcd(gcd_so_far, arr[i])\n\n\tif (gcd_so_far == 1):\n\t\tprint(1)\n\telse:\n\t\tfactors = get_prime_factors(gcd_so_far)\n\t\tprint(len(factors))\n", "\n\nif __name__ == \"__main__\":\n    pass\n"]