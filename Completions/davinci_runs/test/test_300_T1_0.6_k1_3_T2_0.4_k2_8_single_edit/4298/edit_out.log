2022-04-20 19:24:56.436172 num operations 1
2022-04-20 19:24:56.436193 size on input set 1
2022-04-20 19:24:56.436418 using api key jaanu
2022-04-20 19:25:02.008763 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650482696,
  "object": "edit"
}
2022-04-20 19:25:02.009095 fix syntax errors 8 ['import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N / (2 * D + 1)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 19:25:02.009146 size on output set 7
2022-04-20 19:25:02.009161 num operations 1
2022-04-20 19:25:02.009170 size on input set 1
2022-04-20 19:25:02.009394 using api key soukgp
2022-04-20 19:25:15.138029 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N + 1):\n        if i < D or i > N - D + 1:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ninspectors = []\n\ndef main():\n    n, d = map(int, input().split())\n    for i in range(1, n+1):\n        if i < d or i > n - d:\n            inspectors.append(i)\n        else:\n            inspectors.append(i)\n            inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ninspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            inspectors.append(i)\n        else:\n            inspectors.append(i)\n            inspectors.append(i)\n            break\n    print(len(inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(1)\n        else:\n            Inspectors.append(2)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break \n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i - D)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i + D)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i >= N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break \n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650482702,
  "object": "edit"
}
2022-04-20 19:25:15.138371 fix syntax errors 8 ['\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N + 1):\n        if i < D or i > N - D + 1:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\ninspectors = []\n\ndef main():\n    n, d = map(int, input().split())\n    for i in range(1, n+1):\n        if i < d or i > n - d:\n            inspectors.append(i)\n        else:\n            inspectors.append(i)\n            inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\ninspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            inspectors.append(i)\n        else:\n            inspectors.append(i)\n            inspectors.append(i)\n            break\n    print(len(inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(1)\n        else:\n            Inspectors.append(2)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break \n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i - D)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i + D)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i >= N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break \n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 19:25:15.138508 size on output set 8
2022-04-20 19:25:15.138525 num operations 1
2022-04-20 19:25:15.138531 size on input set 1
2022-04-20 19:25:15.138691 using api key sourya
2022-04-20 19:25:27.128944 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\n\nprint(num_inspectors)\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nprint(main())\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    }
  ],
  "created": 1650482715,
  "object": "edit"
}
2022-04-20 19:25:27.129242 fix syntax errors 8 ['\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\n\nprint(num_inspectors)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nprint(main())\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\nnum_inspectors = 0\nstart = 1\nwhile start <= n:\n    num_inspectors += 1\n    start += 2 * d + 1\nprint(num_inspectors)\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n']
2022-04-20 19:25:27.129312 size on output set 4
