2022-04-20 19:05:33.593005 num operations 1
2022-04-20 19:05:33.593027 size on input set 1
2022-04-20 19:05:33.593192 using api key kouti
2022-04-20 19:05:47.861614 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points)) \n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    },
    {
      "index": 3,
      "text": "\nfrom math import sqrt\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\n# This is O(n^2) time and O(n) space.\ndef distance(p1, p2):\n    return sqrt(sum((x1 - x2)**2 for x1, x2 in zip(p1, p2)))\n\ndef num_pairs_with_integer_distance(points, distance):\n    pairs = set()\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if distance(points[i], points[j]) == int(distance(points[i], points[j])):\n                pairs.add(tuple(sorted((points[i], points[j]))))\n    return len(pairs)\n\nprint(num_pairs_with_integer_distance(points, distance))\n"
    },
    {
      "index": 4,
      "text": "\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum((x1 - x2)**2 for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n^2) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted((p1, p2)))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    },
    {
      "index": 6,
      "text": "\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin]\n\ndef sq(n):\n    return n * n\n\n\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    },
    {
      "index": 7,
      "text": "\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted((p1, p2)))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    }
  ],
  "created": 1650481533,
  "object": "edit"
}
2022-04-20 19:05:47.861935 fix syntax errors 8 ['\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points)) \n', '\nfrom sys import stdin\n', '\nfrom sys import stdin\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n', '\nfrom math import sqrt\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\n# This is O(n^2) time and O(n) space.\ndef distance(p1, p2):\n    return sqrt(sum((x1 - x2)**2 for x1, x2 in zip(p1, p2)))\n\ndef num_pairs_with_integer_distance(points, distance):\n    pairs = set()\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if distance(points[i], points[j]) == int(distance(points[i], points[j])):\n                pairs.add(tuple(sorted((points[i], points[j]))))\n    return len(pairs)\n\nprint(num_pairs_with_integer_distance(points, distance))\n', '\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum((x1 - x2)**2 for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n', '\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n^2) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted((p1, p2)))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n', '\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin]\n\ndef sq(n):\n    return n * n\n\n\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n', '\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted((p1, p2)))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n']
2022-04-20 19:05:47.862097 size on output set 8
2022-04-20 19:05:47.862111 num operations 1
2022-04-20 19:05:47.862118 size on input set 1
2022-04-20 19:05:47.862299 using api key derek
2022-04-20 19:05:47.897542 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:05:49.399447 using api key kouti
2022-04-20 19:05:55.140968 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 1,
      "text": "import math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\n\nN, D = list(map(int, input().split()))\npoints = []\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 5,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 7,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    }
  ],
  "created": 1650481549,
  "object": "edit"
}
2022-04-20 19:05:55.141262 fix syntax errors 8 ['\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', 'import math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\n\nN, D = list(map(int, input().split()))\npoints = []\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n']
2022-04-20 19:05:55.141311 size on output set 3
2022-04-20 19:05:55.141324 num operations 1
2022-04-20 19:05:55.141331 size on input set 1
2022-04-20 19:05:55.141625 using api key sourya
2022-04-20 19:06:03.888784 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i]) ** 2\n\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i + 1, num_points):\n            if int(distance(points[i], points[j]) ** 0.5) == distance(points[i], points[j]) ** 0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return int(sum**0.5)\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if distance(points[i], points[j]) == distance(points[i], points[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i]) ** 2\n\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i + 1, num_points):\n            if int(distance(points[i], points[j]) ** 0.5) == distance(points[i], points[j]) ** 0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef distance(point1, point2):\n    dist = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef distance(point1, point2, dim):\n    sum = 0\n    for i in range(dim):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j], dim)**0.5) == distance(points[i], points[j], dim)**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == \\\n                    distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == (distance(points[i], points[j])**0.5):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650481555,
  "object": "edit"
}
2022-04-20 19:06:03.889177 fix syntax errors 8 ["\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i]) ** 2\n\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i + 1, num_points):\n            if int(distance(points[i], points[j]) ** 0.5) == distance(points[i], points[j]) ** 0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return int(sum**0.5)\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if distance(points[i], points[j]) == distance(points[i], points[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i]) ** 2\n\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i + 1, num_points):\n            if int(distance(points[i], points[j]) ** 0.5) == distance(points[i], points[j]) ** 0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    dist = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2, dim):\n    sum = 0\n    for i in range(dim):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j], dim)**0.5) == distance(points[i], points[j], dim)**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == \\\n                    distance(points[i], points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == (distance(points[i], points[j])**0.5):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:06:03.889390 size on output set 7
