2022-04-20 18:20:50.741092 num operations 1
2022-04-20 18:20:50.741109 size on input set 1
2022-04-20 18:20:50.741298 using api key gabby
2022-04-20 18:20:50.915940 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 18:20:52.417819 using api key soukgp
2022-04-20 18:20:58.858578 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n\n        print(l[i], end=' ')\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i] - 1] = i + 1\n\nfor i in range(n):\n    if i == n - 1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n"
    },
    {
      "index": 2,
      "text": "# https://codeforces.com/problemset/problem/118/A\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i] - 1] = i + 1\n\nfor i in range(n):\n    if i == n - 1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n"
    },
    {
      "index": 3,
      "text": "import sys\n\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        sys.stdout.write(str(l[i])+' ')\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i] - 1] = i + 1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n"
    }
  ],
  "created": 1650478852,
  "object": "edit"
}
2022-04-20 18:20:58.858888 fix syntax errors 8 ["\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n\n        print(l[i], end=' ')\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i] - 1] = i + 1\n\nfor i in range(n):\n    if i == n - 1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n", "# https://codeforces.com/problemset/problem/118/A\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i] - 1] = i + 1\n\nfor i in range(n):\n    if i == n - 1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n", "import sys\n\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        sys.stdout.write(str(l[i])+' ')\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i] - 1] = i + 1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n"]
2022-04-20 18:20:58.858930 size on output set 6
2022-04-20 18:20:58.858942 num operations 1
2022-04-20 18:20:58.858948 size on input set 1
2022-04-20 18:20:58.859112 using api key gabby
2022-04-20 18:20:58.899215 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 18:21:00.401104 using api key derek
2022-04-20 18:21:00.440688 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 18:21:03.444156 using api key kouti
2022-04-20 18:21:10.508133 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int,input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n"
    },
    {
      "index": 1,
      "text": "#\n\nn = int(input())\na = list(map(int,input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int,input().split()))\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\na = list(map(int,input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\n\nprint(' '.join(map(str,ans)))\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\na = list(map(int,input().split()))\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n"
    }
  ],
  "created": 1650478863,
  "object": "edit"
}
2022-04-20 18:21:10.508421 fix syntax errors 8 ["#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int,input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n", "#\n\nn = int(input())\na = list(map(int,input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n", "\nn = int(input())\na = list(map(int, input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n", "\nn = int(input())\na = list(map(int,input().split()))\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n", "\n\nn = int(input())\na = list(map(int,input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\n\nprint(' '.join(map(str,ans)))\n", "\nn = int(input())\na = list(map(int, input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n", "\nn = int(input())\na = list(map(int, input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str, ans)))\n", "\nn = int(input())\na = list(map(int,input().split()))\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n"]
2022-04-20 18:21:10.508560 size on output set 6
2022-04-20 18:21:10.508576 num operations 1
2022-04-20 18:21:10.508582 size on input set 1
2022-04-20 18:21:10.508817 using api key jaanu
2022-04-20 18:21:50.607356 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Dec  1 17:39:57 2018\n\n@author: kazuki.onodera\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nimport os\nfrom glob import glob\nfrom tqdm import tqdm\n\nimport sys\nsys.path.append(f'/home/{os.environ.get(\"USER\")}/PythonLibrary')\nimport lgbextension as ex\nimport lightgbm as lgb\nfrom multiprocessing import cpu_count\n\nimport utils\nutils.start(__file__)\n#==============================================================================\n\nSUBMIT_FILE_PATH = '../output/1201-1.csv.gz'\n\nCOMMENT = 'top1000 features'\n\nEXE_SUBMIT = True\n\n#DROP = ['f001_hostgal_specz']\n\nSEED = np.random.randint(9999)\nprint('SEED:', SEED)\n\nNFOLD = 5\n\nLOOP = 5\n\nparam = {\n         'objective': 'multiclass',\n         'num_class': 14,\n         'metric': 'multi_logloss',\n         \n         'learning_rate': 0.5,\n         'max_depth': 3,\n         'num_leaves': 63,\n         'max_bin': 255,\n         \n         'min_child_weight': 10,\n         'min_data_in_leaf': 150,\n         'reg_lambda': 0.5,  # L2 regularization term on weights.\n         'reg_alpha': 0.5,  # L1 regularization term on weights.\n         \n         'colsample_bytree': 0.5,\n         'subsample': 0.5,\n#         'nthread': 32,\n         'nthread': cpu_count(),\n         'bagging_freq': 1,\n         'verbose':-1,\n         }\n\n\nnp.random.seed(SEED)\n\n# =============================================================================\n# load\n# =============================================================================\n\nfiles_tr = sorted(glob('../data/train_f*.f'))\n[print(i,f) for i,f in enumerate(files_tr)]\n\nX = pd.concat([\n                pd.read_feather(f) for f in tqdm(files_tr, mininterval=60)\n               ], axis=1)\ny = utils.load_target().target\n\nX.drop(DROP, axis=1, inplace=True)\n\ntarget_dict = {}\ntarget_dict_r = {}\nfor i,e in enumerate(y.sort_values().unique()):\n    target_dict[e] = i\n    target_dict_r[i] = e\n\ny = y.replace(target_dict)\n\nif X.columns.duplicated().sum()>0:\n    raise Exception(f'duplicated!: { X.columns[X.columns.duplicated()] }')\nprint('no dup :) ')\nprint(f'X.shape {X.shape}')\n\ngc.collect()\n\nCOL = X.columns.tolist()\n\n# =============================================================================\n# cv\n# =============================================================================\ndtrain = lgb.Dataset(X, y, #categorical_feature=CAT, \n                     free_raw_data=False)\ngc.collect()\n\nmodel_all = []\nnround_mean = 0\nwloss_list = []\ny_preds = []\nfor i in range(2):\n    gc.collect()\n    param['seed'] = np.random.randint(9999)\n    ret, models = lgb.cv(param, dtrain, 99999, nfold=NFOLD, \n                         feval=utils.lgb_multi_weighted_logloss,\n                         early_stopping_rounds=100, verbose_eval=50,\n                         seed=SEED)\n    y_pred = ex.eval_oob(X, y, models, SEED, stratified=True, shuffle=True, \n                         n_class=14)\n    y_preds.append(y_pred)\n    model_all += models\n    nround_mean += len(ret['multi_logloss-mean'])\n    wloss_list.append( ret['wloss-mean'][-1] )\n\nnround_mean = int((nround_mean/2) * 1.3)\n\nresult = f\"CV wloss: {np.mean(wloss_list)} + {np.std(wloss_list)}\"\nutils.send_line(result)\n\ny_pred = np.mean(y_preds, axis=0)\n\n\nimp = ex.getImp(model_all)\nimp['split'] /= imp['split'].max()\nimp['gain'] /= imp['gain'].max()\nimp['total'] = imp['split'] + imp['gain']\nimp.sort_values('total', ascending=False, inplace=True)\nimp.reset_index(drop=True, inplace=True)\n\n\nimp.to_csv(f'LOG/imp_{__file__}.csv', index=False)\n\n\"\"\"\n\nimp = pd.read_csv('LOG/imp_0915-1.py.csv')\n\n\"\"\"\n\nCOL = imp.head(1000).feature.tolist()\n\n\n# =============================================================================\n# train\n# =============================================================================\n\ndtrain = lgb.Dataset(X[COL], y, #categorical_feature=CAT, \n                     free_raw_data=False)\ngc.collect()\n\nmodel_all = []\nnround_mean = 0\nwloss_list = []\ny_preds = []\nfor i in range(LOOP):\n    gc.collect()\n    param['seed'] = np.random.randint(9999)\n    ret, models = lgb.cv(param, dtrain, 99999, nfold=NFOLD, \n                         feval=utils.lgb_multi_weighted_logloss,\n                         early_stopping_rounds=100, verbose_eval=50,\n                         seed=SEED)\n    y_pred = ex.eval_oob(X[COL], y, models, SEED, stratified=True, shuffle=True, \n                         n_class=14)\n    y_preds.append(y_pred)\n    model_all += models\n    nround_mean += len(ret['multi_logloss-mean'])\n    wloss_list.append( ret['wloss-mean'][-1] )\n\nnround_mean = int((nround_mean/LOOP) * 1.3)\n\nresult = f\"CV wloss: {np.mean(wloss_list)} + {np.std(wloss_list)}\"\nutils.send_line(result)\n\ny_pred = np.mean(y_preds, axis=0)\n\n# =============================================================================\n# test\n# =============================================================================\n\nfiles_te = sorted(glob('../data/test_f*.f'))\n\nX_test = pd.concat([\n                pd.read_feather(f) for f in tqdm(files_te, mininterval=60)\n               ], axis=1)\n\nX_test.drop(DROP, axis=1, inplace=True)\n\nfor i,model in enumerate(tqdm(model_all)):\n    y_pred += model.predict(X_test[COL])\ny_pred /= len(model_all)\n\nsub = pd.read_csv('../input/sample_submission.csv.zip')\ndf = pd.\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i + 1\n\nfor i in l:\n    print(i)\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  file\n#  \n#  Copyright 2018 youcef sourani <youssef.m.sourani@gmail.com>\n#  \n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  \n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#  \n\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n"
    }
  ],
  "created": 1650478870,
  "object": "edit"
}
2022-04-20 18:21:50.607781 fix syntax errors 8 ['\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n', '#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Sat Dec  1 17:39:57 2018\n\n@author: kazuki.onodera\n"""\n\nimport numpy as np\nimport pandas as pd\nimport os\nfrom glob import glob\nfrom tqdm import tqdm\n\nimport sys\nsys.path.append(f\'/home/{os.environ.get("USER")}/PythonLibrary\')\nimport lgbextension as ex\nimport lightgbm as lgb\nfrom multiprocessing import cpu_count\n\nimport utils\nutils.start(__file__)\n#==============================================================================\n\nSUBMIT_FILE_PATH = \'../output/1201-1.csv.gz\'\n\nCOMMENT = \'top1000 features\'\n\nEXE_SUBMIT = True\n\n#DROP = [\'f001_hostgal_specz\']\n\nSEED = np.random.randint(9999)\nprint(\'SEED:\', SEED)\n\nNFOLD = 5\n\nLOOP = 5\n\nparam = {\n         \'objective\': \'multiclass\',\n         \'num_class\': 14,\n         \'metric\': \'multi_logloss\',\n         \n         \'learning_rate\': 0.5,\n         \'max_depth\': 3,\n         \'num_leaves\': 63,\n         \'max_bin\': 255,\n         \n         \'min_child_weight\': 10,\n         \'min_data_in_leaf\': 150,\n         \'reg_lambda\': 0.5,  # L2 regularization term on weights.\n         \'reg_alpha\': 0.5,  # L1 regularization term on weights.\n         \n         \'colsample_bytree\': 0.5,\n         \'subsample\': 0.5,\n#         \'nthread\': 32,\n         \'nthread\': cpu_count(),\n         \'bagging_freq\': 1,\n         \'verbose\':-1,\n         }\n\n\nnp.random.seed(SEED)\n\n# =============================================================================\n# load\n# =============================================================================\n\nfiles_tr = sorted(glob(\'../data/train_f*.f\'))\n[print(i,f) for i,f in enumerate(files_tr)]\n\nX = pd.concat([\n                pd.read_feather(f) for f in tqdm(files_tr, mininterval=60)\n               ], axis=1)\ny = utils.load_target().target\n\nX.drop(DROP, axis=1, inplace=True)\n\ntarget_dict = {}\ntarget_dict_r = {}\nfor i,e in enumerate(y.sort_values().unique()):\n    target_dict[e] = i\n    target_dict_r[i] = e\n\ny = y.replace(target_dict)\n\nif X.columns.duplicated().sum()>0:\n    raise Exception(f\'duplicated!: { X.columns[X.columns.duplicated()] }\')\nprint(\'no dup :) \')\nprint(f\'X.shape {X.shape}\')\n\ngc.collect()\n\nCOL = X.columns.tolist()\n\n# =============================================================================\n# cv\n# =============================================================================\ndtrain = lgb.Dataset(X, y, #categorical_feature=CAT, \n                     free_raw_data=False)\ngc.collect()\n\nmodel_all = []\nnround_mean = 0\nwloss_list = []\ny_preds = []\nfor i in range(2):\n    gc.collect()\n    param[\'seed\'] = np.random.randint(9999)\n    ret, models = lgb.cv(param, dtrain, 99999, nfold=NFOLD, \n                         feval=utils.lgb_multi_weighted_logloss,\n                         early_stopping_rounds=100, verbose_eval=50,\n                         seed=SEED)\n    y_pred = ex.eval_oob(X, y, models, SEED, stratified=True, shuffle=True, \n                         n_class=14)\n    y_preds.append(y_pred)\n    model_all += models\n    nround_mean += len(ret[\'multi_logloss-mean\'])\n    wloss_list.append( ret[\'wloss-mean\'][-1] )\n\nnround_mean = int((nround_mean/2) * 1.3)\n\nresult = f"CV wloss: {np.mean(wloss_list)} + {np.std(wloss_list)}"\nutils.send_line(result)\n\ny_pred = np.mean(y_preds, axis=0)\n\n\nimp = ex.getImp(model_all)\nimp[\'split\'] /= imp[\'split\'].max()\nimp[\'gain\'] /= imp[\'gain\'].max()\nimp[\'total\'] = imp[\'split\'] + imp[\'gain\']\nimp.sort_values(\'total\', ascending=False, inplace=True)\nimp.reset_index(drop=True, inplace=True)\n\n\nimp.to_csv(f\'LOG/imp_{__file__}.csv\', index=False)\n\n"""\n\nimp = pd.read_csv(\'LOG/imp_0915-1.py.csv\')\n\n"""\n\nCOL = imp.head(1000).feature.tolist()\n\n\n# =============================================================================\n# train\n# =============================================================================\n\ndtrain = lgb.Dataset(X[COL], y, #categorical_feature=CAT, \n                     free_raw_data=False)\ngc.collect()\n\nmodel_all = []\nnround_mean = 0\nwloss_list = []\ny_preds = []\nfor i in range(LOOP):\n    gc.collect()\n    param[\'seed\'] = np.random.randint(9999)\n    ret, models = lgb.cv(param, dtrain, 99999, nfold=NFOLD, \n                         feval=utils.lgb_multi_weighted_logloss,\n                         early_stopping_rounds=100, verbose_eval=50,\n                         seed=SEED)\n    y_pred = ex.eval_oob(X[COL], y, models, SEED, stratified=True, shuffle=True, \n                         n_class=14)\n    y_preds.append(y_pred)\n    model_all += models\n    nround_mean += len(ret[\'multi_logloss-mean\'])\n    wloss_list.append( ret[\'wloss-mean\'][-1] )\n\nnround_mean = int((nround_mean/LOOP) * 1.3)\n\nresult = f"CV wloss: {np.mean(wloss_list)} + {np.std(wloss_list)}"\nutils.send_line(result)\n\ny_pred = np.mean(y_preds, axis=0)\n\n# =============================================================================\n# test\n# =============================================================================\n\nfiles_te = sorted(glob(\'../data/test_f*.f\'))\n\nX_test = pd.concat([\n                pd.read_feather(f) for f in tqdm(files_te, mininterval=60)\n               ], axis=1)\n\nX_test.drop(DROP, axis=1, inplace=True)\n\nfor i,model in enumerate(tqdm(model_all)):\n    y_pred += model.predict(X_test[COL])\ny_pred /= len(model_all)\n\nsub = pd.read_csv(\'../input/sample_submission.csv.zip\')\ndf = pd.\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i + 1\n\nfor i in l:\n    print(i)\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  file\n#  \n#  Copyright 2018 youcef sourani <youssef.m.sourani@gmail.com>\n#  \n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  \n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#  \n\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n']
2022-04-20 18:21:50.607877 size on output set 5
