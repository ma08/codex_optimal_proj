["\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n", "\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n", "n = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n", "\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\na.sort()\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n# Pocket number assigned to each coin value\nlast_pocket = {}\n# Number of pockets used\nnum_pockets = 0\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\nprint(num_pockets)\n", "\n\n# n = int(input())\n\n# def get_min_pockets(n, arr):\n#   d = {}\n#   for i in arr:\n#     if i in d:\n#       d[i] += 1\n#     else:\n#       d[i] = 1\n#   return len(d)\n\n# print(get_min_pockets(n, arr))\n# arr = list(map(int, input().split()))\n\nn = 6\narr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr, d):\n  if n == 0:\n    return len(d)\n  else:\n    if arr[n-1] in d:\n      d[arr[n-1]] += 1\n    else:\n      d[arr[n-1]] = 1\n    return get_min_pockets(n-1, arr, d)\n\nprint(get_min_pockets(n, arr, {}))\n", "\n\n# Solution \n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n", "\n\nn = int(input())\n\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n", "\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\na.sort()\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n# Number of pockets used\nnum_pockets = 0\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\nprint(num_pockets)\n", "\n#\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n", "\nn = int(input())\na = set(map(int, input().split()))\nprint(len(a))\n", "\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n", "\n\n# Solution.\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n", "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\n\n\n# def get_min_pockets(n, arr):\n#   d = {}\n#   for i in arr:\n#     if i in d:\n#       d[i] += 1\n#     else:\n#       d[i] = 1\n#   return len(d)\n\n# print(get_min_pockets(n, arr))\nprint(get_min_pockets(n, arr))\n", "\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(a))\n", "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n", "\n", "#https://codeforces.com/contest/1144/problem/A\n\nn = int(input())\na = [int(x) for x in input().split()]\nif len(set(a)) == n:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "\n#\n# # n = int(input())\n# # arr = list(map(int, input().split()))\n#\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n#\n# def get_min_pockets(n, arr):\n#   d = {}\n#   for i in arr:\n#     if i in d:\n#       d[i] += 1\n#     else:\n#       d[i] = 1\n#   return len(d)\n#\n# print(get_min_pockets(n, arr))\n", "\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"]