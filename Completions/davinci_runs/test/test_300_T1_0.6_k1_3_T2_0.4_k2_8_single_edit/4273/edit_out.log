2022-04-20 19:08:07.317033 num operations 1
2022-04-20 19:08:07.317059 size on input set 1
2022-04-20 19:08:07.317307 using api key kouti
2022-04-20 19:08:19.602369 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = [name for name in names if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]]\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport itertools\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().rstrip() for _ in range(N)]\n    marc_names = [name for name in names if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]]\n    marc_names.sort() # \u6587\u5b57\u5217\u306e\u30bd\u30fc\u30c8\u306f\u6607\u9806\n    # 3\u6587\u5b57\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u3046\u3061\u3001\u5148\u982d\u6587\u5b57\u304c\u7570\u306a\u308b\u3082\u306e\u306e\u6570\u3092\u6c42\u3081\u308b\n    print(len([c for c in itertools.combinations(marc_names, 3) if len(set(map(lambda x:x[0], c))) == 3]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = [name for name in names if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]]\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x: x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650481687,
  "object": "edit"
}
2022-04-20 19:08:19.602712 fix syntax errors 8 ['\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = [name for name in names if name[0] in ["M", "A", "R", "C", "H"]]\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport itertools\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().rstrip() for _ in range(N)]\n    marc_names = [name for name in names if name[0] in ["M", "A", "R", "C", "H"]]\n    marc_names.sort() # 文字列のソートは昇順\n    # 3文字選ぶ組み合わせのうち、先頭文字が異なるものの数を求める\n    print(len([c for c in itertools.combinations(marc_names, 3) if len(set(map(lambda x:x[0], c))) == 3]))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in ["M", "A", "R", "C", "H"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = [name for name in names if name[0] in ["M", "A", "R", "C", "H"]]\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in ["M", "A", "R", "C", "H"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in ["M", "A", "R", "C", "H"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in ["M", "A", "R", "C", "H"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in ["M", "A", "R", "C", "H"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x: x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 19:08:19.602868 size on output set 5
2022-04-20 19:08:19.602882 num operations 1
2022-04-20 19:08:19.602889 size on input set 1
2022-04-20 19:08:19.603062 using api key derek
2022-04-20 19:08:19.641729 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:08:21.143643 using api key soukgp
2022-04-20 19:08:31.459667 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = 'MARCH'\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars and len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                    count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "from collections import Counter\n\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    c = Counter(S)\n    ans = 0\n    for i in c.values():\n        if i >= 2:\n            ans += (i * (i - 1)) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N = int(input())\n    S = set(input() for i in range(N))\n    chars = set(['M', 'A', 'R', 'C', 'H'])\n    count = 0\n    for i in S:\n        for j in S:\n            for k in S:\n                if i[0] in chars and j[0] in chars and k[0] in chars:\n                    if len(set([i[0], j[0], k[0]])) == 3:\n                        count += 1 \n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650481701,
  "object": "edit"
}
2022-04-20 19:08:31.460003 fix syntax errors 8 ["\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = 'MARCH'\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars and len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                    count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "from collections import Counter\n\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    c = Counter(S)\n    ans = 0\n    for i in c.values():\n        if i >= 2:\n            ans += (i * (i - 1)) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = set(input() for i in range(N))\n    chars = set(['M', 'A', 'R', 'C', 'H'])\n    count = 0\n    for i in S:\n        for j in S:\n            for k in S:\n                if i[0] in chars and j[0] in chars and k[0] in chars:\n                    if len(set([i[0], j[0], k[0]])) == 3:\n                        count += 1 \n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:08:31.460070 size on output set 5
2022-04-20 19:08:31.460085 num operations 1
2022-04-20 19:08:31.460092 size on input set 1
2022-04-20 19:08:31.460258 using api key sunu
2022-04-20 19:08:43.559243 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M' or name[0] == 'm']\n    names_with_a = [name for name in names if name[0] == 'A' or name[0] == 'a']\n    names_with_r = [name for name in names if name[0] == 'R' or name[0] == 'r']\n    names_with_c = [name for name in names if name[0] == 'C' or name[0] == 'c']\n    names_with_h = [name for name in names if name[0] == 'H' or name[0] == 'h']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names) % (10 ** 9 + 7))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names, n))\n\ndef get_num_triples(names, n):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_m = names_with_m[:n]\n    names_with_a = names_with_a[:n]\n    names_with_r = names_with_r[:n]\n    names_with_c = names_with_c[:n]\n    names_with_h = names_with_h[:n]\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M' or name[0] == 'm']\n    names_with_a = [name for name in names if name[0] == 'A' or name[0] == 'a']\n    names_with_r = [name for name in names if name[0] == 'R' or name[0] == 'r']\n    names_with_c = [name for name in names if name[0] == 'C' or name[0] == 'c']\n    names_with_h = [name for name in names if name[0] == 'H' or name[0] == 'h']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650481711,
  "object": "edit"
}
2022-04-20 19:08:43.559688 fix syntax errors 8 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M' or name[0] == 'm']\n    names_with_a = [name for name in names if name[0] == 'A' or name[0] == 'a']\n    names_with_r = [name for name in names if name[0] == 'R' or name[0] == 'r']\n    names_with_c = [name for name in names if name[0] == 'C' or name[0] == 'c']\n    names_with_h = [name for name in names if name[0] == 'H' or name[0] == 'h']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names) % (10 ** 9 + 7))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names, n))\n\ndef get_num_triples(names, n):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_m = names_with_m[:n]\n    names_with_a = names_with_a[:n]\n    names_with_r = names_with_r[:n]\n    names_with_c = names_with_c[:n]\n    names_with_h = names_with_h[:n]\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M' or name[0] == 'm']\n    names_with_a = [name for name in names if name[0] == 'A' or name[0] == 'a']\n    names_with_r = [name for name in names if name[0] == 'R' or name[0] == 'r']\n    names_with_c = [name for name in names if name[0] == 'C' or name[0] == 'c']\n    names_with_h = [name for name in names if name[0] == 'H' or name[0] == 'h']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 19:08:43.559812 size on output set 5
