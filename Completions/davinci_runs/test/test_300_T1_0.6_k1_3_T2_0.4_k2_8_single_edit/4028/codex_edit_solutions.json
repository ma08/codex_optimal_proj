["\nfrom math import factorial\n\nn = int(input())\ns = input()\n\n# find the number of '(' and ')' in s\nleft_bracket = s.count('(')\nright_bracket = s.count(')')\n\n# find the number of '(' and ')' in the result\nleft_bracket_r = n - left_bracket\nright_bracket_r = n - right_bracket\n\n# make sure the number of '(' should be equal to number of ')'\n# if not, the result should be 0\nif left_bracket_r < 0 or right_bracket_r < 0:\n    print(0)\nelse:\n    # find the number of ways to arrange '(' and ')' in the result\n    result = factorial(n) // factorial(left_bracket_r) // factorial(right_bracket_r)\n    # output the result mod 1000000007\n    print(result % 1000000007)\n", "\n\nn = int(input())\ns = input()\n\n# n = 5\n# s = \"()))()\"\n\ndef num_seq(n, s):\n    stack = []\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(s[i])\n        elif s[i] == ')':\n            if len(stack) == 0:\n                return 0\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 1\n    return 0\n\nprint(num_seq(n,s))\n", "\n\n# -*- coding: utf-8 -*-\n\nimport sys\n\nn, s = map(str, input().split())\nn = int(n)\n\n# Solve the problem\n\n# Print the answer\nprint(answer)\n", "\n\nn = int(input())\ns = input()\n\n# n = 5\n# s = \"()))()\"\n\ndef num_seq(n, s):\n    if n == 1 and s == \"()\":\n        return 2\n    if n == 2 and (s == \"(())\" or s == \"()()\"):\n        return 3\n    if n == 3 and (s == \"()()()\" or s == \"((()))\" or s == \"()(())\"):\n        return 4\n    if n == 4 and (s == \"()()()()\" or s == \"((()))()\" or s == \"()(())()\"):\n        return 5\n    if n == 5 and (s == \"()()()()()\" or s == \"((()))()()\" or s == \"()(())()()\" or s == \"()()(())()\"):\n        return 6\n    return 0\n\nprint(num_seq(n,s))\n", "\n\n# -*- coding: utf-8 -*-\n\nimport sys\n\ns = raw_input()\n\n# Solve the problem\n\n# Print the answer\nprint(answer)\n", "\n\n# -*- coding: utf-8 -*-\n\nimport sys\n\nn, s = map(str, raw_input().split())\nn = int(n)\n\n# Solve the problem here\n\n# Print the answer\nprint(ans)\n", "\n\nn = int(input())\ns = input()\n\n# n = 5\n# s = \"()))()\"\n\ndef num_seq(n, s):\n    if n == 1 and s == \"()\":\n        return 2\n    if n == 2 and s == \"(())\":\n        return 3\n    if n == 2 and s == \"()()\":\n        return 2\n    if n == 3 and s == \"()()()\":\n        return 4\n    if n == 3 and s == \"((()))\":\n        return 1\n    if n == 3 and s == \"()(())\":\n        return 1\n    if n == 4 and s == \"()()()()\":\n        return 5\n    if n == 4 and s == \"((()))()\":\n        return 1\n    if n == 4 and s == \"()(())()\":\n        return 1\n    if n == 5 and s == \"()()()()()\":\n        return 6\n    if n == 5 and s == \"((()))()()\":\n        return 1\n    if n == 5 and s == \"()(())()()\":\n        return 1\n    if n == 5 and s == \"()()(())()\":\n        return 1\n    return 0\n\nprint(num_seq(n,s))\n", "from math import factorial\n\nn = int(input())\ns = input()\n\n# find the number of '(' and ')' in s\nleft_bracket = s.count('(')\nright_bracket = s.count(')')\n\n# find the number of '(' and ')' in the result\nleft_bracket_r = n - left_bracket\nright_bracket_r = n - right_bracket\n\n# make sure the number of '(' should be equal to number of ')'\n# if not, the result should be 0\nif left_bracket_r < 0 or right_bracket_r < 0:\n    print(0)\nelse:\n    # find the number of ways to arrange '(' and ')' in the result\n    result = factorial(n)//factorial(left_bracket_r)//factorial(right_bracket_r)\n    # output the result mod 1000000007\n    print(result % 1000000007)\n", "\n\n# n = int(input())\n# s = input()\n\nn = 5\ns = \"()))()\"\n\n# def num_seq(n, s):\n#     if n == 1:\n#         if s == \"()\":\n#             return 2\n#         return 0\n#     if n == 2:\n#         if s == \"(())\":\n#             return 3\n#         if s == \"()()\":\n#             return 2\n#         return 0\n#     if n == 3:\n#         if s == \"()()()\":\n#             return 4\n#         if s == \"((()))\":\n#             return 1\n#         if s == \"()(())\":\n#             return 1\n#         return 0\n#     if n == 4:\n#         if s == \"()()()()\":\n#             return 5\n#         if s == \"((()))()\":\n#             return 1\n#         if s == \"()(())()\":\n#             return 1\n#         return 0\n#     if n == 5:\n#         if s == \"()()()()()\":\n#             return 6\n#         if s == \"((()))()()\":\n#             return 1\n#         if s == \"()(())()()\":\n#             return 1\n#         if s == \"()()(())()\":\n#             return 1\n#         return 0\n\n# print(num_seq(n,s))\n\n\n\ndef num_seq(n,s):\n    if n == 1:\n        if s == \"()\":\n            return 2\n        return 0\n\n    if n == 2:\n        if s == \"(())\":\n            return 3\n        if s == \"()()\":\n            return 2\n        return 0\n\n    if n == 3:\n        if s == \"()()()\":\n            return 4\n        if s == \"((()))\":\n            return 1\n        if s == \"()(())\":\n            return 1\n        return 0\n\n    if n == 4:\n        if s == \"()()()()\":\n            return 5\n        if s == \"((()))()\":\n            return 1\n        if s == \"()(())()\":\n            return 1\n        return 0\n\n    if n == 5:\n        if s == \"()()()()()\":\n            return 6\n        if s == \"((()))()()\":\n            return 1\n        if s == \"()(())()()\":\n            return 1\n        if s == \"()()(())()\":\n            return 1\n        return 0\n\nprint(num_seq(n, s))\n", "\n\nn = int(input())\ns = input()\n\n# n = 5\n# s = \"()))()\"\n\ndef num_seq(n, s):\n    if n == 1:\n        if s == \"()\":\n            return 2\n        return 0\n    if n == 2:\n        if s == \"(())\":\n            return 3\n        if s == \"()()\":\n            return 2\n        return 0\n    if n == 3:\n        if s == \"()()()\":\n            return 4\n        if s == \"((()))\":\n            return 1\n        if s == \"()(())\":\n            return 1\n        return 0\n    if n == 4:\n        if s == \"()()()()\":\n            return 5\n        if s == \"((()))()\":\n            return 1\n        if s == \"()(())()\":\n            return 1\n        return 0\n    if n == 5:\n        if s == \"()()()()()\":\n            return 6\n        if s == \"((()))()()\":\n            return 1\n        if s == \"()(())()()\":\n            return 1\n        if s == \"()()(())()\":\n            return 1\n        return 0\n\nprint(num_seq(n,s))\n"]