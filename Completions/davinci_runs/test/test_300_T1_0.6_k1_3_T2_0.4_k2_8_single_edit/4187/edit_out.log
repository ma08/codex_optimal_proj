2022-04-20 18:14:48.868155 num operations 1
2022-04-20 18:14:48.868172 size on input set 1
2022-04-20 18:14:48.868345 using api key sourya
2022-04-20 18:14:57.424779 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.extend([0, 0])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0]) # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043d\u0435\u0446\na.append(a[1]) # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043d\u0435\u0446\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2): # \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 0:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    },
    {
      "index": 6,
      "text": "\nprint('hello')\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n"
    }
  ],
  "created": 1650478489,
  "object": "edit"
}
2022-04-20 18:14:57.425074 fix syntax errors 8 ['\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.extend([0, 0])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0]) # добавляем первый элемент в конец\na.append(a[1]) # добавляем второй элемент в конец\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2): # рассматриваем все элементы в массиве, включая добавленные\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 0:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n', "\nprint('hello')\n", '#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\na.append(a[0])\na.append(a[1])\n\nbest = 0\nlength = 0\n\nfor i in range(n + 2):\n    if a[i] == 1:\n        length += 1\n    else:\n        best = max(best, length)\n        length = 0\n\nprint(best)\n']
2022-04-20 18:14:57.425128 size on output set 6
2022-04-20 18:14:57.425141 num operations 1
2022-04-20 18:14:57.425146 size on input set 1
2022-04-20 18:14:57.425307 using api key kouti
2022-04-20 18:15:14.371875 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == \"__main__\":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == \"__main__\":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n"
    },
    {
      "index": 3,
      "text": "\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 4,
      "text": "\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\n\nif __name__ == \"__main__\":\n    n = int(input())  # number of hours per day\n    a = list(map(int, input().split()))  # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n"
    },
    {
      "index": 5,
      "text": "\n# http://codeforces.com/problemset/problem/1168/A\n\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 6,
      "text": "\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    },
    {
      "index": 7,
      "text": "\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == \"__main__\":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n"
    }
  ],
  "created": 1650478497,
  "object": "edit"
}
2022-04-20 18:15:14.372307 fix syntax errors 8 ['\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\n\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == "__main__":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n', '\n\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\nif __name__ == "__main__":\n    n = int(input()) # number of hours per day\n    a = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n', '\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\n    # The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n    max_consecutive_ones = 0\n    curr_consecutive_ones = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            curr_consecutive_ones += 1\n            if curr_consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = curr_consecutive_ones\n        else:\n            curr_consecutive_ones = 0\n\n    return max_consecutive_ones\n\n\nif __name__ == "__main__":\n    n = int(input())  # number of hours per day\n    a = list(map(int, input().split()))  # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n    print(solution(n, a))\n', '\n# http://codeforces.com/problemset/problem/1168/A\n\n\ndef solution(n, a):\n    # n: int, the number of hours per day\n    # a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n    # return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n', '\ndef solution(n, a):\n\t# n: int, the number of hours per day\n\t# a: list of int, 0 if the ith hour in a day is working and 1 if the ith hour is resting\n\t# return: int, the maximal number of continuous hours during which Polycarp rests.\n\n\t# The maximal number of continuous hours during which Polycarp rests is the maximal number of consecutive ones in a\n\tmax_consecutive_ones = 0\n\tcurr_consecutive_ones = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\tcurr_consecutive_ones += 1\n\t\t\tif curr_consecutive_ones > max_consecutive_ones:\n\t\t\t\tmax_consecutive_ones = curr_consecutive_ones\n\t\telse:\n\t\t\tcurr_consecutive_ones = 0\n\n\treturn max_consecutive_ones\n\nif __name__ == "__main__":\n\tn = int(input()) # number of hours per day\n\ta = list(map(int, input().split())) # 0 if the ith hour in a day is working, 1 if the ith hour is resting\n\tprint(solution(n, a))\n']
2022-04-20 18:15:14.372391 size on output set 4
2022-04-20 18:15:14.372405 num operations 1
2022-04-20 18:15:14.372410 size on input set 1
2022-04-20 18:15:14.372601 using api key derek
2022-04-20 18:15:14.414180 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 18:15:15.916064 using api key sunu
2022-04-20 18:15:21.084108 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 2,
      "text": "n = int(input())\n\n\na = list(map(int, input().split()))\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\nprint(m)\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 0:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n"
    }
  ],
  "created": 1650478515,
  "object": "edit"
}
2022-04-20 18:15:21.084518 fix syntax errors 8 ['\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', 'n = int(input())\n\n\na = list(map(int, input().split()))\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\nprint(m)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 1:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\ni, j, m = 0, 0, 0\n\nwhile i < n:\n    while j < n and a[j] == 0:\n        j += 1\n    m = max(m, j - i)\n    i = j + 1\n    j = i\n\nprint(m)\n']
2022-04-20 18:15:21.084561 size on output set 4
