2022-04-20 16:46:32.517243 num operations 1
2022-04-20 16:46:32.517262 size on input set 1
2022-04-20 16:46:32.517474 using api key kouti
2022-04-20 16:46:40.651844 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    a, b, c = map(int, input().split())\n\n    if a + b + c > 7:\n        print(7)\n    else:\n        print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    a, b, c = [int(input()) for _ in range(3)]\n\n    if a + b + c > 7:\n        print(7)\n    else:\n        print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    a, b, c = [int(x) for x in input().split()]\n\n    print(a + b + c) if a + b + c < 7 else print(7)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    a, b, c = [int(x) for x in input().split(\" \")]\n\n    if a + b + c > 7:\n        print(7)\n    else:\n        print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    a, b, c = map(int, input().split())\n\n    if a + b + c > 7:\n        print(7)\n\n    else:\n        print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    a, b, c = [int(x) for x in input().split()]  # list comprehension\n    print(max(a + b + c, 7))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    a, b, c = [int(x) for x in input().split()]\n\n    if a + b + c > 7:\n        print(7)\n\n    else:\n        print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    a, b, c = [int(x) for x in input().split()]  # \u5165\u529b\u3092\u5206\u5272\u3057\u3066\u6574\u6570\u306b\u5909\u63db\n\n    if a + b + c > 7:  # \u5408\u8a08\u304c7\u3088\u308a\u5927\u304d\u3051\u308c\u30707\n        print(7)  # 7\u3092\u51fa\u529b\n    else:\n        print(a + b + c)  # \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u5408\u8a08\u3092\u51fa\u529b\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650473192,
  "object": "edit"
}
2022-04-20 16:46:40.652147 fix syntax errors 8 ["\n\ndef main():\n    a, b, c = map(int, input().split())\n\n    if a + b + c > 7:\n        print(7)\n    else:\n        print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b, c = [int(input()) for _ in range(3)]\n\n    if a + b + c > 7:\n        print(7)\n    else:\n        print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b, c = [int(x) for x in input().split()]\n\n    print(a + b + c) if a + b + c < 7 else print(7)\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    a, b, c = [int(x) for x in input().split(" ")]\n\n    if a + b + c > 7:\n        print(7)\n    else:\n        print(a + b + c)\n\nif __name__ == \'__main__\':\n    main()\n', "\ndef main():\n    a, b, c = map(int, input().split())\n\n    if a + b + c > 7:\n        print(7)\n\n    else:\n        print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a, b, c = [int(x) for x in input().split()]  # list comprehension\n    print(max(a + b + c, 7))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a, b, c = [int(x) for x in input().split()]\n\n    if a + b + c > 7:\n        print(7)\n\n    else:\n        print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b, c = [int(x) for x in input().split()]  # 入力を分割して整数に変換\n\n    if a + b + c > 7:  # 合計が7より大きければ7\n        print(7)  # 7を出力\n    else:\n        print(a + b + c)  # そうでなければ合計を出力\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 16:46:40.652197 size on output set 8
2022-04-20 16:46:40.652209 num operations 1
2022-04-20 16:46:40.652215 size on input set 1
2022-04-20 16:46:40.652378 using api key gabby
2022-04-20 16:46:46.103937 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport math\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n"
    },
    {
      "index": 1,
      "text": "print('Hello World')\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport math\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n"
    },
    {
      "index": 3,
      "text": "\n\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n"
    },
    {
      "index": 4,
      "text": "a, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n"
    },
    {
      "index": 5,
      "text": "import sys\nimport math\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n"
    },
    {
      "index": 6,
      "text": "import sys\nimport math\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n"
    },
    {
      "index": 7,
      "text": "\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n"
    }
  ],
  "created": 1650473200,
  "object": "edit"
}
2022-04-20 16:46:46.104215 fix syntax errors 8 ['import sys\nimport math\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n', "print('Hello World')\n", 'import sys\nimport math\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n', '\n\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n', 'a, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n', 'import sys\nimport math\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n', 'import sys\nimport math\n\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n', '\na, b, c = map(int, input().split())\n\nprint(a + b + c - max(a, b, c) - min(a, b, c))\n']
2022-04-20 16:46:46.104245 size on output set 5
2022-04-20 16:46:46.104256 num operations 1
2022-04-20 16:46:46.104262 size on input set 1
2022-04-20 16:46:46.104453 using api key jaanu
2022-04-20 16:47:21.931806 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n"
    },
    {
      "index": 1,
      "text": "\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n"
    },
    {
      "index": 2,
      "text": "\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n"
    },
    {
      "index": 3,
      "text": "\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n"
    },
    {
      "index": 4,
      "text": "\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n"
    },
    {
      "index": 5,
      "text": "\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n"
    },
    {
      "index": 6,
      "text": "\na, b, c = map(int, input().split())\n\nif a < b:\n    a, b = b, a\nif b < c:\n    b, c = c, b\nif a < b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a > days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n"
    },
    {
      "index": 7,
      "text": "\n#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2017-11-30\n#\n# Modified by: \n#\n\nfrom __future__ import absolute_import, division, print_function\n\nimport os\nimport torch\nimport torch.nn.functional as F\nimport torch.utils.data as data\nimport torchvision.transforms as transforms\n\nfrom PIL import Image\nfrom tqdm import tqdm\n\n\nclass VOC2012ClassSeg(data.Dataset):\n    \"\"\"\n    PASCAL VOC 2012 semantic segmentation dataset\n    \"\"\"\n\n    _voc_root = \"/home/kazuto1011/datasets/VOCdevkit/VOC2012/\"\n    _mask_dir = _voc_root + \"SegmentationClass/\"\n    _image_dir = _voc_root + \"JPEGImages/\"\n\n    def __init__(self, split=\"train\", transform=None, target_transform=None):\n        super(VOC2012ClassSeg, self).__init__()\n        self.split = split\n        self.transform = transform\n        self.target_transform = target_transform\n\n        _splits_dir = os.path.join(self._voc_root, \"ImageSets/Segmentation\")\n\n        _split_f = os.path.join(\n            _splits_dir,\n            \"train.txt\" if self.split == \"train\" else \"val.txt\",\n        )\n\n        self.im_ids = []\n        self.images = []\n        self.masks = []\n\n        with open(os.path.join(_split_f), \"r\") as f:\n            lines = f.read().splitlines()\n\n        for ii, line in tqdm(enumerate(lines), total=len(lines)):\n            _image = os.path.join(self._image_dir, line + \".jpg\")\n            assert os.path.isfile(_image)\n            self.im_ids.append(line)\n            self.images.append(_image)\n            if split != \"test\":\n                _mask = os.path.join(self._mask_dir, line + \".png\")\n                assert os.path.isfile(_mask)\n                self.masks.append(_mask)\n\n    def __getitem__(self, index):\n        _img, _target = self.make_img_gt_point_pair(index)\n        sample = {'image': _img, 'label': _target}\n\n        if self.transform is not None:\n            sample = self.transform(sample)\n\n        if self.target_transform is not None:\n            sample[\"label\"] = self.target_transform(sample[\"label\"])\n\n        return sample\n\n    def __len__(self):\n        return len(self.images)\n\n    def make_img_gt_point_pair(self, index):\n        _img = Image.open(self.images[index]).convert('RGB')\n        if self.split == \"test\":\n            return _img, os.path.basename(self.images[index])\n\n        _target = Image.open(self.masks[index])\n\n        return _img, _target\n\n\nclass VOC2012ClassSegInstance(VOC2012ClassSeg):\n    \"\"\"\n    PASCAL VOC 2012 semantic segmentation dataset\n    (with instance segmentation annotations)\n    \"\"\"\n\n    _voc_root = \"/home/kazuto1011/datasets/VOCdevkit/VOC2012/\"\n    _mask_dir = _voc_root + \"SegmentationClass/\"\n    _image_dir = _voc_root + \"JPEGImages/\"\n\n    def __init__(self, split=\"train\", transform=None, target_transform=None):\n        super(VOC2012ClassSegInstance, self).__init__(\n            split, transform, target_transform\n        )\n        self._mask_dir = self._voc_root + \"SegmentationObject/\"\n\n    def __getitem__(self, index):\n        _img, _target = self.make_img_gt_point_pair(index)\n        sample = {'image': _img, 'label': _target}\n\n        if self.transform is not None:\n            sample = self.transform(sample)\n\n        if self.target_transform is not None:\n            sample[\"label\"] = self.target_transform(sample[\"label\"])\n\n        return sample\n\n\nif __name__ == \"__main__\":\n    from torch.utils.data import DataLoader\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    voc_train = VOC2012ClassSegInstance(split=\"train\")\n    voc_val = VOC2012ClassSegInstance(split=\"val\")\n    voc_test = VOC2012ClassSegInstance(split=\"test\")\n\n    print(\"# train: {}\".format(len(voc_train)))\n    print(\"# val: {}\".format(len(voc_val)))\n    print(\"# test: {}\".format(len(voc_test)))\n\n    dataloader = DataLoader(voc_train, batch_size=4, shuffle=True, num_workers=4)\n\n    for ii, sample in enumerate(dataloader):\n        for jj in range(sample[\"image\"].size()[0]):\n            img = sample[\"image\"].numpy()\n            gt = sample[\"label\"].numpy()\n            tmp = np.array(gt[jj]).astype(np.uint8)\n            segmap = decode_segmap(tmp, dataset='pascal')\n            img_tmp = np.transpose(img[jj], axes=[1, 2, 0])\n            img_tmp *= (0.229, 0.224, 0.225)\n            img_tmp += (0.485, 0.456, 0.406)\n            img_tmp *= 255.0\n            img_tmp = img_tmp.astype(np.uint8)\n            plt.figure()\n            plt.title('display')\n            plt.subplot(211)\n            plt.imshow(img_tmp)\n            plt.subplot(212)\n            plt.imshow(segmap)\n\n        if ii == 1:\n            break\n\n    plt.show(block=True)\n"
    }
  ],
  "created": 1650473206,
  "object": "edit"
}
2022-04-20 16:47:21.932212 fix syntax errors 8 ['\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n', '\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n', '\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n', '\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n', '\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n', '\n\na, b, c = map(int, input().split())\n\nif a<b:\n    a, b = b, a\nif b<c:\n    b, c = c, b\nif a<b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a>days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n', '\na, b, c = map(int, input().split())\n\nif a < b:\n    a, b = b, a\nif b < c:\n    b, c = c, b\nif a < b:\n    a, b = b, a\n\ndays = a+b+c\n\nif a > days//2:\n    days = days//2\nelse:\n    days = days-a\n\nprint(days)\n', '\n#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2017-11-30\n#\n# Modified by: \n#\n\nfrom __future__ import absolute_import, division, print_function\n\nimport os\nimport torch\nimport torch.nn.functional as F\nimport torch.utils.data as data\nimport torchvision.transforms as transforms\n\nfrom PIL import Image\nfrom tqdm import tqdm\n\n\nclass VOC2012ClassSeg(data.Dataset):\n    """\n    PASCAL VOC 2012 semantic segmentation dataset\n    """\n\n    _voc_root = "/home/kazuto1011/datasets/VOCdevkit/VOC2012/"\n    _mask_dir = _voc_root + "SegmentationClass/"\n    _image_dir = _voc_root + "JPEGImages/"\n\n    def __init__(self, split="train", transform=None, target_transform=None):\n        super(VOC2012ClassSeg, self).__init__()\n        self.split = split\n        self.transform = transform\n        self.target_transform = target_transform\n\n        _splits_dir = os.path.join(self._voc_root, "ImageSets/Segmentation")\n\n        _split_f = os.path.join(\n            _splits_dir,\n            "train.txt" if self.split == "train" else "val.txt",\n        )\n\n        self.im_ids = []\n        self.images = []\n        self.masks = []\n\n        with open(os.path.join(_split_f), "r") as f:\n            lines = f.read().splitlines()\n\n        for ii, line in tqdm(enumerate(lines), total=len(lines)):\n            _image = os.path.join(self._image_dir, line + ".jpg")\n            assert os.path.isfile(_image)\n            self.im_ids.append(line)\n            self.images.append(_image)\n            if split != "test":\n                _mask = os.path.join(self._mask_dir, line + ".png")\n                assert os.path.isfile(_mask)\n                self.masks.append(_mask)\n\n    def __getitem__(self, index):\n        _img, _target = self.make_img_gt_point_pair(index)\n        sample = {\'image\': _img, \'label\': _target}\n\n        if self.transform is not None:\n            sample = self.transform(sample)\n\n        if self.target_transform is not None:\n            sample["label"] = self.target_transform(sample["label"])\n\n        return sample\n\n    def __len__(self):\n        return len(self.images)\n\n    def make_img_gt_point_pair(self, index):\n        _img = Image.open(self.images[index]).convert(\'RGB\')\n        if self.split == "test":\n            return _img, os.path.basename(self.images[index])\n\n        _target = Image.open(self.masks[index])\n\n        return _img, _target\n\n\nclass VOC2012ClassSegInstance(VOC2012ClassSeg):\n    """\n    PASCAL VOC 2012 semantic segmentation dataset\n    (with instance segmentation annotations)\n    """\n\n    _voc_root = "/home/kazuto1011/datasets/VOCdevkit/VOC2012/"\n    _mask_dir = _voc_root + "SegmentationClass/"\n    _image_dir = _voc_root + "JPEGImages/"\n\n    def __init__(self, split="train", transform=None, target_transform=None):\n        super(VOC2012ClassSegInstance, self).__init__(\n            split, transform, target_transform\n        )\n        self._mask_dir = self._voc_root + "SegmentationObject/"\n\n    def __getitem__(self, index):\n        _img, _target = self.make_img_gt_point_pair(index)\n        sample = {\'image\': _img, \'label\': _target}\n\n        if self.transform is not None:\n            sample = self.transform(sample)\n\n        if self.target_transform is not None:\n            sample["label"] = self.target_transform(sample["label"])\n\n        return sample\n\n\nif __name__ == "__main__":\n    from torch.utils.data import DataLoader\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    voc_train = VOC2012ClassSegInstance(split="train")\n    voc_val = VOC2012ClassSegInstance(split="val")\n    voc_test = VOC2012ClassSegInstance(split="test")\n\n    print("# train: {}".format(len(voc_train)))\n    print("# val: {}".format(len(voc_val)))\n    print("# test: {}".format(len(voc_test)))\n\n    dataloader = DataLoader(voc_train, batch_size=4, shuffle=True, num_workers=4)\n\n    for ii, sample in enumerate(dataloader):\n        for jj in range(sample["image"].size()[0]):\n            img = sample["image"].numpy()\n            gt = sample["label"].numpy()\n            tmp = np.array(gt[jj]).astype(np.uint8)\n            segmap = decode_segmap(tmp, dataset=\'pascal\')\n            img_tmp = np.transpose(img[jj], axes=[1, 2, 0])\n            img_tmp *= (0.229, 0.224, 0.225)\n            img_tmp += (0.485, 0.456, 0.406)\n            img_tmp *= 255.0\n            img_tmp = img_tmp.astype(np.uint8)\n            plt.figure()\n            plt.title(\'display\')\n            plt.subplot(211)\n            plt.imshow(img_tmp)\n            plt.subplot(212)\n            plt.imshow(segmap)\n\n        if ii == 1:\n            break\n\n    plt.show(block=True)\n']
2022-04-20 16:47:21.932295 size on output set 3
