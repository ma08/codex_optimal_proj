["\n\ndef main():\n    x1, y1, x2, y2 = [int(i) for i in input().split()]\n    x3, y3, x4, y4 = [int(i) for i in input().split()]\n    x5, y5, x6, y6 = [int(i) for i in input().split()]\n    if x1 >= x4 or x3 >= x2 or y1 >= y4 or y3 >= y2:\n        print(\"NO\")\n        return\n    if x1 >= x6 or x5 >= x2 or y1 >= y6 or y5 >= y2:\n        print(\"NO\")\n        return\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "var fs = require('fs');\nvar path = require('path');\n\nvar file = fs.readFileSync(path.join(__dirname, './test.txt'), 'utf8');\n\nvar lines = file.split('\\n');\n\nvar words = lines.map(function(line) {\n  return line.split(' ');\n});\n\nvar wordCount = words.map(function(word) {\n  return word.length;\n});\n\nvar total = wordCount.reduce(function(a, b) {\n  return a + b;\n});\n\nconsole.log(total);\n", "/**\n * Created by YYW on 2017/4/13.\n */\nvar fs = require('fs');\nvar path = require('path');\n\nvar file = {\n    // \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\n    readFile: function(fileName) {\n        return new Promise(function(resolve, reject) {\n            fs.readFile(fileName, function(error, data) {\n                if (error) return reject(error);\n                resolve(data);\n            });\n        });\n    },\n    // \u5199\u5165\u6587\u4ef6\u5185\u5bb9\n    writeFile: function(fileName, data) {\n        return new Promise(function(resolve, reject) {\n            fs.writeFile(fileName, data, function(error) {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    },\n    // \u83b7\u53d6\u6587\u4ef6\u5217\u8868\n    readDir: function(filePath) {\n        return new Promise(function(resolve, reject) {\n            fs.readdir(filePath, function(error, files) {\n                if (error) return reject(error);\n                resolve(files);\n            });\n        });\n    },\n    // \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\n    stat: function(filePath) {\n        return new Promise(function(resolve, reject) {\n            fs.stat(filePath, function(error, stats) {\n                if (error) return reject(error);\n                resolve(stats);\n            });\n        });\n    },\n    // \u5220\u9664\u6587\u4ef6\n    unlink: function(filePath) {\n        return new Promise(function(resolve, reject) {\n            fs.unlink(filePath, function(error) {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    },\n    // \u521b\u5efa\u6587\u4ef6\u5939\n    mkdir: function(filePath) {\n        return new Promise(function(resolve, reject) {\n            fs.mkdir(filePath, function(error) {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    },\n    // \u5220\u9664\u6587\u4ef6\u5939\n    rmdir: function(filePath) {\n        return new Promise(function(resolve, reject) {\n            fs.rmdir(filePath, function(error) {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    },\n    // \u5220\u9664\u6587\u4ef6\u5939\uff08\u9012\u5f52\u5220\u9664\uff09\n    rmdirRecursive: function(filePath) {\n        var me = this;\n        return me.readDir(filePath).then(function(files) {\n            return Promise.all(files.map(function(file) {\n                return me.stat(path.join(filePath, file)).then(function(stats) {\n                    if (stats.isDirectory()) {\n                        return me.rmdirRecursive(path.join(filePath, file));\n                    } else {\n                        return me.unlink(path.join(filePath, file));\n                    }\n                });\n            }));\n        }).then(function() {\n            return me.rmdir(filePath);\n        });\n    },\n    // \u590d\u5236\u6587\u4ef6\n    copyFile: function(sourcePath, targetPath) {\n        var me = this;\n        return me.readFile(sourcePath).then(function(data) {\n            return me.writeFile(targetPath, data);\n        });\n    },\n    // \u590d\u5236\u6587\u4ef6\u5939\n    copyDir: function(sourcePath, targetPath) {\n        var me = this;\n        return me.readDir(sourcePath).then(function(files) {\n            return Promise.all(files.map(function(file) {\n                return me.stat(path.join(sourcePath, file)).then(function(stats) {\n                    if (stats.isDirectory()) {\n                        return me.mkdir(path.join(targetPath, file)).then(function() {\n                            return me.copyDir(path.join(sourcePath, file), path.join(targetPath, file));\n                        });\n                    } else {\n                        return me.copyFile(path.join(sourcePath, file), path.join(targetPath, file));\n                    }\n                });\n            }));\n        });\n    }\n};\n\nmodule.exports = file;\n", "\n# This solution is wrong\n\nx1 = int(input())\ny1 = int(input())\nx2 = int(input())\ny2 = int(input())\n\nx3 = int(input())\ny3 = int(input())\nx4 = int(input())\ny4 = int(input())\n\nx5 = int(input())\ny5 = int(input())\nx6 = int(input())\ny6 = int(input())\n\nx_list = [x1, x2, x3, x4, x5, x6]\ny_list = [y1, y2, y3, y4, y5, y6]\n\nx_list.sort()\ny_list.sort()\n\nx_max = x_list[-1]\nx_min = x_list[0]\ny_max = y_list[-1]\ny_min = y_list[0]\n\nflag = True\n\nfor i in range(x_min, x_max+1):\n    for j in range(y_min, y_max+1):\n        if x_min < i < x_max and y_min < j < y_max:\n            flag = False\n\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "#!/usr/bin/python\n\nimport os\nimport sys\n\nif len(sys.argv) > 1:\n    filename = sys.argv[1]\n    if not os.path.isfile(filename):\n        print \"[-] \" + filename + \" does not exist.\"\n        exit(0)\n    if not os.access(filename, os.R_OK):\n        print \"[-] \" + filename + \" access denied.\"\n        exit(0)\n    print \"[+] Reading Vulnerabilities From: \" + filename\nelse:\n    print \"[-] Usage: \" + str(sys.argv[0]) + \" <vuln filename>\"\n    exit(0)\n\nfile = open(filename, 'r')\nfor line in file.readlines():\n    print line\n", "\n#This solution is wrong, but I can't find the problem\n\nx1 = int(input())\ny1 = int(input())\nx2 = int(input())\ny2 = int(input())\n\nx3 = int(input())\ny3 = int(input())\nx4 = int(input())\ny4 = int(input())\n\nx5 = int(input())\ny5 = int(input())\nx6 = int(input())\ny6 = int(input())\n\nx_list = [x1,x2,x3,x4,x5,x6]\ny_list = [y1,y2,y3,y4,y5,y6]\n\nx_list.sort()\ny_list.sort()\n\nx_max = x_list[-1]\nx_min = x_list[0]\ny_max = y_list[-1]\ny_min = y_list[0]\n\nflag = True\n\nfor i in range(x_min,x_max+1):\n    for j in range(y_min,y_max+1):\n        if x_min<i<x_max and y_min<j<y_max:\n            flag = False\n\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "This is a file\n", "\n# This solution is wrong\n\nx1 = int(input())\ny1 = int(input())\nx2 = int(input())\ny2 = int(input())\n\nx3 = int(input())\ny3 = int(input())\nx4 = int(input())\ny4 = int(input())\n\nx5 = int(input())\ny5 = int(input())\nx6 = int(input())\ny6 = int(input())\n\nx_list = [x1,x2,x3,x4,x5,x6]\ny_list = [y1,y2,y3,y4,y5,y6]\n\nx_list.sort()\ny_list.sort()\n\nx_max = x_list[-1]\nx_min = x_list[0]\ny_max = y_list[-1]\ny_min = y_list[0]\n\nflag = True\n\nfor i in range(x_min,x_max+1):\n    for j in range(y_min,y_max+1):\n        if x_min<i<x_max and y_min<j<y_max:\n            flag = False\n\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "var fs = require('fs');\n\n// var file = fs.readFileSync(process.argv[2]);\n// var file = file.toString();\n// var file = file.split('\\n');\n// console.log(file.length - 1);\n\nfs.readFile(process.argv[2], 'utf8', function(err, data) {\n  var file = data.split('\\n');\n  console.log(file.length - 1);\n});\n", "// var fs = require('fs');\n// var file = fs.readFileSync(process.argv[2]);\n// var lines = file.toString().split('\\n').length - 1;\n// console.log(lines);\n\nvar fs = require('fs');\nvar file = fs.readFile(process.argv[2], function (err, data) {\n  var lines = data.toString().split('\\n').length - 1;\n  console.log(lines);\n});\n", "\nx1 = int(input())\ny1 = int(input())\nx2 = int(input())\ny2 = int(input())\n\nx3 = int(input())\ny3 = int(input())\nx4 = int(input())\ny4 = int(input())\n\nx5 = int(input())\ny5 = int(input())\nx6 = int(input())\ny6 = int(input())\n\nx_list = [x1, x2, x3, x4, x5, x6]\ny_list = [y1, y2, y3, y4, y5, y6]\n\nx_list.sort()\ny_list.sort()\n\nx_max = x_list[-1]\nx_min = x_list[0]\ny_max = y_list[-1]\ny_min = y_list[0]\n\nflag = True\n\nfor i in range(x_min, x_max + 1):\n    for j in range(y_min, y_max + 1):\n        if x_min < i < x_max and y_min < j < y_max:\n            flag = False\n\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\n\n# \u6587\u4ef6\n# open() \u51fd\u6570\n# open() \u51fd\u6570\u5e38\u7528\u5f62\u5f0f\u662f\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1a\u6587\u4ef6\u540d(file)\u548c\u6a21\u5f0f(mode)\u3002\n# open(filename, mode)\n# \u6a21\u5f0f\t\u63cf\u8ff0\n# t\t\u6587\u672c\u6a21\u5f0f (\u9ed8\u8ba4)\u3002\n# x\t\u5199\u6a21\u5f0f\uff0c\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u4f1a\u62a5\u9519\u3002\n# b\t\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002\n# +\t\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c\u66f4\u65b0(\u53ef\u8bfb\u53ef\u5199)\u3002\n# U\t\u901a\u7528\u6362\u884c\u6a21\u5f0f\uff08\u4e0d\u63a8\u8350\uff09\u3002\n# r\t\u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u3002\u6587\u4ef6\u7684\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002\n# rb\t\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u53ea\u8bfb\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002\u4e00\u822c\u7528\u4e8e\u975e\u6587\u672c\u6587\u4ef6\u5982\u56fe\u7247\u7b49\u3002\n# r+\t\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\n# rb+\t\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u4e00\u822c\u7528\u4e8e\u975e\u6587\u672c\u6587\u4ef6\u5982\u56fe\u7247\u7b49\u3002\n# w\t\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5373\u539f\u6709\u5185\u5bb9\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002\n# wb\t\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5373\u539f\u6709\u5185\u5bb9\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002\u4e00\u822c\u7528\u4e8e\u975e\u6587\u672c\u6587\u4ef6\u5982\u56fe\u7247\u7b49\u3002\n# w+\t\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5373\u539f\u6709\u5185\u5bb9\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002\n# wb+\t\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5373\u539f\u6709\u5185\u5bb9\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002\u4e00\u822c\u7528\u4e8e\u975e\u6587\u672c\u6587\u4ef6\u5982\u56fe\u7247\u7b49\u3002\n# a\t\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u7684\u5185\u5bb9\u5c06\u4f1a\u88ab\u5199\u5165\u5230\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u8fdb\u884c\u5199\u5165\u3002\n# ab\t\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u7684\u5185\u5bb9\u5c06\u4f1a\u88ab\u5199\u5165\u5230\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u8fdb\u884c\u5199\u5165\u3002\n# a+\t\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002\u6587\u4ef6\u6253\u5f00\u65f6\u4f1a\u662f\u8ffd\u52a0\u6a21\u5f0f\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\n# ab+\t\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\n\n# \u5199\u6587\u4ef6\nf = open('test.txt', 'w')\nf.write('Hello, world!')\nf.close()\n\n# \u8bfb\u6587\u4ef6\nf = open('test.txt', 'r')\nprint(f.read())\nf.close()\n\n# \u6587\u4ef6\u5bf9\u8c61\u7684\u65b9\u6cd5\n# 1. read()\n# 2. readline()\n# 3. readlines()\n# 4. write()\n# 5. close()\n\n# \u6587\u4ef6\u5bf9\u8c61\u7684\u5c5e\u6027\n# 1. closed\n# 2. mode\n# 3. name\n\n# \u5220\u9664\u6587\u4ef6\nos.remove('test.txt')\n"]