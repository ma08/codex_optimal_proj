2022-04-20 17:53:57.238783 num operations 1
2022-04-20 17:53:57.238802 size on input set 1
2022-04-20 17:53:57.238957 using api key sourya
2022-04-20 17:54:09.204118 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    # print(m)\n    # print(m.items())\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    # print(count)\n    count -= 1\n    return count % 998244353\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    count -= 1\n    return count % 998244353\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    count -= 1\n    return count % 998244353\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\n\ndef dfs(x, y):\n    global cnt\n    if x == n-1 and y == n-1:\n        cnt += 1\n        return\n    if x < 0 or x >= n or y < 0 or y >= n:\n        return\n    if a[x][y] == '#':\n        return\n    dfs(x+1, y)\n    dfs(x, y+1)\n    dfs(x-1, y)\n    dfs(x, y-1)\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    a = []\n    for _ in range(n):\n        a.append(input().strip())\n    cnt = 0\n    dfs(0, 0)\n    print(cnt)\n"
    },
    {
      "index": 4,
      "text": "\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    count -= 1\n    return count % 998244353\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef answer(n, a):\n    pass\n\nif __name__ == '__main__':\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(answer(n, a))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    count -= 1\n    return count % 998244353\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n"
    },
    {
      "index": 7,
      "text": "\ndef answer(a):\n    n = len(a)\n    m = {}\n    for i in range(n):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    # print(m)\n    # print(m.items())\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    # print(count)\n    count -= 1\n    return count % 998244353\n\ndef answer(a):\n    m = {}\n    n = len(a)\n    for i in range(n):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    # print(m)\n    # print(m.items())\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    # print(count)\n    count -= 1\n    return count\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n"
    }
  ],
  "created": 1650477237,
  "object": "edit"
}
2022-04-20 17:54:09.204479 fix syntax errors 8 ["\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    # print(m)\n    # print(m.items())\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    # print(count)\n    count -= 1\n    return count % 998244353\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n", "\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    count -= 1\n    return count % 998244353\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n", "\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    count -= 1\n    return count % 998244353\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n", "\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\n\ndef dfs(x, y):\n    global cnt\n    if x == n-1 and y == n-1:\n        cnt += 1\n        return\n    if x < 0 or x >= n or y < 0 or y >= n:\n        return\n    if a[x][y] == '#':\n        return\n    dfs(x+1, y)\n    dfs(x, y+1)\n    dfs(x-1, y)\n    dfs(x, y-1)\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    a = []\n    for _ in range(n):\n        a.append(input().strip())\n    cnt = 0\n    dfs(0, 0)\n    print(cnt)\n", "\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    count -= 1\n    return count % 998244353\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n", "\n\ndef answer(n, a):\n    pass\n\nif __name__ == '__main__':\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    print(answer(n, a))\n", "\n\ndef answer(a):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    count -= 1\n    return count % 998244353\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n", "\ndef answer(a):\n    n = len(a)\n    m = {}\n    for i in range(n):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    # print(m)\n    # print(m.items())\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    # print(count)\n    count -= 1\n    return count % 998244353\n\ndef answer(a):\n    m = {}\n    n = len(a)\n    for i in range(n):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    # print(m)\n    # print(m.items())\n    max_len = max(m.values())\n    count = 1\n    for i in m.values():\n        count *= (i + 1)\n    # print(count)\n    count -= 1\n    return count\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(a))\n"]
2022-04-20 17:54:09.204541 size on output set 5
2022-04-20 17:54:09.204555 num operations 1
2022-04-20 17:54:09.204562 size on input set 1
2022-04-20 17:54:09.204782 using api key sunu
2022-04-20 17:54:24.929916 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef read_int():\n    return map(int, stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [int(x) for x in sys.stdin.readline().strip().split()]\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    sys.stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()] \n\ndef read_int():\n    return int(stdin.readline().strip()) \n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650477249,
  "object": "edit"
}
2022-04-20 17:54:24.930305 fix syntax errors 8 ['\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef read_int():\n    return map(int, stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result) + "\\n")\n\nif __name__ == "__main__":\n    main()\n', '\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [int(x) for x in sys.stdin.readline().strip().split()]\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    sys.stdout.write(str(result))\n\nif __name__ == "__main__":\n    main()\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()]\n\ndef read_int():\n    return int(stdin.readline().strip())\n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n', '\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return [int(x) for x in stdin.readline().strip().split()] \n\ndef read_int():\n    return int(stdin.readline().strip()) \n\nMOD = 998244353\nMAXN = 200000\n\nfac = [1]\ninv_fac = [1]\n\nfor i in range(1, MAXN+1):\n    fac.append(fac[-1] * i % MOD)\n    inv_fac.append(inv_fac[-1] * pow(i, MOD-2, MOD) % MOD)\n\ndef binom(n, k):\n    return fac[n] * inv_fac[k] * inv_fac[n-k] % MOD\n\ndef mod_inv(x):\n    return pow(x, MOD-2, MOD)\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    count = [0] * (n+1)\n    for x in a:\n        count[x] += 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            k = count[i]\n            count[i] = binom(k, k-1)\n    for i in range(1, n+1):\n        if count[i] > 0:\n            for j in range(i*2, n+1, i):\n                count[j] = (count[j] - count[i]) % MOD\n    result = 1\n    for i in range(1, n+1):\n        if count[i] > 0:\n            result = result * count[i] % MOD\n    stdout.write(str(result))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 17:54:24.930451 size on output set 5
2022-04-20 17:54:24.930466 num operations 1
2022-04-20 17:54:24.930473 size on input set 1
2022-04-20 17:54:24.930634 using api key kouti
2022-04-20 17:54:32.541990 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nif len(d) == 1:\n    print(1)\n    quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n    res *= (i + 1)\n\nres -= 1\n\nprint(res)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION 1\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n\n# SOLUTION 2\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n"
    },
    {
      "index": 3,
      "text": "\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nif len(d) == 1:\n    print(1)\n    quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n    res *= (i + 1)\n\nres -= 1\n\nprint(res)\n"
    },
    {
      "index": 4,
      "text": "\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n"
    },
    {
      "index": 5,
      "text": "\n\n# SOLUTION \n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n"
    },
    {
      "index": 6,
      "text": "\n\n# SOLUTION\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n"
    },
    {
      "index": 7,
      "text": "\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n"
    }
  ],
  "created": 1650477264,
  "object": "edit"
}
2022-04-20 17:54:32.542294 fix syntax errors 8 ['\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nif len(d) == 1:\n    print(1)\n    quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n    res *= (i + 1)\n\nres -= 1\n\nprint(res)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n', '\n\n# SOLUTION 1\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n\n# SOLUTION 2\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n', '\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nif len(d) == 1:\n    print(1)\n    quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n    res *= (i + 1)\n\nres -= 1\n\nprint(res)\n', '\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n', '\n\n# SOLUTION \n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n', '\n\n# SOLUTION\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n', '\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\n\nfor i in a:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nif len(d) == 1:\n  print(1)\n  quit()\n\nl = list(d.values())\n\nres = 1\n\nfor i in l:\n  res *= (i + 1)\n\nres -= 1\n\nprint(res)\n']
2022-04-20 17:54:32.542342 size on output set 6
