2022-04-18 04:09:56.882944 """
You are given a string S of length N consisting of A, C, G and T. Answer the following Q queries:
 - Query i (1 \leq i \leq Q): You will be given integers l_i and r_i (1 \leq l_i < r_i \leq N). Consider the substring of S starting at index l_i and ending at index r_i (both inclusive). In this string, how many times does AC occurs as a substring?

-----Notes-----
A substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.
For example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.

-----Constraints-----
 - 2 \leq N \leq 10^5
 - 1 \leq Q \leq 10^5
 - S is a string of length N.
 - Each character in S is A, C, G or T.
 - 1 \leq l_i < r_i \leq N

-----Input-----
Input is given from Standard Input in the following format:
N Q
S
l_1 r_1
:
l_Q r_Q

-----Output-----
Print Q lines. The i-th line should contain the answer to the i-th query.

-----Sample Input-----
8 3
ACACTACG
3 7
2 3
1 8

-----Sample Output-----
2
0
3

 - Query 1: the substring of S starting at index 3 and ending at index 7 is ACTAC. In this string, AC occurs twice as a substring.
 - Query 2: the substring of S starting at index 2 and ending at index 3 is CA. In this string, AC occurs zero times as a substring.
 - Query 3: the substring of S starting at index 1 and ending at index 8 is ACACTACG. In this string, AC occurs three times as a substring.
"""
2022-04-18 04:09:56.882958 --------------------------
2022-04-18 04:10:28.640216 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#-----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0"
    }
  ],
  "created": 1650254997,
  "id": "cmpl-4yD01yo0nu9HxbSZxAX8AevTk6KLj",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 04:10:28.640428 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#-----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)"
}
2022-04-18 04:10:28.640468 REASON stop
2022-04-18 04:10:29.099952 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])"
}
2022-04-18 04:10:29.100087 REASON stop
2022-04-18 04:10:29.228322 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0"
}
2022-04-18 04:10:29.228434 REASON stop
