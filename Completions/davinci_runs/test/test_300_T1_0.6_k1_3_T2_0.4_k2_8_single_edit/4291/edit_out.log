2022-04-20 19:20:39.359662 num operations 1
2022-04-20 19:20:39.359707 size on input set 1
2022-04-20 19:20:39.359867 using api key soukgp
2022-04-20 19:21:25.417378 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n - 1):\n    if s[i] == 'A' and s[i + 1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l - 2] == 'A' and s[l - 1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r - 1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    },
    {
      "index": 2,
      "text": "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n - 1):\n    if s[i] == 'A' and s[i + 1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l - 2] == 'A' and s[l - 1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r - 1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    },
    {
      "index": 3,
      "text": "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    },
    {
      "index": 4,
      "text": "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n - 1):\n    if s[i] == 'A' and s[i + 1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l - 2] == 'A' and s[l - 1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r - 1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    },
    {
      "index": 5,
      "text": "\n\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    },
    {
      "index": 6,
      "text": "\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     # Check if we need to remove any AC pairs from left side\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     # Check if we need to remove any AC pairs from left side\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     # Check if we need to remove any AC pairs from left side\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     # Check if we need to remove any AC pairs from left side\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n"
    },
    {
      "index": 7,
      "text": "\n\n#-----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C' and l != 1:\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    }
  ],
  "created": 1650482439,
  "object": "edit"
}
2022-04-20 19:21:25.417799 fix syntax errors 8 ["\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n - 1):\n    if s[i] == 'A' and s[i + 1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l - 2] == 'A' and s[l - 1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r - 1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n - 1):\n    if s[i] == 'A' and s[i + 1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l - 2] == 'A' and s[l - 1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r - 1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n - 1):\n    if s[i] == 'A' and s[i + 1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l - 2] == 'A' and s[l - 1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r - 1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     # Check if we need to remove any AC pairs from left side\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     # Check if we need to remove any AC pairs from left side\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     # Check if we need to remove any AC pairs from left side\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n\n\n# #-----CODE-----\n# # Read in STDIN\n# n, q = map(int, input().split())\n# s = input()\n\n# # Initialize variables\n# ac_count = 0\n\n# # Go through string, counting how many pairs of A and C in the string\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_count += 1\n\n# # Initialize running count of AC pairs\n# running_ac_count = ac_count\n\n# # Go through queries\n# for i in range(q):\n#     l, r = map(int, input().split())\n\n#     # Check if we need to remove any AC pairs from left side\n#     if s[l-2] == 'A' and s[l-1] == 'C':\n#         running_ac_count -= 1\n#     # Check if we need to add any AC pairs from right side\n#     if s[r-1] == 'A' and s[r] == 'C':\n#         running_ac_count += 1\n\n#     print(running_ac_count)\n", "\n\n#-----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C' and l != 1:\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"]
2022-04-20 19:21:25.417918 size on output set 5
2022-04-20 19:21:25.417930 num operations 1
2022-04-20 19:21:25.417936 size on input set 1
2022-04-20 19:21:25.418094 using api key gabby
2022-04-20 19:21:25.452914 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 19:21:26.954816 using api key sourya
2022-04-20 19:21:33.664195 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    },
    {
      "index": 1,
      "text": "# https://atcoder.jp/contests/abc166/tasks/abc166_d\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_count = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_count += 1\n    ac_count_list.append(ac_count)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    },
    {
      "index": 2,
      "text": "# -*- coding: utf-8 -*-\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    },
    {
      "index": 3,
      "text": "\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    },
    {
      "index": 4,
      "text": "# -*- coding: utf-8 -*-\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    },
    {
      "index": 5,
      "text": "\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    },
    {
      "index": 6,
      "text": "\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_count = 0\nac_count_list = [0]\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_count += 1\n    ac_count_list.append(ac_count)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    },
    {
      "index": 7,
      "text": "\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    }
  ],
  "created": 1650482486,
  "object": "edit"
}
2022-04-20 19:21:33.664486 fix syntax errors 8 ['\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n', '# https://atcoder.jp/contests/abc166/tasks/abc166_d\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_count = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_count += 1\n    ac_count_list.append(ac_count)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n', '# -*- coding: utf-8 -*-\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n', '\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n', '# -*- coding: utf-8 -*-\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n', '\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n', '\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_count = 0\nac_count_list = [0]\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_count += 1\n    ac_count_list.append(ac_count)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n', '\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n']
2022-04-20 19:21:33.664624 size on output set 4
2022-04-20 19:21:33.664638 num operations 1
2022-04-20 19:21:33.664645 size on input set 1
2022-04-20 19:21:33.664854 using api key soukgp
2022-04-20 19:21:41.070696 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i]-1, Ri[i]):\n        if S[j:j+2] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    },
    {
      "index": 1,
      "text": "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i]-1, Ri[i]-1):\n        if S[j:j+2] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i]-1, Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    },
    {
      "index": 3,
      "text": "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i] - 1, Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    },
    {
      "index": 4,
      "text": "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    Li.append(l-1)\n    Ri.append(r-1)\n\n#count AC in each substring\nfor i in range(Q):\n    count = 0\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n"
    },
    {
      "index": 5,
      "text": "\n#-----main-----\n#input parameter\nN, Q = map(int, input().split())\n#input S\nS = input()\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    },
    {
      "index": 6,
      "text": "\n\n# -----main-----\n\n# input parameter\nN, Q = map(int, input().split())\n\n# input S\nS = input()\n\n# input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n# count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    },
    {
      "index": 7,
      "text": "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    }
  ],
  "created": 1650482493,
  "object": "edit"
}
2022-04-20 19:21:41.071054 fix syntax errors 8 ["\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i]-1, Ri[i]):\n        if S[j:j+2] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i]-1, Ri[i]-1):\n        if S[j:j+2] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i]-1, Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i] - 1, Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    Li.append(l-1)\n    Ri.append(r-1)\n\n#count AC in each substring\nfor i in range(Q):\n    count = 0\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n", "\n#-----main-----\n#input parameter\nN, Q = map(int, input().split())\n#input S\nS = input()\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n\n# -----main-----\n\n# input parameter\nN, Q = map(int, input().split())\n\n# input S\nS = input()\n\n# input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n# count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"]
2022-04-20 19:21:41.071113 size on output set 8
