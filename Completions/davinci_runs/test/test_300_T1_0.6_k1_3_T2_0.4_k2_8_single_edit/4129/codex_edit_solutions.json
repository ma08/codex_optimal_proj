["\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m = sys.stdin.readline().split()\n    n, m = int(n), int(m)\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = sys.stdin.readline().split()\n        u, v = int(u), int(v)\n        edges[u].append(v)\n    visited = set()\n    q = [1]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n", "import os\nimport sys\n\n\ndef main():\n    if len(sys.argv) != 3:\n        print(\"Usage: python3 file.py <file_name> <file_size>\")\n        sys.exit(1)\n\n    file_name = sys.argv[1]\n    file_size = int(sys.argv[2])\n\n    if os.path.isfile(file_name):\n        print(\"File already exists\")\n        sys.exit(1)\n\n    f = open(file_name, 'wb')\n    f.seek(file_size - 1)\n    f.write(b'\\0')\n    f.close()\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport os\nimport sys\nimport requests\nimport shutil\n\n\ndef download_file(url, directory):\n    \"\"\"\n    This function downloads a file from a given URL and saves it to a given\n    directory.\n    \"\"\"\n    local_filename = url.split('/')[-1]\n    local_path = os.path.join(directory, local_filename)\n    r = requests.get(url, stream=True)\n    with open(local_path, 'wb') as f:\n        shutil.copyfileobj(r.raw, f)\n\n    return local_path\n\n\ndef main():\n    # Read the command line arguments\n    url = sys.argv[1]\n    directory = sys.argv[2]\n\n    # Download the file\n    file_path = download_file(url, directory)\n\n    # Print the file path\n    print(file_path)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/bin/bash\n\n# This script will fix syntax errors in the current directory\n\nfor file in $(find . -type f -name \"*.php\")\ndo\n\tphp -l $file\n\tif [ $? -eq 0 ]\n\tthen\n\t\techo \"$file is valid\"\n\telse\n\t\techo \"$file is invalid\"\n\t\tphp -l -d display_errors=0 $file | grep -v \"No syntax errors detected\"\n\t\tphp -l -d display_errors=0 $file | grep \"No syntax errors detected\" > /dev/null\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\techo \"Fixing $file\"\n\t\t\tphp -l -d display_errors=0 $file | grep -v \"No syntax errors detected\"\n\t\t\tphp -l -d display_errors=0 $file | grep -v \"No syntax errors detected\" | sed -e 's/ in \\/.* on line /: /' > $file.errors\n\t\t\tsed -i -f $file.errors $file\n\t\t\tphp -l $file\n\t\t\tif [ $? -eq 0 ]\n\t\t\tthen\n\t\t\t\techo \"$file is valid\"\n\t\t\telse\n\t\t\t\techo \"$file is invalid\"\n\t\t\tfi\n\t\t\trm $file.errors\n\t\tfi\n\tfi\ndone\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n", "<?php\n\n\n//$handle = fopen('file.txt', 'w');\n//fwrite($handle, 'This is a file');\n//fclose($handle);\n\n//$handle = fopen('file.txt', 'r');\n//$contents = fread($handle, filesize('file.txt'));\n//echo $contents;\n//fclose($handle);\n\n\n//$handle = fopen('file.txt', 'a');\n//fwrite($handle, ' This is a new line.');\n//fclose($handle);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m, s = sys.stdin.readline().split()\n    n, m, s = int(n), int(m), int(s)\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = sys.stdin.readline().split()\n        u, v = int(u), int(v)\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n", "\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n", "\nimport sys\nfrom collections import defaultdict\n\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\n\nmain()\n", "\n\n# ---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\n\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\n\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split()) # n: number of nodes, m: number of edges, s: start node\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1) # visited[i] = True if i-th node is visited\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m, s = sys.stdin.readline().split()\n    n, m, s = int(n), int(m), int(s)\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = sys.stdin.readline().split()\n        u, v = int(u), int(v)\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nif __name__ == '__main__':\n    main()\n", "<?php\n$file = 'test.txt';\n$file_handle = fopen($file, 'w');\nfwrite($file_handle, 'Hello World');\nfclose($file_handle);\n?>\n", "\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = [False] * (n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(2, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "const fs = require('fs');\nconst path = require('path');\nconst { promisify } = require('util');\n\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\n\nconst filePath = path.join(__dirname, './file.txt');\n\nconst read = async () => {\n  const data = await readFile(filePath, 'utf8');\n  console.log(data);\n};\n\nconst write = async () => {\n  const data = await readFile(filePath, 'utf8');\n  const newData = `${data} \\n new data`;\n  await writeFile(filePath, newData);\n};\n\nconst remove = async () => {\n  await fs.unlink(filePath, (err) => {\n    if (err) {\n      console.log(err);\n    }\n  });\n};\n\nconst rename = async () => {\n  await fs.rename(filePath, './file-renamed.txt', (err) => {\n    if (err) {\n      console.log(err);\n    }\n  });\n};\n\n// read();\n// write();\n// remove();\nrename();\n", "var fs = require('fs')\n\nfs.readFile('file.js', 'utf8', function (err, data) {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(data)\n})\n", "import os\nimport sys\n\ndef main():\n    print(\"hello world\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n"]