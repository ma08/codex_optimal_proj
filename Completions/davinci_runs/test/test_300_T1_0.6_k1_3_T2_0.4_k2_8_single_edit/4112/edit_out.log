2022-04-20 17:31:13.176815 num operations 1
2022-04-20 17:31:13.176847 size on input set 1
2022-04-20 17:31:13.177011 using api key kouti
2022-04-20 17:31:19.959175 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n"
    },
    {
      "index": 2,
      "text": "\nimport os\nimport sys\nf = open(os.environ['OUTPUT_PATH'], 'w')\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    f.write(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nf.write(result)\n"
    },
    {
      "index": 3,
      "text": "# SOLUTION\n\n\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n"
    },
    {
      "index": 4,
      "text": "\n\n\n\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n"
    },
    {
      "index": 5,
      "text": "\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n"
    },
    {
      "index": 6,
      "text": "\n# SOLUTION\nimport sys\n\nn, k, x = map(int, sys.stdin.read().split())\na = list(map(int, sys.stdin.read().split()))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n"
    },
    {
      "index": 7,
      "text": "\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n"
    }
  ],
  "created": 1650475873,
  "object": "edit"
}
2022-04-20 17:31:19.959506 fix syntax errors 8 ['\n# SOLUTION\n', '\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n', "\nimport os\nimport sys\nf = open(os.environ['OUTPUT_PATH'], 'w')\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    f.write(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nf.write(result)\n", '# SOLUTION\n\n\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n', '\n\n\n\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n', '\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n', '\n# SOLUTION\nimport sys\n\nn, k, x = map(int, sys.stdin.read().split())\na = list(map(int, sys.stdin.read().split()))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n', '\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n']
2022-04-20 17:31:19.959549 size on output set 8
2022-04-20 17:31:19.959561 num operations 1
2022-04-20 17:31:19.959567 size on input set 1
2022-04-20 17:31:19.959722 using api key kouti
2022-04-20 17:31:57.231178 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n\n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n"
    },
    {
      "index": 1,
      "text": "\n\nn, k, x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()] \n\ndef dp(n, k, x, a):\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(k):\n        dp[0][i][1] = sum(a[:i+1])\n    \n    for i in range(1, n):\n        for j in range(k): \n            if i+j >= n: break\n            for l in range(2, x+1): \n                for m in range(i+j+1, n): \n                    if j+m-i+1 >= k: \n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1]) + dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n\nprint(dp(n,k,x,a))\n"
    },
    {
      "index": 2,
      "text": "\n\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n"
    },
    {
      "index": 3,
      "text": "\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n\tif x == 0:\n\t\treturn 0\n\tif n == k:\n\t\treturn sum(a)\n\tmax_sum = -1\n\tfor i in range(n-k+1):\n\t\tcurr_sum = sum(a[i:i+k])\n\t\tcurr_sum += brute_force(n-k, k, x-1, a[i+k:])\n\t\tmax_sum = max(max_sum, curr_sum)\n\treturn max_sum\n\ndef dp(n, k, x, a):\n\tif x == 0:\n\t\treturn 0\n\tif n == k:\n\t\treturn sum(a)\n\n\tdp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n\tfor i in range(n):\n\t\tfor j in range(k):\n\t\t\tif i+j >= n:\n\t\t\t\tbreak\n\t\t\tdp[i][j][1] = sum(a[i:i+j+1])\n\n\tfor i in range(n):\n\t\tfor j in range(k):\n\t\t\tif i+j >= n:\n\t\t\t\tbreak\n\t\t\tfor l in range(2, x+1):\n\t\t\t\tfor m in range(i+j+1, n):\n\t\t\t\t\tif j+m-i+1 >= k:\n\t\t\t\t\t\tdp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n\n\treturn max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n"
    },
    {
      "index": 4,
      "text": "\n\nn,k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()] \n\ndef dp(n, k, a):\n    dp = [[-1 for _ in range(k+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == j:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], sum(a[i-j:i])+dp[i-j][j])\n    return dp[n][k]\nprint(dp(n,k,a))\n"
    },
    {
      "index": 5,
      "text": "\n\nn,k,x = [int(x) for x in input().split()] # n = # of elements, k = length of subarray, x = # of times to rotate\na = [int(x) for x in input().split()] # elements of array\n\ndef brute_force(n, k, x, a): # brute force solution, O(n*k*x)\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a): # dynamic programming solution, O(n*k*x)\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)] # dp[i][j][l] = max sum of subarray starting at index i, length j, and rotated l times\n\n    for i in range(n): # fill out dp table for x = 1\n        for j in range(k): \n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n): # fill out dp table for x >= 2\n        for j in range(k): \n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a)) # uncomment to run brute force solution\nprint(dp(n,k,x,a))\n"
    },
    {
      "index": 6,
      "text": "\nprint(max([int(x) for x in input().split()]))\n"
    },
    {
      "index": 7,
      "text": "\n\n# n,k,x = [int(x) for x in input().split()]\n# a = [int(x) for x in input().split()]\n\n# def brute_force(n, k, x, a):\n#     if x == 0:\n#         return 0\n#     if n == k:\n#         return sum(a)\n#     max_sum = -1\n#     for i in range(n-k+1):\n#         curr_sum = sum(a[i:i+k])\n#         curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n#         max_sum = max(max_sum, curr_sum)\n#     return max_sum\n\n# def dp(n, k, x, a):\n#     if x == 0:\n#         return 0\n#     if n == k:\n#         return sum(a)\n\n#     dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n"
    }
  ],
  "created": 1650475880,
  "object": "edit"
}
2022-04-20 17:31:57.231609 fix syntax errors 8 ['\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n\n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n', '\n\nn, k, x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()] \n\ndef dp(n, k, x, a):\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(k):\n        dp[0][i][1] = sum(a[:i+1])\n    \n    for i in range(1, n):\n        for j in range(k): \n            if i+j >= n: break\n            for l in range(2, x+1): \n                for m in range(i+j+1, n): \n                    if j+m-i+1 >= k: \n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1]) + dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n\nprint(dp(n,k,x,a))\n', '\n\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n', '\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef brute_force(n, k, x, a):\n\tif x == 0:\n\t\treturn 0\n\tif n == k:\n\t\treturn sum(a)\n\tmax_sum = -1\n\tfor i in range(n-k+1):\n\t\tcurr_sum = sum(a[i:i+k])\n\t\tcurr_sum += brute_force(n-k, k, x-1, a[i+k:])\n\t\tmax_sum = max(max_sum, curr_sum)\n\treturn max_sum\n\ndef dp(n, k, x, a):\n\tif x == 0:\n\t\treturn 0\n\tif n == k:\n\t\treturn sum(a)\n\n\tdp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n\tfor i in range(n):\n\t\tfor j in range(k):\n\t\t\tif i+j >= n:\n\t\t\t\tbreak\n\t\t\tdp[i][j][1] = sum(a[i:i+j+1])\n\n\tfor i in range(n):\n\t\tfor j in range(k):\n\t\t\tif i+j >= n:\n\t\t\t\tbreak\n\t\t\tfor l in range(2, x+1):\n\t\t\t\tfor m in range(i+j+1, n):\n\t\t\t\t\tif j+m-i+1 >= k:\n\t\t\t\t\t\tdp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n\n\treturn max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n', '\n\nn,k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()] \n\ndef dp(n, k, a):\n    dp = [[-1 for _ in range(k+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == j:\n                dp[i][j] = sum(a[:i])\n            else:\n                dp[i][j] = max(dp[i-1][j], sum(a[i-j:i])+dp[i-j][j])\n    return dp[n][k]\nprint(dp(n,k,a))\n', '\n\nn,k,x = [int(x) for x in input().split()] # n = # of elements, k = length of subarray, x = # of times to rotate\na = [int(x) for x in input().split()] # elements of array\n\ndef brute_force(n, k, x, a): # brute force solution, O(n*k*x)\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a): # dynamic programming solution, O(n*k*x)\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)] # dp[i][j][l] = max sum of subarray starting at index i, length j, and rotated l times\n\n    for i in range(n): # fill out dp table for x = 1\n        for j in range(k): \n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n): # fill out dp table for x >= 2\n        for j in range(k): \n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a)) # uncomment to run brute force solution\nprint(dp(n,k,x,a))\n', '\nprint(max([int(x) for x in input().split()]))\n', '\n\n# n,k,x = [int(x) for x in input().split()]\n# a = [int(x) for x in input().split()]\n\n# def brute_force(n, k, x, a):\n#     if x == 0:\n#         return 0\n#     if n == k:\n#         return sum(a)\n#     max_sum = -1\n#     for i in range(n-k+1):\n#         curr_sum = sum(a[i:i+k])\n#         curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n#         max_sum = max(max_sum, curr_sum)\n#     return max_sum\n\n# def dp(n, k, x, a):\n#     if x == 0:\n#         return 0\n#     if n == k:\n#         return sum(a)\n\n#     dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n']
2022-04-20 17:31:57.231702 size on output set 8
2022-04-20 17:31:57.231715 num operations 1
2022-04-20 17:31:57.231721 size on input set 1
2022-04-20 17:31:57.231903 using api key sourya
2022-04-20 17:32:09.946385 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n"
    },
    {
      "index": 1,
      "text": "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[min(n, i+k)] + arr[i])\n\nprint(dp[0])\n"
    },
    {
      "index": 2,
      "text": "import sys\n\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    sys.exit(-1)\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n"
    },
    {
      "index": 3,
      "text": "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i]) \n\nprint(dp[0])\n"
    },
    {
      "index": 4,
      "text": "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n"
    },
    {
      "index": 5,
      "text": "\n\nn, k = map(int, input().split())\n\narr = [0] * n\nfor i in range(n):\n    arr[i] = list(map(int, input().split()))\n\n# dp[i][j] is the max sum of beauty values of pictures that\n# can be posted from index i to j\ndp = [[0] * n for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = arr[i][0]\n    if i+1 < n:\n        dp[i][i+1] = max(arr[i][0], arr[i+1][0])\n\nfor i in range(n-2, -1, -1):\n    for j in range(i+2, n):\n        dp[i][j] = max(\n            dp[i+1][j],\n            dp[i][j-1],\n            dp[i+1][j-1] + arr[j][1]\n        )\n\nprint(dp[0][n-1])\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, k, x = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    if k > x:\n        print(-1)\n        sys.exit()\n\n    # For each index i, dp[i] is the max sum of beauty values of pictures that\n    # can be posted from index i to the end of the array\n    dp = [0] * (n+1)\n    dp[-1] = 0\n    for i in range(n-1, -1, -1):\n        dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\n    print(dp[0])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that \n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n"
    }
  ],
  "created": 1650475917,
  "object": "edit"
}
2022-04-20 17:32:09.946750 fix syntax errors 8 ['\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n', '\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[min(n, i+k)] + arr[i])\n\nprint(dp[0])\n', 'import sys\n\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    sys.exit(-1)\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n', '\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i]) \n\nprint(dp[0])\n', '\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n', '\n\nn, k = map(int, input().split())\n\narr = [0] * n\nfor i in range(n):\n    arr[i] = list(map(int, input().split()))\n\n# dp[i][j] is the max sum of beauty values of pictures that\n# can be posted from index i to j\ndp = [[0] * n for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = arr[i][0]\n    if i+1 < n:\n        dp[i][i+1] = max(arr[i][0], arr[i+1][0])\n\nfor i in range(n-2, -1, -1):\n    for j in range(i+2, n):\n        dp[i][j] = max(\n            dp[i+1][j],\n            dp[i][j-1],\n            dp[i+1][j-1] + arr[j][1]\n        )\n\nprint(dp[0][n-1])\n', '\n\nimport sys\n\ndef main():\n    n, k, x = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    if k > x:\n        print(-1)\n        sys.exit()\n\n    # For each index i, dp[i] is the max sum of beauty values of pictures that\n    # can be posted from index i to the end of the array\n    dp = [0] * (n+1)\n    dp[-1] = 0\n    for i in range(n-1, -1, -1):\n        dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\n    print(dp[0])\n\nif __name__ == "__main__":\n    main()\n', '\n\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that \n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = 0\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n']
2022-04-20 17:32:09.946809 size on output set 7
