2022-04-20 17:24:39.882760 num operations 1
2022-04-20 17:24:39.882781 size on input set 1
2022-04-20 17:24:39.882947 using api key jaanu
2022-04-20 17:24:55.002632 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as \"good\"\n# if a row is not sorted, mark it as \"bad\"\n# if a column has 0s, mark it as \"bad\"\n# if a column has 1s, mark it as \"good\"\n# if a column has both 0s and 1s, mark it as \"bad\"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 \"good\" row,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"good\" column,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"bad\" row and\n# more than 1 \"bad\" column, we cannot sort the matrix\n# if there are more than 1 \"bad\" row and 0 \"bad\" column,\n# we can invert any of the \"bad\" rows to make it \"good\"\n# if there are more than 1 \"bad\" column and 0 \"bad\" row,\n# we can invert any of the \"bad\" columns to make it \"good\"\n# if there is 1 \"bad\" row and 1 \"bad\" column,\n# we can invert any 1 of them to make it \"good\"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print(\"YES\")\n    print(\"0 \" * n)\n    print(\"0 \" * m)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print(\"NO\")\nelif len(bad_rows) > 1:\n    print(\"YES\")\n    print(\"0 \" * n)\n    print(\"0 \" * m)\nelif len(bad_cols) > 1:\n    print(\"YES\")\n    print(\"0 \" * n)\n    print(\"0 \" * m)\nelse:\n    print(\"YES\")\n    print(\"0 \" * n)\n    print(\"0 \" * m)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as \"good\"\n# if a row is not sorted, mark it as \"bad\"\n# if a column has 0s, mark it as \"bad\"\n# if a column has 1s, mark it as \"good\"\n# if a column has both 0s and 1s, mark it as \"bad\"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 \"good\" row,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"good\" column,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"bad\" row and\n# more than 1 \"bad\" column, we cannot sort the matrix\n# if there are more than 1 \"bad\" row and 0 \"bad\" column,\n# we can invert any of the \"bad\" rows to make it \"good\"\n# if there are more than 1 \"bad\" column and 0 \"bad\" row,\n# we can invert any of the \"bad\" columns to make it \"good\"\n# if there is 1 \"bad\" row and 1 \"bad\" column,\n# we can invert any 1 of them to make it \"good\"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print(\"NO\")\nelif len(bad_rows) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\nelif len(bad_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\nelse:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as \"good\"\n# if a row is not sorted, mark it as \"bad\"\n# if a column has 0s, mark it as \"bad\"\n# if a column has 1s, mark it as \"good\"\n# if a column has both 0s and 1s, mark it as \"bad\"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 \"good\" row,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"good\" column,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"bad\" row and\n# more than 1 \"bad\" column, we cannot sort the matrix\n# if there are more than 1 \"bad\" row and 0 \"bad\" column,\n# we can invert any of the \"bad\" rows to make it \"good\"\n# if there are more than 1 \"bad\" column and 0 \"bad\" row,\n# we can invert any of the \"bad\" columns to make it \"good\"\n# if there is 1 \"bad\" row and 1 \"bad\" column,\n# we can invert any 1 of them to make it \"good\"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print(\"NO\")\nelif len(bad_rows) > 1:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\nelif len(bad_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\nelse:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as \"good\"\n# if a row is not sorted, mark it as \"bad\"\n# if a column has 0s, mark it as \"bad\"\n# if a column has 1s, mark it as \"good\"\n# if a column has both 0s and 1s, mark it as \"bad\"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 \"good\" row,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"good\" column,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"bad\" row and\n# more than 1 \"bad\" column, we cannot sort the matrix\n# if there are more than 1 \"bad\" row and 0 \"bad\" column,\n# we can invert any of the \"bad\" rows to make it \"good\"\n# if there are more than 1 \"bad\" column and 0 \"bad\" row,\n# we can invert any of the \"bad\" columns to make it \"good\"\n# if there is 1 \"bad\" row and 1 \"bad\" column,\n# we can invert any 1 of them to make it \"good\"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print(\"NO\")\nelif len(bad_rows) > 1:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\nelif len(bad_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\nelse:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\n"
    },
    {
      "index": 4,
      "text": "\n\nn, m = map(int, input().split())\nmatrix = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as \"good\"\n# if a row is not sorted, mark it as \"bad\"\n# if a column has 0s, mark it as \"bad\"\n# if a column has 1s, mark it as \"good\"\n# if a column has both 0s and 1s, mark it as \"bad\"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 \"good\" row,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"good\" column,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"bad\" row and\n# more than 1 \"bad\" column, we cannot sort the matrix\n# if there are more than 1 \"bad\" row and 0 \"bad\" column,\n# we can invert any of the \"bad\" rows to make it \"good\"\n# if there are more than 1 \"bad\" column and 0 \"bad\" row,\n# we can invert any of the \"bad\" columns to make it \"good\"\n# if there is 1 \"bad\" row and 1 \"bad\" column,\n# we can invert any 1 of them to make it \"good\"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(matrix[i]):\n        good_rows.append(i)\n    elif not any(matrix[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(matrix[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(matrix[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print(\"NO\")\nelif len(bad_rows) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\nelif len(bad_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\nelse:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as \"good\"\n# if a row is not sorted, mark it as \"bad\"\n# if a column has 0s, mark it as \"bad\"\n# if a column has 1s, mark it as \"good\"\n# if a column has both 0s and 1s, mark it as \"bad\"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 \"good\" row,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"good\" column,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"bad\" row and\n# more than 1 \"bad\" column, we cannot sort the matrix\n# if there are more than 1 \"bad\" row and 0 \"bad\" column,\n# we can invert any of the \"bad\" rows to make it \"good\"\n# if there are more than 1 \"bad\" column and 0 \"bad\" row,\n# we can invert any of the \"bad\" columns to make it \"good\"\n# if there is 1 \"bad\" row and 1 \"bad\" column,\n# we can invert any 1 of them to make it \"good\"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print(\"NO\")\nelif len(bad_rows) > 1:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\nelif len(bad_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\nelse:\n    print(\"YES\")\n    print(\"0\" * m)\n    print(\"0\" * n)\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(j) for j in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as \"good\"\n# if a row is not sorted, mark it as \"bad\"\n# if a column has 0s, mark it as \"bad\"\n# if a column has 1s, mark it as \"good\"\n# if a column has both 0s and 1s, mark it as \"bad\"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 \"good\" row,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"good\" column,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"bad\" row and\n# more than 1 \"bad\" column, we cannot sort the matrix\n# if there are more than 1 \"bad\" row and 0 \"bad\" column,\n# we can invert any of the \"bad\" rows to make it \"good\"\n# if there are more than 1 \"bad\" column and 0 \"bad\" row,\n# we can invert any of the \"bad\" columns to make it \"good\"\n# if there is 1 \"bad\" row and 1 \"bad\" column,\n# we can invert any 1 of them to make it \"good\"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print(\"NO\")\nelif len(bad_rows) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\nelif len(bad_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\nelse:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * n)\n"
    },
    {
      "index": 7,
      "text": "\n\n# from collections import *\n\nn, m = map(int, input().split())\nmatrix = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as \"good\"\n# if a row is not sorted, mark it as \"bad\"\n# if a column has 0s, mark it as \"bad\"\n# if a column has 1s, mark it as \"good\"\n# if a column has both 0s and 1s, mark it as \"bad\"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 \"good\" row,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"good\" column,\n# we can invert any of them to make it \"bad\"\n# if there are more than 1 \"bad\" row and\n# more than 1 \"bad\" column, we cannot sort the matrix\n# if there are more than 1 \"bad\" row and 0 \"bad\" column,\n# we can invert any of the \"bad\" rows to make it \"good\"\n# if there are more than 1 \"bad\" column and 0 \"bad\" row,\n# we can invert any of the \"bad\" columns to make it \"good\"\n# if there is 1 \"bad\" row and 1 \"bad\" column,\n# we can invert any 1 of them to make it \"good\"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(matrix[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * m)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print(\"NO\")\nelif len(bad_rows) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * m)\nelif len(bad_cols) > 1:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * m)\nelse:\n    print(\"YES\")\n    print(\"0\" * n)\n    print(\"0\" * m)\n"
    }
  ],
  "created": 1650475480,
  "object": "edit"
}
2022-04-20 17:24:55.003151 fix syntax errors 8 ['\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as "good"\n# if a row is not sorted, mark it as "bad"\n# if a column has 0s, mark it as "bad"\n# if a column has 1s, mark it as "good"\n# if a column has both 0s and 1s, mark it as "bad"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 "good" row,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "good" column,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "bad" row and\n# more than 1 "bad" column, we cannot sort the matrix\n# if there are more than 1 "bad" row and 0 "bad" column,\n# we can invert any of the "bad" rows to make it "good"\n# if there are more than 1 "bad" column and 0 "bad" row,\n# we can invert any of the "bad" columns to make it "good"\n# if there is 1 "bad" row and 1 "bad" column,\n# we can invert any 1 of them to make it "good"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print("YES")\n    print("0 " * n)\n    print("0 " * m)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print("NO")\nelif len(bad_rows) > 1:\n    print("YES")\n    print("0 " * n)\n    print("0 " * m)\nelif len(bad_cols) > 1:\n    print("YES")\n    print("0 " * n)\n    print("0 " * m)\nelse:\n    print("YES")\n    print("0 " * n)\n    print("0 " * m)\n', '\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as "good"\n# if a row is not sorted, mark it as "bad"\n# if a column has 0s, mark it as "bad"\n# if a column has 1s, mark it as "good"\n# if a column has both 0s and 1s, mark it as "bad"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 "good" row,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "good" column,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "bad" row and\n# more than 1 "bad" column, we cannot sort the matrix\n# if there are more than 1 "bad" row and 0 "bad" column,\n# we can invert any of the "bad" rows to make it "good"\n# if there are more than 1 "bad" column and 0 "bad" row,\n# we can invert any of the "bad" columns to make it "good"\n# if there is 1 "bad" row and 1 "bad" column,\n# we can invert any 1 of them to make it "good"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print("NO")\nelif len(bad_rows) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\nelif len(bad_cols) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\nelse:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\n', '\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as "good"\n# if a row is not sorted, mark it as "bad"\n# if a column has 0s, mark it as "bad"\n# if a column has 1s, mark it as "good"\n# if a column has both 0s and 1s, mark it as "bad"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 "good" row,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "good" column,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "bad" row and\n# more than 1 "bad" column, we cannot sort the matrix\n# if there are more than 1 "bad" row and 0 "bad" column,\n# we can invert any of the "bad" rows to make it "good"\n# if there are more than 1 "bad" column and 0 "bad" row,\n# we can invert any of the "bad" columns to make it "good"\n# if there is 1 "bad" row and 1 "bad" column,\n# we can invert any 1 of them to make it "good"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print("NO")\nelif len(bad_rows) > 1:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\nelif len(bad_cols) > 1:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\nelse:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\n', '\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as "good"\n# if a row is not sorted, mark it as "bad"\n# if a column has 0s, mark it as "bad"\n# if a column has 1s, mark it as "good"\n# if a column has both 0s and 1s, mark it as "bad"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 "good" row,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "good" column,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "bad" row and\n# more than 1 "bad" column, we cannot sort the matrix\n# if there are more than 1 "bad" row and 0 "bad" column,\n# we can invert any of the "bad" rows to make it "good"\n# if there are more than 1 "bad" column and 0 "bad" row,\n# we can invert any of the "bad" columns to make it "good"\n# if there is 1 "bad" row and 1 "bad" column,\n# we can invert any 1 of them to make it "good"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print("NO")\nelif len(bad_rows) > 1:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\nelif len(bad_cols) > 1:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\nelse:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\n', '\n\nn, m = map(int, input().split())\nmatrix = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as "good"\n# if a row is not sorted, mark it as "bad"\n# if a column has 0s, mark it as "bad"\n# if a column has 1s, mark it as "good"\n# if a column has both 0s and 1s, mark it as "bad"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 "good" row,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "good" column,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "bad" row and\n# more than 1 "bad" column, we cannot sort the matrix\n# if there are more than 1 "bad" row and 0 "bad" column,\n# we can invert any of the "bad" rows to make it "good"\n# if there are more than 1 "bad" column and 0 "bad" row,\n# we can invert any of the "bad" columns to make it "good"\n# if there is 1 "bad" row and 1 "bad" column,\n# we can invert any 1 of them to make it "good"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(matrix[i]):\n        good_rows.append(i)\n    elif not any(matrix[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(matrix[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(matrix[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print("NO")\nelif len(bad_rows) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\nelif len(bad_cols) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\nelse:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\n', '\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as "good"\n# if a row is not sorted, mark it as "bad"\n# if a column has 0s, mark it as "bad"\n# if a column has 1s, mark it as "good"\n# if a column has both 0s and 1s, mark it as "bad"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 "good" row,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "good" column,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "bad" row and\n# more than 1 "bad" column, we cannot sort the matrix\n# if there are more than 1 "bad" row and 0 "bad" column,\n# we can invert any of the "bad" rows to make it "good"\n# if there are more than 1 "bad" column and 0 "bad" row,\n# we can invert any of the "bad" columns to make it "good"\n# if there is 1 "bad" row and 1 "bad" column,\n# we can invert any 1 of them to make it "good"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print("NO")\nelif len(bad_rows) > 1:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\nelif len(bad_cols) > 1:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\nelse:\n    print("YES")\n    print("0" * m)\n    print("0" * n)\n', '\n\nfrom collections import *\n\nn, m = map(int, input().split())\nm = [[int(j) for j in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as "good"\n# if a row is not sorted, mark it as "bad"\n# if a column has 0s, mark it as "bad"\n# if a column has 1s, mark it as "good"\n# if a column has both 0s and 1s, mark it as "bad"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 "good" row,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "good" column,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "bad" row and\n# more than 1 "bad" column, we cannot sort the matrix\n# if there are more than 1 "bad" row and 0 "bad" column,\n# we can invert any of the "bad" rows to make it "good"\n# if there are more than 1 "bad" column and 0 "bad" row,\n# we can invert any of the "bad" columns to make it "good"\n# if there is 1 "bad" row and 1 "bad" column,\n# we can invert any 1 of them to make it "good"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(m[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print("NO")\nelif len(bad_rows) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\nelif len(bad_cols) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\nelse:\n    print("YES")\n    print("0" * n)\n    print("0" * n)\n', '\n\n# from collections import *\n\nn, m = map(int, input().split())\nmatrix = [[int(i) for i in input().split()] for _ in range(n)]\n\n# if a row is sorted, mark it as "good"\n# if a row is not sorted, mark it as "bad"\n# if a column has 0s, mark it as "bad"\n# if a column has 1s, mark it as "good"\n# if a column has both 0s and 1s, mark it as "bad"\n\n# after finding all the good and bad rows and columns,\n# we can do the following:\n# if there are more than 1 "good" row,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "good" column,\n# we can invert any of them to make it "bad"\n# if there are more than 1 "bad" row and\n# more than 1 "bad" column, we cannot sort the matrix\n# if there are more than 1 "bad" row and 0 "bad" column,\n# we can invert any of the "bad" rows to make it "good"\n# if there are more than 1 "bad" column and 0 "bad" row,\n# we can invert any of the "bad" columns to make it "good"\n# if there is 1 "bad" row and 1 "bad" column,\n# we can invert any 1 of them to make it "good"\n\ngood_rows = []\ngood_cols = []\nbad_rows = []\nbad_cols = []\n\nfor i in range(n):\n    if all(m[i]):\n        good_rows.append(i)\n    elif not any(m[i]):\n        bad_rows.append(i)\n\nfor j in range(n):\n    if not any(matrix[i][j] for i in range(n)):\n        bad_cols.append(j)\n    elif all(m[i][j] for i in range(n)):\n        good_cols.append(j)\n\nif len(good_rows) > 1 or len(good_cols) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * m)\nelif len(bad_rows) > 1 and len(bad_cols) > 1:\n    print("NO")\nelif len(bad_rows) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * m)\nelif len(bad_cols) > 1:\n    print("YES")\n    print("0" * n)\n    print("0" * m)\nelse:\n    print("YES")\n    print("0" * n)\n    print("0" * m)\n']
2022-04-20 17:24:55.003322 size on output set 6
2022-04-20 17:24:55.003335 num operations 1
2022-04-20 17:24:55.003342 size on input set 1
2022-04-20 17:24:55.003532 using api key jaanu
2022-04-20 17:25:09.606400 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n    sorted = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                sorted = False\n    if sorted:\n        print(\"YES\")\n        print(\"\".join([str(x) for x in r]))\n        print(\"\".join([str(x) for x in c]))\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n\n    sorted_ = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                sorted_ = False\n\n    if sorted_:\n        print(\"YES\")\n        print(\"\".join([str(x) for x in r]))\n        print(\"\".join([str(x) for x in c]))\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()] # n = rows, m = columns\n\n    a = [] # a = matrix\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n # r = row\n    c = [0]*m # c = column\n\n    for i in range(n):\n        zero = 0 # zero = number of 0s in a row\n        one = 0 # one = number of 1s in a row\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one: # if there are more 0s in a row than 1s, then the row is flipped\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0 # zero = number of 0s in a column\n        one = 0 # one = number of 1s in a column\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one: # if there are more 0s in a column than 1s, then the column is flipped\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1: # if the row is flipped, then the elements in the row are flipped\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1: # if the column is flipped, then the elements in the column are flipped\n                a[i][j] = 1 - a[i][j]\n\n    sorted = True # sorted = true if the matrix is sorted, false otherwise\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]: # if the current element is greater than the next element, then the matrix is not sorted\n                sorted = False\n\n    if sorted:\n        print(\"YES\")\n        print(\"\".join([str(x) for x in r]))\n        print(\"\".join([str(x) for x in c]))\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n\n    sorted = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                sorted = False\n\n    if sorted:\n        print(\"YES\")\n        print(\"\".join([str(x) for x in r])+\"\\n\"+\"\".join([str(x) for x in c]))\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n\n    sorted_ = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j + 1]:\n                sorted_ = False\n\n    if sorted_:\n        print(\"YES\")\n        print(\"\".join([str(x) for x in r]))\n        print(\"\".join([str(x) for x in c]))\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1 or c[j] == 1:\n                a[i][j] = 1 - a[i][j] \n\n    sorted = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                sorted = False\n\n    if sorted:\n        print(\"YES\")\n        print(\"\".join([str(x) for x in r]))\n        print(\"\".join([str(x) for x in c]))\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n\n    is_sorted = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                is_sorted = False\n\n    if is_sorted:\n        print(\"YES\")\n        print(\"\".join([str(x) for x in r]))\n        print(\"\".join([str(x) for x in c]))\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650475495,
  "object": "edit"
}
2022-04-20 17:25:09.606793 fix syntax errors 8 ['\nimport sys\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n    sorted = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                sorted = False\n    if sorted:\n        print("YES")\n        print("".join([str(x) for x in r]))\n        print("".join([str(x) for x in c]))\n    else:\n        print("NO")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n\n    sorted_ = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                sorted_ = False\n\n    if sorted_:\n        print("YES")\n        print("".join([str(x) for x in r]))\n        print("".join([str(x) for x in c]))\n    else:\n        print("NO")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()] # n = rows, m = columns\n\n    a = [] # a = matrix\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n # r = row\n    c = [0]*m # c = column\n\n    for i in range(n):\n        zero = 0 # zero = number of 0s in a row\n        one = 0 # one = number of 1s in a row\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one: # if there are more 0s in a row than 1s, then the row is flipped\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0 # zero = number of 0s in a column\n        one = 0 # one = number of 1s in a column\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one: # if there are more 0s in a column than 1s, then the column is flipped\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1: # if the row is flipped, then the elements in the row are flipped\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1: # if the column is flipped, then the elements in the column are flipped\n                a[i][j] = 1 - a[i][j]\n\n    sorted = True # sorted = true if the matrix is sorted, false otherwise\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]: # if the current element is greater than the next element, then the matrix is not sorted\n                sorted = False\n\n    if sorted:\n        print("YES")\n        print("".join([str(x) for x in r]))\n        print("".join([str(x) for x in c]))\n    else:\n        print("NO")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n\n    sorted = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                sorted = False\n\n    if sorted:\n        print("YES")\n        print("".join([str(x) for x in r])+"\\n"+"".join([str(x) for x in c]))\n    else:\n        print("NO")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n\n    sorted_ = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j + 1]:\n                sorted_ = False\n\n    if sorted_:\n        print("YES")\n        print("".join([str(x) for x in r]))\n        print("".join([str(x) for x in c]))\n    else:\n        print("NO")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    print("Hello World")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1 or c[j] == 1:\n                a[i][j] = 1 - a[i][j] \n\n    sorted = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                sorted = False\n\n    if sorted:\n        print("YES")\n        print("".join([str(x) for x in r]))\n        print("".join([str(x) for x in c]))\n    else:\n        print("NO")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in sys.stdin.readline().split()])\n\n    r = [0]*n\n    c = [0]*m\n\n    for i in range(n):\n        zero = 0\n        one = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            r[i] = 1\n\n    for j in range(m):\n        zero = 0\n        one = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            c[j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 1:\n                a[i][j] = 1 - a[i][j]\n            if c[j] == 1:\n                a[i][j] = 1 - a[i][j]\n\n    is_sorted = True\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                is_sorted = False\n\n    if is_sorted:\n        print("YES")\n        print("".join([str(x) for x in r]))\n        print("".join([str(x) for x in c]))\n    else:\n        print("NO")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-20 17:25:09.606918 size on output set 8
2022-04-20 17:25:09.606933 num operations 1
2022-04-20 17:25:09.606940 size on input set 1
2022-04-20 17:25:09.607102 using api key jaanu
2022-04-20 17:25:35.486094 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#!/usr/bin/env python3\n\n# import sys\n# from math import *\n# from string import *\n# from datetime import *\n# from time import *\n# from random import *\n\n# n, m = map(int, input().split())\n# a = []\n# for i in range(n):\n#     a.append(list(map(int, input().split())))\n\n# print(n, m)\n# print(a)\n\n# r = []\n# c = []\n# for i in range(n):\n#     r.append(0)\n# for j in range(m):\n#     c.append(0)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 0:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# print(r)\n# print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# print(r)\n# print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print(\"NO\")\n#             exit()\n\n# print(\"YES\")\n# print(\" \".join(map(str, r)))\n# print(\" \".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\nprint(\"\".join(map(str, r)))\nprint(\"\".join(map(str, c)))\n"
    },
    {
      "index": 1,
      "text": "\n\n# !/usr/bin/env python\n\n# import sys from math import * from string import * from datetime import * from time import * from random import *\n\n# n, m = map(int, input().split()) a = [] for i in range(n): a.append(list(map(int, input().split())))\n\n# #print(n, m) #print(a)\n\n# r = [] c = [] for i in range(n): r.append(0) for j in range(m): c.append(0)\n\n# for i in range(n): for j in range(m): if a[i][j] == 0: r[i] = (r[i] + 1) % 2 c[j] = (c[j] + 1) % 2\n\n# #print(r) #print(c)\n\n# for i in range(n): for j in range(m): if a[i][j] == 1: r[i] = (r[i] + 1) % 2 c[j] = (c[j] + 1) % 2\n\n# #print(r) #print(c)\n\n# a_sort = [] for i in range(n): for j in range(m): a_sort.append(a[i][j]) a_sort = sorted(a_sort) #print(a_sort)\n\n# for i in range(n): for j in range(m): if a[i][j] != a_sort[i * m + j]: print(\"NO\") exit()\n\n# print(\"YES\") print(\"\".join(map(str, r))) print(\"\".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\nprint(\"\".join(map(str, r)))\nprint(\"\".join(map(str, c)))\n"
    },
    {
      "index": 2,
      "text": "\n\n#!/usr/bin/env python3\n# import sys\n# from math import *\n# from string import *\n# from datetime import *\n# from time import *\n# from random import *\n\n# n, m = map(int, input().split())\n# a = []\n# for i in range(n):\n#     a.append(list(map(int, input().split())))\n# #print(n, m)\n# #print(a)\n# r = []\n# c = []\n# for i in range(n):\n#     r.append(0)\n# for j in range(m):\n#     c.append(0)\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 0:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n# #print(r)\n# #print(c)\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n# #print(r)\n# #print(c)\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print(\"NO\")\n#             exit()\n# print(\"YES\")\n# print(\"\".join(map(str, r)))\n# print(\"\".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print(\"NO\")\n            exit()\nprint(\"YES\")\nprint(\"\".join(map(str, r)))\nprint(\"\".join(map(str, c)))\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python\n\nimport sys\nfrom math import *\nfrom string import *\nfrom datetime import *\nfrom time import *\nfrom random import *\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\nprint(\"\".join(map(str, r)))\nprint(\"\".join(map(str, c)))\n"
    },
    {
      "index": 4,
      "text": "\n\n#!/usr/bin/env python\n\nimport sys\nfrom math import *\nfrom string import *\nfrom datetime import *\nfrom time import *\nfrom random import *\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n#print(n, m)\n#print(a)\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print(\"NO\")\n#             exit()\n\n# print(\"YES\")\n# print(\"\".join(map(str, r)))\n# print(\"\".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\nprint(\"\".join(map(str, r)))\nprint(\"\".join(map(str, c)))\n"
    },
    {
      "index": 5,
      "text": "\n#!/usr/bin/env python\n\n# import sys\n# from math import *\n# from string import *\n# from datetime import *\n# from time import *\n# from random import *\n\n# n, m = map(int, input().split())\n# a = []\n# for i in range(n):\n#     a.append(list(map(int, input().split())))\n\n# #print(n, m)\n# #print(a)\n\n# r = []\n# c = []\n# for i in range(n):\n#     r.append(0)\n# for j in range(m):\n#     c.append(0)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 0:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print(\"NO\")\n#             exit()\n\n# print(\"YES\")\n# print(\"\".join(map(str, r)))\n# print(\"\".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\nprint(\"\".join(map(str, r)))\nprint(\"\".join(map(str, c)))\n"
    },
    {
      "index": 6,
      "text": "\n\n#!/usr/bin/env python\n\nimport sys\nfrom math import *\nfrom string import *\nfrom datetime import *\nfrom time import *\nfrom random import *\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n#print(n, m)\n#print(a)\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print(\"NO\")\n#             exit()\n\n# print(\"YES\")\n# print(\"\".join(map(str, r)))\n# print(\"\".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\nprint(\"\".join(map(str, r)))\nprint(\"\".join(map(str, c)))\n"
    },
    {
      "index": 7,
      "text": "\n\n#!/usr/bin/env python\n\nimport sys\nfrom math import *\nfrom string import *\nfrom datetime import *\nfrom time import *\nfrom random import *\n\n# n, m = map(int, input().split())\n# a = []\n# for i in range(n):\n#     a.append(list(map(int, input().split())))\n\n# #print(n, m)\n# #print(a)\n\n# r = []\n# c = []\n# for i in range(n):\n#     r.append(0)\n# for j in range(m):\n#     c.append(0)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 0:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print(\"NO\")\n#             exit()\n\n# print(\"YES\")\n# print(\"\".join(map(str, r)))\n# print(\"\".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\nprint(\"\".join(map(str, r)))\nprint(\"\".join(map(str, c)))\n"
    }
  ],
  "created": 1650475509,
  "object": "edit"
}
2022-04-20 17:25:35.486551 fix syntax errors 8 ['\n\n#!/usr/bin/env python3\n\n# import sys\n# from math import *\n# from string import *\n# from datetime import *\n# from time import *\n# from random import *\n\n# n, m = map(int, input().split())\n# a = []\n# for i in range(n):\n#     a.append(list(map(int, input().split())))\n\n# print(n, m)\n# print(a)\n\n# r = []\n# c = []\n# for i in range(n):\n#     r.append(0)\n# for j in range(m):\n#     c.append(0)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 0:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# print(r)\n# print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# print(r)\n# print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print("NO")\n#             exit()\n\n# print("YES")\n# print(" ".join(map(str, r)))\n# print(" ".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print("NO")\n            exit()\n\nprint("YES")\nprint("".join(map(str, r)))\nprint("".join(map(str, c)))\n', '\n\n# !/usr/bin/env python\n\n# import sys from math import * from string import * from datetime import * from time import * from random import *\n\n# n, m = map(int, input().split()) a = [] for i in range(n): a.append(list(map(int, input().split())))\n\n# #print(n, m) #print(a)\n\n# r = [] c = [] for i in range(n): r.append(0) for j in range(m): c.append(0)\n\n# for i in range(n): for j in range(m): if a[i][j] == 0: r[i] = (r[i] + 1) % 2 c[j] = (c[j] + 1) % 2\n\n# #print(r) #print(c)\n\n# for i in range(n): for j in range(m): if a[i][j] == 1: r[i] = (r[i] + 1) % 2 c[j] = (c[j] + 1) % 2\n\n# #print(r) #print(c)\n\n# a_sort = [] for i in range(n): for j in range(m): a_sort.append(a[i][j]) a_sort = sorted(a_sort) #print(a_sort)\n\n# for i in range(n): for j in range(m): if a[i][j] != a_sort[i * m + j]: print("NO") exit()\n\n# print("YES") print("".join(map(str, r))) print("".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print("NO")\n            exit()\n\nprint("YES")\nprint("".join(map(str, r)))\nprint("".join(map(str, c)))\n', '\n\n#!/usr/bin/env python3\n# import sys\n# from math import *\n# from string import *\n# from datetime import *\n# from time import *\n# from random import *\n\n# n, m = map(int, input().split())\n# a = []\n# for i in range(n):\n#     a.append(list(map(int, input().split())))\n# #print(n, m)\n# #print(a)\n# r = []\n# c = []\n# for i in range(n):\n#     r.append(0)\n# for j in range(m):\n#     c.append(0)\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 0:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n# #print(r)\n# #print(c)\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n# #print(r)\n# #print(c)\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print("NO")\n#             exit()\n# print("YES")\n# print("".join(map(str, r)))\n# print("".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print("NO")\n            exit()\nprint("YES")\nprint("".join(map(str, r)))\nprint("".join(map(str, c)))\n', '#!/usr/bin/env python\n\nimport sys\nfrom math import *\nfrom string import *\nfrom datetime import *\nfrom time import *\nfrom random import *\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print("NO")\n            exit()\n\nprint("YES")\nprint("".join(map(str, r)))\nprint("".join(map(str, c)))\n', '\n\n#!/usr/bin/env python\n\nimport sys\nfrom math import *\nfrom string import *\nfrom datetime import *\nfrom time import *\nfrom random import *\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n#print(n, m)\n#print(a)\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print("NO")\n#             exit()\n\n# print("YES")\n# print("".join(map(str, r)))\n# print("".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print("NO")\n            exit()\n\nprint("YES")\nprint("".join(map(str, r)))\nprint("".join(map(str, c)))\n', '\n#!/usr/bin/env python\n\n# import sys\n# from math import *\n# from string import *\n# from datetime import *\n# from time import *\n# from random import *\n\n# n, m = map(int, input().split())\n# a = []\n# for i in range(n):\n#     a.append(list(map(int, input().split())))\n\n# #print(n, m)\n# #print(a)\n\n# r = []\n# c = []\n# for i in range(n):\n#     r.append(0)\n# for j in range(m):\n#     c.append(0)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 0:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print("NO")\n#             exit()\n\n# print("YES")\n# print("".join(map(str, r)))\n# print("".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print("NO")\n            exit()\n\nprint("YES")\nprint("".join(map(str, r)))\nprint("".join(map(str, c)))\n', '\n\n#!/usr/bin/env python\n\nimport sys\nfrom math import *\nfrom string import *\nfrom datetime import *\nfrom time import *\nfrom random import *\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n#print(n, m)\n#print(a)\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print("NO")\n#             exit()\n\n# print("YES")\n# print("".join(map(str, r)))\n# print("".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print("NO")\n            exit()\n\nprint("YES")\nprint("".join(map(str, r)))\nprint("".join(map(str, c)))\n', '\n\n#!/usr/bin/env python\n\nimport sys\nfrom math import *\nfrom string import *\nfrom datetime import *\nfrom time import *\nfrom random import *\n\n# n, m = map(int, input().split())\n# a = []\n# for i in range(n):\n#     a.append(list(map(int, input().split())))\n\n# #print(n, m)\n# #print(a)\n\n# r = []\n# c = []\n# for i in range(n):\n#     r.append(0)\n# for j in range(m):\n#     c.append(0)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 0:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] == 1:\n#             r[i] = (r[i] + 1) % 2\n#             c[j] = (c[j] + 1) % 2\n\n# #print(r)\n# #print(c)\n\n# a_sort = []\n# for i in range(n):\n#     for j in range(m):\n#         a_sort.append(a[i][j])\n# a_sort = sorted(a_sort)\n# #print(a_sort)\n\n# for i in range(n):\n#     for j in range(m):\n#         if a[i][j] != a_sort[i * m + j]:\n#             print("NO")\n#             exit()\n\n# print("YES")\n# print("".join(map(str, r)))\n# print("".join(map(str, c)))\n\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nr = []\nc = []\nfor i in range(n):\n    r.append(0)\nfor j in range(m):\n    c.append(0)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            r[i] = (r[i] + 1) % 2\n            c[j] = (c[j] + 1) % 2\n\na_sort = []\nfor i in range(n):\n    for j in range(m):\n        a_sort.append(a[i][j])\na_sort = sorted(a_sort)\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != a_sort[i * m + j]:\n            print("NO")\n            exit()\n\nprint("YES")\nprint("".join(map(str, r)))\nprint("".join(map(str, c)))\n']
2022-04-20 17:25:35.486713 size on output set 7
