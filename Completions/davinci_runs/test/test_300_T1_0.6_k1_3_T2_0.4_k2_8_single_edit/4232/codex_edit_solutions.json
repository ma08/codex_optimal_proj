["\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k - 1] == l[k]:\n        print(-1)\n        return\n    print(l[k - 1])\n\n\nif __name__ == '__main__':\n    main()\n", "\"use strict\";\n\nvar fs = require(\"fs\");\n\nfunction readFile(fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function (err, result) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nfunction writeFile(fileName, data) {\n  return new Promise(function (resolve, reject) {\n    fs.writeFile(fileName, data, function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  readFile: readFile,\n  writeFile: writeFile\n};\n", "\nfrom sys import stdin\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n", "#!/usr/bin/python3\n\n\nimport os\nfrom os import path\n\ndef main():\n    print(os.name)\n\n    print(\"Item exists: \" + str(path.exists(\"textfile.txt\")))\n    print(\"Item is a file: \" + str(path.isfile(\"textfile.txt\")))\n    print(\"Item is a directory: \" + str(path.isdir(\"textfile.txt\")))\n\n    print(\"Item's path: \" + str(path.realpath(\"textfile.txt\")))\n    print(\"Item's path and name: \" + str(path.split(path.realpath(\"textfile.txt\"))))\n\n    t = path.getmtime(\"textfile.txt\")\n    print(t)\n\n    from datetime import datetime\n    print(datetime.fromtimestamp(t))\n\n    print(path.splitext(\"textfile.txt\"))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/bin/bash\n\n# This is a comment\n\necho \"Hello World\" # This is also a comment\n\n<<'COMMENT'\nThis is a\nmulti line comment\nCOMMENT\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n", "\n\ndef main():\n    print(\"hello world\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k != 0 and k != n and l[k-1] == l[k]:\n        print(-1) \n    else:\n        print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n", "\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k - 1] == l[k]:\n        print(-1)\n        return\n    print(l[k - 1])\n\n\nif __name__ == '__main__':\n    main()\n", "print(\"Hello World\")\n", "import os\nimport sys\nimport re\n\n\ndef main():\n    if len(sys.argv) != 2:\n        print(\"Usage: python file.py <path>\")\n        sys.exit(1)\n\n    path = sys.argv[1]\n    if not os.path.exists(path):\n        print(\"Path does not exist\")\n        sys.exit(1)\n\n    if not os.path.isfile(path):\n        print(\"Path is not a file\")\n        sys.exit(1)\n\n    with open(path, \"r\") as f:\n        for line in f:\n            if re.match(r'^#.*', line):\n                print(\"Comment\")\n            elif re.match(r'^[a-zA-Z_]+[a-zA-Z0-9_]*\\s*=.*', line):\n                print(\"Assignment\")\n            elif re.match(r'^[a-zA-Z_]+[a-zA-Z0-9_]*\\s*\\(.*', line):\n                print(\"Function definition\")\n            else:\n                print(\"Other\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "var fs = require('fs');\n\nvar readStream = fs.createReadStream('file.txt');\nvar writeStream = fs.createWriteStream('file2.txt');\n\nreadStream.pipe(writeStream);\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(l[0])\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "import os\nimport pandas as pd\nimport numpy as np\n\n\ndef get_file_list(file_path, file_type):\n    file_list = []\n    if os.path.isdir(file_path):\n        for file in os.listdir(file_path):\n            if file.endswith(file_type):\n                file_list.append(file)\n    else:\n        print('file path is not valid')\n    return file_list\n\n\ndef get_data_frame(file_path, file_type):\n    file_list = get_file_list(file_path, file_type)\n    data_frame = pd.DataFrame()\n    for file in file_list:\n        data_frame_temp = pd.read_csv(file_path + file, header=None)\n        data_frame = pd.concat([data_frame, data_frame_temp], axis=0)\n    return data_frame\n\n\ndef get_data_frame_list(file_path, file_type):\n    file_list = get_file_list(file_path, file_type)\n    data_frame_list = []\n    for file in file_list:\n        data_frame_temp = pd.read_csv(file_path + file, header=None)\n        data_frame_list.append(data_frame_temp)\n    return data_frame_list\n\n\ndef get_data_frame_list_with_label(file_path, file_type):\n    file_list = get_file_list(file_path, file_type)\n    data_frame_list = []\n    label = 0\n    for file in file_list:\n        data_frame_temp = pd.read_csv(file_path + file, header=None)\n        data_frame_temp['label'] = label\n        data_frame_list.append(data_frame_temp)\n        label += 1\n    return data_frame_list\n\n\ndef get_data_frame_list_with_label_and_index(file_path, file_type):\n    file_list = get_file_list(file_path, file_type)\n    data_frame_list = []\n    label = 0\n    for file in file_list:\n        data_frame_temp = pd.read_csv(file_path + file, header=None)\n        data_frame_temp['label'] = label\n        data_frame_temp['index'] = data_frame_temp.index\n        data_frame_list.append(data_frame_temp)\n        label += 1\n    return data_frame_list\n\n\ndef get_data_frame_list_with_label_and_index_and_time(file_path, file_type):\n    file_list = get_file_list(file_path, file_type)\n    data_frame_list = []\n    label = 0\n    for file in file_list:\n        data_frame_temp = pd.read_csv(file_path + file, header=None)\n        data_frame_temp['label'] = label\n        data_frame_temp['index'] = data_frame_temp.index\n        data_frame_temp['time'] = data_frame_temp.index * 0.02\n        data_frame_list.append(data_frame_temp)\n        label += 1\n    return data_frame_list\n\n\ndef get_data_frame_list_with_label_and_index_and_time_and_file(file_path, file_type):\n    file_list = get_file_list(file_path, file_type)\n    data_frame_list = []\n    label = 0\n    for file in file_list:\n        data_frame_temp = pd.read_csv(file_path + file, header=None)\n        data_frame_temp['label'] = label\n        data_frame_temp['index'] = data_frame_temp.index\n        data_frame_temp['time'] = data_frame_temp.index * 0.02\n        data_frame_temp['file'] = file\n        data_frame_list.append(data_frame_temp)\n        label += 1\n    return data_frame_list\n\n\ndef get_data_frame_list_with_label_and_index_and_time_and_file_and_feature(file_path, file_type, feature_name):\n    file_list = get_file_list(file_path, file_type)\n    data_frame_list = []\n    label = 0\n    for file in file_list:\n        data_frame_temp = pd.read_csv(file_path + file, header=None)\n        data_frame_temp['label'] = label\n        data_frame_temp['index'] = data_frame_temp.index\n        data_frame_temp['time'] = data_frame_temp.index * 0.02\n        data_frame_temp['file'] = file\n        data_frame_temp['feature'] = feature_name\n        data_frame_list.append(data_frame_temp)\n        label += 1\n    return data_frame_list\n\n\ndef get_data_frame_list_with_label_and_index_and_time_and_file_and_feature_and_feature_value(file_path, file_type, feature_name, feature_value):\n    file_list = get_file_list(file_path, file_type)\n    data_frame_list = []\n    label = 0\n    for file in file_list:\n        data_frame_temp = pd.read_csv(file_path + file, header=None)\n        data_frame_temp['label'] = label\n        data_frame_temp['index'] = data_frame_temp.index\n        data_frame_temp['time'] = data_frame_temp.index * 0.02\n        data_frame_temp['file'] = file\n        data_frame_temp['feature'] = feature_name\n        data_frame_temp['feature_value'] = feature_value\n        data_frame_list.append(data_frame_temp)\n        label += 1\n    return data_frame_list\n\n\ndef get_data_frame_list_with_label_and_index_and_time_and_file_and_feature_and_feature_value_and_feature_value_type(file_path, file_type, feature_name, feature_value, feature_value_type):\n    file_list = get_file_list(file_path, file_type)\n    data_frame_list = []\n    label = 0\n    for file in file_list:\n        data_frame_temp = pd.read_csv(file_path + file, header=None)\n        data_frame_temp['label'] = label\n        data_frame_temp['index'] = data_frame_temp.index\n        data_frame_temp['time'] = data_frame_temp.index * 0.02\n        data_frame_temp['file'] = file\n        data_frame_temp['feature'] = feature_name\n        data_frame_temp['feature_value'] = feature_value\n        data_frame_temp['feature_value_type'] = feature_value_type\n        data_frame_list.append(data_frame_temp)\n        label += 1\n    return data_frame_list\n", "from sys import stdin\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\nprint(a[k - 1] if k else -1)\n", "\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "var fs = require('fs');\nvar path = require('path');\nvar util = require('util');\n\nvar filepath = path.join(__dirname, 'file.js');\n\nfs.stat(filepath, function(err, stats) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(stats);\n    console.log(util.inspect(stats));\n    console.log(stats.isFile());\n    console.log(stats.isDirectory());\n    console.log(stats.isBlockDevice());\n    console.log(stats.isCharacterDevice());\n    console.log(stats.isFIFO());\n    console.log(stats.isSocket());\n    console.log(stats.size);\n    console.log(stats.birthtime);\n    console.log(stats.mtime);\n  }\n});\n", "\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\na = map(int, stdin.readline().split())\n\nprint(sorted(a)[k - 1] if k else -1)\n", "from sys import stdin\nfrom bisect import bisect_left\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n"]