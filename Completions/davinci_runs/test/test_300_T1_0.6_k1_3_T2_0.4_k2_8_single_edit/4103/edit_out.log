2022-04-20 17:25:59.075809 num operations 1
2022-04-20 17:25:59.075834 size on input set 1
2022-04-20 17:25:59.075999 using api key gabby
2022-04-20 17:26:19.763972 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().strip().split(' ')]\n    s = [int(i) for i in input().strip().split(' ')]\n    b_left = b; a_left = a\n\n    max_segments = 0;\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0: a_left -= 1; max_segments += 1\n            else: break\n        elif a_left == 0:\n            if b_left > 0: b_left -= 1; max_segments += 1\n            else: break\n        elif s[i] == 1:\n            if a_left < a: a_left += 1; b_left -= 1; max_segments += 1\n            elif b_left > 0: b_left -= 1; max_segments += 1\n            else: break\n        elif s[i] == 0:\n            if a_left > 0: a_left -= 1; max_segments += 1\n            elif b_left > 0: b_left -= 1; max_segments += 1\n            else: break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n\n    a_left = a\n\n    max_segments = 0\n\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n\n        i += 1\n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n# import sys\n#\n# def main():\n#     n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n#     s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n#     b_left = b\n#     a_left = a\n#\n#     max_segments = 0\n#     i = 0\n#     while i < n:\n#         if b_left == 0:\n#             if a_left > 0:\n#                 a_left -= 1\n#                 max_segments += 1\n#             else:\n#                 break\n#         elif a_left == 0:\n#             if b_left > 0:\n#                 b_left -= 1\n#                 max_segments += 1\n#             else:\n#                 break\n#         elif s[i] == 1:\n#             if a_left < a:\n#                 a_left += 1\n#                 b_left -= 1\n#                 max_segments += 1\n#             elif b_left > 0:\n#                 b_left -= 1\n#                 max_segments += 1\n#             else:\n#                 break\n#         elif s[i] == 0:\n#             if a_left > 0:\n#                 a_left -= 1\n#                 max_segments += 1\n#             elif b_left > 0:\n#                 b_left -= 1\n#                 max_segments += 1\n#             else:\n#                 break\n#         i += 1\n#     print(max_segments)\n#\n# main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().split(' ')]\n    s = [int(i) for i in input().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().strip().split(' ')]\n    s = [int(i) for i in input().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments, end='')\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    # while i < n:\n    #     if b_left == 0:\n    #         if a_left > 0:\n    #             a_left -= 1\n    #             max_segments += 1\n    #         else:\n    #             break\n    #     elif a_left == 0:\n    #         if b_left > 0:\n    #             b_left -= 1\n    #             max_segments += 1\n    #         else:\n    #             break\n    #     elif s[i] == 1:\n    #         if a_left < a:\n    #             a_left += 1\n    #             b_left -= 1\n    #             max_segments += 1\n    #         elif b_left > 0:\n    #             b_left -= 1\n    #             max_segments += 1\n    #         else:\n    #             break\n    #     elif s[i] == 0:\n    #         if a_left > 0:\n    #             a_left -= 1\n    #             max_segments += 1\n    #         elif b_left > 0:\n    #             b_left -= 1\n    #             max_segments += 1\n    #         else:\n    #             break\n    #     i += 1\n    # print(max_segments)\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if s[i] == 1:\n            if a_left > 0:\n                if a_left == a:\n                    a_left -= 1\n                    max_segments += 1\n                else:\n                    a_left += 1\n                    b_left -= 1\n                    max_segments += 1\n            else: \n                if b_left > 0:\n                    b_left -= 1\n                    max_segments += 1\n                else:\n                    break\n        else:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else: \n                if a_left > 0:\n                    a_left -= 1\n                    max_segments += 1\n                else:\n                    break\n        i += 1 \n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().split(' ')]\n    s = [int(i) for i in input().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments\n\nmain()\n"
    }
  ],
  "created": 1650475559,
  "object": "edit"
}
2022-04-20 17:26:19.764481 fix syntax errors 8 ["\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().strip().split(' ')]\n    s = [int(i) for i in input().strip().split(' ')]\n    b_left = b; a_left = a\n\n    max_segments = 0;\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0: a_left -= 1; max_segments += 1\n            else: break\n        elif a_left == 0:\n            if b_left > 0: b_left -= 1; max_segments += 1\n            else: break\n        elif s[i] == 1:\n            if a_left < a: a_left += 1; b_left -= 1; max_segments += 1\n            elif b_left > 0: b_left -= 1; max_segments += 1\n            else: break\n        elif s[i] == 0:\n            if a_left > 0: a_left -= 1; max_segments += 1\n            elif b_left > 0: b_left -= 1; max_segments += 1\n            else: break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n\n    a_left = a\n\n    max_segments = 0\n\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n\n        i += 1\n    print(max_segments)\n\nmain()\n", "\n# import sys\n#\n# def main():\n#     n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n#     s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n#     b_left = b\n#     a_left = a\n#\n#     max_segments = 0\n#     i = 0\n#     while i < n:\n#         if b_left == 0:\n#             if a_left > 0:\n#                 a_left -= 1\n#                 max_segments += 1\n#             else:\n#                 break\n#         elif a_left == 0:\n#             if b_left > 0:\n#                 b_left -= 1\n#                 max_segments += 1\n#             else:\n#                 break\n#         elif s[i] == 1:\n#             if a_left < a:\n#                 a_left += 1\n#                 b_left -= 1\n#                 max_segments += 1\n#             elif b_left > 0:\n#                 b_left -= 1\n#                 max_segments += 1\n#             else:\n#                 break\n#         elif s[i] == 0:\n#             if a_left > 0:\n#                 a_left -= 1\n#                 max_segments += 1\n#             elif b_left > 0:\n#                 b_left -= 1\n#                 max_segments += 1\n#             else:\n#                 break\n#         i += 1\n#     print(max_segments)\n#\n# main()\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().split(' ')]\n    s = [int(i) for i in input().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().strip().split(' ')]\n    s = [int(i) for i in input().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments, end='')\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    # while i < n:\n    #     if b_left == 0:\n    #         if a_left > 0:\n    #             a_left -= 1\n    #             max_segments += 1\n    #         else:\n    #             break\n    #     elif a_left == 0:\n    #         if b_left > 0:\n    #             b_left -= 1\n    #             max_segments += 1\n    #         else:\n    #             break\n    #     elif s[i] == 1:\n    #         if a_left < a:\n    #             a_left += 1\n    #             b_left -= 1\n    #             max_segments += 1\n    #         elif b_left > 0:\n    #             b_left -= 1\n    #             max_segments += 1\n    #         else:\n    #             break\n    #     elif s[i] == 0:\n    #         if a_left > 0:\n    #             a_left -= 1\n    #             max_segments += 1\n    #         elif b_left > 0:\n    #             b_left -= 1\n    #             max_segments += 1\n    #         else:\n    #             break\n    #     i += 1\n    # print(max_segments)\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if s[i] == 1:\n            if a_left > 0:\n                if a_left == a:\n                    a_left -= 1\n                    max_segments += 1\n                else:\n                    a_left += 1\n                    b_left -= 1\n                    max_segments += 1\n            else: \n                if b_left > 0:\n                    b_left -= 1\n                    max_segments += 1\n                else:\n                    break\n        else:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else: \n                if a_left > 0:\n                    a_left -= 1\n                    max_segments += 1\n                else:\n                    break\n        i += 1 \n    print(max_segments)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in input().split(' ')]\n    s = [int(i) for i in input().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments\n\nmain()\n"]
2022-04-20 17:26:19.764650 size on output set 8
2022-04-20 17:26:19.764665 num operations 1
2022-04-20 17:26:19.764671 size on input set 1
2022-04-20 17:26:19.764870 using api key gabby
2022-04-20 17:26:31.782186 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split())) \n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    max_segments = 0\n    cur_a = a\n    cur_b = b\n    for i in range(n):\n        if s[i] == 1:\n            if cur_b > 0:\n                cur_b -= 1\n                cur_a += 1\n                if cur_a > a:\n                    cur_a = a\n            else:\n                cur_a -= 1\n        else:\n            if cur_a > 0:\n                cur_a -= 1\n            else:\n                cur_b -= 1\n        if cur_a == 0 and cur_b == 0:\n            break\n        max_segments += 1\n    print(max_segments)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\na.sort()\na.reverse()\nprint(a[0] * a[1])\n"
    },
    {
      "index": 4,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 5,
      "text": "\nprint(\"hello world\")\n"
    },
    {
      "index": 6,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    },
    {
      "index": 7,
      "text": "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"
    }
  ],
  "created": 1650475579,
  "object": "edit"
}
2022-04-20 17:26:31.782506 fix syntax errors 8 ['\nn, b, a = map(int, input().split())\ns = list(map(int, input().split())) \n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\n\ndef main():\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    max_segments = 0\n    cur_a = a\n    cur_b = b\n    for i in range(n):\n        if s[i] == 1:\n            if cur_b > 0:\n                cur_b -= 1\n                cur_a += 1\n                if cur_a > a:\n                    cur_a = a\n            else:\n                cur_a -= 1\n        else:\n            if cur_a > 0:\n                cur_a -= 1\n            else:\n                cur_b -= 1\n        if cur_a == 0 and cur_b == 0:\n            break\n        max_segments += 1\n    print(max_segments)\n\nif __name__ == "__main__":\n    main()\n', '\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\nn = int(input())\na = list(map(int, input().split()))\na.sort()\na.reverse()\nprint(a[0] * a[1])\n', '\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\nprint("hello world")\n', '\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n', '\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n']
2022-04-20 17:26:31.782563 size on output set 5
2022-04-20 17:26:31.782577 num operations 1
2022-04-20 17:26:31.782584 size on input set 1
2022-04-20 17:26:31.782766 using api key jaanu
2022-04-20 17:27:06.123818 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, b, a, s, m):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = m\n    while i < n:\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        if b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        elif a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 1:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is not exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 0:\n            b_charge -= 1\n            i += 1\n        # if the battery is empty\n        # and the accumulator is empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge == 0 and s[i] == 0:\n            break\n        # if the battery is empty\n        # and the accumulator is empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge == 0 and s[i] == 1:\n            break\n        # if the battery is full\n        # and the accumulator is full\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge == a and s[i] == 0:\n            break\n        # if the battery is full\n        # and the accumulator is full\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge == a and s[i] == 1:\n            break\n        # if the battery is full\n        # and the accumulator is empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge == 0 and s[i] == 0:\n            break\n        # if the battery is full\n        # and the accumulator is empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge == 0 and s[i] == 1:\n            break\n        # if the battery is empty\n        # and the accumulator is full\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge == a and s[i] == 0:\n            break\n        # if the battery is empty\n        # and the accumulator is full\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge == a and s[i] == 1:\n            break\n        # if the battery is full\n        # and the accumulator is not empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge > 0 and s[i] == 0:\n            break\n        # if the battery is full\n        # and the accumulator is not empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge > 0 and s[i] == 1:\n            break\n        # if the battery is not empty\n        # and the accumulator is full\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge > 0 and a_charge == a and s[i] == 0:\n            break\n        # if the battery is not empty\n        # and the accumulator is full\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge > 0 and a_charge == a and s[i] == 1:\n            break\n        # if the battery is empty\n        # and the accumulator is not empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge > 0 and s[i] == 0:\n            break\n        # if the battery is empty\n        # and the accumulator is not empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge > 0 and s[i] == 1:\n            break\n        # if the battery is not empty\n        # and the accumulator is empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge > 0 and a_charge == 0 and s[i] == 0:\n            break\n        # if the battery is not empty\n        # and the accumulator is empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge > 0 and a_charge == 0 and s[i] == 1:\n            break\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nm = 0\nprint(solve(n, b, a, s, m))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, b, a, s, d):\n    # initialize variables\n    i = 1\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == '1':\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == '0':\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == '0':\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == '1':\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n        # if the robot has reached the destination\n        # stop\n        if max_dist == d:\n            break\n    return max_dist\n\nn, b, a, d = map(int, input().split())\ns = input()\nprint(solve(n, b, a, s, d))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(n, b, a, s): \n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator and the current segment is exposed to sunlight, charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery and the current segment is not exposed to sunlight, charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef solve(n, b, a, s, i=0, b_charge=b, a_charge=a, max_dist=0):\n    # initialize variables\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef solve(n, b, a, s):\n    # initialize variables\n    index = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while index < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[index] == 1:\n            a_charge += 1\n            index += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[index] == 0:\n            b_charge += 1\n            index += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[index] == 0:\n            a_charge -= 1\n            index += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[index] == 1:\n            b_charge -= 1\n            index += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef solve(n, b, a, s):\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        else:\n            break\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    },
    {
      "index": 7,
      "text": "\n\ndef solve(n, b, a, s):\n    # initialize variables \n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"
    }
  ],
  "created": 1650475591,
  "object": "edit"
}
2022-04-20 17:27:06.124301 fix syntax errors 8 ["\n\ndef solve(n, b, a, s, m):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = m\n    while i < n:\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        if b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        elif a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 1:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is not exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 0:\n            b_charge -= 1\n            i += 1\n        # if the battery is empty\n        # and the accumulator is empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge == 0 and s[i] == 0:\n            break\n        # if the battery is empty\n        # and the accumulator is empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge == 0 and s[i] == 1:\n            break\n        # if the battery is full\n        # and the accumulator is full\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge == a and s[i] == 0:\n            break\n        # if the battery is full\n        # and the accumulator is full\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge == a and s[i] == 1:\n            break\n        # if the battery is full\n        # and the accumulator is empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge == 0 and s[i] == 0:\n            break\n        # if the battery is full\n        # and the accumulator is empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge == 0 and s[i] == 1:\n            break\n        # if the battery is empty\n        # and the accumulator is full\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge == a and s[i] == 0:\n            break\n        # if the battery is empty\n        # and the accumulator is full\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge == a and s[i] == 1:\n            break\n        # if the battery is full\n        # and the accumulator is not empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge > 0 and s[i] == 0:\n            break\n        # if the battery is full\n        # and the accumulator is not empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == b and a_charge > 0 and s[i] == 1:\n            break\n        # if the battery is not empty\n        # and the accumulator is full\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge > 0 and a_charge == a and s[i] == 0:\n            break\n        # if the battery is not empty\n        # and the accumulator is full\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge > 0 and a_charge == a and s[i] == 1:\n            break\n        # if the battery is empty\n        # and the accumulator is not empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge > 0 and s[i] == 0:\n            break\n        # if the battery is empty\n        # and the accumulator is not empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge == 0 and a_charge > 0 and s[i] == 1:\n            break\n        # if the battery is not empty\n        # and the accumulator is empty\n        # and the current segment is not exposed to sunlight\n        # the robot can't move forward\n        elif b_charge > 0 and a_charge == 0 and s[i] == 0:\n            break\n        # if the battery is not empty\n        # and the accumulator is empty\n        # and the current segment is exposed to sunlight\n        # the robot can't move forward\n        elif b_charge > 0 and a_charge == 0 and s[i] == 1:\n            break\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nm = 0\nprint(solve(n, b, a, s, m))\n", "\n\ndef solve(n, b, a, s, d):\n    # initialize variables\n    i = 1\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == '1':\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == '0':\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == '0':\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == '1':\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n        # if the robot has reached the destination\n        # stop\n        if max_dist == d:\n            break\n    return max_dist\n\nn, b, a, d = map(int, input().split())\ns = input()\nprint(solve(n, b, a, s, d))\n", "\n\ndef solve(n, b, a, s): \n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", "\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator and the current segment is exposed to sunlight, charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery and the current segment is not exposed to sunlight, charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", "\n\ndef solve(n, b, a, s, i=0, b_charge=b, a_charge=a, max_dist=0):\n    # initialize variables\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", "\n\ndef solve(n, b, a, s):\n    # initialize variables\n    index = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while index < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[index] == 1:\n            a_charge += 1\n            index += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[index] == 0:\n            b_charge += 1\n            index += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[index] == 0:\n            a_charge -= 1\n            index += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[index] == 1:\n            b_charge -= 1\n            index += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", '\n\ndef solve(n, b, a, s):\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        else:\n            break\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n', "\n\ndef solve(n, b, a, s):\n    # initialize variables \n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n"]
2022-04-20 17:27:06.124485 size on output set 8
