["\n\ndef main():\n    n, m = map(int, input().split())  # n: \u4eba\u6570, m: \u6295\u7968\u6570\n    votes = list(map(int, input().split()))  # \u6295\u7968\u6570\n    votes.sort()\n    # print(n, m, votes)\n\n    # \u6295\u7968\u6570\u304c\u7570\u306a\u308b\u4eba\u6570\n    diff_votes = len(set(votes))\n    # print(diff_votes)\n\n    # \u540c\u3058\u6295\u7968\u6570\u304c\u4f55\u4eba\u3044\u308b\u304b\n    same_votes = {}\n    for vote in votes:\n        if vote in same_votes:\n            same_votes[vote] += 1\n        else:\n            same_votes[vote] = 1\n    # print(same_votes)\n\n    # \u6295\u7968\u6570\u304c\u7570\u306a\u308b\u4eba\u6570\u304c1\u4eba\u306e\u5834\u5408\n    if diff_votes == 1:\n        print(0)\n    # \u6295\u7968\u6570\u304c\u7570\u306a\u308b\u4eba\u6570\u304c2\u4eba\u306e\u5834\u5408\n    elif diff_votes == 2:\n        print(min(same_votes.values()))\n    # \u6295\u7968\u6570\u304c\u7570\u306a\u308b\u4eba\u6570\u304c3\u4eba\u4ee5\u4e0a\u306e\u5834\u5408\n    else:\n        print(sum(same_votes.values()) - max(same_votes.values()))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\n\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    if M == 1:\n        print(0)\n        return\n    X = sorted(list(map(int, input().split())))\n    X_min = X[0]\n    X_max = X[-1]\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "\ndef main():\n    n, m = map(int, input().split())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    # print(n, m, xs)\n\n    mvs = 0\n    for i in range(m):\n        # print(\"Start: \", xs[i], xs[i+1:])\n        if i+1 < len(xs) and (xs[i+1] - xs[i]) > 1 and i+1 < m:\n            # print(\"Move: \", xs[i], xs[i+1])\n            mvs += 1\n        else:\n            # print(\"Skip: \", xs[i], xs[i+1])\n            pass\n    print(mvs)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x))\n", "\n#\n# import sys\n#\n#\n# def min_moves(pieces, target_coordinates):\n#     target_coordinates.sort()\n#     moves_required = 0\n#\n#     for i in range(len(target_coordinates)):\n#         moves_required += abs(pieces[i] - target_coordinates[i])\n#\n#     return moves_required\n#\n#\n# if __name__ == '__main__':\n#     n, m = map(int, sys.stdin.readline().split())\n#     x = list(map(int, sys.stdin.readline().split()))\n#\n#     print(min_moves(x, x))\n", "\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i]) \n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(x, x)) \n", "\n\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))[:n]\n\n    print(min_moves(x, x))\n", "\n\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())\n    pieces = list(map(int, sys.stdin.readline().split()))\n\n    print(min_moves(pieces, pieces))\n", "\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n = int(input())\n    xs = [int(x) for x in input().split()]\n    # print(n, xs)\n\n    xs.sort(reverse=True)\n    print(xs[0])\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef min_moves(pieces, target_coordinates):\n    target_coordinates.sort()\n    moves_required = 0\n\n    for i in range(len(target_coordinates)):\n        moves_required += abs(pieces[i] - target_coordinates[i])\n\n    return moves_required\n\n\nif __name__ == '__main__':\n    n, m = map(int, sys.stdin.readline().split())  # read the number of pieces and the number of target coordinates\n    x = list(map(int, sys.stdin.readline().split()))  # read the pieces\n\n    print(min_moves(x, x))\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(map(int, input().split()))\n    total_moves = 0\n    for i in range(1, M):\n        moves_from_current_to_next = abs(X[i-1] - X[i])\n        total_moves += moves_from_current_to_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    X = sorted(list(map(int, input().split())))\n    X_min = X[0]\n    X_max = X[-1]\n    total_moves = 0\n    for i in range(1, M):\n        moves_between_current_and_next = abs(X[i-1] - X[i])\n        total_moves += moves_between_current_and_next - 1\n    print(total_moves)\n\nif __name__ == '__main__':\n    main()\n"]