["import numpy as np\nimport pandas as pd\n\n\ndef read_file(file_name):\n    df = pd.read_csv(file_name, sep='\\t', header=None)\n    return df\n\n\ndef to_list(df):\n    return df.values.tolist()\n\n\ndef to_array(df):\n    return df.values\n\n\ndef to_np(df):\n    return np.array(df)\n\n\ndef to_dataframe(df):\n    return pd.DataFrame(df)\n\n\ndef to_series(df):\n    return pd.Series(df)\n\n\ndef to_dict(df):\n    return df.to_dict()\n\n\ndef to_dict_list(df):\n    return df.to_dict('list')\n\n\ndef to_dict_records(df):\n    return df.to_dict('records')\n\n\ndef to_dict_split(df):\n    return df.to_dict('split')\n\n\ndef to_dict_series(df):\n    return df.to_dict('series')\n\n\ndef to_dict_index(df):\n    return df.to_dict('index')\n\n\ndef to_dict_orient(df):\n    return df.to_dict(orient='dict')\n\n\ndef to_dict_orient_list(df):\n    return df.to_dict(orient='list')\n\n\ndef to_dict_orient_records(df):\n    return df.to_dict(orient='records')\n\n\ndef to_dict_orient_split(df):\n    return df.to_dict(orient='split')\n\n\ndef to_dict_orient_series(df):\n    return df.to_dict(orient='series')\n\n\ndef to_dict_orient_index(df):\n    return df.to_dict(orient='index')\n\n\ndef to_json(df):\n    return df.to_json()\n\n\ndef to_json_orient(df):\n    return df.to_json(orient='dict')\n\n\ndef to_json_orient_records(df):\n    return df.to_json(orient='records')\n\n\ndef to_json_orient_index(df):\n    return df.to_json(orient='index')\n\n\ndef to_json_orient_split(df):\n    return df.to_json(orient='split')\n\n\ndef to_json_orient_table(df):\n    return df.to_json(orient='table')\n\n\ndef to_json_orient_values(df):\n    return df.to_json(orient='values')\n\n\ndef to_json_orient_columns(df):\n    return df.to_json(orient='columns')\n\n\ndef to_json_orient_series(df):\n    return df.to_json(orient='series')\n\n\ndef to_json_orient_records_lines(df):\n    return df.to_json(orient='records', lines=True)\n\n\ndef to_json_orient_index_lines(df):\n    return df.to_json(orient='index', lines=True)\n\n\ndef to_json_orient_split_lines(df):\n    return df.to_json(orient='split', lines=True)\n\n\ndef to_json_orient_table_lines(df):\n    return df.to_json(orient='table', lines=True)\n\n\ndef to_json_orient_values_lines(df):\n    return df.to_json(orient='values', lines=True)\n\n\ndef to_json_orient_columns_lines(df):\n    return df.to_json(orient='columns', lines=True)\n\n\ndef to_json_orient_series_lines(df):\n    return df.to_json(orient='series', lines=True)\n\n\ndef to_json_orient_records_lines_date_format(df):\n    return df.to_json(orient='records', lines=True, date_format='iso')\n\n\ndef to_json_orient_index_lines_date_format(df):\n    return df.to_json(orient='index', lines=True, date_format='iso')\n\n\ndef to_json_orient_split_lines_date_format(df):\n    return df.to_json(orient='split', lines=True, date_format='iso')\n\n\ndef to_json_orient_table_lines_date_format(df):\n    return df.to_json(orient='table', lines=True, date_format='iso')\n\n\ndef to_json_orient_values_lines_date_format(df):\n    return df.to_json(orient='values', lines=True, date_format='iso')\n\n\ndef to_json_orient_columns_lines_date_format(df):\n    return df.to_json(orient='columns', lines=True, date_format='iso')\n\n\ndef to_json_orient_series_lines_date_format(df):\n    return df.to_json(orient='series', lines=True, date_format='iso')\n\n\ndef to_json_orient_records_lines_date_format_date_unit(df):\n    return df.to_json(orient='records', lines=True, date_format='iso', date_unit='s')\n\n\ndef to_json_orient_index_lines_date_format_date_unit(df):\n    return df.to_json(orient='index', lines=True, date_format='iso', date_unit='s')\n\n\ndef to_json_orient_split_lines_date_format_date_unit(df):\n    return df.to_json(orient='split', lines=True, date_format='iso', date_unit='s')\n\n\ndef to_json_orient_table_lines_date_format_date_unit(df):\n    return df.to_json(orient='table', lines=True, date_format='iso', date_unit='s')\n\n\ndef to_json_orient_values_lines_date_format_date_unit(df):\n    return df.to_json(orient='values', lines=True, date_format='iso', date_unit='s')\n\n\ndef to_json_orient_columns_lines_date_format_date_unit(df):\n    return df.to_json(orient='columns', lines=True, date_format='iso', date_unit='s')\n\n\ndef to_json_orient_series_lines_date_format_date_unit(df):\n    return df.to_json(orient='series', lines=True, date_format='iso', date_unit='s')\n", "\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()  # sort the array\n\n\n\ndef power_of_two(n):  # check if the number is power of 2\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "from collections import Counter\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n\n    print(n-max(c.values()))\n", "import os\n\n\nclass File:\n    def __init__(self, filename):\n        self.filename = filename\n\n    def read(self):\n        with open(self.filename, 'r') as f:\n            return f.read()\n\n    def write(self, text):\n        with open(self.filename, 'w') as f:\n            f.write(text)\n\n    def __add__(self, other):\n        new_file = File(self.filename + '+' + other.filename)\n        new_file.write(self.read() + other.read())\n        return new_file\n\n    def __str__(self):\n        return self.filename\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        with open(self.filename, 'r') as f:\n            for line in f:\n                yield line\n\n\nif __name__ == '__main__':\n    file = File('file.txt')\n    file.write('line1\\nline2\\nline3\\n')\n    for line in file:\n        print(ascii(line))\n    print(file.read())\n    file2 = File('file2.txt')\n    file2.write('line4\\nline5\\nline6\\n')\n    print(file2.read())\n    new_file = file + file2\n    print(new_file)\n    print(new_file.read())\n", "n = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n    print(n-max(c.values()))\n", "var fs = require('fs');\nvar path = require('path');\n\nvar mkdirp = require('mkdirp');\n\nvar file = {};\n\nfile.read = function(filepath, callback) {\n  fs.readFile(filepath, 'utf8', function(err, data) {\n    if (err) throw err;\n    callback(data);\n  });\n};\n\nfile.write = function(filepath, data, callback) {\n  mkdirp(path.dirname(filepath), function(err) {\n    if (err) throw err;\n    fs.writeFile(filepath, data, function(err) {\n      if (err) throw err;\n      callback();\n    });\n  });\n};\n\nmodule.exports = file;\n", "\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n\n    print(n-max(c1))\n", "n = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    print(n-max(c.values()))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if a[l] + a[r] == 0:\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "function File(name, content, parent) {\n  this.name = name;\n  this.content = content;\n  this.parent = parent;\n}\n\nFile.prototype.getPath = function() {\n  if (this.parent === null) {\n    return this.name;\n  } else {\n    return this.parent.getPath() + \"/\" + this.name;\n  }\n}\n\nFile.prototype.getContent = function() {\n  return this.content;\n}\n\nFile.prototype.setContent = function(content) {\n  this.content = content;\n}\n\nFile.prototype.getParent = function() {\n  return this.parent;\n}\n\nFile.prototype.setParent = function(parent) {\n  this.parent = parent;\n}\n\nFile.prototype.getName = function() {\n  return this.name;\n}\n\nFile.prototype.setName = function(name) {\n  this.name = name;\n}\n\nFile.prototype.getType = function() {\n  return \"file\";\n}\n\nFile.prototype.getSize = function() {\n  return this.content.length;\n}\n\nFile.prototype.getChildren = function() {\n  return null;\n}\n\nFile.prototype.getChild = function(name) {\n  return null;\n}\n\nFile.prototype.addChild = function(child) {\n  return null;\n}\n\nFile.prototype.removeChild = function(name) {\n  return null;\n}\n\nFile.prototype.toString = function() {\n  return this.getPath() + \": \" + this.getContent();\n}\n\nmodule.exports = File;\n", "#!/usr/bin/python3\n\nimport os\nimport sys\n\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: ./file.py <file>\")\n        sys.exit(1)\n    if not os.path.exists(sys.argv[1]):\n        print(\"{} does not exist\".format(sys.argv[1]))\n        sys.exit(1)\n    if os.path.isdir(sys.argv[1]):\n        print(\"{} is a directory\".format(sys.argv[1]))\n        sys.exit(1)\n    if os.access(sys.argv[1], os.R_OK):\n        print(\"{} is readable\".format(sys.argv[1]))\n    if os.access(sys.argv[1], os.W_OK):\n        print(\"{} is writable\".format(sys.argv[1]))\n    if os.access(sys.argv[1], os.X_OK):\n        print(\"{} is executable\".format(sys.argv[1]))\n    if os.path.isfile(sys.argv[1]):\n        print(\"{} is a file\".format(sys.argv[1]))\n    if os.path.islink(sys.argv[1]):\n        print(\"{} is a symbolic link\".format(sys.argv[1]))\n    if os.path.isfifo(sys.argv[1]):\n        print(\"{} is a named pipe\".format(sys.argv[1]))\n    if os.path.ismount(sys.argv[1]):\n        print(\"{} is a mount point\".format(sys.argv[1]))\n    if os.path.isabs(sys.argv[1]):\n        print(\"{} is an absolute path\".format(sys.argv[1]))\n    if os.path.isdir(sys.argv[1]):\n        print(\"{} is a directory\".format(sys.argv[1]))\n    if os.path.isabs(sys.argv[1]):\n        print(\"{} is an absolute path\".format(sys.argv[1]))\n    if os.path.ismount(sys.argv[1]):\n        print(\"{} is a mount point\".format(sys.argv[1]))\n    if os.path.isfifo(sys.argv[1]):\n        print(\"{} is a named pipe\".format(sys.argv[1]))\n    if os.path.islink(sys.argv[1]):\n        print(\"{} is a symbolic link\".format(sys.argv[1]))\n    if os.path.isfile(sys.argv[1]):\n        print(\"{} is a file\".format(sys.argv[1]))\n    if os.access(sys.argv[1], os.X_OK):\n        print(\"{} is executable\".format(sys.argv[1]))\n    if os.access(sys.argv[1], os.W_OK):\n        print(\"{} is writable\".format(sys.argv[1]))\n    if os.access(sys.argv[1], os.R_OK):\n        print(\"{} is readable\".format(sys.argv[1]))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    print(n-max(c.values()))\n", "#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nint main()\n{\n    ofstream out(\"myfile.txt\");\n    if (out.is_open())\n    {\n        out << \"Hello World!\" << endl;\n        out.close();\n    }\n    else\n    {\n        cout << \"Cannot open file for writing.\" << endl;\n    }\n\n    ifstream in(\"myfile.txt\");\n    if (in.is_open())\n    {\n        string line;\n        while (getline(in, line))\n        {\n            cout << line << endl;\n        }\n        in.close();\n    }\n    else\n    {\n        cout << \"Cannot open file for reading.\" << endl;\n    }\n\n    return 0;\n}\n", "\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    print(solve(n, a))\n", "var fs = require('fs');\n\nvar file = fs.readFileSync('file.txt');\n\nconsole.log(file.toString());\n\nconsole.log('end');\n", "\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n    print(n-max(c.values()))\n", "#!/bin/python3\nn = int(input())\nl = list(map(int,input().split()))\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n    print(n-max(c.values()))\n"]