2022-04-20 18:32:36.434619 num operations 1
2022-04-20 18:32:36.434664 size on input set 1
2022-04-20 18:32:36.434840 using api key derek
2022-04-20 18:32:36.599064 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 18:32:38.100991 using api key jaanu
2022-04-20 18:32:56.335594 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        s[i][j] += s[i][j - 1]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        s[i][j] += s[i - 1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m)] for _ in range(n)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a-1][c-1] += d\n\nfor i in range(n):\n    for j in range(1,m):\n        s[i][j] += s[i][j-1] \n\nfor i in range(1,n):\n    for j in range(m):\n        s[i][j] += s[i-1][j] \n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "import sys\ninput = sys.stdin.readline\n\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0] * (m+1) for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n"
    }
  ],
  "created": 1650479558,
  "object": "edit"
}
2022-04-20 18:32:56.335911 fix syntax errors 8 ['\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        s[i][j] += s[i][j - 1]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        s[i][j] += s[i - 1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '#!/usr/bin/env python3\n\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', 'import sys\nsys.setrecursionlimit(10**6)\n\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m)] for _ in range(n)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a-1][c-1] += d\n\nfor i in range(n):\n    for j in range(1,m):\n        s[i][j] += s[i][j-1] \n\nfor i in range(1,n):\n    for j in range(m):\n        s[i][j] += s[i-1][j] \n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', 'import sys\ninput = sys.stdin.readline\n\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\nn,m,q = map(int, input().split())\ns = [[0] * (m+1) for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n', '\nn,m,q = map(int, input().split())\ns = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor _ in range(q):\n    a,b,c,d = map(int, input().split())\n    s[a][c] += d\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i][j-1]\n\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        s[i][j] += s[i-1][j]\n\nans = 0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1):\n        ans = max(ans, s[j][m] - s[i-1][m] - s[j][i-1] + s[i-1][i-1])\n\nprint(ans)\n']
2022-04-20 18:32:56.336050 size on output set 6
2022-04-20 18:32:56.336065 num operations 1
2022-04-20 18:32:56.336070 size on input set 1
2022-04-20 18:32:56.336242 using api key gabby
2022-04-20 18:32:56.373045 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 18:32:57.874955 using api key sourya
2022-04-20 18:33:08.915980 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a, b, c, d = [None] * Q, [None] * Q, [None] * Q, [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(1, M + 1):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    score = 0\n    for m in range(1, M + 1):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [0] * Q\n    b = [0] * Q\n    c = [0] * Q\n    d = [0] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    score = 0\n    for m in range(1, M + 2):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 1:\n                score_m += d[i] * (b[i] - a[i] + 1)\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 1:\n                score_m += d[j] * (b[j] - a[j])\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [0] * Q\n    b = [0] * Q\n    c = [0] * Q\n    d = [0] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    for m in range(M):\n        for i in range(Q):\n            if m - c[i] == 0:  # \u521d\u671f\u72b6\u614b\n                a[i] = b[i]\n            if a[i] < b[i] and m - c[i] > 0:\n                a[i] += 1\n        score_m = sum([d[i] for i in range(Q) if a[i] == b[i]])\n        print(score_m)\n\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a, b, c, d = [None] * Q, [None] * Q, [None] * Q, [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650479577,
  "object": "edit"
}
2022-04-20 18:33:08.916348 fix syntax errors 8 ["\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a, b, c, d = [None] * Q, [None] * Q, [None] * Q, [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(1, M + 1):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [None] * Q\n    b = [None] * Q\n    c = [None] * Q\n    d = [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    score = 0\n    for m in range(1, M + 1):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [0] * Q\n    b = [0] * Q\n    c = [0] * Q\n    d = [0] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    score = 0\n    for m in range(1, M + 2):\n        score_m = 0\n        for i in range(Q):\n            if m - c[i] == 1:\n                score_m += d[i] * (b[i] - a[i] + 1)\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m - c[j] > 1:\n                score_m += d[j] * (b[j] - a[j])\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a = [0] * Q\n    b = [0] * Q\n    c = [0] * Q\n    d = [0] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    for m in range(M):\n        for i in range(Q):\n            if m - c[i] == 0:  # 初期状態\n                a[i] = b[i]\n            if a[i] < b[i] and m - c[i] > 0:\n                a[i] += 1\n        score_m = sum([d[i] for i in range(Q) if a[i] == b[i]])\n        print(score_m)\n\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M, Q = map(int, input().split())\n    a, b, c, d = [None] * Q, [None] * Q, [None] * Q, [None] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, input().split())\n    a = [a1 - 1 for a1 in a]\n    b = [b1 - 1 for b1 in b]\n    score = 0\n    for m in range(M):\n        score_m = 0\n        for i in range(Q):\n            if m + 1 - c[i] == 0:\n                score_m += d[i]\n        score = max(score, score_m)\n        for j in range(Q):\n            if a[j] < b[j] and m + 1 - c[j] > 0:\n                score_m += d[j]\n                score = max(score, score_m)\n    print(score)\n    return\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 18:33:08.916589 size on output set 6
2022-04-20 18:33:08.916632 num operations 1
2022-04-20 18:33:08.916643 size on input set 1
2022-04-20 18:33:08.916866 using api key sunu
2022-04-20 18:33:28.166995 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 1,
      "text": "\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n"
    },
    {
      "index": 3,
      "text": "\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i (a_i <= b_i <= n)\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a <= i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n\n# a_i, b_i\npairs = [list(map(int, input().split())) for _ in range(m)]\n\n# graph\ngraph = defaultdict(set)\n\nfor a, b in pairs:\n    graph[a].add(b)\n    graph[b].add(a)\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(i+1, n+1):\n        if j in graph[i]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(dp[n][n])\n"
    },
    {
      "index": 5,
      "text": "\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 6,
      "text": "\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m + 1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i + 1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    },
    {
      "index": 7,
      "text": "\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"
    }
  ],
  "created": 1650479588,
  "object": "edit"
}
2022-04-20 18:33:28.167294 fix syntax errors 8 ["\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", "\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", '\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n', "\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i (a_i <= b_i <= n)\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a <= i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", '\n\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n\n# a_i, b_i\npairs = [list(map(int, input().split())) for _ in range(m)]\n\n# graph\ngraph = defaultdict(set)\n\nfor a, b in pairs:\n    graph[a].add(b)\n    graph[b].add(a)\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(i+1, n+1):\n        if j in graph[i]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(dp[n][n])\n', "\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", "\nfrom collections import deque\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m + 1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i + 1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n", "\n\nn, m, q = map(int, input().split())\n\n# a_i, b_i, c_i, d_i\nquads = [list(map(int, input().split())) for _ in range(q)]\n\n# dp[i][j] ... maximum score for first i numbers with last number equal j\ndp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    # if we don't use the last number\n    dp[i][0] = dp[i-1][0]\n\n    # if we use the last number\n    for j in range(1, m+1):\n        dp[i][j] = dp[i-1][j-1]\n\n        # check if we can contribute with the last number\n        for a, b, c, d in quads:\n            if a == i and b == i+1 and c == j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + d)\n\nprint(max(dp[n]))\n"]
2022-04-20 18:33:28.167484 size on output set 6
