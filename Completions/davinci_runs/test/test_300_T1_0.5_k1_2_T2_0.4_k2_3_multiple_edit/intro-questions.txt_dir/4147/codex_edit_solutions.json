["\n# -*- coding: utf-8 -*-\n\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n    res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n    res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n    res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n    return res\n\nprint(dfs(0, 0, 0, 0))\n", "import sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and a == A and b == B and c == C:\n        return mp\n    if mp < 0 or a > A or b > B or c > C:\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i + 1 < len(l):\n            l[i + 1] += l[i]\n        ans = min(ans, dfs(l[i + 1:], a, b, c, mp - 10) + 10)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nL = []\nfor _ in range(N):\n    L.append(int(sys.stdin.readline()))\n\nL.sort()\n\ndef dfs(L, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C): return mp\n    if mp < 0 or (a > A or b > B or c > C): return float('inf')\n    ans = float('inf')\n    for i in range(len(L)):\n        if a < A: ans = min(ans, dfs(L, a+L[i], b, c, mp-(A-a)))\n        if b < B: ans = min(ans, dfs(L, a, b+L[i], c, mp-(B-b)))\n        if c < C: ans = min(ans, dfs(L, a, b, c+L[i], mp-(C-c)))\n        if L[i] >= 2: ans = min(ans, dfs(L, a, b, c, mp-1) + 1)\n        if i+1 < len(L) and L[i] == L[i+1]: L[i+1] += L[i]\n        ans = min(ans, dfs(L[i+1:], a, b, c, mp-10) + 10)\n        return float('inf')\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2 and (a < A or b < B or c < C):\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1) # \u5207\u308b\n        if i+1 < len(l):\n            l[i+1] += l[i] # \u5408\u4f53\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9) # \u6368\u3066\u308b\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\n\nsys.setrecursionlimit(10**6)\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort(reverse=True)\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C) or len(l) == 0:\n        return mp\n    if mp < 0 or (a > A or b > B or c > C) or len(l) == 0:\n        return float('inf')\n    ans = float('inf')\n    for i in range(N):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < N:\n            l[i+1] += l[i] # \u5408\u4f53\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-10) + 10) # \u5207\u65ad\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = [0] * N\nfor i in range(N):\n    l[i] = int(sys.stdin.readline())\nl.sort()\ndef dfs(l, a, b, c, mp, n):\n    if n == N:\n        if a == A and b == B and c == C:\n            return mp\n        else:\n            return float('inf')\n    else:\n        if a > A or b > B or c > C:\n            return float('inf')\n        else:\n            ans = float('inf')\n            ans = min(ans, dfs(l, a+l[n], b, c, mp-(A-a), n+1))\n            ans = min(ans, dfs(l, a, b+l[n], c, mp-(B-b), n+1))\n            ans = min(ans, dfs(l, a, b, c+l[n], mp-(C-c), n+1))\n            if l[n] >= 2:\n                ans = min(ans, dfs(l, a, b, c, mp-1, n+1) + 1)\n            ans = min(ans, dfs(l, a, b, c, mp-10, n+1) + 10)\n            return ans\nprint(dfs(l, 0, 0, 0, 100, 0))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9))\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\n\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    if ls[cur] - 1 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9) # a\u306b\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9) # b\u306b\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9) # c\u306b\u4f7f\u3046\n    if ls[cur] - 2 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8) # a\u306b\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8) # b\u306b\u4f7f\u3046\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8) # c\u306b\u4f7f\u3046\n    return res\n\nprint(dfs(0, 0, 0, 0))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l) and l[i] >= 2:\n            l[i+1] += l[i] - 2\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            if l[i] == l[i+1]:\n                l[i+1] += l[i]\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-10) + 10)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2:\n            ans = min(ans, dfs(l, a, b, c, mp-1))\n        if i+1 < len(l) and l[i] == l[i+1]:\n            l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-10) + 10)\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "import sys\ninput = sys.stdin.readline\n\n\n\nN, A, B, C = map(int, input().split())\nls = [int(input()) for i in range(N)]\n\ndef dfs(cur, a, b, c):\n    if a == A and b == B and c == C:\n        return 0\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c))\n    res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n    res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n    if ls[cur] - 1 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n    if ls[cur] - 2 > 0:\n        res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n        res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n        res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n    return res\n\nprint(dfs(0, 0, 0, 0))\n"]