2022-04-22 20:42:52.230013 num operations 2
2022-04-22 20:42:52.230032 size on input set 1
2022-04-22 20:42:52.230189 using api key jaanu
2022-04-22 20:43:05.286602 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 1,
      "text": "\n\ns = input()  # input the string\nt = input()  # input the string\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 2,
      "text": "\n\ns = input()  # \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c\nt = input()  # \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n\ncorrect = 0  # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    }
  ],
  "created": 1650660174,
  "object": "edit"
}
2022-04-22 20:43:05.286883 fix spelling mistakes 3 ['\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\n\ns = input()  # input the string\nt = input()  # input the string\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\n\ns = input()  # строка, которую нужно проверить\nt = input()  # строка, которая используется для проверки\n\ncorrect = 0  # количество правильных ответов\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n']
2022-04-22 20:43:05.286923 size on output set 3
2022-04-22 20:43:05.286932 size on input set 3
2022-04-22 20:43:05.287079 using api key jaanu
2022-04-22 20:43:11.201625 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "s = input()\nt = input()\n\ncount = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\ns = raw_input()\nt = raw_input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 2,
      "text": "a = int(input())\nb = int(input())\nprint(a + b)\n"
    }
  ],
  "created": 1650660185,
  "object": "edit"
}
2022-04-22 20:43:11.201855 fix syntax errors 3 ['s = input()\nt = input()\n\ncount = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        count += 1\n\nprint(count)\n', '\ns = raw_input()\nt = raw_input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', 'a = int(input())\nb = int(input())\nprint(a + b)\n']
2022-04-22 20:43:11.202005 using api key kouti
2022-04-22 20:43:19.868602 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ns = input()  # \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c\nt = input()  # \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\ncorrect = 0  # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 1,
      "text": "\ns = input()  # \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c\nt = input()  # \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n\ncorrect = 0  # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 2,
      "text": "\n\ns = input()  # \u0421\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c\nt = input()  # \u0421\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n\ncorrect = 0  # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    }
  ],
  "created": 1650660191,
  "object": "edit"
}
2022-04-22 20:43:19.868876 fix syntax errors 3 ['\ns = input()  # строка, которую нужно проверить\nt = input()  # строка, которая используется для проверки\ncorrect = 0  # количество правильных ответов\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\ns = input()  # строка, которую нужно проверить\nt = input()  # строка, которая используется для проверки\n\ncorrect = 0  # количество правильных ответов\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\n\ns = input()  # Строка, которую нужно проверить\nt = input()  # Строка, которая используется для проверки\n\ncorrect = 0  # Количество правильных ответов\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n']
2022-04-22 20:43:19.869056 using api key soukgp
2022-04-22 20:43:25.107194 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input()  # input the string 1\nt = input()  # input the string 2\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 1,
      "text": "\ns = input()  # input the string s\nt = input()  # input the string t\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 2,
      "text": "\n\ns = input()  # input the string\nt = input()  # input the string\ncorrect = 0\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    }
  ],
  "created": 1650660199,
  "object": "edit"
}
2022-04-22 20:43:25.107449 fix syntax errors 3 ['\n\ns = input()  # input the string 1\nt = input()  # input the string 2\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\ns = input()  # input the string s\nt = input()  # input the string t\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\n\ns = input()  # input the string\nt = input()  # input the string\ncorrect = 0\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n']
2022-04-22 20:43:25.107477 size on output set 9
2022-04-22 20:43:25.107491 num operations 2
2022-04-22 20:43:25.107497 size on input set 1
2022-04-22 20:43:25.107731 using api key sunu
2022-04-22 20:43:30.530424 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip() \n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650660205,
  "object": "edit"
}
2022-04-22 20:43:30.530650 fix spelling mistakes 3 ["\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip() \n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 20:43:30.530680 size on output set 3
2022-04-22 20:43:30.530688 size on input set 3
2022-04-22 20:43:30.530840 using api key derek
2022-04-22 20:43:37.312533 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split(' ')\n    actual = sys.stdin.readline().strip().split(' ')\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()  # list of strings\n    actual = sys.stdin.readline().strip().split()  # list of strings\n\n    correct = 0  # int\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650660210,
  "object": "edit"
}
2022-04-22 20:43:37.312825 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split(' ')\n    actual = sys.stdin.readline().strip().split(' ')\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()  # list of strings\n    actual = sys.stdin.readline().strip().split()  # list of strings\n\n    correct = 0  # int\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 20:43:37.313014 using api key jaanu
2022-04-22 20:43:42.350542 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip() \n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip() \n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650660217,
  "object": "edit"
}
2022-04-22 20:43:42.350772 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip() \n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip() \n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 20:43:42.350936 using api key kouti
2022-04-22 20:43:49.933032 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(len(forecast) - 1):\n        if forecast[i] == actual[i + 1]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n\tforecast = sys.stdin.readline().strip()\n\tactual = sys.stdin.readline().strip()\n\n\tcorrect = 0\n\tfor i in range(len(forecast)):\n\t\tif forecast[i] == actual[i]:\n\t\t\tcorrect += 1\n\tprint(correct)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650660222,
  "object": "edit"
}
2022-04-22 20:43:49.933279 fix syntax errors 3 ["import sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(len(forecast) - 1):\n        if forecast[i] == actual[i + 1]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n\tforecast = sys.stdin.readline().strip()\n\tactual = sys.stdin.readline().strip()\n\n\tcorrect = 0\n\tfor i in range(len(forecast)):\n\t\tif forecast[i] == actual[i]:\n\t\t\tcorrect += 1\n\tprint(correct)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-22 20:43:49.933418 size on output set 8
