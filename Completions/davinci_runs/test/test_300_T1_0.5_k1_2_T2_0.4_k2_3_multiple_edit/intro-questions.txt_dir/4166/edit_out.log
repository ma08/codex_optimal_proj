2022-04-22 19:31:31.913970 num operations 2
2022-04-22 19:31:31.913992 size on input set 1
2022-04-22 19:31:31.914169 using api key jaanu
2022-04-22 19:31:48.230502 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\u3002\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\u3002\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\u3002\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\u3002\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\u3002\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u3066\u3044\u304f\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    }
  ],
  "created": 1650655892,
  "object": "edit"
}
2022-04-22 19:31:48.230791 fix spelling mistakes 3 ["\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す。\n    # c_i: 桁に入る数字。\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている。\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する。\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、それらを組み合わせて、n桁の数字を作る。\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する。\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決めていく\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全てのクエリについて、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"]
2022-04-22 19:31:48.230994 size on output set 3
2022-04-22 19:31:48.231004 size on input set 3
2022-04-22 19:31:48.231150 using api key kouti
2022-04-22 19:32:20.414387 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\u3002\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\u3002\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\u3002\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\u3002\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\u3002\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# My code (TLE)\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\u3002\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\u3002\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\u3002\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\u3002\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\u3002\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code (AC)\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\n# My code (AC)\n# import itertools\n\n# n, m = map(int, input().split())\n# q = [list(map(int, input().split())) for i in range(m)]\n\n# # \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\n# # \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\n# possible_numbers = [str(i) for i in range(10)]\n\n# # \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\u3002\n# for i in range(m):\n#     # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\u3002\n#     # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\u3002\n#     s_i, c_i = q[i][0] - 1, str(q[i][1])\n#     # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n#     # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n#     # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\u3002\n#     possible_numbers[s_i] = c_i\n#     for j in range(10):\n#         if str(j) != c_i:\n#             possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# # \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\u3002\n# # itertools.product(*possible_numbers)\u306f\u3001\n# # possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# # \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\u3002\n# ans = -1\n# for i in itertools.product(*possible_numbers):\n#     i = int(''.join(i))\n#     if len(str(i)) == n and i >= 0:\n#         if ans == -1:\n#             ans = i\n#         else:\n#             ans = min(ans, i)\n# print(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    }
  ],
  "created": 1650655908,
  "object": "edit"
}
2022-04-22 19:32:20.414766 fix syntax errors 3 ["\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す。\n    # c_i: 桁に入る数字。\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている。\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する。\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、それらを組み合わせて、n桁の数字を作る。\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する。\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code (TLE)\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める。\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す。\n    # c_i: 桁に入る数字。\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている。\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する。\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、それらを組み合わせて、n桁の数字を作る。\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する。\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code (AC)\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code (AC)\n# import itertools\n\n# n, m = map(int, input().split())\n# q = [list(map(int, input().split())) for i in range(m)]\n\n# # 全ての桁について、c_iが入る可能性のある数字を決める。\n# # ここでは、0~9までの全ての数字が入る可能性があるとする\n# possible_numbers = [str(i) for i in range(10)]\n\n# # 全ての桁について、c_iが入る可能性のある数字を決める。\n# for i in range(m):\n#     # s_i-1: s_i番目の桁を表す。\n#     # c_i: 桁に入る数字。\n#     s_i, c_i = q[i][0] - 1, str(q[i][1])\n#     # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている。\n#     # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n#     # それ以外の数字を削除する。\n#     possible_numbers[s_i] = c_i\n#     for j in range(10):\n#         if str(j) != c_i:\n#             possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# # 全ての桁について、c_iが入る可能性のある数字を決めたので、それらを組み合わせて、n桁の数字を作る。\n# # itertools.product(*possible_numbers)は、\n# # possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# # 全ての組み合わせを列挙する。\n# ans = -1\n# for i in itertools.product(*possible_numbers):\n#     i = int(''.join(i))\n#     if len(str(i)) == n and i >= 0:\n#         if ans == -1:\n#             ans = i\n#         else:\n#             ans = min(ans, i)\n# print(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"]
2022-04-22 19:32:20.415092 using api key kouti
2022-04-22 19:32:25.635410 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My code \nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# My code (TLE)\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code (AC)\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    }
  ],
  "created": 1650655940,
  "object": "edit"
}
2022-04-22 19:32:25.635767 fix syntax errors 3 ["\n\n# My code \nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全てのクエリについて、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code (TLE)\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全てのクエリについて、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code (AC)\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全てのクエリについて、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"]
2022-04-22 19:32:25.635997 using api key derek
2022-04-22 19:32:31.824982 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# My code\n\n\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u3066\u3044\u304f\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u3066\u3044\u304f\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u3066\u3044\u304f\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, q[i][1]\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if j != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    }
  ],
  "created": 1650655945,
  "object": "edit"
}
2022-04-22 19:32:31.825375 fix syntax errors 3 ["# My code\n\n\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決めていく\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決めていく\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決めていく\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, q[i][1]\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if j != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"]
2022-04-22 19:32:31.825466 size on output set 9
2022-04-22 19:32:31.825480 num operations 2
2022-04-22 19:32:31.825486 size on input set 1
2022-04-22 19:32:31.825628 using api key soukgp
2022-04-22 19:32:43.399463 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\nl = [input() for _ in range(m)]\nans = [-1] * n\nfor i in range(m):\n    for j in range(n):\n        if ans[j] == -1:\n            ans[j] = l[i][j]\n        else:\n            if ans[j] != l[i][j]:\n                print(-1)\n                exit()\nans = int(''.join(map(str, ans)))\nif ans > 10 ** 9:\n    print(-1)\nelse:\n    print(ans)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        sys.exit()\n\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "\nN, M = map(int, input().split())\n\ns = []\nc = []\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\nmin_num = 0\nmax_num = 10**N\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    }
  ],
  "created": 1650655951,
  "object": "edit"
}
2022-04-22 19:32:43.399695 fix spelling mistakes 3 ["\nn, m = map(int, input().split())\nl = [input() for _ in range(m)]\nans = [-1] * n\nfor i in range(m):\n    for j in range(n):\n        if ans[j] == -1:\n            ans[j] = l[i][j]\n        else:\n            if ans[j] != l[i][j]:\n                print(-1)\n                exit()\nans = int(''.join(map(str, ans)))\nif ans > 10 ** 9:\n    print(-1)\nelse:\n    print(ans)\n", 'import sys\n\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        sys.exit()\n\nprint(-1)\n', '\nN, M = map(int, input().split())\n\ns = []\nc = []\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\nmin_num = 0\nmax_num = 10**N\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n']
2022-04-22 19:32:43.399871 size on output set 3
2022-04-22 19:32:43.399882 size on input set 3
2022-04-22 19:32:43.400032 using api key soukgp
2022-04-22 19:32:56.588747 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "N, M = map(int, input().split())\ns = []\nc = []\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\nmin_num = 0\nmax_num = 10**N\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 1,
      "text": "# coding: utf-8\n\ndef main():\n    N, M = map(int, input().split())\n\n    s = []\n    c = []\n    for i in range(M):\n        tmp = list(map(int, input().split()))\n        s.append(tmp[0])\n        c.append(tmp[1])\n    min_num = 0\n    max_num = 10**N\n    for i in range(min_num, max_num):\n        num_str = str(i)\n        if len(num_str) != N:\n            continue\n        is_match = True\n        for j in range(M):\n            if int(num_str[s[j]-1]) != c[j]:\n                is_match = False\n                break\n        if is_match:\n            print(i)\n            exit()\n\n    print(-1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "N, M = map(int, input().split())\ns = []\nc = []\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[1])\n    c.append(tmp[0])\nmin_num = 0\nmax_num = 10**N + 1\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    }
  ],
  "created": 1650655963,
  "object": "edit"
}
2022-04-22 19:32:56.588999 fix syntax errors 3 ['N, M = map(int, input().split())\ns = []\nc = []\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\nmin_num = 0\nmax_num = 10**N\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\nprint(-1)\n', "# coding: utf-8\n\ndef main():\n    N, M = map(int, input().split())\n\n    s = []\n    c = []\n    for i in range(M):\n        tmp = list(map(int, input().split()))\n        s.append(tmp[0])\n        c.append(tmp[1])\n    min_num = 0\n    max_num = 10**N\n    for i in range(min_num, max_num):\n        num_str = str(i)\n        if len(num_str) != N:\n            continue\n        is_match = True\n        for j in range(M):\n            if int(num_str[s[j]-1]) != c[j]:\n                is_match = False\n                break\n        if is_match:\n            print(i)\n            exit()\n\n    print(-1)\n\nif __name__ == '__main__':\n    main()\n", 'N, M = map(int, input().split())\ns = []\nc = []\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[1])\n    c.append(tmp[0])\nmin_num = 0\nmax_num = 10**N + 1\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n']
2022-04-22 19:32:56.589177 using api key soukgp
2022-04-22 19:33:06.191867 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m = map(int, input().split())\nl = [input() for _ in range(m)]\nans = [-1] * n\nfor i in range(m):\n    for j in range(n):\n        if ans[j] == -1:\n            ans[j] = l[i][j]\n        else:\n            if ans[j] != l[i][j]:\n                print(-1)\n                exit()\nans = int(''.join(map(str, ans)))\nif ans > 10 ** 9:\n    print(-1)\nelse:\n    print(ans)\n"
    },
    {
      "index": 1,
      "text": "n, m = map(int, input().split())\nl = [input() for _ in range(m)]\nans = [-1] * n\nfor i in range(m):\n    for j in range(n):\n        if ans[j] == -1:\n            ans[j] = l[i][j]\n        else:\n            if ans[j] != l[i][j]:\n                print(-1)\n                exit()\nans = int(''.join(map(str, ans)))\nif ans > 10 ** 9:\n    print(-1)\nelse:\n    print(ans)\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\nl = [list(map(int, input().split())) for _ in range(m)]\nans = [0] * n\nfor i in range(m):\n    for j in range(n):\n        if ans[j] == 0:\n            ans[j] = l[i][j] + 1\n        else:\n            if ans[j] != l[i][j] + 1:\n                print(-1)\n                exit()\nans = int(''.join(map(str, ans)))\nif ans > 10 ** 9:\n    print(-1)\nelse:\n    print(ans)\n"
    }
  ],
  "created": 1650655976,
  "object": "edit"
}
2022-04-22 19:33:06.192100 fix syntax errors 3 ["n, m = map(int, input().split())\nl = [input() for _ in range(m)]\nans = [-1] * n\nfor i in range(m):\n    for j in range(n):\n        if ans[j] == -1:\n            ans[j] = l[i][j]\n        else:\n            if ans[j] != l[i][j]:\n                print(-1)\n                exit()\nans = int(''.join(map(str, ans)))\nif ans > 10 ** 9:\n    print(-1)\nelse:\n    print(ans)\n", "n, m = map(int, input().split())\nl = [input() for _ in range(m)]\nans = [-1] * n\nfor i in range(m):\n    for j in range(n):\n        if ans[j] == -1:\n            ans[j] = l[i][j]\n        else:\n            if ans[j] != l[i][j]:\n                print(-1)\n                exit()\nans = int(''.join(map(str, ans)))\nif ans > 10 ** 9:\n    print(-1)\nelse:\n    print(ans)\n", "\nn, m = map(int, input().split())\nl = [list(map(int, input().split())) for _ in range(m)]\nans = [0] * n\nfor i in range(m):\n    for j in range(n):\n        if ans[j] == 0:\n            ans[j] = l[i][j] + 1\n        else:\n            if ans[j] != l[i][j] + 1:\n                print(-1)\n                exit()\nans = int(''.join(map(str, ans)))\nif ans > 10 ** 9:\n    print(-1)\nelse:\n    print(ans)\n"]
2022-04-22 19:33:06.192276 using api key derek
2022-04-22 19:33:12.095065 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[1])\n    c.append(tmp[0])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        sys.exit()\n\nprint(-1)\n"
    },
    {
      "index": 1,
      "text": "N, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "import sys\n\nN, M = map(int, input().split())\n\ns = [0 for _ in range(M)]\nc = [0 for _ in range(M)]\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s[i] = tmp[0]\n    c[i] = tmp[1]\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        sys.exit()\n\nprint(-1)\n"
    }
  ],
  "created": 1650655986,
  "object": "edit"
}
2022-04-22 19:33:12.095421 fix syntax errors 3 ['import sys\n\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[1])\n    c.append(tmp[0])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        sys.exit()\n\nprint(-1)\n', 'N, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n', 'import sys\n\nN, M = map(int, input().split())\n\ns = [0 for _ in range(M)]\nc = [0 for _ in range(M)]\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s[i] = tmp[0]\n    c[i] = tmp[1]\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        sys.exit()\n\nprint(-1)\n']
2022-04-22 19:33:12.095469 size on output set 8
