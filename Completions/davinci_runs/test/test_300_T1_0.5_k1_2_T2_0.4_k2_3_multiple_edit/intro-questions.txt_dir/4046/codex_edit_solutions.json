["\ndef solve(n, q):\n    p = [0]\n    for i in range(n - 1):\n        if p[-1] + q[i] >= 0 and p[-1] + q[i] < n:\n            p.append(p[-1] + q[i] + 1)\n        else:\n            print(p)\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    p = solve(n, q)\n    if p == -1:\n        print(p)\n    else:\n        print(*p)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in raw_input().split()]\n    return n, q\n\ndef check_sequence(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_sequence(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_sequence(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_sequence(n, q):\n        print(-1)\n        return\n    p = create_sequence(n, q)\n    print_sequence(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n, a):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + a[i] > 0 and p[-1] + a[i] <= n:\n            p.append(p[-1] + a[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*solve(n, a))\n\n\nif __name__ == \"__main__\":\n    main()\n", "def get_input():\n    n = int(raw_input())\n    q = [int(x) for x in raw_input().split()]\n    return n,q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_sequence(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_sequence(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_sequence(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_sequence(n, q):\n        print(-1)\n        return\n    p = create_sequence(n, q)\n    print_sequence(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if 0 < p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = 1\n    p[1] = 1 + q[0]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_input():\n    n = int(raw_input())\n    q = [int(x) for x in raw_input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"]