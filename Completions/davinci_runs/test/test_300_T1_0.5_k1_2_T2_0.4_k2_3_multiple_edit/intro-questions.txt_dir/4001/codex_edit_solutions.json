["\n\n# read N, M\nN, M = map(int, input().split())\n# read list of N numbers\nL = list(map(int, input().split()))[:N]\n\n# create dictionary for numbers and their count\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of odd numbers and their count\nX = [] # list of numbers\nY = [] # list of counts\nfor i in D:\n    if D[i] % 2 == 1:\n        Y.append(D[i])\n        X.append(i)\n\n# print odd numbers and their count\nfor i in range(len(X)):\n    print(X[i], Y[i])\n", "from math import sqrt\n\nN, M = map(int, input().split())\n\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n\n    return divisors\n\n\ndivisors = get_divisors(M)\n\ndivisors.sort()\n\nfor i in range(len(divisors)):\n    if divisors[i] >= N:\n        print(divisors[i])\n        exit()\n\nprint(1)\n", "\nimport sys\nfrom collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    d = defaultdict(list)\n    for i in range(N):\n        d[input()].append(str(i + 1))\n    for _ in range(M):\n        print(' '.join(d[input()]) or -1)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# read N and M\nN = int(input())\nM = int(input())\n# read lists\nX = list(map(int, input().split()))\nY = list(map(int, input().split()))\n\n# create dictionary for numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "#!/usr/bin/python3\n\nN = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(0, N, 2):\n    x *= divisors[i]\nfor i in range(1, N, 2):\n    y *= divisors[i]\nprint(x, y)\n", "#!/usr/bin/env python3\n\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers to count\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "#!/usr/bin/env python3\n\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers and count\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of odd numbers and count\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print odd numbers\nprint(X[0], X[1])\n", "#!/usr/bin/env python3\n\nN = int(input())\ndivisors = list(map(int,input().split()))\nx = 1\ny = 1\nfor i in range(0,N,2):\n    x *= divisors[i]\nfor i in range(1,N,2):\n    y *= divisors[i]\nprint(x, y)\n", "N = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n", "\n\ndef main():\n    # read N\n    N = int(input())\n    # read list\n    L = list(map(int, input().split()))\n\n    # create dictionary for numbers\n    D = {}\n    for i in L:\n        D[i] = D.get(i, 0) + 1\n\n    # create list of odd numbers\n    X = []\n    for i in D:\n        if D[i] % 2:\n            X.append(i)\n\n    # print odd numbers\n    print(X[0], X[1])\n\nif __name__ == \"__main__\":\n    main()\n", "\nN = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(x, y)\n"]