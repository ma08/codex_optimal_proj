["\n\n# n = int(input())\n# s = input()\n# print(\"\".join(s.split(\"xxx\")))  # this is a wrong answer\n\ndef get_result(n, s):\n    def find_next_xxx_index(s, start_index=0):  # find the index of the first \"xxx\"\n        index = start_index\n        while index < len(s) and s[index] == \"x\":\n            index += 1\n        while index < len(s):\n            if s[index] == \"x\":\n                if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                    return index\n            index += 1\n        return -1\n\n    def remove_char_at_index(s, index):  # remove the char at index, return a new string\n        return s[:index] + s[index + 1:]\n\n    def remove_first_xxx(s):\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return s\n        return remove_char_at_index(s, i)\n\n    result = len(s)\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n", "\n\n# n = int(input())\n# s = input()\n# print(\"\".join(s.split(\"xxx\")))  # this is a wrong answer, because \"xxxxx\" will be \"x\"\n\ndef get_result(n, s):\n    def find_next_xxx_index(s, start_index=0):  # find the index of the first \"xxx\" from start_index\n        index = start_index\n        while index < len(s) and s[index] == \"x\":\n            index += 1\n        while index < len(s):\n            if s[index] == \"x\":\n                if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                    return index\n            index += 1\n        return -1\n\n    def remove_char_at_index(s, index):  # remove the char at index\n        return s[:index] + s[index + 1:]\n\n    def remove_first_xxx(s):\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return s\n        return remove_char_at_index(s, i)\n\n    result = len(s)\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n", "\nn = int(input())\nfile_name = input()\ncount = 0\nfor i in range(2, n):\n    if file_name[i-2] == file_name[i-1] == file_name[i]:\n        count += 1\nprint(count)\n", "\n\nn = int(input())\nfile_name = input()\ncount = 0\nfor i in range(2, n):\n    if file_name[i-2] == file_name[i-1] == file_name[i]:\n        count += 1\n\n\n\n#\n# n = int(input())\n# file_name = input()\n# count = 0\n# for i in range(2, n):\n#     if file_name[i-2] == file_name[i-1] == file_name[i]:\n#         count += 1\n# print(count)\nprint(count)\n", "\n\n# n = int(input())\n# s = input()\n# print(\"\".join(s.split(\"xxx\")))  # this is a wrong answer, for example, \"xxxxx\"\n\ndef get_result(n, s):\n    def find_next_xxx_index(s, start_index=0):  # find the index of the first \"xxx\"\n        index = start_index\n        while index < len(s) and s[index] == \"x\":\n            index += 1\n        while index < len(s):\n            if s[index] == \"x\":\n                if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                    return index\n            index += 1\n        return -1\n\n    def remove_char_at_index(s, index):  # remove the char at index\n        return s[:index] + s[index + 1:]\n\n    def remove_first_xxx(s):\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return s\n        return remove_char_at_index(s, i)\n\n    result = len(s)\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n", "\n\nn = int(input())\ns = input()\nprint(\"\".join(s.split(\"xxx\")))  # This is a wrong solution\n\n\ndef find_next_xxx_index(s, start_index=0):\n    index = start_index\n    while index < len(s) and s[index] == \"x\":\n        index += 1\n    while index < len(s):\n        if s[index] == \"x\":\n            if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                return index\n        index += 1\n    return -1\n\n\ndef remove_char_at_index(s, index):\n    return s[:index] + s[index + 1:]\n\n\ndef remove_first_xxx(s):\n    i = find_next_xxx_index(s)\n    if i == -1:\n        return s\n    return remove_char_at_index(s, i)\n\n\ndef get_result(n, s):\n    result = len(s)\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n", "\n\nfile_name = input().strip()\nn = len(file_name)\n\ncount = 0\nfor i in range(2, n):\n    if file_name[i-2] == file_name[i-1] and file_name[i-1] == file_name[i]:\n        count += 1\n\nprint(count)\n", "\nwith open(input()) as file:\n    print(file.read().count(\"xxx\"))\n", "\nfile_name = input().strip()\nn = len(file_name)\n\ncount = 0\nfor i in range(2, n):\n    if file_name[i-2] == file_name[i-1] == file_name[i]:\n        count += 1\n\nprint(count)\n", "\n\nn = int(input())\nfile_name = input().strip()\ncount = 0\nfor i in range(2, n):\n    if file_name[i-2] == file_name[i-1] == file_name[i]:\n        count += 1\nprint(count)\n", "\n\nn = int(input())\ns = input()\nprint(\"\".join(s.split(\"xxx\")))  # This is a wrong solution\n\ndef find_next_xxx_index(s, start_index=0):\n    index = start_index\n    while index < len(s) and s[index] == \"x\":\n        index += 1\n    while index < len(s):\n        if s[index] == \"x\":\n            if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                return index\n        index += 1\n    return -1\n\n\ndef remove_char_at_index(s, index):\n    return s[:index] + s[index + 1:]\n\n    result = len(s)\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n", "\n\ndef get_result(n, s):\n    return len(s) - max(s.count(\"xxx\"), 0)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n", "\n\n# n = int(input())\n# s = input()\n# print(\"\".join(s.split(\"xxx\")))  # This is a wrong solution\n\ndef get_result(n, s):\n    def find_next_xxx_index(start_index=0):\n        index = start_index\n        while index < len(s) and s[index] == \"x\":\n            index += 1\n        while index < len(s):\n            if s[index] == \"x\":\n                if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                    return index\n            index += 1\n        return -1\n\n    def remove_char_at_index(index):\n        return s[:index] + s[index + 1:]\n\n    def remove_first_xxx():\n        i = find_next_xxx_index()\n        if i == -1:\n            return\n        return remove_char_at_index(i)\n\n    result = len(s)\n    while True:\n        remove_first_xxx()\n        result = min(result, len(s))\n        i = find_next_xxx_index()\n        if i == -1:\n            return result\n        remove_char_at_index(i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n", "\n\nn = int(input())\ns = input()\nprint(\"\".join(s.split(\"xxx\")))  # this is a wrong solution\n\n\ndef find_next_xxx_index(s, start_index=0):\n    index = start_index\n    while index < len(s) and s[index] == \"x\":\n        index += 1\n    while index < len(s):\n        if s[index] == \"x\":\n            if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                return index\n        index += 1\n    return -1\n\n\n    result = len(s)\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n", "file_name = input()\nprint(file_name.count(\"xxx\"))\n", "\n\n# n = int(input())  # this is a wrong solution\n# s = input()  # this is a wrong solution\n# print(\"\".join(s.split(\"xxx\")))  # this is a wrong solution  # this is a wrong solution\n\ndef get_result(n, s):\n    def find_next_xxx_index(s, start_index=0):\n        index = start_index\n        while index < len(s) and s[index] == \"x\":\n            index += 1\n        while index < len(s):\n            if s[index] == \"x\":\n                if s[index - 1] == \"x\" and s[index - 2] == \"x\":\n                    return index\n            index += 1\n        return -1\n\n    def remove_char_at_index(s, index):\n        return s[:index] + s[index + 1:]\n\n    def remove_first_xxx(s):\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return s\n        return remove_char_at_index(s, i)\n\n    result = len(s)\n    while True:\n        s = remove_first_xxx(s)\n        result = min(result, len(s))\n        i = find_next_xxx_index(s)\n        if i == -1:\n            return result\n        s = remove_char_at_index(s, i)\n        result = min(result, len(s))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(get_result(n, s))\n"]