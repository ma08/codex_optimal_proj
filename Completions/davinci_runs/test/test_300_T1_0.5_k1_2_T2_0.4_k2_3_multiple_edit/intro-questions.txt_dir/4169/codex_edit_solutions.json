["\ndef main():\n    N, M = [int(x) for x in input().split()]\n    price_list = [[0, 0]]\n    for i in range(N):\n        price_list.append([int(x) for x in input().split()])\n    price_list.sort()\n    total = 0\n    while M > 0:\n        if price_list[0][1] >= M:\n            total += price_list[0][0] * M\n            M = 0\n        else:\n            total += price_list[0][0] * price_list[0][1]\n            M -= price_list[0][1]\n            price_list.pop(0)\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    N, M = [int(x) for x in input().split()]\n    price_list = []\n    for i in range(N):\n        price_list.append([int(x) for x in input().split()])\n    price_list.sort(key=lambda x: x[0])\n    total = 0\n    while M > 0:\n        if price_list[0][1] >= M:\n            total += price_list[0][0] * M\n            M = 0\n        else:\n            total += price_list[0][0] * price_list[0][1]\n            M -= price_list[0][1]\n            price_list.pop(0)\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "n, m = map(int, input().split())\n\ncost = []\nfor _ in range(n):\n  a, b = map(int, input().split())\n  cost.append((a, b))\ncost.sort()\n\nprice = 0\nfor c in cost:\n  if m - c[1] > 0:\n    price += c[0] * c[1]\n    m -= c[1]\n  else:\n    price += c[0] * m\n    break\n\nprint(price)\n", "def main():\n    print(\"Hello World!\")\n\nif __name__ == '__main__':\n    main()\n", "import heapq\n\n\nn, m = map(int, input().split()) # n: number of items, m: number of people\n\ncost = [] # (price, number of people)\nfor _ in range(n):\n  a, b = map(int, input().split())\n  cost.append((-a, b))\n\nheapq.heapify(cost)\n\nprice = 0\nfor c in cost:\n  if m - c[1] > 0: # if there are more people than the number of items\n    price += -c[0] * c[1]\n    m -= c[1]\n  else:\n    price += -c[0] * m\n    break\n\nprint(price)\n", "\ndef main():\n    N, M = [int(x) for x in input().split()]  # N: number of types of apples, M: total number of apples\n    price_list = []\n    for i in range(N):\n        price_list.append([int(x) for x in input().split()])\n    price_list.sort()  # sort by price\n    total = 0\n    while M > 0:\n        if price_list[0][1] >= M:\n            total += price_list[0][0] * M\n            M = 0\n        else:\n            total += price_list[0][0] * price_list[0][1]\n            M -= price_list[0][1]\n            price_list.pop(0)\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, m = map(int, input().split())\n\ncost = []\nfor _ in range(n):\n  a, b = map(int, input().split())\n  cost.append((a, b))\n\ncost.sort()\n\nprices = 0\nfor c in cost:\n  if m - c[1] > 0:\n    prices += c[0] * c[1]\n    m -= c[1]\n  else:\n    prices += c[0] * m\n    break\n\nprint(prices)\n", "\n\ndef main():\n    N, M = [int(x) for x in input().split()]  # N: number of types of apples, M: total number of apples to buy\n    price_list = []\n    for i in range(N):\n        price_list.append([int(x) for x in input().split()])\n    price_list.sort()  # sort by price\n    total = 0\n    while M > 0:\n        if price_list[0][1] >= M:\n            total += price_list[0][0] * M\n            M = 0\n        else:\n            total += price_list[0][0] * price_list[0][1]\n            M -= price_list[0][1]\n            price_list.pop(0)\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N, M = [int(x) for x in input().split()]\n    price_list = []\n    for i in range(N):\n        price_list.append([int(x) for x in input().split()])\n    price_list.sort()\n    total = 0\n    while M > 0:\n        if price_list[0][1] >= M:\n            total += price_list[0][0]*M\n            M = 0\n        else:\n            total += price_list[0][0]*price_list[0][1]\n            M -= price_list[0][1]\n            price_list.pop(0)\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "n, m = map(int, input().split())\n\ncost = []\nfor _ in range(n):\n  a, b = map(int, input().split())\n  cost.append((a, b))\n\ncost.sort()\n\nprice = 0\nfor c in cost:\n  if m - c[1] > 0:\n    price += c[0] * c[1]\n    m -= c[1]\n  else:\n    price += c[0] * m\n    break\n\nprint(price)\n"]