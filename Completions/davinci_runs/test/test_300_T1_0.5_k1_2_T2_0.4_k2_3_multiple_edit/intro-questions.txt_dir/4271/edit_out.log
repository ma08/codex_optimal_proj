2022-04-22 21:03:59.070029 num operations 2
2022-04-22 21:03:59.070050 size on input set 1
2022-04-22 21:03:59.070222 using api key jaanu
2022-04-22 21:04:03.668760 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ndishes = list(map(int, input().split()))\npoints = list(map(int, input().split()))\nbonus = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1]\n    if i > 0 and dishes[i] == dishes[i - 1] + 1:\n        ans += bonus[dishes[i - 1] - 1]\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ndishes = list(map(int, input().split()))\npoints = list(map(int, input().split()))\nbonus = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1]\n    if i > 0 and dishes[i] == dishes[i - 1] + 1:\n        ans += bonus[dishes[i - 1] - 1]\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\ndishes = list(map(int, input().split()))\npoints = list(map(int, input().split()))\nbonus = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1]\n    if i > 0 and dishes[i] == dishes[i - 1] + 1:\n        ans += bonus[dishes[i - 1] - 1]\n\nprint(ans)\n"
    }
  ],
  "created": 1650661439,
  "object": "edit"
}
2022-04-22 21:04:03.669097 fix spelling mistakes 3 ['\nn = int(input())\ndishes = list(map(int, input().split()))\npoints = list(map(int, input().split()))\nbonus = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1]\n    if i > 0 and dishes[i] == dishes[i - 1] + 1:\n        ans += bonus[dishes[i - 1] - 1]\n\nprint(ans)\n', '\nn = int(input())\ndishes = list(map(int, input().split()))\npoints = list(map(int, input().split()))\nbonus = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1]\n    if i > 0 and dishes[i] == dishes[i - 1] + 1:\n        ans += bonus[dishes[i - 1] - 1]\n\nprint(ans)\n', '\nn = int(input())\ndishes = list(map(int, input().split()))\npoints = list(map(int, input().split()))\nbonus = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1]\n    if i > 0 and dishes[i] == dishes[i - 1] + 1:\n        ans += bonus[dishes[i - 1] - 1]\n\nprint(ans)\n']
2022-04-22 21:04:03.669145 size on output set 1
2022-04-22 21:04:03.669157 size on input set 1
2022-04-22 21:04:03.669370 using api key soukgp
2022-04-22 21:04:13.821170 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input()) # number of elements\ndishes = list(map(int, input().split())) # list of elements\npoints = list(map(int, input().split())) # points for each element\nbonus = list(map(int, input().split())) # bonus for each element\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1] # add points for each element\n    if i > 0 and dishes[i] == dishes[i - 1] + 1: # if element is consecutive to the previous one\n        ans += bonus[dishes[i - 1] - 1] # add bonus for previous element\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input()) # number of elements\ndishes = list(map(int, input().split())) # elements\npoints = list(map(int, input().split())) # points for each element\nbonus = list(map(int, input().split())) # bonus for each element\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1] # add points for each element\n    if i > 0 and dishes[i] == dishes[i - 1] + 1: # if element is next to previous element\n        ans += bonus[dishes[i - 1] - 1] # add bonus for previous element\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "n = int(input())\ndishes = list(map(int, input().split()))\npoints = list(map(int, input().split()))\nbonus = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1]\n    if i > 0 and dishes[i] == dishes[i - 1] + 1:\n        ans += bonus[dishes[i - 1] - 1]\n\nprint(ans)\n"
    }
  ],
  "created": 1650661443,
  "object": "edit"
}
2022-04-22 21:04:13.821404 fix syntax errors 3 ['\nn = int(input()) # number of elements\ndishes = list(map(int, input().split())) # list of elements\npoints = list(map(int, input().split())) # points for each element\nbonus = list(map(int, input().split())) # bonus for each element\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1] # add points for each element\n    if i > 0 and dishes[i] == dishes[i - 1] + 1: # if element is consecutive to the previous one\n        ans += bonus[dishes[i - 1] - 1] # add bonus for previous element\n\nprint(ans)\n', '\nn = int(input()) # number of elements\ndishes = list(map(int, input().split())) # elements\npoints = list(map(int, input().split())) # points for each element\nbonus = list(map(int, input().split())) # bonus for each element\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1] # add points for each element\n    if i > 0 and dishes[i] == dishes[i - 1] + 1: # if element is next to previous element\n        ans += bonus[dishes[i - 1] - 1] # add bonus for previous element\n\nprint(ans)\n', 'n = int(input())\ndishes = list(map(int, input().split()))\npoints = list(map(int, input().split()))\nbonus = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    ans += points[dishes[i] - 1]\n    if i > 0 and dishes[i] == dishes[i - 1] + 1:\n        ans += bonus[dishes[i - 1] - 1]\n\nprint(ans)\n']
2022-04-22 21:04:13.821438 size on output set 3
2022-04-22 21:04:13.821449 num operations 2
2022-04-22 21:04:13.821455 size on input set 1
2022-04-22 21:04:13.821596 using api key soukgp
2022-04-22 21:04:21.210747 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish_index = dishes[i]\n    total_points += base_points[dish_index]\n    if i != 0 and dishes[i - 1] == dish_index - 1:\n        total_points += additional_points[dish_index - 1]\n\nprint(total_points)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    # If the previous dish is the one before the current one, add the additional points\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\n# print(n, dishes, base_points, additional_pointss)\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n"
    }
  ],
  "created": 1650661453,
  "object": "edit"
}
2022-04-22 21:04:21.210993 fix spelling mistakes 3 ['\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish_index = dishes[i]\n    total_points += base_points[dish_index]\n    if i != 0 and dishes[i - 1] == dish_index - 1:\n        total_points += additional_points[dish_index - 1]\n\nprint(total_points)\n', '\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    # If the previous dish is the one before the current one, add the additional points\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n', '\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\n# print(n, dishes, base_points, additional_pointss)\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n']
2022-04-22 21:04:21.211146 size on output set 3
2022-04-22 21:04:21.211156 size on input set 3
2022-04-22 21:04:21.211340 using api key jaanu
2022-04-22 21:04:32.597549 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish_index = dishes[i]\n    total_points += base_points[dish_index]\n    if i != 0 and dishes[i - 1] == dish_index - 1:\n        total_points += additional_points[dish_index - 1]\n\nprint(total_points)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish_index = dishes[i]\n    total_points += base_points[dish_index]\n    if i != 0 and dishes[i - 1] == dish_index - 1 and dish_index != 0:\n        total_points += additional_points[dish_index - 1]\n\nprint(total_points)\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import Counter\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = Counter([int(a) - 1 for a in stdin.readline().split()])\nbase_points = [int(a) for a in stdin.readline().split()] + [0]\nadditional_points = [int(a) for a in stdin.readline().split()] + [0]\n\ntotal_points = 0\nfor i in range(n + 1):\n    total_points += dishes[i] * base_points[i]\n    if dishes[i - 1] > 0:\n        total_points += dishes[i] * additional_points[i - 1]\n\nprint(total_points)\n"
    }
  ],
  "created": 1650661461,
  "object": "edit"
}
2022-04-22 21:04:32.597789 fix syntax errors 3 ['\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish_index = dishes[i]\n    total_points += base_points[dish_index]\n    if i != 0 and dishes[i - 1] == dish_index - 1:\n        total_points += additional_points[dish_index - 1]\n\nprint(total_points)\n', '\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish_index = dishes[i]\n    total_points += base_points[dish_index]\n    if i != 0 and dishes[i - 1] == dish_index - 1 and dish_index != 0:\n        total_points += additional_points[dish_index - 1]\n\nprint(total_points)\n', '\nfrom collections import Counter\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = Counter([int(a) - 1 for a in stdin.readline().split()])\nbase_points = [int(a) for a in stdin.readline().split()] + [0]\nadditional_points = [int(a) for a in stdin.readline().split()] + [0]\n\ntotal_points = 0\nfor i in range(n + 1):\n    total_points += dishes[i] * base_points[i]\n    if dishes[i - 1] > 0:\n        total_points += dishes[i] * additional_points[i - 1]\n\nprint(total_points)\n']
2022-04-22 21:04:32.597977 using api key soukgp
2022-04-22 21:05:15.183509 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\n# print(n, dishes, base_points, additional_pointss)\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\n\n\ndef solution(n, dishes, base_points, additional_points):\n    total_points = 0\n    for i in range(n):\n        dish = dishes[i]\n        total_points += base_points[dish]\n        if i != 0 and dishes[i - 1] == dish - 1:\n            total_points += additional_points[dish - 1]\n\n    return total_points\n\n\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(s\nprint(total_points)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]  # 0-indexed\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\n# print(n, dishes, base_points, additional_points)\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\n# print(n, dishes, base_points, additional_pointss)\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n"
    }
  ],
  "created": 1650661472,
  "object": "edit"
}
2022-04-22 21:05:15.183868 fix syntax errors 3 ['\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\n# print(n, dishes, base_points, additional_pointss)\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\n\n\ndef solution(n, dishes, base_points, additional_points):\n    total_points = 0\n    for i in range(n):\n        dish = dishes[i]\n        total_points += base_points[dish]\n        if i != 0 and dishes[i - 1] == dish - 1:\n            total_points += additional_points[dish - 1]\n\n    return total_points\n\n\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(solution(4, [4, 2, 3, 1], [1, 2, 3, 4], [0, 0, 0, 0]))\nprint(s\nprint(total_points)\n', '\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]  # 0-indexed\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\n# print(n, dishes, base_points, additional_points)\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n', '\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\n# print(n, dishes, base_points, additional_pointss)\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n']
2022-04-22 21:05:15.184076 using api key soukgp
2022-04-22 21:05:20.903447 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    # If the previous dish is the one before the current one, add the additional\n    # points\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\nprint(total_points)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin, stdout\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    # If the previous dish is the one before the current one, add the additional points\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nstdout.write(str(total_points))\n"
    }
  ],
  "created": 1650661515,
  "object": "edit"
}
2022-04-22 21:05:20.903668 fix syntax errors 3 ['\nfrom sys import stdin\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    # If the previous dish is the one before the current one, add the additional\n    # points\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nprint(total_points)\n', '\nfrom sys import stdin\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\nprint(total_points)\n', '\n\nfrom sys import stdin, stdout\n\nn = int(stdin.readline())\ndishes = [int(a) - 1 for a in stdin.readline().split()]\nbase_points = [int(a) for a in stdin.readline().split()]\nadditional_points = [int(a) for a in stdin.readline().split()]\n\ntotal_points = 0\nfor i in range(n):\n    dish = dishes[i]\n    # If the previous dish is the one before the current one, add the additional points\n    total_points += base_points[dish]\n    if i != 0 and dishes[i - 1] == dish - 1:\n        total_points += additional_points[dish - 1]\n\nstdout.write(str(total_points))\n']
2022-04-22 21:05:20.903787 size on output set 9
