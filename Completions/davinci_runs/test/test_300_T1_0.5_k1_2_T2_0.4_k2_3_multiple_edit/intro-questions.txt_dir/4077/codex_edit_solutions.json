["import sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix means\n    prefix_means = [0]*(N+1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix means\n    suffix_means = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix means\n    prefix_means_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n    return total_pairs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(solution(N, M, A))\n", "import sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n+1):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i + 1, n):\n\t\t\tif median(lst[i:j]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef median(arr):\n\tn = len(arr)\n\tif n < 1:\n\t\treturn None\n\tif n % 2 == 1:\n\t\treturn sorted(arr)[n//2]\n\telse:\n\t\treturn sum(sorted(arr)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tarr = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(arr[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix means\n    prefix_means = [0]*(N+1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix means\n    suffix_means = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix means\n    prefix_means_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    lst = [int(x) for x in sys.stdin.readline().split()]\n    pairs = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(lst[i:j+1]) == m:\n                pairs += 1\n    print(pairs)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    lst = [int(x) for x in sys.stdin.readline().split()]\n    pairs = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(lst[i:j+1]) == m:\n                pairs += 1\n    print(pairs)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"]