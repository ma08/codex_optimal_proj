2022-04-22 17:04:31.177092 num operations 2
2022-04-22 17:04:31.177112 size on input set 1
2022-04-22 17:04:31.177286 using api key soukgp
2022-04-22 17:04:40.921981 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\nprint('{:02}:{:02}'.format(h3, m3))\n"
    },
    {
      "index": 1,
      "text": "\n\nh1, m1 = map(int, input().split(':')) # \u0432\u0432\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u0440\u0435\u043c\u044f\nh2, m2 = map(int, input().split(':')) # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f\n\nm3 = (m1 + m2) // 2 # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043c\u0438\u043d\u0443\u0442\u044b\nh3 = h1 + (m1 + m2) // 120 # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u044b\n\nif h3 > 23: # \u0435\u0441\u043b\u0438 \u0447\u0430\u0441\u044b \u0431\u043e\u043b\u044c\u0448\u0435 23, \u0442\u043e \u043e\u0442\u043d\u0438\u043c\u0430\u0435\u043c 24\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0442\u0432\u0435\u0442\n"
    },
    {
      "index": 2,
      "text": "\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))\n"
    }
  ],
  "created": 1650647071,
  "object": "edit"
}
2022-04-22 17:04:40.922250 fix spelling mistakes 3 ["\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\nprint('{:02}:{:02}'.format(h3, m3))\n", "\n\nh1, m1 = map(int, input().split(':')) # вводим первое время\nh2, m2 = map(int, input().split(':')) # вводим второе время\n\nm3 = (m1 + m2) // 2 # вычисляем минуты\nh3 = h1 + (m1 + m2) // 120 # вычисляем часы\n\nif h3 > 23: # если часы больше 23, то отнимаем 24\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3)) # выводим ответ\n", "\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))\n"]
2022-04-22 17:04:40.922290 size on output set 3
2022-04-22 17:04:40.922297 size on input set 3
2022-04-22 17:04:40.922469 using api key sunu
2022-04-22 17:04:58.950577 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nh1, m1 = map(int, input().split(':')) # \u0432\u0432\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u0440\u0435\u043c\u044f\nh2, m2 = map(int, input().split(':')) # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f\n\nm3 = (m1 + m2) // 2 # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043c\u0438\u043d\u0443\u0442\u044b\nh3 = h1 + (m1 + m2) // 120 # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u044b\n\nif h3 > 23: # \u0435\u0441\u043b\u0438 \u0447\u0430\u0441\u044b \u0431\u043e\u043b\u044c\u0448\u0435 23, \u0442\u043e \u043e\u0442\u043d\u0438\u043c\u0430\u0435\u043c 24\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0442\u0432\u0435\u0442\n"
    },
    {
      "index": 1,
      "text": "\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))\n"
    },
    {
      "index": 2,
      "text": "\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0442\u0432\u0435\u0442\n"
    }
  ],
  "created": 1650647080,
  "object": "edit"
}
2022-04-22 17:04:58.950819 fix syntax errors 3 ["\nh1, m1 = map(int, input().split(':')) # вводим первое время\nh2, m2 = map(int, input().split(':')) # вводим второе время\n\nm3 = (m1 + m2) // 2 # вычисляем минуты\nh3 = h1 + (m1 + m2) // 120 # вычисляем часы\n\nif h3 > 23: # если часы больше 23, то отнимаем 24\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3)) # выводим ответ\n", "\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))\n", "\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3)) # выводим ответ\n"]
2022-04-22 17:04:58.950997 using api key soukgp
2022-04-22 17:05:09.814576 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "h1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 60\n\nif h3 > 23:\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))\n"
    },
    {
      "index": 1,
      "text": "\nh1, m1 = map(int, input().split(':'))  # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043a\u043e\u043d\u0446\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\nh2, m2 = map(int, input().split(':'))  # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043a\u043e\u043d\u0446\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n\nm3 = (m1 + m2) // 2  # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0443\u0442\nh3 = h1 + (m1 + m2) // 120  # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u043e\u0432\n\nif h3 > 23:  # \u0435\u0441\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u0431\u043e\u043b\u044c\u0448\u0435 23 \u0447\u0430\u0441\u043e\u0432, \u0442\u043e \u043e\u0442\u043d\u0438\u043c\u0430\u0435\u043c 24\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))\n"
    },
    {
      "index": 2,
      "text": "\nh1, m1 = map(int, input().split(':'))  # \u0447\u0430\u0441\u044b \u0438 \u043c\u0438\u043d\u0443\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\nh2, m2 = map(int, input().split(':'))  # \u0447\u0430\u0441\u044b \u0438 \u043c\u0438\u043d\u0443\u0442\u044b \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n\nm3 = (m1 + m2) // 2  # \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u0438\u043d\u0443\u0442\u0430\nh3 = h1 + (m1 + m2) // 120  # \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0447\u0430\u0441\n\nif h3 > 23:  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0432 \u043d\u043e\u0432\u044b\u0439 \u0434\u0435\u043d\u044c\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))  # \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n"
    }
  ],
  "created": 1650647098,
  "object": "edit"
}
2022-04-22 17:05:09.814801 fix syntax errors 3 ["h1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 60\n\nif h3 > 23:\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))\n", "\nh1, m1 = map(int, input().split(':'))  # вводим время начала и конца события\nh2, m2 = map(int, input().split(':'))  # вводим время начала и конца события\n\nm3 = (m1 + m2) // 2  # вычисляем среднее значение минут\nh3 = h1 + (m1 + m2) // 120  # вычисляем среднее значение часов\n\nif h3 > 23:  # если время больше 23 часов, то отнимаем 24\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))\n", "\nh1, m1 = map(int, input().split(':'))  # часы и минуты первого времени\nh2, m2 = map(int, input().split(':'))  # часы и минуты второго времени\n\nm3 = (m1 + m2) // 2  # средняя минута\nh3 = h1 + (m1 + m2) // 120  # средний час\n\nif h3 > 23:  # проверка на переход в новый день\n    h3 -= 24\n\nprint('{:02}:{:02}'.format(h3, m3))  # вывод результата\n"]
2022-04-22 17:05:09.815133 using api key derek
2022-04-22 17:05:19.128846 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nh1, m1 = map(int, input().split(':')) # \u0432\u0432\u043e\u0434 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\nh2, m2 = map(int, input().split(':')) # \u0432\u0432\u043e\u0434 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\nm3 = (m1 + m2) // 2 # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0438\u043d\u0443\u0442\nh3 = h1 + (m1 + m2) // 120 # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u043e\u0432\n\nif h3 > 23: # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u043b\u043d\u043e\u0447\u044c\n    h3 -= 24\nprint('{:02}:{:02}'.format(h3, m3))\n"
    },
    {
      "index": 1,
      "text": "\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\nprint('{:02}:{:02}'.format(h3, m3))\n"
    },
    {
      "index": 2,
      "text": "\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\nprint('{:02}:{:02}'.format(h3, m3))\n"
    }
  ],
  "created": 1650647109,
  "object": "edit"
}
2022-04-22 17:05:19.129104 fix syntax errors 3 ["\n\nh1, m1 = map(int, input().split(':')) # ввод первого времени\nh2, m2 = map(int, input().split(':')) # ввод второго времени\nm3 = (m1 + m2) // 2 # вычисление среднего значения минут\nh3 = h1 + (m1 + m2) // 120 # вычисление среднего значения часов\n\nif h3 > 23: # проверка на переход через полночь\n    h3 -= 24\nprint('{:02}:{:02}'.format(h3, m3))\n", "\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\nprint('{:02}:{:02}'.format(h3, m3))\n", "\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\nm3 = (m1 + m2) // 2\nh3 = h1 + (m1 + m2) // 120\n\nif h3 > 23:\n    h3 -= 24\nprint('{:02}:{:02}'.format(h3, m3))\n"]
2022-04-22 17:05:19.129143 size on output set 8
2022-04-22 17:05:19.129156 num operations 2
2022-04-22 17:05:19.129162 size on input set 1
2022-04-22 17:05:19.129297 using api key soukgp
2022-04-22 17:05:32.312884 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')] #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430\n    end_time = [int(x) for x in sys.stdin.readline().split(':')] #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430\n    start_minutes = time_to_minutes(start_time) #\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u043c\u0438\u043d\u0443\u0442\u044b\n    end_minutes = time_to_minutes(end_time) #\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430 \u0432 \u043c\u0438\u043d\u0443\u0442\u044b\n    middle_minutes = (start_minutes + end_minutes) // 2 #\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432 \u043c\u0438\u043d\u0443\u0442\u0430\u0445\n    middle_time = minutes_to_time(middle_minutes) #\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432 \u0447\u0430\u0441\u044b \u0438 \u043c\u0438\u043d\u0443\u0442\u044b\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1])) #\u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650647119,
  "object": "edit"
}
2022-04-22 17:05:32.313132 fix spelling mistakes 3 ["\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')] #получаем время начала\n    end_time = [int(x) for x in sys.stdin.readline().split(':')] #получаем время конца\n    start_minutes = time_to_minutes(start_time) #переводим время начала в минуты\n    end_minutes = time_to_minutes(end_time) #переводим время конца в минуты\n    middle_minutes = (start_minutes + end_minutes) // 2 #считаем среднее время в минутах\n    middle_time = minutes_to_time(middle_minutes) #переводим среднее время в часы и минуты\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1])) #выводим среднее время\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 17:05:32.313265 size on output set 2
2022-04-22 17:05:32.313275 size on input set 2
2022-04-22 17:05:32.313422 using api key jaanu
2022-04-22 17:05:45.086445 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef time_to_minutes(hours, minutes):\n    return hours * 60 + minutes\n\ndef minutes_to_time(hours, minutes):\n    return hours // 60, minutes % 60\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]  # noqa\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]  # noqa\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]  # noqa\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]  # noqa\n    start_minutes = time_to_minutes(start_time)  # noqa\n    end_minutes = time_to_minutes(end_time)  # noqa\n    middle_minutes = (start_minutes + end_minutes) // 2  # noqa\n    middle_time = minutes_to_time(middle_minutes)  # noqa\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))  # noqa\n\nif __name__ == '__main__':\n    main()  # noqa\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60] \n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650647132,
  "object": "edit"
}
2022-04-22 17:05:45.086676 fix syntax errors 3 ["import sys\n\ndef time_to_minutes(hours, minutes):\n    return hours * 60 + minutes\n\ndef minutes_to_time(hours, minutes):\n    return hours // 60, minutes % 60\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]  # noqa\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]  # noqa\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]  # noqa\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]  # noqa\n    start_minutes = time_to_minutes(start_time)  # noqa\n    end_minutes = time_to_minutes(end_time)  # noqa\n    middle_minutes = (start_minutes + end_minutes) // 2  # noqa\n    middle_time = minutes_to_time(middle_minutes)  # noqa\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))  # noqa\n\nif __name__ == '__main__':\n    main()  # noqa\n", "import sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60] \n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 17:05:45.086852 using api key soukgp
2022-04-22 17:06:03.880776 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]  # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]  # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430\n    start_minutes = time_to_minutes(start_time)  # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u043c\u0438\u043d\u0443\u0442\u044b\n    end_minutes = time_to_minutes(end_time)  # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430 \u0432 \u043c\u0438\u043d\u0443\u0442\u044b\n    middle_minutes = (start_minutes + end_minutes) // 2  # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432 \u043c\u0438\u043d\u0443\u0442\u0430\u0445\n    middle_time = minutes_to_time(middle_minutes)  # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432 \u0447\u0430\u0441\u044b \u0438 \u043c\u0438\u043d\u0443\u0442\u044b\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]  # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]  # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430\n    start_minutes = time_to_minutes(start_time)  # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u043c\u0438\u043d\u0443\u0442\u044b\n    end_minutes = time_to_minutes(end_time)  # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430 \u0432 \u043c\u0438\u043d\u0443\u0442\u044b\n    middle_minutes = (start_minutes + end_minutes) // 2  # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432 \u043c\u0438\u043d\u0443\u0442\u0430\u0445\n    middle_time = minutes_to_time(middle_minutes)  # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432 \u0447\u0430\u0441\u044b \u0438 \u043c\u0438\u043d\u0443\u0442\u044b\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650647145,
  "object": "edit"
}
2022-04-22 17:06:03.881219 fix syntax errors 3 ["import sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]  # получаем время начала\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]  # получаем время конца\n    start_minutes = time_to_minutes(start_time)  # переводим время начала в минуты\n    end_minutes = time_to_minutes(end_time)  # переводим время конца в минуты\n    middle_minutes = (start_minutes + end_minutes) // 2  # считаем среднее время в минутах\n    middle_time = minutes_to_time(middle_minutes)  # переводим среднее время в часы и минуты\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))  # выводим среднее время\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]\n    start_minutes = time_to_minutes(start_time)\n    end_minutes = time_to_minutes(end_time)\n    middle_minutes = (start_minutes + end_minutes) // 2\n    middle_time = minutes_to_time(middle_minutes)\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef time_to_minutes(time):\n    return time[0] * 60 + time[1]\n\ndef minutes_to_time(minutes):\n    return [minutes // 60, minutes % 60]\n\ndef main():\n    start_time = [int(x) for x in sys.stdin.readline().split(':')]  # получаем время начала\n    end_time = [int(x) for x in sys.stdin.readline().split(':')]  # получаем время конца\n    start_minutes = time_to_minutes(start_time)  # переводим время начала в минуты\n    end_minutes = time_to_minutes(end_time)  # переводим время конца в минуты\n    middle_minutes = (start_minutes + end_minutes) // 2  # считаем среднее время в минутах\n    middle_time = minutes_to_time(middle_minutes)  # переводим среднее время в часы и минуты\n    print('{:02d}:{:02d}'.format(middle_time[0], middle_time[1]))  # выводим среднее время\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 17:06:03.881336 size on output set 6
