["\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n\n    if m == 1 or m == 2 or m == 4:\n        print(\"YES\")\n    elif m % 2 == 0:\n        print(\"YES\")\n    elif tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n        print(\"YES\")\n    else: \n        print(\"NO\")\n", "\n\ndef check_tile(tile, square, i, j):\n    if i+1 >= len(square) or j+1 >= len(square):\n        return False\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n            return True\n    return False\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tiles[tile][0][0]\n                        square[i][j+1] = tiles[tile][0][1]\n                        square[i+1][j] = tiles[tile][1][0]\n                        square[i+1][j+1] = tiles[tile][1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    tiles = []\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    tiles.sort()\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\") \n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\") \n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\") \n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\") \n            else:\n                print(\"NO\")\n", "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = map(int, input().split())\n    \n    tiles = [] \n    \n    for j in range(n):\n        tiles.append(list(map(int, input().split())))\n        \n    for j in range(n):\n        tiles.append(list(map(int, input().split())))\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n", "\nprint(\"hello\")\n", "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0] or tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0] or tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2] or tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            print(\"YES\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            print(\"YES\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] or tiles[0][0] == tiles[0][2] and tiles[0][2] == tiles[0][1] and tiles[0][1] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n", "\n\ndef check_tile(tile, matrix, i, j):\n    if matrix[i][j] == 0 and matrix[i][j+1] == 0 and matrix[i+1][j] == 0 and matrix[i+1][j+1] == 0:\n        if i+1 < len(matrix) and j+1 < len(matrix):\n            if matrix[i][j+1] == tile[0][0] and matrix[i+1][j+1] == tile[1][0] and matrix[i+1][j] == tile[0][1] and matrix[i][j] == tile[1][1]:\n                return True\n            if matrix[i+1][j] == tile[0][0] and matrix[i+1][j+1] == tile[1][0] and matrix[i][j+1] == tile[0][1] and matrix[i][j] == tile[1][1]:\n                return True\n            if matrix[i][j] == tile[0][0] and matrix[i][j+1] == tile[1][0] and matrix[i+1][j+1] == tile[0][1] and matrix[i+1][j] == tile[1][1]:\n                return True\n            if matrix[i][j] == tile[0][0] and matrix[i+1][j] == tile[1][0] and matrix[i][j+1] == tile[0][1] and matrix[i+1][j+1] == tile[1][1]:\n                return True\n    return False\n\ndef check_square(tiles, matrix):\n    for i in range(len(matrix)-1):\n        for j in range(len(matrix)-1):\n            if matrix[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, matrix, i, j):\n                        matrix[i][j] = tile[0][0]\n                        matrix[i][j+1] = tile[0][1]\n                        matrix[i+1][j] = tile[1][0]\n                        matrix[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        matrix = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, matrix):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tiles[tile], square, i, j):\n                        square[i][j] = tiles[tile][0][0]\n                        square[i][j+1] = tiles[tile][0][1]\n                        square[i+1][j] = tiles[tile][1][0]\n                        square[i+1][j+1] = tiles[tile][1][1]\n                        break\n                else:\n\n                    return False\n    return True\n\n    if i+1 >= len(square) or j+1 >= len(square):\n        return False\n\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n            return True\n\n    return False\n\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check_square(tiles, square, m):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, m):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, m):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < m and j+1 < m:\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef check_square(tiles, matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if matrix[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, matrix, i, j, m):\n                        matrix[i][j] = tile[0][0]\n                        matrix[i][j+1] = tile[0][1]\n                        matrix[i+1][j] = tile[1][0]\n                        matrix[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, matrix, i, j, m):\n    if i+1 < m and j+1 < m:\n        if matrix[i][j+1] == tile[0][0] and matrix[i+1][j+1] == tile[1][0] and matrix[i+1][j] == tile[0][1] and matrix[i][j] == tile[1][1]:\n            return True\n        if matrix[i+1][j] == tile[0][0] and matrix[i+1][j+1] == tile[1][0] and matrix[i][j+1] == tile[0][1] and matrix[i][j] == tile[1][1]:\n            return True\n        if matrix[i][j] == tile[0][0] and matrix[i][j+1] == tile[1][0] and matrix[i+1][j+1] == tile[0][1] and matrix[i+1][j] == tile[1][1]:\n            return True\n        if matrix[i][j] == tile[0][0] and matrix[i+1][j] == tile[1][0] and matrix[i][j+1] == tile[0][1] and matrix[i+1][j+1] == tile[1][1]:\n            return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        matrix = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, matrix):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    m = int(input())\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()]) # append the first row\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()]) # append the second row\n    \n    tiles.sort() # sort the tiles\n    \n    for j in range(n):\n        for k in range(n):\n                # swap the tiles if they are the same\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            print(\"YES\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            print(\"YES\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\") # if the tiles are not the same, print no\n", "\n\ndef check_square(tiles, square, n, m):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, n, m):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, n, m):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < m and j+1 < m:\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, n, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check_square(tiles, matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if matrix[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, matrix, i, j, m):\n                        matrix[i][j] = tile[0][0]\n                        matrix[i][j+1] = tile[0][1]\n                        matrix[i+1][j] = tile[1][0]\n                        matrix[i+1][j+1] = tile[1][1]\n                        break\n                else:\n    return True\n\ndef check_tile(tile, matrix, i, j, m):\n                    return False\n    return True\n\n    if matrix[i][j] == 0 and matrix[i][j+1] == 0 and matrix[i+1][j] == 0 and matrix[i+1][j+1] == 0:\n        if i+1 < m and j+1 < m:\n            if matrix[i][j+1] == tile[0][0] and matrix[i+1][j+1] == tile[1][0] and matrix[i+1][j] == tile[0][1] and matrix[i][j] == tile[1][1]:\n                return True\n            if matrix[i+1][j] == tile[0][0] and matrix[i+1][j+1] == tile[1][0] and matrix[i][j+1] == tile[0][1] and matrix[i][j] == tile[1][1]:\n                return True\n            if matrix[i][j] == tile[0][0] and matrix[i][j+1] == tile[1][0] and matrix[i+1][j+1] == tile[0][1] and matrix[i+1][j] == tile[1][1]:\n                return True\n            if matrix[i][j] == tile[0][0] and matrix[i+1][j] == tile[1][0] and matrix[i][j+1] == tile[0][1] and matrix[i+1][j+1] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        matrix = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, matrix):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint(\"Hello World\")\n", "\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tiles[tile], square, i, j):\n                        square[i][j] = tiles[tile][0][0]\n                        square[i][j+1] = tiles[tile][0][1]\n                        square[i+1][j] = tiles[tile][1][0]\n                        square[i+1][j+1] = tiles[tile][1][1]\n                        break\n                else:\n\n                    return False\n    return True\n\n    if i+1 >= len(square) or j+1 >= len(square):\n        return False\n\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n            return True\n\n    return False\n\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m*2)] for j in range(m*2)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nt = int(input()) \n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = [] \n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n", "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()] # get input\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()]) # get input\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()]) # get input\n\n    tiles.sort() # sort the list\n\n    for j in range(n): # loop through the list\n        for k in range(n): # loop through the list\n            # swap the values if they are equal\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0: # if m is even\n        if m == 2: # if m is equal to 2\n            # check if the tiles are equal\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\") # print yes\n            else:\n                print(\"NO\") # print no\n        else: # if m is not equal to 2\n            print(\"YES\") # print yes\n    else: # if m is odd\n        if m == 1: # if m is equal to 1\n            # check if the tiles are equal\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\") # print yes\n            else:\n                print(\"NO\") # print no\n        else: # if m is not equal to 1\n            # check if the tiles are equal\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\") # print yes\n            else:\n                print(\"NO\") # print no\n"]