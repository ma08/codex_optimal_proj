["\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+2)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n\n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n\n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n\n# Solution by Andrew Xing\n# Edited by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n\ndef solve(n, m, graph):\n    return 0\n\ndef main():\n    n, m = map(int, input().split())\n    graph = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, graph))\n\nif __name__ == '__main__':\n    main()\n", "from collections import deque\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())  # n: height, m: width, k: max distance\n    grid = [list(map(int, input().split())) for _ in range(n)]  # grid[y][x]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid, s, t):\n    return 1\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    s = [input() for _ in range(k)]\n    t = [input() for _ in range(k)]\n    print(solve(n, m, k, grid, s, t))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution by Andrew Xing, edited by Nick Wu, all rights reserved\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+2)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+2):\n    for j in range(1, m+2):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n# Solution by Andrew Xing, edited by Nick Wu\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\nif __name__ == \"__main__\":\n  main()\n", "\n# Solution by Andrew Xing, edited by Nick Wu\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n\ndef solve(n, m, k, grid, s):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    s = [input() for _ in range(k)]\n    print(solve(n, m, k, grid, s))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().strip().split()]\n  grid = [[int(x) for x in input().strip().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n\n\ndef solve(n, m, k, grid, s):\n    return 0\n\n\n    \"\"\"\n    >>> main()\n    0\n    \"\"\"\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    s = [input() for _ in range(k)]\n    print(solve(n, m, k, grid, s))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, graph):\n    return 0\n\n\ndef main() -> None:\n    n, m, k = map(int, input().split())\n    graph = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, graph))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, graph):\n    return 1\n\ndef main():\n    n, m, k = map(int, input().split())\n    graph = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, graph))\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"]