["\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph.\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS.\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count.\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v) # u->v\n        rev_adj_list[v].append(u) # v->u\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print count\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n    visited[v] = True\n    for u in rev_adj_list[v]:\n        if not visited[u]:\n            dfs(u, visited)\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n        rev_adj_list[v].append(u)\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print count\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split()) # \uacbd\ub85c \uc785\ub825\n        roads.append((u, v))\n\n    # Graph, Adjacency list\n    graph = [[] for i in range(n+1)] # \uadf8\ub798\ud504 \ucd08\uae30\ud654\n    for (u, v) in roads:\n        graph[u].append(v) # \uacbd\ub85c \ucd94\uac00\n\n    # DFS\n    visited = [False for i in range(n+1)] # \ubc29\ubb38 \uc5ec\ubd80 \ucd08\uae30\ud654\n    stack = [s] # \uc2dc\uc791 \ub178\ub4dc \ucd94\uac00\n    while stack:\n        u = stack.pop() # \ud604\uc7ac \ub178\ub4dc\n        visited[u] = True # \ubc29\ubb38 \uccb4\ud06c\n        for v in graph[u]: # \ud604\uc7ac \ub178\ub4dc\uc640 \uc5f0\uacb0\ub41c \ub178\ub4dc\ub4e4\n            if not visited[v]: # \ubc29\ubb38\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74\n                stack.append(v) # \uc2a4\ud0dd\uc5d0 \ucd94\uac00\n\n    # Count\n    res = 0\n    for i in range(1, n+1): # \ubaa8\ub4e0 \ub178\ub4dc\uc5d0 \ub300\ud574\n        if i == s: # \uc2dc\uc791 \ub178\ub4dc\ub294 \ubb34\uc2dc\n            continue\n        if not visited[i]: # \ubc29\ubb38\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74\n            res += 1 # \uce74\uc6b4\ud2b8 \uc99d\uac00\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # graph\n    graph = [[] for i in range(n + 1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # dfs\n    visited = [False for i in range(n + 1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # count\n    res = 0\n    for i in range(1, n + 1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n# $File: file\n# $Date: Sat Apr 20 19:43:40 2013 +0800\n# $Author: jiakai <jia.kai66@gmail.com>\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v) # u->v\n\t\trev_adj_list[v].append(u) # v->u\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v) # u->v\n\t\trev_adj_list[v].append(u) # v->u\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph.\n    graph = [[] for _ in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS.\n    visited = [False for _ in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count.\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph, Adjacency list\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # dfs\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in graph[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tgraph = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tgraph[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in graph[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\t\trev_adj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\t\tadj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1 \n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"]