["\n\n# n, k = map(int, input().split())  # n, k = 5, 2\n# a = list(map(int, input().split()))  # a = [1, 2, 15, 15, 15]\nn, k = 6, 1  # n, k = 6, 1\na = [36, 4, 1, 25, 9, 16]  # a = [36, 4, 1, 25, 9, 16]\n# n, k = 4, 4  # n, k = 4, 4\n# a = [1, 10, 100, 1000]  # a = [1, 10, 100, 1000]\n\n\ndef max_consecutive_subarray(a, n):\n    \"\"\"\n    Find the maximum number of consecutive elements in the array.\n\n    :param a: array of integers\n    :return: the maximum number of consecutive elements in the array\n    \"\"\"\n    max_len = 0\n    curr_len = 0\n    for i in range(n - 1):\n        if abs(a[i] - a[i + 1]) <= 5:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n    return max(max_len, curr_len)\n    \"\"\"\n    Find the maximum number of consecutive elements in the array with at most k changes.\n\n    :param a: array of integers\n    :param k: number of changes\n    :return: the maximum number of consecutive elements in the array with at most k changes\n    \"\"\"\n\n\ndef solve(a, k):\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            max_len = max_consecutive_subarray(a[:i], i)\n            dp[i][j] = max(dp[i][j], dp[i - max_len][j - 1] + max_len)\n    return dp[n][k]\n\n\nprint(solve(a, k))\n", "# coding: utf-8\n\ndef solve(n, k, a):\n    a = sorted(a)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] - a[i] <= 5:\n                ans = max(ans, j - i + 1)\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))\n", "\n\nn, k = map(int, input().split())  # n, k = 5, 2\na = list(map(int, input().split()))  # a = [1, 2, 15, 15, 15]\n# n, k = 6, 1  # n, k = 6, 1\n# a = [36, 4, 1, 25, 9, 16]  # a = [36, 4, 1, 25, 9, 16]\n# n, k = 4, 4  # n, k = 4, 4\n# a = [1, 10, 100, 1000]  # a = [1, 10, 100, 1000]\n\n\ndef max_consecutive_subarray(a):\n    \"\"\"Find the maximum number of consecutive elements in the array.\n\n    :param a: array of integers\n    :return: the maximum number of consecutive elements in the array\n    \"\"\"\n    max_len = 0\n    curr_len = 0\n    for i in range(len(a) - 1):\n        if abs(a[i] - a[i + 1]) <= 5:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n    return max(max_len, curr_len)\n\n\ndef solve(a, k):\n    \"\"\"Find the maximum number of consecutive elements in the array with at most k changes.\n\n    :param a: array of integers\n    :param k: number of changes\n    :return: the maximum number of consecutive elements in the array with at most k changes\n    \"\"\"\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            max_len = max_consecutive_subarray(a[:i])\n            dp[i][j] = max(dp[i][j], dp[i - max_len][j - 1] + max_len)\n    return dp[n][k]\n\n\nprint(solve(a, k))\n", "\n\n# n, k = map(int, input().split())  # n, k = 5, 2\n# a = list(map(int, input().split()))  # a = [1, 2, 15, 15, 15]\n# n, k = 6, 1  # n, k = 6, 1\n# a = [36, 4, 1, 25, 9, 16]  # a = [36, 4, 1, 25, 9, 16]\n# n, k = 4, 4  # n, k = 4, 4\n# a = [1, 10, 100, 1000]  # a = [1, 10, 100, 1000]\n# n, k = 5, 1  # n, k = 5, 1\n# a = [1, 2, 3, 4, 5]  # a = [1, 2, 3, 4, 5]\n\ndef max_consecutive_subarray(a):\n    \"\"\"\n    Find the maximum number of consecutive elements in the array.\n\n    :param a: array of integers\n    :return: the maximum number of consecutive elements in the array\n    \"\"\"\n    max_len = 0\n    curr_len = 0\n    for i in range(len(a) - 1):\n        if abs(a[i] - a[i + 1]) <= 5:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n    return max(max_len, curr_len)\n    \"\"\"\n    Find the maximum number of consecutive elements in the array with at most k changes.\n\n    :param a: array of integers\n    :param k: number of changes\n    :return: the maximum number of consecutive elements in the array with at most k changes\n    \"\"\"\n\n\ndef solve(a, k):\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            max_len = max_consecutive_subarray(a[:i])\n            dp[i][j] = max(dp[i][j], dp[i - max_len][j - 1] + max_len)\n    return dp[n][k]\n\n\nprint(solve(a, k))\n", "\n\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\n\nn, k = 5, 2\na = [1, 2, 15, 15, 15]\n# n, k = 6, 1\n# a = [36, 4, 1, 25, 9, 16]\n# n, k = 4, 4\n# a = [1, 10, 100, 1000]\n\n\ndef solve(a, k):\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            t = 1\n            for l in range(1, i):\n                if abs(a[i - 1] - a[i - l - 1]) <= 5:\n                    t += 1\n                else:\n                    break\n            dp[i][j] = max(dp[i][j], dp[i - t][j - 1] + t)\n    return dp[n][k]\n\n\nprint(solve(a, k))\n", "# https://www.hackerrank.com/challenges/beautiful-triplets/problem\n\n\ndef solve(n, k, b):\n    b = sorted(b)\n    print(b)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if b[j] - b[i] <= 5:\n                ans = max(ans, j - i + 1)\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    b = list(map(int, input().split()))\n    print(solve(n, k, b))\n", "\n\ndef solve(n, k, a):\n    a = sorted(a)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] - a[i] <= k:\n                ans = max(ans, j - i + 1)\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))\n", "\ndef solve(n, k, a):\n    a = sorted(a)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] - a[i] <= 5:\n                ans = max(ans, j - i + 1)\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))\n", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# n, k = 5, 2\n# a = [1, 2, 15, 15, 15]\n# n, k = 6, 1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n, k = 4, 4\n# a = [1, 10, 100, 1000]\n\n\ndef solve(a, k):\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            t = 1\n            for l in range(1, i):\n                if abs(a[i - 1] - a[i - l - 1]) <= 5:\n                    t += 1\n                else:\n                    break\n            dp[i][j] = max(dp[i][j], dp[i - t][j - 1] + t)\n    return dp[n][k]\n\n\nprint(solve(a, k))\n", "\n\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\nn, k = 5, 2\na = [1, 2, 15, 15, 15, 15]\n# n, k = 6, 1\n# a = [36, 4, 1, 25, 9, 16]\n# n, k = 4, 4\n# a = [1, 10, 100, 1000]\n\n\ndef solve(a, k):\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            t = 1\n            for l in range(1, i):\n                if abs(a[i - 1] - a[i - l - 1]) <= 5:\n                    t += 1\n                else:\n                    break\n            dp[i][j] = max(dp[i][j], dp[i - t][j - 1] + t)\n    return dp[n][k]\n\n\nprint(solve(a, k))\n", "\n#!/usr/bin/env python3\n\n\ndef solve(n, k, a):\n    a = sorted(a)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] - a[i] <= 5:\n                ans = max(ans, j - i + 1)\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))\n", "\n\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\n\nn, k = 5, 2\na = [1, 2, 15, 15, 15]\n# n, k = 6, 1\n# a = [36, 4, 1, 25, 9, 16]\n# n, k = 4, 4\n# a = [1, 10, 100, 1000]\n\n\ndef solve(a, k):\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            t = 1\n            for l in range(1, i + 1):\n                if abs(a[i - 1] - a[i - l]) <= 5:\n                    t += 1\n                else:\n                    break\n            print(i, j, t)\n            dp[i][j] = max(dp[i][j], dp[i - t][j - 1] + t)\n    return dp[n][k]\n\n\nprint(solve(a, k))\n", "\n\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\nn, k = 5, 2\na = [1, 2, 15, 15, 15]\n# n, k = 6, 1\n# a = [36, 4, 1, 25, 9, 16]\n\n# n, k = 4, 4\n# a = [1, 10, 100, 1000]\n\n\ndef solve(a, k):\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            t = 1\n            for l in range(1, i):\n                if abs(a[i - 1] - a[i - l - 1]) <= 5:\n                    t += 1\n                else:\n                    break\n            dp[i][j] = max(dp[i][j], dp[i - t][j - 1] + t)\n    return dp[n][k]\n\n\nprint(solve(a, k))\n", "\n\ndef solve(n, k, b):\n    b = sorted(b)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if b[j] - b[i] <= 5:\n                ans = max(ans, j - i + 1)\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    b = list(map(int, input().split()))\n    print(solve(n, k, b))\n", "\n\ndef solve(n, k, b):\n    b = sorted(b)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[j] - b[i] <= 5:\n                ans = max(ans, j - i + 1)\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    b = list(map(int, input().split()))\n    print(solve(n, k, b))\n"]