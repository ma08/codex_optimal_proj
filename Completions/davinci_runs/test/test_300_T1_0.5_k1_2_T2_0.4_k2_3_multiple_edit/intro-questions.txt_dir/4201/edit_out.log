2022-04-22 19:59:39.453043 num operations 2
2022-04-22 19:59:39.453068 size on input set 1
2022-04-22 19:59:39.453241 using api key sunu
2022-04-22 19:59:45.094385 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    }
  ],
  "created": 1650657579,
  "object": "edit"
}
2022-04-22 19:59:45.094668 fix spelling mistakes 3 ["\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n", "\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n", "\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"]
2022-04-22 19:59:45.094700 size on output set 1
2022-04-22 19:59:45.094709 size on input set 1
2022-04-22 19:59:45.094854 using api key kouti
2022-04-22 19:59:53.276533 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef paint_black(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    },
    {
      "index": 2,
      "text": "\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    }
  ],
  "created": 1650657585,
  "object": "edit"
}
2022-04-22 19:59:53.276857 fix syntax errors 3 ["\n\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n", "\n\ndef paint_black(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n", "\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"]
2022-04-22 19:59:53.276893 size on output set 3
2022-04-22 19:59:53.276906 num operations 2
2022-04-22 19:59:53.276913 size on input set 1
2022-04-22 19:59:53.277051 using api key kouti
2022-04-22 20:00:04.192754 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 2,
      "text": "H, W, K = map(int, input().split())\nc = [input() for _ in range(H)]\nans = 0\nfor mask_row in range(1<<H):\n    for mask_col in range(1<<W):\n        cnt = 0\n        for i in range(H):\n            for j in range(W):\n                if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                    cnt += 1\n        if cnt == K:\n            ans += 1\nprint(ans)\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    }
  ],
  "created": 1650657593,
  "object": "edit"
}
2022-04-22 20:00:04.193058 fix spelling mistakes 3 ['\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', '\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', 'H, W, K = map(int, input().split())\nc = [input() for _ in range(H)]\nans = 0\nfor mask_row in range(1<<H):\n    for mask_col in range(1<<W):\n        cnt = 0\n        for i in range(H):\n            for j in range(W):\n                if c[i][j] == \'#\' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                    cnt += 1\n        if cnt == K:\n            ans += 1\nprint(ans)\n\n\ndef main():\n    pass\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n']
2022-04-22 20:00:04.193206 size on output set 2
2022-04-22 20:00:04.193219 size on input set 2
2022-04-22 20:00:04.193411 using api key derek
2022-04-22 20:00:14.592995 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "H, W, K = map(int, input().split())\nc = [input() for _ in range(H)]\nans = 0\nfor mask_row in range(1<<H):\n    for mask_col in range(1<<W):\n        cnt = 0\n        for i in range(H):\n            for j in range(W):\n                if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                    cnt += 1\n        if cnt == K:\n            ans += 1\nprint(ans)\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            H, W, K = map(int, input().split())\n            c = [input() for _ in range(H)]\n            ans = 0\n            for mask_row in range(1<<H):\n                for mask_col in range(1<<W):\n                    cnt = 0\n                    for i in range(H):\n                        for j in range(W):\n                            if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                                cnt += 1\n                    if cnt == K:\n                        ans += 1\n            print(ans)\n            assert fake_out.getvalue() == out\n\n\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n\n# tests\ntest()\n"
    },
    {
      "index": 1,
      "text": "H, W, K = map(int, input().split())\nc = [input() for _ in range(H)]\nans = 0\nfor mask_row in range(1<<H):\n    for mask_col in range(1<<W):\n        cnt = 0\n        for i in range(H):\n            for j in range(W):\n                if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                    cnt += 1\n        if cnt == K:\n            ans += 1\nprint(ans)\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            H, W, K = map(int, input().split())\n            c = [input() for _ in range(H)]\n            ans = 0\n            for mask_row in range(1 << H):\n                for mask_col in range(1 << W):\n                    cnt = 0\n                    for i in range(H):\n                        for j in range(W):\n                            if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                                cnt += 1\n                    if cnt == K:\n                        ans += 1\n            print(ans)\n            assert fake_out.getvalue() == out\n\n\n# tests\n# test()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n    pass\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    }
  ],
  "created": 1650657604,
  "object": "edit"
}
2022-04-22 20:00:14.593243 fix syntax errors 3 ['H, W, K = map(int, input().split())\nc = [input() for _ in range(H)]\nans = 0\nfor mask_row in range(1<<H):\n    for mask_col in range(1<<W):\n        cnt = 0\n        for i in range(H):\n            for j in range(W):\n                if c[i][j] == \'#\' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                    cnt += 1\n        if cnt == K:\n            ans += 1\nprint(ans)\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            H, W, K = map(int, input().split())\n            c = [input() for _ in range(H)]\n            ans = 0\n            for mask_row in range(1<<H):\n                for mask_col in range(1<<W):\n                    cnt = 0\n                    for i in range(H):\n                        for j in range(W):\n                            if c[i][j] == \'#\' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                                cnt += 1\n                    if cnt == K:\n                        ans += 1\n            print(ans)\n            assert fake_out.getvalue() == out\n\n\n\n\ndef main():\n    pass\n\n\nif __name__ == \'__main__\':\n    main()\n\n# tests\ntest()\n', 'H, W, K = map(int, input().split())\nc = [input() for _ in range(H)]\nans = 0\nfor mask_row in range(1<<H):\n    for mask_col in range(1<<W):\n        cnt = 0\n        for i in range(H):\n            for j in range(W):\n                if c[i][j] == \'#\' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                    cnt += 1\n        if cnt == K:\n            ans += 1\nprint(ans)\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            H, W, K = map(int, input().split())\n            c = [input() for _ in range(H)]\n            ans = 0\n            for mask_row in range(1 << H):\n                for mask_col in range(1 << W):\n                    cnt = 0\n                    for i in range(H):\n                        for j in range(W):\n                            if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                                cnt += 1\n                    if cnt == K:\n                        ans += 1\n            print(ans)\n            assert fake_out.getvalue() == out\n\n\n# tests\n# test()\n', 'def main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n    pass\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n']
2022-04-22 20:00:14.593435 using api key kouti
2022-04-22 20:00:23.098406 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\n    \"\"\"\n    out = \"\"\"\n    \"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline), patch('sys.stdout', new=io.StringIO()) as fake_out:\n        main()\n        assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = '2 3 2\\n..#\\n###\\n'\n    out = '5\\n'\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    }
  ],
  "created": 1650657614,
  "object": "edit"
}
2022-04-22 20:00:23.098769 fix syntax errors 3 ['\ndef main():\n    pass\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\n    """\n    out = """\n    """\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', '\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline), patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n        main()\n        assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = '2 3 2\\n..#\\n###\\n'\n    out = '5\\n'\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"]
2022-04-22 20:00:23.098818 size on output set 6
