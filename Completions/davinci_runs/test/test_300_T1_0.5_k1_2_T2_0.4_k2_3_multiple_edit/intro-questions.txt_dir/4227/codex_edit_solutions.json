["\nimport sys\ninput = sys.stdin.readline \n \nn, m = map(int, input().split()) \nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split()) \n    edges[a - 1] += 1 \n    edges[b - 1] += 1 \n \n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570(j\u306fbit\u3067\u8868\u73fe)\ndp = [[0] * (2 ** n) for _ in range(n)] \ndp[0][1] = 1 \nfor i in range(n - 1): \n    for j in range(2 ** n): \n        if dp[i][j] == 0: \n            continue \n        for k in range(1, n + 1): \n            if j & (1 << k) != 0 or edges[k - 1] == 0: \n                continue \n            dp[i + 1][j | (1 << k)] += dp[i][j] \nprint(dp[n - 1][2 ** n - 1]) \n", "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(lambda x: int(x) - 1, input().split())\n    tree[a].append(b)\n    tree[b].append(a)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n", "import sys\nsys.setrecursionlimit(10 ** 6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    tree[a - 1].append(b - 1)\n    tree[b - 1].append(a - 1)\n\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n", "import sys\nsys.setrecursionlimit(10 ** 6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N + 1)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    tree[a].append(b)\n    tree[b].append(a)\n\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n", "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    tree[a].append(b)\n    tree[b].append(a)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    ans *= len(tree[i])\n\nprint(ans)\n", "\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570 (j\u306fbit\u3067\u8868\u73fe)\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n", "\nimport sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570 (j\u306fbit\u3067\u8868\u73fe)\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n", "\n\nimport sys, heapq\nsys.setrecursionlimit(10**8)\n\nN, M = map(int, input().split())\n\nadj = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    adj[a-1].append(b-1)\n    adj[b-1].append(a-1)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in adj[v]:\n        if child not in visited:\n            dfs(child, visited)\n\n# visited = set()\n# dfs(0, visited)\n\n# if len(visited) != N:\n#     print(0)\n#     sys.exit()\n\n# ans = 1\n# for i in range(N):\n#     if i == 0:\n#         continue\n#     if len(adj[i]) > 1:\n#         ans *= len(adj[i])\n\nprint(ans)\n", "\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570(j\u306fbit\u3067\u8868\u73fe)\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n", "\n\nimport sys, heapq\nsys.setrecursionlimit(10**8)\n\nN, M = map(int, input().split())\n\nadj = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    adj[a-1].append(b-1)\n    adj[b-1].append(a-1)\n\n# def dfs(v, visited):\n#     visited.add(v)\n#     for child in adj[v]:\n#         if child not in visited:\n#             dfs(child, visited)\n\n# visited = set()\n# dfs(0, visited)\n\n# if len(visited) != N:\n#     print(0)\n#     sys.exit()\n\n# ans = 1\n# for i in range(N):\n#     if i == 0:\n#         continue\n#     if len(adj[i]) > 1:\n#         ans *= len(adj[i])\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Date    : 2018-10-11 16:24:43\n# @Author  : Your Name (you@example.org)\n# @Link    : http://example.org\n# @Version : $Id$\n\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570 (1-indexed)\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n", "\nimport sys\n\nMOD = 10 ** 9 + 7\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570 (1-indexed)\ndp = [[0] * (1 << n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(1 << n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j] % MOD\nprint(dp[n - 1][(1 << n) - 1] % MOD)\n", "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    tree[a].append(b)\n    tree[b].append(a)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n", "\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570(j\u306fbit\u3067\u8868\u73fe)\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1 << 0] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(n):\n            if j & (1 << k) != 0 or edges[k] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n", "\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1].append(b - 1)\n    edges[b - 1].append(a - 1)\n\n# DP[i][j] = \u9802\u70b9i\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570 (1-indexed)\ndp = [[0] * (2 ** n) for _ in range(n + 1)]\ndp[1][1] = 1\nfor i in range(2, n + 1):\n    for j in range(2 ** n):\n        if dp[i - 1][j] == 0:\n            continue\n        for k in edges[i - 1]:\n            if j & (1 << k) != 0:\n                continue\n            dp[i][j | (1 << k)] += dp[i - 1][j]\nprint(dp[n][2 ** n - 1])\n"]