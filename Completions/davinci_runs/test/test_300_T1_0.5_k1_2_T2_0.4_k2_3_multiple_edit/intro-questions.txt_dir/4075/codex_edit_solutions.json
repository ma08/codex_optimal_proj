["\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]  # \u5404\u30b9\u30a4\u30c3\u30c1\u306e\u63a5\u7d9a\u72b6\u614b\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True  # \u3053\u306e\u72b6\u614b\u3067\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):  # \u30b9\u30a4\u30c3\u30c1\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u3066\u3001\u304b\u3064\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]  # \u5404\u30b9\u30a4\u30c3\u30c1\u306e\u63a5\u7d9a\u72b6\u614b\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True  # \u3053\u306e\u72b6\u614b\u3067\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):  # \u30b9\u30a4\u30c3\u30c1\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u3066\u3001\u304b\u3064\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):  # \u30b9\u30a4\u30c3\u30c1\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u3066\u3001\u304b\u3064\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# import sys\n\n# N, M = map(int, sys.stdin.readline().split())\n\n# k_list = []\n# s_list = []\n# for i in range(M):\n#     k_list.append(int(sys.stdin.readline().split()[0]))\n#     s_list.append(list(map(int, sys.stdin.readline().split())))\n\n# p_list = list(map(int, sys.stdin.readline().split()))\n\n# # print(N, M)\n# # print(k_list)\n# # print(s_list)\n# # print(p_list)\n\n# def make_light(state):\n#     # print(state)\n#     for i in range(M):\n#         odd_even_count = 0\n#         for j in range(k_list[i]):\n#             if state[s_list[i][j]-1] == 1:\n#                 odd_even_count += 1\n#         if odd_even_count % 2 != p_list[i]:\n#             return False\n#     return True\n\n# def make_state(state, n):\n#     if n == N:\n#         if make_light(state):\n#             return 1\n#         else:\n#             return 0\n#     else:\n#         return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\n# print(make_state([], 0))\n", "\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0])-1)\n    s_list.append(list(map(int, sys.stdin.readline().split()))-1)\n\np_list = list(map(int, sys.stdin.readline().split())-1)\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even_count = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even_count += 1\n        if odd_even_count % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even_count = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even_count += 1\n        if odd_even_count % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n, count):\n    if n == N:\n        if make_light(state):\n            count += 1\n            return count\n        else:\n            return count\n    else:\n        count = make_state(state + [1], n+1, count)\n        count = make_state(state + [0], n+1, count)\n        return count\n\nprint(make_state([], 0, 0))\n", "\n# input\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n + 1) + make_state(state + [0], n + 1)\n\nprint(make_state([], 0))\n", "# input\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j] - 1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * n for _ in range(m)]  # n\u884cm\u5217\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0  # \u8ba1\u6570\u5668\n    for i in range(2 ** n):\n        flag = True  # \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):  # \u5224\u65ad\u7b2ck\u4f4d\u662f\u5426\u4e3a1\n                    c += 1\n            if c % 2 != states[j]:  # \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u7b2cj\u4e2a\u706f\u6ce1\u7684\u72b6\u6001\n                flag = False\n                break\n        if flag:\n            cnt += 1  # \u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u6570\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n# input\nimport sys\nN, M = map(int, sys.stdin.readline().rstrip().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().rstrip().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().rstrip().split())))\np_list = list(map(int, sys.stdin.readline().rstrip().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"]