2022-04-22 17:22:54.427358 num operations 2
2022-04-22 17:22:54.427380 size on input set 1
2022-04-22 17:22:54.427599 using api key kouti
2022-04-22 17:23:00.135821 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((b, a))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split()) # n is number of projects and r is initial rating\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[1])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650648174,
  "object": "edit"
}
2022-04-22 17:23:00.136074 fix spelling mistakes 3 ["\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((b, a))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n\tn, r = map(int, input().split()) # n is number of projects and r is initial rating\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[1])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-22 17:23:00.136108 size on output set 3
2022-04-22 17:23:00.136116 size on input set 3
2022-04-22 17:23:00.136255 using api key soukgp
2022-04-22 17:23:10.356251 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\t\t\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0]) # sort by the first element of the tuple\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]: # if the rating is greater than the minimum rating needed\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\ndef is_possible(r, projects):\n\tfor project in projects:\n\t\tif r < project[0]:\n\t\t\treturn False\n\t\tr += project[1]\n\treturn True\n\n\ndef main():\n\tn, r = map(int, input().split()) # n is number of projects and r is initial rating\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tlow = 0\n\thigh = n\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif is_possible(r, projects[:mid]):\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\n\tprint(low)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, r = map(int, input().split()) # n is number of projects and r is initial rating\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    projects.sort(key = lambda x: x[0])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650648180,
  "object": "edit"
}
2022-04-22 17:23:10.356497 fix syntax errors 3 ["\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\t\t\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0]) # sort by the first element of the tuple\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]: # if the rating is greater than the minimum rating needed\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\ndef is_possible(r, projects):\n\tfor project in projects:\n\t\tif r < project[0]:\n\t\t\treturn False\n\t\tr += project[1]\n\treturn True\n\n\ndef main():\n\tn, r = map(int, input().split()) # n is number of projects and r is initial rating\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tlow = 0\n\thigh = n\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif is_possible(r, projects[:mid]):\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\n\tprint(low)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n, r = map(int, input().split()) # n is number of projects and r is initial rating\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    projects.sort(key = lambda x: x[0])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 17:23:10.356672 using api key derek
2022-04-22 17:23:20.313076 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r <= project[0]:\n\t\t\tr += project[1] - project[0]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((b, a))\n\n    projects.sort(key = lambda x: x[0])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((b, a))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r > project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650648190,
  "object": "edit"
}
2022-04-22 17:23:20.313341 fix syntax errors 3 ["\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r <= project[0]:\n\t\t\tr += project[1] - project[0]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((b, a))\n\n    projects.sort(key = lambda x: x[0])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((b, a))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r > project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-22 17:23:20.313746 using api key derek
2022-04-22 17:23:29.980162 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[1])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r <= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    projects.sort(key = lambda x: x[1])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((b, a))\n\n\tprojects.sort(key = lambda x: x[1])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650648200,
  "object": "edit"
}
2022-04-22 17:23:29.980444 fix syntax errors 3 ["\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[1])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r <= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    projects.sort(key = lambda x: x[1])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((b, a))\n\n\tprojects.sort(key = lambda x: x[1])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-22 17:23:29.980480 size on output set 9
2022-04-22 17:23:29.980492 num operations 2
2022-04-22 17:23:29.980498 size on input set 1
2022-04-22 17:23:29.980656 using api key sunu
2022-04-22 17:23:34.973472 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n\"\"\"\n# Solution in the style of dynamics\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n"
    },
    {
      "index": 1,
      "text": "\n\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n\"\"\"\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n"
    },
    {
      "index": 2,
      "text": "\n\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n\"\"\"\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n"
    }
  ],
  "created": 1650648210,
  "object": "edit"
}
2022-04-22 17:23:34.973704 fix spelling mistakes 3 ['\n\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n"""\n# Solution in the style of dynamics\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"""\n', '\n\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n"""\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"""\n', '\n\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n"""\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"""\n']
2022-04-22 17:23:34.973911 size on output set 2
2022-04-22 17:23:34.973930 size on input set 2
2022-04-22 17:23:34.974090 using api key jaanu
2022-04-22 17:23:40.709421 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n\n# 2nd solution\n\n\"\"\"\n# Solution in the style of dynamics\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n"
    },
    {
      "index": 1,
      "text": "\n\n# 1st solution (greedy)\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution (dynamic)\n\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"
    },
    {
      "index": 2,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n# 2nd solution\n\n\n# Solution in the style of dynamics\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"
    }
  ],
  "created": 1650648215,
  "object": "edit"
}
2022-04-22 17:23:40.709672 fix syntax errors 3 ['\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n\n# 2nd solution\n\n"""\n# Solution in the style of dynamics\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"""\n', '\n\n# 1st solution (greedy)\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution (dynamic)\n\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n', '\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n# 2nd solution\n\n\n# Solution in the style of dynamics\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n']
2022-04-22 17:23:40.709866 using api key soukgp
2022-04-22 17:23:45.902481 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n\n# 2nd solution\n\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"
    },
    {
      "index": 1,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n\n# 2nd solution\n\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"
    },
    {
      "index": 2,
      "text": "\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n\"\"\"\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n"
    }
  ],
  "created": 1650648220,
  "object": "edit"
}
2022-04-22 17:23:45.902793 fix syntax errors 3 ['\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n\n# 2nd solution\n\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n', '\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n\n# 2nd solution\n\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n', '\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n"""\n# Dynamic programming solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"""\n']
2022-04-22 17:23:45.902838 size on output set 5
