["import sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple(int(x) for x in sys.stdin.readline().split()))\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n - 1):\n            if distance(points[i], points[j]) % 1 == 0.0:\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer() == True:\n            count += 1\n\nprint(count)\n", "\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n", "import sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0.0:\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n#input\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if int(distance(points[i], points[j])) == distance(points[i], points[j]):\n            count += 1\n\nprint(count)\n", "\n#input\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer() == True:\n            count += 1\n\nprint(count)\n", "#input\n", "\n#\nimport math\nimport sys\n\nn, d = map(int, sys.stdin.readline().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, sys.stdin.readline().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if int(distance(points[i], points[j])) == distance(points[i], points[j]):\n            count += 1\n\nprint(count)\n", "import sys\nimport math\nimport collections\n\ndef distance(p1, p2, d):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(d)]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = collections.defaultdict(int)\n    for _ in range(n):\n        p = tuple([int(x) for x in sys.stdin.readline().split()])\n        points[p] += 1\n    count = 0\n\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            if distance(p1, p2, d) % 1 == 0:\n                count += points[p1] * points[p2]\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# -*- coding: utf-8 -*-\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n", "import sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0.0:\n                count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\nimport collections\n\ndef distance(p1, p2, d):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(d)]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = collections.defaultdict(int)\n    count = 0\n    for _ in range(n):\n        p = tuple([int(x) for x in sys.stdin.readline().split()])\n        points[p] += 1\n\n    for p1 in points.keys():\n        for p2 in points.keys():\n            if p1 == p2:\n                continue\n            if distance(p1, p2, d) % 1 == 0:\n                count += points[p1] * points[p2]\n\n    print(count//2)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\nimport collections\n\ndef distance(p1, p2, d):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(d)]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = collections.defaultdict(int)\n    for _ in range(n):\n        p = tuple([int(x) for x in sys.stdin.readline().split()])\n        points[p] += 1\n    count = 0\n\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            if distance(p1, p2, d) % 1 == 0:\n                count += points[p1] * points[p2] // 2\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]) == int(distance(points[i], points[j])):\n            count += 1\n\nprint(count)\n", "\n# TODO: implement me\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append([int(x) for x in sys.stdin.readline().split()])\n\n    count = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count // 2)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement me\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))  # noqa\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1  # noqa\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "import math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer(): #is_integer() is a function of float\n            count += 1\n\nprint(count)\n", "\n# TODO: implement me\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple(int(x) for x in sys.stdin.readline().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)  # noqa\n\n\nif __name__ == '__main__':\n    main()\n"]