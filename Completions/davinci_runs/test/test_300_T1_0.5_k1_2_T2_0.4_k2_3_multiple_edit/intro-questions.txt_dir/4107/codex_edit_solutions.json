["\n\ndef main():\n    # Read the input (n, k)\n    n, k = (int(i) for i in input().split())\n    # Read the input (s)\n    s = input().strip()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n, k = [int(i) for i in input().split()]\n    s = input()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the router's range.\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost.\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution \n\nn, k = [int(x) for x in input().split()]\ns = input() \n\ncost = 0 \nfor i in range(1, n + 1): \n    if s[i - 1] == '1': \n        cost += i \n        continue \n    if i - k - 1 >= 0 and s[i - k - 1] == '1': \n        continue \n    if i + k - 1 < n and s[i + k - 1] == '1': \n        continue \n    cost += i \n\nprint(cost)\n", "\n\ndef main():\n    pass\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution \n\nn, k = [int(x) for x in input().split()]\ns = input()\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\nprint(cost)\n", "\n# Solution \n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\n\nprint(cost)\n", "\n# Solution for https://codeforces.com/problemset/problem/1130/C\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\n\nprint(cost)\n", "\n# Solution for https://codeforces.com/problemset/problem/1130/C\n\nn, k = [int(x) for x in input().split()]\ns = input()\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\n\nprint(cost)\n", "\n\ndef main():\n    # Read the input, n is the number of rooms and k is the range of the router\n    n, k = [int(i) for i in input().split()]  # List comprehension\n    s = input()  # The input string\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input and initialize variables\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    count = 0\n\n    # Count the number of pairs that are in the wrong order\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j] and b[i] < b[j]:\n                count += 1\n            elif a[i] < a[j] and b[i] > b[j]:\n                count += 1\n\n    # Output\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n"]