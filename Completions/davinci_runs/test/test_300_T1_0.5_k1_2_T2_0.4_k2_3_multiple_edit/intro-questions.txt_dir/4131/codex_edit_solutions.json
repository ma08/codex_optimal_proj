["\nfrom collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P-1].append(Y)\n    for P, cities in enumerate(prefecture_cities):\n        cities.sort()\n        for i, city in enumerate(cities):\n            print('{:>06}{:>06}'.format(P+1, i+1))\n\nif __name__ == '__main__':\n    main()\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(M+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, M+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "import sys\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N)]\n\nfor city in cities:\n    prefectures[city[0]-1].append(city[1])\n\nfor i in range(N):\n    if len(prefectures[i]) > 0:\n        for j in range(len(prefectures[i])):\n            print(str(i+1).zfill(6) + str(j+1).zfill(6))\n    else:\n        print(str(i+1).zfill(6) + str(1).zfill(6))\n", "\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprovinces = [[] for _ in range(N+1)]\n\nfor city in cities:\n    provinces[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j, city in enumerate(provinces[i]):\n        print(str(i).zfill(6) + str(city).zfill(6))\n", "from collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N + 1)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))  # TODO: use f-string\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprovinces = [[] for _ in range(N+1)]\n\nfor city in cities:\n    provinces[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(provinces[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "\n\nN, M = map(int, input().split())\ncities = [list(map(int, input().split())) for _ in range(M)]\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(M+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, M+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N)]\n\nfor city in cities:\n    prefectures[city[0]-1].append(city[1])\n\nfor i in range(N):\n    for j in range(len(prefectures[i])):\n        print(str(i+1).zfill(6) + str(j+1).zfill(6))\n", "\n\nN = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    ans += 1 / A[i]\n\nprint(1 / ans)\n", "\nfrom collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N + 1)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities_list = [[] for _ in range(N)]\n    prefecture_cities_list = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities_list[P].append(Y)\n    for P, cities in prefecture_cities_list.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P-1].append(Y)\n    for P, cities in enumerate(prefecture_cities):\n        cities.sort()\n        for i, city in enumerate(cities):\n            print('{:>06}{:>06}'.format(P+1, i+1))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = defaultdict(list)\n    prefecture_cities = [[] for _ in range(N)]\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P-1].append(Y)\n    for P, cities in enumerate(prefecture_cities):\n        cities.sort()\n        for i, city in enumerate(cities):\n            print('{:>06}{:>06}'.format(P+1, city))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport os\n\nfile_name = sys.argv[1]\nfile_size = os.path.getsize(file_name)\n\nwith open(file_name, 'rb') as f:\n    file_content = f.read()\n\nfile_content = file_content.split(b'\\n')\n\nprint(file_content)\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities_list = [[] for _ in range(N)]\n    # prefecture_cities_list = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities_list[P - 1].append(Y)\n    for P, cities in prefecture_cities_list.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i), end='\\n')\n\nif __name__ == '__main__':\n    main()\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N)]\n\nfor city in cities:\n    prefectures[city[0] - 1].append(city[1])\n\nfor i in range(N):\n    for j in range(len(prefectures[i])):\n        print(str(i + 1).zfill(6) + str(j + 1).zfill(6))\n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities_list = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities_list[P].append(Y)\n    for P, cities in prefecture_cities_list.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"]