["\n#\n# # The point is to find the smallest possible absolute value of the coordinate of the destination.\n# # First, find the absolute value of (X - K * D).\n# # Then, find the remainder of (X - K * D) / (2 * D).\n# # If the remainder is 0, the distance is (X - K * D) / 2.\n# # If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n#\n# X, K, D = map(int, input().split())\n#\n# if X < 0:\n#     X = -X\n#\n# if X < K * D:\n#     K = K - (X + K * D) // (2 * D)\n#     X = (X + K * D) % (2 * D)\n#\n# if X % (2 * D) == 0:\n#     print(X // (2 * D))\n# else:\n#     print(X // (2 * D) + 1)\n", "#\n\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) <= k * d:\n        print(abs(x - (x // d) * d)) # \u5c0f\u3055\u3044\u65b9\u306e\u8ddd\u96e2\n    else:\n        print(abs(x) - (k * d)) # \u5927\u304d\u3044\u65b9\u306e\u8ddd\u96e2\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination. \n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / (2 * D).\n# If the remainder is 1, the distance is (X - K * D) / (2 * D) + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination from the origin\n# First, find the absolute value of (X - K * D)\n# Then, find the remainder of (X - K * D) / (2 * D)\n# If the remainder is 0, the distance is (X - K * D) / 2\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination point.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X - K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination point\n# First, find the absolute value of (X - K * D)\n# Then, find the remainder of (X - K * D) / (2 * D)\n# If the remainder is 0, the distance is (X - K * D) / 2\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[-1] - a[0])\n\nif __name__ == '__main__':\n    main()\n", "\n# The point is to find the smallest possible absolute value of the coordinate of the destination from the origin. First, find the absolute value of (X - K * D). Then, find the remainder of (X - K * D) / (2 * D). If the remainder is 0, the distance is (X - K * D) / 2. If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X - K * D) // (2 * D)\n    X = (X - K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) <= k * d:\n        print(abs(x - (x // d)*d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K -= (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\n# The point is to find the smallest possible absolute value of the coordinate of the destination from the origin.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D) - 1\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d: # \u53f3\u306b\u884c\u304f\u5834\u5408\n        print(abs(x - (x // d) * d)) # \u53f3\u306b\u884c\u304f\u5834\u5408\n    else:\n        print(abs(x) - (k * d)) # \u5de6\u306b\u884c\u304f\u5834\u5408\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) <= k * d:\n        print(abs(x - (x // d) * d))  # \u5c0f\u3055\u3044\u65b9\u306e\u8ddd\u96e2\n    else:\n        print(abs(x) - (k * d))  # \u5927\u304d\u3044\u65b9\u306e\u8ddd\u96e2\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) <= k * d:\n        print(abs(x - (x // d) * d)) # \u5c0f\u3055\u3044\u65b9\u306e\u8ddd\u96e2\n    else:\n        print(abs(x) - (k * d)) # \u5927\u304d\u3044\u65b9\u306e\u8ddd\u96e2\n\nif __name__ == '__main__':\n    main()\n"]