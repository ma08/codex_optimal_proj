["import math\nA,B,H,M = map(int,input().split())\nif H >= 12:\n    H -= 12\nchoperminute = 360/60 ##\u4e00\u5206\u3067\u9577\u91dd\u304c\u4f55\u5ea6\u52d5\u304f\u304b\ntanperminute = 30/60 ##\u4e00\u5206\u3067\u77ed\u91dd\u304c\u4f55\u5ea6\u52d5\u304f\u304b\n\ntankaku = H*30 + tanperminute*M\nchokaku = choperminute*M\n\nif chokaku >= tankaku:\n    angle = chokaku -tankaku\nelse:\n    angle = tankaku - chokaku\n    \nif angle > 180:\n    angle = 360 -angle\n    \nansjyou = (A**2) + (B**2) - (2*A*B*math.cos(math.radians(angle)))\nprint(ansjyou**0.5)", "import math\na, b, h, m = map(int, input().split())\nt = math.pi * (60 * h - 11 * m) / 360\nl = math.sqrt(a ** 2 + b ** 2 - 2 * a * b * math.cos(t))\nprint(l)", "import math\n[A, B, H, M] = [int(i) for i in input().split()]\nx = 5.5*(60*H + M)\nc = A**2 + B**2 -2*A*B*math.cos(math.radians(x))\nprint(c**0.5)", "import math\npi=math.pi\na,b,h,m=map(int,input().split())\nra=((60*h+m)/360)*180\nrb=(180/30)*m\nr=abs(ra-rb)\nif r>2*180:\n    r=2*180-r\nans=math.sqrt(a**2+b**2-2*a*b*math.cos(r*2*pi/360))\nprint(f'{ans:.20f}')", "import math\na,b,h,m = list(map(int,input().split()))\n\nminutes = m/60*2*math.pi\nhour = (60*h+m)/720*2*math.pi\n\ntheta = abs(hour-minutes)\n\n\nx = math.sqrt(a**2+b**2-2*a*b*math.cos(theta))\nprint(x)\n", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf, pi, cos\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\na, b, h, m = [int(i) for i in input().split()]\n\ntmp = 0\nres = 0\n\ntheta = 2 * pi * (h / 12.0 + m / 720.0 - m / 60.0)\nres = sqrt(a ** 2 + b ** 2 - 2 * a * b * cos(theta))\n\nprint(res)\n", "import math\n\na, b, h,m = list(map(int,input().split()))\n\nh_deg = (60 * h + m) * (360 / (60*12))\nm_deg = m * (360 / 60)\ndeg = abs(h_deg-m_deg)\nrad = math.radians(deg)\n\nc = a ** 2 + b ** 2 - 2 * a * b  * math.cos(rad)\n\nprint((math.sqrt(c)))\n\n", "import math\n\nA, B, H, M = list(map(int, input().split()))\n\ntheta = abs((H + M / 60 ) / 12 - M / 60) * 2 * math.pi\n#if theta > math.pi: theta -= math.pi\n\nans = math.sqrt(A * A + B * B - 2 * A * B * math.cos(theta))\n\nprint(ans)\n", "import math\n\nA, B, H, M = list(map(int,input().split()))\n\nq = abs((H + M/60)/12-M/60)*360\n\nprint((math.sqrt(A**2 + B**2 - 2*A*B*math.cos(math.radians(q)))))\n", "import math\n\nx = list(map(int,input().split()))\n\nA = x[0]\nB = x[1]\nH = x[2]\nM = x[3]\n\ny = 2*math.pi*((H*60+M)/720-M/60)\n\nz = math.sqrt(A**2+B**2-2*A*B*math.cos(y))\n\nprint(z)", "import math\na,b,h,m = list(map(int,input().split()))\n\nminutes = m/60*2*math.pi\nhour = (60*h+m)/720*2*math.pi\n\ntheta = abs(hour-minutes)\n\n\nx = math.sqrt(a**2+b**2-2*a*b*math.cos(theta))\nprint(x)\n", "import math\n\na, b, h, m = list(map(int, input().split()))\n\nx = 6 * m\ny = 30 * h + 0.5 * m\nC = max(x, y) - min(x, y)\nC = min(C, 360 - C)\n\nprint((math.sqrt(a**2 + b**2 - 2*a*b*math.cos(math.radians(C)))))\n", "import math\nA, B, H, M = map(int, input().split())\nans = math.sqrt(A**2 + B**2 - 2*A*B*math.cos(math.radians(30*H - 11*M/2)))\nprint(ans)", "import math\n\nA, B, H, M = list(map(int, input().split()))\nrad = ((H / 12) - (M * 11 / 720)) * 2 * math.pi\n\nans = ((A ** 2) + (B ** 2) - (2 * A * B * math.cos(rad))) ** (1 / 2)\nprint(ans)", "import math\n\nA,B,H,M = map(int,input().split())\n\nangle = (H*30 + 30*(M/60))-M*6\nabs_angle = abs(angle)\n\nif abs_angle >180:\n  abs_angle = 360 - abs_angle\n\nabs_angle = math.cos(math.radians(abs_angle))\nans_sqrt = A**2 + B**2 - 2*A*B*abs_angle\n\nprint(math.sqrt(ans_sqrt))", "import math as mt\na,b,h,m=list(map(int, input().split()))\nprint((mt.sqrt(a**2+b**2-2*a*b*mt.cos(2*mt.pi*(1/12*(h+m/60)-m/60)))))\n\n\n", "#!/usr/bin/env python3\n\n#import\nimport math\n#import numpy as np\nA, B, H, M = list(map(int, input().split()))\n\nh = H * 30 + M / 2\nm = M * 6\nt = max(m, h) - min(m, h)\ntheta = min(t, 360 - t)\nc = A**2 + B**2 - 2 * A * B * math.cos(theta / 180 * math.pi)\nprint((math.sqrt(c)))\n", "import math\n\na, b, h, m = list(map(int, input().split()))\n\nang = h * 30 - m * 11/2\n\nc = math.sqrt(a ** 2 + b ** 2 - 2 * a * b * math.cos(math.radians(ang)))\n\nprint(c)\n", "import math\n\nA, B, H, M = map(int, input().split())\n\nh_theta = 2 * math.pi * (H+M/60)/12\nm_theta = 2 * math.pi * M/60\n\ndx = A * math.cos(h_theta) - B * math.cos(m_theta)\ndy = A * math.sin(h_theta) - B * math.sin(m_theta)\n\nprint(math.sqrt(dx**2+dy**2))", "import math\nA, B, H, M = map(int, input().split())\nthetaA = math.pi * (0.5*(H*60 + M)) / 180\nthetaB = math.pi * 6.0*M / 180\ntheta = min(2*math.pi-abs(thetaA-thetaB), abs(thetaA-thetaB))\ncosC = math.cos(theta)\nans = math.sqrt(A**2+B**2-2*A*B*cosC)\nprint(ans)", "import math\n\na, b, h, m = map(int, input().split())\nangle = ((h * 60 + m) / 720 - m / 60) * math.pi * 2  # \u89d2\u5ea6(\u30e9\u30b8\u30a2\u30f3)\nans = math.sqrt(a*a + b*b - 2*a*b*math.cos(angle))  # \u4f59\u5f26\u5b9a\u7406\nprint(ans)", "import math\ndef i_input(): return int(input())\n\n\ndef i_map(): return list(map(int, input().split()))\n\n\ndef i_list(): return list(map(int, input().split()))\n\n\ndef i_row(N): return [int(input()) for _ in range(N)]\n\n\ndef i_row_list(N): return [list(map(int, input().split())) for _ in range(N)]\ndef degCal(hour,minite):\n    ansDeg=0\n    convHour=hour+minite/60\n    angA=2*math.pi/12*convHour\n    angB=2*math.pi*convHour\n    ansDeg=abs(angA-angB)\n\n    return ansDeg\n\ndef lenCal(deg,lenA,lenB):\n    ansLen=math.sqrt(lenA**2+lenB**2-2*lenA*lenB*math.cos(deg))\n\n    return ansLen\n\na,b,h,m= i_map()\nangle=degCal(h,m)\nans=lenCal(angle,a,b)\n\nprint(ans)\n\n\n\n", "import math\nA,B,H,M = map(int, input().split())\n\nat = (60*H+M)/(12*60)*2*math.pi\nbt = M/60*2*math.pi\nax = A*math.sin(at)\nay = A*math.cos(at)\nbx = B*math.sin(bt)\nby = B*math.cos(bt)\n\nprint(((ax-bx)**2+(ay-by)**2)**0.5)", "import math\nA, B, H, M = list(map(int, input().split()))\n\n\nif H == 0:\n    H = 12\nelif M == 0:\n    M = 60\nL = M / 5\n\n\n\nN = min(abs(L - H), abs(H - L))\n\nif L >= H:\n    if M == 60:\n        M = 0\n    S = 360 * N / 12 - (0.5 * M)\nelse:\n    S = 360 * N / 12 + (0.5 * M)\n\n\nANS = A**2 + B**2 - (2*A*B*math.cos(math.radians(S)))\nANS = math.sqrt(ANS)\nprint(ANS)\n", "import math\n\na,b,h,m = map(int, input().split())\n\nm_radians = 360 * m / 60\nh_radians = 360 * ((h * 5 + 5 * m / 60) / 60)\n\ncos_ab = math.cos(math.radians(h_radians-m_radians))\nc = math.sqrt(a**2 + b**2 - 2*a*b*cos_ab)\n\nprint(c)", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    A, B, H, M = MI()\n    pai = math.pi\n    h = H / 12 + M / 720\n    m = M / 60\n    angle = abs(h-m)\n    if angle > 0.5:\n        angle = 1 - angle\n\n    res = A**2 + B**2- 2*A*B*math.cos(math.radians(360*angle))\n    print(math.sqrt(res))\ndef __starting_point():\n    main()\n__starting_point()", "import math\n\na, b, h, m = list(map(int, input().split()))\n\nang = abs(h * 30 - m * 11/2)\n\nc = math.sqrt(a ** 2 + b ** 2 - 2 * a * b * math.cos(math.radians(ang)))\n\nprint(c)\n", "import math\ndef main():\n    a, b, h, m = map(int, input().split(\" \"))\n    r1 = h*30 + m / 2\n    r2 = 6 * m\n    r3 = abs(r1-r2)\n    print(math.sqrt(a **2 + b **2 -2*a*b*math.cos(math.radians(r3))))\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nA, B, H, M = map(int, input().split())\nsitaH = (H*60+M) / 720 * 2 * math.pi\nsitaM =  M/60 * 2 * math.pi\n\nposXH = A * math.cos(sitaH)\nposYH = A * math.sin(sitaH)\nposXM = B * math.cos(sitaM)\nposYM = B * math.sin(sitaM)\n\ndelX = posXH - posXM\ndelY = posYH - posYM\n\nd = (delX*delX + delY*delY)**(1/2)\nprint(d)", "from math import*\n\nA,B,H,M = map(int, input().split())\n\nprint((A*A+B*B-2*A*B*cos((M*11/360-H/6)*pi))**.5)", "import math\n\ndef cal(H,M):\n\n    H = 360/12*H + 1/12 * (M/60) *  360\n    M = 360/60*M\n    H_M = abs(H-M)\n\n    if H_M > 180:\n        H_M = 360 - H_M\n    \n    return H_M\n\ndef main():\n    A, B, H, M = map(int,input().split())\n    \n    angle = cal(H,M)\n    \n    if angle == 180:\n        print(A+B)\n    \n    else:\n        print(math.sqrt(A*A + B*B - 2*A*B*math.cos(math.radians(angle))))\n              \nmain()", "from collections import Counter\nimport sys\nimport math\n\nsys.setrecursionlimit(10 ** 6)\n\nmod = 1000000007\ninf = int(1e18)\n\n\ndef main():\n    a, b, h, m = list(map(int, input().split()))\n    x1 = a * math.cos(2 * math.pi * (h % 12 / 12 + m / 60 / 12))\n    y1 = a * math.sin(2 * math.pi * (h % 12 / 12 + m / 60 / 12))\n    x2 = b * math.cos(2 * math.pi * (m / 60))\n    y2 = b * math.sin(2 * math.pi * (m / 60))\n\n    print((((x1 - x2)**2 + (y1 - y2)**2)**(1/2)))\n\n\nmain()\n", "import math\nA,B,H,M = map(int,input().split())\nh = (H/12+M/60/12)*360\nm = (M/60)*360\nr = min(abs(h-m),360-abs(h-m))\nans = (A**2+B**2-2*B*A*math.cos(math.radians(r)))**(1/2)\nprint(ans)", "import math\na,b,h,m=map(int,input().split())\nq= abs(m/60-(h+m/60)/12)*360\nprint(math.sqrt(a**2+b**2-2*a*b*math.cos(math.radians(q))))", "import math\ndef colon():\n    A, B, H, M = map(int,input().split())\n    h = 30 * H\n    h = h - 5.5 * M\n    h = min(h, 360 - h)\n    h = h * math.pi / 180\n    res = A**2 + B**2 - 2*A*B*math.cos(h)\n    print(res**0.5)\n    \ncolon()", "import math\na,b,h,m =(float(x) for x in input().split())\nx = (h*math.pi/6)+(m*math.pi/360)\ny = (m*math.pi/30)\nprint(math.sqrt(a**2+b**2-2*a*b*math.cos(x-y)))", "import math\nA,B,H,M=map(int,input().split())\n\ns=float(max(6*M,30*H+1/2*M)-min(6*M,30*H+1/2*M))/180*math.pi\nS=float(min(s,abs(s-180))/180*math.pi)\nprint(float(math.sqrt(A**2+B**2-2*A*B*math.cos(s))))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#from scipy.sparse.csgraph import shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\n#from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nA, B, H, M = na()\nl = 360 / 12 * (H + M / 60)\ns = 360 / 60 * M\nprint(math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(abs(l - s) * math.pi / 180)))", "import math\nA,B,H,M=map(int,input().split())\nC2=A**2+B**2-2*A*B*math.cos((30*H-11*M/2)/180*math.pi)\nprint(C2**(1/2))", "a,b,h,m = map(int,input().split())\nimport math\nH=30*h+0.5*m\nM=6*m\nC=a**2+b**2-2*a*b*math.cos(math.radians(H-M))\nprint(math.sqrt(C))", "import math\n\na, b, h, m = map(int, input().split())\nh_rad = (h * 60 + m) * math.pi / 360\nm_rad = m * math.pi / 30\ncosine = math.cos(abs(h_rad - m_rad))\n\nprint(math.sqrt(a ** 2 + b ** 2 - 2 * a * b * cosine))", "import math\n\na, b, h, m = map(int, input().split())\n\nha = (h*60+m)/360 * math.pi\nma = m/30 * math.pi\nsh, ch = math.sin(ha), math.cos(ha)\nsm, cm = math.sin(ma), math.cos(ma)\nprint(((a*sh-b*sm)**2+(a*ch-b*cm)**2)**(1/2))", "import math\na,b,h,m=map(int,input().split())\nlrad=6*m\nsrad=30*h+0.5*m\nif abs(lrad-srad)<=180:\n    do=abs(lrad-srad)\nelse:\n    do=360-abs(lrad-srad)\nrad=math.radians(do)\nprint(math.sqrt(a**2+b**2-2*a*b*math.cos(rad)))", "import math\na, b, h, m = map(int, input().split())\ntheta_h = 2 * math.pi * (h + m / 60) / 12\ntheta_m = 2 * math.pi * m / 60\nd_theta = abs(theta_h - theta_m)\nanswer = math.sqrt(a**2 + b**2 - 2*a*b*math.cos(d_theta))\nprint(answer)", "import math\na,b,h,m=map(int,input().split())\nx =(math.pi)*h/6 - (math.pi)*m/30 + (math.pi)*m/360\nc = math.sqrt(a**2+b**2-2*a*b*(math.cos(x)))\nprint(c)", "import numpy as np\n\nA, B, H, M = list(map(int, input().split()))\n\n\nangle_h = 1./ 12.*(H + M/60.) * 2*np.pi\n\nangle_m = M/60. * 2 * np.pi\n\nhour = (A*np.sin(angle_h), A*np.cos(angle_h))\nminute = (B*np.sin(angle_m), B*np.cos(angle_m))\n\ndist = np.sqrt((hour[0] - minute[0])**2 + (hour[1] - minute[1])**2)\n\nprint(dist)\n", "import math\nA,B,H,M=map(int,input().split())\ns=float(max(6*M,30*H+1/2*M)-min(6*M,30*H+1/2*M))/180*math.pi\nprint(float(math.sqrt(A**2+B**2-2*A*B*math.cos(s))))", "a,b,h,m = map(int, input().split())\n\nimport math\nprint((a**2+b**2-2*a*b*math.cos(math.radians((360*h/12+30*m/60)-360*m/60)))**(1/2))", "import math\na, b, h, m = list(map(int, input().split()))\n\ndeg_m = (m / 60) * 360\ndeg_h = ((60 * h + m) / 720) * 360\ndeg = abs(deg_h - deg_m)\ndeg = math.radians(min(360 - deg, deg))\nx2 = b ** 2 + a ** 2 - 2 * b * a * math.cos(deg)\n\nprint(x2**0.5)", "import sys\nimport math\na,b,h,m=map(int,input().split())\n\nf=h / 12 * 360 - m / 60 * 360 + m / 60 / 12 * 360\n\nprint((a**2+b**2-2*b*a*(math.cos(math.radians(f))))**(0.5))", "import math\nA,B,H,M = map(int,input().split())\nV1 = 30\nV2 = 30/60\nv = 6\nd = abs( (V1*H + V2*M) - v*M)\nprint(math.sqrt(A**2 + B**2 -2*A*B*math.cos(math.radians(d))))", "import math\nA,B,H,M=list(map(int,input().split()))\nHx=math.cos(((H/12)+((1/12)*(M/60)))*2*math.pi)*A\nMx=math.cos((M/60)*2*math.pi)*B\nHy=math.sin(((H/12)+((1/12)*(M/60)))*2*math.pi)*A\nMy=math.sin((M/60)*2*math.pi)*B\n\nprint((math.sqrt((Hx-Mx)*(Hx-Mx)+(Hy-My)*(Hy-My))))\n", "A, B, H, M = list(map(int,input().split()))\nimport math\n\nx = H / 12 * 360 + M / 60 * 30\ny = M / 60 * 360\n\nang = abs(y - x)\nans_2 = A ** 2 + B ** 2 - 2 * A * B * math.cos(math.radians(ang))\nans = math.sqrt(ans_2)\nprint(ans)\n", "import math\na,b,h,m=map(float,input().split())\n#\u6642\u91dd\u306e\u89d2\u5ea6\u3092A\nc=abs(30*h-11/2*m)\nct=math.radians(c)\ncos=math.cos(ct)\nans=a**2+b**2-2*a*b*cos\nprint(math.sqrt(ans))", "import math\na,b,h,m = map(int, input().split())\n# A: 360 / 720 [degree/min]\n# B: 360/ 60 [degree/min]\nr_a = 30*h + 0.5 * m\nr_b = 6 * m\nrad = math.pi * (r_a-r_b)/180\nans = math.sqrt(a**2+b**2-2*a*b*math.cos(rad))\nprint(ans)", "import math\na,b,h,m = [int(x) for x in input().split()]\np = math.pi\narg_h = 2 * p * h / 12 + m * p / 360\narg_m = 2 * p * m / 60\narg = abs(arg_h - arg_m)\nc_2 = a**2 + b**2 - 2 * a * b *math.cos(arg)\nc = math.sqrt(c_2)\nprint(c)", "import numpy as np\nA,B,H,M = map(int,input().split())\npi = np.pi\nh_angle = (H + M/60) * 2*pi / 12\nm_angle = M * 2 * pi / 60\nh_x = A * np.cos(h_angle)\nh_y = A * np.sin(h_angle)\nm_x = B * np.cos(m_angle)\nm_y = B*np.sin(m_angle)\nprint(np.sqrt((h_x - m_x) ** 2 + (h_y - m_y) ** 2))", "import math\nA,B,H,M = map(int,input().split())\nBtheta = M * math.pi / 30\nBx = B * math.cos(Btheta)\nBy = B * math.sin(Btheta)\nAtheta = ((60 * H + M) / 360) * math.pi\nAx = A * math.cos(Atheta)\nAy = A * math.sin(Atheta)\nprint(((Ax - Bx) ** 2 + (Ay - By) ** 2) ** (1 / 2))", "a,b,c,d=map(int,input().split())\nc=(c*60+d)*0.5\nd*=6\nimport math\nans=a**2+b**2-2*a*b*math.cos(math.radians(min(abs(d-c),360-(abs(d-c)))))\nprint(ans**0.5)", "import numpy as np\na,b,h,m=map(int,input().split())\n# print([a,b,h,m])\n\nhour_theta= np.pi*(60*h+m)/360\nminute_theta=np.pi*m/30\n\ntheta = abs(hour_theta-minute_theta)\n# print(hour_theta)\n# print(minute_theta)\n# print(theta)\n# print(np.cos(2.356194490192345))\nans=np.sqrt((a**2)+(b**2)-2*a*b*np.cos(theta))\nprint('{:.11f}'.format(ans))", "import math\n\ndef main() -> None:\n    a, b, h, m = list(map(int, input().split()))\n\n    theta = abs(30*h - 5.5*m)\n    cos_theta = math.cos(math.radians(theta))\n    print(((a**2+b**2-2*a*b*cos_theta) ** 0.5))\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nimport numpy as np\na,b,h,m = list(map(int, input().split()))\na_radian = math.radians(h * 30 + m / 2)\na_ = np.array([a * math.cos(a_radian), a * math.sin(a_radian)])\n\nb_radian = math.radians(6 * m)\nb_ = np.array([b * math.cos(b_radian), b * math.sin(b_radian)])\n\nprint(np.linalg.norm(a_ - b_))", "import math\na,b,H,M=map(int,input().split())\nh=30*H+(0.5)*M\nm=6*M\nc=abs(h-m)\nx=math.sqrt(a**2+b**2-(2*a*b*(math.cos(math.radians(c)))))\nprint(x)", "import math\na,b,h,m=list(map(int,input().split()))\n\narg=min(abs(30*h-5.5*m), 360-abs(30*h-5.5*m))\n\nprint((math.sqrt(a**2+b**2-2*a*b*math.cos(math.radians(arg)))))\n", "import math\n\nA, B, H, M = map(int, input().split())\n\nangle_A = 6*M\nangle_B = 30*(H+M/60)\nangle_C = abs(angle_A-angle_B)\n\nrad_C = math.radians(angle_C)\n\nC = math.sqrt(A**2+B**2-2*A*B*math.cos(rad_C))\n\nprint(C)", "A, B, H, M = map(int, input().split())\n\nimport math\n\nH_angle =(M * math.pi) / 30\nM_angle = (60 * H + M) * math.pi / 360\n\nH_x, H_y = (A * math.cos(H_angle), A * math.sin(H_angle))\nM_x, M_y = (B * math.cos(M_angle), B * math.sin(M_angle))\n\nd = math.sqrt((H_x - M_x) ** 2 + (H_y - M_y) ** 2)\nprint(d)", "import math\na, b, h, m = map(int,input().split())\nm_rad = m/60 * 360\nh_rad = (h/12 * 360) + (m/60 * 360/12)\nrad = abs(m_rad - h_rad)\nans = (a**2 + b**2) - (2 * a * b * math.cos(math.radians(rad)))\nprint(math.sqrt(ans))", "import math\na, b, h, m = list(map(int, input().split()))\nans = math.sqrt(a*a + b*b - 2*a*b*math.cos(math.pi*(h/6 + m/360 - m/30)))\nprint(ans)\n", "import math\nfrom decimal import Decimal\nhour_len, minute_len, hour, minute = list(map(int, input().split()))\n\nrad_h = math.radians( Decimal( (hour * 60 + minute) / 720 * 360 ) )\nrad_m = math.radians( Decimal(minute / 60 * 360) )\ncos_hm = math.cos( abs( Decimal(rad_h - rad_m) ) )\n\na_double = hour_len ** 2 + minute_len ** 2 - (2 * hour_len * minute_len * cos_hm)\nans = math.sqrt(a_double)\nprint( f\"{ans:.20f}\" )", "import math\n\na, b, h, m = map(int, input().split())\n\nalpha = 2*math.pi * h/12 + (math.pi/6) *m/60\nbeta = 2*math.pi * m/60\n\nans = (a*a + b*b - 2*a*b*math.cos(alpha - beta)) **0.5\nprint(ans)", "a,b,c,d=input().split()\na=int(a)\nb=int(b)\nc=int(c)\nd=int(d)\ne=60*c+d\nf=abs(0.5*e-6*e)\nf=f%360\nif f>180:\n  f=360-f\nimport math\nprint(math.sqrt(a*a+b*b-2*a*b*(math.cos(math.radians(f)))))", "import math\nfrom decimal import Decimal\nhour_len, minute_len, hour, minute = list(map(int, input().split()))\n\ndegree_hm = abs(((hour * 60 + minute) * 0.5) - (minute * 6))\nrad_hm = math.radians(degree_hm) # \u9577\u91dd\u306f1\u5206\u30670.5deg\u3001\u77ed\u91dd\u306f1\u5206\u30676deg\ncos_hm = math.cos(rad_hm)\n\na_double = hour_len ** 2 + minute_len ** 2 - (2 * hour_len * minute_len * cos_hm)\nans = math.sqrt(a_double)\nprint( f\"{ans:.20f}\" )", "# C - : (Colon)\n\nimport math\n\na,b,h,m = list(map(int,input().split()))\n\ns = 3600*h + 60*m\nradh = ((s/(60*60*12))-int(s/(60*60*12)))*2*math.pi\nradm = ((s/(60*60))-int(s/(60*60)))*2*math.pi\n\nc = math.sqrt(a**2+b**2-2*a*b*math.cos(radh-radm))\n\nprint(c)\n", "from math import (pi,cos,sqrt,radians)\n\ndef main():\n    A,B,H,M = map(int, input().split())\n\n    # \u9577\u91dd\u3001\u77ed\u91dd\u306e0\u66420\u5206\u304b\u3089\u306e\u89d2\u5ea6\u3092\u6c42\u3081\u308b\n    HTheta = H/12 * 360 + 1/12 * (M/60) *  360\n    MTheta = M/60 * 360\n    # |\u9577\u91dd-\u77ed\u91dd|\u3067\u89d2\u5ea6\u03b8\u3092\u6c42\u3081\u308b\n    Theta = abs(HTheta - MTheta) \n    # \u03b8=180\u306a\u3089A+B\u3092\u51fa\u529b\u3057\u3066\u7d42\u4e86\n    if Theta == 180:\n        print(A + B)\n        return\n    # \u4e88\u8a00\u5b9a\u7406\u3092\u6c42\u3081\u308b\n    print(sqrt(A*A + B*B - 2*A*B*cos(radians(Theta))))\n\nmain()", "import numpy as np\na,b,h,m = list(map(int,input().split()))\n\ntheta = abs(h/12-11*m/720)*2*np.pi\nprint(np.sqrt((a*a+b*b-2*a*b*np.cos(theta))))", "import math\nimport numpy as np\n\n# t\u306f\u30e9\u30b8\u30a2\u30f3\ndef rot_rev(t, v):\n    R = np.array([[ np.cos(t), np.sin(t)],\n                  [-np.sin(t), np.cos(t)]])\n    return np.dot(R, v)\n\nA, B, H, M = list(map(int, input().split()))\n\n# h\u6642m\u5206\u3092 60*h + m \u5206\u306b\u63db\u7b97\u3057\u3001\u5272\u5408\u3092\u8a08\u7b97\nH_rad = ((H * 60 + M) / (12 * 60)) * 2 * np.pi\nM_rad = (M / 60) * 2 * np.pi\n\nP_A = (0, A)\nP_B = (0, B)\n\nrot_A = rot_rev(H_rad, P_A)\nrot_B = rot_rev(M_rad, P_B)\n\nprint((np.linalg.norm(rot_A - rot_B)))\n", "import math\n\na, b, h, m = list(map(int, input().split()))\n\nang = h * 30 - m * 5.5\n\nans = math.sqrt(a ** 2 + b ** 2 - 2 * a * b * math.cos(math.radians(ang)))\n\nprint(ans)\n", "import math\n\nA, B, H, M = map(int, input().split())\n\nthetaA = (math.pi * H / 6) + (math.pi * M / 360)\nthetaB = (math.pi * M / 30)\nAx = A * math.cos(thetaA)\nAy = A * math.sin(thetaA)\nBx = B * math.cos(thetaB)\nBy = B * math.sin(thetaB)\n\nX = Ax - Bx\nY = Ay - By\n\nans = (X ** 2 + Y ** 2) ** 0.5\n\nprint(ans)", "from math import *\ndef calcAngle(h,m):\n         \n        # validate the input\n        if (h < 0 or m < 0 or h > 12 or m > 60):\n            print('Wrong input')\n         \n        if (h == 12):\n            h = 0\n        if (m == 60):\n            m = 0\n            h += 1;\n            if(h>12):\n                   h = h-12;\n         \n        # Calculate the angles moved by \n        # hour and minute hands with \n        # reference to 12:00\n        hour_angle = 0.5 * (h * 60 + m)\n        minute_angle = 6 * m\n         \n        # Find the difference between two angles\n        angle = abs(hour_angle - minute_angle)\n         \n        # Return the smaller angle of two \n        # possible angles\n        angle = min(360 - angle, angle)\n         \n        return angle\na,b,h,m=[int(i) for i in input().split()]\ntheta=calcAngle(h,m)*pi/180\nans=(a**2+b**2-2*a*b*cos(theta))**(1/2)\nprint((\"{:.15f}\".format(ans)))\n", "import sys\nimport math\nfrom decimal import Decimal\ndef input(): return sys.stdin.readline().rstrip()\n\nA,B,H,M = map(float,(input().split()))\n\nminute = H * 60 + M\nshort = minute / (60 * 12) * 2 * math.pi\nlong = M / 60 * 2 * math.pi\nrad = abs(long - short) \n\nans = math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad))\nprint(ans)", "import math\nimport numpy as np\n\nA, B, H, M = list(map(int, input().split()))\n\nthetaA = math.radians(((H / 12) + (1 / 12 * M / 60)) * 360)\nthetaB = math.radians(M / 60 * 360)\n\na = np.array([A * math.sin(thetaA), A * math.cos(thetaA)])\nb = np.array([B * math.sin(thetaB), B * math.cos(thetaB)])\n\nprint((round(np.linalg.norm(a - b), 11)))\n", "A, B, H, M = map(int, input().split())\n\n# \u6642\u91dd: 12\u6642\u9593720\u5206\u3067360\u5ea6 1\u5206\u30670.5\u5ea6\n# \u5206\u91dd: 60\u5206\u3067360\u5ea6 1\u5206\u30676\u5ea6\ntheta = abs(((0.5 * (H * 60 + M)) - (6 * M)) % 360)\nif theta > 180:\n  theta = 360 - theta\n#print(theta)\nimport math\nC = math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(theta / 180 * math.pi))\nprint(C)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Sep  6 12:21:24 2020\n\n@author: liang\n\"\"\"\nimport math\npi = 3.141592653589793238\nh, m, H, M = map(int,input().split())\n\nprint(math.sqrt(h**2+m**2-2*h*m*math.cos(2*pi*(30*H-5.5*M)/360)))", "import math\n\nA, B, H, M = map(int, input().split())\n\nM_deg = M / 60 * 360\nH_deg = (H / 12 * 360) + (M_deg / 12)\n\n\ndeg = min(abs(H_deg - M_deg), abs(M_deg - H_deg))\n\nrad = math.radians(deg)\n\nans = math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(rad))\n\nprint(ans)", "from math import cos, radians\n\n\ndef answer(a: int, b: int, h: int, m: int) -> float:\n    num = abs((60 * h - 11 * m) / 2)\n    theta = min(num, 360 - num)\n    return pow(pow(a, 2) + pow(b, 2) - 2 * a * b * cos(radians(theta)), 1 / 2)\n\n\ndef main():\n    a, b, h, m = map(int, input().split())\n    print(answer(a, b, h, m))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from cmath import *\nA,B,H,M=map(int,input().split());print(abs(rect(A,pi*(H+M/60)/6)-rect(B,pi*M/30)))", "import math\nA, B, H, M = map(int,input().split())\nh = 30*H + (0.5)*M\nm = 6*M\nC = abs(h-m)\nX = math.sqrt(A**2 + B**2 -(2*A*B*(math.cos(math.radians(C)))))\nprint(X)", "import math\n \nA, B, H, M = map(int, input().split())\n \nangle_A = 6*M\nangle_B = 30*(H+M/60)\nangle_C = abs(angle_A-angle_B)\n \nrad_C = math.radians(angle_C)\n \nC = math.sqrt(A**2+B**2-2*A*B*math.cos(rad_C))\n \nprint(C)", "import math\n\nA, B, H, M = map(int, input().split())\nk = M / 60\nif H == 0:\n    H = 12\nif M == 0:\n    M = 60\n\nH_d = ((H/12 * 60 + k*5)/60)*2*math.pi\nM_d = (M/60)*2*math.pi\nr = abs(H_d-M_d)\nprint(math.sqrt(A**2 + B**2 - 2*A*B*math.cos(r)))", "import math\n\na, b, h, m = list(map(int, input().split()))\n\nang = abs(h * 30 - m * 11/2)\nangle = min(ang, 360-ang)\n\nc = math.sqrt(a ** 2 + b ** 2 - 2 * a * b * math.cos(math.radians(angle)))\n\nprint(c)\n", "import math\nA,B,H,M=map(int,input().split())\nx=2*math.pi*abs(H/12+M/60/12-M/60)\nans=pow(A*A+B*B-2*A*B*math.cos(x),1/2)\nprint(ans)", "import math\na,b,h,m=map(int,input().split())\nc = 2*math.pi * (h *60 +m)/720\nd = 2*math.pi * (m / 60)\nprint(math.sqrt(a**2 + b**2 - 2*a*b*math.cos(c-d)))", "A,B,H,M=map(float,input().split())\nimport math\nrad_min =2.0*math.pi*M/60\nrad_hour = 2.0*math.pi*H/12.0+math.pi/6.0*M/60.0\nrad=abs(rad_min-rad_hour)\nl=math.sqrt(A**2+B**2-2.0*A*B*math.cos(rad))\nprint(l)", "import math\nA, B, H, M=list(map(int, input().split()))\n\nwa=math.pi*2/60/12\nwb=math.pi*2/60\ntheta=(wb-wa)*(H*60+M)%(2*math.pi)\n\nprint(((A**2+B**2-2*A*B*math.cos(theta))**0.5))\n", "import math\na, b, h, m = list(map(int, input().split()))\nang = abs(h * 30 + m * 0.5 - m * 6)\nprint(math.sqrt(a ** 2 + b ** 2 - 2 * a * b * math.cos(ang * math.pi / 180)))", "import math\nA, B, H, M = list(map(int, input().split()))\ntheta = (M * 11 / 360 - H / 6) * math.pi\nprint(((A ** 2 + B ** 2 - 2 * A * B * math.cos(theta)) ** 0.5))\nreturn\n", "import numpy as np\na,b,h,m = list(map(int,input().split()))\npos1 = [b*np.sin(np.radians(6*m)),b*np.cos(np.radians(6*m))]\npos2 = [a*np.sin(np.radians(30*h+m*(360/(12*60)))),a*np.cos((np.radians(30*h+m*(360/(12*60)))))]\nd = ((pos1[0]-pos2[0])**2+(pos1[1]-pos2[1])**2)**0.5\nprint(d)\n#print(pos1)\n#print(pos2)\n", "import math\nA,B,H,M = map(int,input().split())\na = (H*60+M)*0.5\nb = M*6\nangle = math.radians(min(abs(b-a),360-abs(b-a)))\ncos = math.cos(angle)\nans = A**2 + B**2 - 2*A*B*cos\nprint(ans**0.5)", "import math\na,b,h,m = list(map(int,input().split()))\n\ntotal_minute = 60 * h + m\n\nax = a * math.cos(math.radians(360-(total_minute/2)+ 90))\nay = a * math.sin(math.radians(360-(total_minute/2)+ 90))\nbx = b * math.cos(math.radians(360-(6*m) + 90))\nby = b * math.sin(math.radians(360-(6*m) + 90))\n\nkyori = math.sqrt((ax-bx)**2 + (ay-by)**2)\n\nprint(kyori)\n\n\n"]