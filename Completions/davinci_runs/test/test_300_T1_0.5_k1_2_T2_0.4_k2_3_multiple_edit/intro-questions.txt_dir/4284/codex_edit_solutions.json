["\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n", "\n#-----Solution-----\n#The solution is to compute the number of first type turns that can be played and the number of second type turns that can be played. The maximum will be the maximum of the two.\n#The number of first type turns that can be played is the maximum n such that k-n*a >= 0\n#The number of second type turns that can be played is the maximum n such that k-n*b >= 0\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\nimport math\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n", "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played and the number of second type turns that can be played. The maximum will be the maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n", "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0.\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n", "\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played and the number of second type turns that can be played. The maximum will be the maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, x, y = map(int, sys.stdin.readline().split())\n        if x <= y:\n            print(-1)\n            continue\n        if k < x:\n            print(0)\n            continue\n        if k >= x + y:\n            print(n)\n            continue\n        ans = 0\n        while k >= x + y:\n            k -= x\n            ans += 1\n        if k < x:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# \nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# test\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, x, y = map(int, sys.stdin.readline().split())\n        print(k, n, x, y)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        n, k, x, y = map(int, sys.stdin.readline().split())\n        if x < y:\n            print(-1)\n            continue\n        if k <= x:\n            print(0)\n            continue\n        if k > x + y:\n            print(n)\n            continue\n        ans = 0\n        while k > x + y:\n            k -= x\n            ans += 1\n        if k <= x:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k <= a:\n            print(0)\n            continue\n        if k > a + b:\n            print(n)\n            continue\n        ans = 0\n        while k > a + b:\n            k -= a\n            ans += 1\n        if k <= a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k <= a:\n            print(0)\n            continue\n        if k > a + b:\n            print(n)\n            continue\n        ans = 0\n        while k > a + b:\n            k -= a\n            ans += 1\n        if k <= a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a) #number of first type turns\n    max_turns_2 = math.floor(k/b) #number of second type turns\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"]