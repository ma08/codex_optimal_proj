["def gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while a % b != 0:\n        a, b = b, a % b\n    return b\n\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n", "\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j] + 1\n    print(ret)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))  # A = [int(x) for x in input().split()]\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n", "from bisect import bisect_left\n\n\ndef lower_bound(A, key):\n    i = bisect_left(A, key)\n    if i != len(A) and A[i] == key:\n        return i\n    return -1\n\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    ans = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            a = A[i] + A[j]\n            k = lower_bound(A, -a)\n            if k > j:\n                ans += k - j - 1\n    print(ans)\n", "from math import gcd\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = A[0] + A[1] - gcd(A[0], A[1])\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n", "if __name__ == '__main__':\n    N, M = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    B = [list(map(int, input().split())) for _ in range(M)]\n", "\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j] + 1)\n    print(ret)\n\nif __name__ == '__main__':\n    main()\n"]