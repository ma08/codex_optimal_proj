2022-04-22 21:12:37.157909 num operations 2
2022-04-22 21:12:37.157924 size on input set 1
2022-04-22 21:12:37.158090 using api key jaanu
2022-04-22 21:12:43.937919 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# my solution (runtime error)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams (key: sorted characters, value: indices of anagrams)\nanagrams = {}\nfor i in range(n):\n    # sort characters in alphabetical order\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\n# my solution (it's too long)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    }
  ],
  "created": 1650661957,
  "object": "edit"
}
2022-04-22 21:12:43.938188 fix spelling mistakes 3 ['\n\n# my solution (runtime error)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams (key: sorted characters, value: indices of anagrams)\nanagrams = {}\nfor i in range(n):\n    # sort characters in alphabetical order\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n\n# my solution (it\'s too long)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n']
2022-04-22 21:12:43.938246 size on output set 3
2022-04-22 21:12:43.938254 size on input set 3
2022-04-22 21:12:43.938427 using api key jaanu
2022-04-22 21:12:53.149016 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# my solution (runtime error)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution (runtime error)\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nanagrams = {}\nfor i in range(n):\n    chars = list(s[i])\n    chars.sort()\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\nprint(count)\n"
    }
  ],
  "created": 1650661963,
  "object": "edit"
}
2022-04-22 21:12:53.149353 fix syntax errors 3 ['\n# my solution (runtime error)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution (runtime error)\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nanagrams = {}\nfor i in range(n):\n    chars = list(s[i])\n    chars.sort()\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\nprint(count)\n']
2022-04-22 21:12:53.149539 using api key soukgp
2022-04-22 21:12:58.982048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# my solution (it's too long)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# my solution (it's too long, but it works)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution (I don't understand this solution yet)\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n# my solution (it's too long)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    }
  ],
  "created": 1650661973,
  "object": "edit"
}
2022-04-22 21:12:58.982320 fix syntax errors 3 ['\n# my solution (it\'s too long)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n\n# my solution (it\'s too long, but it works)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution (I don\'t understand this solution yet)\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n# my solution (it\'s too long)\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n']
2022-04-22 21:12:58.982630 using api key soukgp
2022-04-22 21:13:12.496850 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams (key: sorted characters, value: indices of anagrams)\nanagrams = {}\nfor i in range(n):\n    # sort characters in alphabetical order\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n\n# another solution\nimport sys\n\nn = int(sys.stdin.readline())\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams (key: sorted characters, value: indices of anagrams)\nanagrams = {}\nfor i in range(n):\n    # sort characters in alphabetical order\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nn = int(input())\ns = [input() for _ in range(n)]\n\nanagrams = {}\nfor i in range(n):\n    chars = list(s[i])\n    chars.sort()\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n"
    }
  ],
  "created": 1650661979,
  "object": "edit"
}
2022-04-22 21:13:12.497116 fix syntax errors 3 ['\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams (key: sorted characters, value: indices of anagrams)\nanagrams = {}\nfor i in range(n):\n    # sort characters in alphabetical order\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n\n# another solution\nimport sys\n\nn = int(sys.stdin.readline())\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams (key: sorted characters, value: indices of anagrams)\nanagrams = {}\nfor i in range(n):\n    # sort characters in alphabetical order\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n', '\n\nimport sys\n\nn = int(input())\ns = [input() for _ in range(n)]\n\nanagrams = {}\nfor i in range(n):\n    chars = list(s[i])\n    chars.sort()\n    key = "".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault("".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n']
2022-04-22 21:13:12.497169 size on output set 8
2022-04-22 21:13:12.497182 num operations 2
2022-04-22 21:13:12.497188 size on input set 1
2022-04-22 21:13:12.497335 using api key derek
2022-04-22 21:13:18.742299 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = []\n    for s in S:\n        S_sorted.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    from collections import Counter\n    C = Counter([''.join(sorted(s)) for s in S])\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = []\n    for s in S:\n        S_sorted.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650661992,
  "object": "edit"
}
2022-04-22 21:13:18.742611 fix spelling mistakes 3 ["\n\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = []\n    for s in S:\n        S_sorted.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    from collections import Counter\n    C = Counter([''.join(sorted(s)) for s in S])\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = []\n    for s in S:\n        S_sorted.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 21:13:18.742644 size on output set 3
2022-04-22 21:13:18.742651 size on input set 3
2022-04-22 21:13:18.742803 using api key sunu
2022-04-22 21:13:24.597203 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    from collections import Counter\n    C = Counter([''.join(sorted(s)) for s in S])\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = [''.join(sorted(s)) for s in S]\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "from collections import Counter\n\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = []\n    for s in S:\n        S_sorted.append(''.join(sorted(s)))\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650661998,
  "object": "edit"
}
2022-04-22 21:13:24.597490 fix syntax errors 3 ["\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    from collections import Counter\n    C = Counter([''.join(sorted(s)) for s in S])\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = [''.join(sorted(s)) for s in S]\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "from collections import Counter\n\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = []\n    for s in S:\n        S_sorted.append(''.join(sorted(s)))\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 21:13:24.597678 using api key kouti
2022-04-22 21:13:30.745947 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    from collections import Counter\n    C = Counter([''.join(sorted(s)) for s in S])  # Counter(''.join(sorted(s)) for s in S)\n    ans = 0\n    for c in C.values():\n        ans += c * (c - 1) // 2\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    print(S)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    from collections import Counter\n    C = Counter([''.join(sorted(s)) for s in S])\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650662004,
  "object": "edit"
}
2022-04-22 21:13:30.746168 fix syntax errors 3 ["\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    from collections import Counter\n    C = Counter([''.join(sorted(s)) for s in S])  # Counter(''.join(sorted(s)) for s in S)\n    ans = 0\n    for c in C.values():\n        ans += c * (c - 1) // 2\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    print(S)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    from collections import Counter\n    C = Counter([''.join(sorted(s)) for s in S])\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 21:13:30.746376 using api key sunu
2022-04-22 21:13:38.526679 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# My code here\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n    S_sorted = [''.join(sorted(s)) for s in S]\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "# coding: utf-8\n\n# My code here\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = []\n    for s in S:\n        S_sorted.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650662010,
  "object": "edit"
}
2022-04-22 21:13:38.526913 fix syntax errors 3 ["\n# My code here\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n    S_sorted = [''.join(sorted(s)) for s in S]\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "# coding: utf-8\n\n# My code here\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sorted = []\n    for s in S:\n        S_sorted.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sorted)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 21:13:38.526952 size on output set 8
