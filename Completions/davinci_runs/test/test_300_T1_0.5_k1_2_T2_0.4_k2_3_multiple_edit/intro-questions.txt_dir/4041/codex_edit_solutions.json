["\n\n# s = input()\n# t = input()\n\n# def get_lcs(s,t):\n#     # Create a DP matrix\n#     dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n\n#     # Populate the matrix.\n#     for i in range(1, len(t)+1):\n#         for j in range(1, len(s)+1):\n#             if t[i-1] == s[j-1]:\n#                 dp[i][j] = dp[i-1][j-1] + 1\n#             else:\n#                 dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n#     return dp[-1][-1]\n\n# print(len(s) - get_lcs(s,t))\n\ndef get_lcs(s, t):\n    # Create a DP matrix.\n    dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n\n    # Populate the matrix.\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n\n\ndef main():\n    s = input()\n    t = input()\n    print(len(s) - get_lcs(s, t))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ns = \"abc\"\nt = \"adc\"\n\ndef get_lcs(s, t):\n    # Create a DP matrix\n    dp = [[0 for _ in range(len(s)+1)] for _ in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s, t))\n", "\n\ninp = raw_input()\nsub = raw_input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest substring of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n", "#!/usr/bin/env python3\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix.\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n", "\n\n\ns = input()\nt = input()\n\n\ndef get_lcs(s, t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n\n    # Populate the matrix.\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n\n\nprint(len(s) - get_lcs(s, t))\n", "\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1.\n# Each element represents the length of the longest subsequence of sub in a substring of inp.\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)] \n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n", "\n\ns = input() # a string\nt = input() # a string\n\ndef get_lcs(s,t):\n    # Create a DP matrix, where dp[i][j] is the LCS of s[:i] and t[:j]\n    dp = [[0 for i in range(len(t)+1)] for j in range(len(s)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(s)+1):\n        for j in range(1, len(t)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n", "\n\ninp = input().strip()\nsub = input().strip()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest substring of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n", "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n", "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n", "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest substring of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n", "\ns = input()\nt = input()\n\n\ndef lcs(s, t):\n    dp = [[0 for _ in range(len(s) + 1)] for _ in range(len(t) + 1)]\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]\n\n\nprint(len(s) - lcs(s, t))\n", "\n\ns = input()  # a string\nt = input()  # a string\n\n\ndef get_lcs(s, t):\n    # Create a DP matrix, where dp[i][j] is the LCS of s[:i] and t[:j]\n    dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n\n    # Populate the matrix\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n\n\nprint(len(s) - get_lcs(s, t))\n", "\nprint(\"Hello World\")\n"]