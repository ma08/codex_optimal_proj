["\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nif a == 0:\n    print(0)\nelse:\n    print(min(a, b))\n", "\nimport re\nimport sys\nimport os\nimport subprocess\nimport urllib.request\nimport urllib.parse\nimport urllib.error\nimport http.client\nimport socket\nimport json\nimport time\nimport random\nimport string\nimport urllib.parse\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\nimport datetime\nimport time\nimport random\nimport string\nimport hashlib\nimport base64\nimport ssl\nimport requests\n", "\nprint(input().replace(\"2017\", \"2018\"))\n", "print(input().replace(\"2017\", \"2018\"))\n", "\n\nn, a, b = map(int, input().split()) \n\n# The pattern is repeated every (a + b) balls. \n# We can find our answer by finding the remainder of n % (a + b) \n# and counting the number of blue balls in that pattern. \nn = n % (a + b) \n\n# If we don't have enough balls to fill out a pattern, \n# we can simply count the number of blue balls we have. \nif n <= a: \n    print(n) \nelse: \n    # Otherwise, count the number of blue balls in the last pattern. \n    print(a) \n", "\nn, a, b = map(int, input().split())\n\n# The pattern is repeated every (a + b) balls.\n# We can find our answer by finding the remainder of n / (a + b) and counting the number of blue balls in that pattern.\nn = n % (a + b)\n\n# If we don't have enough balls to fill out a pattern, we can simply count the number of blue balls we have.\nif n <= a:\n    print(n)\nelse:\n    # Otherwise, count the number of blue balls in the last pattern\n    print(a)\n", "\n\nn, a, b = map(int, input().split()) \n\n# The pattern is repeated every (a + b) balls.\n# We can find our answer by finding the remainder of n % (a + b)\n# and counting the number of blue balls in that pattern.\nn = n % (a + b)\n\n# If we don't have enough balls to fill out a pattern,\n# we can simply count the number of blue balls we have.\nif n <= a:\n    print(n)\nelse:\n    # Otherwise, count the number of blue balls in the last pattern.\n    print(a)\n", "\nn, a, b = map(int, input().split())\n\n# The pattern is repeated every (a + b) balls.\n# We can find our answer by finding the remainder of n % (a + b)\n# and counting the number of blue balls in that pattern.\nn = n % (a + b)\n\n# If we don't have enough balls to fill out a pattern,\n# we can simply count the number of blue balls we have.\nif n <= a:\n    print(n)\nelse:\n    # Otherwise, count the number of blue balls in the last pattern.\n    print(a)\n", "n = int(input())\na = list(map(int,input().split()))\na.sort()\nprint(a[0])\n", "\nn,a,b = map(int,input().split())\n\nif a > b:\n    a,b = b,a\n\nif a == 0:\n    print(0)\nelse:\n    print(min(n,a)) \n", "\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nif a == 0:\n    print(0)\nelse:\n    print(min(a, b))\n", "\nn,a,b = map(int,input().split()) # a,b\u3092\u5165\u529b\n\nif a > b: # a\u3068b\u3092\u6bd4\u8f03\u3057\u3066a\u304c\u5927\u304d\u3051\u308c\u3070\u5165\u308c\u66ff\u3048\u308b\n    a,b = b,a \n\nif a == 0:\n    print(0)\nelse:\n    print(min(n,a))\n", "\n\na,b = map(int,input().split())\n\nif a > b:\n    a,b = b,a\n\nif a == 0:\n    print(0)\nelse:\n    print(min(a,b)-1)\n"]