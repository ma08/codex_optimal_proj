2022-04-17 19:58:20.645071 num operations 1
2022-04-17 19:58:20.645089 size on input set 1
2022-04-17 19:58:34.499137 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1.\n# Each element represents the length of the longest subsequence of the sub in a substring of inp.\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 1,
      "text": "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    }
  ],
  "created": 1650225500,
  "object": "edit"
}
2022-04-17 19:58:34.499479 fix syntax errors 2 ['\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1.\n# Each element represents the length of the longest subsequence of the sub in a substring of inp.\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n', '\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n']
2022-04-17 19:58:34.499519 size on output set 2
2022-04-17 19:58:34.499529 num operations 1
2022-04-17 19:58:34.499534 size on input set 1
2022-04-17 19:58:44.502648 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\n\nprint(len(s) - get_lcs(s,t))\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\nt = input()\n\ndef get_lcs(s, t):\n  # Create a DP matrix\n  dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n\n  # Populate the matrix\n  for i in range(1, len(t) + 1):\n    for j in range(1, len(s) + 1):\n      if t[i - 1] == s[j - 1]:\n        dp[i][j] = dp[i - 1][j - 1] + 1\n      else:\n        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n  return dp[-1][-1]\n\n\nprint(len(s) - get_lcs(s, t))\n"
    }
  ],
  "created": 1650225514,
  "object": "edit"
}
2022-04-17 19:58:44.502811 fix syntax errors 2 ['\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\n\nprint(len(s) - get_lcs(s,t))\n', '\ns = input()\nt = input()\n\ndef get_lcs(s, t):\n  # Create a DP matrix\n  dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n\n  # Populate the matrix\n  for i in range(1, len(t) + 1):\n    for j in range(1, len(s) + 1):\n      if t[i - 1] == s[j - 1]:\n        dp[i][j] = dp[i - 1][j - 1] + 1\n      else:\n        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n  return dp[-1][-1]\n\n\nprint(len(s) - get_lcs(s, t))\n']
2022-04-17 19:58:44.502839 size on output set 2
