["\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n", "\n\ndef paint_red(h, w, k):\n    ans = 0\n    for i in range(2 ** h):\n        h_ = bin(i)[2:].zfill(h)\n        for j in range(2 ** w):\n            w_ = bin(j)[2:].zfill(w)\n            if h_.count('1') + w_.count('1') == k:\n                ans += 1\n    return ans\n\nh, w, k = map(int, input().split())\n\nprint(paint_red(h, w, k))\n", "\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef main():\n    s = input()\n    t = input()\n    if s == t:\n        print('same')\n    elif s.lower() == t.lower():\n        print('case-insensitive')\n    else:\n        print('different')\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n", "\ndef paint_red(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n"]