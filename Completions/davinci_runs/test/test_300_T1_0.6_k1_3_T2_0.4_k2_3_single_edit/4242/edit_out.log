2022-04-18 05:50:10.565241 num operations 1
2022-04-18 05:50:10.565261 size on input set 1
2022-04-18 05:50:13.638370 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]  # noqa: E741\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n"
    }
  ],
  "created": 1650261010,
  "object": "edit"
}
2022-04-18 05:50:13.638568 fix syntax errors 3 ['\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]  # noqa: E741\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n', '\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n', '\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n']
2022-04-18 05:50:13.638595 size on output set 2
2022-04-18 05:50:13.638610 num operations 1
2022-04-18 05:50:13.638616 size on input set 1
2022-04-18 05:50:23.109008 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 1,
      "text": "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\na_prime = a\nb_prime = b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n"
    },
    {
      "index": 2,
      "text": "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k) + 1\n\n# a_prime = gcd(a, b) + 1\na_prime = a if a < b else b - 1\nb_prime = a if a > b else b - 1\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime - 1\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"
    }
  ],
  "created": 1650261013,
  "object": "edit"
}
2022-04-18 05:50:23.109232 fix syntax errors 3 ["\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n", "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\na_prime = a\nb_prime = b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n", "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k) + 1\n\n# a_prime = gcd(a, b) + 1\na_prime = a if a < b else b - 1\nb_prime = a if a > b else b - 1\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime - 1\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n"]
2022-04-18 05:50:23.109262 size on output set 3
2022-04-18 05:50:23.109273 num operations 1
2022-04-18 05:50:23.109279 size on input set 1
2022-04-18 05:50:26.356287 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    a, b, k = map(int, input().split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a, b)\n    for i in range(k-1):\n        g = gcd(g, min(a, b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650261023,
  "object": "edit"
}
2022-04-18 05:50:26.356460 fix syntax errors 3 ['\n\nfrom fractions import gcd\n\ndef main():\n    a, b, k = map(int, input().split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a, b)\n    for i in range(k-1):\n        g = gcd(g, min(a, b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-18 05:50:26.356487 size on output set 3
