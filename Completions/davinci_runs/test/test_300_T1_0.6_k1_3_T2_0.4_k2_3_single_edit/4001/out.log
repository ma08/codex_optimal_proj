2022-04-18 01:31:51.608704 """
Recently you have received two positive integer numbers $x$ and $y$. You forgot them, but you remembered a shuffled list containing all divisors of $x$ (including $1$ and $x$) and all divisors of $y$ (including $1$ and $y$). If $d$ is a divisor of both numbers $x$ and $y$ at the same time, there are two occurrences of $d$ in the list.

For example, if $x=4$ and $y=6$ then the given list can be any permutation of the list $[1, 2, 4, 1, 2, 3, 6]$. Some of the possible lists are: $[1, 1, 2, 4, 6, 3, 2]$, $[4, 6, 1, 1, 2, 3, 2]$ or $[1, 6, 3, 2, 4, 1, 2]$.

Your problem is to restore suitable positive integer numbers $x$ and $y$ that would yield the same list of divisors (possibly in different order).

It is guaranteed that the answer exists, i.e. the given list of divisors corresponds to some positive integers $x$ and $y$.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 128$) — the number of divisors of $x$ and $y$.

The second line of the input contains $n$ integers $d_1, d_2, \dots, d_n$ ($1 \le d_i \le 10^4$), where $d_i$ is either divisor of $x$ or divisor of $y$. If a number is divisor of both numbers $x$ and $y$ then there are two copies of this number in the list.


-----Output-----

Print two positive integer numbers $x$ and $y$ — such numbers that merged list of their divisors is the permutation of the given list of integers. It is guaranteed that the answer exists.


-----Example-----
Input
10
10 2 8 1 2 4 1 20 4 5

Output
20 8
"""
2022-04-18 01:31:51.608733 --------------------------
2022-04-18 01:32:40.925488 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\ndivisors = [int(x) for x in input().split()]\n\n# Find all the divisors of the number that is the product of all the divisors.\n# Those divisors will be the divisors for either x or y.\nproduct = 1\nfor d in divisors:\n    product *= d\n\n# Find the divisors for the number that is the product of all the divisors.\n# We will use the divisors as the possible divisors for x and y.\npossible_divisors = []\nfor i in range(1, int(product ** 0.5) + 1):\n    if product % i == 0:\n        possible_divisors.append(i)\n        possible_divisors.append(int(product / i))\npossible_divisors = sorted(possible_divisors)\n\n# We need to find the divisors for x and y.\n# We will create a set of the possible divisors for x and y and then\n# remove the divisors from the list when we find them.\n#\n# We will assume that the first divisor in the list is the largest divisor.\n# We will just work our way backwards from the largest divisor and try\n# to find a match.\npossible_divisors = set(possible_divisors)\ndivisors_for_x = [divisors[0]]\npossible_divisors.remove(divisors[0])\n\nfor d in divisors[1:]:\n\n    # We will assume that the divisor is in the list of x.\n    # We will try to find a match. If we find a match, then we\n    # will remove the divisor from the list of possible divisors\n    # for y and mark that divisor as a divisor for x.\n    # If we don't find a match, then we will remove the divisor\n    # from the list of possible divisors for x and mark that\n    # divisor as a divisor for y.\n    if d in possible_divisors:\n        possible_divisors.remove(d)\n        divisors_for_x.append(d)\n    else:\n        possible_divisors.remove(product // d)\n\n# The remaining possible divisors are the divisors for y.\ndivisors_for_y = [d for d in possible_divisors]\n\n# Calculate the product of the divisors for x and y.\nx = 1\ny = 1\nfor d in divisors_for_x:\n    x *= d\nfor d in divisors_for_y:\n    y *= d\n\nprint(x, y)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_diff(s1, s2):\n    return list(set(s1) - set(s2))\n\ndef find_nums(n):\n    num1 = 1\n    num2 = 1\n    nums = set(input().split())\n    for num in nums:\n        if num1 > num2:\n            num2 *= int(num)\n        else:\n            num1 *= int(num)\n    return num1, num2\n\ndef main():\n    n = int(input())\n    num1, num2 = find_nums(n)\n    print(num1, num2)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nn = int(input())\ndivisors = list(map(int, input().split()))\n\nx = 1\ny = 1\n\nwhile divisors:\n    d = divisors.pop(0)\n    if divisors and divisors[0] == d:\n        divisors.pop(0)\n        x *= d\n    else:\n        y *= d\n\nprint(x, y)"
    }
  ],
  "created": 1650245512,
  "id": "cmpl-4yAX2Sjt4TvlTXP5eFRPL82azwXpS",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 01:32:40.925715 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\ndivisors = [int(x) for x in input().split()]\n\n# Find all the divisors of the number that is the product of all the divisors.\n# Those divisors will be the divisors for either x or y.\nproduct = 1\nfor d in divisors:\n    product *= d\n\n# Find the divisors for the number that is the product of all the divisors.\n# We will use the divisors as the possible divisors for x and y.\npossible_divisors = []\nfor i in range(1, int(product ** 0.5) + 1):\n    if product % i == 0:\n        possible_divisors.append(i)\n        possible_divisors.append(int(product / i))\npossible_divisors = sorted(possible_divisors)\n\n# We need to find the divisors for x and y.\n# We will create a set of the possible divisors for x and y and then\n# remove the divisors from the list when we find them.\n#\n# We will assume that the first divisor in the list is the largest divisor.\n# We will just work our way backwards from the largest divisor and try\n# to find a match.\npossible_divisors = set(possible_divisors)\ndivisors_for_x = [divisors[0]]\npossible_divisors.remove(divisors[0])\n\nfor d in divisors[1:]:\n\n    # We will assume that the divisor is in the list of x.\n    # We will try to find a match. If we find a match, then we\n    # will remove the divisor from the list of possible divisors\n    # for y and mark that divisor as a divisor for x.\n    # If we don't find a match, then we will remove the divisor\n    # from the list of possible divisors for x and mark that\n    # divisor as a divisor for y.\n    if d in possible_divisors:\n        possible_divisors.remove(d)\n        divisors_for_x.append(d)\n    else:\n        possible_divisors.remove(product // d)\n\n# The remaining possible divisors are the divisors for y.\ndivisors_for_y = [d for d in possible_divisors]\n\n# Calculate the product of the divisors for x and y.\nx = 1\ny = 1\nfor d in divisors_for_x:\n    x *= d\nfor d in divisors_for_y:\n    y *= d\n\nprint(x, y)"
}
2022-04-18 01:32:40.925760 REASON stop
2022-04-18 01:32:40.981522 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_diff(s1, s2):\n    return list(set(s1) - set(s2))\n\ndef find_nums(n):\n    num1 = 1\n    num2 = 1\n    nums = set(input().split())\n    for num in nums:\n        if num1 > num2:\n            num2 *= int(num)\n        else:\n            num1 *= int(num)\n    return num1, num2\n\ndef main():\n    n = int(input())\n    num1, num2 = find_nums(n)\n    print(num1, num2)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 01:32:40.981663 REASON stop
2022-04-18 01:32:40.982152 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nn = int(input())\ndivisors = list(map(int, input().split()))\n\nx = 1\ny = 1\n\nwhile divisors:\n    d = divisors.pop(0)\n    if divisors and divisors[0] == d:\n        divisors.pop(0)\n        x *= d\n    else:\n        y *= d\n\nprint(x, y)"
}
2022-04-18 01:32:40.982235 REASON stop
