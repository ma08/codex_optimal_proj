["\ndef get_max_number(n, a, f):\n    # get the max number\n    max_num = 0\n    for i in range(n):\n        max_num = max_num * 10 + f[int(a[i]) - 1]\n    return max_num\n\ndef get_max_num_after_operation(n, a, f):\n    max_num = get_max_number(n, a, f)\n    for i in range(n):\n        for j in range(i + 1, n):\n            # replace a[i] to a[j]\n            a[i], a[j] = a[j], a[i]\n            temp_num = get_max_number(n, a, f)\n            max_num = max(temp_num, max_num)\n            # roll back\n            a[i], a[j] = a[j], a[i]\n    return max_num\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(input())\n    f = list(map(int, input().split()))\n    print(get_max_num_after_operation(n, a, f))\n", "\nn = int(input())\na = input()\nf = list(map(int, input().split()))\n\n# build a dict of f(x)\nf_dict = {}\nfor i in range(1, 10):\n    f_dict[i] = f[i-1]\n\n# replace each digit with f(x)\n# e.g. a = [3,3]  f_dict = {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1}\nfor i in range(len(a)):\n    a[i] = f_dict[a[i]]\n\n# convert a to a string and print\nprint(''.join(map(str, a)))\n", "\nn = int(input())\na = input()\nf = list(map(int, input().split()))\n\n# convert a to a list of ints\na = [int(x) for x in a]\n\n# build a dict of f(x)\nf_dict = {}\nfor i in range(1, 10):\n    f_dict[i] = f[i-1]\n\n# replace each digit with f(x)\n# e.g. a = [3,3]  f_dict = {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1}\nfor i in range(len(a)):\n    a[i] = f_dict[a[i]]\n\n# convert a to a string and print\nprint(''.join(map(str, a)))\n", "\n\ndef solve():\n    n = int(input())\n    a = input().strip()\n    f = list(map(int, input().split()))\n\n    # print(n, a, f)\n\n    # Transform a into an array of ints\n    a = list(map(int, list(a)))\n    # print(a)\n\n    # Create an empty array to store the result\n    b = [0] * n\n\n    # Iterate through the array a\n    for i in range(n):\n        # Transform each element of a using the mapping f\n        b[i] = f[a[i] - 1]\n\n    # print(b)\n\n    # Create an empty array to store the indices of the maximum elements of b\n    max_indices = []\n\n    # Iterate through the array b\n    for i in range(n):\n        # If the element of b at index i is greater than the elements of b at previous indices,\n        # then store the index i\n        if i == 0 or b[i] > b[max_indices[0]]:\n            max_indices = [i]\n        # If the element of b at index i is equal to the elements of b at previous indices,\n        # then also store the index i\n        elif b[i] == b[max_indices[0]]:\n            max_indices.append(i)\n\n    # print(max_indices)\n\n    # If there is only one index of the maximum elements of b, then no change is required\n    if len(max_indices) == 1:\n        print(''.join(map(str, b)))\n    # If there are multiple indices of the maximum elements of b, then we need to choose\n    # the segment that contains the maximum elements of b, and transform that segment\n    # using the mapping f\n    else:\n        # Find the minimum index of the maximum elements of b\n        min_index = max_indices[0]\n        for i in range(1, len(max_indices)):\n            if max_indices[i] < min_index:\n                min_index = max_indices[i]\n\n        # print(min_index)\n\n        # Find the maximum index of the maximum elements of b\n        max_index = max_indices[0]\n        for i in range(1, len(max_indices)):\n            if max_indices[i] > max_index:\n                max_index = max_indices[i]\n\n        # print(max_index)\n\n        # Transform the segment of b that contains the maximum elements of b using the mapping f\n        for i in range(min_index, max_index + 1):\n            b[i] = f[b[i] - 1]\n\n        print(''.join(map(str, b)))\n\n\nif __name__ == \"__main__\":\n    solve()\n", "\n\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    print(n, a, f)\n\n    # Transform a into an array of ints\n    a = list(map(int, list(a)))\n    print(a)\n\n    # Create an empty array to store the result\n    b = [0] * n\n\n    # Iterate through the array a\n    for i in range(n):\n        # Transform each element of a using the mapping f\n        b[i] = f[a[i] - 1]\n\n    print(b)\n\n    # Create an empty array to store the indices of the maximum elements of b\n    max_indices = []\n\n    # Iterate through the array b\n    for i in range(n):\n        # If the element of b at index i is greater than the elements of b at previous indices,\n        # then store the index i\n        if i == 0 or b[i] > b[max_indices[0]]:\n            max_indices = [i]\n        # If the element of b at index i is equal to the elements of b at previous indices,\n        # then also store the index i\n        elif b[i] == b[max_indices[0]]:\n            max_indices.append(i)\n\n    print(max_indices)\n\n    # If there is only one index of the maximum elements of b, then no change is required\n    if len(max_indices) == 1:\n        print(''.join(map(str, b)))\n    # If there are multiple indices of the maximum elements of b, then we need to choose\n    # the segment that contains the maximum elements of b, and transform that segment\n    # using the mapping f\n    else:\n        # Find the minimum index of the maximum elements of b\n        min_index = max_indices[0]\n        for i in range(1, len(max_indices)):\n            if max_indices[i] < min_index:\n                min_index = max_indices[i]\n\n        print(min_index)\n\n        # Find the maximum index of the maximum elements of b\n        max_index = max_indices[0]\n        for i in range(1, len(max_indices)):\n            if max_indices[i] > max_index:\n                max_index = max_indices[i]\n\n        print(max_index)\n\n        # Transform the segment of b that contains the maximum elements of b using the mapping f\n        for i in range(min_index, max_index + 1):\n            b[i] = f[b[i] - 1]\n\n        print(''.join(map(str, b)))\n\n\nif __name__ == \"__main__\":\n    solve()\n", "import sys\n\ndef get_max_number(n, a, f):\n    # get the max number\n    max_num = 0\n    for i in range(n):\n        max_num = max_num * 10 + f[int(a[i]) - 1]\n    return max_num\n\ndef get_max_num_after_operation(n, a, f):\n    max_num = get_max_number(n, a, f)\n    for i in range(n):\n        for j in range(i + 1, n):\n            # replace a[i] to a[j]\n            a[i], a[j] = a[j], a[i]\n            temp_num = get_max_number(n, a, f)\n            max_num = max(temp_num, max_num)\n            # roll back\n            a[i], a[j] = a[j], a[i]\n    return max_num\n\nif __name__ == '__main__':\n    with open(sys.argv[1], 'r') as f:\n        n = int(f.readline())\n        a = f.readline()\n        f = list(map(int, f.readline().split()))\n        print(get_max_num_after_operation(n, a, f))\n"]