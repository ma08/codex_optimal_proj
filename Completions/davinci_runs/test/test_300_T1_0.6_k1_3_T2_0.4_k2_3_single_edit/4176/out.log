2022-04-18 03:08:59.334263 """
Takahashi is organizing a party.
At the party, each guest will receive one or more snack pieces.
Takahashi predicts that the number of guests at this party will be A or B.
Find the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.
We assume that a piece cannot be divided and distributed to multiple guests.

-----Constraints-----
 - 1 \leq A, B \leq 10^5
 - A \neq B
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
A B

-----Output-----
Print the minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.

-----Sample Input-----
2 3

-----Sample Output-----
6

When we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.
"""
2022-04-18 03:08:59.334281 --------------------------
2022-04-18 03:09:24.497650 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650251339,
  "id": "cmpl-4yC31dVaKYO4ezUwGnauf9lwcE52T",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 03:09:24.497886 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    a, b = [int(i) for i in input().split()]\n    print(lcm(a, b))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 03:09:24.497944 REASON stop
2022-04-18 03:09:24.517144 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# ==========\n# Solution 1\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)\n\n# ==========\n# Solution 2\n# ==========\n\na, b = list(map(int, input().split()))\n\nif a > b:\n    a, b = b, a\n\nprint(a)"
}
2022-04-18 03:09:24.517231 REASON stop
2022-04-18 03:09:24.517748 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\"\"\"\n-----Notes-----\n\nWe can say that the LCM of A and B is the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\nLCM(A, B) = A \u00d7 B \u00f7 GCD(A, B)\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\n\ndef main():\n    # read input\n    A, B = map(int, sys.stdin.readline().split())\n\n    # calculate LCM(A, B)\n    LCM = reduce(mul, [A, B], 1) // gcd(A, B)\n\n    # print result\n    print(LCM)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 03:09:24.517802 REASON stop
