2022-04-18 05:45:16.097682 num operations 1
2022-04-18 05:45:16.097704 size on input set 1
2022-04-18 05:45:21.072883 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef search(A, d, visited):\n    if sum(visited) == len(visited) - 1:\n        return 1\n    res = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            res += search(A, i, visited)\n            visited[i] = 0\n    return res\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef search(A, d, visited, N):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(N):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited, N)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited, N))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef search(A, d, visited):\n    if visited.count(1) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:  # \u5230\u9054\u53ef\u80fd\u304b\u3064\u672a\u8a2a\u554f\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650260716,
  "object": "edit"
}
2022-04-18 05:45:21.073079 fix syntax errors 3 ["\ndef search(A, d, visited):\n    if sum(visited) == len(visited) - 1:\n        return 1\n    res = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            res += search(A, i, visited)\n            visited[i] = 0\n    return res\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef search(A, d, visited, N):\n    if sum(visited) == len(visited):\n        return 1\n    ret = 0\n    for i in range(N):\n        if visited[i] == 0 and A[d][i] == 1:\n            visited[i] = 1\n            ret += search(A, i, visited, N)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited, N))\n\nif __name__ == '__main__':\n    main()\n", "\ndef search(A, d, visited):\n    if visited.count(1) == len(visited):\n        return 1\n    ret = 0\n    for i in range(len(A)):\n        if visited[i] == 0 and A[d][i] == 1:  # 到達可能かつ未訪問\n            visited[i] = 1\n            ret += search(A, i, visited)\n            visited[i] = 0\n    return ret\n\ndef main():\n    N, M = map(int, input().split())\n    A = [[0]*N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        A[a-1][b-1] = 1\n        A[b-1][a-1] = 1\n    visited = [0] * N\n    visited[0] = 1\n    print(search(A, 0, visited))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 05:45:21.073121 size on output set 3
2022-04-18 05:45:21.073131 num operations 1
2022-04-18 05:45:21.073136 size on input set 1
2022-04-18 05:45:29.321961 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n"
    },
    {
      "index": 1,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N-1:\n        return 1\n\n    ret = 0 \n            print(next_vertex)\n    for next_vertex in graph[vertex]:\n            print(ret)\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\nprint(edge)\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n"
    },
    {
      "index": 2,
      "text": "\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int, input().split())))\n\n\ndef dfs(graph, vertex, visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph, next_vertex, visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N + 1)]\nfor a, b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n"
    }
  ],
  "created": 1650260721,
  "object": "edit"
}
2022-04-18 05:45:29.322154 fix syntax errors 3 ['\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\ndef dfs(graph,vertex,visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n', 'import sys\nsys.setrecursionlimit(10**6)\n\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int,input().split())))\n\ndef dfs(graph,vertex,visited):\n    if len(visited) == N-1:\n        return 1\n\n    ret = 0 \n            print(next_vertex)\n    for next_vertex in graph[vertex]:\n            print(ret)\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph,next_vertex,visited)\n            visited.remove(next_vertex)\n    return ret\n\nprint(edge)\ngraph = [[] for _ in range(N+1)]\nfor a,b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n', '\nN,M = map(int,input().split())\n\nedge = []\nfor i in range(M):\n    edge.append(list(map(int, input().split())))\n\n\ndef dfs(graph, vertex, visited):\n    if len(visited) == N:\n        return 1\n\n    ret = 0\n    for next_vertex in graph[vertex]:\n        if next_vertex not in visited:\n            visited.add(next_vertex)\n            ret += dfs(graph, next_vertex, visited)\n            visited.remove(next_vertex)\n    return ret\n\n\ngraph = [[] for _ in range(N + 1)]\nfor a, b in edge:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = {1}\nprint(dfs(graph,1,visited))\n']
2022-04-18 05:45:29.322271 size on output set 3
