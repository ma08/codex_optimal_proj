["MAXN = 200001\n\ndef less_sum(s, m):\n    n = len(s)\n    a = 0\n    b = 0\n    res = 0\n    last = 0\n\n    count = [0 for i in range(-MAXN, MAXN+1)]\n\n    count[0] = 1\n    x = 0\n    last = 1\n\n    for i in range(n):\n        if s[i] > m:\n            b += 1\n        else:\n            a += 1\n        x = a-b\n        #print(x)\n        #print(count[-2], count[-1], count[0], count[1], count[2])\n        if s[i] > m:\n            last -= count[x+1]\n        else:\n            last += count[x]\n        #print(x, last)\n        res += last\n        count[x] += 1\n        last += 1\n    \n    #print(res)\n\n    return res\n\nn, m = map(int, input().split(' '))\ns = list(map(int, input().split(' ')))[0:n]\n\n#print(m, s)\n\nprint(less_sum(s, m) - less_sum(s, m-1))", "def main():\n    n, m = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    res = []\n    for m in m, m - 1:\n        r = c = 0\n        cnt = [0] * 400002\n        cnt[0] = last = 1\n        for a in l:\n            if a > m:\n                c -= 1\n                last -= cnt[c + 1]\n            else:\n                c += 1\n                last += cnt[c]\n            r += last\n            cnt[c] += 1\n            last += 1\n        res.append(r)\n    print(res[0] - res[1])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "L1=list(map(int, input().split()))\nnumList=list(map(int, input().split()))\nlength=L1[0]\nm=L1[1]\ndef greaterCount(numList,m):\n    countDic={0:1}\n    sum=0\n    total=0\n    rem=0\n    for number in numList:\n        if number>=m:\n            sum+=1\n            rem+=countDic[sum-1]\n            total+=rem\n        else:\n            sum-=1\n            if sum in countDic:\n                rem-=countDic[sum]\n            total+=rem\n\n        if sum in countDic:\n            countDic[sum] += 1\n        else:\n            countDic[sum] = 1\n\n    #print(\"m=\", m, \"number=\", number, \"sum=\", sum, \"total=\", total, \"rem=\", rem, \"countDic=\", countDic)\n    return total\nprint(greaterCount(numList,m)-greaterCount(numList,m+1))", "def Yeee (x, v, n) :\n    re = 0\n    pre = 0\n    sum = 1\n    cnt = [0] * n + [1] + [0] * n\n    for i in v :\n        if(i < x) :\n            pre += 1\n            sum += cnt[pre + n]\n        else :\n            sum -= cnt[pre + n]\n            pre -= 1\n        cnt[pre + n] += 1\n        re += sum\n    return re\nn, x = list(map(int, input().split()))\nv = [int(i) for i in input().split()]\nprint(Yeee(x + 1, v, n) - Yeee(x, v, n))\n", "def f(x, v, n) :\n    a, p, s = 0, 0, 1\n    c = [0] * n + [1] + [0] * n\n    for i in v :\n        if(i < x) :\n            p += 1\n            s += c[p + n]\n        else :\n            s -= c[p + n]\n            p -= 1\n        c[p + n] += 1\n        a += s\n    return a\nn, x = list(map(int, input().split()))\nv = [int(i) for i in input().split()]\nprint(f(x + 1, v, n) - f(x, v, n))\n", "def f(x, v, n) :\n    a, p, s = 0, 0, 1\n    c = [0] * n + [1] + [0] * n\n    for i in v :\n        if(i < x) :\n            p += 1\n            s += c[p + n]\n        else :\n            s -= c[p + n]\n            p -= 1\n        c[p + n] += 1\n        a += s\n    return a\nn, x = list(map(int, input().split()))\nv = [int(i) for i in input().split()]\nprint(f(x + 1, v, n) - f(x, v, n))\n", "def grCount(m, n, a):\n    s = [0]*(2*n + 1)\n    sx = n\n    result = 0\n    s[sx] = 1\n    add = 0\n    for i in range(n):\n        if a[i] < m:\n            sx -= 1\n            add -= s[sx]\n        else:\n            add += s[sx]\n            sx += 1\n        result += add\n        s[sx] += 1\n    return result\n\nn, m = map(int,input().split())\na = list(map(int,input().split()))\nprint(grCount(m, n, a) - grCount(m + 1, n, a))", "def ask(x):\n    s={}\n    s[0]=1\n    sum,cnt,res=0,0,0\n    for i in range(n):\n        if(a[i]<x):\n            sum-=1\n            cnt-=s.get(sum,0)\n        else:\n            cnt+=s.get(sum,0)\n            sum+=1\n        s[sum]=s.get(sum,0)+1\n        res+=cnt\n    return res\n\nn,m=list(map(int,input().split()))\na=list(map(int,input().split()))\nprint(ask(m)-ask(m+1))\n\n\n\n\n\n\n\n\n\n\n", "def cv(r, n, d):\n    s = [0]*(2*n + 1)\n    q = n\n    ans = 0\n    s[q] = 1\n    z = 0\n    for i in range(n):\n        if d[i] < r:\n            q -= 1\n            z -= s[q]\n        else:\n            z += s[q]\n            q += 1\n        ans += z\n        s[q] += 1\n    return ans\n\nn, r = map(int,input().split())\nd = list(map(int,input().split()))\nprint(cv(r, n, d) - cv(r + 1, n, d))", "import math\nimport sys\nfrom collections import defaultdict\n\n# input = sys.stdin.readline\nrt = lambda: list(map(int, input().split()))\nri = lambda: int(input())\nrl = lambda: list(map(int, input().split()))\n\n\ndef main():\n    n, m = rt()\n    a = rl()\n\n    def greaterCount(m):\n        sums = defaultdict(int)\n        s = n\n        sums[s] = 1\n        res = 0\n        add = 0\n        for i in range(n):\n            if a[i] < m:\n                s -= 1\n                add -= sums[s]\n            else:\n                add += sums[s]\n                s += 1\n            res += add\n            sums[s] += 1\n        return res\n\n    print(greaterCount(m) - greaterCount(m+1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m = map(int,input().split())\na = [int(x) for x in input().split()]\n\ndef gC(m,a):\n    s = [0 for x in range(2*n + 1)]\n    sum = n\n    res = 0\n    s[sum] = 1\n    ad = 0\n    for i in range(n):\n        if a[i] < m:\n            sum -=1\n            ad -=s[sum]\n        else:\n            ad +=s[sum]\n            sum +=1\n        res +=ad\n        s[sum] +=1\n    return res\n\n\nprint(gC(m,a) - gC(m + 1,a))", "class BinaryIndexedTree:\n  def __init__(self, n):\n    self.bit = [0] * n\n\n  def add(self, i, x):\n    i += 1\n    while i <= len(self.bit):\n      self.bit[i-1] += x\n      i += i & -i\n\n  def sum_sub(self, i):\n    a = 0\n    i += 1\n    while i:\n      a += self.bit[i-1]\n      i -= i & -i\n    return a\n\n  def sum(self, i, j):\n    a = 0\n    if j != 0:\n      a += self.sum_sub(j-1)\n    if i != 0:\n      a -= self.sum_sub(i-1)\n    return a\n\ndef f(m):\n  ans=0\n  bit=BinaryIndexedTree(2*n+7)\n  f=0\n  for i in range(n):\n    bit.add(n+f,1)\n    if a[i]>m:f-=1\n    else:f+=1\n    ans+=bit.sum_sub(n+f)\n  return ans\nn,m=map(int,input().split())\na=list(map(int,input().split()))\nprint(f(m)-f(m-1))", "class BinaryIndexedTree:\n  def __init__(self, n):\n    self.bit = [0] * n\n \n  def add(self, i, x):\n    i += 1\n    while i <= len(self.bit):\n      self.bit[i-1] += x\n      i += i & -i\n \n  def sum_sub(self, i):\n    a = 0\n    i += 1\n    while i:\n      a += self.bit[i-1]\n      i -= i & -i\n    return a\n \n  def sum(self, i, j):\n    a = 0\n    if j != 0:\n      a += self.sum_sub(j-1)\n    if i != 0:\n      a -= self.sum_sub(i-1)\n    return a\n \ndef f(m):\n  ans=0\n  bit=BinaryIndexedTree(2*n+7)\n  f=0\n  for i in range(n):\n    bit.add(n+f,1)\n    if a[i]>m:f-=1\n    else:f+=1\n    ans+=bit.sum_sub(n+f)\n  return ans\nn,m=map(int,input().split())\na=list(map(int,input().split()))\nprint(f(m)-f(m-1))", "class BIT():\n    def __init__(self,n):\n        self.BIT=[0]*(n+1)\n        self.num=n\n\n    def query(self,idx):\n        res_sum = 0\n        while idx > 0:\n            res_sum += self.BIT[idx]\n            idx -= idx&(-idx)\n        return res_sum\n\n    #Ai += x O(logN)\n    def update(self,idx,x):\n        while idx <= self.num:\n            self.BIT[idx] += x\n            idx += idx&(-idx)\n        return\n\nn,m = map(int,input().split())\na = list(map(int,input().split()))\n\ndef solve(x):\n    tmp = [0 for i in range(n)]\n    for i in range(n):\n        if a[i]>x:\n            tmp[i] = -1\n        else:\n            tmp[i] = 1\n        tmp[i] += tmp[i-1]\n\n    tmp = [0] + tmp\n    val = list(set([tmp[j] for j in range(n+1)]))\n    val.sort()\n    comp = {i:e+1 for e,i in enumerate(val)}\n\n    bit = BIT(n+1)\n    res = 0\n    for i in range(n+1):\n        res += bit.query(comp[tmp[i]])\n        bit.update(comp[tmp[i]],1)\n    return res\n\nprint(solve(m) - solve(m-1))"]