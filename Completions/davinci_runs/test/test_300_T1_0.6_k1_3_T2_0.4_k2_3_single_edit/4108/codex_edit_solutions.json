["\ns = input()\nt = input()\n\nsDict = {}\ntDict = {}\n\nfor i in range(len(s)):\n    if s[i] not in sDict:\n        sDict[s[i]] = 1\n    else:\n        sDict[s[i]] += 1\n\n    if t[i] not in tDict:\n        tDict[t[i]] = 1\n    else:\n        tDict[t[i]] += 1\n\nif sDict == tDict:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "\n# s = input()\n# t = input()\n#\n# s = list(s)\n# t = list(t)\n#\n# sDict = {}\n# tDict = {}\n#\n# for i in range(len(s)):\n#     if s[i] not in sDict:\n#         sDict[s[i]] = 1\n#     else:\n#         sDict[s[i]] += 1\n#\n#     if t[i] not in tDict:\n#         tDict[t[i]] = 1\n#     else:\n#         tDict[t[i]] += 1\n#\n# if sDict == tDict:\n#     print(\"Yes\")\n# else:\n#     print(\"No\")\n\ns = input()\nt = input()\n\nsDict = {}\ntDict = {}\n\nfor i in range(len(s)):\n    if s[i] not in sDict:\n        sDict[s[i]] = 1\n    else:\n        sDict[s[i]] += 1\n\n    if t[i] not in tDict:\n        tDict[t[i]] = 1\n    else:\n        tDict[t[i]] += 1\n\nif sDict == tDict:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "\ndef can_make_equal(S, T):\n    if len(S) != len(T):\n        return False\n    if sorted(S) != sorted(T):\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    S = input()\n    T = input()\n    print(\"Yes\" if can_make_equal(S, T) else \"No\")\n", "\n\nfrom collections import Counter\n\ndef can_make_palindrome(S):\n    count = Counter(S)\n    odd_count = 0\n    for v in count.values():\n        if v % 2 == 1:\n            odd_count += 1\n    return odd_count <= 1\n\nS = input()\nprint(\"Yes\" if can_make_palindrome(S) else \"No\")\n", "\n\ns = input()\nt = input()\n\ns = list(s)\nt = list(t)\n\nsDict = {}\ntDict = {}\n\nfor i in range(len(s)):\n    if s[i] not in sDict:\n        sDict[s[i]] = 1\n    else:\n        sDict[s[i]] += 1\n\n    if t[i] not in tDict:\n        tDict[t[i]] = 1\n    else:\n        tDict[t[i]] += 1\n\nif sDict == tDict:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "\ndef can_make_equal(S, T):\n    if len(S) != len(T):\n        return False\n    if sorted(S) != sorted(T):  # sorted(S) == sorted(T)\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    S = input()\n    T = input()\n    print(\"Yes\" if can_make_equal(S, T) else \"No\")\n"]