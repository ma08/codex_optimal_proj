["\n\ndef findPairs(arr,n,m):\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if m == arr[(i+j)//2]:\n                count += 1\n    return count\n\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprint(findPairs(arr,n,m))", "\n\ndef solve(n, m, p):\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if p[j - 1] == m:\n                dp[j] += 1\n\n    return sum(dp)\n\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n\n    print(solve(n, m, p))", "\n\ndef build_sorted_list(n):\n    sorted_list = [None] * (n + 2)\n    for i in range(1, n + 1):\n        sorted_list[i] = i\n    return sorted_list\n\ndef count_pairs(p):\n    n = len(p)\n    sorted_list = build_sorted_list(n)\n    sorted_list[0] = 0\n    sorted_list[n + 1] = n + 1\n    same_elements_count = [0] * (n + 2)\n    same_elements_count[0] = 1\n    same_elements_count[n + 1] = 1\n    pairs = 0\n\n    for i in range(n):\n        current_element = p[i]\n        sorted_list_position = sorted_list[current_element]\n        pairs += (i + 1 - same_elements_count[sorted_list_position - 1]) * same_elements_count[sorted_list_position + 1]\n        sorted_list[sorted_list_position] = sorted_list_position - same_elements_count[sorted_list_position - 1]\n\n        same_elements_count[sorted_list_position - 1] += 1\n        same_elements_count[sorted_list_position + 1] -= 1\n\n    return pairs\n\ndef main():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(count_pairs(p))\n\nif __name__ == '__main__':\n    main()"]