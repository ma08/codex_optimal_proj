2022-04-18 06:02:49.249413 num operations 1
2022-04-18 06:02:49.249433 size on input set 1
2022-04-18 06:02:51.659085 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    },
    {
      "index": 1,
      "text": "\n#\n#-----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    },
    {
      "index": 2,
      "text": "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"
    }
  ],
  "created": 1650261769,
  "object": "edit"
}
2022-04-18 06:02:51.659292 fix syntax errors 3 ["\n\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n#\n#-----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n", "\n\n# -----CODE-----\n# Read in STDIN\nn, q = map(int, input().split())\ns = input()\n\n# Initialize variables\nac_count = 0\n\n# Go through string, counting how many pairs of A and C in the string\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_count += 1\n\n# Initialize running count of AC pairs\nrunning_ac_count = ac_count\n\n# Go through queries\nfor i in range(q):\n    l, r = map(int, input().split())\n\n    # Check if we need to remove any AC pairs from left side\n    if s[l-2] == 'A' and s[l-1] == 'C':\n        running_ac_count -= 1\n    # Check if we need to add any AC pairs from right side\n    if s[r-1] == 'A' and s[r] == 'C':\n        running_ac_count += 1\n\n    print(running_ac_count)\n"]
2022-04-18 06:02:51.659361 size on output set 3
2022-04-18 06:02:51.659375 num operations 1
2022-04-18 06:02:51.659381 size on input set 1
2022-04-18 06:03:30.183505 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# https://atcoder.jp/contests/abc095/tasks/abc095_b\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    },
    {
      "index": 1,
      "text": "import math\nimport numpy as np\nimport collections\nfrom collections import defaultdict\nimport heapq\nimport bisect\nimport sys\nimport copy\nimport itertools\nimport math\nimport string\nimport queue\nimport re\nimport numpy as np\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nmod = 10 ** 9 + 7\neps = 10 ** -7\npi = 3.1415926535897932\n\ndef inp(): return int(sys.stdin.readline())\n \ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n\n    l_r_list = []\n    for i in range(q):\n        l_r = list(map(int, input().split()))\n        l_r_list.append(l_r)\n\n    ac_counts = 0\n    ac_count_list = []\n\n    for i in range(n - 1):\n        if s[i] == \"A\" and s[i + 1] == \"C\":\n            ac_counts += 1\n        ac_count_list.append(ac_counts)\n\n    for l_r in l_r_list:\n        l = l_r[0] - 1\n        r = l_r[1] - 2\n        if l == 0:\n            print(ac_count_list[r])\n        else:\n            print(ac_count_list[r] - ac_count_list[l - 1])\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    },
    {
      "index": 2,
      "text": "\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == \"A\" and s[i + 1] == \"C\":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n"
    }
  ],
  "created": 1650261771,
  "object": "edit"
}
2022-04-18 06:03:30.183763 fix syntax errors 3 ['# https://atcoder.jp/contests/abc095/tasks/abc095_b\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n', 'import math\nimport numpy as np\nimport collections\nfrom collections import defaultdict\nimport heapq\nimport bisect\nimport sys\nimport copy\nimport itertools\nimport math\nimport string\nimport queue\nimport re\nimport numpy as np\nsys.setrecursionlimit(10 ** 8)\nINF = float(\'inf\')\nmod = 10 ** 9 + 7\neps = 10 ** -7\npi = 3.1415926535897932\n\ndef inp(): return int(sys.stdin.readline())\n \ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n\n    l_r_list = []\n    for i in range(q):\n        l_r = list(map(int, input().split()))\n        l_r_list.append(l_r)\n\n    ac_counts = 0\n    ac_count_list = []\n\n    for i in range(n - 1):\n        if s[i] == "A" and s[i + 1] == "C":\n            ac_counts += 1\n        ac_count_list.append(ac_counts)\n\n    for l_r in l_r_list:\n        l = l_r[0] - 1\n        r = l_r[1] - 2\n        if l == 0:\n            print(ac_count_list[r])\n        else:\n            print(ac_count_list[r] - ac_count_list[l - 1])\n\nif __name__ == \'__main__\':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n', '\nn, q = map(int, input().split())\ns = input()\n\nl_r_list = []\nfor i in range(q):\n    l_r = list(map(int, input().split()))\n    l_r_list.append(l_r)\n\nac_counts = 0\nac_count_list = []\n\nfor i in range(n - 1):\n    if s[i] == "A" and s[i + 1] == "C":\n        ac_counts += 1\n    ac_count_list.append(ac_counts)\n\nfor l_r in l_r_list:\n    l = l_r[0] - 1\n    r = l_r[1] - 2\n    if l == 0:\n        print(ac_count_list[r])\n    else:\n        print(ac_count_list[r] - ac_count_list[l - 1])\n']
2022-04-18 06:03:30.183808 size on output set 3
2022-04-18 06:03:30.183818 num operations 1
2022-04-18 06:03:30.183824 size on input set 1
2022-04-18 06:03:34.891516 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i]-1, Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----main----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    },
    {
      "index": 2,
      "text": "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S \nS = input()\n\n#input Li and Ri \nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring \ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"
    }
  ],
  "created": 1650261810,
  "object": "edit"
}
2022-04-18 06:03:34.891705 fix syntax errors 3 ["\n\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i]-1, Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n\n#-----main----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S\nS = input()\n\n#input Li and Ri\nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring\ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n", "\n#-----main-----\n\n#input parameter\nN, Q = map(int, input().split())\n\n#input S \nS = input()\n\n#input Li and Ri \nLi = []\nRi = []\nfor i in range(Q):\n    l, r = map(int, input().split())\n    Li.append(l)\n    Ri.append(r)\n\n#count AC in each substring \ncount = 0\nfor i in range(Q):\n    for j in range(Li[i], Ri[i]):\n        if S[j-1:j+1] == 'AC':\n            count += 1\n    print(count)\n    count = 0\n"]
2022-04-18 06:03:34.891735 size on output set 3
