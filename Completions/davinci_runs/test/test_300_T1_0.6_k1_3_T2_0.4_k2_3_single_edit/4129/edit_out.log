2022-04-18 05:19:39.042490 num operations 1
2022-04-18 05:19:39.042528 size on input set 1
2022-04-18 05:19:43.153354 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "const fs = require('fs');\nconst path = require('path');\n\nconst filePath = path.join(__dirname, 'file.txt');\n\nfs.readFile(filePath, { encoding: 'utf-8' }, (err, data) => {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log(data);\n    }\n});\n\nconsole.log('TEST');\n"
    },
    {
      "index": 1,
      "text": "var fs = require('fs');\n\nvar file = fs.readFileSync(process.argv[2]);\nvar fileString = file.toString();\nvar newLineCount = fileString.split('\\n').length - 1;\nconsole.log(newLineCount);\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n    print 'Hello World'\n\nif __name__ == '__main__':\n    sys.exit(main())\n"
    }
  ],
  "created": 1650259179,
  "object": "edit"
}
2022-04-18 05:19:43.153630 fix syntax errors 3 ["const fs = require('fs');\nconst path = require('path');\n\nconst filePath = path.join(__dirname, 'file.txt');\n\nfs.readFile(filePath, { encoding: 'utf-8' }, (err, data) => {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log(data);\n    }\n});\n\nconsole.log('TEST');\n", "var fs = require('fs');\n\nvar file = fs.readFileSync(process.argv[2]);\nvar fileString = file.toString();\nvar newLineCount = fileString.split('\\n').length - 1;\nconsole.log(newLineCount);\n", "#!/usr/bin/python\n\nimport sys\n\ndef main():\n    print 'Hello World'\n\nif __name__ == '__main__':\n    sys.exit(main())\n"]
2022-04-18 05:19:43.153672 size on output set 3
2022-04-18 05:19:43.153705 num operations 1
2022-04-18 05:19:43.153715 size on input set 1
2022-04-18 05:19:45.852478 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650259183,
  "object": "edit"
}
2022-04-18 05:19:45.852787 fix syntax errors 3 ["#!/usr/bin/env python3\n\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\n#---------------------------------------------------------------------------------\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 05:19:45.852870 size on output set 3
2022-04-18 05:19:45.852892 num operations 1
2022-04-18 05:19:45.852904 size on input set 1
2022-04-18 05:19:54.139935 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nfrom collections import deque\n\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.adj = [[] for _ in range(n)]\n\n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n\n    def bfs(self, s):\n        visited = [False] * self.n\n        q = deque([s])\n        while q:\n            node = q.popleft()\n            visited[node] = True\n            for edge in self.adj[node]:\n                if not visited[edge]:\n                    q.append(edge)\n        return visited\n\n\ndef main():\n    n, m, s = sys.stdin.readline().split()\n    n, m, s = int(n), int(m), int(s)\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = sys.stdin.readline().split()\n        u, v = int(u), int(v)\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m = sys.stdin.readline().split()\n    n, m = int(n), int(m)\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = sys.stdin.readline().split()\n        u, v = int(u), int(v)\n        edges[u].append(v)\n    visited = set()\n    q = [1]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    print(n)\n\nmain()\n"
    }
  ],
  "created": 1650259185,
  "object": "edit"
}
2022-04-18 05:19:54.140260 fix syntax errors 3 ['import sys\nfrom collections import deque\n\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.adj = [[] for _ in range(n)]\n\n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n\n    def bfs(self, s):\n        visited = [False] * self.n\n        q = deque([s])\n        while q:\n            node = q.popleft()\n            visited[node] = True\n            for edge in self.adj[node]:\n                if not visited[edge]:\n                    q.append(edge)\n        return visited\n\n\ndef main():\n    n, m, s = sys.stdin.readline().split()\n    n, m, s = int(n), int(m), int(s)\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = sys.stdin.readline().split()\n        u, v = int(u), int(v)\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n', '\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m = sys.stdin.readline().split()\n    n, m = int(n), int(m)\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = sys.stdin.readline().split()\n        u, v = int(u), int(v)\n        edges[u].append(v)\n    visited = set()\n    q = [1]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n', '\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    print(n)\n\nmain()\n']
2022-04-18 05:19:54.140309 size on output set 3
