2022-04-18 05:32:22.274405 num operations 1
2022-04-18 05:32:22.274425 size on input set 1
2022-04-18 05:32:50.312543 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)).\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town,\n    # so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first\n    # and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters\n    # attacking the first, second, ..., (i-1)-th, and i-th towns, so he will\n    # defeat B_{i-1} monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters\n    # attacking the first, second, ..., (N-1)-th, and N-th towns, so he will\n    # defeat B_{N-1} monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + B_N.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at\n    # least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is\n    # B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) +\n    # (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)).\n    # This can be simplified as\n    # B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} -\n    # (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... +\n    # B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as\n    # B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} -\n    # (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B[1] monsters attacking the first town, so he will defeat B[1] monsters attacking the first town.\n    # The second hero can defeat at most B[1] + B[2] monsters attacking the first and second town, so he will defeat B[2] monsters attacking the second town.\n    # The i-th hero can defeat at most B[1] + B[2] + ... + B[i-1] + B[i] monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B[i-1] monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B[1] + B[2] + ... + B[N-1] + B[N] monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B[N-1] monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B[1] + B[2] + ... + B[N-1].\n    # However, some monsters may have already been defeated.\n    # For example, if B[1] + B[2] < A[1] + A[2], the third hero must defeat at least A[1] + A[2] - (B[1] + B[2]) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B[1] + B[2] + ... + B[N-1] + (A[1] + A[2] - (B[1] + B[2])) + (A[2] + A[3] - (B[2] + B[3])) + ... + (A[N] + A[N+1] - (B[N-1] + B[N])).\n    # This can be simplified as B[1] + B[2] + ... + B[N-1] + A[1] + A[2] + ... + A[N+1] - (B[1] + B[2] + ... + B[N-1] + B[1] + B[2] + ... + B[N-1] + B[2] + B[3] + ... + B[N-1] + ... + B[N-2] + B[N-1] + B[N])\n    # This can be simplified as B[1] + B[2] + ... + B[N-1] + A[1] + A[2] + ... + A[N+1] - (N * B[1] + (N-1) * B[2] + ... + 2 * B[N-1] + B[N])\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650259942,
  "object": "edit"
}
2022-04-18 05:32:50.312927 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)).\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town,\n    # so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first\n    # and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters\n    # attacking the first, second, ..., (i-1)-th, and i-th towns, so he will\n    # defeat B_{i-1} monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters\n    # attacking the first, second, ..., (N-1)-th, and N-th towns, so he will\n    # defeat B_{N-1} monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + B_N.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at\n    # least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is\n    # B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) +\n    # (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)).\n    # This can be simplified as\n    # B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} -\n    # (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... +\n    # B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as\n    # B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} -\n    # (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B[1] monsters attacking the first town, so he will defeat B[1] monsters attacking the first town.\n    # The second hero can defeat at most B[1] + B[2] monsters attacking the first and second town, so he will defeat B[2] monsters attacking the second town.\n    # The i-th hero can defeat at most B[1] + B[2] + ... + B[i-1] + B[i] monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B[i-1] monsters attacking the (i-1)-th town.\n    # The last hero can defeat at most B[1] + B[2] + ... + B[N-1] + B[N] monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B[N-1] monsters attacking the (N-1)-th town.\n    # The total number of monsters defeated is B[1] + B[2] + ... + B[N-1].\n    # However, some monsters may have already been defeated.\n    # For example, if B[1] + B[2] < A[1] + A[2], the third hero must defeat at least A[1] + A[2] - (B[1] + B[2]) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B[1] + B[2] + ... + B[N-1] + (A[1] + A[2] - (B[1] + B[2])) + (A[2] + A[3] - (B[2] + B[3])) + ... + (A[N] + A[N+1] - (B[N-1] + B[N])).\n    # This can be simplified as B[1] + B[2] + ... + B[N-1] + A[1] + A[2] + ... + A[N+1] - (B[1] + B[2] + ... + B[N-1] + B[1] + B[2] + ... + B[N-1] + B[2] + B[3] + ... + B[N-1] + ... + B[N-2] + B[N-1] + B[N])\n    # This can be simplified as B[1] + B[2] + ... + B[N-1] + A[1] + A[2] + ... + A[N+1] - (N * B[1] + (N-1) * B[2] + ... + 2 * B[N-1] + B[N])\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-18 05:32:50.313158 size on output set 3
2022-04-18 05:32:50.313183 num operations 1
2022-04-18 05:32:50.313195 size on input set 1
2022-04-18 05:32:54.020463 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    },
    {
      "index": 2,
      "text": "\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    }
  ],
  "created": 1650259970,
  "object": "edit"
}
2022-04-18 05:32:54.020692 fix syntax errors 3 ["\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n", "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n", "\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"]
2022-04-18 05:32:54.020739 size on output set 2
2022-04-18 05:32:54.020759 num operations 1
2022-04-18 05:32:54.020769 size on input set 1
2022-04-18 05:32:57.758583 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefence = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefence.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defence[i]:\n        sum = sum + defence[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 1,
      "text": "\n# Solved by Tashfia Rahman \n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    }
  ],
  "created": 1650259974,
  "object": "edit"
}
2022-04-18 05:32:57.758825 fix syntax errors 3 ['\n\n# Solved by Tashfia Rahman\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefence = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefence.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defence[i]:\n        sum = sum + defence[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\n# Solved by Tashfia Rahman \n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n']
2022-04-18 05:32:57.758870 size on output set 3
