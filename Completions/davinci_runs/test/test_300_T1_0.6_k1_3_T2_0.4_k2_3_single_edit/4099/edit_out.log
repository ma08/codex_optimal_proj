2022-04-18 05:09:27.530661 num operations 1
2022-04-18 05:09:27.530680 size on input set 1
2022-04-18 05:09:33.843498 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef solve(n, m, k, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\n\nif __name__ == '__main__':\n    n, m, k = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n"
    }
  ],
  "created": 1650258567,
  "object": "edit"
}
2022-04-18 05:09:33.843851 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef solve(n, m, k, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\n\nif __name__ == '__main__':\n    n, m, k = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "\nimport sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n", "import sys\n\ndef solve(n, k, m, scores):\n    required_final_score = (n * m) - sum(scores)\n    if required_final_score < 0:\n        return -1\n    else:\n        return required_final_score\n\nif __name__ == '__main__':\n    n, k, m = list(map(int, sys.stdin.readline().split()))\n    scores = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, k, m, scores))\n"]
2022-04-18 05:09:33.843896 size on output set 3
2022-04-18 05:09:33.843915 num operations 1
2022-04-18 05:09:33.843924 size on input set 1
2022-04-18 05:09:40.033540 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nif N < M:\n    print(\"NO\")\nelse:\n    A.sort()\n    B.sort()\n\n    for i in range(M):\n        if A[i] < B[i]:\n            print(\"NO\")\n            exit()\n    print(\"YES\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# x = M * N - S\n\n# N, K, M = map(int, input().split())\n# A = list(map(int, input().split()))\n\n# S = sum(A)\n# x = M * N - S\n\n# if x < 0:\n#     print(-1)\n# elif x > K:\n#     print(-1)\n# else:\n#     print(x)\n\n# S = sum(Ai) + x\n# S = sum(Ai) + x\n# x = M * N - S\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\nS = sum(A)\nx = M * N - S\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nprint(x)\n"
    },
    {
      "index": 2,
      "text": "\n\n# S = sum(Ai)\n# x = M * N - S + x\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S + x\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n"
    }
  ],
  "created": 1650258573,
  "object": "edit"
}
2022-04-18 05:09:40.033772 fix syntax errors 3 ['\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nif N < M:\n    print("NO")\nelse:\n    A.sort()\n    B.sort()\n\n    for i in range(M):\n        if A[i] < B[i]:\n            print("NO")\n            exit()\n    print("YES")\n', '\n\n# x = M * N - S\n\n# N, K, M = map(int, input().split())\n# A = list(map(int, input().split()))\n\n# S = sum(A)\n# x = M * N - S\n\n# if x < 0:\n#     print(-1)\n# elif x > K:\n#     print(-1)\n# else:\n#     print(x)\n\n# S = sum(Ai) + x\n# S = sum(Ai) + x\n# x = M * N - S\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\nS = sum(A)\nx = M * N - S\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nprint(x)\n', '\n\n# S = sum(Ai)\n# x = M * N - S + x\n\nN, K, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nS = sum(A)\nx = M * N - S + x\n\nif x < 0:\n    print(-1)\nelif x > K:\n    print(-1)\nelse:\n    print(x)\n']
2022-04-18 05:09:40.033815 size on output set 3
2022-04-18 05:09:40.033835 num operations 1
2022-04-18 05:09:40.033845 size on input set 1
2022-04-18 05:09:46.678897 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n# Get the number of subjects, the maximum score, and the goal score.\nN, K, M = map(int, input().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, input().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores.\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject. \n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n# Get the number of subjects, the maximum score, and the goal score.\nN, K, M = map(int, input().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, input().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n# Get the number of subjects, the maximum score, and the goal score.\nn, k, m = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams.\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = m\nhighest_score = k\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores.\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= n * m:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= k:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n"
    }
  ],
  "created": 1650258580,
  "object": "edit"
}
2022-04-18 05:09:46.679377 fix syntax errors 3 ['import sys\n\n# Get the number of subjects, the maximum score, and the goal score.\nN, K, M = map(int, input().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, input().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores.\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject. \n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n', '\nimport sys\n\n# Get the number of subjects, the maximum score, and the goal score.\nN, K, M = map(int, input().split())\n\n# Get the scores on the previous exams\nscores = list(map(int, input().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = M\nhighest_score = K\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= N * M:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= K:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n', 'import sys\n\n# Get the number of subjects, the maximum score, and the goal score.\nn, k, m = map(int, sys.stdin.readline().split())\n\n# Get the scores on the previous exams.\nscores = list(map(int, sys.stdin.readline().split()))\n\n# The lowest possible score is the goal score, since we only need to find a score that meets or exceeds the goal.\n# The highest possible score is the maximum score.\nlowest_score = m\nhighest_score = k\n\n# As long as the lowest score is less than the highest score, we can keep checking.\nwhile lowest_score < highest_score:\n    # Calculate the average of the lowest and highest scores.\n    middle_score = (lowest_score + highest_score) // 2\n\n    # Calculate the total score, if the final score was middle_score.\n    total = sum(scores) + middle_score\n\n    # If the total score is at least N times the goal score, we know that we can achieve the goal by scoring middle_score on the final subject.\n    if total >= n * m:\n        # Set the highest possible score to the middle score.\n        highest_score = middle_score\n    # If the total score is less than N times the goal score, we know that we cannot achieve the goal by scoring middle_score on the final subject.\n    else:\n        # Set the lowest possible score to 1 greater than the middle score.\n        lowest_score = middle_score + 1\n\n# If the lowest score is greater than or equal to the maximum score, we cannot achieve the goal.\nif lowest_score >= k:\n    print(-1)\n# Otherwise, the lowest score is the minimum score we need to get on the final subject.\nelse:\n    print(lowest_score)\n']
2022-04-18 05:09:46.679477 size on output set 3
