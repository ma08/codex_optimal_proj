["\n\ndef cheese_board():\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\"\")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue May  5 10:35:06 2020\n\n@author: brian\n\"\"\"\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndataset = pd.read_csv('Data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 3].values\n\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')\nimputer.fit(X[:, 1:3])\nX[:, 1:3] = imputer.transform(X[:, 1:3])\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nlabelencoder_X = LabelEncoder()\nX[:, 0] = labelencoder_X.fit_transform(X[:, 0])\nct = ColumnTransformer([(\"Country\", OneHotEncoder(), [0])], remainder = 'passthrough')\nX = ct.fit_transform(X)\nlabelencoder_y = LabelEncoder()\ny = labelencoder_y.fit_transform(y)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n", "\n\ndef cheese_board():\n    num_cheeses = int(input(\"\"))\n    cheeses = []\n    while num_cheeses > 0:\n        line = input(\"\").split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n", "var http = require('http');\nvar fs = require('fs');\n\nhttp.createServer(function(req, res) {\n\tres.writeHead(200, { 'Content-Type': 'text/html' });\n\tvar html = fs.readFileSync(__dirname + '/index.htm', 'utf8');\n\tvar message = 'Hello world...';\n\thtml = html.replace('{Message}', message);\n\tres.end(html);\n}).listen(1337, '127.0.0.1');\n", "import os\n\n\ndef get_file_list(path):\n    file_list = []\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            file_list.append(os.path.join(root, file))\n    return file_list\n\n\ndef get_file_ext(file_name):\n    return os.path.splitext(file_name)[1]\n\n\ndef get_file_name(file_path):\n    return os.path.splitext(os.path.basename(file_path))[0]\n", "\ndef main():\n    n = int(input())\n\n    soft = []\n    hard = []\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef cheese_board():\n    num_cheeses = int(input(\"Enter the number of cheeses: \"))\n    cheeses = []\n    while num_cheeses > 0:\n        line = input(\"Enter the cheese: \").split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n        i += 1\n    print(\"Number of different cheeses: \", count)\n\n\ncheese_board()\n", "\n\ndef main():\n    n = int(input())\n\n    soft = 0\n    hard = 0\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    soft = []\n    hard = []\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n"]