2022-04-18 04:55:14.361001 num operations 1
2022-04-18 04:55:14.361021 size on input set 1
2022-04-18 04:55:21.903413 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\n\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n"
    },
    {
      "index": 1,
      "text": "\n\n# get the input\nn = int(input())\ns = input()\n\n# initialize the answer\nanswer = 0\n\n# loop through the characters in the string\nfor i in range(n):\n    # if the current character is a vowel\n    if s[i] in \"aeiou\":\n        # add the number of characters after this one\n        # to the answer\n        answer += n - i\n\n# output the final answer\nprint(answer)\n"
    },
    {
      "index": 2,
      "text": "\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\n\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n"
    }
  ],
  "created": 1650257714,
  "object": "edit"
}
2022-04-18 04:55:21.903798 fix syntax errors 3 ['\n# this is the "easy" version of the problem\n# the "hard" version has a longer string\n\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n', '\n\n# get the input\nn = int(input())\ns = input()\n\n# initialize the answer\nanswer = 0\n\n# loop through the characters in the string\nfor i in range(n):\n    # if the current character is a vowel\n    if s[i] in "aeiou":\n        # add the number of characters after this one\n        # to the answer\n        answer += n - i\n\n# output the final answer\nprint(answer)\n', '\n# this is the "easy" version of the problem\n# the "hard" version has a longer string\n\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n']
2022-04-18 04:55:21.903858 size on output set 2
2022-04-18 04:55:21.903876 num operations 1
2022-04-18 04:55:21.903887 size on input set 1
2022-04-18 04:55:24.944457 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence of s[:i] and t[:j]\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t.\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n"
    },
    {
      "index": 2,
      "text": "\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t.\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n"
    }
  ],
  "created": 1650257721,
  "object": "edit"
}
2022-04-18 04:55:24.944682 fix syntax errors 3 ['\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence of s[:i] and t[:j]\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n', '\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t.\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n', '\ndef solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t.\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n']
2022-04-18 04:55:24.944733 size on output set 2
