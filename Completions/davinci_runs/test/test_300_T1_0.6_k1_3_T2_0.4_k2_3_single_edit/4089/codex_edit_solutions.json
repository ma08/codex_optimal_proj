["\n\nfrom sys import stdin\n\ndef get_name(n):\n    # As per the problem statement, the names for numbers 1 to 26 are mapped directly to the alphabets a to z.\n    # Hence we can directly return the name for numbers 1 to 26.\n    if n <= 26:\n        return chr(96 + n)\n    else:\n        # We need to calculate the name for the remaining numbers.\n        # For numbers from 27 to 702, we need to use the formula\n        # name = 26 * (n-1) + (n-27)\n        # For numbers from 703 to 18278, we need to use the formula\n        # name = 26 * 26 * (n-1) + 26 * (n-703) + (n-703)\n        # For numbers from 18279 to 475254, we need to use the formula\n        # name = 26 * 26 * 26 * (n-1) + 26 * 26 * (n-18279) + 26 * (n-18279) + (n-18279)\n        # For numbers from 475255 to 1000000000000001, we need to use the formula\n        # name = 26 * 26 * 26 * 26 * (n-1) + 26 * 26 * 26 * (n-475255) + 26 * 26 * (n-475255) + 26 * (n-475255) + (n-475255)\n        #\n        # From the above formulae, we can see that the number of digits in the name is one more than the\n        # number of letters used in the name. Hence, for example, the number of digits in the name for dog\n        # number 5 is 2 and the number of letters used in the name 'aaa' is 2.\n        # Hence, we can find out the number of digits in the name by dividing the number by the number of\n        # letters used in the name.\n        # We can find the number of letters used in the name by taking the logarithm of the number in base 26.\n        # We can find the number of digits in the name by dividing the number by the number of letters used in\n        # the name.\n        # The name consists of the letters 'a' to 'z' and the letters are repeated in the order 'a', 'b', 'c' ...\n        # till 'z' and then starting again from 'a'.\n        # To find the letter at a particular index, we divide the index by 26 and take the remainder.\n        # For example, to find the letter at the index 101, we divide 101 by 26 to get 3. The remainder is 19.\n        # Hence the letter at the index 101 is the letter at the index 19, which is 's'.\n        # To find the letter at a particular index, we divide the index by 26 and take the remainder.\n        # For example, to find the letter at the index 101, we divide 101 by 26 to get 3. The remainder is 19.\n        # Hence the letter at the index 101 is the letter at the index 19, which is 's'.\n        # Since the number of letters used in the name is the same as the number of digits in the name, we can\n        # use the same logic to find the number of letters used in the name.\n        # We divide the number by 26 and take the remainder to get the number of letters used in the name.\n        name_len = n % 26 or 26\n        # We divide the number by 26 to get the number of letters used in the name.\n        name = ''\n        # We loop from the number of digits in the name to 1 to get the name for the dog number.\n        for i in range(name_len, 0, -1):\n            # We divide the number by the number of letters used in the name and take the remainder to get the\n            # index at which the letter is placed.\n            # We then add the letter at the index to the name.\n            name += chr(96 + (n % (26 ** i) / (26 ** (i - 1))))\n        return name\n\nif __name__ == '__main__':\n    n = int(stdin.readline())\n    print(get_name(n))\n", "\n\nfrom sys import stdin\n\ndef get_name(n):\n    # As per the problem statement, the names for numbers 1 to 26 are mapped directly to the alphabets a to z.\n    # Hence we can directly return the name for numbers 1 to 26.\n    if n <= 26:\n        return chr(ord('a') + n - 1)\n    else:\n        # We need to calculate the name for the remaining numbers.\n        # For numbers from 27 to 702, we need to use the formula\n        # name = 26 * (n-1) + (n-27)\n        # For numbers from 703 to 18278, we need to use the formula\n        # name = 26 * 26 * (n-1) + 26 * (n-703) + (n-703)\n        # For numbers from 18279 to 475254, we need to use the formula\n        # name = 26 * 26 * 26 * (n-1) + 26 * 26 * (n-18279) + 26 * (n-18279) + (n-18279)\n        # For numbers from 475255 to 1000000000000001, we need to use the formula\n        # name = 26 * 26 * 26 * 26 * (n-1) + 26 * 26 * 26 * (n-475255) + 26 * 26 * (n-475255) + 26 * (n-475255) + (n-475255)\n        #\n        # From the above formulae, we can see that the number of digits in the name is one more than the\n        # number of letters used in the name. Hence, for example, the number of digits in the name for dog\n        # number 5 is 2 and the number of letters used in the name 'aaa' is 2.\n        # Hence, we can find out the number of digits in the name by dividing the number by the number of\n        # letters used in the name.\n        # We can find the number of letters used in the name by taking the logarithm of the number in base 26.\n        # We can find the number of digits in the name by dividing the number by the number of letters used in\n        # the name.\n        # The name consists of the letters 'a' to 'z' and the letters are repeated in the order 'a', 'b', 'c' ...\n        # till 'z' and then starting again from 'a'.\n        # To find the letter at a particular index, we divide the index by 26 and take the remainder.\n        # For example, to find the letter at the index 101, we divide 101 by 26 to get 3. The remainder is 19.\n        # Hence the letter at the index 101 is the letter at the index 19, which is 's'.\n        # To find the letter at a particular index, we divide the index by 26 and take the remainder.\n        # For example, to find the letter at the index 101, we divide 101 by 26 to get 3. The remainder is 19.\n        # Hence the letter at the index 101 is the letter at the index 19, which is 's'.\n        # Since the number of letters used in the name is the same as the number of digits in the name, we can\n        # use the same logic to find the number of letters used in the name.\n        # We divide the number by 26 and take the remainder to get the number of letters used in the name.\n        name_len = n % 26 or 26\n        # We divide the number by 26 to get the number of letters used in the name.\n        name = ''\n        # We loop from the number of digits in the name to 1 to get the name for the dog number.\n        for i in range(name_len, 0, -1):\n            # We divide the number by the number of letters used in the name and take the remainder to get the\n            # index at which the letter is placed.\n            # We then add the letter at the index to the name.\n            name += chr(ord('a') + (n % (26 ** i) / (26 ** (i - 1))) - 1)\n        return name\n\nif __name__ == '__main__':\n    n = int(stdin.readline())\n    print get_name(n)\n", "\n\nfrom sys import stdin\n\ndef get_name(n):\n    # As per the problem statement, the names for numbers 1 to 26 are mapped directly to the alphabets a to z.\n    # Hence we can directly return the name for numbers 1 to 26.\n    if n <= 26:\n        return chr(96 + n)  # ascii code for a = 97\n    else:\n        # We need to calculate the name for the remaining numbers.\n        # For numbers from 27 to 702, we need to use the formula\n        # name = 26 * (n-1) + (n-27)\n        # For numbers from 703 to 18278, we need to use the formula\n        # name = 26 * 26 * (n-1) + 26 * (n-703) + (n-703)\n        # For numbers from 18279 to 475254, we need to use the formula\n        # name = 26 * 26 * 26 * (n-1) + 26 * 26 * (n-18279) + 26 * (n-18279) + (n-18279)\n        # For numbers from 475255 to 1000000000000001, we need to use the formula\n        # name = 26 * 26 * 26 * 26 * (n-1) + 26 * 26 * 26 * (n-475255) + 26 * 26 * (n-475255) + 26 * (n-475255) + (n-475255)  # noqa\n        #\n        # From the above formulae, we can see that the number of digits in the name is one more than the\n        # number of letters used in the name. Hence, for example, the number of digits in the name for dog\n        # number 5 is 2 and the number of letters used in the name 'aaa' is 2.\n        # Hence, we can find out the number of digits in the name by dividing the number by the number of\n        # letters used in the name.\n        # We can find the number of letters used in the name by taking the logarithm of the number in base 26.\n        # We can find the number of digits in the name by dividing the number by the number of letters used in\n        # the name.\n        # The name consists of the letters 'a' to 'z' and the letters are repeated in the order 'a', 'b', 'c' ...\n        # till 'z' and then starting again from 'a'.\n        # To find the letter at a particular index, we divide the index by 26 and take the remainder.\n        # For example, to find the letter at the index 101, we divide 101 by 26 to get 3. The remainder is 19.\n        # Hence the letter at the index 101 is the letter at the index 19, which is 's'.\n        # To find the letter at a particular index, we divide the index by 26 and take the remainder.\n        # For example, to find the letter at the index 101, we divide 101 by 26 to get 3. The remainder is 19.\n        # Hence the letter at the index 101 is the letter at the index 19, which is 's'.\n        # Since the number of letters used in the name is the same as the number of digits in the name, we can\n        # use the same logic to find the number of letters used in the name.\n        # We divide the number by 26 and take the remainder to get the number of letters used in the name.\n        name_len = n % 26 or 26\n        # We divide the number by 26 to get the number of letters used in the name.\n        name = ''\n        # We loop from the number of digits in the name to 1 to get the name for the dog number.\n        for i in range(name_len, 0, -1):\n            # We divide the number by the number of letters used in the name and take the remainder to get the\n            # index at which the letter is placed.\n            # We then add the letter at the index to the name.\n            name += chr(96 + (n % (26 ** i) / (26 ** (i - 1))))  # ascii code for a = 97\n        return name\n\nif __name__ == '__main__':\n    n = int(stdin.readline())\n    print(get_name(n))\n"]