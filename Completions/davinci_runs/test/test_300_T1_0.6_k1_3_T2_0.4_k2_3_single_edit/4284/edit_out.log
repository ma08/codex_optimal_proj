2022-04-18 06:00:54.091794 num operations 1
2022-04-18 06:00:54.091827 size on input set 1
2022-04-18 06:01:34.887990 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-------------------------------------------------------------------------------\n# Name:        file.py\n# Purpose:\n#\n# Author:      v.osipov\n#\n# Created:     16/10/2018\n# Copyright:   (c) v.osipov 2018\n# Licence:     <your licence>\nimport os\n\n#-------------------------------------------------------------------------------\n\ndef main():\n    print(os.getcwd())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# -------------------------------------------------------------------------------\n# Name:        file\n# Purpose:     \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432\n#\n# Author:      v.osipov\n#\n# Created:     16/10/2018\n# Copyright:   (c) v.osipov 2018\n# Licence:     <your licence>\n# -------------------------------------------------------------------------------\n\nimport os\nimport sys\nimport shutil\nimport re\n\n\ndef read_file(path):\n    \"\"\"\n    \u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n    :return: \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430\n    \"\"\"\n    with open(path) as f:\n        return f.read()\n\n\ndef write_file(path, content):\n    \"\"\"\n    \u0417\u0430\u043f\u0438\u0441\u044c \u0432 \u0444\u0430\u0439\u043b\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n    :param content: \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430\n    :return:\n    \"\"\"\n    with open(path, 'w') as f:\n        f.write(content)\n\n\ndef copy_file(path, new_path):\n    \"\"\"\n    \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n    :param new_path: \u043f\u0443\u0442\u044c \u043a \u043d\u043e\u0432\u043e\u043c\u0443 \u0444\u0430\u0439\u043b\u0443\n    :return:\n    \"\"\"\n    shutil.copy(path, new_path)\n\n\ndef get_file_name(path):\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n    :return: \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n    \"\"\"\n    return os.path.basename(path)\n\n\ndef get_file_ext(path):\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n    :return: \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n    \"\"\"\n    return os.path.splitext(path)[1]\n\n\ndef get_file_size(path):\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n    :return: \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430\n    \"\"\"\n    return os.path.getsize(path)\n\n\ndef get_file_list(path):\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n    :return: \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432\n    \"\"\"\n    return os.listdir(path)\n\n\ndef get_dir_list(path):\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u0434\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n    :return: \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439\n    \"\"\"\n    return [name for name in os.listdir(path) if os.path.isdir(os.path.join(path, name))]\n\n\ndef get_file_list_recursive(path):\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u043e\u0434\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n    :return: \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432\n    \"\"\"\n    result = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            result.append(os.path.join(root, name))\n    return result\n\n\ndef get_dir_list_recursive(path):\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u0434\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u043e\u0434\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n    :return: \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439\n    \"\"\"\n    result = []\n    for root, dirs, files in os.walk(path):\n        for name in dirs:\n            result.append(os.path.join(root, name))\n    return result\n\n\ndef get_file_list_by_ext(path, ext):\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044e\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n    :param ext: \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n    :return: \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432\n    \"\"\"\n    return [name for name in os.listdir(path) if os.path.splitext(name)[1] == ext]\n\n\ndef get_file_list_by_ext_recursive(path, ext):\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044e \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u043e\u0434\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439\n    :param path: \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n    :param ext: \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n    :return: \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432\n    \"\"\"\n    result = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            if os.path.splitext(name)[1] == ext:\n                result.append(os.path.join(\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650261654,
  "object": "edit"
}
2022-04-18 06:01:34.888221 fix syntax errors 3 ["\n\n#-------------------------------------------------------------------------------\n# Name:        file.py\n# Purpose:\n#\n# Author:      v.osipov\n#\n# Created:     16/10/2018\n# Copyright:   (c) v.osipov 2018\n# Licence:     <your licence>\nimport os\n\n#-------------------------------------------------------------------------------\n\ndef main():\n    print(os.getcwd())\n\nif __name__ == '__main__':\n    main()\n", '\n\n# -------------------------------------------------------------------------------\n# Name:        file\n# Purpose:     Обработка файлов\n#\n# Author:      v.osipov\n#\n# Created:     16/10/2018\n# Copyright:   (c) v.osipov 2018\n# Licence:     <your licence>\n# -------------------------------------------------------------------------------\n\nimport os\nimport sys\nimport shutil\nimport re\n\n\ndef read_file(path):\n    """\n    Чтение файла\n    :param path: путь к файлу\n    :return: содержимое файла\n    """\n    with open(path) as f:\n        return f.read()\n\n\ndef write_file(path, content):\n    """\n    Запись в файл\n    :param path: путь к файлу\n    :param content: содержимое файла\n    :return:\n    """\n    with open(path, \'w\') as f:\n        f.write(content)\n\n\ndef copy_file(path, new_path):\n    """\n    Копирование файла\n    :param path: путь к файлу\n    :param new_path: путь к новому файлу\n    :return:\n    """\n    shutil.copy(path, new_path)\n\n\ndef get_file_name(path):\n    """\n    Получение имени файла\n    :param path: путь к файлу\n    :return: имя файла\n    """\n    return os.path.basename(path)\n\n\ndef get_file_ext(path):\n    """\n    Получение расширения файла\n    :param path: путь к файлу\n    :return: расширение файла\n    """\n    return os.path.splitext(path)[1]\n\n\ndef get_file_size(path):\n    """\n    Получение размера файла\n    :param path: путь к файлу\n    :return: размер файла\n    """\n    return os.path.getsize(path)\n\n\ndef get_file_list(path):\n    """\n    Получение списка файлов в директории\n    :param path: путь к директории\n    :return: список файлов\n    """\n    return os.listdir(path)\n\n\ndef get_dir_list(path):\n    """\n    Получение списка поддиректорий в директории\n    :param path: путь к директории\n    :return: список поддиректорий\n    """\n    return [name for name in os.listdir(path) if os.path.isdir(os.path.join(path, name))]\n\n\ndef get_file_list_recursive(path):\n    """\n    Получение списка файлов в директории с учетом поддиректорий\n    :param path: путь к директории\n    :return: список файлов\n    """\n    result = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            result.append(os.path.join(root, name))\n    return result\n\n\ndef get_dir_list_recursive(path):\n    """\n    Получение списка поддиректорий в директории с учетом поддиректорий\n    :param path: путь к директории\n    :return: список поддиректорий\n    """\n    result = []\n    for root, dirs, files in os.walk(path):\n        for name in dirs:\n            result.append(os.path.join(root, name))\n    return result\n\n\ndef get_file_list_by_ext(path, ext):\n    """\n    Получение списка файлов в директории по расширению\n    :param path: путь к директории\n    :param ext: расширение файла\n    :return: список файлов\n    """\n    return [name for name in os.listdir(path) if os.path.splitext(name)[1] == ext]\n\n\ndef get_file_list_by_ext_recursive(path, ext):\n    """\n    Получение списка файлов в директории по расширению с учетом поддиректорий\n    :param path: путь к директории\n    :param ext: расширение файла\n    :return: список файлов\n    """\n    result = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            if os.path.splitext(name)[1] == ext:\n                result.append(os.path.join(\n\nif __name__ == \'__main__\':\n    main()\n', "\n\n\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 06:01:34.888364 size on output set 3
2022-04-18 06:01:34.888393 num operations 1
2022-04-18 06:01:34.888399 size on input set 1
2022-04-18 06:01:37.762251 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n"
    }
  ],
  "created": 1650261694,
  "object": "edit"
}
2022-04-18 06:01:37.762435 fix syntax errors 3 ['\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b\n', '\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n', '\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n']
2022-04-18 06:01:37.762461 size on output set 3
2022-04-18 06:01:37.762472 num operations 1
2022-04-18 06:01:37.762477 size on input set 1
2022-04-18 06:01:42.295970 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nsys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nsys.stdin = open('input.txt')\n\ndef play(k, n, a, b):\n    if k < a and k < b: \n        return -1\n    if k < a: \n        return k//b\n    if k < a+b: \n        return 1\n    return (k-a)//b + 1 \n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nsys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n"
    }
  ],
  "created": 1650261697,
  "object": "edit"
}
2022-04-18 06:01:42.296161 fix syntax errors 3 ["\nimport sys\n\nsys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n", "\nimport sys\n\nsys.stdin = open('input.txt')\n\ndef play(k, n, a, b):\n    if k < a and k < b: \n        return -1\n    if k < a: \n        return k//b\n    if k < a+b: \n        return 1\n    return (k-a)//b + 1 \n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n", "\nimport sys\n\nsys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n"]
2022-04-18 06:01:42.296192 size on output set 2
