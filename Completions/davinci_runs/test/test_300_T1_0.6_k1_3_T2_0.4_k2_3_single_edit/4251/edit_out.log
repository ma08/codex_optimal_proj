2022-04-18 05:51:50.310633 num operations 1
2022-04-18 05:51:50.310655 size on input set 1
2022-04-18 05:51:52.704312 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650261110,
  "object": "edit"
}
2022-04-18 05:51:52.704507 fix syntax errors 3 ['\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m = (int(x) for x in input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(n - 1):\n            for c in range(m):\n                k = max(k, abs(a[j][c] - a[j + 1][c]))\n\n    print(k)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-18 05:51:52.704557 size on output set 1
2022-04-18 05:51:52.704570 num operations 1
2022-04-18 05:51:52.704575 size on input set 1
2022-04-18 05:51:59.648445 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n# print(matrix)\n\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n - 1):\n            if abs(matrix[j][i] - matrix[j + 1][i]) < k:\n                return False\n    return True\n\n\nl, r = 0, 10**9\n\nwhile l < r:\n    m = (l + r) // 2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m + 1\n\nprint(r)\n"
    },
    {
      "index": 1,
      "text": "\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n"
    },
    {
      "index": 2,
      "text": "\nn,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n# print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n - 1):\n            if abs(matrix[j][i] - matrix[j + 1][i]) < k:\n                return False\n    return True\n\n\nl, r = 0, 10 ** 9\n\nwhile l < r:\n    m = (l + r) // 2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m + 1\n\nprint(r)\n"
    }
  ],
  "created": 1650261112,
  "object": "edit"
}
2022-04-18 05:51:59.648638 fix syntax errors 3 ['\n\nn, m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n# print(matrix)\n\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n - 1):\n            if abs(matrix[j][i] - matrix[j + 1][i]) < k:\n                return False\n    return True\n\n\nl, r = 0, 10**9\n\nwhile l < r:\n    m = (l + r) // 2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m + 1\n\nprint(r)\n', '\nn,m = [int(x) for x in input().split()]\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\nmatrix.sort(key=lambda x: -min(x))\n\n#print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n-1):\n            if abs(matrix[j][i] - matrix[j+1][i]) < k:\n                return False\n    return True\n\nl,r = 0,10**9\n\nwhile l < r:\n    m = (l+r)//2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m+1\n\nprint(r)\n', '\nn,m = [int(x) for x in input().split()]\n\nmatrix = []\n\nfor _ in range(n):\n    row = [int(x) for x in input().split()]\n    matrix.append(row)\n\nmatrix.sort(key=lambda x: -min(x))\n\n# print(matrix)\n\ndef is_valid(k, matrix):\n    for i in range(m):\n        for j in range(n - 1):\n            if abs(matrix[j][i] - matrix[j + 1][i]) < k:\n                return False\n    return True\n\n\nl, r = 0, 10 ** 9\n\nwhile l < r:\n    m = (l + r) // 2\n    if is_valid(m, matrix):\n        r = m\n    else:\n        l = m + 1\n\nprint(r)\n']
2022-04-18 05:51:59.648672 size on output set 3
2022-04-18 05:51:59.648683 num operations 1
2022-04-18 05:51:59.648688 size on input set 1
2022-04-18 05:52:02.810136 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:\" + self.n + \", m:\" + self.m + \", matrix:\" + self.matrix\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return \"n:{}, m:{}, matrix:{}\".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=' ')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=' ')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print(\"max_k:\", matrix_traversal.find_max_k())\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    }
  ],
  "created": 1650261119,
  "object": "edit"
}
2022-04-18 05:52:02.810481 fix syntax errors 3 ['\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:" + self.n + ", m:" + self.m + ", matrix:" + self.matrix\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\nimport sys\n\nclass MatrixTraversal:\n\n    def __init__(self, n, m, matrix):\n        self.n = n\n        self.m = m\n        self.matrix = matrix\n\n    def __str__(self):\n        return "n:{}, m:{}, matrix:{}".format(self.n, self.m, self.matrix)\n\n    def print(self):\n        print(self)\n\n    def find_max_k(self):\n        max_k = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if i-1 >= 0 and abs(self.matrix[i][j] - self.matrix[i-1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i-1][j])\n                if i+1 < self.n and abs(self.matrix[i][j] - self.matrix[i+1][j]) > max_k:\n                    max_k = abs(self.matrix[i][j] - self.matrix[i+1][j])\n        return max_k\n\ndef main(input_file):\n    with open(input_file) as f:\n        n, m = f.readline().split(sep=\' \')\n        matrix = []\n        for i in range(int(n)):\n            matrix.append([int(x) for x in f.readline().split(sep=\' \')])\n        matrix_traversal = MatrixTraversal(int(n), int(m), matrix)\n        print("max_k:", matrix_traversal.find_max_k())\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n']
2022-04-18 05:52:02.810547 size on output set 2
