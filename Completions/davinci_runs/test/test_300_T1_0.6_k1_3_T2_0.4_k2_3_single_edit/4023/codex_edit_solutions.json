["\ndef test_vova_and_his_girlfriend():\n    \"\"\"Tests the solution to the problem described in the docstring\"\"\"\n    assert solve(5, [2, 1, 1, 2, 5]) == 'YES'\n    assert solve(3, [4, 5, 3]) == 'NO'\n    assert solve(2, [10, 10]) == 'YES'\n\n\nif __name__ == \"__main__\":\n    N = int(input())\n    a = list(map(int, input().split()))\n    print(solve(N, a))\n", "\n\ndef solve(n, wall):\n    # Complete this function\n    if len(set(wall)) == 1:\n        return \"YES\"\n    elif len(set(wall)) == 2:\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if a == 1 and b == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(' ')))\nprint(solve(n, wall))\n", "\n\ndef test_vova_and_his_girlfriend():\n    \"\"\"Tests the solution to the problem described in the docstring.\"\"\"\n    assert solve(5, [2, 1, 1, 2, 5]) == \"YES\"\n    assert solve(3, [4, 5, 3]) == \"NO\"\n    assert solve(2, [10, 10]) == \"YES\"\n\n\nif __name__ == \"__main__\":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n", "\n\n#-----Solution-----\n\na = input().split()[1]\nb = input().split()[1]\n\nn = len(a)\nm = len(b)\n\nif n != m:\n    print('NO')\n    exit()\n\nfor i in range(n):\n    if a[i] != b[i]:\n        print('NO')\n        exit()\n\nprint('YES')\n", "\n\n#-----Solution-----#\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    exit()\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit()\n\nprint('YES')\n", "\n#-----Solution-----\n\na = input().split()\nb = input().split()\nn = int(a[0])\nm = int(b[0])\nif n != m:\n    print('NO')\n    exit()\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit()\nprint('YES')\n", "\n\ndef solve(n, wall):\n    # Complete this function\n    return \"YES\"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(' ')))\nprint(solve(n, wall))\n", "\n\ndef solve(n, wall):\n    if (len(set(wall)) == 1):\n        return \"YES\"\n    elif (len(set(wall)) == 2):\n        a = wall.count(max(wall)) # count the number of max values\n        b = wall.count(min(wall)) # count the number of min values\n        if (a == 1 and b == 1): # if there is only one max and one min value\n            return \"NO\"\n        else: # if there is more than one max or more than one min value\n            return \"YES\"\n    else: # if there are more than 2 different values\n        return \"NO\"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(' ')))\nprint(solve(n, wall))\n", "\n\ndef test_vova_and_his_girlfriend():\n    assert solve(5, [2, 1, 1, 2, 5]) == \"YES\"\n    assert solve(3, [4, 5, 3]) == \"NO\"\n    assert solve(2, [10, 10]) == \"YES\"\n\nif __name__ == \"__main__\":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n"]