["\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[n][m]\n\ns = input()\nt = input()\nprint(solve(s, t))\n", "var fs = require('fs');\n\n// fs.readFile('sample.txt', 'utf8', function(err, data){\n//     console.log(data);\n// });\n\n// fs.writeFile('sample.txt', 'hello world', function(err){\n//     console.log('file created');\n// });\n\n// fs.appendFile('sample.txt', 'hello world', function(err){\n//     console.log('file created');\n// });\n\n// fs.unlink('sample.txt', function(err){\n//     console.log('file deleted');\n// });\n\n// fs.rename('sample.txt', 'sample2.txt', function(err){\n//     console.log('file renamed');\n// });\n\nfs.readdir('.', function(err, files){\n    console.log(files);\n});\n", "\nimport sys\ninput = sys.stdin.readline\n\ndef solve(s, t):\n    n = len(s) + 1\n    m = len(t) + 1\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = i\n    for j in range(m):\n        dp[0][j] = j\n    for i in range(1, n):\n        for j in range(1, m):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else: \n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[-1][-1]\n\ns = input().rstrip()\nt = input().rstrip()\nprint(solve(s, t))\n", "\n\ndef solve(s, t):\n    if s == t:\n        return 0\n    elif len(s) < len(t):\n        return len(t) - len(s)\n    else:\n        return len(s) - len(t)\n\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))\n", "\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[n][m]\n\n\ndef main():\n    s = input()\n    t = input()\n    print(solve(s, t))\n\n\nif __name__ == '__main__':\n    main()\n", "var fs = require('fs');\nvar readline = require('readline');\nvar stream = require('stream');\n\nvar instream = fs.createReadStream('input.txt');\nvar outstream = new stream;\nvar rl = readline.createInterface(instream, outstream);\n\nrl.on('line', function(line) {\n  console.log(line);\n});\n\nrl.on('close', function() {\n  console.log('done reading file.')\n});\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\n#define BUF_SIZE 10\n\nint main(int argc, char *argv[])\n{\n    int fd;\n    char buf[BUF_SIZE];\n    ssize_t numRead;\n\n    if (argc != 2 || strcmp(argv[1], \"--help\") == 0) {\n        printf(\"%s file\\n\", argv[0]);\n        exit(EXIT_FAILURE);\n    }\n\n    fd = open(argv[1], O_RDONLY);\n    if (fd == -1) {\n        printf(\"open file failed\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    while ((numRead = read(fd, buf, BUF_SIZE)) > 0) {\n        if (write(STDOUT_FILENO, buf, numRead) != numRead) {\n            printf(\"couldn't write whole buffer\\n\");\n            exit(EXIT_FAILURE);\n        }\n    }\n\n    if (numRead == -1) {\n        printf(\"read file failed\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (close(fd) == -1) {\n        printf(\"close file failed\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    return 0;\n}\n", "\n\ndef solve(a, b, c):\n    return max(a, b, c) - min(a, b, c)\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(solve(a, b, c))\n"]