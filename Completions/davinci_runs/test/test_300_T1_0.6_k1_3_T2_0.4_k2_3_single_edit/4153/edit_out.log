2022-04-18 05:25:45.723385 num operations 1
2022-04-18 05:25:45.723406 size on input set 1
2022-04-18 05:25:49.650715 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n\ns = stdin.readline()\nprint s\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n"
    }
  ],
  "created": 1650259545,
  "object": "edit"
}
2022-04-18 05:25:49.651120 fix syntax errors 3 ["\n\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n", '\nfrom sys import stdin\n\ns = stdin.readline()\nprint s\n', "\n\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n"]
2022-04-18 05:25:49.651161 size on output set 2
2022-04-18 05:25:49.651180 num operations 1
2022-04-18 05:25:49.651190 size on input set 1
2022-04-18 05:25:53.260588 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Aug  3 15:20:59 2018\n\n@author: yiqian\n\"\"\"\n\nfrom collections import deque\n\nn = int(raw_input())\ns = deque(raw_input())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "from collections import deque\n\nn = int(input())\ns = deque(input().split())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\n \nfrom collections import deque\n\nn = int(input())\ns = deque(input())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n"
    }
  ],
  "created": 1650259549,
  "object": "edit"
}
2022-04-18 05:25:53.260876 fix syntax errors 3 ['#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Fri Aug  3 15:20:59 2018\n\n@author: yiqian\n"""\n\nfrom collections import deque\n\nn = int(raw_input())\ns = deque(raw_input())\n\ncount = 0\nwhile s:\n    if s[0] == \'0\':\n        count += 1\n        s.popleft()\n    elif s[0] == \'1\':\n        if len(s) > 1 and s[1] == \'0\':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n', "from collections import deque\n\nn = int(input())\ns = deque(input().split())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n", "\n \nfrom collections import deque\n\nn = int(input())\ns = deque(input())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n"]
2022-04-18 05:25:53.260927 size on output set 3
2022-04-18 05:25:53.260949 num operations 1
2022-04-18 05:25:53.260961 size on input set 1
2022-04-18 05:25:58.045077 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables.\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter.\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal.\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop.\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n"
    },
    {
      "index": 1,
      "text": "\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables.\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter.\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal.\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop.\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n"
    },
    {
      "index": 2,
      "text": "\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n"
    }
  ],
  "created": 1650259553,
  "object": "edit"
}
2022-04-18 05:25:58.045321 fix syntax errors 3 ['\n\ndef find_max_removal(s):\n    """\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    """\n    # Initialize variables.\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter.\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal.\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop.\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == "__main__":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n', '\ndef find_max_removal(s):\n    """\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    """\n    # Initialize variables.\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter.\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal.\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop.\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == "__main__":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n', '\ndef find_max_removal(s):\n    """\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    """\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == "__main__":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n']
2022-04-18 05:25:58.045568 size on output set 3
