["\n\ndef main():\n    n, m, k = map(int, input().split())  # n: number of rows, m: number of columns, k: modulo\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]  # dp[i][j]: maximum sum of the first i columns with modulo k\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m // 2 + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m // 2 + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "def solve(n, m, k, A):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\n\ndef main():\n    n, m, k = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(k):\n            for r in range(n):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1])\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1])\n    print(max(dp[m][0], dp[m][k // 2]))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(k):  # j: \u548c\n            for r in range(k):  # r: \u524d\u4e00\u4e2a\u6570\u7684\u548c\n                dp[i][j] = max(dp[i][j], dp[i - 1][r] + matrix[i - 1][(j - r) % k])\n    print(max(dp[n]))\n\nif __name__ == \"__main__\":\n    main()\n", "n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n"]