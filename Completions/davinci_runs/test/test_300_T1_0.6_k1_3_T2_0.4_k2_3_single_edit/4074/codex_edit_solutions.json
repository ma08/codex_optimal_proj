["\n\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k + 1):\n        if n % i == 0:\n            packages = n // i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef get_min_packets(shovels, types):\n    if shovels < 0: return None\n    if shovels == 0: return 0\n    if shovels == 1: return 1\n\n    min_packets = sys.maxsize\n    for t in range(types, 0, -1):\n        packets = get_min_packets(shovels - t, types)\n        if packets is not None and packets < min_packets: min_packets = packets\n    if min_packets == sys.maxsize: return None\n    return min_packets + 1\n\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nn,k = map(int,input().split())\nif n%k == 0:\n    print(n//k)\nelse:\n    print(n//k + 1)\n", "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n//k\n    for i in range(1, k+1):\n        if n % i == 0:\n            packages = n//i + 1\n            if packages < min_packages and packages <= k:\n                min_packages = packages - 1\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "#!/usr/bin/env python3\n\nimport sys\n\n\ndef get_min_packets(shovels, types, cache):\n    if shovels < 0 or types == 0:\n        return sys.maxsize\n\n    if shovels == 0:\n        return 0\n\n    if cache[shovels][types] != -1:\n        return cache[shovels][types]\n\n    min_packets = sys.maxsize - 1\n    for t in range(1, types + 1):\n        packets = get_min_packets(shovels - t, types, cache)\n        if packets < min_packets:\n            min_packets = packets\n\n    cache[shovels][types] = min_packets + 1\n    return cache[shovels][types]\n\ndef main():\n    sys.setrecursionlimit(10**6)\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        cache = [[-1 for _ in range(K + 1)] for _ in range(N + 1)]\n        print(get_min_packets(N, K, cache))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# t = int(input())\n# for i in range(t):\n#     n,k = map(int,input().split())\n#     if n%k == 0:\n#         print(n//k)\n#     else:\n#         print(n//k + 1)\n", "\nimport sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef get_min_packets(shovels, types):\n    if shovels < 0:  # if shovels is negative, we can't buy any shovels\n        return None\n    if shovels == 0:  # if shovels is zero, we don't need to buy any shovels\n        return 0\n    if shovels == 1:  # if shovels is one, we have to buy a packet of one shovel\n        return 1\n\n    min_packets = sys.maxsize  # set min_packets to max value\n    for t in range(types, 0, -1):  # iterate from types to 1\n        packets = get_min_packets(shovels - t, types)  # get min packets for shovels - t\n        if packets is not None and packets < min_packets:  # if packets is not None and less than min_packets\n            min_packets = packets  # update min_packets\n    if min_packets == sys.maxsize:  # if min_packets is still max value, we can't buy any shovels\n        return None\n    return min_packets + 1  # return min_packets + 1\n\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for t in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        print(get_min_packets(N, K))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_min_packages(n, k):\n    if n <= k:\n        return 1\n    min_packages = n\n    for i in range(1, k + 1):\n        if n % i == 0:\n            packages = n // i\n            if packages < min_packages:\n                min_packages = packages\n    return min_packages\n\nif __name__ == '__main__':\n    n_tests = int(sys.stdin.readline())\n    for i in range(n_tests):\n        n, k = [int(x) for x in sys.stdin.readline().split()]\n        min_packages = get_min_packages(n, k)\n        print(min_packages)\n", "\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    if n%k == 0:\n        print(n//k)\n    else:\n        print(n//k + 1)\n"]