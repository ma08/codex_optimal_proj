2022-04-18 06:04:37.151679 num operations 1
2022-04-18 06:04:37.151700 size on input set 1
2022-04-18 06:04:39.166961 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650261877,
  "object": "edit"
}
2022-04-18 06:04:39.167171 fix syntax errors 3 ['import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n', 'import math\n\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-18 06:04:39.167194 size on output set 2
2022-04-18 06:04:39.167219 num operations 1
2022-04-18 06:04:39.167224 size on input set 1
2022-04-18 06:04:42.480074 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i-1)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i+1)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650261879,
  "object": "edit"
}
2022-04-18 06:04:42.480320 fix syntax errors 3 ['\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i-1)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i+1)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-18 06:04:42.480352 size on output set 2
2022-04-18 06:04:42.480363 num operations 1
2022-04-18 06:04:42.480369 size on input set 1
2022-04-18 06:04:48.573655 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert main(6, 2) == 2\nassert main(15, 4) == 4\nassert main(20, 5) == 4\nassert main(1, 1) == 1\n"
    },
    {
      "index": 1,
      "text": "\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main():\n    # n = int(input().split()[0])\n    n = int(input().split()[0])\n    d = int(input().split()[1])\n    # d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nprint(main())\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    }
  ],
  "created": 1650261882,
  "object": "edit"
}
2022-04-18 06:04:48.573915 fix syntax errors 3 ['\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main(n, d):\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert main(6, 2) == 2\nassert main(15, 4) == 4\nassert main(20, 5) == 4\nassert main(1, 1) == 1\n', '\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main():\n    # n = int(input().split()[0])\n    n = int(input().split()[0])\n    d = int(input().split()[1])\n    # d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n\nmain()\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nprint(main())\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n']
2022-04-18 06:04:48.573946 size on output set 3
