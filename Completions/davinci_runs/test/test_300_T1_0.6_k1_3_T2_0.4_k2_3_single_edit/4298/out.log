2022-04-18 04:12:57.797379 """
There are N apple trees in a row. People say that one of them will bear golden apples.
We want to deploy some number of inspectors so that each of these trees will be inspected.
Each inspector will be deployed under one of the trees. For convenience, we will assign numbers from 1 through N to the trees. An inspector deployed under the i-th tree (1 \leq i \leq N) will inspect the trees with numbers between i-D and i+D (inclusive).
Find the minimum number of inspectors that we need to deploy to achieve the objective.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 20
 - 1 \leq D \leq 20

-----Input-----
Input is given from Standard Input in the following format:
N D

-----Output-----
Print the minimum number of inspectors that we need to deploy to achieve the objective.

-----Sample Input-----
6 2

-----Sample Output-----
2

We can achieve the objective by, for example, placing an inspector under Tree 3 and Tree 4.
"""
2022-04-18 04:12:57.797396 --------------------------
2022-04-18 04:13:26.405227 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main(n, d):\n    # n = int(input().split()[0])\n    # d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)"
    }
  ],
  "created": 1650255177,
  "id": "cmpl-4yD2vFG37Bq4aTxX5J9A7BLWqHL2g",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 04:13:26.405486 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 04:13:26.405539 REASON stop
2022-04-18 04:13:26.421232 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 04:13:26.421307 REASON stop
2022-04-18 04:13:26.421843 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# n = int(input().split()[0])\n# d = int(input().split()[1])\n\ndef main(n, d):\n    # n = int(input().split()[0])\n    # d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nassert (main(6, 2) == 2)\nassert (main(15, 4) == 4)\nassert (main(20, 5) == 4)\nassert (main(1, 1) == 1)"
}
2022-04-18 04:13:26.421902 REASON stop
