2022-04-18 04:59:48.623722 num operations 1
2022-04-18 04:59:48.623753 size on input set 1
2022-04-18 04:59:52.199895 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# Solution\n#\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n#\na.sort()\n#\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n#\n# Pocket number assigned to each coin value\nlast_pocket = {}\n#\n# Number of pockets used\nnum_pockets = 0\n#\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n#\nprint(num_pockets)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    },
    {
      "index": 2,
      "text": "\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    }
  ],
  "created": 1650257988,
  "object": "edit"
}
2022-04-18 04:59:52.200109 fix syntax errors 3 ['\n#\n# Solution\n#\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n#\na.sort()\n#\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n#\n# Pocket number assigned to each coin value\nlast_pocket = {}\n#\n# Number of pockets used\nnum_pockets = 0\n#\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n#\nprint(num_pockets)\n', '\n#\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n', '\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n']
2022-04-18 04:59:52.200163 size on output set 3
2022-04-18 04:59:52.200173 num operations 1
2022-04-18 04:59:52.200179 size on input set 1
2022-04-18 04:59:55.854629 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    }
  ],
  "created": 1650257992,
  "object": "edit"
}
2022-04-18 04:59:55.854805 fix syntax errors 3 ['\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n']
2022-04-18 04:59:55.854833 size on output set 1
2022-04-18 04:59:55.854844 num operations 1
2022-04-18 04:59:55.854849 size on input set 1
2022-04-18 04:59:58.918137 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input()) \na = [int(x) for x in input().split()] \nprint(len(set(a))) \n"
    }
  ],
  "created": 1650257995,
  "object": "edit"
}
2022-04-18 04:59:58.918305 fix syntax errors 3 ['n = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', '#!/usr/bin/env python3\n\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', '\nn = int(input()) \na = [int(x) for x in input().split()] \nprint(len(set(a))) \n']
2022-04-18 04:59:58.918328 size on output set 3
