2022-04-18 05:46:27.108148 num operations 1
2022-04-18 05:46:27.108168 size on input set 1
2022-04-18 05:47:04.428243 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "// file.js\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  /**\n   * @param {string} dirname\n   * @returns {string[]}\n   */\n  readdirRecursiveSync: dirname => {\n    let results = [];\n\n    fs.readdirSync(dirname).forEach(file => {\n      file = path.resolve(dirname, file);\n      const stat = fs.statSync(file);\n\n      if (stat && stat.isDirectory()) {\n        results = results.concat(module.exports.readdirRecursiveSync(file));\n      } else {\n        results.push(file);\n      }\n    });\n\n    return results;\n  }\n};\n"
    },
    {
      "index": 1,
      "text": "var fs = require('fs');\n\nvar file = fs.readFileSync(process.argv[2]);\nvar lines = file.toString().split('\\n').length - 1;\nconsole.log(lines);\n"
    },
    {
      "index": 2,
      "text": "import os\n\n# print(os.getcwd())\n\n# os.chdir('/Users/josephinebutler/Desktop/')\n# print(os.getcwd())\n\n# os.mkdir('OS-Demo-2')\n# os.makedirs('OS-Demo-2/Sub-Dir-1')\n# os.rmdir('OS-Demo-2')\n# os.removedirs('OS-Demo-2/Sub-Dir-1')\n\n# print(os.listdir())\n\n# os.rename('test.txt', 'demo.txt')\n\n# print(os.stat('demo.txt').st_size)\n# print(os.stat('demo.txt').st_mtime)\n\n# from datetime import datetime\n\n# mod_time = os.stat('demo.txt').st_mtime\n\n# print(datetime.fromtimestamp(mod_time))\n\n# for dirpath, dirnames, filenames in os.walk('/Users/josephinebutler/Desktop/'):\n#     print('Current Path:', dirpath)\n#     print('Directories:', dirnames)\n#     print('Files:', filenames)\n#     print()\n\n# print(os.environ.get('HOME'))\n\n# file_path = os.path.join(os.environ.get('HOME'), 'test.txt')\n# print(file_path)\n\n# print(os.path.basename('/tmp/test.txt'))\n# print(os.path.dirname('/tmp/test.txt'))\n# print(os.path.split('/tmp/test.txt'))\n# print(os.path.exists('/tmp/test.txt'))\n# print(os.path.isdir('/tmp/test.txt'))\n# print(os.path.isfile('/tmp/test.txt'))\n# print(os.path.splitext('/tmp/test.txt'))\n\n# print(dir(os.path))\n\n# from pathlib import Path\n\n# path = Path('.')\n# for file in path.glob('*'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.gl\n"
    }
  ],
  "created": 1650260787,
  "object": "edit"
}
2022-04-18 05:47:04.428463 fix syntax errors 3 ["// file.js\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  /**\n   * @param {string} dirname\n   * @returns {string[]}\n   */\n  readdirRecursiveSync: dirname => {\n    let results = [];\n\n    fs.readdirSync(dirname).forEach(file => {\n      file = path.resolve(dirname, file);\n      const stat = fs.statSync(file);\n\n      if (stat && stat.isDirectory()) {\n        results = results.concat(module.exports.readdirRecursiveSync(file));\n      } else {\n        results.push(file);\n      }\n    });\n\n    return results;\n  }\n};\n", "var fs = require('fs');\n\nvar file = fs.readFileSync(process.argv[2]);\nvar lines = file.toString().split('\\n').length - 1;\nconsole.log(lines);\n", "import os\n\n# print(os.getcwd())\n\n# os.chdir('/Users/josephinebutler/Desktop/')\n# print(os.getcwd())\n\n# os.mkdir('OS-Demo-2')\n# os.makedirs('OS-Demo-2/Sub-Dir-1')\n# os.rmdir('OS-Demo-2')\n# os.removedirs('OS-Demo-2/Sub-Dir-1')\n\n# print(os.listdir())\n\n# os.rename('test.txt', 'demo.txt')\n\n# print(os.stat('demo.txt').st_size)\n# print(os.stat('demo.txt').st_mtime)\n\n# from datetime import datetime\n\n# mod_time = os.stat('demo.txt').st_mtime\n\n# print(datetime.fromtimestamp(mod_time))\n\n# for dirpath, dirnames, filenames in os.walk('/Users/josephinebutler/Desktop/'):\n#     print('Current Path:', dirpath)\n#     print('Directories:', dirnames)\n#     print('Files:', filenames)\n#     print()\n\n# print(os.environ.get('HOME'))\n\n# file_path = os.path.join(os.environ.get('HOME'), 'test.txt')\n# print(file_path)\n\n# print(os.path.basename('/tmp/test.txt'))\n# print(os.path.dirname('/tmp/test.txt'))\n# print(os.path.split('/tmp/test.txt'))\n# print(os.path.exists('/tmp/test.txt'))\n# print(os.path.isdir('/tmp/test.txt'))\n# print(os.path.isfile('/tmp/test.txt'))\n# print(os.path.splitext('/tmp/test.txt'))\n\n# print(dir(os.path))\n\n# from pathlib import Path\n\n# path = Path('.')\n# for file in path.glob('*'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.glob('**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*.py'):\n#     print(file)\n\n# path = Path()\n# for file in path.gl\n"]
2022-04-18 05:47:04.428621 size on output set 3
2022-04-18 05:47:04.428635 num operations 1
2022-04-18 05:47:04.428641 size on input set 1
2022-04-18 05:47:07.868862 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1) \n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else 'NO')\n"
    },
    {
      "index": 2,
      "text": "from sys import stdin\nfrom bisect import bisect_left\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n"
    }
  ],
  "created": 1650260824,
  "object": "edit"
}
2022-04-18 05:47:07.869010 fix syntax errors 3 ['\nfrom sys import stdin\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1) \n', "\nfrom sys import stdin\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else 'NO')\n", 'from sys import stdin\nfrom bisect import bisect_left\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n']
2022-04-18 05:47:07.869033 size on output set 3
2022-04-18 05:47:07.869043 num operations 1
2022-04-18 05:47:07.869049 size on input set 1
2022-04-18 05:47:10.590701 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "# https://codeforces.com/contest/1154/problem/A\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(l[0])\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650260827,
  "object": "edit"
}
2022-04-18 05:47:10.590916 fix syntax errors 3 ["\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "# https://codeforces.com/contest/1154/problem/A\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(l[0])\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 05:47:10.590946 size on output set 3
