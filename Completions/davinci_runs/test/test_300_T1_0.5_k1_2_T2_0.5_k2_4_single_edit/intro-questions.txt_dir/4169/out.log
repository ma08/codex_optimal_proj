2022-04-09 18:56:37.059638 """
Hearing that energy drinks increase rating in those sites, Takahashi decides to buy up M cans of energy drinks.
There are N stores that sell energy drinks. In the i-th store, he can buy at most B_i cans of energy drinks for A_i yen (the currency of Japan) each.
What is the minimum amount of money with which he can buy M cans of energy drinks?
It is guaranteed that, in the given inputs, a sufficient amount of money can always buy M cans of energy drinks.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N, M \leq 10^5
 - 1 \leq A_i \leq 10^9
 - 1 \leq B_i \leq 10^5
 - B_1 + ... + B_N \geq M

-----Input-----
Input is given from Standard Input in the following format:
N M
A_1 B_1
A_2 B_2
\vdots
A_N B_N

-----Output-----
Print the minimum amount of money with which Takahashi can buy M cans of energy drinks.

-----Sample Input-----
2 5
4 9
2 4

-----Sample Output-----
12

With 12 yen, we can buy one drink at the first store and four drinks at the second store, for the total of five drinks. However, we cannot buy 5 drinks with 11 yen or less.
"""
2022-04-09 18:56:37.059657 --------------------------
2022-04-09 18:56:49.074795 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, M = [int(x) for x in input().split()]\n    price_list = []\n    for i in range(N):\n        price_list.append([int(x) for x in input().split()])\n    price_list.sort()\n    total = 0\n    while M > 0:\n        if price_list[0][1] >= M:\n            total += price_list[0][0] * M\n            M = 0\n        else:\n            total += price_list[0][0] * price_list[0][1]\n            M -= price_list[0][1]\n            price_list.pop(0)\n    print(total)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\n\ncost = []\nfor _ in range(n):\n  a, b = map(int, input().split())\n  cost.append((a, b))\n\ncost.sort()\n\nprice = 0\nfor c in cost:\n  if m - c[1] > 0:\n    price += c[0] * c[1]\n    m -= c[1]\n  else:\n    price += c[0] * m\n    break\n\nprint(price)"
    }
  ],
  "created": 1649544997,
  "id": "cmpl-4vEIPMsZUCid28RJsg070YV3ehUF1",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 18:56:49.074994 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, M = [int(x) for x in input().split()]\n    price_list = []\n    for i in range(N):\n        price_list.append([int(x) for x in input().split()])\n    price_list.sort()\n    total = 0\n    while M > 0:\n        if price_list[0][1] >= M:\n            total += price_list[0][0] * M\n            M = 0\n        else:\n            total += price_list[0][0] * price_list[0][1]\n            M -= price_list[0][1]\n            price_list.pop(0)\n    print(total)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 18:56:49.075039 REASON stop
2022-04-09 18:56:49.100933 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\n\ncost = []\nfor _ in range(n):\n  a, b = map(int, input().split())\n  cost.append((a, b))\n\ncost.sort()\n\nprice = 0\nfor c in cost:\n  if m - c[1] > 0:\n    price += c[0] * c[1]\n    m -= c[1]\n  else:\n    price += c[0] * m\n    break\n\nprint(price)"
}
2022-04-09 18:56:49.101018 REASON stop
