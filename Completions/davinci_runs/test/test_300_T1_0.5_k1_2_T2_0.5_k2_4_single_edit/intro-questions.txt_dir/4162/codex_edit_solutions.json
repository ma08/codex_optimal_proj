["\nimport sys\ndef main(argv):\n    if len(argv) != 2:\n        print('usage: python3 {} <input file> <output file>'.format(argv[0]))\n        exit()\n    with open(argv[1], 'r') as f:\n        with open(argv[2], 'w') as g:\n            line = f.readline()\n            while line:\n                g.write(line.upper())\n                line = f.readline()\nif __name__ == \"__main__\":\n    main(sys.argv)\n", "\n\nif __name__ == '__main__':\n    N = int(input())\n    A = map(int, input().split())\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - math.gcd(A[i], A[j]))\n    print(max_f)\n", "\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, ((lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j]))\n    print(ret)\n\nif __name__ == '__main__':\n    main()\n", "\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j])\n    print(ret)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom math import gcd\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    ret = k\n    for i in range(n):\n        ret = min(ret, a[i] // gcd(a[i], k))\n    print(ret * k)\n\nif __name__ == '__main__':\n    main()\n", "\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n"]