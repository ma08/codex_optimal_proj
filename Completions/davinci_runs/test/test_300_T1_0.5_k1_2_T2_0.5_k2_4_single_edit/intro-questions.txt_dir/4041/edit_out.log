2022-04-17 23:50:20.476097 num operations 1
2022-04-17 23:50:20.476117 size on input set 1
2022-04-17 23:50:30.485289 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1  # add 1 to the previous longest subsequence\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])  # take the max of the previous row and column\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 1,
      "text": "\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1.\n# Each element represents the length of the longest subsequence of the sub in a substring of inp.\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 3,
      "text": "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    }
  ],
  "created": 1650239420,
  "object": "edit"
}
2022-04-17 23:50:30.485520 fix syntax errors 4 ['\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1  # add 1 to the previous longest subsequence\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])  # take the max of the previous row and column\n\nprint(len(inp) - dp[-1][-1])\n', '\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1.\n# Each element represents the length of the longest subsequence of the sub in a substring of inp.\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(len(inp) - dp[-1][-1])\n', '#!/usr/bin/env python3\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n', '\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n']
2022-04-17 23:50:30.485580 size on output set 4
2022-04-17 23:50:30.485592 num operations 1
2022-04-17 23:50:30.485598 size on input set 1
2022-04-17 23:50:41.957808 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n\n    # Populate the matrix\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n\n\nprint(len(s) - get_lcs(s, t))\n"
    },
    {
      "index": 1,
      "text": "\n\ns = input(\"Enter a string: \")\nt = input(\"Enter another string: \")\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(\"The number of characters to be deleted is: \" + str(len(s) - get_lcs(s,t)))\n"
    },
    {
      "index": 2,
      "text": "\n\ns = 'abc'\nt = 'abc'\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n"
    },
    {
      "index": 3,
      "text": "\n\n# s = input()\n# t = input()\n#\n# def get_lcs(s,t):\n#     # Create a DP matrix\n#     dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n#\n#     # Populate the matrix\n#     for i in range(1, len(t)+1):\n#         for j in range(1, len(s)+1):\n#             if t[i-1] == s[j-1]:\n#                 dp[i][j] = dp[i-1][j-1] + 1\n#             else:\n#                 dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n#\n#     return dp[-1][-1]\n#\n# print(len(s) - get_lcs(s,t))\n"
    }
  ],
  "created": 1650239430,
  "object": "edit"
}
2022-04-17 23:50:41.958008 fix syntax errors 4 ['\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n\n    # Populate the matrix\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n\n\nprint(len(s) - get_lcs(s, t))\n', '\n\ns = input("Enter a string: ")\nt = input("Enter another string: ")\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint("The number of characters to be deleted is: " + str(len(s) - get_lcs(s,t)))\n', "\n\ns = 'abc'\nt = 'abc'\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n", '\n\n# s = input()\n# t = input()\n#\n# def get_lcs(s,t):\n#     # Create a DP matrix\n#     dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n#\n#     # Populate the matrix\n#     for i in range(1, len(t)+1):\n#         for j in range(1, len(s)+1):\n#             if t[i-1] == s[j-1]:\n#                 dp[i][j] = dp[i-1][j-1] + 1\n#             else:\n#                 dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n#\n#     return dp[-1][-1]\n#\n# print(len(s) - get_lcs(s,t))\n']
2022-04-17 23:50:41.958111 size on output set 4
