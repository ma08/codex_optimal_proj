2022-04-18 00:57:30.272444 num operations 1
2022-04-18 00:57:30.272464 size on input set 1
2022-04-18 00:57:38.160502 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = {}\n    for name in names:\n        if name[0] in dic:\n            dic[name[0]] += 1\n        else:\n            dic[name[0]] = 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport collections\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = collections.defaultdict(int)\n    for name in names:\n        dic[name[0]] += 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = dict()\n    for name in names:\n        dic[name[0]] = dic.get(name[0], 0) + 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)-2):\n        for j in range(i+1, len(keys)-1):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]  # O(N^3)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = {}\n    for name in names:\n        if name[0] in dic:\n            dic[name[0]] += 1\n        else:\n            dic[name[0]] = 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650243450,
  "object": "edit"
}
2022-04-18 00:57:38.160780 fix syntax errors 4 ["\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = {}\n    for name in names:\n        if name[0] in dic:\n            dic[name[0]] += 1\n        else:\n            dic[name[0]] = 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport collections\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = collections.defaultdict(int)\n    for name in names:\n        dic[name[0]] += 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = dict()\n    for name in names:\n        dic[name[0]] = dic.get(name[0], 0) + 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)-2):\n        for j in range(i+1, len(keys)-1):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]  # O(N^3)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = {}\n    for name in names:\n        if name[0] in dic:\n            dic[name[0]] += 1\n        else:\n            dic[name[0]] = 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 00:57:38.160833 size on output set 4
2022-04-18 00:57:38.160843 num operations 1
2022-04-18 00:57:38.160849 size on input set 1
2022-04-18 00:57:42.591361 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO https://atcoder.jp/contests/abc117/tasks/abc117_d\n"
    },
    {
      "index": 1,
      "text": "\n\n# https://atcoder.jp/contests/abc117/tasks/abc117_c\n# TODO\n# https://atcoder.jp/contests/abc117/tasks/abc117_d\n"
    },
    {
      "index": 2,
      "text": "\n\n# TODO:\n# https://atcoder.jp/contests/abc117/tasks/abc117_d\n"
    },
    {
      "index": 3,
      "text": "\n\n\n# TODO\n# https://atcoder.jp/contests/abc117/tasks/abc117_d\n"
    }
  ],
  "created": 1650243458,
  "object": "edit"
}
2022-04-18 00:57:42.591537 fix syntax errors 4 ['\n\n# TODO https://atcoder.jp/contests/abc117/tasks/abc117_d\n', '\n\n# https://atcoder.jp/contests/abc117/tasks/abc117_c\n# TODO\n# https://atcoder.jp/contests/abc117/tasks/abc117_d\n', '\n\n# TODO:\n# https://atcoder.jp/contests/abc117/tasks/abc117_d\n', '\n\n\n# TODO\n# https://atcoder.jp/contests/abc117/tasks/abc117_d\n']
2022-04-18 00:57:42.591586 size on output set 4
