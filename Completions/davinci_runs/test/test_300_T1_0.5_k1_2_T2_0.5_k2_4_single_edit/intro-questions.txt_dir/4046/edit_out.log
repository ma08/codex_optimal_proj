2022-04-17 23:51:47.951128 num operations 1
2022-04-17 23:51:47.951169 size on input set 1
2022-04-17 23:51:53.446620 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split(' ')]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1 or n == 0:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1] * n\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef get_input(n, q):\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input(n, q)\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650239508,
  "object": "edit"
}
2022-04-17 23:51:53.446881 fix syntax errors 4 ['import sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split(\' \')]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1 or n == 0:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1] * n\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef get_input(n, q):\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input(n, q)\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-17 23:51:53.446939 size on output set 4
2022-04-17 23:51:53.446956 num operations 1
2022-04-17 23:51:53.446962 size on input set 1
2022-04-17 23:51:57.541218 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\n\ndef solve(n, q):\n    p = [1, ]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650239513,
  "object": "edit"
}
2022-04-17 23:51:57.541479 fix syntax errors 4 ['#!/usr/bin/env python3\n\n\ndef solve(n, q):\n    p = [1, ]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-17 23:51:57.541511 size on output set 2
