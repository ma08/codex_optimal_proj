["\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\ndef count_substring(string, sub):\n    count = start = 0\n    while True:\n        start = string.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\n# as a substring\ndef count_substring_substring(string, sub):\n    count = 0\n    for i in range(len(string) - 1):\n        if sub in string[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n", "import sys\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\n# as a substring\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s)):\n        if sub in s[i:i+3]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query\ndef solve(input):\n    n, q, string, queries = split_input(input.strip())\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n", "import sys\n\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\n# as a substring\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n", "\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)]\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0]-1:lr[i][1]].count(\"AC\"))\n    for i in ans:\n        print(i)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport numpy as np\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 7)\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nN, Q = map(int, input().split())\nS = input()\n\nlr = [list(map(int, input().split())) for _ in range(Q)]\n\n# print(N, Q)\n# print(S)\n# print(lr)\n\n\ndef main2():\n    ans = []\n    for i in range(Q):\n        ans.append(S[lr[i][0] - 1:lr[i][1]].count(\"AC\"))\n    for i in ans:\n        print(i)\n\n\n\ndef main():\n    # 1 1 1 1 1 0 0\n    # 0 0 1 1 1 1 1\n    # 1 1 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 1 1 1 1 1\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 1 1 1 1 1 1 1\n    # 1 1 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0\n    #\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\n# as a substring\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 2):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n", "\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)]\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0]-1:lr[i][1]].count(\"ABC\"))\n    for i in ans:\n        print(i)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    for _ in range(q):\n        l, r = map(int, input().split())\n        print(s[l-1:r].count(\"AC\"))\n\n\nif __name__ == '__main__':\n    main()\n"]