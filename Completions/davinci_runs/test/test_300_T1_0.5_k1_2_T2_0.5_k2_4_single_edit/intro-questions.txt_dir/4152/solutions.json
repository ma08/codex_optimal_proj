["from collections import defaultdict\nmaxn = 2000000000\n\nmk = []\nbs = 1\n\nwhile bs <= maxn:\n    mk.append(bs)\n    bs *= 2\n\nn = int(input())\nls = [int(i) for i in input().split()]\n\ndic = defaultdict(int)\nfor i in ls:\n    dic[i] += 1\n\ncnt = 0\nfor i in ls:\n    dic[i] -= 1\n    flag = False\n    for j in mk:\n        if dic[j - i] > 0:\n            flag = True\n            break\n\n    if not flag:\n        cnt += 1\n    dic[i] += 1\n\nprint(cnt)\n", "from collections import defaultdict\n\nn = int(input())\na = [int(i) for i in input().split()]\narr = defaultdict(int)\n\nfor i in a:\n    arr[i] += 1\n\npowers = [1 << i for i in range(32)]\ncount = 0\n\nx = list(arr.items())\n\nfor i, c in x:\n\n    good = 0\n\n    for p in powers:\n        n = p - i\n        if n == i:\n            if arr[n] > 1:\n                good = 1\n                break\n        else:\n            if arr.get(n):\n                good = 1\n                break\n    if good == 0:\n        count += c\n\nprint(count)\n", "n = int(input())\na = list(map(int, input().split()))\nb = [1]\nx = 1\nfor i in range(64):\n    b.append(x * 2)\n    x *= 2\n\ndict = {}\nans = 0\n\nfor i in a:\n    try:\n        if dict[i] > 0:\n            dict[i] += 1\n    except KeyError:\n        dict[i] = 1\n\n\nfor i in a:\n    tmp = 0\n    for j in b:\n        try:\n            if i == j - i and dict[i] < 2:\n                pass\n            elif j - i > 0 and dict[j - i]:\n                tmp = 0\n                break\n        except KeyError:\n            tmp = 1\n    ans += tmp\n\nprint(ans)", "from math import log, ceil\nn = int(input())\nnumbers = list(map(int, input().split(\" \")))\n\noccurences = {}\nfor m in numbers:\n    if m in list(occurences.keys()):\n        occurences[m] += 1\n    else:\n        occurences[m] = 1\n\ncount = 0\nfor m in list(occurences.keys()):\n    l = ceil(log(m, 2))\n    found = False\n    for i in range(l, 31):\n        if 2 ** i - m == m:\n            if occurences[m] > 1:\n                found = True\n                break\n        elif 2 ** i - m in list(occurences.keys()):\n            found = True\n            break\n    if not found:\n        count += occurences[m]\n\nprint(count)\n", "n = int(input())\na = [int(x) for x in input().split()]\na2 = [2<<k for k in range(32)]\nd = dict()\nfor c in a:\n    d[c] = d.setdefault(c, 0)+1\ncnt = 0\nfor c in a:\n    cnt += 1\n    for c2 in a2:\n        if c2 > c and c2-c in d.keys():\n            if c2-c != c or d[c] != 1:\n                cnt -= 1\n                break\nprint(cnt)", "import sys\nimport os\n\ndef powerOfTwo(arr):\n    p2 = set()\n    for i in range(32):\n        p2.add(2**i)\n\n    x = set()\n    pending = dict()\n    for e in arr:\n        if e in pending:\n            if e in p2:\n                del(pending[e])\n            else:\n                pending[e] += 1\n            continue\n        if e in x:\n            continue\n\n        found = False\n        t = 1\n        for i in range(32):\n            if t - e in x:\n                found = True\n            if t - e in pending:\n                del(pending[t - e])\n            t *= 2\n\n        if not found:\n            if e in pending:\n                pending[e] += 1\n            else:\n                pending[e] = 1\n\n        x.add(e)\n\n    result = 0\n    for _, v in pending.items():\n        result += v\n\n    return result\n\n\ndef main():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    print(powerOfTwo(arr))\n\ndef __starting_point():\n    main()\n__starting_point()", "n=int(input())\nL=list(map(int,input().split()))\ns=set(L)\nss=s.copy()\ndic=dict()\nfor i in L:\n    dic[i]=0\nfor i in L:\n    dic[i]+=1\n\nfor i in s.copy():\n    for j in range(32):\n        t=1<<j\n        if t-i in s:\n            if i!=t-i:\n                ss-={t-i,i}\n            elif dic[i]!=1:\n                ss-={i}\n                \nans=0\nfor i in ss:\n    ans+=dic[i]\n\nprint(ans)\n", "from bisect import bisect_right as bs\nn=int(input())\ns=list(map(int,input().split()))\ns.sort()\nd=dict()\nfor i in range(n):\n    try:\n        d[s[i]]+=1\n    except:\n        d.update({s[i]:1})\nans=0\nd1=dict()\nfor i in range(n-1,-1,-1):\n    x=len(bin(s[i]))-2\n    y=2**x\n    dif=abs(y-s[i])\n    ind=bs(s,dif)\n    if s[ind-1]==dif:\n        if s[ind-1]==s[i] and  d[s[i]]==1:\n            True\n        else:\n            d1.update({s[i]:1})\n            d1.update({s[ind-1]:1})\n            \nfor i in range(n):\n    try:\n        d1[s[i]]\n    except:\n        ans+=1\nprint(ans)\n    \n", "import bisect\nn = int(input())\nnums = list(map(int,input().split()))\npows = [pow(2,x) for x in range(31)]\ndict = {}\nfor num in nums:\n  if num not in dict:\n    dict[num] = 1\n  else:\n    dict[num] += 1\n\ncount = 0\nfor k,v in dict.items():\n  count += v\n  for i in range(bisect.bisect_right(pows,k),31):\n    if (pows[i] - k) in dict:\n      if pows[i] == 2*k and v == 1:\n        continue\n      count -= v\n      break\nprint(count)", "powers = [2**i for i in range(31)]\nn = int(input())\nelems = list(map(int, input().split()))\nans = n\n\ncounter = {}\n\nfor i in elems:\n    if i in list(counter.keys()):\n        counter[i] += 1\n    else:\n        counter[i] = 1\n\n\nfor i in elems:\n    for j in powers:\n        dif = j-i\n        if dif in list(counter.keys()):\n            if dif == i:\n                if counter[dif]>1:\n                    ans -= 1\n                    break\n            else:\n                ans -= 1\n                break\n\nprint(ans)\n", "import sys\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    ar = list(map(int, input().split()))\n    \n    res = n\n    freq = Counter(ar)\n    \n    for val in ar:\n        for d in range(32):\n            x = (1 << d) - val\n            if x <= 0 or not freq.get(x):\n                continue\n            \n            count = freq.get(x) - (x == val)\n            if count > 0:\n                res -= 1\n                break\n    \n    print(res)\n            \ndef __starting_point():\n    main()\n\n__starting_point()", "\nfrom bisect import bisect_left\n\ndef mi():\n\treturn map(int, input().split())\n\nn = int(input())\na = sorted(list(mi()))\n\nused = [0]*n\nma = 2*(10**9)\nfor i in range(n):\n\tt = 1\n\tif used[i]==1:\n\t\tcontinue\n\twhile t<a[i]:\n\t\tt*=2\n\ttarget = t-a[i]\n\twhile target<ma:\n\t\tfound=0\n\t\ti1 = bisect_left(a, target)\n\t\tif i1 != n and a[i1] == target:\n\t\t\twhile i1<n and  a[i1]==target:\n\t\t\t\tif a[i1]==target and i1!=i:\n\t\t\t\t\tused[i] = 1\n\t\t\t\t\tused[i1] = 1\n\t\t\t\t\tfound=1\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\ti1+=1\n\t\tt*=2\n\t\ttarget = t-a[i]\n\t\tif found:\n\t\t\tbreak\nprint(used.count(0))", "from math import *\ndict1={}\nn=int(input())\narr=list(map(int,input().split()))\nfor i in range(n):\n    try:\n        dict1[arr[i]]+=1\n    except:\n        KeyError\n        dict1[arr[i]]=1\nans=0\n#print(dict1)\nfor i in range(n):\n    flag=0\n    for j in range(ceil(log2(arr[i])),32):\n        try:\n            if(pow(2,j)==2*arr[i]):\n                if(dict1[pow(2,j)-arr[i]]>1):\n                    flag=1\n                    break\n            elif(dict1[pow(2,j)-arr[i]]>0):\n                flag=1\n                break\n        except:\n            KeyError\n    if(flag==0):\n        #print(arr[i])\n        ans+=1\nprint(ans)", "import sys\n\ndef is_power2(num):\n\treturn num != 0 and ((num & (num - 1)) == 0)\n\n\nlines = [line.strip() for line in sys.stdin.readlines()]\n\nn = int(lines[0].split(' ')[0])\na = list(map(int, lines[1].split(' ')))\n\nis_in = {}\nfor i, x in enumerate(a):\n\tis_in[x] = i\n\nto_stay = set()\n\nfor i, x in enumerate(a):\n\tfor p in range(32):\n\t\tif ((2**p) - x) in is_in and is_in[((2**p) - x)] != i:\n\t\t\t# print(str(x) + ' + ' +str(((2**p) - x)) + '=' + str(2**p))\n\t\t\tto_stay.add(i)\n\t\t\tto_stay.add(is_in[((2**p) - x)])\n\nprint(len(a) - len(to_stay))", "n = int(input())\na = list(map(int, input().split()))\nb = [2 ** i for i in range(33)]\nd = dict()\nans = 0\nfor i in a:\n    if i in d.keys():\n        d[i] += 1\n    else:\n        d[i] = 1\n\nfor i in a:\n    flag = False\n    for j in b:\n        if j - i > 0:\n            if i != j - i:\n                if j - i in d.keys():\n                    flag = True\n            elif j - i in d.keys() and d[j - i] > 1:\n                flag = True\n    if flag == False:\n        ans += 1\n\nprint(ans)", "from math import *\nn = int(input())\na = [int(x) for x in input().split(' ')]\npwrs = [2**i for i in range(1, 31)]\ncnts = {}\ns = set()\nclear = set()\nfor x in a:\n  if x not in cnts:\n    cnts[x] = 1\n    s.add(x)\n  else:\n    cnts[x] += 1\nfor x in cnts:\n  for p in pwrs:\n    if p-x in s:\n      if p-x!=x:\n        clear.add(x)\n        clear.add(p-x)\n      elif cnts[x]>1:\n        clear.add(x)\nans = 0\nfor x in s:\n  if x in clear:\n    continue\n  ans += cnts[x]\nprint(ans)", "import math\nfrom collections import defaultdict\ngetInputList = lambda : list(input().split())\ngetInputIntList = lambda : list(map(int,input().split()))\n\nn = input()\narr = getInputIntList()\n\nmyset = defaultdict(lambda:0)\nfor i in arr:\n\tmyset[i] += 1\nnset = set([])\nfor i in arr:\n\tcb = '1'+'0'*(len(bin(i))-3)\n\tif bin(i) == '0b'+cb :\n\t\tif myset[i] > 1:\n\t\t\tnset.add(i)\n\telif int(cb+'0',2)-i in myset :\n\t\t#print(i,int(cb+'0',2)-i)\n\t\tnset.add(i)\n\t\tnset.add(int(cb+'0',2)-i)\ncount = 0\nfor i in arr:\n\tif i not in nset:\n\t\tcount += 1\nprint(count)\t\t \n", "from collections import defaultdict\ncount = 0\ninput()\nL = list(map(int,input().strip().split()))\n\nPoT = [2**i for i in range(31)]\ndic = defaultdict(int)\n\nfor x in L:\n    dic[x] +=1\n\nfor x in L:\n    for y in PoT:\n        if (y-x) in list(dic.keys()):\n            if x == y-x and dic[x] == 1:\n                pass\n            else:\n                break\n    else:\n        count+=1\nprint(count)\n    \n", "import collections\n\nn=int(input())\na=input().split()\na=[int(i) for i in a]\nd=collections.Counter(a)\nc=0\nb=[0]*30\nb[0]=2\n\nfor i in range(1,30):\n    b[i]=(b[i-1]*2)\n#print(b)\n#f=0\nfor i in a:\n    f,m=0,0\n    for j in b:\n        if j-i in d:\n            f=1\n            m=j-i\n            #break\n    if f==1:\n        if i==m:\n            if d[i]<=1:\n                #print(\"f\"+str(i))\n                c+=1\n    if f==0:\n        #print(i)\n        c+=1\n    \n        #print(i)\n    \"\"\"if i not in d:\n        d[i]=1\n    else:\n        d[i]+=1\"\"\"\n#print(d)\nprint(c)", "from sys import stdin, stdout \nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict\nimport math\ncin = stdin.readline\ndef cout(x):\n\tstdout.write(str(x)+'\\n')\n\ndef nexint():\n    return int(stdin.readline())\ndef readline():\n    return list(map(int,stdin.readline().split()))\ndef readlist():\n    return list(map(int,stdin.readline().split()))\n\ndef sorted_indexes(arr):\n    return sorted(list(range(len(arr))),key=arr.__getitem__)\ndef printr(arr):\n    [stdout.write(str(x)+' ')   for x in arr]\n    cout('')\n\ndef find_lt(a, x):#'Find rightmost value less than x'\n    i = bisect_left(a, x)\n    if i:\n        return a[i-1]\n    raise ValueError\n\ndef find_gt(a, x):#'Find leftmost value greater than x'\n    i = bisect_right(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\n\n\ndef binarySearch (arr, l, r, x):\n    lo = l\n    hi = r\n    while hi >= lo:\n        mid = (hi+lo)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            hi = mid-1\n        else:\n            lo = mid+1\n    return -1\n# ---------------------Template ends-------------sdpt,sdpt131[Sudipta Banik]---------------------\n\n\n\nn = nexint()\na = readlist()\na.sort()\nmp = {}\nfor el in a:\n    if el in mp:\n        mp[el]+=1\n    else:\n        mp[el]=1\n# b = [False]*n\nans =0\nfor i in range(n):\n    k = 0\n    flg = False\n    while (k<=30):\n        key = (1<<k) - a[i]        \n        if key in mp:\n            if (1<<k) != 2*a[i]:\n                flg=True\n                break\n            else:\n                if(mp[a[i]]>1):\n                    flg = True\n                    break\n        k+=1\n        \n    if not flg:\n        ans+=1\n    \ncout(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# val , m = readline()\n# coin = readlist()\n\n# cache = []\n# for i in range(m):\n#     cache.append([-1 for _ in range(val+1)])\n\n# def DP(i,left):\n    \n#     if left < 0:\n#         return  0\n#     if i == m:\n#         return (1 if left == 0 else 0)\n#     if cache[i][left] >= 0:\n#         return cache[i][left]\n\n#     if left == 0:\n#         return  1\n\n#     x = DP(i+1,left)\n#     if(left>=coin[i]):\n#         x+=DP(i,left-coin[i])\n#     cache[i][left] =x\n#     return x\n\n# def DP_iter(val):\n#     dp = []\n#     for i in range(m):\n#         dp.append([0 for _ in range(val+1)])\n#     for X in range(val+1):\n#         for i in range(m-2,0,-1):\n#             if X < coin[i]:\n#                 dp[i][X] = 0\n#             if X == coin[i]:\n#                 dp[i][X] = 1\n#             else:\n#                 dp[i][X] = (dp[i+1][X]+dp[i][X-coin[i]])\n#     for i in range(m):\n#         printr(dp[i])\n    \n\n\n#     return dp[m-1][X]\n\n\n# cout(DP(0,val))\n# cout(DP_iter(val))\n", "n = int(input())\nb = [int(i) for i in input().split()]\n\ndef binary_search(low, high, search, numbers):\n\tmid = (low + high) // 2\n\tif low > high:\n\t\treturn None\n\tif numbers[mid] == search:\n\t\treturn mid\n\telif numbers[mid] < search:\n\t\treturn binary_search(mid +1, high, search, numbers)\n\telse:\n\t\treturn binary_search(low, mid - 1, search, numbers)\n\nd = {}\nfor i in b:\n\tif not i in d:\n\t\td[i] = 0\n\nfor i in b:\n\td[i] += 1\n\t\na = []\nfor i in d:\n\ta.append(i)\n\t\na.sort()\nn = len(a)\n\npower = []\nwk1 = 1\nlimit = 2 * max(a) + 1\nwhile wk1 < limit:\n\tpower.append(wk1)\n\twk1 *= 2\n\t\nf = [True] * n\nwkl = len(power)\nfor i in range(n):\n\tif f[i]:\n\t\twks = len(bin(a[i])) - 3\n\t\tfor j in range(wks, wkl):\n\t\t\twk1 = binary_search(0, n - 1, power[j] - a[i], a)\n\t\t\tif wk1 != None:\n\t\t\t\tif not ((wk1 == i) and (d[a[wk1]] == 1)):\n\t\t\t\t\tf[wk1] = False\n\t\t\t\t\tf[i] = False\n\t\t\t\t\tbreak\nans = 0\nfor i in range(n):\n\tif f[i]:\n\t\tans += d[a[i]]\n\t\t\nprint(ans)\n\n\n\n", "import bisect\nn = int(input())\na = [int(x) for x in input().split()]\na = sorted(a)\np2 = []\nfor i in range(1,31):\n    p2.append(2**i)\nc = 0\nif n == 1:\n    print(1)\nelse:\n    for i in range(0,n):\n        flag = 0\n        for j in p2:\n            if j > a[i]:\n                d = j -a[i]\n                f = bisect.bisect(a,d)\n                if d != a[i]:\n                    if a[f-1] == d:\n                        flag = 100\n                        break\n                else:\n                    if i != f-1:\n                        if a[f-1] == d:\n                            flag = 100\n                            break\n                    else:\n                        if a[f-2] == d:\n                            flag = 100\n                            break\n\n        if flag == 0:\n            c = c + 1\n    print(c)", "from collections import defaultdict\ncounter = 0\nn = int(input())\nList = list(map(int,input().strip().split()))\nList = list(List)\n\nPofT = [2**i for i in range(31)]\ndic = defaultdict(int)\n\nfor x in List:\n    dic[x] +=1\n\nfor x in List:\n    for y in PofT:\n        if (y-x) in list(dic.keys()):\n            if x == y-x and dic[x] == 1:\n                pass\n            else:\n                break\n    else:\n        counter+=1\nprint(counter)\n\n", "def main():\n\tn = int(input())\n\ta = tuple(map(int, input().split()))\n\tall_set = set()\n\ttwice_set = set()\n\tfor ai in a:\n\t\tif ai in all_set:\n\t\t\ttwice_set.add(ai)\n\t\telse:\n\t\t\tall_set.add(ai)\n\tres = 0\n\tfor ai in a:\n\t\tpow_of2 = 2**30\n\t\twhile pow_of2 > ai:\n\t\t\taj = pow_of2-ai\n\t\t\tif aj in all_set and (aj != ai or aj in twice_set):\n\t\t\t\tbreak\n\t\t\tpow_of2 //= 2\n\t\telse:\n\t\t\tres += 1\n\tprint(res)\nmain()\n", "import math\nfrom collections import defaultdict\nn=int(input())\nl=list(map(int,input().split()))\nl1=[]\nc=0\nd=defaultdict(int)\nfor i in l:\n    d[i]+=1\n#print(d)\nfor i in range(32):\n    l1.append(int(math.pow(2,i)))\nfor i in range(n):\n    for j in range(32):\n        check=l1[j]-l[i]\n        if(check>0):\n            if(check==l[i] and d[check]>1):\n                c+=1\n                break\n            elif(check!=l[i] and d[check]>=1):\n                c+=1\n                break\nprint(n-c)\n\n\n\n\n\n"]