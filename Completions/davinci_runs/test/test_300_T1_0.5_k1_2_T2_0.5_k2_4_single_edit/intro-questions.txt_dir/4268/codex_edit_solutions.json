["import math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n", "import math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():  # is_integer() is a method for float\n            count += 1\n\nprint(count)\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum(pow(p1[i] - p2[i], 2) for i in range(len(p1))))\n\ndef main():\n    n, d = map(int, sys.stdin.readline().split())\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, sys.stdin.readline().split())))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum((p1[i] - p2[i])**2 for i in range(len(p1))))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple(int(x) for x in sys.stdin.readline().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print count\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))    \n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))    \n\n    count = 0    \n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1    \n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "import math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer(): #if distance is an integer\n            count += 1\n\nprint(count)\n"]