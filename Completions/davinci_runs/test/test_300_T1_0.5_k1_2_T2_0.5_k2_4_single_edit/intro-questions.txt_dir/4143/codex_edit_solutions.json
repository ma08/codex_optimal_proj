["\n\n# My answer 1\nN, A, B, C, D, E = (int(x) for x in input().split())\n\nif N % A != 0:\n    train = N // A + 1\nelse:\n    train = N // A\n\nif (N - (A * train)) % B != 0:\n    bus = (N - (A * train)) // B + 1\nelse:\n    bus = (N - (A * train)) // B\n\nif (N - (A * train) - (B * bus)) % C != 0:\n    taxi = (N - (A * train) - (B * bus)) // C + 1\nelse:\n    taxi = (N - (A * train) - (B * bus)) // C\n\nif (N - (A * train) - (B * bus) - (C * taxi)) % D != 0:\n    airplane = (N - (A * train) - (B * bus) - (C * taxi)) // D + 1\nelse:\n    airplane = (N - (A * train) - (B * bus) - (C * taxi)) // D\n\nif (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) % E != 0:\n    ship = (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) // E + 1\nelse:\n    ship = (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) // E\n\nprint(train + bus + taxi + airplane + ship)\n\n# My answer 2\nN, A, B, C, D, E = (int(x) for x in input().split())\n\ntrain = N // A\nbus = (N - (A * train)) // B\ntaxi = (N - (A * train) - (B * bus)) // C\nairplane = (N - (A * train) - (B * bus) - (C * taxi)) // D\nship = (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) // E\n\nif N % A != 0:\n    train += 1\nif (N - (A * train)) % B != 0:\n    bus += 1\nif (N - (A * train) - (B * bus)) % C != 0:\n    taxi += 1\nif (N - (A * train) - (B * bus) - (C * taxi)) % D != 0:\n    airplane += 1\nif (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) % E != 0:\n    ship += 1\n\nprint(train + bus + taxi + airplane + ship)\n\n# Best answer 1\na, b, c, d, e, n = map(int, input().split())\n\nprint((n + a - 1) // a + (n + b - 1) // b + (n + c - 1) // c + (n + d - 1) // d + (n + e - 1) // e)\n\n# Best answer 2\nn, a, b, c, d, e = map(int, input().split())\n\nprint(sum(n % i != 0 for i in (a, b, c, d, e)) + n // min(a, b, c, d, e))\n", "\nN = int(input())\nA, B, C, D, E = map(int, input().split())\n\ndef minute_needed(num_people):\n    return (num_people + A - 1) // A + (num_people + B - 1) // B + (num_people + C - 1) // C + (num_people + D - 1) // D + (num_people + E - 1) // E\n\nprint(minute_needed(N))\n", "\nN = int(input())\nA, B, C, D, E = [int(i) for i in input().split()]\n\ndef minute_needed(num_people):\n    return (num_people + A - 1) // A + (num_people + B - 1) // B + (num_people + C - 1) // C + (num_people + D - 1) // D + (num_people + E - 1) // E\nprint(minute_needed(N))\n", "\n# My answer\nN, A, B, C, D, E = (int(x) for x in input().split())\n\nif N % A != 0:\n    train = N // A + 1\nelse:\n    train = N // A\nif N - (A * train) % B != 0:\n    bus = (N - (A * train)) // B + 1\nelse:\n    bus = (N - (A * train)) // B\nif N - (A * train) - (B * bus) % C != 0:\n    taxi = (N - (A * train) - (B * bus)) // C + 1\nelse:\n    taxi = (N - (A * train) - (B * bus)) // C\nif N - (A * train) - (B * bus) - (C * taxi) % D != 0:\n    airplane = (N - (A * train) - (B * bus) - (C * taxi)) // D + 1\nelse:\n    airplane = (N - (A * train) - (B * bus) - (C * taxi)) // D\nif N - (A * train) - (B * bus) - (C * taxi) - (D * airplane) % E != 0:\n    ship = (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) // E + 1\nelse:\n    ship = (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) // E\nprint(train + bus + taxi + airplane + ship)\n\n# Best answer\na, b, c, d, e, n = map(int, input().split())\nprint((n + a - 1) // a + (n + b - 1) // b + (n + c - 1) // c + (n + d - 1) // d + (n + e - 1) // e)\n", "\nN = int(input())\nA, B, C, D, E = [int(i) for i in input().split()]\n\ndef minute_needed(num_people):\n    return (num_people + A - 1) // A + (num_people + B - 1) // B + (num_people + C - 1) // C + (num_people + D - 1) // D + (num_people + E - 1) // E\n\nprint(minute_needed(N))\n", "\nN = int(input())\nA, B, C, D, E = [int(i) for i in input().split()]\n\n\ndef minute_needed(num_people, a, b, c, d, e):\n    return (num_people + a - 1) // a + (num_people + b - 1) // b + (num_people + c - 1) // c + (num_people + d - 1) // d + (num_people + e - 1) // e\n\n\nprint(minute_needed(N))\n", "\n\n# My answer\nn, a, b, c, d, e = (int(x) for x in input().split())\n\nif n % a != 0:\n    train = n // a + 1\nelse:\n    train = n // a\n\nif (n - (a * train)) % b != 0:\n    bus = (n - (a * train)) // b + 1\nelse:\n    bus = (n - (a * train)) // b\n\nif (n - (a * train) - (b * bus)) % c != 0:\n    taxi = (n - (a * train) - (b * bus)) // c + 1\nelse:\n    taxi = (n - (a * train) - (b * bus)) // c\n\nif (n - (a * train) - (b * bus) - (c * taxi)) % d != 0:\n    airplane = (n - (a * train) - (b * bus) - (c * taxi)) // d + 1\nelse:\n    airplane = (n - (a * train) - (b * bus) - (c * taxi)) // d\n\nif (n - (a * train) - (b * bus) - (c * taxi) - (d * airplane)) % e != 0:\n    ship = (n - (a * train) - (b * bus) - (c * taxi) - (d * airplane)) // e + 1\nelse:\n    ship = (n - (a * train) - (b * bus) - (c * taxi) - (d * airplane)) // e\n\nprint(train + bus + taxi + airplane + ship)\n\n# Best answer\na, b, c, d, e, n = map(int, input().split())\n\nprint((n + a - 1) // a + (n + b - 1) // b + (n + c - 1) // c + (n + d - 1) // d + (n + e - 1) // e)\n", "\n'''\n# My answer\nN, A, B, C, D, E = (int(x) for x in input().split())\n\nif N % A != 0:\n    train = N // A + 1\nelse:\n    train = N // A\n\nif (N - (A * train)) % B != 0:\n    bus = (N - (A * train)) // B + 1\nelse:\n    bus = (N - (A * train)) // B\n\nif (N - (A * train) - (B * bus)) % C != 0:\n    taxi = (N - (A * train) - (B * bus)) // C + 1\nelse:\n    taxi = (N - (A * train) - (B * bus)) // C\n\nif (N - (A * train) - (B * bus) - (C * taxi)) % D != 0:\n    airplane = (N - (A * train) - (B * bus) - (C * taxi)) // D + 1\nelse:\n    airplane = (N - (A * train) - (B * bus) - (C * taxi)) // D\n\nif (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) % E != 0:\n    ship = (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) // E + 1\nelse:\n    ship = (N - (A * train) - (B * bus) - (C * taxi) - (D * airplane)) // E\n\nprint(train + bus + taxi + airplane + ship)\n'''\n# Best answer\na, b, c, d, e, n = map(int, input().split())\nprint((n + a - 1) // a + (n + b - 1) // b + (n + c - 1) // c + (n + d - 1) // d + (n + e - 1) // e)\n"]