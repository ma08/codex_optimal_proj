["import sys\ninput = sys.stdin.readline\ns = input()\nt = input()\nl, r = [0]*len(t), [0]*len(t)\nli, ri = 0, len(s) - 1\nfor i in range(len(t)):\n    while s[ li ] != t[ i ]:\n        li += 1\n    while s[ ri ] != t[ - i - 1 ]:\n        ri -= 1\n    l[ i ] = li\n    r[ -i -1 ] = ri\n    li += 1\n    ri -= 1\n\nprint( max( [ r[ 0 ], len(s) - l[ -1 ] - 1 ] + [ max( 0, r[ i ] - l[ i - 1 ] ) - 1 for i in range( 1, len(t) ) ] ) )\n", "s=str(input())\nt=str(input())\ni=0\nj=0\narr1=[]\nwhile(i<len(s)):\n\tif(s[i]==t[j]):\n\t\tarr1.append(i+1)\n\t\tj+=1\n\ti+=1\n\tif(j==len(t)):\n\t\tbreak\n\ni=len(s)-1\nj=len(t)-1\narr2=[0]*len(t)\nwhile(i>=0):\n\tif(s[i]==t[j]):\n\t\tarr2[j]=i+1\n\t\tj-=1\n\ti-=1\n\tif(j==-1):\n\t\tbreak\n\nans=max(arr2[0]-1,len(s)-arr1[-1])\n\nfor i in range(len(t)-1):\n\tans=max(ans,arr2[i+1]-arr1[i]-1)\n\nprint(ans)\n\n", "from sys import stdin\ns=stdin.readline().strip()\ns1=stdin.readline().strip()\ndp=[-1 for i in range(len(s1)+1)]\ndp1=[-1 for i in range(len(s1)+1)]\nx=0\nfor i in range(len(s)):\n    if s[i]==s1[x]:\n        dp[x+1]=i\n        x+=1\n        if x>=len(s1):\n            break\nx=len(s1)-1\ny=1\ndp[0]=-1\ndp1[0]=len(s)\nfor i in range(len(s)-1,-1,-1):\n    if s[i]==s1[x]:\n        dp1[y]=i\n        x-=1\n        y+=1\n        if x<0:\n            break\n\nans=0\nfor i in range(len(s1)+1):\n    ans=max(dp1[len(s1)-i]-dp[i]-1,ans)\n    ans=max(dp[len(s1)-i]-dp1[i]-1,ans)\n    \n        \nprint(ans)\n", "s = input()\nt = input()\nn = len(s)\nm = len(t)\nl = [-1]\nr = [n]\nc = 0\nfor i in range(n):\n    if s[i] == t[c]:\n        l.append(i)\n        c += 1\n        if c >= m:\n            break\nc = 0\nfor i in range(n):\n    if s[-1-i] == t[-1-c]:\n        r.append(n-1-i)\n        c += 1\n        if c >= m:\n            break\nmx = 0\nfor i in range(m+1):\n    mx = max(mx, r[m-i]-l[i]-1)\nprint(mx)\n", "s = input()\nt = input()\nlefts = [0 for i in range(len(t))]\nrights = [0 for i in range(len(t))]\n\ni = 0\nj = 0\nwhile i < len(s) and j < len(t):\n\tif (s[i] == t[j]):\n\t\tlefts[j] = i\n\t\tj += 1\n\ti += 1\n\ni = len(s) - 1\nj = len(t) - 1 \nwhile i >= 0 and j >= 0:\n\tif (s[i] == t[j]):\n\t\trights[j] = i\n\t\tj -= 1\n\ti -= 1\n#print(lefts)\n#print(rights)\nans = max(len(s) - lefts[-1] - 1, rights[0])\nfor i in range(len(t) - 1):\n\tans = max(ans, rights[i + 1] - lefts[i] - 1)\nprint(ans)", "s = input()\nt = input()\n\n\ndef compute_prefix(s, t):\n    prefix = [0 for i in range(len(t) + 1)]\n    i = 0\n    j = 0\n    while i < len(t):\n        while s[j] != t[i]:\n            j += 1\n        prefix[i+1] = j+1\n        i += 1\n        j += 1\n    return prefix\n\n\nprefix = compute_prefix(s, t)\nsuffix = compute_prefix(s[::-1], t[::-1])\nres = 0\nfor i in range(len(t) + 1):\n    res = max(res, len(s) - (prefix[i] + suffix[len(t) - i]))\nprint(res)\n", "s = input()\nt = input()\n\ni = 0\nl = []\nfor c in t:\n    while s[i] != c:\n        i += 1\n    l.append(i)\n    i += 1\n\ni = len(s)-1\nr = []\nfor c in t[::-1]:\n    while s[i] != c:\n        i -= 1\n    r.append(i)\n    i -= 1\n\nr.reverse()\n\nmx = r[0]\nfor i in range(len(t)-1):\n    mx = max(mx, r[i+1] - l[i] - 1)\nmx = max(mx, len(s)-l[-1]-1)\n\nprint(mx)", "S = input()\nT = input()\nN, M = len(S), len(T)\n\ndef calc(s, t):\n    X = [0] * len(s)\n    j = 0\n    for i in range(len(s)):\n        if j >= len(t):\n            X[i] = j\n        elif s[i] == t[j]:\n            X[i] = j+1\n            j += 1\n        else:\n            X[i] = X[i-1]\n    return [0] + X\n\n        \nA, B = calc(S, T), calc(S[::-1], T[::-1])[::-1]\n# print(A, B)\nl, r = 0, N\nwhile r-l>1:\n    m = (l+r)//2\n    C = [A[i]+B[i+m] for i in range(N-m+1)]\n    # print(\"m, C =\", m, C)\n    if max(C) >= M:\n        l = m\n    else:\n        r = m\nprint(l)\n", "s = input()\nt = input()\n\npos = [[-1, -1] for i in range(len(t))]\n\nptr = 0\nfor i,c in enumerate(t):\n    while s[ptr] != c:\n        ptr += 1\n    pos[i][0] = ptr\n    ptr += 1\n\nptr = len(s) - 1\nfor i in range(len(t)-1, -1, -1):\n    c = t[i]\n    while s[ptr] != c:\n        ptr -= 1\n    pos[i][1] = ptr\n    ptr -= 1\n\nbest = max(pos[0][1], len(s)-pos[-1][0]-1)\nfor i in range(1, len(pos)):\n    best = max(best, pos[i][1] - pos[i-1][0] - 1)\n\nprint(best)\n", "from sys import stdin, stdout\n\ninput = stdin.readline\n\ns, t = list(map(str, stdin.read().split()))\n\nn, m = len(s), len(t)\na = [0] * m\nb = [0] * m\n\npos = 0\nfor i in range(n):\n    if s[i] == t[pos]:\n        a[pos] = i\n        pos += 1\n        if pos == m:\n            break\n\npos = m - 1\nfor i in range(n - 1, -1, -1):\n    if s[i] == t[pos]:\n        b[pos] = i\n        pos -= 1\n        if pos == -1:\n            break\n\nres = max(b[0], n - (a[-1] + 1))\nfor i in range(m - 1):\n    res = max(res, (b[i + 1] - 1) - (a[i] + 1) + 1)\n\nprint(res)\n", "s = input()\nt = input()\nn = len(s)\nm = len(t)\nle = []\nri = []\nans = 0\np = 0\nfor i in range(n):\n    if p < m:\n        if s[i] == t[p]:\n            le.append(i)\n            if p == m - 1:\n                ans = max(ans, n - 1 - i)\n            p += 1\np = m - 1\nfor j in range(n - 1, -1, -1):\n    if p >= 0:\n        if s[j] == t[p]:\n            ri.append(j)\n            if p == 0:\n                ans = max(ans, j - 0)\n            p -= 1\nri.reverse()\nfor k in range(m - 1):\n    ans = max(ans, ri[k + 1] - le[k] - 1)\nprint(ans)", "s = input()\nt = input()\nfp = [-1]\ntp = 0\nfor i in range(len(s)):\n    if s[i] == t[tp]:\n        fp.append(i)\n        tp += 1\n        if tp == len(t):\n            break\nlp = [len(s)]\ntp = len(t) - 1\nfor i in range(len(s) -1, -1 , -1):\n    if s[i] == t[tp]:\n        lp.append(i)\n        tp -= 1\n        if tp == -1:\n            break\nlp.reverse()\nprint(max([ (l-f) for (l,f) in zip(lp, fp)]) - 1)", "s=input()\nt=input()\nl=0\npre=[]\nsuf=[]\nfor i in range(len(s)):\n    if(s[i]==t[l]):\n        pre.append(i)\n        l+=1\n    if(l==len(t)):\n        break\nl=len(t)-1\nfor i in range(len(s)-1,-1,-1):\n    if(s[i]==t[l]):\n        suf.append(i)\n        l-=1\n    if(l==-1):\n        break\npre.sort()\nsuf.sort()\nans=0\n\nans = max(suf[0],len(s)-pre[-1]-1)\n\nfor i in range(len(t)-1):\n    ans = max(ans,abs(suf[i+1]-pre[i]-1))\n\nprint(ans)\n", "s = input()\nt = input()\n\nf, b = [], []\n\ncur = len(t) - 1\nfor i in range(len(s) - 1, -1, -1):\n    if s[i] == t[cur]:\n        b.append(i)\n        cur -= 1\n    if cur == -1:\n        break\n\nb.sort()\n\ncur = 0\nfor i in range(len(s)):\n    if s[i] == t[cur]:\n        f.append(i)\n        cur += 1\n    if cur == len(t):\n        break\n\n\n\nans = max(b[0], len(s) - f[-1] - 1)\nbbb = 0\nbbb ^= 1\n\nbbb += 1\n\nfor i in range(len(f) - 1):\n    ans = max(ans, abs(b[i +1] -1 - f[i]))\n\nprint(ans)\n", "'''input\nasdfasdf\nfasd\n\n\n\n\n'''\nimport sys\nfrom collections import defaultdict as dd\n\nmod=10**9+7\n\ndef ri(flag=0):\n\tif flag==0:\n\t\treturn [int(i) for i in sys.stdin.readline().split()]\n\telse:\n\t\treturn int(sys.stdin.readline())\n\n\n\nst = input()\npat = input()\nn= len(st)\n\nforward = [0 for i in range(n)]\n\nidx =0\n\nfor i in range(n):\n\tif idx < len(pat) and st[i] == pat[idx]:\n\t\tidx+=1\n\t\tforward[i] = idx\n\nbackward = [0 for x in range(n)]\n\nidx =len(pat)-1\n\nfor i in range(n-1,-1,-1):\n\tif idx>=0 and st[i] == pat[idx]:\n\t\tidx-=1\n\t\tbackward[i]= idx+2\n\n# print(forward)\n# print(backward)\n\nc1 =dd(int)\nc2 = dd(int)\n\nfor i in range(n):\n\tc1[forward[i]] = i+1\n\tc2[backward[i]] = i+1\n\nans = max(c2[1]-1 , n-c1[len(pat)])\n\n\n\n#print(c1,c2)\nfor i in range(1,len(pat)):\n\tans = max(ans , abs(c1[i] - c2[i+1])-1)\n\nprint(ans)", "from sys import stdin\ninput = stdin.readline\n\ns = input()\nt = input()\n\nn = len(t)\nlow = [0 for i in range(len(t))]\nhigh = [0 for i in range(len(t))]\n\nacc = 0\n\nfor i in range(n):\n    acc_t = t[i]\n    \n    while acc_t != s[acc]: acc += 1\n    low[i] = acc\n    acc += 1\n\nacc = len(s)-1\n    \nfor i in range(len(t)):\n    acc_t = t[n-i-1]\n    \n    while acc_t != s[acc]: acc -= 1\n    high[n-i-1] = acc\n    acc -= 1\n    \nres = max(high[0], len(s)-low[n-1]-1)\n\nfor i in range(n-1):\n    res = max(res, high[i+1]-low[i]-1)\n    \nprint(res)", "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport math\nfrom math import gcd,sqrt\n\n#T = int(input())\n#N = int(input())\ns1 = input()\nN = len(s1)\ns2 = input()\nM = len(s2)\n#print(N)\n#N,M,Q = [int(x) for x in stdin.readline().split()]\n#arr = [int(x) for x in stdin.readline().split()]\n\nasc = []\ndsc = []\n\nk = 0\nfor i in range(len(s1)):\n    if s1[i]==s2[k]:\n        asc.append(i)\n        k += 1\n    if k==M:\n        break\n\nk = M-1\nfor i in range(len(s1)-1,-1,-1):\n    if s1[i]==s2[k]:\n        dsc.append(i)\n        k -= 1\n    if k==-1:\n        break\n        \ndsc = dsc[::-1]\n#print(N,M)\n#print(asc,dsc)\nres = 0\nfor i in range(M-1):\n    d = dsc[i+1] - asc[i] - 1\n    res = max(d,res)\n    \nres = max(res,asc[0])\nres = max(res,dsc[0])\nres = max(res,N-1-asc[-1])\nres = max(res,N-1-dsc[-1])\n\n        \nprint(res)\n", "# s = \"tessts\"\n# t = \"tet\"\ns = input()\nt = input()\nns = len(s)\nnt = len(t)\n\nans = 0\nfound = 0\n\nDP_left = [0]*ns\n\nDP_left[0] = int(s[0] == t[0])\nfor i in range(1, ns):\n\tif DP_left[i-1] < nt:\n\t\tDP_left[i] = DP_left[i-1] + (s[i] == t[DP_left[i-1]])\n\nDP_right = [0]*ns\n\nDP_right[-1] = int(s[-1] == t[-1])\n\nfor i in reversed(list(range(ns-1))):\n\tif 0 <= nt - DP_right[i+1] - 1 < nt :\n\t\tDP_right[i] = DP_right[i+1] + (s[i] == t[nt - 1 - DP_right[i+1]])\n\nfrom collections import defaultdict\n\nd_r = defaultdict(int)\nd_l = defaultdict(int)\n\nold = 1\n\nfor index, i in enumerate(DP_left):\n\tif i == old:\n\t\td_l[i] = index\n\t\told += 1\n\nfor index, i in enumerate(DP_right):\n\td_r[i] = max(d_r[i], index)\n\nfor i in range(nt + 1):\n\n\tif i == 0:\n\t\tans = max(ans, d_r[nt])\n\telif i == nt:\n\t\tans = max(ans, ns - d_l[nt] - 1)\n\telse:\n\t\tans = max(ans, d_r[nt-i] - d_l[i] - 1)\nprint(ans)\n", "import sys\nfrom collections import defaultdict\n#input = sys.stdin.readline\nimport math\n\n\ndef main():\n    s = input()\n    t = input()\n    longest_prefix = [0] * len(s)\n    longest_suffix = [0] * len(s)\n\n    longest_prefix[0] = 1 if s[0] == t[0] else 0\n    for i in range(1, len(s)):\n        x = longest_prefix[i-1]\n        if x == len(t) or s[i] != t[x]:\n            longest_prefix[i] = x\n        else:\n            longest_prefix[i] = x + 1\n\n    longest_suffix[-1] = 1 if s[-1] == t[-1] else 0\n    for i in range(len(s)-2, -1, -1):\n        x = longest_suffix[i+1]\n        if x == len(t) or s[i] != t[-1-x]:\n            longest_suffix[i] = x\n        else:\n            longest_suffix[i] = x + 1\n\n    res = 0\n\n    pos1 = 0\n    while longest_prefix[pos1] != len(t):\n        pos1 += 1\n    res = max(res, len(s)-1-pos1)\n\n    pos2 = len(s)-1\n    while longest_suffix[pos2] != len(t):\n        pos2 -= 1\n    res = max(res, pos2)\n\n\n    pos1 = 0\n    pos2 = 0\n    while pos1 < len(s):\n        while pos2+1 < len(s) and longest_prefix[pos1] + longest_suffix[pos2+1] >= len(t):\n            pos2 += 1\n        res = max(res, pos2-pos1-1)\n        pos1 += 1\n\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "s=input()\nt=input()\n\n\"\"\"pos=[]\nfor i in range(26):\n    h=[]\n    pos.append(h)\n\nfor i in range(0,len(t)):\n    for j in range(0,len(s)):\n        if(s[j]==t[i]):\n            pos[i].append(j)\"\"\"\n\nL1=[]\nL2=[]\n\nptr=0\nfor i in range(0,len(s)):\n    if(s[i]==t[ptr]):\n        L1.append(i)\n        ptr+=1\n    if(ptr>=len(t)):\n        break\n\nptr=len(t)-1\nfor i in range(len(s)-1,-1,-1):\n    if(s[i]==t[ptr]):\n        L2.append(i)\n        ptr-=1\n    if(ptr<0):\n        break\n\nL2=L2[::-1]\n\n#print(L1)\n#print(L2)\n\nmx=-1\nfor i in range(0,len(L1)-1):\n    mx=max(mx,L2[i+1]-L1[i]-1)\n\nmx=max(mx,L2[0])\nmx=max(mx,len(s)-L1[-1]-1)\n\nprint(mx)\n\n\n", "s=input()\nt=input()\nindl=[-1 for i in range(len(t))]\nj=0\nfor i in range(len(s)):\n\tif s[i]==t[j]:\n\t\tindl[j]=i\n\t\tj+=1\n\t\tif j==len(t):\n\t\t\tbreak\nindr=[-1 for i in range(len(t))]\nj=len(t)-1\nfor i1 in range(len(s)):\n\ti=len(s)-1-i1\n\tif s[i]==t[j]:\n\t\tindr[j]=i\n\t\tj-=1\n\t\tif j==-1:\n\t\t\tbreak\nl=indr[0]\nfor i in range(len(t)-1):\n\tl=max(l,indr[i+1]-indl[i]-1)\nl=max(l,len(s)-1-indl[len(t)-1])\nprint(l)", "def int_multiple():\n    return  [int(c) for c in input().split()]\n\ndef int_single():\n    return int(input())\n\ndef str_multiple():\n    return [c for c in input().split()]\n\ndef str_single():\n    return input()\n\n# start\n\ns = str_single()\nt = str_single()\n\n\nti = 0\n\nstart = []\nfor si in range(len(s)):\n    if(s[si] == t[ti]):\n        start.append(si)\n        ti += 1\n        if ti == len(t):\n            break\n\nend = []\nti = len(t) - 1\nfor si in reversed(list(range(len(s)))):\n    if (s[si] == t[ti]):\n        end.append(si)\n        ti -= 1\n        if ti < 0:\n            break\n\nend = list(reversed(end))\n\nstart_mx = len(s) - start[-1] - 1\nend_mx = end[0]\nmx_between = 0\nfor i in range(len(t)-1):\n    diff = end[i+1] - start[i] - 1\n    mx_between = max(mx_between, diff)\n\nprint(max(start_mx, end_mx, mx_between))\n"]