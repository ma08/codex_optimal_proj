2022-04-18 00:49:12.039135 num operations 1
2022-04-18 00:49:12.039172 size on input set 1
2022-04-18 00:49:19.627391 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\na, b, k = map(int, input().split())\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#  IkaLog\n#  ======\n#  Copyright (C) 2015 Takeshi HASEGAWA\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    },
    {
      "index": 3,
      "text": "import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    }
  ],
  "created": 1650242952,
  "object": "edit"
}
2022-04-18 00:49:19.627662 fix syntax errors 4 ['import math\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\na, b, k = map(int, input().split())\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n', '\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#  IkaLog\n#  ======\n#  Copyright (C) 2015 Takeshi HASEGAWA\n#\n#  Licensed under the Apache License, Version 2.0 (the "License");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an "AS IS" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n', 'import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n']
2022-04-18 00:49:19.627703 size on output set 4
2022-04-18 00:49:19.627714 num operations 1
2022-04-18 00:49:19.627720 size on input set 1
2022-04-18 00:49:28.712183 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import random\nprint(random.randrange(0,3))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n, is_prime):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1): #\u7d20\u6570\u306e\u5834\u5408\u306f2\u304b\u3089n-1\u307e\u3067\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K, is_prime):\n    A_factors = prime_factorization(A, is_prime)\n    B_factors = prime_factorization(B, is_prime)\n    common_factors = list(set(A_factors) & set(B_factors))\n    if len(common_factors) < K:\n        return -1\n    return common_factors[-K]\n\nif A == 1 or B == 1:\n    is_prime = True\nelse:\n    is_prime = False\n\nprint(find_num(A, B, K, is_prime))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1): # math.sqrt() \u306f\u5c0f\u6570\u70b9\u4ee5\u4e0b\u3092\u5207\u308a\u6368\u3066\u308b\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n"
    },
    {
      "index": 3,
      "text": "from math import sqrt\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n"
    }
  ],
  "created": 1650242959,
  "object": "edit"
}
2022-04-18 00:49:28.712373 fix syntax errors 4 ['import random\nprint(random.randrange(0,3))\n', 'import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n, is_prime):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1): #素数の場合は2からn-1まで\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K, is_prime):\n    A_factors = prime_factorization(A, is_prime)\n    B_factors = prime_factorization(B, is_prime)\n    common_factors = list(set(A_factors) & set(B_factors))\n    if len(common_factors) < K:\n        return -1\n    return common_factors[-K]\n\nif A == 1 or B == 1:\n    is_prime = True\nelse:\n    is_prime = False\n\nprint(find_num(A, B, K, is_prime))\n', '\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1): # math.sqrt() は小数点以下を切り捨てる\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n', 'from math import sqrt\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n']
2022-04-18 00:49:28.712511 size on output set 4
