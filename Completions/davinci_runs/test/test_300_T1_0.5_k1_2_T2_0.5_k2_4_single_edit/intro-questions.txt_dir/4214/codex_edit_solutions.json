["\nimport math\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n", "import math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\uff08\u518d\u5e30\uff09\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n", "\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n", "\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\ndef calc_dist(lst):\n    dist = 0\n    prev = lst[0]\n    for i in lst[1:]:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[lst[0]][0])**2 + (towns[prev][1] - towns[lst[0]][1])**2)\n    return dist\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\n# \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\nfor i in range(1, N):\n    lst = [0, i]\n    for j in range(i+1, N):\n        lst.append(j)\n    total_dist += calc_dist(lst)\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\npermutation = math.factorial(N) - 1\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n", "\n\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N) \n", "\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n", "\n\nfrom math import sqrt\nfrom itertools import permutations, combinations\nfrom copy import deepcopy\n\ndef dist(p1, p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef all_dist(points):\n    dists = []\n    for p1, p2 in combinations(points, 2):\n        dists.append(dist(p1, p2))\n    return dists\n\ndef solve(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        dist_in_path = 0\n        for i in range(N-1):\n            dist_in_path += dist(path[i],path[i+1])\n        total_dist += dist_in_path\n    return total_dist/N\n\ndef solve2(points):\n    N = len(points)\n    total_dist = 0\n    for p1, p2 in combinations(points, 2):\n        total_dist += dist(p1, p2)\n    return total_dist/N\n\ndef solve3(points):\n    return sum(all_dist(points))/len(points)\n\ndef solve4(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        for i in range(N-1):\n            total_dist += dist(path[i],path[i+1])\n    return total_dist/N\n\ndef solve5(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(path[i],path[i+1]) for i in range(N-1))\n    return total_dist/N\n\ndef solve6(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(path[i],path[i+1]) for i in range(N-1))\n    return total_dist/N\n\ndef solve7(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve8(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve9(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve10(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve11(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve12(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve13(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve14(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve15(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve16(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve17(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve18(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve19(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n\ndef solve20(points):\n    N = len(points)\n    paths = permutations(points)\n    total_dist = 0\n    for path in paths:\n        total_dist += sum(dist(p1, p2) for p1, p2 in zip(path, path[1:]))\n    return total_dist/N\n", "\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n\nN = int(input())\npoints = [tuple(map(int,input().split())) for _ in range(N)]\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    for i in range(N):\n        dist_in_path += dist(path[i],path[(i+1)%N])\n    total_dist += dist_in_path/N\n\nprint(total_dist/(N*N))\n"]