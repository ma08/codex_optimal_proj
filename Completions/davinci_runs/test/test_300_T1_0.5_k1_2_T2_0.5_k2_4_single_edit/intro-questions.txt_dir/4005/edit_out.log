2022-04-17 23:38:53.522212 num operations 1
2022-04-17 23:38:53.522230 size on input set 1
2022-04-17 23:39:33.306277 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "var fs = require('fs');\n\nfunction readFile(filename) {\n    fs.readFile(filename, function(err, data) {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            console.log(data);\n        }\n    });\n}\n\nfunction writeFile(filename, data) {\n    fs.writeFile(filename, data, function(err) {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            console.log('Write success!');\n        }\n    });\n}\n\nfunction readDir(dir) {\n    fs.readdir(dir, function(err, data) {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            console.log(data);\n        }\n    });\n}\n\nfunction checkFileExistence(filename) {\n    fs.exists(filename, function(exists) {\n        console.log(exists ? 'File exists' : 'File not found');\n    });\n}\n\nfunction checkFileStats(filename) {\n    fs.stat(filename, function(err, stats) {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            console.log(stats);\n        }\n    });\n}\n\nfunction createReadStream(filename) {\n    var stream = fs.createReadStream(filename);\n    stream.on('data', function(data) {\n        console.log(data);\n    });\n    stream.on('end', function() {\n        console.log('Read stream end');\n    });\n    stream.on('error', function(err) {\n        console.log(err);\n    });\n}\n\nfunction createWriteStream(filename) {\n    var stream = fs.createWriteStream(filename);\n    stream.write('Hello');\n    stream.write('World');\n    stream.end();\n}\n\n// readFile('file.js');\n// writeFile('test.txt', 'Hello World!');\n// readDir('.');\n// checkFileExistence('test.txt');\n// checkFileStats('test.txt');\n// createReadStream('test.txt');\n// createWriteStream('test.txt');\n"
    },
    {
      "index": 2,
      "text": "//fs module\nvar fs = require('fs');\n//readFileSync\nconsole.log(fs.readFileSync('file.js'));\n//readFile\nfs.readFile('file.js',function(err,data){\n\tconsole.log(data)\n});\n//writeFileSync\nfs.writeFileSync('test.txt','test content');\n//writeFile\nfs.writeFile('test.txt','test content',function(err){\n\tif(err){\n\t\tconsole.log('write error');\n\t}\n});\n//appendFileSync\nfs.appendFileSync('test.txt','append content');\n//appendFile\nfs.appendFile('test.txt','append content',function(err){\n\tif(err){\n\t\tconsole.log('append error');\n\t}\n});\n//unlinkSync\nfs.unlinkSync('test.txt');\n//unlink\nfs.unlink('test.txt',function(err){\n\tif(err){\n\t\tconsole.log('unlink error');\n\t}\n});\n//renameSync\nfs.renameSync('file.js','file-rename.js');\n//rename\nfs.rename('file-rename.js','file.js',function(err){\n\tif(err){\n\t\tconsole.log('rename error');\n\t}\n});\n//mkdirSync\nfs.mkdirSync('newdir');\n//mkdir\nfs.mkdir('newdir',function(err){\n\tif(err){\n\t\tconsole.log('mkdir error');\n\t}\n});\n//rmdirSync\nfs.rmdirSync('newdir');\n//rmdir\nfs.rmdir('newdir',function(err){\n\tif(err){\n\t\tconsole.log('rmdir error');\n\t}\n});\n//readdirSync\nconsole.log(fs.readdirSync('.'));\n//readdir\nfs.readdir('.',function(err,files){\n\tif(err){\n\t\tconsole.log('readdir error');\n\t}else{\n\t\tconsole.log(files);\n\t}\n});\n//existsSync\nconsole.log(fs.existsSync('file.js'));\n//exists\nfs.exists('file.js',function(exists){\n\tconsole.log(exists);\n});\n//statSync\nconsole.log(fs.statSync('file.js'));\n//stat\nfs.stat('file.js',function(err,stats){\n\tif(err){\n\t\tconsole.log('stat error');\n\t}else{\n\t\tconsole.log(stats);\n\t}\n});\n//lstatSync\nconsole.log(fs.lstatSync('file.js'));\n//lstat\nfs.lstat('file.js',function(err,stats){\n\tif(err){\n\t\tconsole.log('lstat error');\n\t}else{\n\t\tconsole.log(stats);\n\t}\n});\n//linkSync\nfs.linkSync('file.js','file-link.js');\n//link\nfs.link('file.js','file-link.js',function(err){\n\tif(err){\n\t\tconsole.log('link error');\n\t}\n});\n//unlinkSync\nfs.unlinkSync('file-link.js');\n//unlink\nfs.unlink('file-link.js',function(err){\n\tif(err){\n\t\tconsole.log('unlink error');\n\t}\n});\n//readlinkSync\nconsole.log(fs.readlinkSync('file.js'));\n//readlink\nfs.readlink('file.js',function(err,linkString){\n\tif(err){\n\t\tconsole.log('readlink error');\n\t}else{\n\t\tconsole.log(linkString);\n\t}\n});\n//symlinkSync\nfs.symlinkSync('file.js','file-symlink.js');\n//symlink\nfs.symlink('file.js','file-symlink.js',function(err){\n\tif(err){\n\t\tconsole.log('symlink error');\n\t}\n});\n//unlinkSync\nfs.unlinkSync('file-symlink.js');\n//unlink\nfs.unlink('file-symlink.js',function(err){\n\tif(err){\n\t\tconsole.log('unlink error');\n\t}\n});\n//realpathSync\nconsole.log(fs.realpathSync('file.js'));\n//realpath\nfs.realpath('file.js',function(err,resolvedPath){\n\tif(err){\n\t\tconsole.log('realpath error');\n\t}else{\n\t\tconsole.log(resolvedPath);\n\t}\n});\n//truncateSync\nfs.truncateSync('file.js',20);\n//truncate\nfs.truncate('file.js',20,function(err){\n\tif(err){\n\t\tconsole.log('truncate error');\n\t}\n});\n//ftruncateSync\nfs.ftruncateSync(1,20);\n//ftruncate\nfs.ftruncate(1,20,function(err){\n\tif(err){\n\t\tconsole.log('ftruncate error');\n\t}\n});\n//chownSync\nfs.chownSync('file.js',1000,1000);\n//chown\nfs.chown('file.js',1000,1000,function(err){\n\tif(err){\n\t\tconsole.log('chown error');\n\t}\n});\n//fchownSync\nfs.fchownSync(1,1000,1000);\n//fchown\nfs.fchown(1,1000,1000,function(err){\n\tif(err){\n\t\tconsole.log('fchown error');\n\t}\n});\n//lchownSync\nfs.lchownSync('file.js',1000,1000);\n//lchown\nfs.lchown('file.js',1000,1000,function(err){\n\tif(err){\n\t\tconsole.log('lchown error');\n\t}\n});\n//chmodSync\nfs.chmodSync('file.js','755');\n//chmod\nfs.chmod('file.js','755',function(err){\n\tif(err){\n\t\tconsole.log('chmod error');\n\t}\n});\n//fchmodSync\nfs.fchmodSync(1,'755');\n//fchmod\nfs.fchmod(1,'755',function(err){\n\tif(err){\n\t\tconsole.log('fchmod error');\n\t}\n});\n//lchmodSync\nfs.lchmodSync('file.js','755');\n//lchmod\nfs.lchmod('file.js','755',function(err){\n\tif(err){\n\t\tconsole.log('lchmod error');\n\t}\n});\n//utimesSync\nfs.utimesSync('file.js',new Date(),new Date());\n//utimes\nfs.utimes('file.js',new Date(),new Date(),function(err){\n\tif(err){\n\t\tconsole.log('utimes error');\n\t}\n});\n//futimesSync\nfs.futimesSync(1,new Date(),new Date());\n//futimes\nfs.futimes(1,new Date(),new Date(),function(err){\n\tif(err){\n\t\tconsole.log('futimes error');\n\t}\n});\n//fsyncSync\nfs.fsyncSync(1);\n//fsync\nfs.fsync(1,function(err){\n\tif(err){\n\t\n"
    },
    {
      "index": 3,
      "text": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n\n    FILE *fp;\n    int i;\n    int num;\n    int fsize = 1024;\n    char *fname = \"test.txt\";\n\n    fp = fopen(fname, \"w+\");\n    if (fp == NULL) {\n        printf(\"error: failed to open file\\n\");\n        return -1;\n    }\n\n    srand(time(NULL));\n    for (i = 0; i < fsize; i++) {\n        num = rand() % 26 + 97;\n        fputc(num, fp);\n    }\n\n    fclose(fp);\n\n    return 0;\n}\n"
    }
  ],
  "created": 1650238733,
  "object": "edit"
}
2022-04-17 23:39:33.306587 NO RESULT
2022-04-17 23:39:33.306608 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-17 23:39:33.306667 fix syntax errors 3 ["var fs = require('fs');\n\nfunction readFile(filename) {\n    fs.readFile(filename, function(err, data) {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            console.log(data);\n        }\n    });\n}\n\nfunction writeFile(filename, data) {\n    fs.writeFile(filename, data, function(err) {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            console.log('Write success!');\n        }\n    });\n}\n\nfunction readDir(dir) {\n    fs.readdir(dir, function(err, data) {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            console.log(data);\n        }\n    });\n}\n\nfunction checkFileExistence(filename) {\n    fs.exists(filename, function(exists) {\n        console.log(exists ? 'File exists' : 'File not found');\n    });\n}\n\nfunction checkFileStats(filename) {\n    fs.stat(filename, function(err, stats) {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            console.log(stats);\n        }\n    });\n}\n\nfunction createReadStream(filename) {\n    var stream = fs.createReadStream(filename);\n    stream.on('data', function(data) {\n        console.log(data);\n    });\n    stream.on('end', function() {\n        console.log('Read stream end');\n    });\n    stream.on('error', function(err) {\n        console.log(err);\n    });\n}\n\nfunction createWriteStream(filename) {\n    var stream = fs.createWriteStream(filename);\n    stream.write('Hello');\n    stream.write('World');\n    stream.end();\n}\n\n// readFile('file.js');\n// writeFile('test.txt', 'Hello World!');\n// readDir('.');\n// checkFileExistence('test.txt');\n// checkFileStats('test.txt');\n// createReadStream('test.txt');\n// createWriteStream('test.txt');\n", "//fs module\nvar fs = require('fs');\n//readFileSync\nconsole.log(fs.readFileSync('file.js'));\n//readFile\nfs.readFile('file.js',function(err,data){\n\tconsole.log(data)\n});\n//writeFileSync\nfs.writeFileSync('test.txt','test content');\n//writeFile\nfs.writeFile('test.txt','test content',function(err){\n\tif(err){\n\t\tconsole.log('write error');\n\t}\n});\n//appendFileSync\nfs.appendFileSync('test.txt','append content');\n//appendFile\nfs.appendFile('test.txt','append content',function(err){\n\tif(err){\n\t\tconsole.log('append error');\n\t}\n});\n//unlinkSync\nfs.unlinkSync('test.txt');\n//unlink\nfs.unlink('test.txt',function(err){\n\tif(err){\n\t\tconsole.log('unlink error');\n\t}\n});\n//renameSync\nfs.renameSync('file.js','file-rename.js');\n//rename\nfs.rename('file-rename.js','file.js',function(err){\n\tif(err){\n\t\tconsole.log('rename error');\n\t}\n});\n//mkdirSync\nfs.mkdirSync('newdir');\n//mkdir\nfs.mkdir('newdir',function(err){\n\tif(err){\n\t\tconsole.log('mkdir error');\n\t}\n});\n//rmdirSync\nfs.rmdirSync('newdir');\n//rmdir\nfs.rmdir('newdir',function(err){\n\tif(err){\n\t\tconsole.log('rmdir error');\n\t}\n});\n//readdirSync\nconsole.log(fs.readdirSync('.'));\n//readdir\nfs.readdir('.',function(err,files){\n\tif(err){\n\t\tconsole.log('readdir error');\n\t}else{\n\t\tconsole.log(files);\n\t}\n});\n//existsSync\nconsole.log(fs.existsSync('file.js'));\n//exists\nfs.exists('file.js',function(exists){\n\tconsole.log(exists);\n});\n//statSync\nconsole.log(fs.statSync('file.js'));\n//stat\nfs.stat('file.js',function(err,stats){\n\tif(err){\n\t\tconsole.log('stat error');\n\t}else{\n\t\tconsole.log(stats);\n\t}\n});\n//lstatSync\nconsole.log(fs.lstatSync('file.js'));\n//lstat\nfs.lstat('file.js',function(err,stats){\n\tif(err){\n\t\tconsole.log('lstat error');\n\t}else{\n\t\tconsole.log(stats);\n\t}\n});\n//linkSync\nfs.linkSync('file.js','file-link.js');\n//link\nfs.link('file.js','file-link.js',function(err){\n\tif(err){\n\t\tconsole.log('link error');\n\t}\n});\n//unlinkSync\nfs.unlinkSync('file-link.js');\n//unlink\nfs.unlink('file-link.js',function(err){\n\tif(err){\n\t\tconsole.log('unlink error');\n\t}\n});\n//readlinkSync\nconsole.log(fs.readlinkSync('file.js'));\n//readlink\nfs.readlink('file.js',function(err,linkString){\n\tif(err){\n\t\tconsole.log('readlink error');\n\t}else{\n\t\tconsole.log(linkString);\n\t}\n});\n//symlinkSync\nfs.symlinkSync('file.js','file-symlink.js');\n//symlink\nfs.symlink('file.js','file-symlink.js',function(err){\n\tif(err){\n\t\tconsole.log('symlink error');\n\t}\n});\n//unlinkSync\nfs.unlinkSync('file-symlink.js');\n//unlink\nfs.unlink('file-symlink.js',function(err){\n\tif(err){\n\t\tconsole.log('unlink error');\n\t}\n});\n//realpathSync\nconsole.log(fs.realpathSync('file.js'));\n//realpath\nfs.realpath('file.js',function(err,resolvedPath){\n\tif(err){\n\t\tconsole.log('realpath error');\n\t}else{\n\t\tconsole.log(resolvedPath);\n\t}\n});\n//truncateSync\nfs.truncateSync('file.js',20);\n//truncate\nfs.truncate('file.js',20,function(err){\n\tif(err){\n\t\tconsole.log('truncate error');\n\t}\n});\n//ftruncateSync\nfs.ftruncateSync(1,20);\n//ftruncate\nfs.ftruncate(1,20,function(err){\n\tif(err){\n\t\tconsole.log('ftruncate error');\n\t}\n});\n//chownSync\nfs.chownSync('file.js',1000,1000);\n//chown\nfs.chown('file.js',1000,1000,function(err){\n\tif(err){\n\t\tconsole.log('chown error');\n\t}\n});\n//fchownSync\nfs.fchownSync(1,1000,1000);\n//fchown\nfs.fchown(1,1000,1000,function(err){\n\tif(err){\n\t\tconsole.log('fchown error');\n\t}\n});\n//lchownSync\nfs.lchownSync('file.js',1000,1000);\n//lchown\nfs.lchown('file.js',1000,1000,function(err){\n\tif(err){\n\t\tconsole.log('lchown error');\n\t}\n});\n//chmodSync\nfs.chmodSync('file.js','755');\n//chmod\nfs.chmod('file.js','755',function(err){\n\tif(err){\n\t\tconsole.log('chmod error');\n\t}\n});\n//fchmodSync\nfs.fchmodSync(1,'755');\n//fchmod\nfs.fchmod(1,'755',function(err){\n\tif(err){\n\t\tconsole.log('fchmod error');\n\t}\n});\n//lchmodSync\nfs.lchmodSync('file.js','755');\n//lchmod\nfs.lchmod('file.js','755',function(err){\n\tif(err){\n\t\tconsole.log('lchmod error');\n\t}\n});\n//utimesSync\nfs.utimesSync('file.js',new Date(),new Date());\n//utimes\nfs.utimes('file.js',new Date(),new Date(),function(err){\n\tif(err){\n\t\tconsole.log('utimes error');\n\t}\n});\n//futimesSync\nfs.futimesSync(1,new Date(),new Date());\n//futimes\nfs.futimes(1,new Date(),new Date(),function(err){\n\tif(err){\n\t\tconsole.log('futimes error');\n\t}\n});\n//fsyncSync\nfs.fsyncSync(1);\n//fsync\nfs.fsync(1,function(err){\n\tif(err){\n\t\n", '#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n\n    FILE *fp;\n    int i;\n    int num;\n    int fsize = 1024;\n    char *fname = "test.txt";\n\n    fp = fopen(fname, "w+");\n    if (fp == NULL) {\n        printf("error: failed to open file\\n");\n        return -1;\n    }\n\n    srand(time(NULL));\n    for (i = 0; i < fsize; i++) {\n        num = rand() % 26 + 97;\n        fputc(num, fp);\n    }\n\n    fclose(fp);\n\n    return 0;\n}\n']
2022-04-17 23:39:33.306833 size on output set 3
2022-04-17 23:39:33.306847 num operations 1
2022-04-17 23:39:33.306853 size on input set 1
2022-04-17 23:39:40.374660 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return ((x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or\n    (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4))\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or \n    (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 3,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    }
  ],
  "created": 1650238773,
  "object": "edit"
}
2022-04-17 23:39:40.374959 fix syntax errors 4 ['\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return ((x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or\n    (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4))\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or \n    (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n']
2022-04-17 23:39:40.375058 size on output set 4
