2022-04-21 03:43:29.693379 num operations 2
2022-04-21 03:43:29.693391 size on input set 1
2022-04-21 03:43:29.693540 using api key kouti
2022-04-21 03:43:36.561332 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i + 1 honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650512609,
  "object": "edit"
}
2022-04-21 03:43:36.561586 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i + 1 honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-21 03:43:36.561628 size on output set 2
2022-04-21 03:43:36.561636 size on input set 2
2022-04-21 03:43:36.561810 using api key derek
2022-04-21 03:43:36.598792 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 03:43:41.604198 using api key derek
2022-04-21 03:43:41.641270 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-21 03:43:51.651668 using api key gabby
2022-04-21 03:43:51.689243 in retry 4 20 <class 'Exception'>, Retrying in 20 seconds...
2022-04-21 03:44:11.709712 using api key gabby
2022-04-21 03:44:11.747117 in retry 3 40 <class 'Exception'>, Retrying in 40 seconds...
2022-04-21 03:44:51.787602 using api key kouti
2022-04-21 03:44:55.653157 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2 ** n):\n        # check if it is possible to have i + 1 honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) == 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(1 << n):\n        # check if it is possible to have i + 1 honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650512691,
  "object": "edit"
}
2022-04-21 03:44:55.653392 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2 ** n):\n        # check if it is possible to have i + 1 honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) == 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(1 << n):\n        # check if it is possible to have i + 1 honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-21 03:44:55.653715 using api key kouti
2022-04-21 03:44:58.113515 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650512695,
  "object": "edit"
}
2022-04-21 03:44:58.113750 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-21 03:44:58.113794 size on output set 3
2022-04-21 03:44:58.113826 num operations 2
2022-04-21 03:44:58.113833 size on input set 1
2022-04-21 03:44:58.113999 using api key jaanu
2022-04-21 03:45:01.775157 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"Main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"Solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"Is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650512698,
  "object": "edit"
}
2022-04-21 03:45:01.775457 fix spelling mistakes 2 ['\n\ndef main():\n    """Main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """Solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """Is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-21 03:45:01.775599 size on output set 2
2022-04-21 03:45:01.775615 size on input set 2
2022-04-21 03:45:01.775867 using api key soukgp
2022-04-21 03:45:05.214308 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"Solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"Is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    \"\"\"Main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"Solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"Is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650512701,
  "object": "edit"
}
2022-04-21 03:45:05.214668 fix syntax errors 2 ['\n\ndef main():\n    """Main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """Solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """Is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\ndef main():\n    """Main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """Solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """Is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-21 03:45:05.214861 using api key jaanu
2022-04-21 03:45:08.773570 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650512705,
  "object": "edit"
}
2022-04-21 03:45:08.773798 fix syntax errors 2 ['\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-21 03:45:08.773836 size on output set 3
