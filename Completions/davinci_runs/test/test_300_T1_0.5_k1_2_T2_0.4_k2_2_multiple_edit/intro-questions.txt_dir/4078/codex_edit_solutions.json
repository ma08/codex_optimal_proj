["\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\nlogging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m - 1):\n        segments.append(tuple(map(int, lines[i + 2].split())))\n\n    max_diff = 0\n    min_indices = []\n    for i in range(m - 1):\n        diff = 0\n        indices = []\n        for j in range(m - 1):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 2)\n        if diff > max_diff:\n            max_diff = diff\n            min_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(min_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, min_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=\"output.txt\")\n    args = parser.parse_args()\n\n    main(args)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\nlogging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.read().splitlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, lines[i + 2].split())))\n\n    max_diff = 0\n    max_indices = []\n    for i in range(m):\n        diff = 0\n        indices = []\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.append(j + 1)\n        if diff > max_diff:\n            max_diff = diff\n            max_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(max_indices)) + \"\\n\")\n        f.write(\" \".join(map(str, max_indices)) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=\"output.txt\")\n    args = parser.parse_args()\n\n    main(args)\n", "var fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', function (err, data) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(data);\n    }\n});\n\nconsole.log(\"Reading file...\");\n", "var fs = require(\"fs\");\n\nfs.readFile(\"file.txt\", \"utf8\", function(err, data) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(data);\n    }\n});\n\nconsole.log(\"Reading file...\");\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\n\n\nclass File(object):\n    def __init__(self, file_name):\n        self.file_name = file_name\n        self.file_path = os.path.abspath(self.file_name)\n        self.file_size = os.path.getsize(self.file_name)\n        self.file_type = self.file_name.split('.')[-1].lower()\n\n    def get_file_name(self):\n        return self.file_name\n\n    def get_file_path(self):\n        return self.file_path\n\n    def get_file_size(self):\n        return self.file_size\n\n    def get_file_type(self):\n        return self.file_type\n\n    def get_file_content(self):\n        file_content = ''\n        try:\n            with open(self.file_path, 'r') as f:\n                file_content = f.read()\n        except Exception as e:\n            print(e)\n        return file_content\n\n\nclass FileManager(object):\n    def __init__(self, path):\n        self.path = path\n        self.file_list = self.__get_file_list(path)\n\n    def __get_file_list(self, path):\n        file_list = []\n        for root, dirs, files in os.walk(path):\n            for file in files:\n                file_list.append(os.path.join(root, file))\n        return file_list\n\n    def get_file_list(self):\n        return self.file_list\n\n    def get_file_list_by_type(self, file_type):\n        file_list = []\n        for file in self.file_list:\n            if file.split('.')[-1].lower() == file_type:\n                file_list.append(file)\n        return file_list\n\n    def get_file_list_by_size(self, size):\n        file_list = []\n        for file in self.file_list:\n            if os.path.getsize(file) > size:\n                file_list.append(file)\n        return file_list\n\n    def get_file_list_by_keyword(self, keyword):\n        file_list = []\n        for file in self.file_list:\n            if re.search(keyword, file):\n                file_list.append(file)\n        return file_list\n\n\nif __name__ == '__main__':\n    file_manager = FileManager('.')\n    file_list = file_manager.get_file_list_by_keyword('file')\n    for file in file_list:\n        print(file)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n# logging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m - 1):\n        segments.append(tuple(map(int, lines[i + 2].split())) + (i + 1,))\n\n    max_diff = 0\n    min_indices = set()\n    for i in range(m):\n        diff = 0\n        indices = set()\n        for j in range(m):\n            if j == i:\n                continue\n\n            l, r, index = segments[j]\n            diff += sum(a[l - 1:r])\n            indices.add(index)\n        if diff > max_diff:\n            max_diff = diff\n            min_indices = indices\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(max_diff) + \"\\n\")\n        f.write(str(len(min_indices) + 1) + \"\\n\")\n        f.write(\" \".join(map(str, min_indices)) + \" \" + str(i + 1) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\n\n\nclass File(object):\n    def __init__(self, file_name):\n        self.file_name = file_name\n        self.file_path = os.path.abspath(file_name)\n        self.file_size = os.path.getsize(self.file_path)\n        self.file_type = self.file_name.split('.')[-1]\n\n    def get_file_name(self):\n        return self.file_name\n\n    def get_file_path(self):\n        return self.file_path\n\n    def get_file_size(self):\n        return self.file_size\n\n    def get_file_type(self):\n        return self.file_type\n\n    def get_file_content(self):\n        file_content = ''\n        try:\n            with open(self.file_path, 'r') as f:\n                file_content = f.read()\n        except Exception as e:\n            print(e)\n        return file_content\n\n\nclass FileManager(object):\n    def __init__(self, path):\n        self.path = path\n        self.file_list = self.__get_file_list(path)\n\n    def __get_file_list(self, path):\n        file_list = []\n        for root, dirs, files in os.walk(path):\n            for file in files:\n                file_list.append(os.path.join(root, file))\n        return file_list\n\n    def get_file_list(self):\n        return self.file_list\n\n    def get_file_list_by_type(self, file_type):\n        file_list = []\n        for file in self.file_list:\n            if file.split('.')[-1] == file_type:\n                file_list.append(file)\n        return file_list\n\n    def get_file_list_by_size(self, size):\n        file_list = []\n        for file in self.file_list:\n            if os.path.getsize(file) > size:\n                file_list.append(file)\n        return file_list\n\n    def get_file_list_by_keyword(self, keyword):\n        file_list = []\n        for file in self.file_list:\n            if re.search(keyword, file):\n                file_list.append(file)\n        return file_list\n\n\nif __name__ == '__main__':\n    file_manager = FileManager('.')\n    file_list = file_manager.get_file_list_by_keyword('file')\n    for file in file_list:\n        print(file)\n", "\n\nimport argparse\nimport os\nimport sys\nimport logging\nfrom collections import defaultdict\nfrom typing import List\n\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\nlogging.disable(logging.CRITICAL)\n\n\ndef main(args):\n    lines = args.input_file.readlines()\n    n, k = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))[:n]\n    b = list(map(int, lines[2].split()))[:n]\n\n    a.sort()\n    b.sort()\n\n    for i in range(k):\n        if a[i] < b[n - i - 1]:\n            a[i], b[n - i - 1] = b[n - i - 1], a[i]\n        else:\n            break\n\n    res = sum(a)\n\n    with open(args.output_file, \"w\") as f:\n        f.write(str(res) + \"\\n\")\n\n    return\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", type=argparse.FileType(\"r\"), default=sys.stdin)\n    parser.add_argument(\"-o\", \"--output_file\", type=str, default=sys.stdout)\n    args = parser.parse_args()\n\n    main(args)\n"]