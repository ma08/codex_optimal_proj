2022-04-20 23:37:50.841159 num operations 2
2022-04-20 23:37:50.841170 size on input set 1
2022-04-20 23:37:50.841311 using api key derek
2022-04-20 23:37:51.020967 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 23:37:56.024500 using api key soukgp
2022-04-20 23:38:00.819212 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 1,
      "text": "\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest sub-sequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    }
  ],
  "created": 1650497876,
  "object": "edit"
}
2022-04-20 23:38:00.819498 fix spelling mistakes 2 ['\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n', '\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest sub-sequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n']
2022-04-20 23:38:00.819531 size on output set 2
2022-04-20 23:38:00.819540 size on input set 2
2022-04-20 23:38:00.819699 using api key soukgp
2022-04-20 23:38:17.600370 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 1,
      "text": "\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1.\n# Each element represents the length of the longest sub-sequence of the sub in a substring of inp.\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)] \n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    }
  ],
  "created": 1650497880,
  "object": "edit"
}
2022-04-20 23:38:17.600589 fix syntax errors 2 ['\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\nprint(len(inp) - dp[-1][-1])\n', '\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1.\n# Each element represents the length of the longest sub-sequence of the sub in a substring of inp.\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)] \n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n']
2022-04-20 23:38:17.600836 using api key jaanu
2022-04-20 23:38:21.065673 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 1,
      "text": "\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of inp\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    }
  ],
  "created": 1650497897,
  "object": "edit"
}
2022-04-20 23:38:21.065889 fix syntax errors 2 ['\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n', '\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of inp\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n']
2022-04-20 23:38:21.065920 size on output set 4
2022-04-20 23:38:21.065932 num operations 2
2022-04-20 23:38:21.065938 size on input set 1
2022-04-20 23:38:21.066097 using api key kouti
2022-04-20 23:38:26.165925 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix.\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix.\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n"
    },
    {
      "index": 1,
      "text": "\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix.\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix.\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n"
    }
  ],
  "created": 1650497901,
  "object": "edit"
}
2022-04-20 23:38:26.166243 fix spelling mistakes 2 ['\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix.\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix.\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n', '\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix.\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix.\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n']
2022-04-20 23:38:26.166279 size on output set 1
2022-04-20 23:38:26.166287 size on input set 1
2022-04-20 23:38:26.166481 using api key jaanu
2022-04-20 23:38:43.592972 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input().strip()\nt = input().strip()\n\ndef get_lcs(s,t):\n    # Create a DP matrix.\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix.\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n"
    },
    {
      "index": 1,
      "text": "\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n\t# Create a DP matrix.\n\tdp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n\t\n\t# Populate the matrix.\n\tfor i in range(1, len(t)+1):\n\t\tfor j in range(1, len(s)+1):\n\t\t\tif t[i-1] == s[j-1]:\n\t\t\t\tdp[i][j] = dp[i-1][j-1] + 1\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\t\n\treturn dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n"
    }
  ],
  "created": 1650497906,
  "object": "edit"
}
2022-04-20 23:38:43.593204 fix syntax errors 2 ['\n\ns = input().strip()\nt = input().strip()\n\ndef get_lcs(s,t):\n    # Create a DP matrix.\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix.\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n', '\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n\t# Create a DP matrix.\n\tdp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n\t\n\t# Populate the matrix.\n\tfor i in range(1, len(t)+1):\n\t\tfor j in range(1, len(s)+1):\n\t\t\tif t[i-1] == s[j-1]:\n\t\t\t\tdp[i][j] = dp[i-1][j-1] + 1\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\t\n\treturn dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n']
2022-04-20 23:38:43.593235 size on output set 2
