["def min_moves(n):\n    x, y = 1, 1\n    moves = 0\n    while True:\n        moves += 1\n        if n == x * y:\n            return moves\n        elif n < x * y:\n            y -= 1\n            x += 1\n        else:\n            x += 1\n\n\ndef main():\n    n = int(input())\n    print(min_moves(n))  # noqa\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\n\ndef min_moves(n):\n    x, y = 1, n\n    moves = 0\n    while x * y != n:\n        moves += 1\n        if n < x * y:\n            x += 1\n        else:\n            y -= 1\n    return moves\n\n\ndef main():\n    n = int(input()) # number of test cases\n    for i in range(n):\n        print(min_moves(int(input())))\n\n\nif __name__ == '__main__':\n    main()\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\nprint(a ** b + c ** d)\n", "import random\n\nn = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a: \"))\nm = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432: \"))\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append([])\n    for j in range(m):\n        matrix[i].append(random.randint(0, 100))\n\nfor i in range(n):\n    for j in range(m):\n        print(matrix[i][j], end=\" \")\n    print()\n", "\n\n\ndef min_moves(n, m):\n    x, y = 1, 1\n    moves = 0\n    while True:\n        moves += 1\n        if n * m == x * y:\n            return moves\n        elif n * m < x * y:\n            y -= 1\n            x += 1\n        else:\n            x += 1\n\n\ndef main():\n    n, m = map(int, raw_input().split())\n    print(min_moves(n, m))\n\n\nif __name__ == '__main__':\n    main()\n", "import random\n\nn = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a: \"))\nm = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432: \"))\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append([])\n    for j in range(m):\n        matrix[i].append(random.randint(0, 100))\n\nfor i in range(n):\n    for j in range(m):\n        print(matrix[i][j], end=\" \")\n    print()\n\n\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\nprint(a**b + c**d)\n", "\ndef min_moves(n, m):\n    x, y = 1, 1\n    moves = 0\n    while True:\n        moves += 1\n        if n * m == x * y:\n            return moves\n        elif n * m < x * y:\n            y -= 1\n            x += 1\n        else:\n            x += 1\n\n\ndef main():\n    n, m = map(int, input().split())\n    print(min_moves(n, m))\n\n\nif __name__ == '__main__':\n    main()\n"]