["\n\nimport math\n\nn, m = [int(x) for x in input().split()]\n\ndef is_prime(x):\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x))+1, 2):\n        if x % i == 0:\n            return False\n    return True\n\ndef get_prime_factors(x):\n    factors = []\n    for i in range(2, int(math.sqrt(x))+1):\n        if x % i == 0 and is_prime(i):\n            factors.append(i)\n    return factors\n\ndef get_prime_factor_count(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factor_count(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factor_count_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\n    min_bottles = n//2\n    min_cost = min_bottles * b + (n%2)*a\n    if a > b:\n        min_cost = min(min_cost, (n//2)*a + (n%2)*b)\n\n    print(min_cost)\n", "\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n    \n    min_bottles = n // 2\n    min_cost = min_bottles * b + (n % 2) * a\n    if a > b:\n        min_cost = min(min_cost, (n // 2) * a + (n % 2) * b)\n    \n    print(min_cost)\n", "# Solution\nfor _ in range(int(input())):\n    n, a, b = map(int, input().split())\n    x = n//2\n    y = n%2\n    cost = x*min(a*2, b)+y*a\n    print(cost)\n", "\n\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n", "#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n", "\n\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n    \n    min_bottles = n // 2 * b\n    min_cost = min_bottles + (n % 2) * a\n    if a > b:\n        min_cost = min(min_cost, (n // 2) * a + (n % 2) * a)\n    \n    print(min_cost)\n", "\n\nimport math\n\nn, m = [int(x) for x in input().split()]\n\ndef is_prime(x):\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x))+1, 2):\n        if x % i == 0:\n            return False\n    return True\n\ndef get_prime_factors(x):\n    factors = []\n    for i in range(2, int(math.sqrt(x))+1):\n        if x % i == 0 and is_prime(i):\n            factors.append(i)\n    return factors\n\ndef get_prime_factor_count(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factor_count(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factor_count_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_prime_factors_with_powers(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\ndef get_factors(x):\n    factors = get_prime_factors(x)\n    factor_count = {}\n    for factor in factors:\n        if factor not in factor_count:\n            factor_count[factor] = 1\n        else:\n            factor_count[factor] += 1\n    return factor_count\n\n    min_bottles = n//2\n    min_cost = min_bottles * b + (n%2)*a\n    if a > b:\n        min_cost = min(min_cost, (n//2)*a + (n%2)*b)\n    \n    print(min_cost)\n"]