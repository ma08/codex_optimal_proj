["\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros(N+1, dtype=np.int)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken or (i-1) in broken and (i-2) in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n", "import sys\nsys.setrecursionlimit(10**6)\n\nn, m = map(int, input().split())\nbroken = set(map(int, [input() for _ in range(m)]))\ndef dfs(i):\n    if i == 0:\n        return 1\n    if i < 0:\n        return 0\n    if dp[i] != -1:\n        return dp[i]\n    if i in broken or (i-1) in broken and (i-2) in broken:\n        return 0\n    dp[i] = dfs(i-1) + dfs(i-2)\n    return dp[i]\n\n\ndp = [0] * (n+1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, n+1):\n    if i in broken or (i-1) in broken and (i-2) in broken:\n        continue\n    dp[i] = dp[i-1] + dp[i-2]\n\nprint(dp[n] % 1000000007)\n", "import numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros(N+1, dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, m = map(int, input().split()) # n\uc740 \uc0c1\uadfc\uc774\uac00 \uc774\ub3d9\ud574\uc57c \ud560 \uac70\ub9ac, m\uc740 \ubc84\ud2bc\uc774 \uace0\uc7a5\ub09c \uac70\ub9ac\nbroken = set(map(int, [input() for _ in range(m)])) # \uc774\ub3d9\ud560 \uc218 \uc5c6\ub294 \ubc84\ud2bc\uc758 \ubc88\ud638\ub97c \uc800\uc7a5\ud55c\ub2e4.\n\ndp = [0] * (n+1) # dp\uc758 \ucd08\uae30\uac12\uc744 0\uc73c\ub85c \uc124\uc815\ud574\uc900\ub2e4.\ndp[0] = 1 # 0\ubc88\uc9f8 \ubc84\ud2bc\uc740 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uae30 \ub54c\ubb38\uc5d0 1\ub85c \uc124\uc815\ud574\uc900\ub2e4.\ndp[1] = 1 # 1\ubc88\uc9f8 \ubc84\ud2bc\uc740 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uae30 \ub54c\ubb38\uc5d0 1\ub85c \uc124\uc815\ud574\uc900\ub2e4.\n\nfor i in range(2, n+1): # 2\ubc88\uc9f8 \ubc84\ud2bc\ubd80\ud130 n\ubc88\uc9f8 \ubc84\ud2bc\uae4c\uc9c0 \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4.\n    if i in broken: # i\ubc88\uc9f8 \ubc84\ud2bc\uc774 \uace0\uc7a5\ub09c \uacbd\uc6b0\n        continue # \ub2e4\uc74c \ubc84\ud2bc\uc73c\ub85c \ub118\uc5b4\uac04\ub2e4.\n    dp[i] = dp[i-1] + dp[i-2] # i\ubc88\uc9f8 \ubc84\ud2bc\uc774 \uc815\uc0c1\uc778 \uacbd\uc6b0, i\ubc88\uc9f8 \ubc84\ud2bc\uc5d0 \ub3c4\ucc29\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\ub294 i-1\ubc88\uc9f8 \ubc84\ud2bc\uc5d0 \ub3c4\ucc29\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\uc640 i-2\ubc88\uc9f8 \ubc84\ud2bc\uc5d0 \ub3c4\ucc29\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\uc758 \ud569\uc774\ub2e4.\n\nprint(dp[n] % 1000000007) # \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n", "import numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros((N+1), dtype=np.int64)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport numpy as np\n\ndef main():\n    N, M = map(int, input().split())\n    broken_steps = [int(input()) for _ in range(M)]\n    broken_steps.sort()\n    dp = np.zeros(N+1, dtype=np.int)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N + 1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    print(dp[N])\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, m = map(int, input().split()) # n\uc740 \uc0c1\uadfc\uc774\uac00 \uc774\ub3d9\ud574\uc57c \ud560 \uac70\ub9ac, m\uc740 \ubc84\ud2bc\uc774 \uace0\uc7a5\ub09c \uac70\ub9ac\nbroken = set(map(int, [input() for _ in range(m)])) # broken\uc740 \uace0\uc7a5\ub09c \ubc84\ud2bc\uc758 \ubc88\ud638\ub97c \uc800\uc7a5\ud558\ub294 \uc9d1\ud569\uc774\ub2e4.\n\ndp = [0] * (n+1) # dp\uc758 \ucd08\uae30\uac12\uc744 0\uc73c\ub85c \uc124\uc815\ud574\uc900\ub2e4.\ndp[0] = 1 # 0\ubc88\uc9f8 \ubc84\ud2bc\uc740 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uae30 \ub54c\ubb38\uc5d0 1\ub85c \uc124\uc815\ud574\uc900\ub2e4.\ndp[1] = 1 # 1\ubc88\uc9f8 \ubc84\ud2bc\uc740 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uae30 \ub54c\ubb38\uc5d0 1\ub85c \uc124\uc815\ud574\uc900\ub2e4.\n\nfor i in range(2, n+1): # 2\ubc88\uc9f8 \ubc84\ud2bc\ubd80\ud130 n\ubc88\uc9f8 \ubc84\ud2bc\uae4c\uc9c0 \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4.\n    if i in broken: # i\ubc88\uc9f8 \ubc84\ud2bc\uc774 \uace0\uc7a5\ub09c \uacbd\uc6b0\n        continue # \ub2e4\uc74c \ubc84\ud2bc\uc73c\ub85c \ub118\uc5b4\uac04\ub2e4.\n    dp[i] = dp[i-1] + dp[i-2] # i\ubc88\uc9f8 \ubc84\ud2bc\uc774 \uc815\uc0c1\uc778 \uacbd\uc6b0, i\ubc88\uc9f8 \ubc84\ud2bc\uc5d0 \ub3c4\ucc29\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\ub294 i-1\ubc88\uc9f8 \ubc84\ud2bc\uc5d0 \ub3c4\ucc29\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\uc640 i-2\ubc88\uc9f8 \ubc84\ud2bc\uc5d0 \ub3c4\ucc29\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\uc758 \ud569\uc774\ub2e4.\n\nprint(dp[n] % 1000000007) # dp[n]\uc744 \ucd9c\ub825\ud55c\ub2e4.\n"]