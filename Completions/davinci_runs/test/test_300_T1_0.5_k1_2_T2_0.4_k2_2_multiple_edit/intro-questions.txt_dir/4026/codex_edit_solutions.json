["import sys\n\nt = int(sys.stdin.readline())\n\nfor i in range(t):\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in sys.stdin.readline().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in sys.stdin.readline().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n", "\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            for tile in tiles:\n                if check_tile(tile, square, i, j):\n                    square[i][j] = tile[0][0]\n                    square[i][j+1] = tile[0][1]\n                    square[i+1][j] = tile[1][0]\n                    square[i+1][j+1] = tile[1][1]\n                    break\n            else:\n                return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if i+1 < len(square) and j+1 < len(square):\n        if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n            return True\n        if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n            return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n", "\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0 and i+1 < len(square) and j+1 < len(square):\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0] or tile[1][0]\n                        square[i][j+1] = tile[0][1] or tile[1][1]\n                        square[i+1][j] = tile[1][0] or tile[0][0]\n                        square[i+1][j+1] = tile[1][1] or tile[0][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n            return True\n        if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n            return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m == 1:\n        if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and \\\n                tiles[0][3] == tiles[0][0]:\n            print(\"NO\")\n    elif m == 2:\n        if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and \\\n                tiles[0][3] == tiles[0][0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        print(\"YES\")\n", "\n\ndef check_square(tiles, grid):\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            if grid[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, grid, i, j):\n                        grid[i][j] = tile[0][0]\n                        grid[i][j+1] = tile[0][1]\n                        grid[i+1][j] = tile[1][0]\n                        grid[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\n    # if grid[i][j] == 0 and grid[i][j+1] == 0 and grid[i+1][j] == 0 and grid[i+1][j+1] == 0:\n    #     if i+1 < len(square) and j+1 < len(square):\n    #         if grid[i][j+1] == tile[0][0] and grid[i+1][j+1] == tile[1][0] and grid[i+1][j] == tile[0][1] and grid[i][j] == tile[1][1]:\n    #             return True\n    #         if grid[i+1][j] == tile[0][0] and grid[i+1][j+1] == tile[1][0] and grid[i][j+1] == tile[0][1] and grid[i][j] == tile[1][1]:\n    #             return True\n    #         if grid[i][j] == tile[0][0] and grid[i][j+1] == tile[1][0] and grid[i+1][j+1] == tile[0][1] and grid[i+1][j] == tile[1][1]:\n    #             return True\n    #         if grid[i][j] == tile[0][0] and grid[i+1][j] == tile[1][0] and grid[i][j+1] == tile[0][1] and grid[i+1][j+1] == tile[1][1]:\n    #             return True\n    # return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        grid = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, grid):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef check_square(tiles, grid):\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            if grid[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, grid, i, j):\n                        grid[i][j] = tile[0][0]\n                        grid[i][j+1] = tile[0][1]\n                        grid[i+1][j] = tile[1][0]\n                        grid[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, grid, i, j):\n    if i+1 < len(grid) and j+1 < len(grid):\n        if grid[i][j+1] == tile[0][0] and grid[i+1][j+1] == tile[1][0] and grid[i+1][j] == tile[0][1] and grid[i][j] == tile[1][1]:\n            return True\n        if grid[i+1][j] == tile[0][0] and grid[i+1][j+1] == tile[1][0] and grid[i][j+1] == tile[0][1] and grid[i][j] == tile[1][1]:\n            return True\n        if grid[i][j] == tile[0][0] and grid[i][j+1] == tile[1][0] and grid[i+1][j+1] == tile[0][1] and grid[i+1][j] == tile[1][1]:\n            return True\n        if grid[i][j] == tile[0][0] and grid[i+1][j] == tile[1][0] and grid[i][j+1] == tile[0][1] and grid[i+1][j+1] == tile[1][1]:\n            return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        grid = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, grid):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "t = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().strip().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().strip().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().strip().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and \\\n                    tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and \\\n                    tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and \\\n                    tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"]