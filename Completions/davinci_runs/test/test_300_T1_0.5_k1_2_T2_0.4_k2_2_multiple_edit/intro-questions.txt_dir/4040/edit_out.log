2022-04-20 23:36:14.728540 num operations 2
2022-04-20 23:36:14.728551 size on input set 1
2022-04-20 23:36:14.728695 using api key gabby
2022-04-20 23:36:14.886540 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 23:36:19.891954 using api key sunu
2022-04-20 23:36:26.230448 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#submitted \nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint(\"YES\")\nprint(*get_river(n, m, d, c))\n"
    },
    {
      "index": 1,
      "text": "\n\n#submitted\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint(\"YES\")\nprint(*get_river(n, m, d, c))\n\n#submitted\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint(\"YES\")\nprint(*get_river(n, m, d, c))\n"
    }
  ],
  "created": 1650497779,
  "object": "edit"
}
2022-04-20 23:36:26.230755 fix spelling mistakes 2 ['\n\n#submitted \nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint("YES")\nprint(*get_river(n, m, d, c))\n', '\n\n#submitted\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint("YES")\nprint(*get_river(n, m, d, c))\n\n#submitted\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint("YES")\nprint(*get_river(n, m, d, c))\n']
2022-04-20 23:36:26.230812 size on output set 2
2022-04-20 23:36:26.230823 size on input set 2
2022-04-20 23:36:26.231074 using api key derek
2022-04-20 23:36:26.270472 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 23:36:31.275850 using api key jaanu
2022-04-20 23:36:45.358084 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#submitted\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint(\"YES\")\nprint(*get_river(n, m, d, c))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint(\"YES\")\nprint(*get_river(n, m, d, c))\n"
    }
  ],
  "created": 1650497791,
  "object": "edit"
}
2022-04-20 23:36:45.358320 fix syntax errors 2 ['\n\n#submitted\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint("YES")\nprint(*get_river(n, m, d, c))\n', '\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint("YES")\nprint(*get_river(n, m, d, c))\n']
2022-04-20 23:36:45.358543 using api key derek
2022-04-20 23:36:45.395648 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 23:36:50.401014 using api key jaanu
2022-04-20 23:37:07.624502 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint(\"YES\")\nprint(*get_river(n, m, d, c))\n"
    },
    {
      "index": 1,
      "text": "\n\n#submitted\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\n\ndef get_platforms(n, m, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1] * c[i])\n    return platforms\n\n\ndef get_river(n, m, d, platforms):\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint(\"YES\")\nprint(*get_river(n, m, d, c))\n"
    }
  ],
  "created": 1650497810,
  "object": "edit"
}
2022-04-20 23:37:07.624911 fix syntax errors 2 ['\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef get_platforms(n, m, d, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1]*c[i])\n    return platforms\n\ndef get_river(n, m, d, c):\n    platforms = get_platforms(n, m, d, c)\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint("YES")\nprint(*get_river(n, m, d, c))\n', '\n\n#submitted\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\n\ndef get_platforms(n, m, c):\n    platforms = []\n    for i in range(m):\n        platforms.append([i+1] * c[i])\n    return platforms\n\n\ndef get_river(n, m, d, platforms):\n    river = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if len(platforms[j]) == 0:\n                continue\n            if platforms[j][0] == i+1:\n                river[i] = j+1\n                platforms[j] = platforms[j][1:]\n    return river\n\nprint("YES")\nprint(*get_river(n, m, d, c))\n']
2022-04-20 23:37:07.624950 size on output set 4
2022-04-20 23:37:07.624962 num operations 2
2022-04-20 23:37:07.624968 size on input set 1
2022-04-20 23:37:07.625144 using api key jaanu
2022-04-20 23:37:17.784391 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# The problem is essentially asking if the platform lengths can be arranged in such a way that you can jump from 0 to n+1.\n# This can be done by arranging the platforms in non-decreasing order and then checking if the first platform is at least d units away from 0.\n\n# CAREFUL: The platforms can be moved to the left or right, but their relative order must be maintained.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 1, 2] or [1, 2, 1] or [2, 1, 1].\n\n# CAREFUL: The platforms can touch each other, but they cannot intersect.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 2, 1] or [2, 1, 1] or [1, 1, 2].\n\n# CAREFUL: Also, the platforms cannot be moved to the left of 0 or to the right of n+1.\n\n# CAREFUL: Also, you can jump to any position in the range [x + 1; x + d] where x is your current position.\n# So, if your current position is x, then you can jump to x + 1, x + 2, ..., x + d.\n# But, you can jump only to such cells that belong to some wooden platform.\n\n# CAREFUL: You can assume that cells 0 and n+1 belong to wooden platforms.\n\n# CAREFUL: You should move platforms until you start jumping (in other words, you first move the platforms and then start jumping).\n\n# CAREFUL: You want to know if it is possible to reach n+1 from 0 if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other). It also means that you cannot change the relative order of platforms.\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# The problem is essentially asking if the platform lengths can be arranged in such a way that you can jump from 0 to n+1.\n# This can be done by arranging the platforms in non-decreasing order and then checking if the first platform is at least d units away from 0.\n\n# CAREFUL: The platforms can be moved to the left or right, but their relative order must be maintained.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 1, 2] or [1, 2, 1] or [2, 1, 1].\n\n# CAREFUL: The platforms can touch each other, but they cannot intersect.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 2, 1] or [2, 1, 1] or [1, 1, 2].\n\n# CAREFUL: Also, the platforms cannot be moved to the left of 0 or to the right of n+1.\n\n# CAREFUL: Also, you can jump to any position in the range [x + 1; x + d] where x is your current position.\n# So, if your current position is x, then you can jump to x + 1, x + 2, ..., x + d.\n# But, you can jump only to such cells that belong to some wooden platform.\n\n# CAREFUL: You can assume that cells 0 and n+1 belong to wooden platforms.\n\n# CAREFUL: You should move platforms until you start jumping (in other words, you first move the platforms and then start jumping).\n\n# CAREFUL: You want to know if it is possible to reach n+1 from 0 if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other). It also means that you cannot change the relative order of platforms.\n"
    }
  ],
  "created": 1650497827,
  "object": "edit"
}
2022-04-20 23:37:17.784615 fix spelling mistakes 2 ['\n\n# SOLUTION\n# The problem is essentially asking if the platform lengths can be arranged in such a way that you can jump from 0 to n+1.\n# This can be done by arranging the platforms in non-decreasing order and then checking if the first platform is at least d units away from 0.\n\n# CAREFUL: The platforms can be moved to the left or right, but their relative order must be maintained.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 1, 2] or [1, 2, 1] or [2, 1, 1].\n\n# CAREFUL: The platforms can touch each other, but they cannot intersect.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 2, 1] or [2, 1, 1] or [1, 1, 2].\n\n# CAREFUL: Also, the platforms cannot be moved to the left of 0 or to the right of n+1.\n\n# CAREFUL: Also, you can jump to any position in the range [x + 1; x + d] where x is your current position.\n# So, if your current position is x, then you can jump to x + 1, x + 2, ..., x + d.\n# But, you can jump only to such cells that belong to some wooden platform.\n\n# CAREFUL: You can assume that cells 0 and n+1 belong to wooden platforms.\n\n# CAREFUL: You should move platforms until you start jumping (in other words, you first move the platforms and then start jumping).\n\n# CAREFUL: You want to know if it is possible to reach n+1 from 0 if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other). It also means that you cannot change the relative order of platforms.\n', '\n\n# SOLUTION\n# The problem is essentially asking if the platform lengths can be arranged in such a way that you can jump from 0 to n+1.\n# This can be done by arranging the platforms in non-decreasing order and then checking if the first platform is at least d units away from 0.\n\n# CAREFUL: The platforms can be moved to the left or right, but their relative order must be maintained.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 1, 2] or [1, 2, 1] or [2, 1, 1].\n\n# CAREFUL: The platforms can touch each other, but they cannot intersect.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 2, 1] or [2, 1, 1] or [1, 1, 2].\n\n# CAREFUL: Also, the platforms cannot be moved to the left of 0 or to the right of n+1.\n\n# CAREFUL: Also, you can jump to any position in the range [x + 1; x + d] where x is your current position.\n# So, if your current position is x, then you can jump to x + 1, x + 2, ..., x + d.\n# But, you can jump only to such cells that belong to some wooden platform.\n\n# CAREFUL: You can assume that cells 0 and n+1 belong to wooden platforms.\n\n# CAREFUL: You should move platforms until you start jumping (in other words, you first move the platforms and then start jumping).\n\n# CAREFUL: You want to know if it is possible to reach n+1 from 0 if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other). It also means that you cannot change the relative order of platforms.\n']
2022-04-20 23:37:17.784767 size on output set 1
2022-04-20 23:37:17.784777 size on input set 1
2022-04-20 23:37:17.784937 using api key derek
2022-04-20 23:37:17.822714 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 23:37:22.828090 using api key kouti
2022-04-20 23:37:50.449031 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# The problem is essentially asking if the platform lengths can be arranged in such a way that you can jump from 0 to n + 1.\n# This can be done by arranging the platforms in non-decreasing order and then checking if the first platform is at least d units away from 0\n\n# CAREFUL: The platforms can be moved to the left or right, but their relative order must be maintained\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2]\n# But, the platform lengths cannot be arranged as [1, 1, 2] or [1, 2, 1] or [2, 1, 1]\n\n# CAREFUL: The platforms can touch each other, but they cannot intersect\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2]\n# But, the platform lengths cannot be arranged as [1, 2, 1] or [2, 1, 1] or [1, 1, 2]\n\n# CAREFUL: Also, the platforms cannot be moved to the left of 0 or to the right of n + 1\n\n# CAREFUL: Also, you can jump to any position in the range [x + 1; x + d] where x is your current position\n# So, if your current position is x, then you can jump to x + 1, x + 2, ..., x + d\n# But, you can jump only to such cells that belong to some wooden platform.\n\n# CAREFUL: You can assume that cells 0 and n + 1 belong to wooden platforms\n\n# CAREFUL: You should move platforms until you start jumping (in other words, you first move the platforms and then start jumping)\n\n# CAREFUL: You want to know if it is possible to reach n + 1 from 0 if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other). It also means that you cannot change the relative order of platforms\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# The problem is essentially asking if the platform lengths can be arranged in such a way that you can jump from 0 to n+1.\n# This can be done by arranging the platforms in non-decreasing order and then checking if the first platform is at least d units away from 0.\n\n# CAREFUL: The platforms can be moved to the left or right, but their relative order must be maintained.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 1, 2] or [1, 2, 1] or [2, 1, 1].\n\n# CAREFUL: The platforms can touch each other, but they cannot intersect.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 2, 1] or [2, 1, 1] or [1, 1, 2].\n\n# CAREFUL: Also, the platforms cannot be moved to the left of 0 or to the right of n+1.\n\n# CAREFUL: Also, you can jump to any position in the range [x + 1; x + d] where x is your current position.\n# So, if your current position is x, then you can jump to x + 1, x + 2, ..., x + d.\n# But, you can jump only to such cells that belong to some wooden platform.\n\n# CAREFUL: You can assume that cells 0 and n+1 belong to wooden platforms.\n\n# CAREFUL: You should move platforms until you start jumping (in other words, you first move the platforms and then start jumping).\n\n# CAREFUL: You want to know if it is possible to reach n+1 from 0 if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other).\n# It also means that you cannot change the relative order of platforms.\n"
    }
  ],
  "created": 1650497842,
  "object": "edit"
}
2022-04-20 23:37:50.449362 fix syntax errors 2 ['\n\n# SOLUTION\n# The problem is essentially asking if the platform lengths can be arranged in such a way that you can jump from 0 to n + 1.\n# This can be done by arranging the platforms in non-decreasing order and then checking if the first platform is at least d units away from 0\n\n# CAREFUL: The platforms can be moved to the left or right, but their relative order must be maintained\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2]\n# But, the platform lengths cannot be arranged as [1, 1, 2] or [1, 2, 1] or [2, 1, 1]\n\n# CAREFUL: The platforms can touch each other, but they cannot intersect\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2]\n# But, the platform lengths cannot be arranged as [1, 2, 1] or [2, 1, 1] or [1, 1, 2]\n\n# CAREFUL: Also, the platforms cannot be moved to the left of 0 or to the right of n + 1\n\n# CAREFUL: Also, you can jump to any position in the range [x + 1; x + d] where x is your current position\n# So, if your current position is x, then you can jump to x + 1, x + 2, ..., x + d\n# But, you can jump only to such cells that belong to some wooden platform.\n\n# CAREFUL: You can assume that cells 0 and n + 1 belong to wooden platforms\n\n# CAREFUL: You should move platforms until you start jumping (in other words, you first move the platforms and then start jumping)\n\n# CAREFUL: You want to know if it is possible to reach n + 1 from 0 if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other). It also means that you cannot change the relative order of platforms\n', '\n\n# SOLUTION\n# The problem is essentially asking if the platform lengths can be arranged in such a way that you can jump from 0 to n+1.\n# This can be done by arranging the platforms in non-decreasing order and then checking if the first platform is at least d units away from 0.\n\n# CAREFUL: The platforms can be moved to the left or right, but their relative order must be maintained.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 1, 2] or [1, 2, 1] or [2, 1, 1].\n\n# CAREFUL: The platforms can touch each other, but they cannot intersect.\n# So, if the platform lengths are [1, 2, 1], then the platform lengths can be arranged as [2, 1, 1] or [1, 2, 1] or [1, 1, 2].\n# But, the platform lengths cannot be arranged as [1, 2, 1] or [2, 1, 1] or [1, 1, 2].\n\n# CAREFUL: Also, the platforms cannot be moved to the left of 0 or to the right of n+1.\n\n# CAREFUL: Also, you can jump to any position in the range [x + 1; x + d] where x is your current position.\n# So, if your current position is x, then you can jump to x + 1, x + 2, ..., x + d.\n# But, you can jump only to such cells that belong to some wooden platform.\n\n# CAREFUL: You can assume that cells 0 and n+1 belong to wooden platforms.\n\n# CAREFUL: You should move platforms until you start jumping (in other words, you first move the platforms and then start jumping).\n\n# CAREFUL: You want to know if it is possible to reach n+1 from 0 if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other).\n# It also means that you cannot change the relative order of platforms.\n']
2022-04-20 23:37:50.449416 size on output set 2
