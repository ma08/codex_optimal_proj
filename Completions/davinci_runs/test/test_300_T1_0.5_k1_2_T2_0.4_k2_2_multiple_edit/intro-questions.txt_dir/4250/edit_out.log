2022-04-21 04:17:54.568510 num operations 2
2022-04-21 04:17:54.568521 size on input set 1
2022-04-21 04:17:54.568667 using api key derek
2022-04-21 04:17:54.725061 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 04:17:59.729062 using api key sunu
2022-04-21 04:18:03.452758 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarrays\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the sub-array\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    }
  ],
  "created": 1650514679,
  "object": "edit"
}
2022-04-21 04:18:03.453037 fix spelling mistakes 2 ['\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarrays\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the sub-array\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n']
2022-04-21 04:18:03.453210 size on output set 2
2022-04-21 04:18:03.453224 size on input set 2
2022-04-21 04:18:03.453448 using api key soukgp
2022-04-21 04:18:21.128481 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarrays.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements.\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements.\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array.\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency.\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency.\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array.\nt = s[:k]\n\n# Initialize the result.\nresult = []\n\n# Initialize the maximum frequency.\nmax_freq = 0\n\n# Initialize the maximum frequency element.\nmax_freq_elem = 0\n\n# Initialize the window.\nwindow_start = 0\n\n# Get the frequency of the first k elements.\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency.\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency.\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency.\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result.\nresult.append(max_freq_elem)\n\n# Iterate through the array.\nfor window_end in range(k,n):\n    # Remove the element from the window.\n    freq[s[window_start]] += 1\n    # Increment the window start.\n    window_start += 1\n    # Subtract the frequency of the element in the window.\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency.\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency.\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency.\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result.\n    result.append(max_freq_elem)\n\n# Print the result.\nprint(*result)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarrays.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    }
  ],
  "created": 1650514683,
  "object": "edit"
}
2022-04-21 04:18:21.128740 fix syntax errors 2 ['\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarrays.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements.\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements.\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array.\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency.\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency.\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array.\nt = s[:k]\n\n# Initialize the result.\nresult = []\n\n# Initialize the maximum frequency.\nmax_freq = 0\n\n# Initialize the maximum frequency element.\nmax_freq_elem = 0\n\n# Initialize the window.\nwindow_start = 0\n\n# Get the frequency of the first k elements.\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency.\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency.\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency.\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result.\nresult.append(max_freq_elem)\n\n# Iterate through the array.\nfor window_end in range(k,n):\n    # Remove the element from the window.\n    freq[s[window_start]] += 1\n    # Increment the window start.\n    window_start += 1\n    # Subtract the frequency of the element in the window.\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency.\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency.\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency.\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result.\n    result.append(max_freq_elem)\n\n# Print the result.\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarrays.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n']
2022-04-21 04:18:21.129083 using api key jaanu
2022-04-21 04:18:28.341695 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the sub-array.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray.\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    }
  ],
  "created": 1650514701,
  "object": "edit"
}
2022-04-21 04:18:28.341924 fix syntax errors 2 ['\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the sub-array.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray.\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n']
2022-04-21 04:18:28.342064 size on output set 4
2022-04-21 04:18:28.342078 num operations 2
2022-04-21 04:18:28.342084 size on input set 1
2022-04-21 04:18:28.342254 using api key gabby
2022-04-21 04:18:28.379115 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 04:18:33.384591 using api key derek
2022-04-21 04:18:33.421267 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-21 04:18:43.431686 using api key kouti
2022-04-21 04:18:46.048789 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Solution 1\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    }
  ],
  "created": 1650514723,
  "object": "edit"
}
2022-04-21 04:18:46.048996 fix spelling mistakes 2 ['\n\n#Solution 1\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n', '\n\n# Solution\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n']
2022-04-21 04:18:46.049021 size on output set 2
2022-04-21 04:18:46.049028 size on input set 2
2022-04-21 04:18:46.049212 using api key soukgp
2022-04-21 04:18:49.255862 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Solution\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    },
    {
      "index": 1,
      "text": "\n# Solution\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    }
  ],
  "created": 1650514726,
  "object": "edit"
}
2022-04-21 04:18:49.256092 fix syntax errors 2 ['# Solution\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nt = s_unique[s_indices[:k]]\nprint(*t)\n', '\n# Solution\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nt = s_unique[s_indices[:k]]\nprint(*t)\n']
2022-04-21 04:18:49.256407 using api key derek
2022-04-21 04:18:49.293728 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 04:18:54.299146 using api key sourya
2022-04-21 04:18:54.336323 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-21 04:19:04.346738 using api key sourya
2022-04-21 04:19:04.384203 in retry 4 20 <class 'Exception'>, Retrying in 20 seconds...
2022-04-21 04:19:24.404694 using api key gabby
2022-04-21 04:19:24.441857 in retry 3 40 <class 'Exception'>, Retrying in 40 seconds...
2022-04-21 04:20:04.447163 using api key derek
2022-04-21 04:20:04.484270 in retry 2 80 <class 'Exception'>, Retrying in 80 seconds...
2022-04-21 04:21:24.564793 using api key jaanu
2022-04-21 04:21:31.442616 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Solution 1 (numpy)\n\n#!/usr/bin/env python3\n\nimport numpy as np\n\nn, k = map(int, input().split()) # input n and k\ns = np.array(list(map(int, input().split()))) # input s\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n#Solution 1\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    }
  ],
  "created": 1650514884,
  "object": "edit"
}
2022-04-21 04:21:31.442863 fix syntax errors 2 ['\n\n#Solution 1 (numpy)\n\n#!/usr/bin/env python3\n\nimport numpy as np\n\nn, k = map(int, input().split()) # input n and k\ns = np.array(list(map(int, input().split()))) # input s\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n', '\n#!/usr/bin/env python3\n#Solution 1\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n']
2022-04-21 04:21:31.442891 size on output set 4
