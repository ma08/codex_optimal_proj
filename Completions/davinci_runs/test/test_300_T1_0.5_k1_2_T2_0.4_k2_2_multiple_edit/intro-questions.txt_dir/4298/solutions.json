["N,D=list(map(int,input().split()))\nprint(((N-1)//(2*D+1)+1))\n", "n,d = map(int, input().split())\nprint((n+d*2)//(2*d+1))", "n, d = map(int, input().split())\nprint((n + 2 * d) // (2 * d + 1))", "n,d=map(int, input().split())\nprint((n+d*2)//(d*2+1))", "n,d = map(int,input().split())\nif n / (d*2+1) <= 1:\n    print(1)\nelif n % (d*2+1) == 0:\n    print(n//(d*2+1))\nelse:\n    print(n//(d*2+1)+1)", "n,d=map(int, input().split())\n\nans=(n+2*d)//(1+2*d)\nprint(ans)", "# \u5165\u529b\u3092\u53d7\u3051\u308b\nN,D = map(int,input().split())\n\n# \u76e3\u8996\u54e1\u306f\u30012*D+1\u672c\u307f\u308c\u308b\nk = 2*D+1\n\n# \u51fa\u529b\u3059\u308b\nprint(N//k if N%k == 0 else (N//k)+1)", "N, D = map(int, input().split())\n \n# \u524d\u304b\u3089\u6700\u9069\u306b\u914d\u7f6e\u305b\u3088\n# \u4e00\u4eba\u76ee\u306f, 1,...,D, D+1, D+2,...,2D+1 \u3092\u76e3\u8996\n# \u4e8c\u4eba\u76ee\u306f, 2D+2,..., 3D+2, ...,4D+2 \u3092\u76e3\u8996\n# x\u4eba\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3068\u30011,...,x(2D+1)\u307e\u3067\u76e3\u8996\u3067\u304d\u308b\n \n# x(2D+1) > N \u3092\u6e80\u305f\u3059\u6700\u5c0f\u306ex\u306f\uff1f\n# x_min = ceil(N/(2D+1))\n \nprint(-(-N//(2*D+1)))", "N, D = map(int, input().split())\na = 2*D + 1\nif N % a == 0:\n  ans = N // a\nelse:\n  ans = N // a + 1\nprint(ans)", "N,D = map(int,input().split())\n\nprint(-(-N//(D*2+1)))", "N, D = map(int, input().split())\nif N%(2*D+1)==0:\n    print(N//(2*D+1))\nelse:\n    print(N//(2*D+1)+1)", "import math\nn, d = map(int, input().split())\n\nprint(math.ceil(n / (d * 2 + 1)))", "n,d=[int(x) for x in input().split()]\nif n%(2*d+1)==0:\n  print(n//(2*d+1))\nelse:\n  print(n//(2*d+1)+1)", "3\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nn, d = [int(x) for x in input().split()]\nl = 2 * d + 1\nprint((n + l - 1) // l)", "import math\ntree_num, range = list(map(int,input().split()))\n\nrange_num = range * 2 + 1\n\nprint((math.ceil(tree_num / range_num)))\n", "N,D = map(int,input().split())\nprint(-(-N//(2*D+1)))", "n,d = map(int,input().split())\nprint((n+(2*d+1)-1)//(2*d+1))", "import math\nn, k = list(map(int, input().split()))\nprint(math.ceil(n / (2 * k + 1)))", "N,D=map(int, input().split())\n\nif N%(2*D+1)==0:\n\tprint(N//(2*D+1))\nelse:print(N//(2*D+1)+1)", "def answer(n: int, d: int) -> int:\n    from math import ceil\n    return ceil(n / (d * 2 + 1))\n\ndef main():\n    n,d = map(int,input().split())\n    print(answer(n,d))\n\ndef __starting_point():\n    main()\n__starting_point()", "N, D = map(int, input().split())\n\nimport numpy as np\nprint(int(np.ceil(N / (2*D + 1))))", "import math\nn,d = map(int,input().split())\nprint(math.ceil(n/(2*d+1)))", "N,D = map(int, input().split())\nhani = (N+D) - (N-D) +1\nimport math\nprint(math.ceil(N/hani))", "N,D = [int(v) for v in input().split()]\nans = int(N / (2*D + 1)) + int(N % (2*D+1) != 0)\nprint(ans)\n", "a,b = list(map(int,input().split()))\nans = a//(b*2+1)\nif ans == a/(b*2+1):\n  print(ans)\nelse:\n  print((ans + 1))\n", "n,d = map(int,input().split())\nprint((n+d*2)//(d*2+1))", "n, d = list(map(int, input().split(' ')))\n\nprint(((n + d * 2) // (d * 2 + 1)))\n", "import sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef MI1(): return list(map(int1, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef MS(): return input().split()\ndef LS(): return list(input())\ndef LLS(rows_number): return [LS() for _ in range(rows_number)]\ndef printlist(lst, k=' '): print((k.join(list(map(str, lst)))))\nINF = float('inf')\n# from math import ceil, floor, log2\n# from collections import deque, defaultdict\n# from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np    # cumsum\n# from bisect import bisect_left, bisect_right\n\ndef solve():\n    N, D = MI()\n    print(((N+2*D)//(1+2*D)))\n\ndef __starting_point():\n    solve()\n\n\n__starting_point()", "n,d=map(int,input().split())\nif n%(2*d+1)==0:\n  print(n//(2*d+1))\nelse:\n  print(n//(2*d+1)+1)", "n,d = map(int,input().split())\nfrom math import ceil\nprint(ceil(n/(2*d+1)))", "a,b=map(int,input().split())\nb=b*2+1\nc=0\nwhile a>0: a-=b; c+=1\nprint(c)", "n, d = [int(i) for i in input().split()]\nans = n // (2 * d + 1)\nans = ans if n % (2 * d + 1) == 0 else ans + 1\nprint(ans)", "N,D = map(int,input().split())\n\nfor i in range(20):\n    if 2*D*i + i >= N:\n        print(i)\n        return", "n,d = list(map(int,input().split()))\n\nimport math\nprint((math.ceil(n / (2 * d + 1))))\n", "#ABC134 B\n\nN,D = map(int,input().split())\nimport math\nprint(math.ceil(N/(2*D + 1)))", "import math\n\nN, D = map(int, input().split())\nprint(math.ceil(N / (2 * D + 1)))", "import math\n\nN, D = list(map(int, input().split()))\n\nprint((math.ceil(N/(2*D+1))))\n", "import math\nn,d=map(int,input().split())\nans=math.ceil(n/(2*d+1))\nprint(ans)", "a = list(map(int,input().split()))\nprint((-(-a[0]//(2*a[1]+1))))\n", "N, D = list(map(int, input().split()))\nprint(( int((N+D*2) / (D*2+1)) ))\n", "def mapt(fn, *args):\n    return list(map(fn, *args))\n\n\ndef Input():\n    return mapt(int, input().split(\" \"))\n\n\ndef main():\n    n, d = Input()\n    d = 2 * d + 1\n    return (n+d-1)//(d)\n\nprint(main())", "import math\nN, D = map(int, input().split())\n \n# \u524d\u304b\u3089\u6700\u9069\u306b\u914d\u7f6e\u305b\u3088\n# \u4e00\u4eba\u76ee\u306f, 1,...,D, D+1, D+2,...,2D+1 \u3092\u76e3\u8996\n# \u4e8c\u4eba\u76ee\u306f, 2D+2,..., 3D+2, ...,4D+2 \u3092\u76e3\u8996\n# x\u4eba\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3068\u30011,...,x(2D+1)\u307e\u3067\u76e3\u8996\u3067\u304d\u308b\n \n# x(2D+1) > N \u3092\u6e80\u305f\u3059\u6700\u5c0f\u306ex\u306f\uff1f\n# x_min = ceil(N/(2D+1))\n \nprint(math.ceil(N/(2*D+1)))", "N, D = map(int,input().split())\n\n# \u76e3\u8996\u54e1\u306f2D+1\u672c\u306e\u6728\u3092\u898b\u308c\u308b\nkanshi = 2 * D + 1\n\nprint(N//kanshi if N%kanshi==0 else N//kanshi+1)", "N, D = map(int,input().split())\n\nmoniter = D * 2 + 1\nif N <= moniter:\n    print(1)\nelif N % moniter == 0:\n    print(N // moniter)\nelse:\n    print(N // moniter + 1)", "import math\nN,D = map(int,input().split())\nprint(math.ceil(N/(2*D+1)))", "import math\nN, D = list(map(int, input().split()))\n\nprint((math.ceil(N/(D*2+1))))\n\n", "import math\nN, D = map(int, input().split())\nprint(math.ceil(N/(2*D+1)))", "n,d=list(map(int,input().split()))\nprint(((n+(2*d))//(2*d+1)))\n", "N, D = map(int, input().split())\n# \u4e00\u4eba\u306e\u76e3\u8996\u54e1\u306f2D + 1\u672c\u306e\u6728\u3092\u76e3\u8996\u3067\u304d\u308b\n# N//(2D + 1) \u3068 \u4f59\u308a\u304c\u3042\u308c\u30701\u3092\u8db3\u3057\u305f\u4eba\u6570\u304c\u5fc5\u8981\u306b\u306a\u308b\nfrom numpy import ceil\nprint(int(ceil(N / (2*D + 1))))", "n, d = map(int, input().split())\n\nx = 2*d+1\nif n%x == 0:\n    print(n // x)\nelse:\n    print(n//x + 1)", "n,d=map(int,input().split())\nif n%(2*d+1)==0:\n    print(n//(2*d+1))\nelse:\n    print((n//(2*d+1))+1)", "n, d = map(int, input().split())\nc = 0\np = d*2 + 1\ntmp = 0\nwhile n > tmp:\n    tmp = tmp+p\n    c += 1\nprint(c)", "N, D = map(int,input().split())\nn_list = []\n\nfor i in range(1,N+1):\n    n_list.append(i)\nnum = len(n_list) % ((2 * D) + 1)\nif num == 0:\n    print(len(n_list) // ((2 * D) + 1))\nelse:\n    print((len(n_list) // ((2 * D) + 1))+1)", "n, d = map(int, input().split())\n\n# \u4e00\u4eba\u306e\u76e3\u8996\u54e1\u304c\u30ab\u30d0\u30fc\u3067\u304d\u308b\u7bc4\u56f2\ncover_area = (d*2+1)\nans = n // cover_area\nif (n % cover_area) != 0:\n    print(ans+1)\nelse:\n    print(ans)", "n, d = map(int,input().split())\nprint((n-1)//(2*d+1)+1)", "import math\nN, D = list(map(int,input().split()))\nnum = math.floor(N/(D*2+1))\nif N%(D*2+1) != 0:\n    print((num+1))\nelse:\n    print(num)\n", "from math import ceil\na,b=map(int,input().split())\nprint(ceil(a/(b*2+1)))", "n,d=map(int,input().split())\nk=2*d+1\nif n%k==0:\n    print(n//k)\nelse:\n    print(n//k+1)", "import sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef MI1(): return list(map(int1, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef MS(): return input().split()\ndef LS(): return list(input())\ndef LLS(rows_number): return [LS() for _ in range(rows_number)]\ndef printlist(lst, k=' '): print((k.join(list(map(str, lst)))))\nINF = float('inf')\n# from math import ceil, floor, log2\n# from collections import deque, defaultdict\n# from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np    # cumsum\n# from bisect import bisect_left, bisect_right\n\ndef solve():\n    N, D = MI()\n    ans = 0\n    while N > 0:\n        N -= 1 + 2 * D\n        ans += 1\n    print(ans)\n\ndef __starting_point():\n    solve()\n\n\n__starting_point()", "N, D = map(int, input().split())\n \n# \u524d\u304b\u3089\u6700\u9069\u306b\u914d\u7f6e\u305b\u3088\n# \u4e00\u4eba\u76ee\u306f, 1,...,D, D+1, D+2,...,2D+1 \u3092\u76e3\u8996\n# \u4e8c\u4eba\u76ee\u306f, 2D+2,..., 3D+2, ...,4D+2 \u3092\u76e3\u8996\n# x\u4eba\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3068\u30011,...,x(2D+1)\u307e\u3067\u76e3\u8996\u3067\u304d\u308b\n \n# x(2D+1) > N \u3092\u6e80\u305f\u3059\u6700\u5c0f\u306ex\u306f\uff1f\n# x_min = ceil(N/(2D+1))\n \n# ceil(B/A) = floor((A+B-1)/A)\nprint((N+2*D) // (2*D+1))", "n, d = list(map(int,input().split()))\nx = 2*d + 1\nprint(((n + (x - 1))//x))\n", "n,d = list(map(int,input().split(\" \")))\nd = d*2 + 1\nanswer = 0\nwhile n >0:\n  n-=d\n  answer += 1\n  \nprint(answer)\n", "n, d = list(map(int, input().split()))\n\nif n//(2*d+1) == n/(2*d+1):\n    print((n//(2*d+1)))\nelse:\n    print((n//(2*d+1)+1))\n", "i, d = list(map(int, input().split()))\na = d * 2 + 1\nprint(((i + a - 1) // a))\n", "a,b=input().split()\na=int(a)\nb=int(b)\nif a%(b*2+1)==0:\n  print(a//(b*2+1))\nelse:\n  print(a//(b*2+1)+1)", "a = list(map(int,input().split()))\nN = a[0]\nD = a[1]\n\nz = N//(2*D+1)\nif N%(2*D+1) == 0:\n    print(z)\nelse:\n    print(z+1)", "n, d = map(int,input().split())\nans = (n+2*d) // (1+2*d)\nprint(ans)", "from math import floor,ceil\nN, D = list(map(int, input().split()))\n\nprint((ceil(N/(2*D + 1))))\n\n\n\n", "N,D=map(int,input().split())\nans=0\n\nwhile N>0:\n    N-=D*2+1\n    ans+=1\n \nprint(ans)", "n,d=map(int,input().split())\nd=d*2+1\nif n%d==0:\n    print(n//d)\nelse:\n    print(n//d+1)", "N, D = map(int, input().split())\n\nif N % (2*D + 1):\n    print(N//(2*D + 1) + 1)\n\nelse:\n    print(N//(2*D + 1))", "n,d = map(int,input().split())\nprint(-(-n//(2*d+1)))", "import math as mt\nn,d=map(int, input().split())   \nprint(mt.ceil(n/(2*d+1)))", "n,d = map(int,input().split())\n\neye = 2 * d +1\n\nif n % eye == 0:\n  print(n//eye)\n  \nelse:\n  print(n//eye +1)", "import math\nN,D=map(int,input().split())\nprint(math.ceil(N/(2*D+1)))", "N,D = map(int,input().split())\nif(N % (D*2+1) != 0):\n    print((N // (D*2+1)) + 1)\nelse:\n    print(N // (D*2+1))", "N, D = map(int, input().split())\n# \u4e00\u4eba\u306e\u76e3\u8996\u54e1\u306f2D + 1\u672c\u306e\u6728\u3092\u76e3\u8996\u3067\u304d\u308b\n# N//(2D + 1) \u3068 \u4f59\u308a\u304c\u3042\u308c\u30701\u3092\u8db3\u3057\u305f\u4eba\u6570\u304c\u5fc5\u8981\u306b\u306a\u308b\nimport math\nprint(int(math.ceil(N / (2*D + 1))))", "n,d=map(int,input().split())\ni=1\nd=2*d+1\nwhile n>d*i:\n  i+=1\nprint(i)", "# B Golden Apple\nn, d = list(map(int, input().split()))\ndeco = d * 2 + 1\nif n % deco == 0:\n    print((n // deco))\nelse:\n    print(((n // deco) + 1))\n", "import math\nx,y =map(int,input().split())\nprint(math.ceil(x/((y+y)+1)))", "n,d = map(int,input().split())\na = 2 * d + 1\nif n % a == 0:\n    print(n // a)\nelse:\n    print(n // a + 1)", "N,D=map(int,input().split())\nx=2*D+1\nif N%x==0:\n    print(N//x)\nelse:\n    print(N//x+1)", "N, D = map(int, input().split())\nrg = D * 2 + 1\nprint((N + rg - 1) // rg)", "import math\nn, d = (int(i) for i in input().split())\nprint(math.ceil(n / (d * 2 + 1)))", "N, D = map(int,input().split())\nM = 2 * D + 1\nif N % M == 0:\n  print(N // M)\nelse:\n  print(N // M + 1)", "N, D = map(int, input().split())\n\nmonitor, ans = 0, 0\nwhile monitor < N:\n  monitor += 2*D + 1\n  ans += 1\nprint(ans)", "N,D = list(map(int,input().split()))\ngard = (D * 2) + 1\nprint(((int(N/gard),int(N/gard) +1)[N%gard !=0]))\n", "N, D = map(int,input().split())\nx = 2 * D +1\n\nif N % x == 0:\n    print(N // x)\nelse:\n    print(N // x + 1)", "import math\nN, D = map(int,input().split())\nprint(math.ceil(N/(2*D+1)))", "N, D = map(int, input().split())\nR = N%(2*D+1)\nif R != 0:\n  L = (N-R)/(2*D+1)+1\nelse:\n  L = N/(2*D+1)\nprint(int(L))", "from math import ceil\nn, d = list(map(int, input().split()))\nprint((ceil(n / (1 + 2 * d))))\n", "N, D = map(int, input().split())\n\nfor n in range(1, 25):\n    if N <= (2 * D + 1) * n:\n        print(n)\n        break", "N, D = map(int, input().split())\n# \u4e00\u4eba\u306e\u76e3\u8996\u54e1\u306f2D + 1\u672c\u306e\u6728\u3092\u76e3\u8996\u3067\u304d\u308b\n# N//(2D + 1) \u3068 \u4f59\u308a\u304c\u3042\u308c\u30701\u3092\u8db3\u3057\u305f\u4eba\u6570\u304c\u5fc5\u8981\u306b\u306a\u308b\nimport numpy as np\nprint(int(np.ceil(N / (2*D + 1))))", "r=input().split()\nN=int(r[0])\nD=int(r[1])\nif N%(2*D+1)==0:\n    print(N//(2*D+1))\nelse:\n    print(N//(2*D+1)+1)", "N, D = map(int, input().split())\nprint(-(-N//(2*D+1)))", "N,D = map(int,input().split())\narea = D*2 + 1\nans = (N+area-1)//area\nprint(ans)", "n, d = map(int, input().split())\n\narea = (d*2)+1\nif n%area == 0:\n    ans = int(n//area)\nelse:\n    ans = int(n//area) + 1\n\nprint(ans)", "n,d=map(int,input().split())\nD=2*d+1\nprint((n+D-1)//D)", "import math\n\nn, d = list(map(int, input().split()))\nscope = d * 2 + 1\nprint((math.ceil(n / scope)))\n"]