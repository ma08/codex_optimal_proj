2022-04-21 04:05:48.812853 num operations 2
2022-04-21 04:05:48.812865 size on input set 1
2022-04-21 04:05:48.813005 using api key kouti
2022-04-21 04:05:51.578615 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n# gcd\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    },
    {
      "index": 1,
      "text": "\n# calculate greatest common divisor\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    }
  ],
  "created": 1650513948,
  "object": "edit"
}
2022-04-21 04:05:51.578871 fix spelling mistakes 2 ['\n# gcd\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n', '\n# calculate greatest common divisor\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n']
2022-04-21 04:05:51.578902 size on output set 2
2022-04-21 04:05:51.578909 size on input set 2
2022-04-21 04:05:51.579064 using api key sourya
2022-04-21 04:05:51.619071 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 04:05:56.624549 using api key gabby
2022-04-21 04:05:56.664917 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-21 04:06:06.675349 using api key soukgp
2022-04-21 04:06:14.683557 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# gcd\nimport math\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\na, b, k = map(int, input().split())\ng = gcd(a, b)\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a, b, k = map(int, input().split())\n\n    g = gcd(a, b)\n\n    divisors = []\n    for i in range(1, int(math.sqrt(g)) + 1):\n        if g % i == 0:\n            divisors.append(i)\n            if i != g // i:\n                divisors.append(g // i)\n\n    divisors.sort(reverse=True)\n\n    print(divisors[k - 1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650513966,
  "object": "edit"
}
2022-04-21 04:06:14.683812 fix syntax errors 2 ['# gcd\nimport math\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\na, b, k = map(int, input().split())\ng = gcd(a, b)\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n', '\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a, b, k = map(int, input().split())\n\n    g = gcd(a, b)\n\n    divisors = []\n    for i in range(1, int(math.sqrt(g)) + 1):\n        if g % i == 0:\n            divisors.append(i)\n            if i != g // i:\n                divisors.append(g // i)\n\n    divisors.sort(reverse=True)\n\n    print(divisors[k - 1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-21 04:06:14.683991 using api key soukgp
2022-04-21 04:06:17.642044 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    },
    {
      "index": 1,
      "text": "\n# calculate greatest common divisor \nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n"
    }
  ],
  "created": 1650513974,
  "object": "edit"
}
2022-04-21 04:06:17.642262 fix syntax errors 2 ['import math\n\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n', '\n# calculate greatest common divisor \nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n']
2022-04-21 04:06:17.642300 size on output set 4
2022-04-21 04:06:17.642313 num operations 2
2022-04-21 04:06:17.642319 size on input set 1
2022-04-21 04:06:17.642505 using api key kouti
2022-04-21 04:06:22.235125 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n): # \u7d20\u56e0\u6570\u5206\u89e3\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K): # \u7d20\u56e0\u6570\u5206\u89e3\u3057\u305f\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u304b\u3089K\u756a\u76ee\u306e\u8981\u7d20\u3092\u8fd4\u3059\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorisation(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorisation(A)\n    B_factors = prime_factorisation(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n"
    }
  ],
  "created": 1650513977,
  "object": "edit"
}
2022-04-21 04:06:22.235384 fix spelling mistakes 2 ['\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n): # 素因数分解\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K): # 素因数分解したリストの最後からK番目の要素を返す\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n', 'import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorisation(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorisation(A)\n    B_factors = prime_factorisation(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n']
2022-04-21 04:06:22.235519 size on output set 2
2022-04-21 04:06:22.235529 size on input set 2
2022-04-21 04:06:22.235697 using api key soukgp
2022-04-21 04:06:31.281064 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorisation(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1): # sqrt(n)\u307e\u3067\u3067\u3044\u3044\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n != 1:\n        factors.append(n)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorisation(A) # A\u306e\u7d20\u56e0\u6570\u5206\u89e3\n    B_factors = prime_factorisation(B) # B\u306e\u7d20\u56e0\u6570\u5206\u89e3\n    common_factors = list(set(A_factors) & set(B_factors)) # A, B\u306e\u7d04\u6570\n    return common_factors[-K] # K\u756a\u76ee\u306b\u5927\u304d\u3044\u7d04\u6570\n\nprint(find_num(A, B, K))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nA, B, K = map(int, input().split()) # A = 10, B = 20, K = 2\n\ndef prime_factorisation(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1): # i = 2, 3, 4, 5, 6, 7, 8, 9, 10\n        while n % i == 0:\n            n //= i # n = 5, 2, 1\n            factors.append(i)\n    return factors # factors = [2, 5]\n\ndef find_num(A, B, K):\n    A_factors = prime_factorisation(A) # A_factors = [2, 5]\n    B_factors = prime_factorisation(B) # B_factors = [2, 5]\n    common_factors = list(set(A_factors) & set(B_factors)) # common_factors = [2, 5]\n    return common_factors[-K] # common_factors[-K] = [2, 5][-2] = [2, 5][1] = 5\n\nprint(find_num(A, B, K))\n"
    }
  ],
  "created": 1650513982,
  "object": "edit"
}
2022-04-21 04:06:31.281292 fix syntax errors 2 ['import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorisation(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1): # sqrt(n)まででいい\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n != 1:\n        factors.append(n)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorisation(A) # Aの素因数分解\n    B_factors = prime_factorisation(B) # Bの素因数分解\n    common_factors = list(set(A_factors) & set(B_factors)) # A, Bの約数\n    return common_factors[-K] # K番目に大きい約数\n\nprint(find_num(A, B, K))\n', 'import math\n\nA, B, K = map(int, input().split()) # A = 10, B = 20, K = 2\n\ndef prime_factorisation(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1): # i = 2, 3, 4, 5, 6, 7, 8, 9, 10\n        while n % i == 0:\n            n //= i # n = 5, 2, 1\n            factors.append(i)\n    return factors # factors = [2, 5]\n\ndef find_num(A, B, K):\n    A_factors = prime_factorisation(A) # A_factors = [2, 5]\n    B_factors = prime_factorisation(B) # B_factors = [2, 5]\n    common_factors = list(set(A_factors) & set(B_factors)) # common_factors = [2, 5]\n    return common_factors[-K] # common_factors[-K] = [2, 5][-2] = [2, 5][1] = 5\n\nprint(find_num(A, B, K))\n']
2022-04-21 04:06:31.281578 using api key sourya
2022-04-21 04:06:31.321516 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 04:06:36.326932 using api key sourya
2022-04-21 04:06:36.367031 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-21 04:06:46.376992 using api key soukgp
2022-04-21 04:06:50.534932 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n): # \u7d20\u56e0\u6570\u5206\u89e3\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K): # \u7d20\u56e0\u6570\u5206\u89e3\u3057\u305f\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u304b\u3089K\u756a\u76ee\u306e\u8981\u7d20\u3092\u8fd4\u3059\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n"
    }
  ],
  "created": 1650514006,
  "object": "edit"
}
2022-04-21 04:06:50.535167 fix syntax errors 2 ['import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n): # 素因数分解\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K): # 素因数分解したリストの最後からK番目の要素を返す\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n', '\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_num(A, B, K))\n']
2022-04-21 04:06:50.535207 size on output set 4
