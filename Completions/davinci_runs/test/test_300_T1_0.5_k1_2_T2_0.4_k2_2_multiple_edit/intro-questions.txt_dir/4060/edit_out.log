2022-04-21 00:07:08.905300 num operations 2
2022-04-21 00:07:08.905310 size on input set 1
2022-04-21 00:07:08.905451 using api key sunu
2022-04-21 00:07:23.826090 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solution(n, p):\n    count = 0\n    for i in range(n):\n        if p[i] == ')':\n            if i > 0:\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n        else:\n            if i < n - 1:\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n    return count\n\n\ndef is_regular(p):\n    stack = []\n    for c in p:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\np = list(input())\nprint(solution(n, p))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = ')' if s[i - 1] == '(' else '('\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = ')' if s[i + 1] == '(' else '('\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n"
    }
  ],
  "created": 1650499629,
  "object": "edit"
}
2022-04-21 00:07:23.826335 fix spelling mistakes 2 ["\n\ndef solution(n, p):\n    count = 0\n    for i in range(n):\n        if p[i] == ')':\n            if i > 0:\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n        else:\n            if i < n - 1:\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n    return count\n\n\ndef is_regular(p):\n    stack = []\n    for c in p:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\np = list(input())\nprint(solution(n, p))\n", "\n\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = ')' if s[i - 1] == '(' else '('\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = ')' if s[i + 1] == '(' else '('\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n"]
2022-04-21 00:07:23.826407 size on output set 2
2022-04-21 00:07:23.826415 size on input set 2
2022-04-21 00:07:23.826573 using api key kouti
2022-04-21 00:07:36.523431 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solution(n, p, q):\n    count = 0\n    for i in range(n):\n        if q[i] == ')':\n            if i > 0:\n                q[i - 1] = '(' if q[i - 1] == ')' else ')'\n                if is_regular(q):\n                    count += 1\n                q[i - 1] = '(' if q[i - 1] == ')' else ')'\n        else:\n            if i < n - 1:\n                q[i + 1] = '(' if q[i + 1] == ')' else ')'\n                if is_regular(q):\n                    count += 1\n                q[i + 1] = '(' if q[i + 1] == ')' else ')'\n    return count\n\n\ndef is_regular(q):\n    stack = []\n    for c in q:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\np = list(input())\nq = list(input())\nprint(solution(n, p, q))\n"
    },
    {
      "index": 1,
      "text": "\ndef solution(n, p):\n    count = 0\n    for i in range(n):\n        if p[i] == ')':\n            if i > 0:\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n        else:\n            if i < n - 1:\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n    return count\n\n\ndef is_regular(p):\n    stack = []\n    for c in p:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\np = list(input())\nprint(solution(n, p))\n"
    }
  ],
  "created": 1650499643,
  "object": "edit"
}
2022-04-21 00:07:36.523656 fix syntax errors 2 ["\n\ndef solution(n, p, q):\n    count = 0\n    for i in range(n):\n        if q[i] == ')':\n            if i > 0:\n                q[i - 1] = '(' if q[i - 1] == ')' else ')'\n                if is_regular(q):\n                    count += 1\n                q[i - 1] = '(' if q[i - 1] == ')' else ')'\n        else:\n            if i < n - 1:\n                q[i + 1] = '(' if q[i + 1] == ')' else ')'\n                if is_regular(q):\n                    count += 1\n                q[i + 1] = '(' if q[i + 1] == ')' else ')'\n    return count\n\n\ndef is_regular(q):\n    stack = []\n    for c in q:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\np = list(input())\nq = list(input())\nprint(solution(n, p, q))\n", "\ndef solution(n, p):\n    count = 0\n    for i in range(n):\n        if p[i] == ')':\n            if i > 0:\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n        else:\n            if i < n - 1:\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n    return count\n\n\ndef is_regular(p):\n    stack = []\n    for c in p:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\np = list(input())\nprint(solution(n, p))\n"]
2022-04-21 00:07:36.523864 using api key sourya
2022-04-21 00:07:36.561849 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 00:07:41.567301 using api key kouti
2022-04-21 00:07:59.825827 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n    if is_regular(s):\n        return 0\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')'  # change the character\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = ')' if s[i - 1] == '(' else '('\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')'  # change the character\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = ')' if s[i + 1] == '(' else '('\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')' # \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc67c\ucabd \ubb38\uc790\ub97c \uc5f4\ub9b0 \uad04\ud638\ub85c \ubc14\uafbc\ub2e4.\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = ')' if s[i - 1] == '(' else '(' # \ubc14\uafbc \ubb38\uc790\ub97c \ub2e4\uc2dc \ub2eb\ud78c \uad04\ud638\ub85c \ubc14\uafbc\ub2e4.\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')' # \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc624\ub978\ucabd \ubb38\uc790\ub97c \uc5f4\ub9b0 \uad04\ud638\ub85c \ubc14\uafbc\ub2e4.\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = ')' if s[i + 1] == '(' else '(' # \ubc14\uafbc \ubb38\uc790\ub97c \ub2e4\uc2dc \ub2eb\ud78c \uad04\ud638\ub85c \ubc14\uafbc\ub2e4.\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n"
    }
  ],
  "created": 1650499661,
  "object": "edit"
}
2022-04-21 00:07:59.826151 fix syntax errors 2 ["\n\n    if is_regular(s):\n        return 0\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')'  # change the character\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = ')' if s[i - 1] == '(' else '('\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')'  # change the character\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = ')' if s[i + 1] == '(' else '('\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n", "\n\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')' # 가장 가까운 왼쪽 문자를 열린 괄호로 바꾼다.\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = ')' if s[i - 1] == '(' else '(' # 바꾼 문자를 다시 닫힌 괄호로 바꾼다.\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')' # 가장 가까운 오른쪽 문자를 열린 괄호로 바꾼다.\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = ')' if s[i + 1] == '(' else '(' # 바꾼 문자를 다시 닫힌 괄호로 바꾼다.\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n"]
2022-04-21 00:07:59.826221 size on output set 4
2022-04-21 00:07:59.826233 num operations 2
2022-04-21 00:07:59.826239 size on input set 1
2022-04-21 00:07:59.826400 using api key gabby
2022-04-21 00:07:59.863241 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 00:08:04.868652 using api key soukgp
2022-04-21 00:08:07.579328 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and close parentheses\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n"
    }
  ],
  "created": 1650499684,
  "object": "edit"
}
2022-04-21 00:08:07.579572 fix spelling mistakes 2 ["\n\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and close parentheses\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n", "\n\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n"]
2022-04-21 00:08:07.579612 size on output set 2
2022-04-21 00:08:07.579620 size on input set 2
2022-04-21 00:08:07.579786 using api key gabby
2022-04-21 00:08:07.617459 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 00:08:12.622876 using api key jaanu
2022-04-21 00:08:15.996683 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n"
    }
  ],
  "created": 1650499692,
  "object": "edit"
}
2022-04-21 00:08:15.997045 fix syntax errors 2 ["\n\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n", "\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n"]
2022-04-21 00:08:15.997365 using api key gabby
2022-04-21 00:08:16.035360 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 00:08:21.040821 using api key gabby
2022-04-21 00:08:21.078627 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-21 00:08:31.089035 using api key gabby
2022-04-21 00:08:31.126435 in retry 4 20 <class 'Exception'>, Retrying in 20 seconds...
2022-04-21 00:08:51.142244 using api key sourya
2022-04-21 00:08:51.180351 in retry 3 40 <class 'Exception'>, Retrying in 40 seconds...
2022-04-21 00:09:31.213499 using api key kouti
2022-04-21 00:09:54.121475 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and close parentheses\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport math\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\n\nn = int(input())\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_sum(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime(i) and is_prime(n - i):\n            return True\n    return False\n\ndef count_prime_sums(n):\n    count = 0\n    for i in range(6, n + 1, 2):\n        if is_prime_sum(i):\n            count += 1\n    return count\n\nprint(count_prime_sums(n))\n"
    }
  ],
  "created": 1650499771,
  "object": "edit"
}
2022-04-21 00:09:54.121703 fix syntax errors 2 ["\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and close parentheses\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n", "import sys\nimport math\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\n\nn = int(input())\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_sum(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime(i) and is_prime(n - i):\n            return True\n    return False\n\ndef count_prime_sums(n):\n    count = 0\n    for i in range(6, n + 1, 2):\n        if is_prime_sum(i):\n            count += 1\n    return count\n\nprint(count_prime_sums(n))\n"]
2022-04-21 00:09:54.121741 size on output set 4
