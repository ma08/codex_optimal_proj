["\ndef solution(n, p):\n    count = 0\n    for i in range(n):\n        if p[i] == ')':\n            if i > 0:\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i - 1] = '(' if p[i - 1] == ')' else ')'\n        else:\n            if i < n - 1:\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n                if is_regular(p):\n                    count += 1\n                p[i + 1] = '(' if p[i + 1] == ')' else ')'\n    return count\n\n\ndef is_regular(p):\n    stack = []\n    for c in p:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\np = list(input())\nprint(solution(n, p))\n", "\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n", "\n\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n", "\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and close parentheses\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n", "\n\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')' # \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc67c\ucabd \ubb38\uc790\ub97c \uc5f4\ub9b0 \uad04\ud638\ub85c \ubc14\uafbc\ub2e4.\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = ')' if s[i - 1] == '(' else '(' # \ubc14\uafbc \ubb38\uc790\ub97c \ub2e4\uc2dc \ub2eb\ud78c \uad04\ud638\ub85c \ubc14\uafbc\ub2e4.\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')' # \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc624\ub978\ucabd \ubb38\uc790\ub97c \uc5f4\ub9b0 \uad04\ud638\ub85c \ubc14\uafbc\ub2e4.\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = ')' if s[i + 1] == '(' else '(' # \ubc14\uafbc \ubb38\uc790\ub97c \ub2e4\uc2dc \ub2eb\ud78c \uad04\ud638\ub85c \ubc14\uafbc\ub2e4.\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n", "\n\n    if is_regular(s):\n        return 0\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')'  # change the character\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = ')' if s[i - 1] == '(' else '('\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')'  # change the character\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = ')' if s[i + 1] == '(' else '('\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n", "\n\ndef solution(n, p, q):\n    count = 0\n    for i in range(n):\n        if q[i] == ')':\n            if i > 0:\n                q[i - 1] = '(' if q[i - 1] == ')' else ')'\n                if is_regular(q):\n                    count += 1\n                q[i - 1] = '(' if q[i - 1] == ')' else ')'\n        else:\n            if i < n - 1:\n                q[i + 1] = '(' if q[i + 1] == ')' else ')'\n                if is_regular(q):\n                    count += 1\n                q[i + 1] = '(' if q[i + 1] == ')' else ')'\n    return count\n\n\ndef is_regular(q):\n    stack = []\n    for c in q:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\np = list(input())\nq = list(input())\nprint(solution(n, p, q))\n", "import sys\nimport math\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\n\nn = int(input())\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_sum(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime(i) and is_prime(n - i):\n            return True\n    return False\n\ndef count_prime_sums(n):\n    count = 0\n    for i in range(6, n + 1, 2):\n        if is_prime_sum(i):\n            count += 1\n    return count\n\nprint(count_prime_sums(n))\n"]