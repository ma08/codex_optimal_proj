2022-04-20 22:43:04.390596 num operations 2
2022-04-20 22:43:04.390606 size on input set 1
2022-04-20 22:43:04.390752 using api key soukgp
2022-04-20 22:43:09.787318 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\nA = list(map(int, input().split()))\nA.sort()\nans = 0\nfor i in range(N - 1):\n    if A[i] == A[i + 1]:\n        ans += 1\n        i += 1\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n"
    }
  ],
  "created": 1650494584,
  "object": "edit"
}
2022-04-20 22:43:09.787576 fix spelling mistakes 2 ['\nN = int(input())\nA = list(map(int, input().split()))\nA.sort()\nans = 0\nfor i in range(N - 1):\n    if A[i] == A[i + 1]:\n        ans += 1\n        i += 1\nprint(ans)\n', '\nN = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n']
2022-04-20 22:43:09.787602 size on output set 2
2022-04-20 22:43:09.787609 size on input set 2
2022-04-20 22:43:09.787768 using api key sourya
2022-04-20 22:43:09.827478 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 22:43:14.832872 using api key jaanu
2022-04-20 22:43:21.014366 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nN, *A = map(int, open(0).read().split())\n\nans = 1\nfor a in A:\n    ans = lcm(ans, a)\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "N = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n"
    }
  ],
  "created": 1650494594,
  "object": "edit"
}
2022-04-20 22:43:21.014574 fix syntax errors 2 ['def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nN, *A = map(int, open(0).read().split())\n\nans = 1\nfor a in A:\n    ans = lcm(ans, a)\n\nprint(ans)\n', 'N = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n']
2022-04-20 22:43:21.014756 using api key kouti
2022-04-20 22:43:24.847269 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "N = int(input())\nA = list(map(int, input().split()))\nA.sort()\nans = 0\nfor i in range(N - 1):\n    if A[i] == A[i + 1]:\n        ans += 1\n        i += 1\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "N = int(input())\nA = list(map(int, input().split()))\nA.sort()\nans = 0\ni = 0\nwhile i < N - 1:\n    if A[i] == A[i+1]:\n        i += 2\n        ans += 1\n    else:\n        i += 1\nprint(ans)\n"
    }
  ],
  "created": 1650494601,
  "object": "edit"
}
2022-04-20 22:43:24.847478 fix syntax errors 2 ['N = int(input())\nA = list(map(int, input().split()))\nA.sort()\nans = 0\nfor i in range(N - 1):\n    if A[i] == A[i + 1]:\n        ans += 1\n        i += 1\nprint(ans)\n', 'N = int(input())\nA = list(map(int, input().split()))\nA.sort()\nans = 0\ni = 0\nwhile i < N - 1:\n    if A[i] == A[i+1]:\n        i += 2\n        ans += 1\n    else:\n        i += 1\nprint(ans)\n']
2022-04-20 22:43:24.847504 size on output set 4
2022-04-20 22:43:24.847515 num operations 2
2022-04-20 22:43:24.847521 size on input set 1
2022-04-20 22:43:24.847689 using api key soukgp
2022-04-20 22:43:36.601548 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# read n\nn = int(input())\n# read l\nl = list(map(int, input().split()))\n\n# create dictionary for numbers and their frequency\nd = {}\nfor i in l:\n    d[i] = d.get(i, 0) + 1\n\n# create list of numbers which have odd frequency\nx = []\nfor i in d:\n    if d[i] % 2:\n        x.append(i)\n\n# print numbers\nprint(X[0], X[1])\n"
    },
    {
      "index": 1,
      "text": "\n\n# read n\nN = int(input())\n# read l\nL = list(map(int, input().split()))\n\n# create dictionary for numbers d\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers x\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers x\nprint(X[0], X[1])\n"
    }
  ],
  "created": 1650494604,
  "object": "edit"
}
2022-04-20 22:43:36.601807 fix spelling mistakes 2 ['\n\n# read n\nn = int(input())\n# read l\nl = list(map(int, input().split()))\n\n# create dictionary for numbers and their frequency\nd = {}\nfor i in l:\n    d[i] = d.get(i, 0) + 1\n\n# create list of numbers which have odd frequency\nx = []\nfor i in d:\n    if d[i] % 2:\n        x.append(i)\n\n# print numbers\nprint(X[0], X[1])\n', '\n\n# read n\nN = int(input())\n# read l\nL = list(map(int, input().split()))\n\n# create dictionary for numbers d\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers x\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers x\nprint(X[0], X[1])\n']
2022-04-20 22:43:36.601875 size on output set 2
2022-04-20 22:43:36.601889 size on input set 2
2022-04-20 22:43:36.602125 using api key sourya
2022-04-20 22:43:36.643554 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-20 22:43:41.648980 using api key sourya
2022-04-20 22:43:41.688530 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-20 22:43:51.698953 using api key derek
2022-04-20 22:43:51.739254 in retry 4 20 <class 'Exception'>, Retrying in 20 seconds...
2022-04-20 22:44:11.759675 using api key gabby
2022-04-20 22:44:12.226858 in retry 3 40 <class 'Exception'>, Retrying in 40 seconds...
2022-04-20 22:44:52.256420 using api key gabby
2022-04-20 22:44:52.307619 in retry 2 80 <class 'Exception'>, Retrying in 80 seconds...
2022-04-20 22:46:12.388040 using api key derek
