2022-04-21 05:01:57.809852 num operations 2
2022-04-21 05:01:57.809866 size on input set 1
2022-04-21 05:01:57.810007 using api key soukgp
2022-04-21 05:02:06.251060 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\n# as a substring\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of s starting at index l_i and ending at index r_i\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of s starting at index l_i and ending at index r_i for each query\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s.\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s as a substring.\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i.\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query.\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin.\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n"
    }
  ],
  "created": 1650517317,
  "object": "edit"
}
2022-04-21 05:02:06.251333 fix spelling mistakes 2 ["\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\n# as a substring\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of s starting at index l_i and ending at index r_i\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of s starting at index l_i and ending at index r_i for each query\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n", "\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s.\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s as a substring.\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i.\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query.\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin.\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n"]
2022-04-21 05:02:06.251406 size on output set 2
2022-04-21 05:02:06.251413 size on input set 2
2022-04-21 05:02:06.251590 using api key jaanu
2022-04-21 05:02:12.469175 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split(\" \")\n    n = int(n_q[0].strip())\n    q = int(n_q[1].strip())\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split(\" \"))\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s.\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s as a substring.\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i.\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query.\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0].strip())\n        r = int(query[1].strip())\n        print(count_ac(string, l, r))\n\n# Read input from stdin.\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s.\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s as a substring.\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s)):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i.\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query.\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin.\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n"
    }
  ],
  "created": 1650517326,
  "object": "edit"
}
2022-04-21 05:02:12.469533 fix syntax errors 2 ['\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split(" ")\n    n = int(n_q[0].strip())\n    q = int(n_q[1].strip())\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split(" "))\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s.\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s as a substring.\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i.\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, \'AC\')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query.\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0].strip())\n        r = int(query[1].strip())\n        print(count_ac(string, l, r))\n\n# Read input from stdin.\nif __name__ == \'__main__\':\n    input = sys.stdin.read()\n    solve(input)\n', "\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s.\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s as a substring.\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s)):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i.\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of S starting at index l_i and ending at index r_i for each query.\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin.\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n"]
2022-04-21 05:02:12.469745 using api key gabby
2022-04-21 05:02:12.510535 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 05:02:17.515944 using api key soukgp
2022-04-21 05:02:25.197986 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s as a substring\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of string starting at index l and ending at index r\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of string starting at index l and ending at index r for each query\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\n# as a substring\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of s starting at index l_i and ending at index r_i\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of s starting at index l_i and ending at index r_i for each query\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n"
    }
  ],
  "created": 1650517337,
  "object": "edit"
}
2022-04-21 05:02:25.198231 fix syntax errors 2 ["\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s as a substring\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of string starting at index l and ending at index r\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of string starting at index l and ending at index r for each query\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n", "import sys\n\n# Split the input into string and queries\ndef split_input(input):\n    input_split = input.splitlines()\n    n_q = input_split[0].split()\n    n = int(n_q[0])\n    q = int(n_q[1])\n    string = input_split[1]\n    queries = []\n    for i in range(q):\n        queries.append(input_split[2 + i].split())\n    return n, q, string, queries\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\ndef count_substring(s, sub):\n    count = start = 0\n    while True:\n        start = s.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n# Given a string s and a substring sub, returns the number of times sub occurs in s\n# as a substring\ndef count_substring_substring(s, sub):\n    count = 0\n    for i in range(len(s) - 1):\n        if sub in s[i:i+2]:\n            count+=1\n    return count\n\n# Counts the number of times AC occurs in the substring of s starting at index l_i and ending at index r_i\ndef count_ac(string, l, r):\n    substring = string[l-1:r]\n    return count_substring_substring(substring, 'AC')\n\n# Prints the number of times AC occurs in the substring of s starting at index l_i and ending at index r_i for each query\ndef solve(input):\n    n, q, string, queries = split_input(input)\n    for query in queries:\n        l = int(query[0])\n        r = int(query[1])\n        print(count_ac(string, l, r))\n\n# Read input from stdin\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    solve(input)\n"]
2022-04-21 05:02:25.198374 size on output set 4
2022-04-21 05:02:25.198388 num operations 2
2022-04-21 05:02:25.198394 size on input set 1
2022-04-21 05:02:25.198554 using api key gabby
2022-04-21 05:02:25.240309 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 05:02:30.245318 using api key derek
2022-04-21 05:02:30.286986 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-21 05:02:40.297431 using api key kouti
2022-04-21 05:02:43.759151 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)] #\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0]-1:lr[i][1]].count(\"AC\"))\n    for i in ans:\n        print(i)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)]\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0]-1:lr[i][1]].count(\"AC\"))\n    for i in ans:\n        print(i)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650517360,
  "object": "edit"
}
2022-04-21 05:02:43.759407 fix spelling mistakes 2 ['\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)] #リスト内包表記\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0]-1:lr[i][1]].count("AC"))\n    for i in ans:\n        print(i)\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)]\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0]-1:lr[i][1]].count("AC"))\n    for i in ans:\n        print(i)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-21 05:02:43.759445 size on output set 2
2022-04-21 05:02:43.759452 size on input set 2
2022-04-21 05:02:43.759615 using api key sunu
2022-04-21 05:02:52.170940 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(sum(a))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nsys.setrecursionlimit(10 ** 7)\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\ndef main():\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    b = list(map(int, readline().split()))\n    c = list(map(int, readline().split()))\n    ans = 0\n    for i in range(n):\n        ans += b[a[i]-1]\n        if i > 0 and a[i] == a[i-1] + 1:\n            ans += c[a[i-1]-1]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650517363,
  "object": "edit"
}
2022-04-21 05:02:52.171289 fix syntax errors 2 ["def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(sum(a))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nsys.setrecursionlimit(10 ** 7)\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\ndef main():\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    b = list(map(int, readline().split()))\n    c = list(map(int, readline().split()))\n    ans = 0\n    for i in range(n):\n        ans += b[a[i]-1]\n        if i > 0 and a[i] == a[i-1] + 1:\n            ans += c[a[i-1]-1]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-21 05:02:52.171501 using api key derek
2022-04-21 05:02:52.213192 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 05:02:57.218624 using api key sunu
2022-04-21 05:03:05.271144 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)]  # \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0] - 1:lr[i][1]].count(\"AC\"))\n    for i in ans:\n        print(i)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)]  # \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0]-1:lr[i][1]].count(\"AC\"))  # \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\n    for i in ans:\n        print(i)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650517377,
  "object": "edit"
}
2022-04-21 05:03:05.271392 fix syntax errors 2 ['\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)]  # リスト内包表記\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0] - 1:lr[i][1]].count("AC"))\n    for i in ans:\n        print(i)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    n, q = map(int, input().split())\n    s = input()\n    lr = [list(map(int, input().split())) for _ in range(q)]  # リスト内包表記\n    ans = []\n    for i in range(q):\n        ans.append(s[lr[i][0]-1:lr[i][1]].count("AC"))  # リスト内包表記\n    for i in ans:\n        print(i)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-21 05:03:05.271427 size on output set 4
