2022-04-21 00:30:31.634277 num operations 2
2022-04-21 00:30:31.634288 size on input set 1
2022-04-21 00:30:31.634447 using api key kouti
2022-04-21 00:30:59.261591 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    bulbs = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    states = list(map(int, sys.stdin.readline().split()))\n    switches = [[False] * n for _ in range(m)] # m\u500b\u306e\u30b9\u30a4\u30c3\u30c1\u306b\u304a\u3044\u3066\u3001n\u500b\u306e\u96fb\u7403\u304c\u3064\u3044\u3066\u3044\u308b\u304b\n    for i in range(m): # \u30b9\u30a4\u30c3\u30c1i\u306b\u3064\u3044\u3066\n        for j in range(1, bulbs[i][0] + 1): # \u30b9\u30a4\u30c3\u30c1i\u306b\u3064\u3044\u3066\u3044\u308b\u96fb\u7403j\u306b\u3064\u3044\u3066\n            switches[i][bulbs[i][j] - 1] = True # \u30b9\u30a4\u30c3\u30c1i\u306b\u3064\u3044\u3066\u3044\u308b\u96fb\u7403j\u304c\u3001\u96fb\u7403j\u306b\u3064\u3044\u3066\u3044\u308b\n    cnt = 0\n    for i in range(2 ** n): # \u96fb\u7403\u306e\u72b6\u614b\u3092\u5168\u63a2\u7d22\n        flag = True # \u96fb\u7403\u306e\u72b6\u614bi\u304c\u6b63\u3057\u3044\u304b\n        for j in range(m): # \u30b9\u30a4\u30c3\u30c1j\u306b\u3064\u3044\u3066\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650501031,
  "object": "edit"
}
2022-04-21 00:30:59.261846 fix spelling mistakes 2 ["\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    bulbs = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    states = list(map(int, sys.stdin.readline().split()))\n    switches = [[False] * n for _ in range(m)] # m個のスイッチにおいて、n個の電球がついているか\n    for i in range(m): # スイッチiについて\n        for j in range(1, bulbs[i][0] + 1): # スイッチiについている電球jについて\n            switches[i][bulbs[i][j] - 1] = True # スイッチiについている電球jが、電球jについている\n    cnt = 0\n    for i in range(2 ** n): # 電球の状態を全探索\n        flag = True # 電球の状態iが正しいか\n        for j in range(m): # スイッチjについて\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-21 00:30:59.261898 size on output set 2
2022-04-21 00:30:59.261906 size on input set 2
2022-04-21 00:30:59.262069 using api key sunu
2022-04-21 00:31:13.978973 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    bulbs = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    states = list(map(int, sys.stdin.readline().split()))\n    switches = [[False] * n for _ in range(m)] # m\u500b\u306e\u30b9\u30a4\u30c3\u30c1\u306b\u304a\u3044\u3066\u3001n\u500b\u306e\u96fb\u7403\u304c\u3064\u3044\u3066\u3044\u308b\u304b\u3092\u8868\u3059\n    for i in range(m): # \u30b9\u30a4\u30c3\u30c1i\u306b\u3064\u3044\u3066\n        for j in range(1, bulbs[i][0] + 1): # \u30b9\u30a4\u30c3\u30c1i\u306b\u3064\u3044\u3066\u3044\u308b\u96fb\u7403j\u306b\u3064\u3044\u3066\n            switches[i][bulbs[i][j] - 1] = True # \u30b9\u30a4\u30c3\u30c1i\u306b\u3064\u3044\u3066\u3044\u308b\u96fb\u7403j\u304c\u3001\u96fb\u7403j\u306b\u3064\u3044\u3066\u3044\u308b\n    cnt = 0\n    for i in range(2 ** n): # \u96fb\u7403\u306e\u72b6\u614b\u3092\u5168\u63a2\u7d22\n        flag = True # \u96fb\u7403\u306e\u72b6\u614bi\u304c\u6b63\u3057\u3044\u304b\n        for j in range(m): # \u30b9\u30a4\u30c3\u30c1j\u306b\u3064\u3044\u3066\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    bulbs = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    states = list(map(int, sys.stdin.readline().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n): # \u96fb\u7403\u306e\u72b6\u614b\u3092\u5168\u63a2\u7d22\n        flag = True # \u96fb\u7403\u306e\u72b6\u614bi\u304c\u6b63\u3057\u3044\u304b\n        for j in range(m): # \u30b9\u30a4\u30c3\u30c1j\u306b\u3064\u3044\u3066\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650501059,
  "object": "edit"
}
2022-04-21 00:31:13.979200 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    bulbs = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    states = list(map(int, sys.stdin.readline().split()))\n    switches = [[False] * n for _ in range(m)] # m個のスイッチにおいて、n個の電球がついているかを表す\n    for i in range(m): # スイッチiについて\n        for j in range(1, bulbs[i][0] + 1): # スイッチiについている電球jについて\n            switches[i][bulbs[i][j] - 1] = True # スイッチiについている電球jが、電球jについている\n    cnt = 0\n    for i in range(2 ** n): # 電球の状態を全探索\n        flag = True # 電球の状態iが正しいか\n        for j in range(m): # スイッチjについて\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    bulbs = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n    states = list(map(int, sys.stdin.readline().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n): # 電球の状態を全探索\n        flag = True # 電球の状態iが正しいか\n        for j in range(m): # スイッチjについて\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-21 00:31:13.979518 using api key sunu
2022-04-21 00:31:17.102305 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650501074,
  "object": "edit"
}
2022-04-21 00:31:17.102528 fix syntax errors 2 ["\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-21 00:31:17.102565 size on output set 4
2022-04-21 00:31:17.102578 num operations 2
2022-04-21 00:31:17.102584 size on input set 1
2022-04-21 00:31:17.102742 using api key jaanu
2022-04-21 00:31:27.291100 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n# input\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\ndef make_light(state):\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"
    }
  ],
  "created": 1650501077,
  "object": "edit"
}
2022-04-21 00:31:27.291357 fix spelling mistakes 2 ['\n# input\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n', '\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\ndef make_light(state):\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n']
2022-04-21 00:31:27.291397 size on output set 2
2022-04-21 00:31:27.291405 size on input set 2
2022-04-21 00:31:27.291587 using api key derek
2022-04-21 00:31:27.328211 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 00:31:32.333608 using api key gabby
2022-04-21 00:31:32.370931 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-21 00:31:42.381333 using api key sunu
2022-04-21 00:32:04.529698 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[1]))\n    s_list.append(list(map(int, sys.stdin.readline().split()[1:])))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\ndef make_light(state):\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\ndef make_light(state):\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\nprint(make_state([], 0))\n"
    }
  ],
  "created": 1650501102,
  "object": "edit"
}
2022-04-21 00:32:04.530037 fix syntax errors 2 ['\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[1]))\n    s_list.append(list(map(int, sys.stdin.readline().split()[1:])))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\ndef make_light(state):\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n', '\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\ndef make_light(state):\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\nprint(make_state([], 0))\n']
2022-04-21 00:32:04.530346 using api key sourya
2022-04-21 00:32:04.566787 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 00:32:09.572219 using api key gabby
2022-04-21 00:32:09.608587 in retry 5 10 <class 'Exception'>, Retrying in 10 seconds...
2022-04-21 00:32:19.619003 using api key jaanu
2022-04-21 00:32:29.828112 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# input\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0])-1)\n    s_list.append(list(map(int, sys.stdin.readline().split()))-1)\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]-1):\n            if state[s_list[i][j]] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"
    },
    {
      "index": 1,
      "text": "\n# input\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1) # \u3053\u3053\u3067\u30ea\u30b9\u30c8\u306e\u8db3\u3057\u7b97\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5c55\u958b\u3057\u3066\u3044\u308b\n\nprint(make_state([], 0))\n"
    }
  ],
  "created": 1650501139,
  "object": "edit"
}
2022-04-21 00:32:29.828337 fix syntax errors 2 ['\n# input\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0])-1)\n    s_list.append(list(map(int, sys.stdin.readline().split()))-1)\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]-1):\n            if state[s_list[i][j]] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n', '\n# input\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1) # ここでリストの足し算はできないので、展開している\n\nprint(make_state([], 0))\n']
2022-04-21 00:32:29.828411 size on output set 4
