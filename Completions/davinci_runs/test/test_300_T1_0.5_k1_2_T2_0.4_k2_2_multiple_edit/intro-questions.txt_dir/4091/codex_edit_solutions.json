["\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:]))\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))  # noqa\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0]*(n+1)  # dp[i] = max(a[0],a[1],...,a[i-1])\n    for i in range(1, n+1):\n        dp[i] = max(dp[i-1], a[i-1])\n    ans = 0\n    for i in range(k, n+1):\n        ans += dp[i-k]  # dp[i-k] = max(a[i-k],...,a[i-1])\n    print(ans)\n    i = 0\n    while i < n:\n        j = min(i+k, n)\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i, end=\" \")\n        i = j\n    print()\n\nmain()\n", "\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1) #dp[i] = max(a[0],a[1],...,a[i-1]) \n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],a[i-1]) \n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i-k] #dp[i-k] = max(a[i-k],...,a[i-1])\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=\" \")\n        i = j\n    print()\n\nmain()\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = max profit for i problems in j days.\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n# dp[i][j] = max(dp[i - 1][j - 1] + max(a[i - 1:]), dp[i - 2][j - 1] + max(a[i - 2:])...dp[i - k][j - 1] + max(a[i - k:])).\n# dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:]) for l in range(1, k + 1))\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] -= i+1\n    a.sort()\n    b = a[n//2]\n    ans = 0\n    for i in range(n):\n        ans += abs(a[i]-b)\n    print(ans)\n\nmain()\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = maximum profit for i problems in j days\ndp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        if i < j:\n            continue\n        dp[i][j] = max(dp[i - l][j - 1] + max(a[i - l:i]) for l in range(1, min(k, i) + 1))\n\nprint(dp[n][k])\n\ni, j = n, k\nans = []\nwhile j > 0:\n    for l in range(1, min(k, i) + 1):\n        if dp[i][j] == dp[i - l][j - 1] + max(a[i - l:i]):\n            ans.append(l)\n            i -= l\n            j -= 1\n            break\n\nprint(*ans[::-1])\n", "\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    dp = [0]*(n+1) # dp[i] = max(a[j]) for j in range(i)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],a[i-1]) # dp[i] = max(dp[i-1],a[i-1])\n    ans = 0\n    for i in range(k,n+1):\n        ans += dp[i-k] # ans += dp[i-k]\n    print(ans)\n    i = 0\n    while i < n:\n        j = i+k\n        if j > n:\n            j = n\n        while j > i and dp[i] == dp[j]:\n            j -= 1\n        print(j-i,end=\" \")\n        i = j\n    print()\n\nmain()\n"]