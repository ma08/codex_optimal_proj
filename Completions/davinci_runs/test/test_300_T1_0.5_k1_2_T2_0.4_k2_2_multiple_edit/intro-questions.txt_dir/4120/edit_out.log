2022-04-21 01:34:20.235141 num operations 2
2022-04-21 01:34:20.235153 size on input set 1
2022-04-21 01:34:20.235298 using api key soukgp
2022-04-21 01:34:34.787589 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n\n    dfs(0)\n    if False in visited:\n        print(0)\n        return\n\n    diff = []\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]\n        tmp2 = graph[b - 1][:]\n        graph[a - 1].remove(b - 1)\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n\n        dfs(0)\n        if False in visited:\n            diff.append(i)\n\n        graph[a - 1] = tmp1\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:\n        print(len(diff), file=sys.stderr)\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1), file=sys.stderr)\n    else:\n        print(k, file=sys.stderr)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1), file=sys.stderr)\n\n\nfunc(inp(), inp(), inp())\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):  # n:\u9802\u70b9\u6570, m:\u8fba\u306e\u6570, k:\u524a\u9664\u3059\u308b\u8fba\u306e\u6570\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]  # \u96a3\u63a5\u30ea\u30b9\u30c8\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n  # \u5168\u3066\u306e\u9802\u70b9\u306b\u8a2a\u308c\u305f\u304b\u3069\u3046\u304b\n    dfs(0)  # 0\u756a\u76ee\u306e\u9802\u70b9\u304b\u3089\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u9802\u70b9\u3092\u5168\u3066\u8a2a\u308c\u308b\n    if False in visited:\n        print(0)\n        return\n\n    diff = []  # \u524a\u9664\u3059\u308b\u8fba\u3092\u793a\u3059\u30ea\u30b9\u30c8\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]  # \u96a3\u63a5\u30ea\u30b9\u30c8\u306e\u30b3\u30d4\u30fc\n        tmp2 = graph[b - 1][:]  # \u96a3\u63a5\u30ea\u30b9\u30c8\u306e\u30b3\u30d4\u30fc\n        graph[a - 1].remove(b - 1)  # \u8fba\u3092\u524a\u9664\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n  # \u5168\u3066\u306e\u9802\u70b9\u306b\u8a2a\u308c\u305f\u304b\u3069\u3046\u304b\n        dfs(0)  # 0\u756a\u76ee\u306e\u9802\u70b9\u304b\u3089\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u9802\u70b9\u3092\u5168\u3066\u8a2a\u308c\u308b\n        if False in visited:\n            diff.append(i)  # \u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u9802\u70b9\u304c\u3042\u308b\u5834\u5408\u306fdiff\u306b\u8ffd\u52a0\n\n        graph[a - 1] = tmp1  # \u524a\u9664\u3057\u305f\u8fba\u3092\u5143\u306b\u623b\u3059\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:  # \u524a\u9664\u3059\u308b\u8fba\u306e\u6570\u304cdiff\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\n        print(len(diff))\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1))\n    else:  # \u524a\u9664\u3059\u308b\u8fba\u306e\u6570\u304cdiff\u3088\u308a\u5927\u304d\u3044\u5834\u5408\n        print(k)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1))\n\n\nfunc(inp(), inp(), inp())\n"
    }
  ],
  "created": 1650504860,
  "object": "edit"
}
2022-04-21 01:34:34.787861 fix spelling mistakes 2 ["\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n\n    dfs(0)\n    if False in visited:\n        print(0)\n        return\n\n    diff = []\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]\n        tmp2 = graph[b - 1][:]\n        graph[a - 1].remove(b - 1)\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n\n        dfs(0)\n        if False in visited:\n            diff.append(i)\n\n        graph[a - 1] = tmp1\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:\n        print(len(diff), file=sys.stderr)\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1), file=sys.stderr)\n    else:\n        print(k, file=sys.stderr)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1), file=sys.stderr)\n\n\nfunc(inp(), inp(), inp())\n", "\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):  # n:頂点数, m:辺の数, k:削除する辺の数\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]  # 隣接リスト\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n  # 全ての頂点に訪れたかどうか\n    dfs(0)  # 0番目の頂点から訪れることができる頂点を全て訪れる\n    if False in visited:\n        print(0)\n        return\n\n    diff = []  # 削除する辺を示すリスト\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]  # 隣接リストのコピー\n        tmp2 = graph[b - 1][:]  # 隣接リストのコピー\n        graph[a - 1].remove(b - 1)  # 辺を削除\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n  # 全ての頂点に訪れたかどうか\n        dfs(0)  # 0番目の頂点から訪れることができる頂点を全て訪れる\n        if False in visited:\n            diff.append(i)  # 訪れることができない頂点がある場合はdiffに追加\n\n        graph[a - 1] = tmp1  # 削除した辺を元に戻す\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:  # 削除する辺の数がdiffより小さい場合\n        print(len(diff))\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1))\n    else:  # 削除する辺の数がdiffより大きい場合\n        print(k)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1))\n\n\nfunc(inp(), inp(), inp())\n"]
2022-04-21 01:34:34.788034 size on output set 2
2022-04-21 01:34:34.788044 size on input set 2
2022-04-21 01:34:34.788207 using api key sourya
2022-04-21 01:34:34.828739 in retry 6 5 <class 'Exception'>, Retrying in 5 seconds...
2022-04-21 01:34:39.834139 using api key soukgp
2022-04-21 01:34:44.121763 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n\n    dfs(0)\n    if False in visited:\n        print(0)\n        return\n\n    diff = []\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]\n        tmp2 = graph[b - 1][:]\n        graph[a - 1].remove(b - 1)\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n\n        dfs(0)\n        if False in visited:\n            diff.append(i)\n\n        graph[a - 1] = tmp1\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:\n        print(len(diff), file=sys.stderr)\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1), file=sys.stderr)\n    else:\n        print(k, file=sys.stderr)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1), file=sys.stderr)\n\n\nfunc(inp(), inp(), inp())\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n\n    dfs(0)\n    if False in visited:\n        print(0, file=sys.stderr)\n        return\n\n    diff = []\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]\n        tmp2 = graph[b - 1][:]\n        graph[a - 1].remove(b - 1)\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n\n        dfs(0)\n        if False in visited:\n            diff.append(i)\n\n        graph[a - 1] = tmp1\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:\n        print(len(diff), file=sys.stderr)\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1), file=sys.stderr)\n    else:\n        print(k, file=sys.stderr)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1), file=sys.stderr)\n\n\nfunc(inp(), inp(), inp())\n"
    }
  ],
  "created": 1650504879,
  "object": "edit"
}
2022-04-21 01:34:44.121999 fix syntax errors 2 ["\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n\n    dfs(0)\n    if False in visited:\n        print(0)\n        return\n\n    diff = []\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]\n        tmp2 = graph[b - 1][:]\n        graph[a - 1].remove(b - 1)\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n\n        dfs(0)\n        if False in visited:\n            diff.append(i)\n\n        graph[a - 1] = tmp1\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:\n        print(len(diff), file=sys.stderr)\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1), file=sys.stderr)\n    else:\n        print(k, file=sys.stderr)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1), file=sys.stderr)\n\n\nfunc(inp(), inp(), inp())\n", "\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n\n    dfs(0)\n    if False in visited:\n        print(0, file=sys.stderr)\n        return\n\n    diff = []\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]\n        tmp2 = graph[b - 1][:]\n        graph[a - 1].remove(b - 1)\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n\n        dfs(0)\n        if False in visited:\n            diff.append(i)\n\n        graph[a - 1] = tmp1\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:\n        print(len(diff), file=sys.stderr)\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1), file=sys.stderr)\n    else:\n        print(k, file=sys.stderr)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1), file=sys.stderr)\n\n\nfunc(inp(), inp(), inp())\n"]
2022-04-21 01:34:44.122206 using api key soukgp
2022-04-21 01:34:52.324461 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):  # n:\u9802\u70b9\u6570, m:\u8fba\u306e\u6570, k:\u524a\u9664\u3059\u308b\u8fba\u306e\u6570\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]  # \u96a3\u63a5\u30ea\u30b9\u30c8\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n  # \u5168\u3066\u306e\u9802\u70b9\u306b\u8a2a\u308c\u305f\u304b\u3069\u3046\u304b\n    dfs(0)  # 0\u756a\u76ee\u306e\u9802\u70b9\u304b\u3089\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u9802\u70b9\u3092\u5168\u3066\u8a2a\u308c\u308b\n    if False in visited:\n        print(0)\n        return\n\n    diff = []  # \u524a\u9664\u3059\u308b\u8fba\u3092\u793a\u3059\u30ea\u30b9\u30c8\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]  # \u96a3\u63a5\u30ea\u30b9\u30c8\u306e\u30b3\u30d4\u30fc\n        tmp2 = graph[b - 1][:]  # \u96a3\u63a5\u30ea\u30b9\u30c8\u306e\u30b3\u30d4\u30fc\n        graph[a - 1].remove(b - 1)  # \u8fba\u3092\u524a\u9664\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n  # \u5168\u3066\u306e\u9802\u70b9\u306b\u8a2a\u308c\u305f\u304b\u3069\u3046\u304b\n        dfs(0)  # 0\u756a\u76ee\u306e\u9802\u70b9\u304b\u3089\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u9802\u70b9\u3092\u5168\u3066\u8a2a\u308c\u308b\n        if False in visited:\n            diff.append(i)  # \u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u9802\u70b9\u304c\u3042\u308b\u5834\u5408\u306fdiff\u306b\u8ffd\u52a0\n\n        graph[a - 1] = tmp1  # \u524a\u9664\u3057\u305f\u8fba\u3092\u5143\u306b\u623b\u3059\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:  # \u524a\u9664\u3059\u308b\u8fba\u306e\u6570\u304cdiff\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\n        print(len(diff))\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1))\n    else:  # \u524a\u9664\u3059\u308b\u8fba\u306e\u6570\u304cdiff\u3088\u308a\u5927\u304d\u3044\u5834\u5408\n        print(k)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1))\n\n\nfunc(inp(), inp(), inp())\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):  # n:\u9802\u70b9\u6570, m:\u8fba\u306e\u6570, k:\u524a\u9664\u3059\u308b\u8fba\u306e\u6570\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]  # \u96a3\u63a5\u30ea\u30b9\u30c8\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n  # \u5168\u3066\u306e\u9802\u70b9\u306b\u8a2a\u308c\u305f\u304b\u3069\u3046\u304b\n    dfs(0)  # 0\u756a\u76ee\u306e\u9802\u70b9\u304b\u3089\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u9802\u70b9\u3092\u5168\u3066\u8a2a\u308c\u308b\n    if False in visited:\n        print(0)\n        return\n\n    diff = []  # \u524a\u9664\u3059\u308b\u8fba\u3092\u793a\u3059\u30ea\u30b9\u30c8\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]  # \u96a3\u63a5\u30ea\u30b9\u30c8\u306e\u30b3\u30d4\u30fc\n        tmp2 = graph[b - 1][:]  # \u96a3\u63a5\u30ea\u30b9\u30c8\u306e\u30b3\u30d4\u30fc\n        graph[a - 1].remove(b - 1)  # \u8fba\u3092\u524a\u9664\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n  # \u5168\u3066\u306e\u9802\u70b9\u306b\u8a2a\u308c\u305f\u304b\u3069\u3046\u304b\n        dfs(0)  # 0\u756a\u76ee\u306e\u9802\u70b9\u304b\u3089\u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u9802\u70b9\u3092\u5168\u3066\u8a2a\u308c\u308b\n        if False in visited:\n            diff.append(i)  # \u8a2a\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u9802\u70b9\u304c\u3042\u308b\u5834\u5408\u306fdiff\u306b\u8ffd\u52a0\n\n        graph[a - 1] = tmp1  # \u524a\u9664\u3057\u305f\u8fba\u3092\u5143\u306b\u623b\u3059\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:  # \u524a\u9664\u3059\u308b\u8fba\u306e\u6570\u304cdiff\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\n        print(len(diff))\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1))\n    else:  # \u524a\u9664\u3059\u308b\u8fba\u306e\u6570\u304cdiff\u3088\u308a\u5927\u304d\u3044\u5834\u5408\n        print(k)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1))\n\n\nfunc(inp(), inp(), inp())\n"
    }
  ],
  "created": 1650504884,
  "object": "edit"
}
2022-04-21 01:34:52.324883 fix syntax errors 2 ["\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\n\ndef inp(): return int(sys.stdin.readline())\n\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):  # n:頂点数, m:辺の数, k:削除する辺の数\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]  # 隣接リスト\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n  # 全ての頂点に訪れたかどうか\n    dfs(0)  # 0番目の頂点から訪れることができる頂点を全て訪れる\n    if False in visited:\n        print(0)\n        return\n\n    diff = []  # 削除する辺を示すリスト\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]  # 隣接リストのコピー\n        tmp2 = graph[b - 1][:]  # 隣接リストのコピー\n        graph[a - 1].remove(b - 1)  # 辺を削除\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n  # 全ての頂点に訪れたかどうか\n        dfs(0)  # 0番目の頂点から訪れることができる頂点を全て訪れる\n        if False in visited:\n            diff.append(i)  # 訪れることができない頂点がある場合はdiffに追加\n\n        graph[a - 1] = tmp1  # 削除した辺を元に戻す\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:  # 削除する辺の数がdiffより小さい場合\n        print(len(diff))\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1))\n    else:  # 削除する辺の数がdiffより大きい場合\n        print(k)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1))\n\n\nfunc(inp(), inp(), inp())\n", "\n\nimport sys\nimport re\nimport math\nimport string\nimport itertools\nimport collections\nimport bisect\nimport queue\nimport heapq\nimport time\nimport random\nimport copy\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inp_list(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\ndef comb(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef perm(n, r): return math.factorial(n) // math.factorial(n - r)\n\n\ndef dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\ndef func(n, m, k):  # n:頂点数, m:辺の数, k:削除する辺の数\n    def dfs(u):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v)\n\n    graph = [[] for i in range(n)]  # 隣接リスト\n    for i in range(m):\n        a, b = inp_list()\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = [False] * n  # 全ての頂点に訪れたかどうか\n    dfs(0)  # 0番目の頂点から訪れることができる頂点を全て訪れる\n    if False in visited:\n        print(0)\n        return\n\n    diff = []  # 削除する辺を示すリスト\n    for i in range(m):\n        a, b = inp_list()\n        tmp1 = graph[a - 1][:]  # 隣接リストのコピー\n        tmp2 = graph[b - 1][:]  # 隣接リストのコピー\n        graph[a - 1].remove(b - 1)  # 辺を削除\n        graph[b - 1].remove(a - 1)\n\n        visited = [False] * n  # 全ての頂点に訪れたかどうか\n        dfs(0)  # 0番目の頂点から訪れることができる頂点を全て訪れる\n        if False in visited:\n            diff.append(i)  # 訪れることができない頂点がある場合はdiffに追加\n\n        graph[a - 1] = tmp1  # 削除した辺を元に戻す\n        graph[b - 1] = tmp2\n\n    if len(diff) < k:  # 削除する辺の数がdiffより小さい場合\n        print(len(diff))\n        for i in diff:\n            print('1' * (i + 1) + '0' * (m - i - 1))\n    else:  # 削除する辺の数がdiffより大きい場合\n        print(k)\n        for i in range(k):\n            print('1' * (diff[i] + 1) + '0' * (m - diff[i] - 1))\n\n\nfunc(inp(), inp(), inp())\n"]
2022-04-21 01:34:52.324968 size on output set 4
2022-04-21 01:34:52.324981 num operations 2
2022-04-21 01:34:52.324988 size on input set 1
2022-04-21 01:34:52.325148 using api key sunu
2022-04-21 01:34:56.113259 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution\n\n#!/usr/bin/python3\n\nfrom copy import deepcopy\n\nn, m, k = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n\ndef dfs(v, g, used):\n    used[v] = 1\n    for i in range(len(g[v])):\n        if (not used[g[v][i]]):\n            dfs(g[v][i], g, used)\n\ndef is_connected(g):\n    used = [0 for i in range(n)]\n    dfs(0, g, used)\n    for i in range(n):\n        if (not used[i]):\n            return False\n    return True\n\ndef get_dist(g):\n    dist = [0 for i in range(n)]\n    used = [0 for i in range(n)]\n    q = [0]\n    used[0] = 1\n    while (len(q) > 0):\n        cur = q[0]\n        q = q[1:]\n        for i in range(len(g[cur])):\n            if (not used[g[cur][i]]):\n                used[g[cur][i]] = 1\n                q.append(g[cur][i])\n                dist[g[cur][i]] = dist[cur] + 1\n    return sum(dist)\n\ndef get_answer(g, m, k):\n    dist = get_dist(g)\n    best = dist\n    ans = []\n    for i in range(1 << m):\n        if (bin(i).count('1') == n - 1):\n            cur = deepcopy(g)\n            for j in range(m):\n                if ((i >> j) % 2 == 1):\n                    cur[g[j][0]].remove(g[j][1])\n                    cur[g[j][1]].remove(g[j][0])\n            if (is_connected(cur)):\n                cur_dist = get_dist(cur)\n                if (cur_dist < best):\n                    best = cur_dist\n                    ans = []\n                    ans.append(i)\n                elif (cur_dist == best):\n                    ans.append(i)\n    return ans\n\nans = get_answer(g, m, k)\nprint(len(ans))\nfor i in range(len(ans)):\n    print(bin(ans[i])[2:].zfill(m))\n\n# Reference: https://github.com/jaehyunp/stanfordacm/blob/master/code/RoadsNotOnlyInBerland.cpp \n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution\n\n#!/usr/bin/python3\n\nfrom copy import deepcopy\n\nn, m, k = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n\ndef dfs(v, g, used):\n    used[v] = 1\n    for i in range(len(g[v])):\n        if (not used[g[v][i]]):\n            dfs(g[v][i], g, used)\n\ndef is_connected(g):\n    used = [0 for i in range(n)]\n    dfs(0, g, used)\n    for i in range(n):\n        if (not used[i]):\n            return False\n    return True\n\ndef get_dist(g):\n    dist = [0 for i in range(n)]\n    used = [0 for i in range(n)]\n    q = [0]\n    used[0] = 1\n    while (len(q) > 0):\n        cur = q[0]\n        q = q[1:]\n        for i in range(len(g[cur])):\n            if (not used[g[cur][i]]):\n                used[g[cur][i]] = 1\n                q.append(g[cur][i])\n                dist[g[cur][i]] = dist[cur] + 1\n    return sum(dist)\n\ndef get_answer(g, m, k):\n    dist = get_dist(g)\n    best = dist\n    ans = []\n    for i in range(1 << m):\n        if (bin(i).count('1') == n - 1):\n            cur = deepcopy(g)\n            for j in range(m):\n                if ((i >> j) % 2 == 1):\n                    cur[g[j][0]].remove(g[j][1])\n                    cur[g[j][1]].remove(g[j][0])\n            if (is_connected(cur)):\n                cur_dist = get_dist(cur)\n                if (cur_dist < best):\n                    best = cur_dist\n                    ans = []\n                    ans.append(i)\n                elif (cur_dist == best):\n                    ans.append(i)\n    return ans\n\nans = get_answer(g, m, k)\nprint(len(ans))\nfor i in range(len(ans)):\n    print(bin(ans[i])[2:].zfill(m))\n\n# Reference: https://github.com/jaehyunp/stanfordacm/blob/master/code/RoadsNotOnlyInBerland.cpp \n"
    }
  ],
  "created": 1650504892,
  "object": "edit"
}
2022-04-21 01:34:56.113587 fix spelling mistakes 2 ["\n\n# Solution\n\n#!/usr/bin/python3\n\nfrom copy import deepcopy\n\nn, m, k = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n\ndef dfs(v, g, used):\n    used[v] = 1\n    for i in range(len(g[v])):\n        if (not used[g[v][i]]):\n            dfs(g[v][i], g, used)\n\ndef is_connected(g):\n    used = [0 for i in range(n)]\n    dfs(0, g, used)\n    for i in range(n):\n        if (not used[i]):\n            return False\n    return True\n\ndef get_dist(g):\n    dist = [0 for i in range(n)]\n    used = [0 for i in range(n)]\n    q = [0]\n    used[0] = 1\n    while (len(q) > 0):\n        cur = q[0]\n        q = q[1:]\n        for i in range(len(g[cur])):\n            if (not used[g[cur][i]]):\n                used[g[cur][i]] = 1\n                q.append(g[cur][i])\n                dist[g[cur][i]] = dist[cur] + 1\n    return sum(dist)\n\ndef get_answer(g, m, k):\n    dist = get_dist(g)\n    best = dist\n    ans = []\n    for i in range(1 << m):\n        if (bin(i).count('1') == n - 1):\n            cur = deepcopy(g)\n            for j in range(m):\n                if ((i >> j) % 2 == 1):\n                    cur[g[j][0]].remove(g[j][1])\n                    cur[g[j][1]].remove(g[j][0])\n            if (is_connected(cur)):\n                cur_dist = get_dist(cur)\n                if (cur_dist < best):\n                    best = cur_dist\n                    ans = []\n                    ans.append(i)\n                elif (cur_dist == best):\n                    ans.append(i)\n    return ans\n\nans = get_answer(g, m, k)\nprint(len(ans))\nfor i in range(len(ans)):\n    print(bin(ans[i])[2:].zfill(m))\n\n# Reference: https://github.com/jaehyunp/stanfordacm/blob/master/code/RoadsNotOnlyInBerland.cpp \n", "\n\n# Solution\n\n#!/usr/bin/python3\n\nfrom copy import deepcopy\n\nn, m, k = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n\ndef dfs(v, g, used):\n    used[v] = 1\n    for i in range(len(g[v])):\n        if (not used[g[v][i]]):\n            dfs(g[v][i], g, used)\n\ndef is_connected(g):\n    used = [0 for i in range(n)]\n    dfs(0, g, used)\n    for i in range(n):\n        if (not used[i]):\n            return False\n    return True\n\ndef get_dist(g):\n    dist = [0 for i in range(n)]\n    used = [0 for i in range(n)]\n    q = [0]\n    used[0] = 1\n    while (len(q) > 0):\n        cur = q[0]\n        q = q[1:]\n        for i in range(len(g[cur])):\n            if (not used[g[cur][i]]):\n                used[g[cur][i]] = 1\n                q.append(g[cur][i])\n                dist[g[cur][i]] = dist[cur] + 1\n    return sum(dist)\n\ndef get_answer(g, m, k):\n    dist = get_dist(g)\n    best = dist\n    ans = []\n    for i in range(1 << m):\n        if (bin(i).count('1') == n - 1):\n            cur = deepcopy(g)\n            for j in range(m):\n                if ((i >> j) % 2 == 1):\n                    cur[g[j][0]].remove(g[j][1])\n                    cur[g[j][1]].remove(g[j][0])\n            if (is_connected(cur)):\n                cur_dist = get_dist(cur)\n                if (cur_dist < best):\n                    best = cur_dist\n                    ans = []\n                    ans.append(i)\n                elif (cur_dist == best):\n                    ans.append(i)\n    return ans\n\nans = get_answer(g, m, k)\nprint(len(ans))\nfor i in range(len(ans)):\n    print(bin(ans[i])[2:].zfill(m))\n\n# Reference: https://github.com/jaehyunp/stanfordacm/blob/master/code/RoadsNotOnlyInBerland.cpp \n"]
2022-04-21 01:34:56.113648 size on output set 1
2022-04-21 01:34:56.113656 size on input set 1
2022-04-21 01:34:56.113818 using api key sunu
2022-04-21 01:35:00.346407 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution\n#!/usr/bin/python3\nfrom copy import deepcopy\n\nn, m, k = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\ndef dfs(v, g, used):\n    used[v] = 1\n    for i in range(len(g[v])):\n        if (not used[g[v][i]]):\n            dfs(g[v][i], g, used)\n\ndef is_connected(g):\n    used = [0 for i in range(n)]\n    dfs(0, g, used)\n    for i in range(n):\n        if (not used[i]):\n            return False\n    return True\n\ndef get_dist(g):\n    dist = [0 for i in range(n)]\n    used = [0 for i in range(n)]\n    q = [0]\n    used[0] = 1\n    while (len(q) > 0):\n        cur = q[0]\n        q = q[1:]\n        for i in range(len(g[cur])):\n            if (not used[g[cur][i]]):\n                used[g[cur][i]] = 1\n                q.append(g[cur][i])\n                dist[g[cur][i]] = dist[cur] + 1\n    return sum(dist)\n\ndef get_answer(g, m, k):\n    dist = get_dist(g)\n    best = dist\n    ans = []\n    for i in range(1 << m):\n        if (bin(i).count('1') == n - 1):\n            cur = deepcopy(g)\n            for j in range(m):\n                if ((i >> j) % 2 == 1):\n                    cur[g[j][0]].remove(g[j][1])\n                    cur[g[j][1]].remove(g[j][0])\n            if (is_connected(cur)):\n                cur_dist = get_dist(cur)\n                if (cur_dist < best):\n                    best = cur_dist\n                    ans = []\n                    ans.append(i)\n                elif (cur_dist == best):\n                    ans.append(i)\n    return ans\n\nans = get_answer(g, m, k)\nprint(len(ans))\nfor i in range(len(ans)):\n    print(bin(ans[i])[2:].zfill(m))\n\n# Reference: https://github.com/jaehyunp/stanfordacm/blob/master/code/RoadsNotOnlyInBerland.cpp \n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution\n\n#!/usr/bin/python\n\nfrom copy import deepcopy\n\nn, m, k = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n\ndef dfs(v, g, used):\n    used[v] = 1\n    for i in range(len(g[v])):\n        if (not used[g[v][i]]):\n            dfs(g[v][i], g, used)\n\ndef is_connected(g):\n    used = [0 for i in range(n)]\n    dfs(0, g, used)\n    for i in range(n):\n        if (not used[i]):\n            return False\n    return True\n\ndef get_dist(g):\n    dist = [0 for i in range(n)]\n    used = [0 for i in range(n)]\n    q = [0]\n    used[0] = 1\n    while (len(q) > 0):\n        cur = q[0]\n        q = q[1:]\n        for i in range(len(g[cur])):\n            if (not used[g[cur][i]]):\n                used[g[cur][i]] = 1\n                q.append(g[cur][i])\n                dist[g[cur][i]] = dist[cur] + 1\n    return sum(dist)\n\ndef get_answer(g, m, k):\n    dist = get_dist(g)\n    best = dist\n    ans = []\n    for i in range(1 << m):\n        if (bin(i).count('1') == n - 1):\n            cur = deepcopy(g)\n            for j in range(m):\n                if ((i >> j) % 2 == 1):\n                    cur[g[j][0]].remove(g[j][1])\n                    cur[g[j][1]].remove(g[j][0])\n            if (is_connected(cur)):\n                cur_dist = get_dist(cur)\n                if (cur_dist < best):\n                    best = cur_dist\n                    ans = []\n                    ans.append(i)\n                elif (cur_dist == best):\n                    ans.append(i)\n    return ans\n\nans = get_answer(g, m, k)\nprint(len(ans))\nfor i in range(len(ans)):\n    print(bin(ans[i])[2:].zfill(m))\n\n# Reference: https://github.com/jaehyunp/stanfordacm/blob/master/code/RoadsNotOnlyInBerland.cpp \n"
    }
  ],
  "created": 1650504896,
  "object": "edit"
}
2022-04-21 01:35:00.346650 fix syntax errors 2 ["\n\n# Solution\n#!/usr/bin/python3\nfrom copy import deepcopy\n\nn, m, k = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\ndef dfs(v, g, used):\n    used[v] = 1\n    for i in range(len(g[v])):\n        if (not used[g[v][i]]):\n            dfs(g[v][i], g, used)\n\ndef is_connected(g):\n    used = [0 for i in range(n)]\n    dfs(0, g, used)\n    for i in range(n):\n        if (not used[i]):\n            return False\n    return True\n\ndef get_dist(g):\n    dist = [0 for i in range(n)]\n    used = [0 for i in range(n)]\n    q = [0]\n    used[0] = 1\n    while (len(q) > 0):\n        cur = q[0]\n        q = q[1:]\n        for i in range(len(g[cur])):\n            if (not used[g[cur][i]]):\n                used[g[cur][i]] = 1\n                q.append(g[cur][i])\n                dist[g[cur][i]] = dist[cur] + 1\n    return sum(dist)\n\ndef get_answer(g, m, k):\n    dist = get_dist(g)\n    best = dist\n    ans = []\n    for i in range(1 << m):\n        if (bin(i).count('1') == n - 1):\n            cur = deepcopy(g)\n            for j in range(m):\n                if ((i >> j) % 2 == 1):\n                    cur[g[j][0]].remove(g[j][1])\n                    cur[g[j][1]].remove(g[j][0])\n            if (is_connected(cur)):\n                cur_dist = get_dist(cur)\n                if (cur_dist < best):\n                    best = cur_dist\n                    ans = []\n                    ans.append(i)\n                elif (cur_dist == best):\n                    ans.append(i)\n    return ans\n\nans = get_answer(g, m, k)\nprint(len(ans))\nfor i in range(len(ans)):\n    print(bin(ans[i])[2:].zfill(m))\n\n# Reference: https://github.com/jaehyunp/stanfordacm/blob/master/code/RoadsNotOnlyInBerland.cpp \n", "\n\n# Solution\n\n#!/usr/bin/python\n\nfrom copy import deepcopy\n\nn, m, k = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n\ndef dfs(v, g, used):\n    used[v] = 1\n    for i in range(len(g[v])):\n        if (not used[g[v][i]]):\n            dfs(g[v][i], g, used)\n\ndef is_connected(g):\n    used = [0 for i in range(n)]\n    dfs(0, g, used)\n    for i in range(n):\n        if (not used[i]):\n            return False\n    return True\n\ndef get_dist(g):\n    dist = [0 for i in range(n)]\n    used = [0 for i in range(n)]\n    q = [0]\n    used[0] = 1\n    while (len(q) > 0):\n        cur = q[0]\n        q = q[1:]\n        for i in range(len(g[cur])):\n            if (not used[g[cur][i]]):\n                used[g[cur][i]] = 1\n                q.append(g[cur][i])\n                dist[g[cur][i]] = dist[cur] + 1\n    return sum(dist)\n\ndef get_answer(g, m, k):\n    dist = get_dist(g)\n    best = dist\n    ans = []\n    for i in range(1 << m):\n        if (bin(i).count('1') == n - 1):\n            cur = deepcopy(g)\n            for j in range(m):\n                if ((i >> j) % 2 == 1):\n                    cur[g[j][0]].remove(g[j][1])\n                    cur[g[j][1]].remove(g[j][0])\n            if (is_connected(cur)):\n                cur_dist = get_dist(cur)\n                if (cur_dist < best):\n                    best = cur_dist\n                    ans = []\n                    ans.append(i)\n                elif (cur_dist == best):\n                    ans.append(i)\n    return ans\n\nans = get_answer(g, m, k)\nprint(len(ans))\nfor i in range(len(ans)):\n    print(bin(ans[i])[2:].zfill(m))\n\n# Reference: https://github.com/jaehyunp/stanfordacm/blob/master/code/RoadsNotOnlyInBerland.cpp \n"]
2022-04-21 01:35:00.346780 size on output set 2
