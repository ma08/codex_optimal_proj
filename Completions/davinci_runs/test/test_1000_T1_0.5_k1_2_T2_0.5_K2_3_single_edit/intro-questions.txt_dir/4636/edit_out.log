2022-04-16 00:31:24.202175 num operations 1
2022-04-16 00:31:24.202195 size on input set 1
2022-04-16 00:31:28.630467 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    # sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1], sep = ' ')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    sys.stdin = open(\"in.txt\", \"r\")\n    sys.stdout = open(\"out.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0] * 2\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(b[0], b[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650069084,
  "object": "edit"
}
2022-04-16 00:31:28.630687 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    # sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1], sep = \' \')\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    sys.stdin = open("in.txt", "r")\n    sys.stdout = open("out.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0] * 2\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(b[0], b[1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:31:28.630720 size on output set 3
2022-04-16 00:31:28.630732 num operations 1
2022-04-16 00:31:28.630738 size on input set 1
2022-04-16 00:31:42.745669 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21, True)\n    assert candy_game([1000]) == (1, 1000, 0, True)\n    assert candy_game([1, 1, 1]) == (2, 1, 2, True)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46, True)\n    assert candy_game([2, 1]) == (2, 2, 1, True)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2, True)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3, True)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score, alice_turn)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob, alice_turn = candy_game(candy_sizes)\n        print(moves, alice, bob, 'Alice' if alice_turn else 'Bob')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21)\n    assert candy_game([1000]) == (1, 1000, 0)\n    assert candy_game([1, 1, 1]) == (2, 1, 2)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46)\n    assert candy_game([2, 1]) == (2, 2, 1)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes) # why does this work?\n        print(moves, alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21, True)\n    assert candy_game([1000]) == (1, 1000, 0, True)\n    assert candy_game([1, 1, 1]) == (2, 1, 2, True)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46, True)\n    assert candy_game([2, 1]) == (2, 2, 1, True)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2, True)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3, True)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    if alice_score > bob_score:\n        return (moves, alice_score, bob_score, True)\n    else:\n        return (moves, alice_score, bob_score, False)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob, alice_win = candy_game(candy_sizes)\n        print(moves, alice, bob, 'ALICE' if alice_win else 'BOB')\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650069088,
  "object": "edit"
}
2022-04-16 00:31:42.745898 fix syntax errors 3 ['\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21, True)\n    assert candy_game([1000]) == (1, 1000, 0, True)\n    assert candy_game([1, 1, 1]) == (2, 1, 2, True)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46, True)\n    assert candy_game([2, 1]) == (2, 2, 1, True)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2, True)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3, True)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score, alice_turn)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob, alice_turn = candy_game(candy_sizes)\n        print(moves, alice, bob, \'Alice\' if alice_turn else \'Bob\')\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21)\n    assert candy_game([1000]) == (1, 1000, 0)\n    assert candy_game([1, 1, 1]) == (2, 1, 2)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46)\n    assert candy_game([2, 1]) == (2, 2, 1)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes) # why does this work?\n        print(moves, alice, bob)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21, True)\n    assert candy_game([1000]) == (1, 1000, 0, True)\n    assert candy_game([1, 1, 1]) == (2, 1, 2, True)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46, True)\n    assert candy_game([2, 1]) == (2, 2, 1, True)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2, True)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3, True)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    if alice_score > bob_score:\n        return (moves, alice_score, bob_score, True)\n    else:\n        return (moves, alice_score, bob_score, False)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob, alice_win = candy_game(candy_sizes)\n        print(moves, alice, bob, \'ALICE\' if alice_win else \'BOB\')\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:31:42.746076 size on output set 3
