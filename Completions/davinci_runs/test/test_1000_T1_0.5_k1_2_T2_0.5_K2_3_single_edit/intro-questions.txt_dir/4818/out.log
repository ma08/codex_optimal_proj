2022-04-09 22:45:19.630088 """
Professor Zac is trying to finish a collection of tasks during the first week at the start of the term. He knows precisely how long each task will take, down to the millisecond. Unfortunately, it is also Frosh Week. Zacâ€™s office window has a clear view of the stage where loud music is played. He cannot focus on any task when music is blaring.

The event organizers are also very precise. They supply Zac with intervals of time when music will not be playing. These intervals are specified by their start and end times down to the millisecond.

Each task that Zac completes must be completed in one quiet interval. He cannot pause working on a task when music plays (he loses his train of thought). Interstingly, the lengths of the tasks and quiet intervals are such that it is impossible to finish more than one task per quiet interval!

Given a list of times $t_ i$ (in milliseconds) that each task will take and a list of times $\ell _ j$ (in milliseconds) specifying the lengths of the intervals when no music is being played, what is the maximum number of tasks that Zac can complete?

-----Input-----
The first line of input contains a pair of integers $n$ and $m$, where $n$ is the number of tasks and $m$ is the number of time intervals when no music is played. The second line consists of a list of integers $t_1, t_2, \ldots , t_ n$ indicating the length of time of each task. The final line consists of a list of times $\ell _1, \ell _2, \ldots , \ell _ m$ indicating the length of time of each quiet interval when Zac is at work this week.

You may assume that $1 \leq n,m \leq 200000$ and $100000 \leq t_ i, \ell _ j \leq 199999$ for each task $i$ and each quiet interval $j$.

-----Output-----
Output consists of a single line containing a single integer indicating the number of tasks that Zac can accomplish from his list during this first week.

-----Examples-----
Sample Input 1:
5 4
150000 100000 160000 100000 180000
190000 170000 140000 160000
Sample Output 1:
4

Sample Input 2:
4 4
180000 185000 199999 100000
199999 180000 170000 120000
Sample Output 2:
3
"""
2022-04-09 22:45:19.630121 --------------------------
2022-04-09 22:45:46.928288 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split(' '))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, input().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()))\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split(' '))\n    tasks = list(map(int, input().split(' ')))\n    quiet = list(map(int, input().split(' ')))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649558720,
  "id": "cmpl-4vHrk0OeftScGsCZrOJyKK17vW6oL",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 22:45:46.928623 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 22:45:46.928663 REASON stop
2022-04-09 22:45:46.929358 test/intro-questions.txt_dir/4818/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4818/solutions.json'
2022-04-09 22:45:46.929394 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split(' '))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, input().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:45:46.929429 REASON stop
2022-04-09 22:45:46.929587 test/intro-questions.txt_dir/4818/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4818/solutions.json'
2022-04-09 22:45:46.929595 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:45:46.929639 REASON stop
2022-04-09 22:45:46.929901 test/intro-questions.txt_dir/4818/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4818/solutions.json'
2022-04-09 22:45:46.929913 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()))\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:45:46.929965 REASON stop
2022-04-09 22:45:46.930204 test/intro-questions.txt_dir/4818/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4818/solutions.json'
2022-04-09 22:45:46.930225 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\n\nmain()"
}
2022-04-09 22:45:46.930287 REASON stop
2022-04-09 22:45:46.930557 test/intro-questions.txt_dir/4818/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4818/solutions.json'
2022-04-09 22:45:46.930595 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:45:46.930661 REASON stop
2022-04-09 22:45:46.931039 test/intro-questions.txt_dir/4818/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4818/solutions.json'
2022-04-09 22:45:46.931070 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()"
}
2022-04-09 22:45:46.931126 REASON stop
2022-04-09 22:45:46.931360 test/intro-questions.txt_dir/4818/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4818/solutions.json'
2022-04-09 22:45:46.931367 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split(' '))\n    tasks = list(map(int, input().split(' ')))\n    quiet = list(map(int, input().split(' ')))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 22:45:46.931402 REASON stop
2022-04-09 22:45:46.931643 test/intro-questions.txt_dir/4818/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4818/solutions.json'
