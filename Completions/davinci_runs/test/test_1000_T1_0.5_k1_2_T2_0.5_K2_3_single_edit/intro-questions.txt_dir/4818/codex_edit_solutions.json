["\nimport sys\n\ndef main():\n    n, m = map(int, input().split(' '))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, input().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\ndef main():\n    # Read in the input\n    n, m = map(int, input().split(' '))\n    tasks = list(map(int, input().split(' ')))\n    quiet = list(map(int, input().split(' ')))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()))\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()))\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input(\"\").split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input(\"\").split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(m):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[i]:\n            total += 1\n    print(total)\n\nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] >= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "import sys\nimport math\nimport collections\nimport itertools\nimport array\nimport inspect\n\n\n# Set max recursion limit\nsys.setrecursionlimit(10000)\n\n# Debug output\ndef chkprint(*args):\n    names = {id(v):k for k,v in inspect.currentframe().f_back.f_locals.items()}\n    print(', '.join(names.get(id(arg),'???')+' = '+repr(arg) for arg in args))\n\n# Binary converter\ndef to_bin(x):\n    return bin(x)[2:]\n\n# Set 2 dimension list\ndef dim2input(N):\n    li = []\n    for _ in range(N):\n        li.append(list(map(int, input())))\n    return li\n\n# --------------------------------------------\n\ndp = None\n\ndef main_2():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n\n    global dp\n    dp = [[0] * (N+1) for _ in range(N+1)]\n\n    def rec(i, j):\n        if dp[i][j] > 0:\n            return dp[i][j]\n        if i == j:\n            dp[i][j] = 0\n            return dp[i][j]\n        if i > j:\n            dp[i][j] = 0\n            return dp[i][j]\n        tmp = float(\"inf\")\n        for k in range(i, j):\n            tmp = min(tmp, rec(i, k) + rec(k+1, j) + A[j] - A[i])\n        dp[i][j] = tmp\n        return dp[i][j]\n\n    print(rec(0, N-1))\n\ndef main():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n\n    dp = [[0] * (N+1) for _ in range(N+1)]\n\n    for k in range(N):\n        for i in range(N):\n            j = i + k\n            if j >= N:\n                continue\n            if i == j:\n                dp[i][j] = 0\n                continue\n            tmp = float(\"inf\")\n            for l in range(i, j):\n                tmp = min(tmp, dp[i][l] + dp[l+1][j] + A[j] - A[i])\n            dp[i][j] = tmp\n\n    print(dp[0][N-1])\n\ndef main_org():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n\n    dp = [[0] * (N+1) for _ in range(N+1)]\n\n    for k in range(N):\n        for i in range(N):\n            j = i + k\n            if j >= N:\n                continue\n            if i == j:\n                dp[i][j] = 0\n                continue\n            tmp = float(\"inf\")\n            for l in range(i, j):\n                tmp = min(tmp, dp[i][l] + dp[l+1][j] + A[j] - A[i])\n            dp[i][j] = tmp\n\n    print(dp[0][N-1])\n\ndef main_org2():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n\n    dp = [[0] * (N+1) for _ in range(N+1)]\n\n    for k in range(1, N):\n        for i in range(N-k):\n            j = i + k\n            if i == j:\n                dp[i][j] = 0\n                continue\n            tmp = float(\"inf\")\n            for l in range(i, j):\n                tmp = min(tmp, dp[i][l] + dp[l+1][j] + A[j] - A[i])\n            dp[i][j] = tmp\n\n    print(dp[0][N-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total) \n\nmain()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split(' '))\n    task_lens = list(map(int, sys.stdin.readline().split(' ')))\n    quiet_lens = list(map(int, sys.stdin.readline().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] >= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    sys.stdout.write(str(count))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport sys\nimport sys\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split(\" \"))\n    tasks = list(map(int, input().split(\" \")))\n    quiet = list(map(int, input().split(\" \")))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys \n\ndef main():\n    n, m = map(int, sys.stdin.readline().split()) \n    t = list(map(int, sys.stdin.readline().split())) \n    l = list(map(int, sys.stdin.readline().split())) \n\n    t.sort() \n    l.sort() \n\n    i = 0 \n    j = 0 \n    count = 0 \n    while i < n and j < m: \n        if t[i] <= l[j]: \n            count += 1 \n            i += 1 \n        j += 1 \n    print(count) \n\nif __name__ == '__main__': \n    main() \n", "\n\ndef main():\n    n, m = map(int, input().split(' '))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, input().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    quiet = list(map(int, input().split()))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = list(map(int, sys.stdin.readline().split()))\n    intervals = list(map(int, sys.stdin.readline().split()))\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n"]