2022-04-16 00:36:20.128151 num operations 1
2022-04-16 00:36:20.128169 size on input set 1
2022-04-16 00:36:24.105474 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n        # your code goes here\n        return(sum([len(child.attrib) + get_attr_number(child) for child in node]))\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n"
    }
  ],
  "created": 1650069380,
  "object": "edit"
}
2022-04-16 00:36:24.105705 fix syntax errors 3 ["\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n        # your code goes here\n        return(sum([len(child.attrib) + get_attr_number(child) for child in node]))\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "import sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n"]
2022-04-16 00:36:24.105733 size on output set 3
2022-04-16 00:36:24.105746 num operations 1
2022-04-16 00:36:24.105751 size on input set 1
2022-04-16 00:36:29.910058 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml =  xml + input() + \"\\n\"\n\n    tree = xml.strip().split()\n    depth = depth(tree)\n    print(depth)\n"
    },
    {
      "index": 1,
      "text": "\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    # xml = \"\"\n    # for i in range(int(input())):\n    #     xml =  xml + input() + \"\\n\"\n    # tree = xml.strip()\n    # depth = depth(tree)\n    # print(depth)\n"
    },
    {
      "index": 2,
      "text": "\n\n# def depth(tree):\n#     if tree is None:\n#         return -1\n#     else:\n#         return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    # xml = \"\"\n    # for i in range(int(input())):\n    #     xml =  xml + input() + \"\\n\"\n    # tree = xml.strip()\n    # depth = depth(tree)\n    # print(depth)\n    print(\"Hello World\")\n"
    }
  ],
  "created": 1650069384,
  "object": "edit"
}
2022-04-16 00:36:29.910253 fix syntax errors 3 ['\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == \'__main__\':\n    xml = ""\n    for i in range(int(input())):\n        xml =  xml + input() + "\\n"\n\n    tree = xml.strip().split()\n    depth = depth(tree)\n    print(depth)\n', '\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == \'__main__\':\n    # xml = ""\n    # for i in range(int(input())):\n    #     xml =  xml + input() + "\\n"\n    # tree = xml.strip()\n    # depth = depth(tree)\n    # print(depth)\n', '\n\n# def depth(tree):\n#     if tree is None:\n#         return -1\n#     else:\n#         return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == \'__main__\':\n    # xml = ""\n    # for i in range(int(input())):\n    #     xml =  xml + input() + "\\n"\n    # tree = xml.strip()\n    # depth = depth(tree)\n    # print(depth)\n    print("Hello World")\n']
2022-04-16 00:36:29.910282 size on output set 3
