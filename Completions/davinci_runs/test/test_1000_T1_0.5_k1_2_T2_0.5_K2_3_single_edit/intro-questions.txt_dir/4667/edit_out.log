2022-04-16 00:37:44.656325 num operations 1
2022-04-16 00:37:44.656343 size on input set 1
2022-04-16 00:37:47.293609 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node]) \n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node.iter()])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n"
    }
  ],
  "created": 1650069464,
  "object": "edit"
}
2022-04-16 00:37:47.293838 fix syntax errors 3 ["\nimport sys\n\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node]) \n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node.iter()])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n"]
2022-04-16 00:37:47.293903 size on output set 3
2022-04-16 00:37:47.293914 num operations 1
2022-04-16 00:37:47.293919 size on input set 1
2022-04-16 00:37:55.992069 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    count = 0\n    for child in node.getchildren():\n        count += len(child.attrib)\n        count += get_attr_number(child)\n    return count\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print get_attr_number(root)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    if (level == maxdepth):\n        maxdepth += 1\n    \n    for child in elem:\n        depth(child, level + 1)\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print get_attr_number(root)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport xml.etree.ElementTree as ET\n\ndef get_attr_number(node):\n    # your code goes here\n    count = 0\n    for child in node.getchildren():\n        count += len(child.attrib)\n        count += get_attr_number(child)\n    return count\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = ET.ElementTree(ET.fromstring(xml))\n    root = tree.getroot()\n    print get_attr_number(root)\n"
    }
  ],
  "created": 1650069467,
  "object": "edit"
}
2022-04-16 00:37:55.992278 fix syntax errors 3 ["\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    count = 0\n    for child in node.getchildren():\n        count += len(child.attrib)\n        count += get_attr_number(child)\n    return count\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print get_attr_number(root)\n", "\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    if (level == maxdepth):\n        maxdepth += 1\n    \n    for child in elem:\n        depth(child, level + 1)\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print get_attr_number(root)\n", "\n\nimport sys\nimport xml.etree.ElementTree as ET\n\ndef get_attr_number(node):\n    # your code goes here\n    count = 0\n    for child in node.getchildren():\n        count += len(child.attrib)\n        count += get_attr_number(child)\n    return count\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = ET.ElementTree(ET.fromstring(xml))\n    root = tree.getroot()\n    print get_attr_number(root)\n"]
2022-04-16 00:37:55.992311 size on output set 3
