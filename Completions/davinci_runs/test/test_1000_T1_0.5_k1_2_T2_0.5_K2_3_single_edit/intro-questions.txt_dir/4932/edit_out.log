2022-04-16 02:49:48.584327 num operations 1
2022-04-16 02:49:48.584344 size on input set 1
2022-04-16 02:49:54.275323 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    print(\"hello world\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()] #split the string by spaces\n    p, m, g = [int(x) for x in sys.stdin.readline().split()] #split the string by spaces\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a: #if the time is in the first half of the period\n            dogs += 1\n        if (time - 1) % (c + d) < c: #if the time is in the first half of the period\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077388,
  "object": "edit"
}
2022-04-16 02:49:54.275553 fix syntax errors 3 ['\n#\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    print("hello world")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()] #split the string by spaces\n    p, m, g = [int(x) for x in sys.stdin.readline().split()] #split the string by spaces\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a: #if the time is in the first half of the period\n            dogs += 1\n        if (time - 1) % (c + d) < c: #if the time is in the first half of the period\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 02:49:54.275586 size on output set 3
2022-04-16 02:49:54.275596 num operations 1
2022-04-16 02:49:54.275601 size on input set 1
2022-04-16 02:50:26.647790 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    pass\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]  # noqa\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print(\"both\")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print(\"both\")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print(\"both\")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()] # read in the values\n    p, m, g = [int(n) for n in sys.stdin.readline().split()] # read in the values\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2: # check if the first value is divisible by both\n        print(\"both\")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2: # check if the first value is divisible by one\n        print(\"one\")\n    else: # if the first value is not divisible by either\n        print(\"none\")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2: # check if the second value is divisible by both\n        print(\"both\")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2: # check if the second value is divisible by one\n        print(\"one\")\n    else: # if the second value is not divisible by either\n        print(\"none\")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2: # check if the third value is divisible by both\n        print(\"both\")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2: # check if the third value is divisible by one\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1650077394,
  "object": "edit"
}
2022-04-16 02:50:26.648046 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    pass\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]  # noqa\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print("both")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print("both")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print("both")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:  # noqa\n        print("one")\n    else:\n        print("none")\n\nmain()\n', '\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()] # read in the values\n    p, m, g = [int(n) for n in sys.stdin.readline().split()] # read in the values\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2: # check if the first value is divisible by both\n        print("both")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2: # check if the first value is divisible by one\n        print("one")\n    else: # if the first value is not divisible by either\n        print("none")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2: # check if the second value is divisible by both\n        print("both")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2: # check if the second value is divisible by one\n        print("one")\n    else: # if the second value is not divisible by either\n        print("none")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2: # check if the third value is divisible by both\n        print("both")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2: # check if the third value is divisible by one\n        print("one")\n    else:\n        print("none")\n\nmain()\n']
2022-04-16 02:50:26.648094 size on output set 3
2022-04-16 02:50:26.648105 num operations 1
2022-04-16 02:50:26.648116 size on input set 1
2022-04-16 02:50:36.426973 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D: A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A: print('both')\n    elif a > A: print('one')\n    if b <= A: print('both')\n    elif b > A: print('one')\n    if c <= A: print('both')\n    elif c > A: print('one')\n    \nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    print('both' if a <= A else 'one')\n    print('both' if b <= A else 'one')\n    print('both' if c <= A else 'one')\n    \nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        A, B, C, D = map(int, sys.stdin.readline().split())\n        P, M, G = map(int, sys.stdin.readline().split())\n        if A + B > C + D:\n            A, B, C, D = C, D, A, B\n        a = P % (A + B)\n        b = M % (A + B)\n        c = G % (A + B)\n        if a <= A:\n            print('both')\n        elif a > A:\n            print('one')\n        if b <= A:\n            print('both')\n        elif b > A:\n            print('one')\n        if c <= A:\n            print('both')\n        elif c > A:\n            print('one')\n    \nmain()\n"
    }
  ],
  "created": 1650077426,
  "object": "edit"
}
2022-04-16 02:50:36.427156 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D: A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A: print('both')\n    elif a > A: print('one')\n    if b <= A: print('both')\n    elif b > A: print('one')\n    if c <= A: print('both')\n    elif c > A: print('one')\n    \nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    print('both' if a <= A else 'one')\n    print('both' if b <= A else 'one')\n    print('both' if c <= A else 'one')\n    \nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        A, B, C, D = map(int, sys.stdin.readline().split())\n        P, M, G = map(int, sys.stdin.readline().split())\n        if A + B > C + D:\n            A, B, C, D = C, D, A, B\n        a = P % (A + B)\n        b = M % (A + B)\n        c = G % (A + B)\n        if a <= A:\n            print('both')\n        elif a > A:\n            print('one')\n        if b <= A:\n            print('both')\n        elif b > A:\n            print('one')\n        if c <= A:\n            print('both')\n        elif c > A:\n            print('one')\n    \nmain()\n"]
2022-04-16 02:50:36.427191 size on output set 3
2022-04-16 02:50:36.427202 num operations 1
2022-04-16 02:50:36.427207 size on input set 1
2022-04-16 02:50:53.820935 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (\n            p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (\n            p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (\n            m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (\n            m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (\n            g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (\n            g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n            and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n            or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n            and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n            or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n            and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n            or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()] \n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650077436,
  "object": "edit"
}
2022-04-16 02:50:53.821219 fix syntax errors 3 ['\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (\n            p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (\n            p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (\n            m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (\n            m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (\n            g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (\n            g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n            and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n            or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n            and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n            or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n            and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n            or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()] \n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:50:53.821292 size on output set 3
2022-04-16 02:50:53.821302 num operations 1
2022-04-16 02:50:53.821307 size on input set 1
2022-04-16 02:51:01.091364 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A*3\n    aggressiveC = C*3\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nA, B, C, D = map(int, sys.stdin.readline().split())\nP, M, G = map(int, sys.stdin.readline().split())\naggressiveA = A\naggressiveC = C\nfor i in [P, M, G]:\n    if i <= aggressiveA:\n        print(\"both\")\n    elif i <= aggressiveA + B:\n        print(\"one\")\n    elif i <= aggressiveA + B + aggressiveC:\n        print(\"both\")\n    elif i <= aggressiveA + B + aggressiveC + D:\n        print(\"one\")\n    else:\n        print(\"none\")\n"
    }
  ],
  "created": 1650077453,
  "object": "edit"
}
2022-04-16 02:51:01.091634 fix syntax errors 3 ['import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A*3\n    aggressiveC = C*3\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\nimport sys\nA, B, C, D = map(int, sys.stdin.readline().split())\nP, M, G = map(int, sys.stdin.readline().split())\naggressiveA = A\naggressiveC = C\nfor i in [P, M, G]:\n    if i <= aggressiveA:\n        print("both")\n    elif i <= aggressiveA + B:\n        print("one")\n    elif i <= aggressiveA + B + aggressiveC:\n        print("both")\n    elif i <= aggressiveA + B + aggressiveC + D:\n        print("one")\n    else:\n        print("none")\n']
2022-04-16 02:51:01.091668 size on output set 3
2022-04-16 02:51:01.091678 num operations 1
2022-04-16 02:51:01.091683 size on input set 1
2022-04-16 02:51:03.556445 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 1,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 2,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    }
  ],
  "created": 1650077461,
  "object": "edit"
}
2022-04-16 02:51:03.556631 fix syntax errors 3 ['\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n']
2022-04-16 02:51:03.556674 size on output set 2
2022-04-16 02:51:03.556684 num operations 1
2022-04-16 02:51:03.556689 size on input set 1
2022-04-16 02:51:14.060551 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    if p > a:\n        if (p - a) % (b + a) < a:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if m > a:\n        if (m - a) % (b + a) < a:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if g > a:\n        if (g - a) % (b + a) < a:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if p > c:\n        if (p - c) % (c + d) < c:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if m > c:\n        if (m - c) % (c + d) < c:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if g > c:\n        if (g - c) % (c + d) < c:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a and (i - a) % (b + a) < a:\n            print('both')\n        elif i > a:\n            print('one')\n        else:\n            print('both')\n\n        if i > c and (i - c) % (c + d) < c:\n            print('both')\n        elif i > c:\n            print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    if p > a:\n        if (p - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > a:\n        if (m - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > a:\n        if (g - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if p > c:\n        if (p - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > c:\n        if (m - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > c:\n        if (g - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077463,
  "object": "edit"
}
2022-04-16 02:51:14.060804 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    if p > a:\n        if (p - a) % (b + a) < a:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if m > a:\n        if (m - a) % (b + a) < a:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if g > a:\n        if (g - a) % (b + a) < a:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if p > c:\n        if (p - c) % (c + d) < c:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if m > c:\n        if (m - c) % (c + d) < c:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n    if g > c:\n        if (g - c) % (c + d) < c:\n            print('both')\n        else: print('one')\n    else: print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a and (i - a) % (b + a) < a:\n            print('both')\n        elif i > a:\n            print('one')\n        else:\n            print('both')\n\n        if i > c and (i - c) % (c + d) < c:\n            print('both')\n        elif i > c:\n            print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    if p > a:\n        if (p - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > a:\n        if (m - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > a:\n        if (g - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if p > c:\n        if (p - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > c:\n        if (m - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > c:\n        if (g - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:51:14.060851 size on output set 3
2022-04-16 02:51:14.060863 num operations 1
2022-04-16 02:51:14.060869 size on input set 1
2022-04-16 02:51:23.566770 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm, status):\n        if status == 'aggressive':\n            if time < aggressive:\n                return 'aggressive'\n            else:\n                return get_dog_status(time - aggressive, aggressive, calm, 'calm')\n        else:\n            if time < calm:\n                return 'calm'\n            else:\n                return get_dog_status(time - calm, aggressive, calm, 'aggressive')\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B, 'aggressive') == 'aggressive' and get_dog_status(time, C, D, 'aggressive') == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B, 'aggressive') == 'aggressive' or get_dog_status(time, C, D, 'aggressive') == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive_time, calm_time):\n        while True:\n            if time < aggressive_time:\n                return 'aggressive'\n            time -= aggressive_time\n            if time < calm_time:\n                return 'calm'\n            time -= calm_time\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' \\\n                and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' \\\n                or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm, dog_name):\n        if time == 0:\n            return f'{dog_name} is aggressive'\n        time -= 1\n        if time < aggressive:\n            return f'{dog_name} is aggressive'\n        time -= aggressive\n        if time < calm:\n            return f'{dog_name} is calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm, dog_name)\n\n    def get_dog_attack(time):\n        if 'aggressive' in get_dog_status(time, A, B, 'Small') and 'aggressive' in get_dog_status(time, C, D, 'Big'):\n            return 'both dogs are aggressive'\n        elif 'aggressive' in get_dog_status(time, A, B, 'Small') or 'aggressive' in get_dog_status(time, C, D, 'Big'):\n            return 'one dog is aggressive'\n        else:\n            return 'none of the dogs are aggressive'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077474,
  "object": "edit"
}
2022-04-16 02:51:23.567074 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm, status):\n        if status == 'aggressive':\n            if time < aggressive:\n                return 'aggressive'\n            else:\n                return get_dog_status(time - aggressive, aggressive, calm, 'calm')\n        else:\n            if time < calm:\n                return 'calm'\n            else:\n                return get_dog_status(time - calm, aggressive, calm, 'aggressive')\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B, 'aggressive') == 'aggressive' and get_dog_status(time, C, D, 'aggressive') == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B, 'aggressive') == 'aggressive' or get_dog_status(time, C, D, 'aggressive') == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive_time, calm_time):\n        while True:\n            if time < aggressive_time:\n                return 'aggressive'\n            time -= aggressive_time\n            if time < calm_time:\n                return 'calm'\n            time -= calm_time\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' \\\n                and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' \\\n                or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm, dog_name):\n        if time == 0:\n            return f'{dog_name} is aggressive'\n        time -= 1\n        if time < aggressive:\n            return f'{dog_name} is aggressive'\n        time -= aggressive\n        if time < calm:\n            return f'{dog_name} is calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm, dog_name)\n\n    def get_dog_attack(time):\n        if 'aggressive' in get_dog_status(time, A, B, 'Small') and 'aggressive' in get_dog_status(time, C, D, 'Big'):\n            return 'both dogs are aggressive'\n        elif 'aggressive' in get_dog_status(time, A, B, 'Small') or 'aggressive' in get_dog_status(time, C, D, 'Big'):\n            return 'one dog is aggressive'\n        else:\n            return 'none of the dogs are aggressive'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:51:23.567125 size on output set 3
