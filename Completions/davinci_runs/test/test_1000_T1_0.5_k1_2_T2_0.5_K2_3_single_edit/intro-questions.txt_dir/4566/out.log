2022-04-09 20:53:47.232608 """
There are N cities and M roads.
The i-th road (1≤i≤M) connects two cities a_i and b_i (1≤a_i,b_i≤N) bidirectionally.
There may be more than one road that connects the same pair of two cities.
For each city, how many roads are connected to the city?

-----Constraints-----
 - 2≤N,M≤50
 - 1≤a_i,b_i≤N
 - a_i ≠ b_i
 - All input values are integers.

-----Input-----
Input is given from Standard Input in the following format:  
N M
a_1 b_1
:  
a_M b_M

-----Output-----
Print the answer in N lines.
In the i-th line (1≤i≤N), print the number of roads connected to city i.

-----Sample Input-----
4 3
1 2
2 3
1 4

-----Sample Output-----
2
2
1
1

 - City 1 is connected to the 1-st and 3-rd roads.
 - City 2 is connected to the 1-st and 2-nd roads.
 - City 3 is connected to the 2-nd road.
 - City 4 is connected to the 3-rd road.
"""
2022-04-09 20:53:47.232637 --------------------------
2022-04-09 20:54:01.206153 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\n\n# \u5165\u529b\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)"
    }
  ],
  "created": 1649552027,
  "id": "cmpl-4vG7nO2mdnh6LvKYWUB8WEj4vl3NZ",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:54:01.206542 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])"
}
2022-04-09 20:54:01.206601 REASON stop
2022-04-09 20:54:01.219299 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\n\n# \u5165\u529b\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)"
}
2022-04-09 20:54:01.219399 REASON stop
