["\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n", "\n\n# SOLUTION 1\n# First we find the number of contiguous groups of 1's in the string. We do this\n# by creating a list of the indices of where the 1's occur. Then we create a new\n# list that contains the difference between each element of the first list, and\n# the next. The number of contiguous groups of 1's is then the number of elements\n# in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n\n\n# SOLUTION 2\n# We can improve the time complexity of the above solution to O(n) by\n# iterating over the string once, and keeping track of the number of 1's, the\n# number of contiguous groups of 1's, and the number of 1's in the current\n# contiguous group. \n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(1)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n", "\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i + 1] - indices[i] for i in range(len(indices) - 1)]\n    num_contiguous_groups = len([x for x in differences if x > k]) + 1\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"]