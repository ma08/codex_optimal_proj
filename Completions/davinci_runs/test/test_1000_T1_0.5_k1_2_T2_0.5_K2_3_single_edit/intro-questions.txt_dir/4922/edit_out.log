2022-04-16 02:45:36.972624 num operations 1
2022-04-16 02:45:36.972642 size on input set 1
2022-04-16 02:45:39.155385 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    m = int(input())\n    if m < 8 or m > 10:\n        print(\"unsatisfactory\")\n    else:\n        print(\"satisfactory\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    m, n = map(int, input().split())\n    if m < n:\n        print(\"unsatisfactory\")\n    else:\n        print(\"satisfactory\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    m, n = map(int, input().split())\n    if m < 8:\n        print(\"unsatisfactory\")\n    else:\n        print(\"satisfactory\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650077137,
  "object": "edit"
}
2022-04-16 02:45:39.155615 fix syntax errors 3 ['\n\ndef main():\n    m = int(input())\n    if m < 8 or m > 10:\n        print("unsatisfactory")\n    else:\n        print("satisfactory")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    m, n = map(int, input().split())\n    if m < n:\n        print("unsatisfactory")\n    else:\n        print("satisfactory")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    m, n = map(int, input().split())\n    if m < 8:\n        print("unsatisfactory")\n    else:\n        print("satisfactory")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:45:39.155638 size on output set 3
2022-04-16 02:45:39.155648 num operations 1
2022-04-16 02:45:39.155652 size on input set 1
2022-04-16 02:45:41.440965 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    f = open(sys.argv[1],'r')\n    for line in f:\n        print line\n    f.close()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    print(\"This is a sample python file\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    print('Hello')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077139,
  "object": "edit"
}
2022-04-16 02:45:41.441138 fix syntax errors 3 ["import sys\n\ndef main():\n    f = open(sys.argv[1],'r')\n    for line in f:\n        print line\n    f.close()\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    print("This is a sample python file")\n\nif __name__ == \'__main__\':\n    main()\n', "\n\ndef main():\n    print('Hello')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:45:41.441159 size on output set 3
2022-04-16 02:45:41.441168 num operations 1
2022-04-16 02:45:41.441173 size on input set 1
2022-04-16 02:45:43.681913 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    if m < 8:\n        print(\"unsatisfactory\")\n    else:\n        print(\"satisfactory\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    if m < 8:\n        print(\"unsatisfactory\")\n    else:\n        print(\"satisfactory\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    m,n = map(int, sys.stdin.readline().split())\n    if m < 8:\n        print(\"unsatisfactory\")\n    else:\n        print(\"satisfactory\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650077141,
  "object": "edit"
}
2022-04-16 02:45:43.682109 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    if m < 8:\n        print("unsatisfactory")\n    else:\n        print("satisfactory")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    if m < 8:\n        print("unsatisfactory")\n    else:\n        print("satisfactory")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m,n = map(int, sys.stdin.readline().split())\n    if m < 8:\n        print("unsatisfactory")\n    else:\n        print("satisfactory")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:45:43.682132 size on output set 3
2022-04-16 02:45:43.682142 num operations 1
2022-04-16 02:45:43.682147 size on input set 1
2022-04-16 02:45:45.369713 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main(filepath):\n    with open(filepath, 'r') as f:\n        m, n = [int(i) for i in f.readline().strip().split()]\n        if m < 8:\n            print('unsatisfactory')\n        else:\n            print('satisfactory')\nif __name__ == '__main__':\n    main(sys.argv[1])\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main(filepath):\n    with open(filepath, 'r') as f:\n        m, n = [int(i) for i in f.readline().strip().split()]\n\n        if m < 8:\n            print('unsatisfactory')\n        else:\n            print('satisfactory')\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main(filepath):\n    with open(filepath, 'r') as f:\n        m, n = [int(i) for i in f.readline().strip().split()]\n\n        if m < 8:\n            print('unsatisfactory')\n        else:\n            print('satisfactory')\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n"
    }
  ],
  "created": 1650077143,
  "object": "edit"
}
2022-04-16 02:45:45.369907 fix syntax errors 3 ["\n\nimport sys\n\ndef main(filepath):\n    with open(filepath, 'r') as f:\n        m, n = [int(i) for i in f.readline().strip().split()]\n        if m < 8:\n            print('unsatisfactory')\n        else:\n            print('satisfactory')\nif __name__ == '__main__':\n    main(sys.argv[1])\n", "\nimport sys\n\ndef main(filepath):\n    with open(filepath, 'r') as f:\n        m, n = [int(i) for i in f.readline().strip().split()]\n\n        if m < 8:\n            print('unsatisfactory')\n        else:\n            print('satisfactory')\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n", "\n\nimport sys\n\ndef main(filepath):\n    with open(filepath, 'r') as f:\n        m, n = [int(i) for i in f.readline().strip().split()]\n\n        if m < 8:\n            print('unsatisfactory')\n        else:\n            print('satisfactory')\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n"]
2022-04-16 02:45:45.369934 size on output set 3
2022-04-16 02:45:45.369954 num operations 1
2022-04-16 02:45:45.369959 size on input set 1
2022-04-16 02:45:54.811656 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\"\"\"\nThe problem is to determine if a 3-SAT instance with m clauses and n variables is satisfiable.\n\nThe input is the number of clauses m, the number of variables n, and the m clauses. Each clause consists of 3 distinct space-separated integers in the range [\u2212n, n] {0}. For each clause, the three values correspond to the three literals in the clause. If the literal is negative, that means that the clause is satisfied if the corresponding variable is set to False, and if it is positive the clause is satisfied if the variable is set to True.\n\nA 3-SAT instance with m clauses and n variables is satisfiable if there is a way to assign values to the n variables such that all m clauses are satisfied.\n\nAn example of a 3-SAT instance is shown below (from sample input 1):\n\n(\u00acx1 \u2228x2 \u2228x3 )\u2227(\u00acx1 \u2228\u00acx2 \u2228x3 )\u2227(x1 \u2228\u00acx2 \u2228x3 )\u2227(x1 \u2228\u00acx2 \u2228\u00acx3 )\u2227(x1 \u2228x2 \u2228\u00acx3 )\n\nThe output is \u201csatisfactory\u201d if the 3-SAT instance is satisfiable, and \u201cunsatisfactory\u201d otherwise.\n\nThe judge \u00d8yvind hates 3-SAT instances with less than eight clauses \u2013 as these are always satisfiable they provide no real challenge for the contestants. Therefore, he will deem such problem instances to be unsatisfactory. Whenever \u00d8yvind encounters an instance with eight or more clauses he knows that it is a real challenge to figure out whether this instance is satisfiable or not \u2013 and therefore he will judge these problem instances to be satisfactory.\n\nGiven an instance of 3-SAT, can you help find \u00d8yvind\u2019s judgement?\n\"\"\"\n\n#n = number of variables\n#m = number of clauses\n\n#get input\nm, n = map(int, input().split())\nclauses = []\nfor i in range(m):\n    clauses.append(list(map(int, input().split())))\n\n#check if it is unsatisfactory\nif m < 8:\n    print(\"unsatisfactory\")\nelse:\n    print(\"satisfactory\")\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\nThe problem is to determine if a 3-SAT instance with m clauses and n variables is satisfiable.\n\nThe input is the number of clauses m, the number of variables n, and the m clauses. Each clause consists of 3 distinct space-separated integers in the range [\u2212n, n] \\ {0}. For each clause, the three values correspond to the three literals in the clause. If the literal is negative, that means that the clause is satisfied if the corresponding variable is set to False, and if it is positive the clause is satisfied if the variable is set to True\n\nA 3-SAT instance with m clauses and n variables is satisfiable if there is a way to assign values to the n variables such that all m clauses are satisfied.\n\nAn example of a 3-SAT instance is shown below (from sample input 1):\n\n(\u00acx\n1\n\u2228x\n2\n\u2228x\n3\n)\u2227(\u00acx\n1\n\u2228\u00acx\n2\n\u2228x\n3\n)\u2227(x\n1\n\u2228\u00acx\n2\n\u2228x\n3\n)\u2227(x\n1\n\u2228\u00acx\n2\n\u2228\u00acx\n3\n)\u2227(x\n1\n\u2228x\n2\n\u2228\u00acx\n3\n)\n\nThe output is \u201csatisfactory\u201d if the 3-SAT instance is satisfiable, and \u201cunsatisfactory\u201d otherwise.\n\nThe judge \u00d8yvind hates 3-SAT instances with less than eight clauses \u2013 as these are always satisfiable they provide no real challenge for the contestants. Therefore, he will deem such problem instances to be unsatisfactory. Whenever \u00d8yvind encounters an instance with eight or more clauses he knows that it is a real challenge to figure out whether this instance is satisfiable or not \u2013 and therefore he will judge these problem instances to be satisfactory.\n\nGiven an instance of 3-SAT, can you help find \u00d8yvind\u2019s judgement?\n\"\"\"\n\n#n = number of variables\n#m = number of clauses\n\n#get input\nm, n = map(int, input().split())\nclauses = []\nfor i in range(m):\n    clauses.append(list(map(int, input().split())))\n\n#check if it is unsatisfactory\nif m < 8:\n    print(\"unsatisfactory\")\nelse:\n    print(\"satisfactory\")\n"
    },
    {
      "index": 2,
      "text": "\n\n\"\"\"\nThe problem is to determine if a 3-SAT instance with m clauses and n variables is satisfiable.\n\nThe input is the number of clauses m, the number of variables n, and the m clauses. Each clause consists of 3 distinct space-separated integers in the range [\u2212n, n] \\ {0}. For each clause, the three values correspond to the three literals in the clause. If the literal is negative, that means that the clause is satisfied if the corresponding variable is set to False, and if it is positive the clause is satisfied if the variable is set to True.\n\nA 3-SAT instance with m clauses and n variables is satisfiable if there is a way to assign values to the n variables such that all m clauses are satisfied.\n\nAn example of a 3-SAT instance is shown below (from sample input 1):\n\n# (\u00acx\n# 1\n# \u2228x\n# 2\n# \u2228x\n# 3\n# )\u2227(\u00acx\n# 1\n# \u2228\u00acx\n# 2\n# \u2228x\n# 3\n# )\u2227(x\n# 1\n# \u2228\u00acx\n# 2\n# \u2228x\n# 3\n# )\u2227(x\n# 1\n# \u2228\u00acx\n# 2\n# \u2228\u00acx\n# 3\n# )\u2227(x\n# 1\n# \u2228x\n# 2\n# \u2228\u00acx\n# 3\n# )\n\nThe output is \u201csatisfactory\u201d if the 3-SAT instance is satisfiable, and \u201cunsatisfactory\u201d otherwise.\n\nThe judge \u00d8yvind hates 3-SAT instances with less than eight clauses \u2013 as these are always satisfiable they provide no real challenge for the contestants. Therefore, he will deem such problem instances to be unsatisfactory. Whenever \u00d8yvind encounters an instance with eight or more clauses he knows that it is a real challenge to figure out whether this instance is satisfiable or not \u2013 and therefore he will judge these problem instances to be satisfactory.\n\nGiven an instance of 3-SAT, can you help find \u00d8yvind\u2019s judgement?\n\"\"\"\n\n#n = number of variables\n#m = number of clauses\n\n#get input\nm, n = map(int, input().split())\nclauses = []\nfor i in range(m):\n    clauses.append(list(map(int, input().split())))\n\n#check if it is unsatisfactory\nif m < 8:\n    print(\"unsatisfactory\")\nelse:\n    print(\"satisfactory\")\n"
    }
  ],
  "created": 1650077145,
  "object": "edit"
}
2022-04-16 02:45:54.812053 fix syntax errors 3 ['\n\n"""\nThe problem is to determine if a 3-SAT instance with m clauses and n variables is satisfiable.\n\nThe input is the number of clauses m, the number of variables n, and the m clauses. Each clause consists of 3 distinct space-separated integers in the range [−n, n] {0}. For each clause, the three values correspond to the three literals in the clause. If the literal is negative, that means that the clause is satisfied if the corresponding variable is set to False, and if it is positive the clause is satisfied if the variable is set to True.\n\nA 3-SAT instance with m clauses and n variables is satisfiable if there is a way to assign values to the n variables such that all m clauses are satisfied.\n\nAn example of a 3-SAT instance is shown below (from sample input 1):\n\n(¬x1 ∨x2 ∨x3 )∧(¬x1 ∨¬x2 ∨x3 )∧(x1 ∨¬x2 ∨x3 )∧(x1 ∨¬x2 ∨¬x3 )∧(x1 ∨x2 ∨¬x3 )\n\nThe output is “satisfactory” if the 3-SAT instance is satisfiable, and “unsatisfactory” otherwise.\n\nThe judge Øyvind hates 3-SAT instances with less than eight clauses – as these are always satisfiable they provide no real challenge for the contestants. Therefore, he will deem such problem instances to be unsatisfactory. Whenever Øyvind encounters an instance with eight or more clauses he knows that it is a real challenge to figure out whether this instance is satisfiable or not – and therefore he will judge these problem instances to be satisfactory.\n\nGiven an instance of 3-SAT, can you help find Øyvind’s judgement?\n"""\n\n#n = number of variables\n#m = number of clauses\n\n#get input\nm, n = map(int, input().split())\nclauses = []\nfor i in range(m):\n    clauses.append(list(map(int, input().split())))\n\n#check if it is unsatisfactory\nif m < 8:\n    print("unsatisfactory")\nelse:\n    print("satisfactory")\n', '\n\n"""\nThe problem is to determine if a 3-SAT instance with m clauses and n variables is satisfiable.\n\nThe input is the number of clauses m, the number of variables n, and the m clauses. Each clause consists of 3 distinct space-separated integers in the range [−n, n] \\ {0}. For each clause, the three values correspond to the three literals in the clause. If the literal is negative, that means that the clause is satisfied if the corresponding variable is set to False, and if it is positive the clause is satisfied if the variable is set to True\n\nA 3-SAT instance with m clauses and n variables is satisfiable if there is a way to assign values to the n variables such that all m clauses are satisfied.\n\nAn example of a 3-SAT instance is shown below (from sample input 1):\n\n(¬x\n1\n∨x\n2\n∨x\n3\n)∧(¬x\n1\n∨¬x\n2\n∨x\n3\n)∧(x\n1\n∨¬x\n2\n∨x\n3\n)∧(x\n1\n∨¬x\n2\n∨¬x\n3\n)∧(x\n1\n∨x\n2\n∨¬x\n3\n)\n\nThe output is “satisfactory” if the 3-SAT instance is satisfiable, and “unsatisfactory” otherwise.\n\nThe judge Øyvind hates 3-SAT instances with less than eight clauses – as these are always satisfiable they provide no real challenge for the contestants. Therefore, he will deem such problem instances to be unsatisfactory. Whenever Øyvind encounters an instance with eight or more clauses he knows that it is a real challenge to figure out whether this instance is satisfiable or not – and therefore he will judge these problem instances to be satisfactory.\n\nGiven an instance of 3-SAT, can you help find Øyvind’s judgement?\n"""\n\n#n = number of variables\n#m = number of clauses\n\n#get input\nm, n = map(int, input().split())\nclauses = []\nfor i in range(m):\n    clauses.append(list(map(int, input().split())))\n\n#check if it is unsatisfactory\nif m < 8:\n    print("unsatisfactory")\nelse:\n    print("satisfactory")\n', '\n\n"""\nThe problem is to determine if a 3-SAT instance with m clauses and n variables is satisfiable.\n\nThe input is the number of clauses m, the number of variables n, and the m clauses. Each clause consists of 3 distinct space-separated integers in the range [−n, n] \\ {0}. For each clause, the three values correspond to the three literals in the clause. If the literal is negative, that means that the clause is satisfied if the corresponding variable is set to False, and if it is positive the clause is satisfied if the variable is set to True.\n\nA 3-SAT instance with m clauses and n variables is satisfiable if there is a way to assign values to the n variables such that all m clauses are satisfied.\n\nAn example of a 3-SAT instance is shown below (from sample input 1):\n\n# (¬x\n# 1\n# ∨x\n# 2\n# ∨x\n# 3\n# )∧(¬x\n# 1\n# ∨¬x\n# 2\n# ∨x\n# 3\n# )∧(x\n# 1\n# ∨¬x\n# 2\n# ∨x\n# 3\n# )∧(x\n# 1\n# ∨¬x\n# 2\n# ∨¬x\n# 3\n# )∧(x\n# 1\n# ∨x\n# 2\n# ∨¬x\n# 3\n# )\n\nThe output is “satisfactory” if the 3-SAT instance is satisfiable, and “unsatisfactory” otherwise.\n\nThe judge Øyvind hates 3-SAT instances with less than eight clauses – as these are always satisfiable they provide no real challenge for the contestants. Therefore, he will deem such problem instances to be unsatisfactory. Whenever Øyvind encounters an instance with eight or more clauses he knows that it is a real challenge to figure out whether this instance is satisfiable or not – and therefore he will judge these problem instances to be satisfactory.\n\nGiven an instance of 3-SAT, can you help find Øyvind’s judgement?\n"""\n\n#n = number of variables\n#m = number of clauses\n\n#get input\nm, n = map(int, input().split())\nclauses = []\nfor i in range(m):\n    clauses.append(list(map(int, input().split())))\n\n#check if it is unsatisfactory\nif m < 8:\n    print("unsatisfactory")\nelse:\n    print("satisfactory")\n']
2022-04-16 02:45:54.812151 size on output set 3
2022-04-16 02:45:54.812161 num operations 1
2022-04-16 02:45:54.812166 size on input set 1
2022-04-16 02:45:59.267657 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# m = number of clauses\n# n = number of variables\nm, n = [int(x) for x in input().split()]\n\n# if m < 8, it is unsatisfiable\nif m < 8:\n    print(\"unsatisfiable\")\nelse:\n    print(\"satisfiable\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# n = number of clauses\n# m = number of variables\n\nn, m = [int(x) for x in input().split()]\n\n# if m < 9, it is unsatisfactory\nif m < 9:\n    print(\"UNSATISFIABLE\")\n\n\n# if m >= 9, it is satisfactory\nif m >= 9:\n    print(\"SATISFIABLE\")\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# number of clauses\nm = int(sys.stdin.readline())\n\n# number of variables\nn = int(sys.stdin.readline())\n\n# clause\nclause = sys.stdin.readline()\n\n# if m < 8, it is unsatisfactory\nif m < 8:\n    print(\"unsatisfactory\")\nelse:\n    print(\"satisfactory\")\n"
    }
  ],
  "created": 1650077154,
  "object": "edit"
}
2022-04-16 02:45:59.267840 fix syntax errors 3 ['\n\n# m = number of clauses\n# n = number of variables\nm, n = [int(x) for x in input().split()]\n\n# if m < 8, it is unsatisfiable\nif m < 8:\n    print("unsatisfiable")\nelse:\n    print("satisfiable")\n', '\n\n# n = number of clauses\n# m = number of variables\n\nn, m = [int(x) for x in input().split()]\n\n# if m < 9, it is unsatisfactory\nif m < 9:\n    print("UNSATISFIABLE")\n\n\n# if m >= 9, it is satisfactory\nif m >= 9:\n    print("SATISFIABLE")\n', '\n\nimport sys\n\n# number of clauses\nm = int(sys.stdin.readline())\n\n# number of variables\nn = int(sys.stdin.readline())\n\n# clause\nclause = sys.stdin.readline()\n\n# if m < 8, it is unsatisfactory\nif m < 8:\n    print("unsatisfactory")\nelse:\n    print("satisfactory")\n']
2022-04-16 02:45:59.267968 size on output set 3
2022-04-16 02:45:59.267995 num operations 1
2022-04-16 02:45:59.268002 size on input set 1
2022-04-16 02:46:07.942245 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nm, n = map(int, input().split()) \nclauses = [list(map(int, input().split())) for _ in range(m)]\n \ndef satisfiable(clauses, n):\n    for clause in clauses:\n        if clause[0] < 0:\n            if clause[1] < 0:\n                if clause[2] < 0:\n                    return False\n            else:\n                if clause[2] > 0:\n                    return False\n        else:\n            if clause[1] > 0:\n                if clause[2] > 0:\n                    return False\n    return True\n \nif m < 8 and satisfiable(clauses, n):\n    print(\"unsatisfactory\")\nelse:\n    print(\"satisfactory\")\n"
    },
    {
      "index": 1,
      "text": "\n\nm, n = map(int, input().split())\nclauses = [list(map(int, input().split())) for _ in range(m)]\n\ndef satisfiable(clauses, n):\n    for clause in clauses:\n        if clause[0] < 0:\n            if clause[1] < 0:\n                if clause[2] < 0:\n                    return False\n            else:\n                if clause[2] > 0:\n                    return False\n        else:\n            if clause[1] > 0:\n                if clause[2] > 0:\n                    return False\n    return True\n\nif m < 8:\n    print(\"yes\")\nelse:\n    print(\"no\")\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\n\ndef main():\n    m, n = map(int, input().split())\n    clauses = [list(map(int, input().split())) for _ in range(m)]\n\n    def satisfiable(clauses, n):\n        for clause in clauses:\n            if clause[0] < 0:\n                if clause[1] < 0:\n                    if clause[2] < 0:\n                        return False\n                else:\n                    if clause[2] > 0:\n                        return False\n            else:\n                if clause[1] > 0:\n                    if clause[2] > 0:\n                        return False\n        return True\n\n    if m < 8:\n        print(\"unsatisfactory\")\n    else:\n        print(\"satisfactory\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077159,
  "object": "edit"
}
2022-04-16 02:46:07.942507 fix syntax errors 3 ['\nm, n = map(int, input().split()) \nclauses = [list(map(int, input().split())) for _ in range(m)]\n \ndef satisfiable(clauses, n):\n    for clause in clauses:\n        if clause[0] < 0:\n            if clause[1] < 0:\n                if clause[2] < 0:\n                    return False\n            else:\n                if clause[2] > 0:\n                    return False\n        else:\n            if clause[1] > 0:\n                if clause[2] > 0:\n                    return False\n    return True\n \nif m < 8 and satisfiable(clauses, n):\n    print("unsatisfactory")\nelse:\n    print("satisfactory")\n', '\n\nm, n = map(int, input().split())\nclauses = [list(map(int, input().split())) for _ in range(m)]\n\ndef satisfiable(clauses, n):\n    for clause in clauses:\n        if clause[0] < 0:\n            if clause[1] < 0:\n                if clause[2] < 0:\n                    return False\n            else:\n                if clause[2] > 0:\n                    return False\n        else:\n            if clause[1] > 0:\n                if clause[2] > 0:\n                    return False\n    return True\n\nif m < 8:\n    print("yes")\nelse:\n    print("no")\n', '#!/usr/bin/env python3\n\n\ndef main():\n    m, n = map(int, input().split())\n    clauses = [list(map(int, input().split())) for _ in range(m)]\n\n    def satisfiable(clauses, n):\n        for clause in clauses:\n            if clause[0] < 0:\n                if clause[1] < 0:\n                    if clause[2] < 0:\n                        return False\n                else:\n                    if clause[2] > 0:\n                        return False\n            else:\n                if clause[1] > 0:\n                    if clause[2] > 0:\n                        return False\n        return True\n\n    if m < 8:\n        print("unsatisfactory")\n    else:\n        print("satisfactory")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 02:46:07.942546 size on output set 3
2022-04-16 02:46:07.942565 num operations 1
2022-04-16 02:46:07.942570 size on input set 1
2022-04-16 02:46:10.461386 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    m, n = map(int, input().split()) \n    clauses = []\n    for i in range(m):\n        clauses.append(list(map(int, input().split())))\n    if len(clauses) < 8:\n        print(\"unsatisfactory\")\n    else:\n        print(\"satisfactory\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    m, n = map(int, input().split())\n    clauses = []\n    for i in range(m):\n        clauses.append(list(map(int, input().split())))\n    print(\"satisfactory\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    m, n = map(int, input().split())\n    clauses = []\n    for i in range(m):\n        clauses.append(list(map(int, input().split())))\n    if m < 8:\n        print(\"unsatisfactory\")\n    else:\n        print(\"satisfactory\")\n\nmain()\n"
    }
  ],
  "created": 1650077167,
  "object": "edit"
}
2022-04-16 02:46:10.461583 fix syntax errors 3 ['\n\ndef main():\n    m, n = map(int, input().split()) \n    clauses = []\n    for i in range(m):\n        clauses.append(list(map(int, input().split())))\n    if len(clauses) < 8:\n        print("unsatisfactory")\n    else:\n        print("satisfactory")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    m, n = map(int, input().split())\n    clauses = []\n    for i in range(m):\n        clauses.append(list(map(int, input().split())))\n    print("satisfactory")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    m, n = map(int, input().split())\n    clauses = []\n    for i in range(m):\n        clauses.append(list(map(int, input().split())))\n    if m < 8:\n        print("unsatisfactory")\n    else:\n        print("satisfactory")\n\nmain()\n']
2022-04-16 02:46:10.461609 size on output set 3
