2022-04-16 02:56:24.842402 num operations 1
2022-04-16 02:56:24.842418 size on input set 1
2022-04-16 02:56:33.791249 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport heapq\nfrom operator import itemgetter\nfrom collections import deque, defaultdict, Counter\nfrom bisect import bisect_left, bisect_right\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nMOD = 10**9 + 7\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] < b[i]:\n            print(-1)\n            return\n    ans = 0\n    while True:\n        cnt = 0\n        for i in range(n):\n            if a[i] == b[i]:\n                cnt += 1\n        if cnt == n:\n            break\n        ans += 1\n        for i in range(n):\n            if a[i] % b[i] != 0:\n                a[i] = a[i] % b[i]\n            else:\n                a[i] = b[i]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077785,
  "object": "edit"
}
2022-04-16 02:56:33.791544 fix syntax errors 3 ["\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport heapq\nfrom operator import itemgetter\nfrom collections import deque, defaultdict, Counter\nfrom bisect import bisect_left, bisect_right\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nMOD = 10**9 + 7\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] < b[i]:\n            print(-1)\n            return\n    ans = 0\n    while True:\n        cnt = 0\n        for i in range(n):\n            if a[i] == b[i]:\n                cnt += 1\n        if cnt == n:\n            break\n        ans += 1\n        for i in range(n):\n            if a[i] % b[i] != 0:\n                a[i] = a[i] % b[i]\n            else:\n                a[i] = b[i]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:56:33.791582 size on output set 3
2022-04-16 02:56:33.791593 num operations 1
2022-04-16 02:56:33.791599 size on input set 1
2022-04-16 02:56:37.339631 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(sorted(list(map(int, input().split()))))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * (M + 1) for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort(key=lambda x: x[-1])\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    print(*[x[-1] for x in T])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M] * N\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650077793,
  "object": "edit"
}
2022-04-16 02:56:37.339832 fix syntax errors 3 ['\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(sorted(list(map(int, input().split()))))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * (M + 1) for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort(key=lambda x: x[-1])\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    print(*[x[-1] for x in T])\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M] * N\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:56:37.339881 size on output set 3
2022-04-16 02:56:37.339902 num operations 1
2022-04-16 02:56:37.339908 size on input set 1
2022-04-16 02:56:40.613741 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\nt = [0] * n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] >= t[i]:\n                t[k] = t[i] - p[k][j] - 1\n\nprint(\" \".join(map(str, t)))\n"
    }
  ],
  "created": 1650077797,
  "object": "edit"
}
2022-04-16 02:56:40.614046 fix syntax errors 3 ['n, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\nt = [0] * n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', '\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', '\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] >= t[i]:\n                t[k] = t[i] - p[k][j] - 1\n\nprint(" ".join(map(str, t)))\n']
2022-04-16 02:56:40.614080 size on output set 3
2022-04-16 02:56:40.614094 num operations 1
2022-04-16 02:56:40.614099 size on input set 1
2022-04-16 02:56:46.081410 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(1, stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    swathers, stages = map(int, input().split())\n    times = []\n    for i in range(swathers):\n        times.append(list(map(int, input().split())))\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n"
    }
  ],
  "created": 1650077800,
  "object": "edit"
}
2022-04-16 02:56:46.081593 fix syntax errors 3 ["\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(1, stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\n\ndef main():\n    swathers, stages = map(int, input().split())\n    times = []\n    for i in range(swathers):\n        times.append(list(map(int, input().split())))\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n"]
2022-04-16 02:56:46.081623 size on output set 3
2022-04-16 02:56:46.081634 num operations 1
2022-04-16 02:56:46.081639 size on input set 1
2022-04-16 02:56:49.029526 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "N, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = map(int, input().split())\n\ntimes = []\nfor i in range(N):\n    times.append(list(map(int, input().split())))\n\n#print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    sys.stdout.write(str(total_times[i]))\n    sys.stdout.write(\" \")\nprint()\n"
    }
  ],
  "created": 1650077806,
  "object": "edit"
}
2022-04-16 02:56:49.029709 fix syntax errors 3 ['N, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\n\nN, M = map(int, input().split())\n\ntimes = []\nfor i in range(N):\n    times.append(list(map(int, input().split())))\n\n#print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\nimport sys\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    sys.stdout.write(str(total_times[i]))\n    sys.stdout.write(" ")\nprint()\n']
2022-04-16 02:56:49.029818 size on output set 3
2022-04-16 02:56:49.029829 num operations 1
2022-04-16 02:56:49.029835 size on input set 1
2022-04-16 02:56:51.903429 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # sort by the first column\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # sort by the i-th column\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    }
  ],
  "created": 1650077809,
  "object": "edit"
}
2022-04-16 02:56:51.903609 fix syntax errors 3 ['import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', 'import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # sort by the first column\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # sort by the i-th column\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n']
2022-04-16 02:56:51.903640 size on output set 2
2022-04-16 02:56:51.903650 num operations 1
2022-04-16 02:56:51.903656 size on input set 1
2022-04-16 02:57:04.767138 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()] # n = number of cows, m = number of barns\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)] # times[i][j] = time it takes cow i to get to barn j\n    swathers = [[i,j] for i in range(n) for j in range(m)] # swathers = list of cows and barns\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]]) # sort swathers by time it takes cow to get to barn\n    completed = [0]*n # completed = list of times it takes each cow to get to its barn\n    while len(swathers) > 0: # while there are still cows and barns\n        swather = swathers.pop(0) # swather = the next cow and barn\n        if swather[1] == 0: # if the swather is at the first barn\n            completed[swather[0]] = times[swather[0]][0] # the cow is done when it gets to the first barn\n        else: # if the swather is not at the first barn\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]] # the cow is done when it gets to the barn or when the previous cow gets to the barn, whichever is later\n    print(' '.join([str(i) for i in completed])) # print the times it takes each cow to get to its barn\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i, j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]], reverse=True)\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0] - 1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077811,
  "object": "edit"
}
2022-04-16 02:57:04.767383 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()] # n = number of cows, m = number of barns\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)] # times[i][j] = time it takes cow i to get to barn j\n    swathers = [[i,j] for i in range(n) for j in range(m)] # swathers = list of cows and barns\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]]) # sort swathers by time it takes cow to get to barn\n    completed = [0]*n # completed = list of times it takes each cow to get to its barn\n    while len(swathers) > 0: # while there are still cows and barns\n        swather = swathers.pop(0) # swather = the next cow and barn\n        if swather[1] == 0: # if the swather is at the first barn\n            completed[swather[0]] = times[swather[0]][0] # the cow is done when it gets to the first barn\n        else: # if the swather is not at the first barn\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]] # the cow is done when it gets to the barn or when the previous cow gets to the barn, whichever is later\n    print(' '.join([str(i) for i in completed])) # print the times it takes each cow to get to its barn\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i, j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]], reverse=True)\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0] - 1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:57:04.767494 size on output set 3
2022-04-16 02:57:04.767507 num operations 1
2022-04-16 02:57:04.767513 size on input set 1
2022-04-16 02:57:08.832818 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = [[] for i in range(N)]\n    for i in range(N):\n        p[i] = list(map(int, sys.stdin.readline().split()))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print ' '.join(map(str, t))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077824,
  "object": "edit"
}
2022-04-16 02:57:08.833033 fix syntax errors 3 ["\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n\n#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = [[] for i in range(N)]\n    for i in range(N):\n        p[i] = list(map(int, sys.stdin.readline().split()))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print ' '.join(map(str, t))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:57:08.833085 size on output set 3
