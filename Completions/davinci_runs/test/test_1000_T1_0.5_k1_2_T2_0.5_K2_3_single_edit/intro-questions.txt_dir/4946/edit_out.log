2022-04-16 03:01:09.048281 num operations 1
2022-04-16 03:01:09.048299 size on input set 1
2022-04-16 03:01:13.722420 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l) - 1):\n            min_dist = min(min_dist, l[i + 1] - l[i])\n\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    print('Hello world')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    lang = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if lang[i] not in d:\n            d[lang[i]] = [i]\n        else:\n            d[lang[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650078069,
  "object": "edit"
}
2022-04-16 03:01:13.722650 fix syntax errors 3 ["\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l) - 1):\n            min_dist = min(min_dist, l[i + 1] - l[i])\n\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    print('Hello world')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    lang = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if lang[i] not in d:\n            d[lang[i]] = [i]\n        else:\n            d[lang[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:01:13.722681 size on output set 3
2022-04-16 03:01:13.722692 num operations 1
2022-04-16 03:01:13.722697 size on input set 1
2022-04-16 03:01:16.902152 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    if awkwardness == n + 1:\n        print(-1)\n    else:\n        print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650078073,
  "object": "edit"
}
2022-04-16 03:01:16.902350 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    if awkwardness == n + 1:\n        print(-1)\n    else:\n        print(awkwardness)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    print("Hello World")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:01:16.902374 size on output set 3
2022-04-16 03:01:16.902384 num operations 1
2022-04-16 03:01:16.902389 size on input set 1
2022-04-16 03:01:20.282137 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: solve this problem\n\n\n\n\n\nn = int(input())\n\n\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\n\n\n\n\nfor i in range(len(languages)):\n\n\n    for j in range(i + 1, len(languages)):\n\n\n        if languages[i] == languages[j]:\n\n\n            # find the distance between i and j\n\n\n            distance = abs(i - j)\n            print(distance)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n# check for duplicate languages \nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j \n            distance = abs(i - j)\n            print(distance)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages, if true, find the distance between i and j\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            distance = abs(i - j)\n            print(distance)\n"
    }
  ],
  "created": 1650078076,
  "object": "edit"
}
2022-04-16 03:01:20.282331 fix syntax errors 3 ['\n\n# TODO: solve this problem\n\n\n\n\n\nn = int(input())\n\n\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\n\n\n\n\nfor i in range(len(languages)):\n\n\n    for j in range(i + 1, len(languages)):\n\n\n        if languages[i] == languages[j]:\n\n\n            # find the distance between i and j\n\n\n            distance = abs(i - j)\n            print(distance)\n', '\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n# check for duplicate languages \nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j \n            distance = abs(i - j)\n            print(distance)\n', '\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages, if true, find the distance between i and j\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            distance = abs(i - j)\n            print(distance)\n']
2022-04-16 03:01:20.282362 size on output set 3
2022-04-16 03:01:20.282382 num operations 1
2022-04-16 03:01:20.282386 size on input set 1
2022-04-16 03:01:28.675421 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef main():\n    n = int(input())\n    if is_prime(n):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\nprint(get_divisors(12))\n"
    }
  ],
  "created": 1650078080,
  "object": "edit"
}
2022-04-16 03:01:28.675627 fix syntax errors 3 ['\n', '\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef main():\n    n = int(input())\n    if is_prime(n):\n        print("Yes")\n    else:\n        print("No")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\nprint(get_divisors(12))\n']
2022-04-16 03:01:28.675651 size on output set 3
2022-04-16 03:01:28.675671 num operations 1
2022-04-16 03:01:28.675678 size on input set 1
2022-04-16 03:01:31.349992 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen.add(lang)\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen.get(lang))\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang] - 1)\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n"
    }
  ],
  "created": 1650078088,
  "object": "edit"
}
2022-04-16 03:01:31.350275 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen.add(lang)\n    return min_dist\n\nif __name__ == "__main__":\n    print(main())\n', '\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen.get(lang))\n        seen[lang] = i\n    return min_dist\n\nif __name__ == "__main__":\n    print(main())\n', '\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang] - 1)\n        seen[lang] = i\n    return min_dist\n\nif __name__ == "__main__":\n    print(main())\n']
2022-04-16 03:01:31.350306 size on output set 3
2022-04-16 03:01:31.350316 num operations 1
2022-04-16 03:01:31.350322 size on input set 1
2022-04-16 03:01:33.275502 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650078091,
  "object": "edit"
}
2022-04-16 03:01:33.275701 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\nif __name__ == '__main__':\n    main()\n", "\n\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:01:33.275735 size on output set 3
2022-04-16 03:01:33.275747 num operations 1
2022-04-16 03:01:33.275752 size on input set 1
2022-04-16 03:01:35.140355 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650078093,
  "object": "edit"
}
2022-04-16 03:01:35.140550 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:01:35.140660 size on output set 3
2022-04-16 03:01:35.140673 num operations 1
2022-04-16 03:01:35.140678 size on input set 1
2022-04-16 03:01:42.328783 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n - 1\n    if len(set(languages)) == n:\n        print(n - 1)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position: # The first and second language are adjacent\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n    else: # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650078095,
  "object": "edit"
}
2022-04-16 03:01:42.329046 fix syntax errors 3 ["\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n - 1\n    if len(set(languages)) == n:\n        print(n - 1)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position: # The first and second language are adjacent\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n    else: # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:01:42.329189 size on output set 3
