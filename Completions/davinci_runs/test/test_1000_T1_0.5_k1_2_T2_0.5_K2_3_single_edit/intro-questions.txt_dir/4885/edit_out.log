2022-04-16 02:23:04.342804 num operations 1
2022-04-16 02:23:04.342818 size on input set 1
2022-04-16 02:23:09.950494 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    board = []\n    for line in sys.stdin:\n        board.append(line.strip())\n\n    white = \"\"\n    black = \"\"\n\n    for i, row in enumerate(board):\n        for j, pos in enumerate(row):\n            if pos == '.':\n                continue\n            if pos.isupper():\n                white += pos.lower() + chr(j + ord('a')) + str(8 - i) + ','\n            else:\n                black += pos.upper() + chr(j + ord('a')) + str(8 - i) + ','\n    if white[-1] == ',':\n        white = white[:-1]\n    if black[-1] == ',':\n        black = black[:-1]\n    print('White: ' + white[:-1])\n    print('Black: ' + black[:-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    board = []\n    for line in sys.stdin:\n        board.append(line.strip())\n\n    white = \"\"\n    black = \"\"\n\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            pos = board[i][j]\n            if pos == '.':\n                continue\n            if pos.isupper():\n                white += pos.lower() + chr(j + ord('a')) + str(8 - i) + ' '\n            else:\n                black += pos.upper() + chr(j + ord('a')) + str(8 - i) + ' '\n    print('White: ' + white)\n    print('Black: ' + black)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    board = []\n    for line in sys.stdin:\n        board.append(line.strip())\n\n    white = \"\"\n    black = \"\"\n\n    for i, row in enumerate(board):\n        for j, pos in enumerate(row):\n            if pos == '.':\n                continue\n            if pos.isupper():\n                white += pos.lower() + chr(j + ord('a')) + str(8 - i) + ','\n            else:\n                black += pos.upper() + chr(j + ord('a')) + str(8 - i) + ','\n    \n    print('White: ' + white[:-1])\n    print('Black: ' + black[:-1])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650075784,
  "object": "edit"
}
2022-04-16 02:23:09.950753 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    board = []\n    for line in sys.stdin:\n        board.append(line.strip())\n\n    white = ""\n    black = ""\n\n    for i, row in enumerate(board):\n        for j, pos in enumerate(row):\n            if pos == \'.\':\n                continue\n            if pos.isupper():\n                white += pos.lower() + chr(j + ord(\'a\')) + str(8 - i) + \',\'\n            else:\n                black += pos.upper() + chr(j + ord(\'a\')) + str(8 - i) + \',\'\n    if white[-1] == \',\':\n        white = white[:-1]\n    if black[-1] == \',\':\n        black = black[:-1]\n    print(\'White: \' + white[:-1])\n    print(\'Black: \' + black[:-1])\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    board = []\n    for line in sys.stdin:\n        board.append(line.strip())\n\n    white = ""\n    black = ""\n\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            pos = board[i][j]\n            if pos == \'.\':\n                continue\n            if pos.isupper():\n                white += pos.lower() + chr(j + ord(\'a\')) + str(8 - i) + \' \'\n            else:\n                black += pos.upper() + chr(j + ord(\'a\')) + str(8 - i) + \' \'\n    print(\'White: \' + white)\n    print(\'Black: \' + black)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    board = []\n    for line in sys.stdin:\n        board.append(line.strip())\n\n    white = ""\n    black = ""\n\n    for i, row in enumerate(board):\n        for j, pos in enumerate(row):\n            if pos == \'.\':\n                continue\n            if pos.isupper():\n                white += pos.lower() + chr(j + ord(\'a\')) + str(8 - i) + \',\'\n            else:\n                black += pos.upper() + chr(j + ord(\'a\')) + str(8 - i) + \',\'\n    \n    print(\'White: \' + white[:-1])\n    print(\'Black: \' + black[:-1])\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 02:23:09.950799 size on output set 3
2022-04-16 02:23:09.950816 num operations 1
2022-04-16 02:23:09.950821 size on input set 1
2022-04-16 02:23:23.820810 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read input.\n    board = []\n    for _ in range(0, 8):\n        board.append(input())\n\n    # Find the pieces.\n    pieces = {}\n    for row in range(0, 8):\n        for col in range(0, 8):\n            if board[row][col] != \".\" and board[row][col] != \":\":\n                pieces[board[row][col]] = (row, col)\n\n    # Print the output.\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNP\":\n        if piece in pieces:\n            if piece.isupper():\n                # White piece.\n                white += piece\n                white += chr(ord('a') + pieces[piece][1])\n                white += str(8 - pieces[piece][0])\n                white += \",\"\n            else:\n                # Black piece.\n                black += piece.upper()\n                black += chr(ord('a') + pieces[piece][1])\n                black += str(8 - pieces[piece][0])\n                black += \",\"\n\n    # Remove the last comma and print.\n    print(white[:-1])\n    print(black[:-1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read input.\n    board = []\n    for _ in range(0, 8):\n        board.append(input())\n\n    # Find the pieces.\n    pieces = {}\n    for row in range(0, 8):\n        for col in range(0, 8):\n            if board[row][col] != \".\" and board[row][col] != \":\":\n                pieces[board[row][col]] = (row, col)\n\n    # Print the output.\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNPkqrbnp\":\n        if piece in pieces:\n            if piece.isupper():\n                # White piece.\n                white += piece.upper()\n                white += chr(ord('a') + pieces[piece][1])\n                white += str(8 - pieces[piece][0])\n                white += \",\"\n            else:\n                # Black piece.\n                black += piece.upper()\n                black += chr(ord('a') + pieces[piece][1])\n                black += str(8 - pieces[piece][0])\n                black += \",\"\n\n    # Remove the last comma and print.\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n\t\"\"\"\n\tMain function.\n\t\"\"\"\n\t# Read input.\n\tboard = []\n\tfor _ in range(0, 8):\n\t\tboard.append(input())\n\n\t# Find the pieces.\n\tpieces = {}\n\tfor row in range(0, 8):\n\t\tfor col in range(0, 8):\n\t\t\tif board[row][col] != \".\" and board[row][col] != \":\":\n\t\t\t\tpieces[board[row][col]] = (row, col)\n\n\t# Print the output.\n\twhite = \"White: \"\n\tblack = \"Black: \"\n\tfor piece in \"KQRBNP\":\n\t\tif piece in pieces:\n\t\t\tif piece.isupper():\n\t\t\t\t# White piece.\n\t\t\t\twhite += piece\n\t\t\t\twhite += chr(ord('a') + pieces[piece][1])\n\t\t\t\twhite += str(8 - pieces[piece][0])\n\t\t\t\twhite += \",\"\n\t\t\telse:\n\t\t\t\t# Black piece.\n\t\t\t\tblack += piece.upper()\n\t\t\t\tblack += chr(ord('a') + pieces[piece][1])\n\t\t\t\tblack += str(8 - pieces[piece][0])\n\t\t\t\tblack += \",\"\n\n\t# Remove the last comma and print.\n\tprint(white[:-1])\n\tprint(black[:-1])\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650075789,
  "object": "edit"
}
2022-04-16 02:23:23.821039 fix syntax errors 3 ['\n\ndef main():\n    """\n    Main function.\n    """\n    # Read input.\n    board = []\n    for _ in range(0, 8):\n        board.append(input())\n\n    # Find the pieces.\n    pieces = {}\n    for row in range(0, 8):\n        for col in range(0, 8):\n            if board[row][col] != "." and board[row][col] != ":":\n                pieces[board[row][col]] = (row, col)\n\n    # Print the output.\n    white = "White: "\n    black = "Black: "\n    for piece in "KQRBNP":\n        if piece in pieces:\n            if piece.isupper():\n                # White piece.\n                white += piece\n                white += chr(ord(\'a\') + pieces[piece][1])\n                white += str(8 - pieces[piece][0])\n                white += ","\n            else:\n                # Black piece.\n                black += piece.upper()\n                black += chr(ord(\'a\') + pieces[piece][1])\n                black += str(8 - pieces[piece][0])\n                black += ","\n\n    # Remove the last comma and print.\n    print(white[:-1])\n    print(black[:-1])\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Main function.\n    """\n    # Read input.\n    board = []\n    for _ in range(0, 8):\n        board.append(input())\n\n    # Find the pieces.\n    pieces = {}\n    for row in range(0, 8):\n        for col in range(0, 8):\n            if board[row][col] != "." and board[row][col] != ":":\n                pieces[board[row][col]] = (row, col)\n\n    # Print the output.\n    white = "White: "\n    black = "Black: "\n    for piece in "KQRBNPkqrbnp":\n        if piece in pieces:\n            if piece.isupper():\n                # White piece.\n                white += piece.upper()\n                white += chr(ord(\'a\') + pieces[piece][1])\n                white += str(8 - pieces[piece][0])\n                white += ","\n            else:\n                # Black piece.\n                black += piece.upper()\n                black += chr(ord(\'a\') + pieces[piece][1])\n                black += str(8 - pieces[piece][0])\n                black += ","\n\n    # Remove the last comma and print.\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n\t"""\n\tMain function.\n\t"""\n\t# Read input.\n\tboard = []\n\tfor _ in range(0, 8):\n\t\tboard.append(input())\n\n\t# Find the pieces.\n\tpieces = {}\n\tfor row in range(0, 8):\n\t\tfor col in range(0, 8):\n\t\t\tif board[row][col] != "." and board[row][col] != ":":\n\t\t\t\tpieces[board[row][col]] = (row, col)\n\n\t# Print the output.\n\twhite = "White: "\n\tblack = "Black: "\n\tfor piece in "KQRBNP":\n\t\tif piece in pieces:\n\t\t\tif piece.isupper():\n\t\t\t\t# White piece.\n\t\t\t\twhite += piece\n\t\t\t\twhite += chr(ord(\'a\') + pieces[piece][1])\n\t\t\t\twhite += str(8 - pieces[piece][0])\n\t\t\t\twhite += ","\n\t\t\telse:\n\t\t\t\t# Black piece.\n\t\t\t\tblack += piece.upper()\n\t\t\t\tblack += chr(ord(\'a\') + pieces[piece][1])\n\t\t\t\tblack += str(8 - pieces[piece][0])\n\t\t\t\tblack += ","\n\n\t# Remove the last comma and print.\n\tprint(white[:-1])\n\tprint(black[:-1])\n\nif __name__ == \'__main__\':\n\tmain()\n']
2022-04-16 02:23:23.821165 size on output set 3
2022-04-16 02:23:23.821178 num operations 1
2022-04-16 02:23:23.821183 size on input set 1
2022-04-16 02:23:28.772777 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport string\n\n# Read the input\ninput_lines = sys.stdin.readlines()\n\n# Initialise the board\nboard = []\nfor i in range(8):\n    board.append(input_lines[i+1][1:9])\n\n# Initialise the board positions\npieces = {'K': 'K', 'Q': 'Q', 'R': 'R', 'B': 'B', 'N': 'N', 'P': '', 'k': 'k', 'q': 'q', 'r': 'r', 'b': 'b', 'n': 'n', 'p': ''}\n\n# Initialise the white pieces\nwhite_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['K', 'Q', 'R', 'B', 'N', 'P']:\n                white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Initialise the black pieces\nblack_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['k', 'q', 'r', 'b', 'n', 'p']:\n                black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Print the output\nprint(\"White: \" + ','.join(white_pieces))\nprint(\"Black: \" + ','.join(black_pieces))\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport string\n\n# Read the input\ninput_lines = sys.stdin.readlines()\n\n# Initialise the board\nboard = []\nfor i in range(8):\n    board.append(input_lines[i+1][1:9])\n\n# Initialise the board positions\npieces = {'K': 'K', 'Q': 'Q', 'R': 'R', 'B': 'B', 'N': 'N', 'P': '', 'k': 'k', 'q': 'q', 'r': 'r', 'b': 'b', 'n': 'n', 'p': ''}\n\n# Initialise the white pieces\nwhite_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['K', 'Q', 'R', 'B', 'N', 'P']:\n                white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Initialise the black pieces\nblack_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['k', 'q', 'r', 'b', 'n', 'p']:\n                black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Print the output\nprint \"White: \" + ','.join(white_pieces)\nprint \"Black: \" + ','.join(black_pieces)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport string\n# Read the input\ninput_lines = sys.stdin.readlines()\n# Initialise the board\nboard = []\nfor i in range(8):\n    board.append(input_lines[i+1][1:9])\n# Initialise the board positions\npieces = {'K': 'K', 'Q': 'Q', 'R': 'R', 'B': 'B', 'N': 'N', 'P': '', 'k': 'k', 'q': 'q', 'r': 'r', 'b': 'b', 'n': 'n', 'p': ''}\n# Initialise the white pieces\nwhite_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['K', 'Q', 'R', 'B', 'N', 'P']:\n                white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Initialise the black pieces\nblack_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['k', 'q', 'r', 'b', 'n', 'p']:\n                black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Print the output\nprint \"White: \" + ','.join(white_pieces)\nprint \"Black: \" + ','.join(black_pieces)\n"
    }
  ],
  "created": 1650075803,
  "object": "edit"
}
2022-04-16 02:23:28.772962 fix syntax errors 3 ['\nimport sys\nimport string\n\n# Read the input\ninput_lines = sys.stdin.readlines()\n\n# Initialise the board\nboard = []\nfor i in range(8):\n    board.append(input_lines[i+1][1:9])\n\n# Initialise the board positions\npieces = {\'K\': \'K\', \'Q\': \'Q\', \'R\': \'R\', \'B\': \'B\', \'N\': \'N\', \'P\': \'\', \'k\': \'k\', \'q\': \'q\', \'r\': \'r\', \'b\': \'b\', \'n\': \'n\', \'p\': \'\'}\n\n# Initialise the white pieces\nwhite_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in [\'K\', \'Q\', \'R\', \'B\', \'N\', \'P\']:\n                white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Initialise the black pieces\nblack_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in [\'k\', \'q\', \'r\', \'b\', \'n\', \'p\']:\n                black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Print the output\nprint("White: " + \',\'.join(white_pieces))\nprint("Black: " + \',\'.join(black_pieces))\n', 'import sys\nimport string\n\n# Read the input\ninput_lines = sys.stdin.readlines()\n\n# Initialise the board\nboard = []\nfor i in range(8):\n    board.append(input_lines[i+1][1:9])\n\n# Initialise the board positions\npieces = {\'K\': \'K\', \'Q\': \'Q\', \'R\': \'R\', \'B\': \'B\', \'N\': \'N\', \'P\': \'\', \'k\': \'k\', \'q\': \'q\', \'r\': \'r\', \'b\': \'b\', \'n\': \'n\', \'p\': \'\'}\n\n# Initialise the white pieces\nwhite_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in [\'K\', \'Q\', \'R\', \'B\', \'N\', \'P\']:\n                white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Initialise the black pieces\nblack_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in [\'k\', \'q\', \'r\', \'b\', \'n\', \'p\']:\n                black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Print the output\nprint "White: " + \',\'.join(white_pieces)\nprint "Black: " + \',\'.join(black_pieces)\n', '\nimport sys\nimport string\n# Read the input\ninput_lines = sys.stdin.readlines()\n# Initialise the board\nboard = []\nfor i in range(8):\n    board.append(input_lines[i+1][1:9])\n# Initialise the board positions\npieces = {\'K\': \'K\', \'Q\': \'Q\', \'R\': \'R\', \'B\': \'B\', \'N\': \'N\', \'P\': \'\', \'k\': \'k\', \'q\': \'q\', \'r\': \'r\', \'b\': \'b\', \'n\': \'n\', \'p\': \'\'}\n# Initialise the white pieces\nwhite_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in [\'K\', \'Q\', \'R\', \'B\', \'N\', \'P\']:\n                white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Initialise the black pieces\nblack_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in [\'k\', \'q\', \'r\', \'b\', \'n\', \'p\']:\n                black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Print the output\nprint "White: " + \',\'.join(white_pieces)\nprint "Black: " + \',\'.join(black_pieces)\n']
2022-04-16 02:23:28.773006 size on output set 3
2022-04-16 02:23:28.773018 num operations 1
2022-04-16 02:23:28.773023 size on input set 1
2022-04-16 02:23:30.862254 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution:\nimport sys\n\ndef main():\n    board = []\n    for i in range(8):\n        board.append(list(input()))\n    for i in range(8):\n        board.append(list(input()))\n    pieces = {\"K\": [], \"Q\": [], \"R\": [], \"B\": [], \"N\": [], \"P\": []}\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] != \":\":\n                pieces[board[i][j]].append((i, j))\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNP\":\n        for pos in pieces[piece]:\n            if pos[0] < 8:\n                white += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n            else:\n                black += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# Solution:\nimport sys\n\ndef main():\n    board = []\n    for i in range(8):\n        board.append(list(input()))\n    for i in range(8):\n        board.append(list(input()))\n    pieces = {\"K\": [], \"Q\": [], \"R\": [], \"B\": [], \"N\": [], \"P\": []}\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] != \":\":\n                pieces[board[i][j]].append((i, j))\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNP\":\n        for pos in pieces[piece]:\n            if pos[0] < 8:\n                white += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n            else:\n                black += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n    print(white[:-1])\n    print(black[:-1])\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n# Solution:\nimport sys\n\n\ndef main():\n    board = []\n    for i in range(8):\n        board.append(list(input()))\n    for i in range(8):\n        board.append(list(input()))\n    pieces = {\"K\": [], \"Q\": [], \"R\": [], \"B\": [], \"N\": [], \"P\": []}\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] != \":\":\n                pieces[board[i][j]].append((i, j))\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNP\":\n        for pos in pieces[piece]:\n            if pos[0] < 8:\n                white += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n            else:\n                black += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n    print(white[:-1])\n    print(black[:-1])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650075808,
  "object": "edit"
}
2022-04-16 02:23:30.862626 fix syntax errors 3 ['\n\n# Solution:\nimport sys\n\ndef main():\n    board = []\n    for i in range(8):\n        board.append(list(input()))\n    for i in range(8):\n        board.append(list(input()))\n    pieces = {"K": [], "Q": [], "R": [], "B": [], "N": [], "P": []}\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] != ":":\n                pieces[board[i][j]].append((i, j))\n    white = "White: "\n    black = "Black: "\n    for piece in "KQRBNP":\n        for pos in pieces[piece]:\n            if pos[0] < 8:\n                white += piece + chr(ord("a") + pos[1]) + str(8 - pos[0]) + ","\n            else:\n                black += piece + chr(ord("a") + pos[1]) + str(8 - pos[0]) + ","\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == "__main__":\n    main()\n', '\n# Solution:\nimport sys\n\ndef main():\n    board = []\n    for i in range(8):\n        board.append(list(input()))\n    for i in range(8):\n        board.append(list(input()))\n    pieces = {"K": [], "Q": [], "R": [], "B": [], "N": [], "P": []}\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] != ":":\n                pieces[board[i][j]].append((i, j))\n    white = "White: "\n    black = "Black: "\n    for piece in "KQRBNP":\n        for pos in pieces[piece]:\n            if pos[0] < 8:\n                white += piece + chr(ord("a") + pos[1]) + str(8 - pos[0]) + ","\n            else:\n                black += piece + chr(ord("a") + pos[1]) + str(8 - pos[0]) + ","\n    print(white[:-1])\n    print(black[:-1])\nif __name__ == "__main__":\n    main()\n', '\n# Solution:\nimport sys\n\n\ndef main():\n    board = []\n    for i in range(8):\n        board.append(list(input()))\n    for i in range(8):\n        board.append(list(input()))\n    pieces = {"K": [], "Q": [], "R": [], "B": [], "N": [], "P": []}\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] != ":":\n                pieces[board[i][j]].append((i, j))\n    white = "White: "\n    black = "Black: "\n    for piece in "KQRBNP":\n        for pos in pieces[piece]:\n            if pos[0] < 8:\n                white += piece + chr(ord("a") + pos[1]) + str(8 - pos[0]) + ","\n            else:\n                black += piece + chr(ord("a") + pos[1]) + str(8 - pos[0]) + ","\n    print(white[:-1])\n    print(black[:-1])\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:23:30.862673 size on output set 3
2022-04-16 02:23:30.862686 num operations 1
2022-04-16 02:23:30.862692 size on input set 1
2022-04-16 02:23:34.347219 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n\tboard = []\n\tfor line in stdin:\n\t\tboard.append(line.rstrip())\n\twhite = []\n\tblack = []\n\tfor i in range(1,9):\n\t\tfor j in range(1,9):\n\t\t\tpiece = board[i][j]\n\t\t\tif piece.isupper():\n\t\t\t\twhite.append((piece, j, i))\n\t\t\telif piece.islower():\n\t\t\t\tblack.append((piece, j, i))\n\twhite.sort(key=lambda x: (x[1], -x[2]))\n\tblack.sort(key=lambda x: (x[1], x[2]))\n\twhite = [x[0] + chr(x[1]+96) + str(x[2]) for x in white]\n\tblack = [x[0] + chr(x[1]+96) + str(x[2]) for x in black]\n\tprint('White: ' + ','.join(white))\n\tprint('Black: ' + ','.join(black))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n\tboard = []\n\tfor line in stdin:\n\t\tboard.append(line.rstrip())\n\twhite = []\n\tblack = []\n\tfor i in range(1,9):\n\t\tfor j in range(1,9):\n\t\t\tpiece = board[i-1][j-1]\n\t\t\tif piece.isupper():\n\t\t\t\twhite.append((piece, j-1, i-1))\n\t\t\telif piece.islower():\n\t\t\t\tblack.append((piece, j-1, i-1))\n\twhite.sort(key=lambda x: (x[1], x[2]))\n\tblack.sort(key=lambda x: (x[1], -x[2]))\n\twhite = [x[0] + chr(x[1]+96) + str(x[2]) for x in white]\n\tblack = [x[0] + chr(x[1]+96) + str(x[2]) for x in black]\n\tprint('White: ' + ','.join(white))\n\tprint('Black: ' + ','.join(black))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n\tboard = []\n\tfor line in stdin:\n\t\tboard.append(line.rstrip())\n\twhite = []\n\tblack = []\n\tfor i in range(1,9):\n\t\tfor j in range(1,9):\n\t\t\tpiece = board[i][j]\n\t\t\tif piece.isupper():\n\t\t\t\twhite.append((piece, j, i))\n\t\t\telif piece.islower():\n\t\t\t\tblack.append((piece, j, i))\n\twhite.sort(key=lambda x: (x[1], x[2]))\n\tblack.sort(key=lambda x: (x[1], -x[2]))\n\twhite = [x[0] + chr(x[1]+96) + str(x[2]) for x in white]\n\tblack = [x[0] + chr(x[1]+96) + str(x[2]) for x in black]\n\tprint('White: ' + ','.join(white) + '.')\n\tprint('Black: ' + ','.join(black) + '.')\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650075810,
  "object": "edit"
}
2022-04-16 02:23:34.347469 fix syntax errors 3 ["\n\nfrom sys import stdin\n\ndef main():\n\tboard = []\n\tfor line in stdin:\n\t\tboard.append(line.rstrip())\n\twhite = []\n\tblack = []\n\tfor i in range(1,9):\n\t\tfor j in range(1,9):\n\t\t\tpiece = board[i][j]\n\t\t\tif piece.isupper():\n\t\t\t\twhite.append((piece, j, i))\n\t\t\telif piece.islower():\n\t\t\t\tblack.append((piece, j, i))\n\twhite.sort(key=lambda x: (x[1], -x[2]))\n\tblack.sort(key=lambda x: (x[1], x[2]))\n\twhite = [x[0] + chr(x[1]+96) + str(x[2]) for x in white]\n\tblack = [x[0] + chr(x[1]+96) + str(x[2]) for x in black]\n\tprint('White: ' + ','.join(white))\n\tprint('Black: ' + ','.join(black))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nfrom sys import stdin\n\ndef main():\n\tboard = []\n\tfor line in stdin:\n\t\tboard.append(line.rstrip())\n\twhite = []\n\tblack = []\n\tfor i in range(1,9):\n\t\tfor j in range(1,9):\n\t\t\tpiece = board[i-1][j-1]\n\t\t\tif piece.isupper():\n\t\t\t\twhite.append((piece, j-1, i-1))\n\t\t\telif piece.islower():\n\t\t\t\tblack.append((piece, j-1, i-1))\n\twhite.sort(key=lambda x: (x[1], x[2]))\n\tblack.sort(key=lambda x: (x[1], -x[2]))\n\twhite = [x[0] + chr(x[1]+96) + str(x[2]) for x in white]\n\tblack = [x[0] + chr(x[1]+96) + str(x[2]) for x in black]\n\tprint('White: ' + ','.join(white))\n\tprint('Black: ' + ','.join(black))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nfrom sys import stdin\n\ndef main():\n\tboard = []\n\tfor line in stdin:\n\t\tboard.append(line.rstrip())\n\twhite = []\n\tblack = []\n\tfor i in range(1,9):\n\t\tfor j in range(1,9):\n\t\t\tpiece = board[i][j]\n\t\t\tif piece.isupper():\n\t\t\t\twhite.append((piece, j, i))\n\t\t\telif piece.islower():\n\t\t\t\tblack.append((piece, j, i))\n\twhite.sort(key=lambda x: (x[1], x[2]))\n\tblack.sort(key=lambda x: (x[1], -x[2]))\n\twhite = [x[0] + chr(x[1]+96) + str(x[2]) for x in white]\n\tblack = [x[0] + chr(x[1]+96) + str(x[2]) for x in black]\n\tprint('White: ' + ','.join(white) + '.')\n\tprint('Black: ' + ','.join(black) + '.')\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-16 02:23:34.347513 size on output set 3
2022-04-16 02:23:34.347524 num operations 1
2022-04-16 02:23:34.347530 size on input set 1
2022-04-16 02:23:37.759914 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Read input\n    white = []\n    black = []\n    for i in range(8):\n        line = input()\n        for j in range(8):\n            if line[4*j + 1] != \".\":\n                if line[4*j + 1].isupper():\n                    white.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n                else:\n                    black.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n\n    # Sort lists\n    white = sorted(white)\n    black = sorted(black, reverse = True)\n\n    # Print output\n    print(\"White:\", \", \".join([x[0] + x[1] for x in white]) + \".\")\n    print(\"Black:\", \", \".join([x[0] + x[1] for x in black]) + \".\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Read input\n    white = []\n    black = []\n    for i in range(8):\n        line = input()\n        for j in range(8):\n            if line[4*j + 1] != \".\":\n                if line[4*j + 1].isupper():\n                    white.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n                else:\n                    black.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n\n    # Sort lists\n    white = sorted(white, key=lambda x: x[1])\n    black = sorted(black, key=lambda x: x[1], reverse = True)\n\n    # Print output\n    print(\"White:\", \", \".join([x[0] + x[1] for x in white]))\n    print(\"Black:\", \", \".join([x[0] + x[1] for x in black]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Read input\n    white = []\n    black = []\n    for i in range(8):\n        line = input()\n        for j in range(8):\n            if line[4*j + 1] != \".\":\n                if line[4*j + 1].isupper():\n                    white.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n                else:\n                    black.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n\n    # Sort lists\n    white = sorted(white, key=lambda x: (x[0], x[1]))\n    black = sorted(black, key=lambda x: (x[0], x[1]), reverse=True)\n\n    # Print output\n    print(\"White:\", \", \".join([x[0] + x[1] for x in white]))\n    print(\"Black:\", \", \".join([x[0] + x[1] for x in black]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650075814,
  "object": "edit"
}
2022-04-16 02:23:37.760189 fix syntax errors 3 ['\n\ndef main():\n    """\n    Main function\n    """\n\n    # Read input\n    white = []\n    black = []\n    for i in range(8):\n        line = input()\n        for j in range(8):\n            if line[4*j + 1] != ".":\n                if line[4*j + 1].isupper():\n                    white.append((line[4*j + 1], chr(ord("a") + j) + str(8 - i)))\n                else:\n                    black.append((line[4*j + 1], chr(ord("a") + j) + str(8 - i)))\n\n    # Sort lists\n    white = sorted(white)\n    black = sorted(black, reverse = True)\n\n    # Print output\n    print("White:", ", ".join([x[0] + x[1] for x in white]) + ".")\n    print("Black:", ", ".join([x[0] + x[1] for x in black]) + ".")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n\n    # Read input\n    white = []\n    black = []\n    for i in range(8):\n        line = input()\n        for j in range(8):\n            if line[4*j + 1] != ".":\n                if line[4*j + 1].isupper():\n                    white.append((line[4*j + 1], chr(ord("a") + j) + str(8 - i)))\n                else:\n                    black.append((line[4*j + 1], chr(ord("a") + j) + str(8 - i)))\n\n    # Sort lists\n    white = sorted(white, key=lambda x: x[1])\n    black = sorted(black, key=lambda x: x[1], reverse = True)\n\n    # Print output\n    print("White:", ", ".join([x[0] + x[1] for x in white]))\n    print("Black:", ", ".join([x[0] + x[1] for x in black]))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n\n    # Read input\n    white = []\n    black = []\n    for i in range(8):\n        line = input()\n        for j in range(8):\n            if line[4*j + 1] != ".":\n                if line[4*j + 1].isupper():\n                    white.append((line[4*j + 1], chr(ord("a") + j) + str(8 - i)))\n                else:\n                    black.append((line[4*j + 1], chr(ord("a") + j) + str(8 - i)))\n\n    # Sort lists\n    white = sorted(white, key=lambda x: (x[0], x[1]))\n    black = sorted(black, key=lambda x: (x[0], x[1]), reverse=True)\n\n    # Print output\n    print("White:", ", ".join([x[0] + x[1] for x in white]))\n    print("Black:", ", ".join([x[0] + x[1] for x in black]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:23:37.760235 size on output set 3
2022-04-16 02:23:37.760245 num operations 1
2022-04-16 02:23:37.760250 size on input set 1
2022-04-16 02:23:43.315508 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n\nimport sys\n\nboard = []\n\nfor line in sys.stdin:\n    board.append(line[:-1])\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == '.':\n            continue\n        piece = board[i][j]\n        if piece.isupper():\n            white.append(piece + chr(97 + j) + str(8 - i))\n        else:\n            black.append(piece.upper() + chr(97 + j) + str(8 - i))\n\nprint(\"White:\", \", \".join(white))\nprint(\"Black:\", \", \".join(black))\n"
    },
    {
      "index": 1,
      "text": "\nPython 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 19:29:22) [MSC v.1916 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license()\" for more information.\n>>> \n"
    },
    {
      "index": 2,
      "text": "import sys\n\nboard = []\n\nfor line in sys.stdin:\n    board.append(line[:-1])\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == '.':\n            continue\n        piece = board[i][j]\n        if piece.isupper():\n            white.append(piece + chr(97 + j) + str(8 - i))\n        else:\n            black.append(piece.upper() + chr(97 + j) + str(8 - i))\n\nprint(\"White:\", \", \".join(white))\nprint(\"Black:\", \", \".join(black))\n"
    }
  ],
  "created": 1650075817,
  "object": "edit"
}
2022-04-16 02:23:43.315693 fix syntax errors 3 ['#!/usr/bin/env python\n\nimport sys\n\nboard = []\n\nfor line in sys.stdin:\n    board.append(line[:-1])\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == \'.\':\n            continue\n        piece = board[i][j]\n        if piece.isupper():\n            white.append(piece + chr(97 + j) + str(8 - i))\n        else:\n            black.append(piece.upper() + chr(97 + j) + str(8 - i))\n\nprint("White:", ", ".join(white))\nprint("Black:", ", ".join(black))\n', '\nPython 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 19:29:22) [MSC v.1916 32 bit (Intel)] on win32\nType "help", "copyright", "credits" or "license()" for more information.\n>>> \n', 'import sys\n\nboard = []\n\nfor line in sys.stdin:\n    board.append(line[:-1])\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == \'.\':\n            continue\n        piece = board[i][j]\n        if piece.isupper():\n            white.append(piece + chr(97 + j) + str(8 - i))\n        else:\n            black.append(piece.upper() + chr(97 + j) + str(8 - i))\n\nprint("White:", ", ".join(white))\nprint("Black:", ", ".join(black))\n']
2022-04-16 02:23:43.315722 size on output set 3
2022-04-16 02:23:43.315735 num operations 1
2022-04-16 02:23:43.315740 size on input set 1
2022-04-16 02:23:50.353665 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nboard = []\nfor i in range(8):\n    board.append(list(input()))\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n        elif board[i][j] == 'k':\n            black.append('Ke8')\n            white.append('Ke1')\n        elif board[i][j] == 'Q':\n        elif board[i][j] == 'q':\n            black.append('Qd8')\n            white.append('Qd1')\n        elif board[i][j] == 'R':\n        elif board[i][j] == 'r':\n            black.append('Ra8')\n            white.append('Ra1')\n        elif board[i][j] == 'R':\n            black.append('Ra8')\n        elif board[i][j] == 'B':\n            white.append('Bc1')\n        elif board[i][j] == 'b':\n            black.append('Bc8')\n        elif board[i][j] == 'N':\n            white.append('Nb1')\n        elif board[i][j] == 'n':\n            black.append('Ng8')\n        elif board[i][j] == 'P':\n            white.append('a2')\n        elif board[i][j] == 'p':\n            black.append('a7')\n\nprint('White:', ','.join(white))\nprint('Black:', ','.join(black))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nboard = []\nfor i in range(8):\n    board.append(list(input()))\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            white.append('Ke1')\n        elif board[i][j] == 'Q':\n            white.append('Qd1')\n        elif board[i][j] == 'R':\n            white.append('Ra1')\n        elif board[i][j] == 'B':\n            white.append('Bc1')\n        elif board[i][j] == 'N':\n            white.append('Nb1')\n        elif board[i][j] == 'P':\n            white.append('a2')\n        elif board[i][j] == 'k':\n            black.append('Ke8')\n        elif board[i][j] == 'q':\n            black.append('Qd8')\n        elif board[i][j] == 'r':\n            black.append('Ra8')\n        elif board[i][j] == 'b':\n            black.append('Bc8')\n        elif board[i][j] == 'n':\n            black.append('Ng8')\n        elif board[i][j] == 'p':\n            black.append('a7') \n\nprint('White:', ','.join(white))\nprint('Black:', ','.join(black))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nboard = []\nfor i in range(8):\n    board.append(list(input()))\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            white.append('Ke1')\n        elif board[i][j] == 'Q':\n            white.append('Qd1')\n        elif board[i][j] == 'R':\n            white.append('Ra1')\n        elif board[i][j] == 'b':\n            white.append('Bc1')\n        elif board[i][j] == 'n':\n            white.append('Nb1')\n        elif board[i][j] == 'P':\n            white.append('a2')\n        elif board[i][j] == 'k':\n            black.append('Ke8')\n        elif board[i][j] == 'q':\n            black.append('Qd8')\n        elif board[i][j] == 'r':\n            black.append('Ra8')\n        elif board[i][j] == 'B':\n            black.append('Bc8')\n        elif board[i][j] == 'N':\n            black.append('Ng8')\n        elif board[i][j] == 'p':\n            black.append('a7')\n\nprint('White:', ','.join(white))\nprint('Black:', ','.join(black))\n"
    }
  ],
  "created": 1650075823,
  "object": "edit"
}
2022-04-16 02:23:50.353964 fix syntax errors 3 ["\n\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nboard = []\nfor i in range(8):\n    board.append(list(input()))\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n        elif board[i][j] == 'k':\n            black.append('Ke8')\n            white.append('Ke1')\n        elif board[i][j] == 'Q':\n        elif board[i][j] == 'q':\n            black.append('Qd8')\n            white.append('Qd1')\n        elif board[i][j] == 'R':\n        elif board[i][j] == 'r':\n            black.append('Ra8')\n            white.append('Ra1')\n        elif board[i][j] == 'R':\n            black.append('Ra8')\n        elif board[i][j] == 'B':\n            white.append('Bc1')\n        elif board[i][j] == 'b':\n            black.append('Bc8')\n        elif board[i][j] == 'N':\n            white.append('Nb1')\n        elif board[i][j] == 'n':\n            black.append('Ng8')\n        elif board[i][j] == 'P':\n            white.append('a2')\n        elif board[i][j] == 'p':\n            black.append('a7')\n\nprint('White:', ','.join(white))\nprint('Black:', ','.join(black))\n", "\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nboard = []\nfor i in range(8):\n    board.append(list(input()))\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            white.append('Ke1')\n        elif board[i][j] == 'Q':\n            white.append('Qd1')\n        elif board[i][j] == 'R':\n            white.append('Ra1')\n        elif board[i][j] == 'B':\n            white.append('Bc1')\n        elif board[i][j] == 'N':\n            white.append('Nb1')\n        elif board[i][j] == 'P':\n            white.append('a2')\n        elif board[i][j] == 'k':\n            black.append('Ke8')\n        elif board[i][j] == 'q':\n            black.append('Qd8')\n        elif board[i][j] == 'r':\n            black.append('Ra8')\n        elif board[i][j] == 'b':\n            black.append('Bc8')\n        elif board[i][j] == 'n':\n            black.append('Ng8')\n        elif board[i][j] == 'p':\n            black.append('a7') \n\nprint('White:', ','.join(white))\nprint('Black:', ','.join(black))\n", "\n\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nboard = []\nfor i in range(8):\n    board.append(list(input()))\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            white.append('Ke1')\n        elif board[i][j] == 'Q':\n            white.append('Qd1')\n        elif board[i][j] == 'R':\n            white.append('Ra1')\n        elif board[i][j] == 'b':\n            white.append('Bc1')\n        elif board[i][j] == 'n':\n            white.append('Nb1')\n        elif board[i][j] == 'P':\n            white.append('a2')\n        elif board[i][j] == 'k':\n            black.append('Ke8')\n        elif board[i][j] == 'q':\n            black.append('Qd8')\n        elif board[i][j] == 'r':\n            black.append('Ra8')\n        elif board[i][j] == 'B':\n            black.append('Bc8')\n        elif board[i][j] == 'N':\n            black.append('Ng8')\n        elif board[i][j] == 'p':\n            black.append('a7')\n\nprint('White:', ','.join(white))\nprint('Black:', ','.join(black))\n"]
2022-04-16 02:23:50.354013 size on output set 3
