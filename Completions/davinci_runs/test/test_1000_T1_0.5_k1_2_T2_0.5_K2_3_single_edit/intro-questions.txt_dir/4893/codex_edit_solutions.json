["\ndef main():\n    a, b, c, d = map(int, input().split())\n    if a <= c <= b or a <= d <= b or c <= a <= d or c <= b <= d:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * i:\n            min_dist = d[i - 1] + p * i\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (n - i - 1) > dist[i + 1]:\n            print(dist[i] + p * (n - i - 1))\n            break\n    else:\n        print(dist[-1] + p * n)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\nfrom collections import deque\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline()\n    n = int(input)\n    input = sys.stdin.readline().split().reverse()\n    queue = deque()\n    for i in input:\n        queue.append(int(i))\n    print(queue)\n\nmain()\n", "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p * i:\n\t\t\tresult = distances[i] - (p * i)\n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n", "\n\n    \"\"\"\n    This is the main function\n    \"\"\"\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]  # list comprehension\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1):\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n", "\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint min_distance\n", "def min_distance(n, p, distances):\n    distances = sorted(distances)\n    result = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i-1] > result + p*i:\n            result = distances[i] - p*i\n    return result\n\n\nn, p = map(int, raw_input().split())  # input n, p\ndistances = map(int, raw_input().split())  # input distances\nprint min_distance(n, p, distances)  # output min distance\n", "\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n", "\n\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()] \n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef min_distance(n, p, distances):\n    distances = sorted(distances)\n    result = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i-1] > result + p*i:\n            result = distances[i] - p*i\n    return result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n", "\n\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()] + [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    a, b = map(int, input().split())\n    c = a + b\n    print(c)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    n, p = [int(i) for i in sys.stdin.readline().split()]\n    cars = [int(i) for i in sys.stdin.readline().split()]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n", "\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n", "import math\n\nimport sys\n\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\n\nmin_distance = max(distances)\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint min_distance\n", "\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n\ni = 0\nwhile i < n:\n    if i + m - 1 < n:\n        if distances[i] != distances[i + m - 1]:\n            print(distances[i + m - 1])\n            break\n    i += 1\n", "\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n + 1))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint min_distance\n", "\n\ndef main():\n    n = int(input())\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance / 2)\n\nif __name__ == '__main__':\n    main()\n"]