["\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right - left - sum(a[left:right+1]))\n", "\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n", "\n# https://www.codechef.com/problems/FLIPCOIN\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n", "\n\n# SOLUTION\n# Step 1: Find the start and end of the first contiguous segment\n# Step 2: Count the number of 0s between the start and end of the first contiguous segment\n# Step 3: Find the start and end of the next contiguous segment\n# Step 4: Count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: Repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n", "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"]