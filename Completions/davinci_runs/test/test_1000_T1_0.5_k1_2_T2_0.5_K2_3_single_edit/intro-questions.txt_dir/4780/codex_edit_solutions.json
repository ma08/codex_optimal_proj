["\n\ndef solution(n, m, line1, line2):\n    count = 0\n    # if len(line1) == 0 or len(line2) == 0:\n    #     return count\n\n    while len(line1) > 0 and len(line2) > 0:\n        if line1[0] == line2[-1]:\n            line1 = line1[1:]\n            line2 = line2[:-1]\n            count += 1\n        else:\n            if line1[0] > line2[-1]:\n                line1 = line1[1:]\n                line2 = line2[:-1]\n            else:\n                line1 = line1[1:]\n                line2 = line2[:-2]\n    return count\n\ndef main():\n    N1, N2 = (int(x) for x in input().split())\n    line1 = input()\n    line2 = input()\n    print(solution(N1, N2, line1, line2))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# SOLUTION\n\ndef swap_ants(a, b, t):\n    # Reverse lists if needed\n    if t % 2 == 1:\n        a, b = b, a\n\n    # Swap ants\n    for i in range(t // 2):\n        a.insert(i + 1, b[i])\n        b.insert(i + 1, a[-i - 1])\n        a.pop(-i - 1)\n        b.pop(i)\n\n    # Print result\n    print(''.join(a + b))\n\n\ndef main():\n    # Read input\n    a = [x for x in input()]\n    b = [x for x in input()]\n    t = int(input())\n\n    swap_ants(a, b, t)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Read input\nn1, n2 = [int(x) for x in input().split()]\na = [x for x in input().split()]\nb = [x for x in input().split()]\nt = int(input())\n\n# Reverse lists if needed\nif t % 2 == 1:\n    a, b = b, a\n\n# Swap ants\nfor i in range(t // 2):\n    a.insert(i + 1, b[i])\n    b.insert(i + 1, a[-i - 1])\n    a.pop(-i - 1)\n    b.pop(i)\n\n# Print result\nprint(''.join(a + b))\n", "\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:], s[:j] + s[i] + s[j+1:i] + s[j] + s[i+1:]\n\nn1, n2 = map(int, input().split())\nrow1 = input()\nrow2 = input()\nt = int(input())\n\nfor i in range(t):\n    if row1[0] != row2[0]:\n        row1, row2 = swap(row1, 0, 1)\n    else:\n        row1, row2 = swap(row1, 0, 1)\n\nprint(row1 + row2)\n", "\nN1, N2 = (int(x) for x in input().split())\nline1 = input()\nline2 = input()\nT = int(input())\n\ndef swap(line, i):\n    if i >= len(line):\n        return line\n    line = list(line)\n    line[i], line[i+1] = line[i+1], line[i]\n    return ''.join(line)\n\nfor _ in range(T):\n    line1 = swap(line1, 0)\n    line2 = swap(line2, -1)\n    if len(line1) == 0 or len(line2) == 0:\n        break\n    if line1[0] > line2[-1]:\n        line1 = swap(line1, 0)\n        line2 = swap(line2, -1)\n    elif line1[0] < line2[-1]:\n        line1 = swap(line1, 1)\n        line2 = swap(line2, -2)\n\nprint(line1 + line2)\n", "\n# SOLUTION\n\n# Read input\nn1, n2 = [int(x) for x in input().split()]\na = [x for x in input()]\nb = [x for x in input()]\nt = int(input())\n\n# Reverse lists if needed\nif t % 2 == 1:\n    a, b = b, a\n\n# Swap ants\nfor i in range(t // 2):\n    a.insert(i + 1, b[i])\n    b.insert(i + 1, a[-i - 1])\n    a.pop(-i - 1)\n    b.pop(i)\n\n# Print result\nprint(''.join(a + b))\n", "def main():\n    \"\"\"Ants\"\"\"\n    input_n1 = input()\n    input_n2 = input()\n    input_ant1 = input()\n    input_ant2 = input()\n    input_time = input()\n    if input_time % 2 == 0:\n        print(input_ant1 + input_ant2)\n    else:\n        print(input_ant2 + input_ant1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"Ants.\"\"\"\n    num_1 = int(input())\n    num_2 = int(input())\n    first_row = input()\n    second_row = input()\n    time = int(input())\n    row_1 = []\n    row_2 = []\n    for i in range(num_1):\n        row_1.append(first_row[i])\n    for i in range(num_2):\n        row_2.append(second_row[i])\n    for i in range(time):\n        for i in range(min(num_1, num_2)):\n            row_1[i], row_2[i] = row_2[i], row_1[i]\n    for i in range(num_1):\n        print(row_1[i], end=\"\")\n    for i in range(num_2):\n        print(row_2[i], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nN1, N2 = (int(x) for x in input().split())\nline1 = input()\nline2 = input()\nT = int(input())\n\n\ndef swap(line, i, j):\n    if i >= len(line):\n        return line\n    line = list(line)\n    line[i], line[i+1] = line[i+1], line[i]\n    return ''.join(line)\n\nfor _ in range(T):\n    line1 = swap(line1, 0)\n    line2 = swap(line2, -1)\n    if len(line1) == 0 or len(line2) == 0:\n        break\n    if line1[0] > line2[-1]:\n        line1 = swap(line1, 0)\n        line2 = swap(line2, -1)\n    elif line1[0] < line2[-1]:\n        line1 = swap(line1, 1)\n        line2 = swap(line2, -2)\n\nprint(line1 + line2)\n", "\n\n# SOLUTION \n\nn1, n2 = map(int, input().split())\n\nrow1 = input()\nrow2 = input()\n\nt = int(input())\n\nrow1 = list(row1)\nrow2 = list(row2)\n\nfor i in range(t):\n    if len(row1) > 0 and len(row2) > 0:\n        if row1[0] < row2[0]:\n            row1.append(row1[0])\n            row1.append(row2[0])\n            row1.pop(0)\n            row2.pop(0)\n        else:\n            row2.append(row2[0])\n            row2.append(row1[0])\n            row2.pop(0)\n            row1.pop(0)\n\nprint(''.join(row1 + row2))\n", "\n\ndef main():\n    \"\"\"Ants\"\"\"\n    num_1 = int(input()) #\u0e08\u0e33\u0e19\u0e27\u0e19\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e17\u0e35\u0e48 1\n    num_2 = int(input()) #\u0e08\u0e33\u0e19\u0e27\u0e19\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e17\u0e35\u0e48 2\n    first_row = input()\n    second_row = input()\n    time = int(input()) #\u0e08\u0e33\u0e19\u0e27\u0e19\u0e04\u0e23\u0e31\u0e49\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e25\u0e31\u0e1a\n    row_1 = []\n    row_2 = []\n    for i in range(num_1):\n        row_1.append(first_row[i])\n    for i in range(num_2):\n        row_2.append(second_row[i])\n    for i in range(time):\n        for i in range(min(num_1, num_2)): #\u0e2a\u0e25\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\n            row_1[i], row_2[i] = row_2[i], row_1[i]\n    for i in range(num_1):\n        print(row_1[i], end=\"\")\n    for i in range(num_2):\n        print(row_2[i], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:\n\nn1, n2 = map(int, input().split())\nrow1 = input()\nrow2 = input()\nt = int(input())\n\nfor i in range(t):\n    if row1[0] != row2[0]:\n        row1 = swap(row1, 0, 1)\n        row2 = swap(row2, 0, 1)\n    else:\n        row1 = swap(row1, 0, 1)\n        row2 = swap(row2, 1, 2)\n\nprint(row1 + row2)\n", "\n\ndef swap(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1: ]\n\nn1, n2 = map(int, input().split())\nrow1 = input()\nrow2 = input()\nt = int(input())\n\nfor i in range(t):\n    if row1[0] != row2[0]:\n        row1 = swap(row1, 0, 1)\n        row2 = swap(row2, 0, 1)\n    else:\n        row1 = swap(row1, 0, 1)\n        row2 = swap(row2, 1, 2)\n\nprint(row1 + row2)\n", "\n\n# SOLUTION\n\nimport sys\n\nn1, n2 = map(int, sys.stdin.readline().split())\n\nrow1 = sys.stdin.readline()\nrow2 = sys.stdin.readline()\n\nt = int(sys.stdin.readline())\n\nrow1 = list(row1)\nrow2 = list(row2)\n\nfor i in range(t):\n    if len(row1) > 0 and len(row2) > 0:\n        if row1[0] < row2[0]:\n            row1.append(row1[0])\n            row1.append(row2[0])\n            row1.pop(0)\n            row2.pop(0)\n        else:\n            row2.append(row2[0])\n            row2.append(row1[0])\n            row2.pop(0)\n            row1.pop(0)\n\nprint(''.join(row1 + row2))\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Get the number of ants in first and second rows\n    num_ants_first_row, num_ants_second_row = map(int, input().split())\n\n    # Get the order of ants in the first and second rows\n    order_ants_first_row = input()\n    order_ants_second_row = input()\n\n    # Get the number of seconds\n    num_seconds = int(input())\n\n    # Initialize the ant order\n    ant_order = \"\"\n\n    # If the number of seconds is odd, reverse the order of the ants\n    if num_seconds % 2 == 1:\n        order_ants_first_row = order_ants_first_row[::-1]\n        order_ants_second_row = order_ants_second_row[::-1]\n\n    # Get the number of ants that will be affected\n    num_ants_affected = min(num_ants_first_row, num_ants_second_row)\n\n    for i in range(num_ants_affected):\n        ant_order += order_ants_first_row[i]\n        ant_order += order_ants_second_row[i]\n\n    # If the number of ants in the first row is greater than the number of ants\n    # in the second row, add the remaining ants to the ant order\n    if num_ants_first_row > num_ants_second_row:\n        for i in range(num_ants_affected, num_ants_first_row):\n            ant_order += order_ants_first_row[i]\n\n    # If the number of ants in the second row is greater than the number of ants\n    # in the first row, add the remaining ants to the ant order\n    elif num_ants_second_row > num_ants_first_row:\n        for i in range(num_ants_affected, num_ants_second_row):\n            ant_order += order_ants_second_row[i]\n\n    # Print the ant order\n    print(ant_order)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n\n    \"\"\"\n\n    # Get the number of ants in first and second rows\n    num_ants_first_row, num_ants_second_row = map(int, input().split())\n\n    # Get the order of ants in the first and second rows\n    order_ants_first_row = input()\n    order_ants_second_row = input()\n\n    # Get the number of seconds\n    num_seconds = int(input())\n\n    # Initialize the ant order\n    ant_order = \"\"\n\n    # If the number of seconds is odd, reverse the order of the ants\n    if num_seconds % 2 == 1:\n        order_ants_first_row = order_ants_first_row[::-1]\n        order_ants_second_row = order_ants_second_row[::-1]\n\n    # Get the number of ants that will be affected\n    num_ants_affected = min(num_ants_first_row, num_ants_second_row)\n\n    for i in range(num_ants_affected):\n        ant_order += order_ants_first_row[i]\n        ant_order += order_ants_second_row[i]\n\n    # If there are remaining ants in the first row, add them to the ant order\n    for i in range(num_ants_affected, num_ants_first_row):\n        ant_order += order_ants_first_row[i]\n\n    # If there are remaining ants in the second row, add them to the ant order\n    for i in range(num_ants_affected, num_ants_second_row):\n        ant_order += order_ants_second_row[i]\n\n    # Print the ant order\n    print(ant_order)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# SOLUTION\n\nn1, n2 = map(int, input().split())\n\nrow1 = input()\nrow2 = input()\n\nt = int(input())\n\nrow1 = list(row1)\nrow2 = list(row2)\n\nfor i in range(t):\n    if len(row1) > 0 and len(row2) > 0:\n        if row1[0] < row2[0]:\n            row1.append(row1[0])\n            row1.append(row2[0])\n            row1.pop(0)\n            row2.pop(0)\n        else:\n            row2.append(row2[0])\n            row2.append(row1[0])\n            row2.pop(0)\n            row1.pop(0)\n\nprint(''.join(row1 + row2))\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    n1, n2 = input().split()\n    row1 = list(input())\n    row2 = list(input())\n    t = int(input())\n\n    # The ants will stay in their original position if t is even\n    if t % 2 == 0:\n        print(\"\".join(row1 + row2))\n    # Otherwise, the ants will swap places\n    else:\n        print(\"\".join(row2 + row1))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    row1 = list(input())\n    row2 = list(input())\n    t = input()\n\n    # The ants will stay in their original position if t is even\n    if int(t) % 2 == 0:\n        print(\"\".join(row1 + row2))\n    # Otherwise, the ants will swap places\n    else:\n        print(\"\".join(row2 + row1))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Get the number of ants in first and second rows\n    num_ants_first_row, num_ants_second_row = map(int, input().split())\n\n    # Get the order of ants in the first and second rows\n    order_ants_first_row = input().strip()\n    order_ants_second_row = input().strip()\n\n    # Get the number of seconds\n    num_seconds = int(input())\n\n    # Initialize the ant order\n    ant_order = \"\"\n\n    # If the number of seconds is odd, reverse the order of the ants\n    if num_seconds % 2 == 1:\n        order_ants_first_row = order_ants_first_row[::-1]\n        order_ants_second_row = order_ants_second_row[::-1]\n\n    # Get the number of ants that will be affected\n    num_ants_affected = min(num_ants_first_row, num_ants_second_row)\n\n    for i in range(num_ants_affected):\n        ant_order += order_ants_first_row[i]\n        ant_order += order_ants_second_row[i]\n\n    # If there are remaining ants in the first row, add them to the ant order\n    for i in range(num_ants_affected, num_ants_first_row):\n        ant_order += order_ants_first_row[i]\n\n    # If there are remaining ants in the second row, add them to the ant order\n    for i in range(num_ants_affected, num_ants_second_row):\n        ant_order += order_ants_second_row[i]\n\n    # Print the ant order\n    print(ant_order)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"Ants\"\"\"\n    input_ant1 = input()\n    input_ant2 = input()\n    input_time = int(input())\n    if input_time % 2 == 0:\n        print(input_ant1 + input_ant2)\n    else:\n        print(input_ant2 + input_ant1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"The main function\"\"\"\n    # Read the input\n    n1, n2 = [int(x) for x in input().split()]\n    row1 = list(input())\n    row2 = list(input())\n    t = int(input())\n\n    # The ants will stay in their original position if t is even\n    if t % 2 == 0:\n        print(\"\".join(row1 + row2))\n    # Otherwise, the ants will swap places\n    else:\n        print(\"\".join(row2 + row1))\n\nif __name__ == \"__main__\":\n    main()\n"]