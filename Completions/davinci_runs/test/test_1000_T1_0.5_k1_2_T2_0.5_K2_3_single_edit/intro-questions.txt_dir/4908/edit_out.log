2022-04-16 02:35:47.758693 num operations 1
2022-04-16 02:35:47.758708 size on input set 1
2022-04-16 02:35:59.984592 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Solution:\n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\nif a + b == c:\n    print(str(a) + \"+\" + str(b) + \"=\" + str(c))\nelif a - b == c:\n    print(str(a) + \"-\" + str(b) + \"=\" + str(c))\nelif a * b == c:\n    print(str(a) + \"*\" + str(b) + \"=\" + str(c))\nelif a / b == c:\n    print(str(a) + \"/\" + str(b) + \"=\" + str(c))\nelif a == b + c:\n    print(str(a) + \"=\" + str(b) + \"+\" + str(c))\nelif a == b - c:\n    print(str(a) + \"=\" + str(b) + \"-\" + str(c))\nelif a == b * c:\n    print(str(a) + \"=\" + str(b) + \"*\" + str(c))\nelif a == b / c:\n    print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n"
    },
    {
      "index": 1,
      "text": "\n\n#Solution:\n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\nif a + b == c:\n    print(str(a) + \"+\" + str(b) + \"=\" + str(c))\nelif a - b == c:\n    print(str(a) + \"-\" + str(b) + \"=\" + str(c))\nelif a * b == c:\n    print(str(a) + \"*\" + str(b) + \"=\" + str(c))\nelif a / b == c:\n    print(str(a) + \"/\" + str(b) + \"=\" + str(c))\nelif a == b + c:\n    print(str(a) + \"=\" + str(b) + \"+\" + str(c))\nelif a == b - c:\n    print(str(a) + \"=\" + str(b) + \"-\" + str(c))\nelif a == b * c:\n    print(str(a) + \"=\" + str(b) + \"*\" + str(c))\nelif a == b / c:\n    print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n"
    },
    {
      "index": 2,
      "text": "\n# Solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    }
  ],
  "created": 1650076547,
  "object": "edit"
}
2022-04-16 02:35:59.984822 fix syntax errors 3 ['\n\n#Solution:\n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\nif a + b == c:\n    print(str(a) + "+" + str(b) + "=" + str(c))\nelif a - b == c:\n    print(str(a) + "-" + str(b) + "=" + str(c))\nelif a * b == c:\n    print(str(a) + "*" + str(b) + "=" + str(c))\nelif a / b == c:\n    print(str(a) + "/" + str(b) + "=" + str(c))\nelif a == b + c:\n    print(str(a) + "=" + str(b) + "+" + str(c))\nelif a == b - c:\n    print(str(a) + "=" + str(b) + "-" + str(c))\nelif a == b * c:\n    print(str(a) + "=" + str(b) + "*" + str(c))\nelif a == b / c:\n    print(str(a) + "=" + str(b) + "/" + str(c))\n', '\n\n#Solution:\n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\nif a + b == c:\n    print(str(a) + "+" + str(b) + "=" + str(c))\nelif a - b == c:\n    print(str(a) + "-" + str(b) + "=" + str(c))\nelif a * b == c:\n    print(str(a) + "*" + str(b) + "=" + str(c))\nelif a / b == c:\n    print(str(a) + "/" + str(b) + "=" + str(c))\nelif a == b + c:\n    print(str(a) + "=" + str(b) + "+" + str(c))\nelif a == b - c:\n    print(str(a) + "=" + str(b) + "-" + str(c))\nelif a == b * c:\n    print(str(a) + "=" + str(b) + "*" + str(c))\nelif a == b / c:\n    print(str(a) + "=" + str(b) + "/" + str(c))\n', '\n# Solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n']
2022-04-16 02:35:59.984861 size on output set 2
2022-04-16 02:35:59.984874 num operations 1
2022-04-16 02:35:59.984881 size on input set 1
2022-04-16 02:36:14.685778 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \" - \" + str(numbers[1]) + \" = \" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \" * \" + str(numbers[1]) + \" = \" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \" / \" + str(numbers[1]) + \" = \" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \" = \" + str(numbers[1]) + \" + \" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \" = \" + str(numbers[1]) + \" - \" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \" = \" + str(numbers[1]) + \" * \" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \" = \" + str(numbers[1]) + \" / \" + str(numbers[2]))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef plus(a, b):\n    return a + b\n\ndef minus(a, b):\n    return a - b\n\ndef multiply(a, b):\n    return a * b\n\ndef divide(a, b):\n    return a / b\n\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    },
    {
      "index": 2,
      "text": "\n\nnumbers = input().split()  # input() a string and split() it into a list of strings\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])  # convert each element in the list into integer\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    }
  ],
  "created": 1650076560,
  "object": "edit"
}
2022-04-16 02:36:14.685995 fix syntax errors 3 ['\n\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + " - " + str(numbers[1]) + " = " + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + " * " + str(numbers[1]) + " = " + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + " / " + str(numbers[1]) + " = " + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + " = " + str(numbers[1]) + " + " + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + " = " + str(numbers[1]) + " - " + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + " = " + str(numbers[1]) + " * " + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + " = " + str(numbers[1]) + " / " + str(numbers[2]))\n', '\n\ndef plus(a, b):\n    return a + b\n\ndef minus(a, b):\n    return a - b\n\ndef multiply(a, b):\n    return a * b\n\ndef divide(a, b):\n    return a / b\n\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n', '\n\nnumbers = input().split()  # input() a string and split() it into a list of strings\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])  # convert each element in the list into integer\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n']
2022-04-16 02:36:14.686130 size on output set 3
2022-04-16 02:36:14.686142 num operations 1
2022-04-16 02:36:14.686147 size on input set 1
2022-04-16 02:36:27.280637 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n"
    },
    {
      "index": 2,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]: print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]: print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]: print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n"
    }
  ],
  "created": 1650076574,
  "object": "edit"
}
2022-04-16 02:36:27.280834 fix syntax errors 3 ['\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n', '\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n', '\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]: print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]: print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]: print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n']
2022-04-16 02:36:27.280864 size on output set 2
2022-04-16 02:36:27.280875 num operations 1
2022-04-16 02:36:27.280880 size on input set 1
2022-04-16 02:36:39.768988 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + ' + ' + str(nums[1]) + ' = ' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + ' - ' + str(nums[1]) + ' = ' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + ' * ' + str(nums[1]) + ' = ' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + ' / ' + str(nums[1]) + ' = ' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + ' = ' + str(nums[1]) + ' + ' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + ' = ' + str(nums[1]) + ' - ' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + ' = ' + str(nums[1]) + ' * ' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + ' = ' + str(nums[1]) + ' / ' + str(nums[2]))\n"
    },
    {
      "index": 2,
      "text": "\nnums = [int(x) for x in input().split()]\n\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    }
  ],
  "created": 1650076587,
  "object": "edit"
}
2022-04-16 02:36:39.769170 fix syntax errors 3 ["\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + ' + ' + str(nums[1]) + ' = ' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + ' - ' + str(nums[1]) + ' = ' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + ' * ' + str(nums[1]) + ' = ' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + ' / ' + str(nums[1]) + ' = ' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + ' = ' + str(nums[1]) + ' + ' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + ' = ' + str(nums[1]) + ' - ' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + ' = ' + str(nums[1]) + ' * ' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + ' = ' + str(nums[1]) + ' / ' + str(nums[2]))\n", "\nnums = [int(x) for x in input().split()]\n\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"]
2022-04-16 02:36:39.769271 size on output set 3
2022-04-16 02:36:39.769282 num operations 1
2022-04-16 02:36:39.769287 size on input set 1
2022-04-16 02:36:52.180663 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\n\n# print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (b, nums[2]), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0] and answer[1] == answer[3] and answer[3] == answer[5]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[2][1]))\n        sys.exit()\n\nprint(\"no solution\")\n"
    },
    {
      "index": 1,
      "text": "\nimport random\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()nums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\"][i], (a, nums[2]), [\"+\"][j], (nums[0], b), [\"+\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1])\n        break\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]) + \")\")\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]) + \")\")\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b) + \")\")\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    }
  ],
  "created": 1650076599,
  "object": "edit"
}
2022-04-16 02:36:52.180898 fix syntax errors 3 ['\n\n\n\n# print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (b, nums[2]), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0] and answer[1] == answer[3] and answer[3] == answer[5]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[2][1]))\n        sys.exit()\n\nprint("no solution")\n', '\nimport random\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()nums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+"][i], (a, nums[2]), ["+"][j], (nums[0], b), ["+"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1])\n        break\n', '\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]) + ")")\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]) + ")")\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b) + ")")\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n']
2022-04-16 02:36:52.180951 size on output set 3
2022-04-16 02:36:52.180961 num operations 1
2022-04-16 02:36:52.180966 size on input set 1
2022-04-16 02:37:16.119460 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations\n    if c % gcd(a, b):\n        if c // gcd(a, b) == a + b or c == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b or c == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b or c == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b or c == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a or c == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\na=int(input())\nb=int(input())\nc=int(input())\nif c==a+b:\n    print (str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif c==a-b:\n    print (str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif c==a*b:\n    print (str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif c==a/b:\n    print (str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif c==b/a:\n    print (str(b)+\"/\"+str(a)+\"=\"+str(c))\nelif c==a/math.gcd(a,b):\n    print (str(a)+\"/\"+str(math.gcd(a,b))+\"=\"+str(c))\nelif c==b/math.gcd(a,b):\n    print (str(b)+\"/\"+str(math.gcd(a,b))+\"=\"+str(c))\n"
    }
  ],
  "created": 1650076612,
  "object": "edit"
}
2022-04-16 02:37:16.119720 fix syntax errors 3 ['\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations\n    if c % gcd(a, b):\n        if c // gcd(a, b) == a + b or c == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b or c == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b or c == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b or c == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a or c == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\na=int(input())\nb=int(input())\nc=int(input())\nif c==a+b:\n    print (str(a)+"+"+str(b)+"="+str(c))\nelif c==a-b:\n    print (str(a)+"-"+str(b)+"="+str(c))\nelif c==a*b:\n    print (str(a)+"*"+str(b)+"="+str(c))\nelif c==a/b:\n    print (str(a)+"/"+str(b)+"="+str(c))\nelif c==b/a:\n    print (str(b)+"/"+str(a)+"="+str(c))\nelif c==a/math.gcd(a,b):\n    print (str(a)+"/"+str(math.gcd(a,b))+"="+str(c))\nelif c==b/math.gcd(a,b):\n    print (str(b)+"/"+str(math.gcd(a,b))+"="+str(c))\n']
2022-04-16 02:37:16.119770 size on output set 3
2022-04-16 02:37:16.119786 num operations 1
2022-04-16 02:37:16.119791 size on input set 1
2022-04-16 02:37:17.974102 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / c and b % c == 0:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b // c:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650076636,
  "object": "edit"
}
2022-04-16 02:37:17.974353 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / c and b % c == 0:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b // c:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n']
2022-04-16 02:37:17.974389 size on output set 3
2022-04-16 02:37:17.974399 num operations 1
2022-04-16 02:37:17.974404 size on input set 1
2022-04-16 02:37:21.644230 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c) \n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:   \n        return '%d/%d=%d' % (a, b, c)  \n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n    if a == b + c:\n        return '%d=%d+%d' % (a, b, c)\n    if a == b - c:\n        return '%d=%d-%d' % (a, b, c)\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650076638,
  "object": "edit"
}
2022-04-16 02:37:21.644435 fix syntax errors 3 ["\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c) \n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:   \n        return '%d/%d=%d' % (a, b, c)  \n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n    if a == b + c:\n        return '%d=%d+%d' % (a, b, c)\n    if a == b - c:\n        return '%d=%d-%d' % (a, b, c)\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:37:21.644470 size on output set 3
