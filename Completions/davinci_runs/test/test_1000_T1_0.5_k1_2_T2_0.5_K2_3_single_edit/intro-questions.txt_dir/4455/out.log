2022-04-09 20:16:22.080700 """
In BerSoft $n$ programmers work, the programmer $i$ is characterized by a skill $r_i$.

A programmer $a$ can be a mentor of a programmer $b$ if and only if the skill of the programmer $a$ is strictly greater than the skill of the programmer $b$ $(r_a > r_b)$ and programmers $a$ and $b$ are not in a quarrel.

You are given the skills of each programmers and a list of $k$ pairs of the programmers, which are in a quarrel (pairs are unordered). For each programmer $i$, find the number of programmers, for which the programmer $i$ can be a mentor.


-----Input-----

The first line contains two integers $n$ and $k$ $(2 \le n \le 2 \cdot 10^5$, $0 \le k \le \min(2 \cdot 10^5, \frac{n \cdot (n - 1)}{2}))$ — total number of programmers and number of pairs of programmers which are in a quarrel.

The second line contains a sequence of integers $r_1, r_2, \dots, r_n$ $(1 \le r_i \le 10^{9})$, where $r_i$ equals to the skill of the $i$-th programmer.

Each of the following $k$ lines contains two distinct integers $x$, $y$ $(1 \le x, y \le n$, $x \ne y)$ — pair of programmers in a quarrel. The pairs are unordered, it means that if $x$ is in a quarrel with $y$ then $y$ is in a quarrel with $x$. Guaranteed, that for each pair $(x, y)$ there are no other pairs $(x, y)$ and $(y, x)$ in the input.


-----Output-----

Print $n$ integers, the $i$-th number should be equal to the number of programmers, for which the $i$-th programmer can be a mentor. Programmers are numbered in the same order that their skills are given in the input.


-----Examples-----
Input
4 2
10 4 10 15
1 2
4 3

Output
0 0 1 2 

Input
10 4
5 4 1 5 4 3 7 1 2 5
4 6
2 1
10 8
3 5

Output
5 4 0 5 3 3 9 0 2 5 



-----Note-----

In the first example, the first programmer can not be mentor of any other (because only the second programmer has a skill, lower than first programmer skill, but they are in a quarrel). The second programmer can not be mentor of any other programmer, because his skill is minimal among others. The third programmer can be a mentor of the second programmer. The fourth programmer can be a mentor of the first and of the second programmers. He can not be a mentor of the third programmer, because they are in a quarrel.
"""
2022-04-09 20:16:22.080744 --------------------------
2022-04-09 20:16:37.436232 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\nskills = list(map(int, input().split()))\nquarrels = []\nfor i in range(k):\n    quarrels.append(list(map(int, input().split())))\n\nmentors = [0] * n\nfor i in range(n):\n    for j in range(i+1, n):\n        if skills[i] > skills[j]:\n            if [i+1, j+1] not in quarrels:\n                mentors[i] += 1\n        if skills[i] < skills[j]:\n            if [j+1, i+1] not in quarrels:\n                mentors[i] += 1\n\nprint(*mentors)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    \n    n, k = map(int, sys.stdin.readline().split())\n    skills = list(map(int, sys.stdin.readline().split()))\n    pairs = []\n    \n    for i in range(k):\n        pairs.append(list(map(int, sys.stdin.readline().split())))\n    \n    mentors = [0]*n\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if [i+1, j+1] in pairs:\n                continue\n            if skills[i] > skills[j]:\n                mentors[i] += 1\n    \n    print(\" \".join(map(str, mentors)))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649549782,
  "id": "cmpl-4vFXaZIEU7qWkVIiL1Hx98nwNglrF",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:16:37.436384 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\nskills = list(map(int, input().split()))\nquarrels = []\nfor i in range(k):\n    quarrels.append(list(map(int, input().split())))\n\nmentors = [0] * n\nfor i in range(n):\n    for j in range(i+1, n):\n        if skills[i] > skills[j]:\n            if [i+1, j+1] not in quarrels:\n                mentors[i] += 1\n        if skills[i] < skills[j]:\n            if [j+1, i+1] not in quarrels:\n                mentors[i] += 1\n\nprint(*mentors)"
}
2022-04-09 20:16:37.436409 REASON stop
2022-04-09 20:16:37.437700 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    \n    n, k = map(int, sys.stdin.readline().split())\n    skills = list(map(int, sys.stdin.readline().split()))\n    pairs = []\n    \n    for i in range(k):\n        pairs.append(list(map(int, sys.stdin.readline().split())))\n    \n    mentors = [0]*n\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if [i+1, j+1] in pairs:\n                continue\n            if skills[i] > skills[j]:\n                mentors[i] += 1\n    \n    print(\" \".join(map(str, mentors)))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 20:16:37.437772 REASON stop
