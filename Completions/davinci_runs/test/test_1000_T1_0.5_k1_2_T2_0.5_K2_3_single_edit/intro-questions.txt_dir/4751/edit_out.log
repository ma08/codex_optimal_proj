2022-04-16 01:04:39.581595 num operations 1
2022-04-16 01:04:39.581612 size on input set 1
2022-04-16 01:04:41.269602 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n"
    },
    {
      "index": 1,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n"
    }
  ],
  "created": 1650071079,
  "object": "edit"
}
2022-04-16 01:04:41.269816 fix syntax errors 3 ['\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n']
2022-04-16 01:04:41.269887 size on output set 2
2022-04-16 01:04:41.269899 num operations 1
2022-04-16 01:04:41.269904 size on input set 1
2022-04-16 01:04:43.908479 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 1,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    }
  ],
  "created": 1650071081,
  "object": "edit"
}
2022-04-16 01:04:43.908664 fix syntax errors 3 ['# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n']
2022-04-16 01:04:43.908696 size on output set 3
2022-04-16 01:04:43.908716 num operations 1
2022-04-16 01:04:43.908720 size on input set 1
2022-04-16 01:04:45.357469 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 1,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    }
  ],
  "created": 1650071083,
  "object": "edit"
}
2022-04-16 01:04:45.357853 fix syntax errors 3 ['# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n']
2022-04-16 01:04:45.357891 size on output set 2
2022-04-16 01:04:45.357904 num operations 1
2022-04-16 01:04:45.357910 size on input set 1
2022-04-16 01:04:49.786654 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None or head.next == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None:\n        if fast == slow: \n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 1,
      "text": "\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 2,
      "text": "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    }
  ],
  "created": 1650071085,
  "object": "edit"
}
2022-04-16 01:04:49.786852 fix syntax errors 3 ['\n"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head == None or head.next == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None:\n        if fast == slow: \n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '\n"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n']
2022-04-16 01:04:49.786888 size on output set 3
2022-04-16 01:04:49.786900 num operations 1
2022-04-16 01:04:49.786905 size on input set 1
2022-04-16 01:04:53.469262 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    },
    {
      "index": 1,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    },
    {
      "index": 2,
      "text": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n\n\n\n\n        return False\n"
    }
  ],
  "created": 1650071089,
  "object": "edit"
}
2022-04-16 01:04:53.469449 fix syntax errors 3 ['\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n', '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n\n\n\n\n        return False\n']
2022-04-16 01:04:53.469549 size on output set 2
2022-04-16 01:04:53.469560 num operations 1
2022-04-16 01:04:53.469566 size on input set 1
2022-04-16 01:05:01.464457 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution(object):\n    def isUnivalTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        \n        left_unival = True\n        right_unival = True\n        \n        if root.left:\n            if root.val != root.left.val:\n                return False\n            left_unival = self.isUnivalTree(root.left)\n        \n        if root.right:\n            if root.val != root.right.val:\n                return False\n            right_unival = self.isUnivalTree(root.right)\n        \n        return left_unival and right_unival\n"
    },
    {
      "index": 1,
      "text": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 2,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n\n\na = Solution()\na.hasCycle()\n        return True\n"
    }
  ],
  "created": 1650071093,
  "object": "edit"
}
2022-04-16 01:05:01.464680 fix syntax errors 3 ['# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution(object):\n    def isUnivalTree(self, root):\n        """\n        :type root: TreeNode\n        :rtype: bool\n        """\n        if not root:\n            return True\n        \n        left_unival = True\n        right_unival = True\n        \n        if root.left:\n            if root.val != root.left.val:\n                return False\n            left_unival = self.isUnivalTree(root.left)\n        \n        if root.right:\n            if root.val != root.right.val:\n                return False\n            right_unival = self.isUnivalTree(root.right)\n        \n        return left_unival and right_unival\n', '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n\n\na = Solution()\na.hasCycle()\n        return True\n']
2022-04-16 01:05:01.464737 size on output set 3
2022-04-16 01:05:01.464750 num operations 1
2022-04-16 01:05:01.464757 size on input set 1
2022-04-16 01:05:07.889176 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 1,
      "text": "\n\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tif not head:\n\t\t\treturn False\n\t\tslow = head\n\t\tfast = head\n\t\twhile fast.next and fast.next.next:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\tif slow == fast:\n\t\t\t\treturn True\n\t\treturn False\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    }
  ],
  "created": 1650071101,
  "object": "edit"
}
2022-04-16 01:05:07.889382 fix syntax errors 3 ['\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tif not head:\n\t\t\treturn False\n\t\tslow = head\n\t\tfast = head\n\t\twhile fast.next and fast.next.next:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\tif slow == fast:\n\t\t\t\treturn True\n\t\treturn False\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n']
2022-04-16 01:05:07.889421 size on output set 3
2022-04-16 01:05:07.889455 num operations 1
2022-04-16 01:05:07.889467 size on input set 1
2022-04-16 01:05:13.081357 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 1,
      "text": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast:\n            if fast == slow:\n                return True\n\n            if not fast.next:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    }
  ],
  "created": 1650071107,
  "object": "edit"
}
2022-04-16 01:05:13.081630 fix syntax errors 3 ['# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if not head:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast:\n            if fast == slow:\n                return True\n\n            if not fast.next:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if not head:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n']
2022-04-16 01:05:13.081671 size on output set 3
