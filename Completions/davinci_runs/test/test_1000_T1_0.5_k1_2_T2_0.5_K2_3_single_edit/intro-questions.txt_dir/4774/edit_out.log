2022-04-16 01:18:13.580314 num operations 1
2022-04-16 01:18:13.580332 size on input set 1
2022-04-16 01:18:16.088760 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    }
  ],
  "created": 1650071893,
  "object": "edit"
}
2022-04-16 01:18:16.089062 fix syntax errors 3 ['\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n', '\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n', '\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n']
2022-04-16 01:18:16.089185 size on output set 1
2022-04-16 01:18:16.089200 num operations 1
2022-04-16 01:18:16.089206 size on input set 1
2022-04-16 01:18:31.227509 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '+':\n        if op2 == '+':\n            return a + b == c + d\n        if op2 == '-':\n            return a + b == c - d\n        if op2 == '*':\n            return a + b == c * d\n        if op2 == '/':\n            return a + b == c // d\n    if op1 == '-':\n        if op2 == '+':\n            return a - b == c + d\n        if op2 == '-':\n            return a - b == c - d\n        if op2 == '*':\n            return a - b == c * d\n        if op2 == '/':\n            return a - b == c // d\n    if op1 == '*':\n        if op2 == '+':\n            return a * b == c + d\n        if op2 == '-':\n            return a * b == c - d\n        if op2 == '*':\n            return a * b == c * d\n        if op2 == '/':\n            return a * b == c // d\n    if op1 == '/':\n        if op2 == '+':\n            return a // b == c + d\n        if op2 == '-':\n            return a // b == c - d\n        if op2 == '*':\n            return a // b == c * d\n        if op2 == '/':\n            return a // b == c // d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = set()\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.add(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c // d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c // d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c // d\n    if op1 == '/' and op2 == '*':\n        return a // b == c * d\n    if op1 == '/' and op2 == '+':\n        return a // b == c + d\n    if op1 == '/' and op2 == '-':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append('{} {} {} = {} {} {}'.format(a, op1, b, c, op2, d))\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c // d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c // d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c // d\n    if op1 == '/' and op2 == '*':\n        return a // b == c * d\n    if op1 == '/' and op2 == '+':\n        return a // b == c + d\n    if op1 == '/' and op2 == '-':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append('{} {} {} = {} {} {}'.format(a, op1, b, c, op2, d))\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650071896,
  "object": "edit"
}
2022-04-16 01:18:31.227709 fix syntax errors 3 ['\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'+\':\n        if op2 == \'+\':\n            return a + b == c + d\n        if op2 == \'-\':\n            return a + b == c - d\n        if op2 == \'*\':\n            return a + b == c * d\n        if op2 == \'/\':\n            return a + b == c // d\n    if op1 == \'-\':\n        if op2 == \'+\':\n            return a - b == c + d\n        if op2 == \'-\':\n            return a - b == c - d\n        if op2 == \'*\':\n            return a - b == c * d\n        if op2 == \'/\':\n            return a - b == c // d\n    if op1 == \'*\':\n        if op2 == \'+\':\n            return a * b == c + d\n        if op2 == \'-\':\n            return a * b == c - d\n        if op2 == \'*\':\n            return a * b == c * d\n        if op2 == \'/\':\n            return a * b == c // d\n    if op1 == \'/\':\n        if op2 == \'+\':\n            return a // b == c + d\n        if op2 == \'-\':\n            return a // b == c - d\n        if op2 == \'*\':\n            return a // b == c * d\n        if op2 == \'/\':\n            return a // b == c // d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = set()\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.add(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', '\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c // d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c // d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c // d\n    if op1 == \'/\' and op2 == \'*\':\n        return a // b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a // b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(\'{} {} {} = {} {} {}\'.format(a, op1, b, c, op2, d))\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', '\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c // d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c // d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c // d\n    if op1 == \'/\' and op2 == \'*\':\n        return a // b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a // b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(\'{} {} {} = {} {} {}\'.format(a, op1, b, c, op2, d))\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:18:31.227834 size on output set 2
2022-04-16 01:18:31.227851 num operations 1
2022-04-16 01:18:31.227857 size on input set 1
2022-04-16 01:18:36.697222 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\n\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n"
    }
  ],
  "created": 1650071911,
  "object": "edit"
}
2022-04-16 01:18:36.697435 fix syntax errors 3 ['\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\n\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\n']
2022-04-16 01:18:36.697465 size on output set 3
2022-04-16 01:18:36.697485 num operations 1
2022-04-16 01:18:36.697490 size on input set 1
2022-04-16 01:18:39.892011 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d \nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    }
  ],
  "created": 1650071916,
  "object": "edit"
}
2022-04-16 01:18:39.892430 fix syntax errors 3 ["\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d \nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"]
2022-04-16 01:18:39.892491 size on output set 3
2022-04-16 01:18:39.892504 num operations 1
2022-04-16 01:18:39.892510 size on input set 1
2022-04-16 01:19:06.524464 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import itertools\n\n\ndef check(a, b, c, d, op1, op2, op3):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if eval(str(a) + op1 + str(b)) == eval(str(c) + op2 + str(d)):\n            return True\n    return Falsea\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650071919,
  "object": "edit"
}
2022-04-16 01:19:06.524763 fix syntax errors 3 ["import itertools\n\n\ndef check(a, b, c, d, op1, op2, op3):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if eval(str(a) + op1 + str(b)) == eval(str(c) + op2 + str(d)):\n            return True\n    return Falsea\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:19:06.524829 size on output set 3
2022-04-16 01:19:06.524845 num operations 1
2022-04-16 01:19:06.524850 size on input set 1
2022-04-16 01:19:12.619194 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 1,
      "text": "\n"
    },
    {
      "index": 2,
      "text": "\n\n# TODO: Make this faster.\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    }
  ],
  "created": 1650071946,
  "object": "edit"
}
2022-04-16 01:19:12.619511 fix syntax errors 3 ["\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", '\n', "\n\n# TODO: Make this faster.\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"]
2022-04-16 01:19:12.619624 size on output set 3
2022-04-16 01:19:12.619636 num operations 1
2022-04-16 01:19:12.619641 size on input set 1
2022-04-16 01:19:16.321754 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{} {} {} == {} {} {}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 1,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(str(a)+p[0]+str(b) == str(c)+p[1]+str(d)):\n        valid.append(str(a) + p[0] + str(b) + \" = \" + str(c) + p[1] + str(d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 2,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    }
  ],
  "created": 1650071952,
  "object": "edit"
}
2022-04-16 01:19:16.321981 fix syntax errors 3 ['\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval("{} {} {} == {} {} {}".format(a,p[0],b,c,p[1],d)):\n        valid.append("{} {} {} = {} {} {}".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', '\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval(str(a)+p[0]+str(b) == str(c)+p[1]+str(d)):\n        valid.append(str(a) + p[0] + str(b) + " = " + str(c) + p[1] + str(d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', '\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval("{}{}{} == {}{}{}".format(a,p[0],b,c,p[1],d)):\n        valid.append("{} {} {} = {} {} {}".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n']
2022-04-16 01:19:16.322011 size on output set 3
2022-04-16 01:19:16.322022 num operations 1
2022-04-16 01:19:16.322027 size on input set 1
2022-04-16 01:19:25.563328 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na, b, c, d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 1,
      "text": "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"Problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 2,
      "text": "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na, b, c, d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    }
  ],
  "created": 1650071956,
  "object": "edit"
}
2022-04-16 01:19:25.563617 fix syntax errors 3 ['\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na, b, c, d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("Problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na, b, c, d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n']
2022-04-16 01:19:25.563658 size on output set 2
