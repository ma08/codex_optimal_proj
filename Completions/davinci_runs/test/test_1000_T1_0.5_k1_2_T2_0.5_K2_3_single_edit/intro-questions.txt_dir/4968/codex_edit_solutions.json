["\n\ndef main():\n    n, s, r = map(int, input().split())\n    damaged = set(map(int, input().split()))\n    reserve = set(map(int, input().split()))\n    count = len(damaged)\n    for i in range(1, n+1):\n        if i in damaged:\n            for j in range(i-1, i+2):\n                if j in reserve:\n                    reserve.remove(j)\n                    break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(damaged, reserve):\n    for i in damaged:\n        if i-1 in reserve:\n            reserve.remove(i-1)\n            damaged.remove(i)\n        elif i+1 in reserve:\n            reserve.remove(i-1)\n            reserve.remove(i+1)\n            damaged.remove(i)\n    return len(damaged)\n\nprint check(damaged, reserve)\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(i) for i in sys.stdin.readline().split()] # number of seats, number of broken seats, number of reserve seats\n    broken = [int(i) for i in sys.stdin.readline().split()]\n    reserve = [int(i) for i in sys.stdin.readline().split()]\n    total = 0 # total number of people who will be standing\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n-1 in reserve:\n                reserve.remove(n-1)\n            else:\n                total += 1\n        else:\n            if i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = list(map(int, sys.stdin.readline().split()))\nreserve = list(map(int, sys.stdin.readline().split()))\n\ndef check(reserve, damaged):\n    for i in damaged:\n        if i - 1 in reserve:\n            reserve.remove(i - 1)\n            damaged.remove(i)\n        elif i + 1 in reserve:\n            reserve.remove(i + 1)\n            damaged.remove(i)\n    return len(damaged)\n\nprint check(reserve, damaged)\n", "\n\nimport sys\n\ndef main():\n    n, s, r = (int(x) for x in sys.stdin.readline().split())\n    damaged = set(int(x) for x in sys.stdin.readline().split())\n    reserve = set(int(x) for x in sys.stdin.readline().split())\n    print(max(0, s - len(reserve.intersection(damaged.union({x - 1 for x in damaged}).union({x + 1 for x in damaged}))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nN, S, R = map(int, input().split())\nD = set(map(int, input().split()))\nB = set(map(int, input().split()))\n\n\nc = 0\n\nfor i in range(1, N+1):\n    if i in D:\n        if i-1 in B:\n            B.remove(i-1)\n        elif i+1 in B:\n            B.remove(i+1)\n        else:\n            c += 1\nprint(c)\n", "import sys\n\ndef main():\n    n, s, r = map(int, sys.stdin.readline().split())\n    damaged = set(map(int, sys.stdin.readline().split()))\n    reserve = set(map(int, sys.stdin.readline().split()))\n    count = 0\n    for i in range(1, n + 1):\n        if i in damaged:\n            if i - 1 in reserve and i + 1 in reserve:\n                reserve.remove(i - 1)\n                reserve.remove(i + 1)\n            elif i - 1 in reserve:\n                reserve.remove(i - 1)\n            elif i + 1 in reserve:\n                reserve.remove(i + 1)\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, s, r = map(int, input().split())\n    damaged = set(map(int, input().split()))\n    reserve = set(map(int, input().split()))\n    count = 0\n    for i in range(1, n+1):\n        if i in damaged:\n            if i-1 in reserve and i+1 in reserve:\n                reserve.remove(i-1)\n                reserve.remove(i+1)\n            elif i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()][1:]\n    reserve = [int(x) for x in sys.stdin.readline().split()][1:]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR' \n    if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(reserve, damaged):\n    for i in list(damaged):\n        if i - 1 in reserve:\n            reserve.remove(i - 1)\n            damaged.remove(i)\n        elif i + 1 in reserve:\n            reserve.remove(i + 1)\n            damaged.remove(i)\n    return len(list(damaged))\n\nprint check(reserve, damaged)\n", "\n#\n# import sys\n#\n# def main():\n#     n, s, r = [int(i) for i in sys.stdin.readline().split()]\n#     broken = [int(i) for i in sys.stdin.readline().split()]\n#     reserve = [int(i) for i in sys.stdin.readline().split()]\n#     total = 0\n#     for i in broken:\n#         if i == 1:\n#             if 2 in reserve:\n#                 reserve.remove(2)\n#             else:\n#                 total += 1\n#         elif i == n:\n#             if n-1 in reserve:\n#                 reserve.remove(n-1)\n#             else:\n#                 total += 1\n#         else:\n#             if i-1 in reserve:\n#                 reserve.remove(i-1)\n#             elif i+1 in reserve:\n#                 reserve.remove(i+1)\n#             else:\n#                 total += 1\n#     print(total)\n#\n# if __name__ == \"__main__\":\n#     main()\n", "N, S, R = map(int, input().split())\nD = set(map(int, input().split()))\nB = set(map(int, input().split()))\n\nc = 0\n\nfor i in range(1, N+1):\n    if i in D:\n        if i-1 in B:\n            B.remove(i-1)\n        elif i+1 in B:\n            B.remove(i+1)\n        else:\n            c += 1\nprint(c)\n\n\nN, S, R = map(int, input().split())\nD = set(map(int, input().split()))\nB = set(map(int, input().split()))\n\nc = 0\n\nfor i in range(1, N+1):\n    if i in D:\n        if i-1 in B:\n            B.remove(i-1)\n        elif i+1 in B:\n            B.remove(i+1)\n        else:\n            c += 1\nprint(c)\n", "\nimport sys\n\ndef main():\n    n, s, r = [int(i) for i in sys.stdin.readline().split()]\n    broken = [int(i) for i in sys.stdin.readline().split()]\n    reserve = [int(i) for i in sys.stdin.readline().split()]\n    total = 0\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n-1 in reserve:\n                reserve.remove(n-1)\n            else:\n                total += 1\n        else:\n            if i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Get input\nN, S, R = [int(x) for x in input().split()]\ndmg = [int(x) for x in input().split()]\nrsv = [int(x) for x in input().split()]\n\n# Find the number of teams that can't start\n# Start with the number of teams with damaged kayaks\n# Subtract the number of teams with reserve kayaks\n# Add the number of teams that can be helped by reserve kayaks\n# Subtract the number of teams that are helped by reserve kayaks\n#   but are not next to the team with the reserve kayak\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any team with a damaged kayak\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any other team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to another team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak and a team with a reserve kayak\ncantStart = S - R\ncantStart -= sum([1 for x in dmg if x - 1 not in rsv and x + 1 not in rsv])\ncantStart -= sum([1 for x in rsv if x - 1 not in dmg and x + 1 not in dmg])\ncantStart -= sum([1 for x in rsv if x - 1 not in rsv and x + 1 not in rsv])\ncantStart += sum([1 for x in dmg if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in rsv if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in dmg if (x - 1 in rsv or x + 1 in rsv) and (x - 1 in dmg or x + 1 in dmg)])\n\n# Print the result\nprint(cantStart)\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserve = map(\n        int, input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with\n    # the reserve\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = (int(x) for x in sys.stdin.readline().split())\n    damaged = set(int(x) for x in sys.stdin.readline().split())\n    reserve = set(int(x) for x in sys.stdin.readline().split())\n    print(max(0, len(damaged) - len(reserve.intersection(damaged.union({x - 1 for x in damaged}).union({x + 1 for x in damaged})))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams_damaged, num_teams_reserve = map(int, input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the reserve\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\n\n# Get input\nS, R = [int(x) for x in input().split()]\ndmg = [int(x) for x in input().split()]\nrsv = [int(x) for x in input().split()]\n\n# Find the number of teams that can't start\n# Start with the number of teams with damaged kayaks\n# Subtract the number of teams with reserve kayaks\n# Add the number of teams that can be helped by reserve kayaks\n# Subtract the number of teams that are helped by reserve kayaks\n#   but are not next to the team with the reserve kayak\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any team with a damaged kayak\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any other team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to another team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak and a team with a reserve kayak\ncantStart = S - R\ncantStart -= sum([1 for x in dmg if x - 1 not in rsv and x + 1 not in rsv])\ncantStart -= sum([1 for x in rsv if x - 1 not in dmg and x + 1 not in dmg])\ncantStart -= sum([1 for x in rsv if x - 1 not in rsv and x + 1 not in rsv])\ncantStart += sum([1 for x in dmg if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in rsv if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in dmg if (x - 1 in rsv or x + 1 in rsv) and (x - 1 in rsv or x + 1 in rsv)])\n\n# Print the result\nprint(cantStart)\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in input().split()]\n    damaged = [int(x) for x in input().split()]\n    reserve = [int(x) for x in input().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR'\n    if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR'\n    if n < 2 or n > 10 or s < 1 or s > n or r < 1 or r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\nN, S, R = map(int, input().split())\nD = set(map(int, input().split()))\nB = set(map(int, input().split()))\nc = 0\n\nfor i in range(1, N+1):\n    if i in D:\n        if i-1 in B:\n            B.remove(i-1)\n        elif i+1 in B:\n            B.remove(i+1)\n        else:\n            c += 1\nprint(c)\n"]