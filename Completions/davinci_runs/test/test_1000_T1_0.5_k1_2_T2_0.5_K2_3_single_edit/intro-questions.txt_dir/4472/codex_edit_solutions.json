["\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(math.floor(n/2))] == b[int(math.floor(n/2))]:\n            return solve(a[:int(math.floor(n/2))] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n    else:\n        if a[int(math.floor(n/2))-1:int(math.floor(n/2))+1] == b[int(math.floor(n/2))-1:int(math.floor(n/2))+1]:\n            return solve(a[:int(math.floor(n/2))-1] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))-1] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n\ntest()\n", "\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(math.floor(n/2))] == b[int(math.floor(n/2))]:\n            return solve(a[:int(math.floor(n/2))] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n    else:\n        if a[int(math.floor(n/2))-1:int(math.floor(n/2))+1] == b[int(math.floor(n/2))-1:int(math.floor(n/2))+1]:\n            return solve(a[:int(math.floor(n/2))-1] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))-1] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n", "\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(n/2)] == b[int(n/2)]:\n            return solve(a[:int(n/2)] + a[int(n/2)+1:], b[:int(n/2)] + b[int(n/2)+1:])\n        else:\n            return 1\n    else:\n        if a[int(n/2)-1:int(n/2)+1] == b[int(n/2)-1:int(n/2)+1]:\n            return solve(a[:int(n/2)-1] + a[int(n/2)+1:], b[:int(n/2)-1] + b[int(n/2)+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 1\n    assert solve(\"zcabd\", \"dbacz\") == 1\n    assert solve(\"abcabc\", \"abcabc\") == 1\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 1\n    assert solve(\"a\", \"a\") == 1\n    assert solve(\"a\", \"b\") == 2\n    assert solve(\"ab\", \"ba\") == 2\n    assert solve(\"ab\", \"ab\") == 1\n    assert solve(\"abcd\", \"abcd\") == 1\n    assert solve(\"abcd\", \"dcba\") == 2\n    assert solve(\"abcde\", \"abcde\") == 1\n    assert solve(\"abcde\", \"edcba\") == 2\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "const fs = require('fs');\n\nconst fileToRead = process.argv[2];\n\nfs.readFile(fileToRead, (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data.toString());\n});\n", "import os\nimport shutil\nimport sys\n\n\ndef main():\n    if len(sys.argv) > 1:\n        path = sys.argv[1]\n    else:\n        path = input(\"Enter the path to the directory: \")\n    print(\"Path: \" + path)\n    for file in os.listdir(path):\n        if os.path.isdir(os.path.join(path, file)):\n            print(\"Directory: \" + file)\n        else:\n            print(\"File: \" + file)\n\n\nif __name__ == '__main__':\n    main()\n"]