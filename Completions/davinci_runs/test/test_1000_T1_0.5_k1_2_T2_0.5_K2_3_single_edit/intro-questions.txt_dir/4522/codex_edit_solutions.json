["\n\nimport sys\nimport os\nimport math\nimport collections\nimport heapq\nimport itertools\nimport array\nimport bisect\nimport copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**10\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef pf(s): return print(s, flush=True)\n\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n# def get_graph(n, edges):\n#     graph = [[] for _ in range(n)]\n#     for edge in edges:\n#         graph[edge[0]].append((edge[1], edge[2]))\n#         graph[edge[1]].append((edge[0], edge[2]))\n#     return graph\n\n# def dfs(graph, v, p, d):\n#     for nv, nd in graph[v]:\n#         if nv == p:\n#             continue\n#         d[nv] = max(d[v], nd)\n#         dfs(graph, nv, v, d)\n\ndef main():\n    n, m = LI()\n    edges = []\n    for i in range(n-1):\n        u, v, w = LI()\n        edges.append((u-1, v-1, w))\n    q = LI()\n\n    uf = UnionFind(n)\n    for u, v, w in edges:\n        uf.union(u, v)\n\n    d = [0] * n\n    for u, v, w in edges:\n        if uf.find(u) == uf.find(v):\n            continue\n        d[uf.find(u)] = max(d[uf.find(u)], w)\n        d[uf.find(v)] = max(d[uf.find(v)], w)\n\n    # graph = get_graph(n, edges)\n    # dfs(graph, 0, -1, d)\n    d.sort()\n\n    for qi in q:\n        ans = bisect.bisect_right(d, qi)\n        print(ans, end=' ')\n    print()\n\nmain()\n", "\nimport sys\nimport os\nimport math\nimport collections\nimport heapq\nimport itertools\nimport array\nimport bisect\nimport copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**10\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef pf(s): return print(s, flush=True)\n\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n# def get_graph(n, edges):\n#     graph = [[] for _ in range(n)]\n#     for edge in edges:\n#         graph[edge[0]].append((edge[1], edge[2]))\n#         graph[edge[1]].append((edge[0], edge[2]))\n#     return graph\n\n# def dfs(graph, v, p, d):\n#     for nv, nd in graph[v]:\n#         if nv == p:\n#             continue\n#         d[nv] = max(d[v], nd)\n#         dfs(graph, nv, v, d)\n\ndef main():\n    n, m = LI()\n    edges = []\n    for i in range(n-1):\n        u, v, w = LI()\n        edges.append((u-1, v-1, w))\n    q = LI()\n\n    uf = UnionFind(n)\n    for u, v, w in edges:\n        uf.union(u, v)\n\n    d = [0] * n\n    for u, v, w in edges:\n        if uf.find(u) == uf.find(v):\n            continue\n        d[uf.find(u)] = max(d[uf.find(u)], w)\n        d[uf.find(v)] = max(d[uf.find(v)], w)\n\n    # graph = get_graph(n, edges)\n    # dfs(graph, 0, -1, d)\n    d.sort()\n\n    for qi in q:\n        ans = bisect.bisect_right(d, qi)\n        print(ans, end=' ')\n    print()\n\nmain()\n", "\nimport sys\nimport os\nimport math\nimport collections\nimport heapq\nimport itertools\nimport array\nimport bisect\nimport copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**10\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef pf(s): return print(s, flush=True)\ndef get_graph(n, edges):\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]].append((edge[1], edge[2]))\n        graph[edge[1]].append((edge[0], edge[2]))\n    return graph\ndef dfs(graph, v, p, d):\n    for nv, nd in graph[v]:\n        if nv == p:\n            continue\n        d[nv] = max(d[v], nd)\n        dfs(graph, nv, v, d)\n\ndef main():\n    n, m = LI()\n    edges = []\n    for i in range(n-1):\n        u, v, w = LI()\n        edges.append((u-1, v-1, w))\n    q = LI()\n\n    uf = UnionFind(n)\n    for u, v, w in edges:\n        uf.union(u, v)\n\n    d = [0] * n\n    for u, v, w in edges:\n        if uf.find(u) == uf.find(v):\n            continue\n        d[uf.find(u)] = max(d[uf.find(u)], w)\n        d[uf.find(v)] = max(d[uf.find(v)], w)\n\n    # graph = get_graph(n, edges)\n    # dfs(graph, 0, -1, d)\n    d.sort()\n\n    for qi in q:\n        ans = bisect.bisect_right(d, qi)\n        print(ans, end=' ')\n    print()\n\nmain()\n"]