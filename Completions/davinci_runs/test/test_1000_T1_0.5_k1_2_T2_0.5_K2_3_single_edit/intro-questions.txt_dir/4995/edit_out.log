2022-04-16 03:36:48.606713 num operations 1
2022-04-16 03:36:48.606731 size on input set 1
2022-04-16 03:36:50.665965 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes\n"
    },
    {
      "index": 1,
      "text": "N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    }
  ],
  "created": 1650080208,
  "object": "edit"
}
2022-04-16 03:36:50.666207 fix syntax errors 3 ['\n\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes\n', 'N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n', '\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n']
2022-04-16 03:36:50.666233 size on output set 3
2022-04-16 03:36:50.666243 num operations 1
2022-04-16 03:36:50.666248 size on input set 1
2022-04-16 03:37:01.642276 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# import sys library\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "# import packages\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg_min = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg_min = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg_min <= 1:\n        return \"measurement error\"\n    else:\n        return avg_min\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080210,
  "object": "edit"
}
2022-04-16 03:37:01.642459 fix syntax errors 3 ['# import sys library\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '# import packages\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg_min = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg_min = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg_min <= 1:\n        return "measurement error"\n    else:\n        return avg_min\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', 'import sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:37:01.642586 size on output set 3
2022-04-16 03:37:01.642598 num operations 1
2022-04-16 03:37:01.642604 size on input set 1
2022-04-16 03:37:05.975029 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main(): \n    N = int(input())\n    wait_time = 0\n    for _ in range(N):\n        M, S = map(int, input().split())\n        wait_time += S/M\n    print(wait_time/N)\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys, math\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(math.ceil(sum(wait_time)/N))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080221,
  "object": "edit"
}
2022-04-16 03:37:05.975213 fix syntax errors 3 ['\ndef main(): \n    N = int(input())\n    wait_time = 0\n    for _ in range(N):\n        M, S = map(int, input().split())\n        wait_time += S/M\n    print(wait_time/N)\nmain()\n', '\nimport sys, math\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(math.ceil(sum(wait_time)/N))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:37:05.975238 size on output set 3
2022-04-16 03:37:05.975248 num operations 1
2022-04-16 03:37:05.975254 size on input set 1
2022-04-16 03:37:07.366498 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    }
  ],
  "created": 1650080226,
  "object": "edit"
}
2022-04-16 03:37:07.366676 fix syntax errors 3 ['\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n', '\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n', '\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n']
2022-04-16 03:37:07.366702 size on output set 1
2022-04-16 03:37:07.366712 num operations 1
2022-04-16 03:37:07.366717 size on input set 1
2022-04-16 03:37:12.266333 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(round(s / (n * 60)))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print(\"measurement error\")\n    else:\n        print(s / (n * 60))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print(\"measurement error\")\n    else:\n        print(s / (n * 60))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650080227,
  "object": "edit"
}
2022-04-16 03:37:12.266520 fix syntax errors 3 ['\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(round(s / (n * 60)))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print("measurement error")\n    else:\n        print(s / (n * 60))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print("measurement error")\n    else:\n        print(s / (n * 60))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 03:37:12.266547 size on output set 3
2022-04-16 03:37:12.266558 num operations 1
2022-04-16 03:37:12.266563 size on input set 1
2022-04-16 03:37:17.905475 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(minutes, seconds):\n    return seconds / minutes\n\ndef main():\n    observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length = calculate_average_length_of_minute(i[0], i[1])\n        if average_length <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, number_of_seconds):\n    return number_of_seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n\n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080232,
  "object": "edit"
}
2022-04-16 03:37:17.905746 fix syntax errors 3 ['\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(minutes, seconds):\n    return seconds / minutes\n\ndef main():\n    observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length = calculate_average_length_of_minute(i[0], i[1])\n        if average_length <= 1:\n            print("measurement error")\n        else:\n            print(average_length)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, number_of_seconds):\n    return number_of_seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n\n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:37:17.905787 size on output set 3
2022-04-16 03:37:17.905797 num operations 1
2022-04-16 03:37:17.905802 size on input set 1
2022-04-16 03:37:22.117180 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\" \nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    },
    {
      "index": 2,
      "text": "\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    }
  ],
  "created": 1650080237,
  "object": "edit"
}
2022-04-16 03:37:22.117384 fix syntax errors 3 ['\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error" \nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n', '#!/usr/bin/env python3\n\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n', '\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n']
2022-04-16 03:37:22.117421 size on output set 3
2022-04-16 03:37:22.117432 num operations 1
2022-04-16 03:37:22.117437 size on input set 1
2022-04-16 03:37:24.312655 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds / total_minutes\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes\n    if avg_min > 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080242,
  "object": "edit"
}
2022-04-16 03:37:24.312954 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds / total_minutes\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes\n    if avg_min > 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:37:24.312992 size on output set 3
