2022-04-16 00:14:12.203738 num operations 1
2022-04-16 00:14:12.203754 size on input set 1
2022-04-16 00:14:15.656048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline().strip())))\n        print(\"Case #\" + str(i+1) + \":\")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end='')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline())))\n        print(\"Case #\" + str(i+1) + \":\", end = '')\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j])\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline().strip())))\n        print(\"Case #\" + str(i+1) + \":\")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end = '')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650068052,
  "object": "edit"
}
2022-04-16 00:14:15.656277 fix syntax errors 3 ['\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline().strip())))\n        print("Case #" + str(i+1) + ":")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end=\'\')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline())))\n        print("Case #" + str(i+1) + ":", end = \'\')\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j])\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline().strip())))\n        print("Case #" + str(i+1) + ":")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end = \'\')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:14:15.656330 size on output set 3
2022-04-16 00:14:15.656340 num operations 1
2022-04-16 00:14:15.656345 size on input set 1
2022-04-16 00:14:18.704790 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) != 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) != 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) != 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650068055,
  "object": "edit"
}
2022-04-16 00:14:18.705116 fix syntax errors 3 ['\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) != 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) != 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) != 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:14:18.705164 size on output set 2
