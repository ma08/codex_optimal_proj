2022-04-16 02:17:24.859076 num operations 1
2022-04-16 02:17:24.859092 size on input set 1
2022-04-16 02:17:47.019260 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|\\n+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 1,
      "text": "\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 2,
      "text": "\n\nboard = [['.'] * 8 for i in range(8)]  # board is a list of lists\n\nfor i in range(2):\n    color = input().split(':')[0].strip()  # color is a string\n    pieces = input().split(':')[1].strip().split(',')  # pieces is a list of strings\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'  # K is at row piece[2] and column piece[1]\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'  # Q is at row piece[2] and column piece[1]\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'  # R is at row piece[2] and column piece[1]\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    }
  ],
  "created": 1650075445,
  "object": "edit"
}
2022-04-16 02:17:47.019520 fix syntax errors 3 ["\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|\\n+---+---+---+---+---+---+---+---+')\n", "\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nboard = [['.'] * 8 for i in range(8)]  # board is a list of lists\n\nfor i in range(2):\n    color = input().split(':')[0].strip()  # color is a string\n    pieces = input().split(':')[1].strip().split(',')  # pieces is a list of strings\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'  # K is at row piece[2] and column piece[1]\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'  # Q is at row piece[2] and column piece[1]\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'  # R is at row piece[2] and column piece[1]\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"]
2022-04-16 02:17:47.019699 size on output set 3
2022-04-16 02:17:47.019711 num operations 1
2022-04-16 02:17:47.019715 size on input set 1
2022-04-16 02:17:52.443064 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white = input(\"white: \").split(\":\")\n    black = input(\"black: \").split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0]\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white = input().split(\":\")[1:]\n    black = input().split(\":\")[1:]\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0]\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650075467,
  "object": "edit"
}
2022-04-16 02:17:52.443252 fix syntax errors 3 ['\n\ndef main():\n    white = input("white: ").split(":")\n    black = input("black: ").split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0]\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(":")[1:]\n    black = input().split(":")[1:]\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0]\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 02:17:52.443327 size on output set 3
2022-04-16 02:17:52.443343 num operations 1
2022-04-16 02:17:52.443357 size on input set 1
2022-04-16 02:17:57.646067 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n\n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = 'r'\n    board[0][0] = 'R'\n    board[7][1] = 'n'\n    board[0][1] = 'N'\n    board[7][2] = 'b'\n    board[0][2] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650075472,
  "object": "edit"
}
2022-04-16 02:17:57.646333 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n\n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = 'r'\n    board[0][0] = 'R'\n    board[7][1] = 'n'\n    board[0][1] = 'N'\n    board[7][2] = 'b'\n    board[0][2] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:17:57.646394 size on output set 3
2022-04-16 02:17:57.646405 num operations 1
2022-04-16 02:17:57.646411 size on input set 1
2022-04-16 02:17:59.249411 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650075477,
  "object": "edit"
}
2022-04-16 02:17:59.249664 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:17:59.249708 size on output set 2
2022-04-16 02:17:59.249719 num operations 1
2022-04-16 02:17:59.249724 size on input set 1
2022-04-16 02:18:02.813895 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()[1:-1]\n    black = stdin.readline().strip().split(\":\")[1].strip()[1:-1]\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n"
    }
  ],
  "created": 1650075479,
  "object": "edit"
}
2022-04-16 02:18:02.814156 fix syntax errors 3 ['\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nmain()\n', '\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()[1:-1]\n    black = stdin.readline().strip().split(":")[1].strip()[1:-1]\n    solve(white, black)\n\nmain()\n', '\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nmain()\n']
2022-04-16 02:18:02.814294 size on output set 2
2022-04-16 02:18:02.814314 num operations 1
2022-04-16 02:18:02.814322 size on input set 1
2022-04-16 02:18:11.577486 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import string\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650075482,
  "object": "edit"
}
2022-04-16 02:18:11.577675 fix syntax errors 3 ['\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print(\'+---+---+---+---+---+---+---+---+\')\n    for i in range(8):\n        print(\'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print(\'+---+---+---+---+---+---+---+---+\')\n    for i in range(8):\n        print(\'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', 'import string\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 02:18:11.577726 size on output set 2
2022-04-16 02:18:11.577736 num operations 1
2022-04-16 02:18:11.577741 size on input set 1
2022-04-16 02:18:14.927382 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0].lower() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([' ' + piece + ' ' if piece != '.' else '   ' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650075491,
  "object": "edit"
}
2022-04-16 02:18:14.927630 fix syntax errors 3 ["\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0].lower() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([' ' + piece + ' ' if piece != '.' else '   ' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:18:14.927671 size on output set 3
2022-04-16 02:18:14.927686 num operations 1
2022-04-16 02:18:14.927691 size on input set 1
2022-04-16 02:18:20.820141 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+', end='')\n        for i in range(8):\n            print('\\n|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|', end='')\n        print('\\n+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n    print('+---+---+---+---+---+---+---+---+')\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        pieces = line.split(':')\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(','):\n                if piece == \"\":\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        sys.stdout.write('|')\n        for i in range(8):\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            sys.stdout.write('|\\n')\n        sys.stdout.write('+---+---+---+---+---+---+---+---+\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650075494,
  "object": "edit"
}
2022-04-16 02:18:20.820394 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\', end=\'\')\n        for i in range(8):\n            print(\'\\n|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\', end=\'\')\n        print(\'\\n+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\n    print(\'+---+---+---+---+---+---+---+---+\')\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        pieces = line.split(\':\')\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\',\'):\n                if piece == "":\n                    continue\n                board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        sys.stdout.write(\'|\')\n        for i in range(8):\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            sys.stdout.write(\'|\\n\')\n        sys.stdout.write(\'+---+---+---+---+---+---+---+---+\\n\')\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 02:18:20.820442 size on output set 3
