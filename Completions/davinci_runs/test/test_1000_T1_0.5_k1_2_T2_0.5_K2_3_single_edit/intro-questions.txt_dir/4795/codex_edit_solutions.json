["\nn = int(input())\nlist_of_values = []\nwhile n > 0:\n    number = input()\n    list_of_values.append(number)\n    n -= 1\n\nresult = 0\nfor i in list_of_values:\n    for j in range(1, len(i)):\n        if int(i[j]) != 0:\n            result += int(i[:j]) ** int(i[j])\n            break\nprint(result)\n", "\n\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\n\n\n\nprint(total)\n", "#!/usr/bin/env python3\n\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[0]), end=\"\")\n    else:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[2])+int(str(P)[2])**int(str(P)[0]), end=\"\")\n    if i < N-1:\n        print(\"+\", end=\"\")\n", "\nN = int(input())\noutput = 0\nfor i in range(N):\n    pow = 0\n    number = input()\n    for i in range(len(number)):\n        pow += int(number[i])\n    output += pow ** len(number)\nprint(output)\n", "\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:\n        print(int(str(P)[0])**int(str(P)[1]) + int(str(P)[1])**int(str(P)[0]), end=\"\")\n    else:\n        print(int(str(P)[0])**int(str(P)[1]) + int(str(P)[1])**int(str(P)[2]) + int(str(P)[2])**int(str(P)[0]), end=\"\")\n    if i < N-1:\n        print(\"+\", end=\"\")\n", "\nN = int(input())\nprint(sum(int(input()[-1]) ** int(input()[0]) for _ in range(N)))\n", "\nimport sys\n\ndef main():\n    n = read_int()\n    nums = [read_int() for _ in range(n)]\n    result = 0\n    for num in nums:\n        result += solve(num)\n    print(result)\n\ndef solve(num):\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return int(num)\n    else:\n        return int(num[0])**(length-1) + int(num[1:])\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Work out the length of the numbers.\n# Then, for each number, work out the base of the number by dividing the length by 2 and rounding down.\n# Then, work out the power of the number by subtracting the base from the length and rounding up.\n# Finally, work out the value of the number by taking the base to the power of the power and rounding up.\n# Add up all of those values and print the result.\n\nimport math\n\ndef main():\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input()))\n    total = 0\n    for number in numbers:\n        length = len(str(number))\n        base = math.floor(length / 2)\n        power = math.ceil(length - base)\n        total += math.ceil(math.pow(base, power))\n    print(total)\n\nmain()\n", "\n# Work out the lengths of the numbers.\n# Then, for each number, work out the base of the number by dividing the length by 2.\n# Then, work out the power of the number by subtracting the base from the length.\n# Finally, work out the value of the number by taking the base to the power of the power.\n# Add up all of those values.\n\nimport math\n\ndef main():\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input()))\n    total = 0\n    for number in numbers:\n        length = len(str(number))\n        base = int(length / 2)\n        power = length - base\n        total += int(math.pow(base, power))\n    print(total)\n\nmain()\n", "\nN = int(input())\n\nX = 0\n\nfor i in range(N):\n    P = input()\n    X += int(P[-1]) ** int(P[0])\n\nprint(X)\n", "\n\nimport math\nimport sys\n\ndef main():\n    n = read_int_line()\n    for _ in range(n):\n        nums = read_int_line()\n        print(solve(nums))\n\ndef solve(nums):\n    return math.ceil(nums[0] / 2) * math.ceil(nums[1] / 2)\n\ndef read_int_line():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\nprint(total)\n", "N = int(input())\noutput = 0\nfor i in range(N):\n    pow = 0\n    number = input()\n    for i in range(len(number)):\n        pow += int(number[i])\n    output += pow ** len(number)\nprint(output)\n", "\n\n# Work out the lengths of the numbers.\n# Then, for each number, work out the base of the number by dividing the length by 2.\n# Then, work out the power of the number by subtracting the base from the length.\n# Finally, work out the value of the number by taking the base to the power of the power.\n# Add up all of those values.\n\nimport math\n\ndef main():\n    n = int(input())\n    numbers = []\n    for _ in range(n):\n        numbers.append(int(input()))\n    total = 0\n    for number in numbers:\n        length = len(str(number))\n        base = int(length / 2)\n        power = length - base\n        total += int(math.pow(base, power))\n    print(total)\n\nmain()\n", "\n\ndef main():\n    num = int(input())\n    nums = []\n    for i in range(num):\n        nums.append(int(input()))\n    total = 0\n    for i in nums:\n        if i >= 10 and i < 100:\n            total += i % 10\n        elif i >= 100 and i < 1000:\n            total += (i // 100) ** 3\n        elif i >= 1000 and i < 10000:\n            total += (i // 1000) ** 4\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    num = int(input())\n    nums = []\n    for i in range(num):\n        nums.append(int(input()))\n    total = 0\n    for i in nums:\n        if i >= 10 and i < 100:\n            total += i % 10\n        elif i >= 100 and i < 1000:\n            total += i // 100 + (i % 100) // 10 + (i % 10)\n        elif i >= 1000 and i < 10000:\n            total += i // 1000 + (i % 1000) // 100 + (i % 100) // 10 + (i % 10)\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = read_int()\n    nums = [read_int() for _ in range(n)]\n    result = 0\n    for num in nums:\n        result += solve(num)\n    print(result)\n\ndef solve(num):\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return int(num)\n    else:\n        return int(num[0])**(length-1) + int(num[1:])\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()\n"]