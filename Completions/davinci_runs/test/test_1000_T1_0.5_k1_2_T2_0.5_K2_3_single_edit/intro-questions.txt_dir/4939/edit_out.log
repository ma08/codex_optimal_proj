2022-04-16 02:54:39.142433 num operations 1
2022-04-16 02:54:39.142451 size on input set 1
2022-04-16 02:54:42.308349 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    commands = sys.stdin.readline().strip().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, input().split())\n    commands = input().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    commands = sys.stdin.readline().strip().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\n\nmain()\n"
    }
  ],
  "created": 1650077679,
  "object": "edit"
}
2022-04-16 02:54:42.308609 fix syntax errors 3 ["import sys\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    commands = sys.stdin.readline().strip().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, input().split())\n    commands = input().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    commands = sys.stdin.readline().strip().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\n\nmain()\n"]
2022-04-16 02:54:42.308643 size on output set 3
2022-04-16 02:54:42.308655 num operations 1
2022-04-16 02:54:42.308660 size on input set 1
2022-04-16 02:54:46.957665 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, k = map(int, input().split())\nthrows = input().split()\n\ncurrent_student = 0\ncurrent_throw = 0\n\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw]) % n) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw]) % n) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw]) % n) % n\n"
    },
    {
      "index": 1,
      "text": "\nn, k = map(int, input().split())\nthrows = input().split()\n\ncurrent_student = 0\ncurrent_throw = 0\n\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw]) % n) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw]) % n) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw]) % n) % n\n\nprint(current_student)\n"
    },
    {
      "index": 2,
      "text": "\nn, k = map(int, input().split())\nthrows = input().split()\n\ncurrent_student = 0\ncurrent_throw = 0\n\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw]) % n) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw]) % n) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw]) % n) % n\n\nprint(current_student)\n"
    }
  ],
  "created": 1650077682,
  "object": "edit"
}
2022-04-16 02:54:46.957847 fix syntax errors 3 ['\n\nn, k = map(int, input().split())\nthrows = input().split()\n\ncurrent_student = 0\ncurrent_throw = 0\n\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw]) % n) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw]) % n) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw]) % n) % n\n', '\nn, k = map(int, input().split())\nthrows = input().split()\n\ncurrent_student = 0\ncurrent_throw = 0\n\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw]) % n) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw]) % n) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw]) % n) % n\n\nprint(current_student)\n', '\nn, k = map(int, input().split())\nthrows = input().split()\n\ncurrent_student = 0\ncurrent_throw = 0\n\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw]) % n) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw]) % n) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw]) % n) % n\n\nprint(current_student)\n']
2022-04-16 02:54:46.957996 size on output set 2
2022-04-16 02:54:46.958009 num operations 1
2022-04-16 02:54:46.958014 size on input set 1
2022-04-16 02:54:49.909032 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command)+1]))\n        elif command == '0' or command == '-0' or command == '0\\n':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command) + 1]))\n        elif command == '0' or command == '-0':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command)+1]))\n        elif command == '0' or command == '-0' or command == '+0':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077686,
  "object": "edit"
}
2022-04-16 02:54:49.909219 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command)+1]))\n        elif command == '0' or command == '-0' or command == '0\\n':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command) + 1]))\n        elif command == '0' or command == '-0':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command)+1]))\n        elif command == '0' or command == '-0' or command == '+0':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:54:49.909274 size on output set 3
2022-04-16 02:54:49.909284 num operations 1
2022-04-16 02:54:49.909290 size on input set 1
2022-04-16 02:55:27.670158 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] == 'undo':\n        position += int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport re\nimport sys\n\n# n, k = map(int, input().split())\n# throws = input().split()\n\n# position = 0\n\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# # i = 0\n# # while i < k:\n# #     if throws[i] == 'undo':\n# #         position += int(throws[i+1])\n# #         i += 1\n# #     else:\n# #         position += int(throws[i])\n# #         if position > n-1:\n# #             position -= n\n# #         elif position < 0:\n# #             position += n\n# #     i += 1\n\n# # print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#        \n"
    },
    {
      "index": 2,
      "text": "\n\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] == \"undo\":\n        position -= int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n"
    }
  ],
  "created": 1650077689,
  "object": "edit"
}
2022-04-16 02:55:27.670436 fix syntax errors 3 ["\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] == 'undo':\n        position += int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n", "\n\nimport re\nimport sys\n\n# n, k = map(int, input().split())\n# throws = input().split()\n\n# position = 0\n\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# # i = 0\n# # while i < k:\n# #     if throws[i] == 'undo':\n# #         position += int(throws[i+1])\n# #         i += 1\n# #     else:\n# #         position += int(throws[i])\n# #         if position > n-1:\n# #             position -= n\n# #         elif position < 0:\n# #             position += n\n# #     i += 1\n\n# # print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#         position += int(throws[i])\n#         if position > n-1:\n#             position -= n\n#         elif position < 0:\n#             position += n\n\n# print(position)\n\n\n# n = 5\n# k = 5\n# throws = '2 -2 3 -3 undo undo'\n\n# position = 0\n# for i in range(k):\n#     if throws[i] == 'undo':\n#         position += int(throws[i+1])\n#     else:\n#        \n", '\n\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] == "undo":\n        position -= int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n']
2022-04-16 02:55:27.670503 size on output set 3
2022-04-16 02:55:27.670514 num operations 1
2022-04-16 02:55:27.670520 size on input set 1
2022-04-16 02:55:30.160755 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Program\nn, k = map(int, input().split())\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n"
    },
    {
      "index": 1,
      "text": "\n\n#Program\nn, k = map(int, input().split())\n\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\": \n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n"
    },
    {
      "index": 2,
      "text": "\n\n#Program\nn, k = map(int, input().split())\n\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] += 1\n        else:\n            children[command % n] += 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n"
    }
  ],
  "created": 1650077727,
  "object": "edit"
}
2022-04-16 02:55:30.161179 fix syntax errors 3 ['\n\n#Program\nn, k = map(int, input().split())\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == "undo":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n', '\n\n#Program\nn, k = map(int, input().split())\n\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == "undo": \n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n', '\n\n#Program\nn, k = map(int, input().split())\n\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == "undo":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] += 1\n        else:\n            children[command % n] += 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n']
2022-04-16 02:55:30.161300 size on output set 3
2022-04-16 02:55:30.161311 num operations 1
2022-04-16 02:55:30.161317 size on input set 1
2022-04-16 02:56:06.227708 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Program starts here\nn, k = map(int, input().split())\ncommands = input().split()\negg = 0\n\nfor i in range(len(commands)):\n\tif \"undo\" in commands[i]:\n\t\tfor j in range(int(commands[i][5:])):\n\t\t\tif i - j - 1 >= 0:\n\t\t\t\tegg -= int(commands[i-j-1])\n\t\t\telif i - j - 1 < 0:\n\t\t\t\tegg -= int(commands[0])\n\telse:\n\t\tegg += int(commands[i])\nprint(egg % n)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Program starts here\nn, k = map(int, input().split())\ncommands = input().split()\n\negg = 0\n\nfor i in range(len(commands)):\n    if \"undo\" in commands[i]:\n        for j in range(int(commands[i][5:])):\n            if i - j - 1 >= 0:\n                egg -= int(commands[i-j-1])\n            elif i - j - 1 < 0:\n                egg -= int(commands[0])\n    else:\n        egg += int(commands[i])\n\nprint(egg % n)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Program starts here\n# n, k = map(int, input().split())\n# commands = input().split()\n\n# egg = 0\n\n# for i in range(len(commands)):\n#     if \"undo\" in commands[i]:\n#         for j in range(int(commands[i][5:])):\n#             if i - j - 1 >= 0:\n#                 egg -= int(commands[i-j-1])\n#             elif i - j - 1 < 0:\n#                 egg -= int(commands[0])\n#     else:\n#         egg += int(commands[i])\n\n# print(egg % n)\n\n\n\ndef check(s, k):\n    # print(s)\n    # print(k)\n    if s == k:\n        return True\n    return False\n\n\ndef check_valid(s):\n    if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_2(s):\n    if s[0] == s[1] and s[1] == s[2]:\n        return False\n    return True\n\n\ndef check_valid_3(s):\n    if s[1] == s[2] and s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_4(s):\n    if s[0] == s[1] and s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_5(s):\n    if s[0] == s[2] and s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_6(s):\n    if s[0] == s[3] and s[1] == s[2]:\n        return False\n    return True\n\n\ndef check_valid_7(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_8(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_9(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_10(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_11(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_12(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_13(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_14(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_15(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_16(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_17(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_18(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_19(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_20(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_21(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_22(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_23(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_24(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_25(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_26(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_27(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_28(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_29(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_30(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_31(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_32(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_33(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_34(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] ==\n"
    }
  ],
  "created": 1650077730,
  "object": "edit"
}
2022-04-16 02:56:06.227977 fix syntax errors 3 ['\n\n#Program starts here\nn, k = map(int, input().split())\ncommands = input().split()\negg = 0\n\nfor i in range(len(commands)):\n\tif "undo" in commands[i]:\n\t\tfor j in range(int(commands[i][5:])):\n\t\t\tif i - j - 1 >= 0:\n\t\t\t\tegg -= int(commands[i-j-1])\n\t\t\telif i - j - 1 < 0:\n\t\t\t\tegg -= int(commands[0])\n\telse:\n\t\tegg += int(commands[i])\nprint(egg % n)\n', '\n\n# Program starts here\nn, k = map(int, input().split())\ncommands = input().split()\n\negg = 0\n\nfor i in range(len(commands)):\n    if "undo" in commands[i]:\n        for j in range(int(commands[i][5:])):\n            if i - j - 1 >= 0:\n                egg -= int(commands[i-j-1])\n            elif i - j - 1 < 0:\n                egg -= int(commands[0])\n    else:\n        egg += int(commands[i])\n\nprint(egg % n)\n', '\n\n# Program starts here\n# n, k = map(int, input().split())\n# commands = input().split()\n\n# egg = 0\n\n# for i in range(len(commands)):\n#     if "undo" in commands[i]:\n#         for j in range(int(commands[i][5:])):\n#             if i - j - 1 >= 0:\n#                 egg -= int(commands[i-j-1])\n#             elif i - j - 1 < 0:\n#                 egg -= int(commands[0])\n#     else:\n#         egg += int(commands[i])\n\n# print(egg % n)\n\n\n\ndef check(s, k):\n    # print(s)\n    # print(k)\n    if s == k:\n        return True\n    return False\n\n\ndef check_valid(s):\n    if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_2(s):\n    if s[0] == s[1] and s[1] == s[2]:\n        return False\n    return True\n\n\ndef check_valid_3(s):\n    if s[1] == s[2] and s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_4(s):\n    if s[0] == s[1] and s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_5(s):\n    if s[0] == s[2] and s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_6(s):\n    if s[0] == s[3] and s[1] == s[2]:\n        return False\n    return True\n\n\ndef check_valid_7(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_8(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_9(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_10(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_11(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_12(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_13(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_14(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_15(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_16(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_17(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_18(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_19(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_20(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_21(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_22(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_23(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_24(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_25(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_26(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_27(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_28(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_29(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_30(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_31(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_32(s):\n    if s[0] == s[2] or s[1] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_33(s):\n    if s[0] == s[3]:\n        return False\n    return True\n\n\ndef check_valid_34(s):\n    if s[0] == s[1] or s[1] == s[2] or s[2] ==\n']
2022-04-16 02:56:06.228151 size on output set 3
2022-04-16 02:56:06.228166 num operations 1
2022-04-16 02:56:06.228172 size on input set 1
2022-04-16 02:56:22.474082 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n        else:\n            lastNode = self.head\n            while lastNode.next is not None:\n                lastNode = lastNode.next\n            lastNode.next = newNode\n\n\n    def printList(self):\n        curr_node = self.head\n        while curr_node is not None:\n            print(curr_node.data)\n            curr_node = curr_node.next\n\n    def delete(self, index):\n        curr_node = self.head\n        if index == 0:\n            self.head = curr_node.next\n            curr_node = None\n            return\n\n        prev_node = None\n        count = 0\n        while curr_node is not None and count != index:\n            prev_node = curr_node\n            curr_node = curr_node.next\n            count += 1\n\n        if curr_node is None:\n            return\n\n        prev_node.next = curr_node.next\n        curr_node = None\n\n    def length(self):\n        curr_node = self.head\n        count = 0\n        while curr_node is not None:\n            count += 1\n            curr_node = curr_node.next\n        return count\n\n    def get(self, index):\n        curr_node = self.head\n        count = 0\n        while curr_node is not None:\n            if count == index:\n                return curr_node.data\n            count += 1\n            curr_node = curr_node.next\n        return -1\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = ll.length() - 1\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index - t) % ll.length()\n    print(ll.get(curr_index))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n\n        if currNode is None:\n            return\n\n        prevNode.next = currNode.next\n        currNode = None\n\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n\n    print(ll.get(curr_index))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n        if currNode is None:\n            return\n        prevNode.next = currNode.next\n        currNode = None\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n    print(ll.get(curr_index))\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077766,
  "object": "edit"
}
2022-04-16 02:56:22.474302 fix syntax errors 3 ['\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n        else:\n            lastNode = self.head\n            while lastNode.next is not None:\n                lastNode = lastNode.next\n            lastNode.next = newNode\n\n\n    def printList(self):\n        curr_node = self.head\n        while curr_node is not None:\n            print(curr_node.data)\n            curr_node = curr_node.next\n\n    def delete(self, index):\n        curr_node = self.head\n        if index == 0:\n            self.head = curr_node.next\n            curr_node = None\n            return\n\n        prev_node = None\n        count = 0\n        while curr_node is not None and count != index:\n            prev_node = curr_node\n            curr_node = curr_node.next\n            count += 1\n\n        if curr_node is None:\n            return\n\n        prev_node.next = curr_node.next\n        curr_node = None\n\n    def length(self):\n        curr_node = self.head\n        count = 0\n        while curr_node is not None:\n            count += 1\n            curr_node = curr_node.next\n        return count\n\n    def get(self, index):\n        curr_node = self.head\n        count = 0\n        while curr_node is not None:\n            if count == index:\n                return curr_node.data\n            count += 1\n            curr_node = curr_node.next\n        return -1\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = ll.length() - 1\n    for i in range(k):\n        command = commands[i]\n        if command == "undo":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index - t) % ll.length()\n    print(ll.get(curr_index))\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n\n        if currNode is None:\n            return\n\n        prevNode.next = currNode.next\n        currNode = None\n\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == "undo":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n\n    print(ll.get(curr_index))\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n        if currNode is None:\n            return\n        prevNode.next = currNode.next\n        currNode = None\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == "undo":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n    print(ll.get(curr_index))\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 02:56:22.474473 size on output set 3
2022-04-16 02:56:22.474486 num operations 1
2022-04-16 02:56:22.474492 size on input set 1
2022-04-16 02:56:24.471456 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n"
    }
  ],
  "created": 1650077782,
  "object": "edit"
}
2022-04-16 02:56:24.471647 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == "undo":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n', '\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == "undo":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n', 'import sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == "undo":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n']
2022-04-16 02:56:24.471677 size on output set 2
