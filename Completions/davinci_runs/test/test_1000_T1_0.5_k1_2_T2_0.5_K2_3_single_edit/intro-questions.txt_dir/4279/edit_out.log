2022-04-15 23:32:27.544372 num operations 1
2022-04-15 23:32:27.544381 size on input set 1
2022-04-15 23:32:31.468647 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find_pos(k))\n\n\ndef find_pos(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n\n    num = 3\n    start = 3\n    end = 6\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n\n    return find_pos(k - num + 1)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find(k))\n\ndef find(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    \n    num = 3\n    start = 3\n    end = 6\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n    \n    return find(k - num + 1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find(k))\n\ndef find(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    \n    num = 3\n    start = 3\n    end = 6\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n    \n    return find(k - num + 1)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650065547,
  "object": "edit"
}
2022-04-15 23:32:31.468896 fix syntax errors 3 ["\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find_pos(k))\n\n\ndef find_pos(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n\n    num = 3\n    start = 3\n    end = 6\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n\n    return find_pos(k - num + 1)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find(k))\n\ndef find(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    \n    num = 3\n    start = 3\n    end = 6\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n    \n    return find(k - num + 1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find(k))\n\ndef find(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    \n    num = 3\n    start = 3\n    end = 6\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n    \n    return find(k - num + 1)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-15 23:32:31.468943 size on output set 3
2022-04-15 23:32:31.468953 num operations 1
2022-04-15 23:32:31.468959 size on input set 1
2022-04-15 23:32:37.212151 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    print(digits)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    print(group_len)\n    groups = math.ceil(n / group_len)\n    print(groups)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    print(group_num)\n    num = group_num - 1\n    print(num)\n    num_in_group = math.ceil(num / digits)\n    print(num_in_group)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    print(num_in_group_pos)\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    # print(digits)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    # print(group_len)\n    groups = math.ceil(n / float(group_len))\n    # print(groups)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    # print(group_num)\n    num = group_num - 1\n    # print(num)\n    num_in_group = math.ceil(num / float(digits))\n    # print(num_in_group)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    # print(num_in_group_pos)\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    # print(digits)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    # print(group_len)\n    groups = math.ceil(n / group_len)  # not used\n    # print(groups)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    # print(group_num)\n    num = group_num - 1\n    # print(num)\n    num_in_group = math.ceil(num / digits)\n    # print(num_in_group)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    # print(num_in_group_pos)\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n"
    }
  ],
  "created": 1650065551,
  "object": "edit"
}
2022-04-15 23:32:37.212417 fix syntax errors 3 ['\nimport math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    print(digits)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    print(group_len)\n    groups = math.ceil(n / group_len)\n    print(groups)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    print(group_num)\n    num = group_num - 1\n    print(num)\n    num_in_group = math.ceil(num / digits)\n    print(num_in_group)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    print(num_in_group_pos)\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n', '\nimport math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    # print(digits)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    # print(group_len)\n    groups = math.ceil(n / float(group_len))\n    # print(groups)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    # print(group_num)\n    num = group_num - 1\n    # print(num)\n    num_in_group = math.ceil(num / float(digits))\n    # print(num_in_group)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    # print(num_in_group_pos)\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n', '\nimport math\n\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    # print(digits)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    # print(group_len)\n    groups = math.ceil(n / group_len)  # not used\n    # print(groups)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    # print(group_num)\n    num = group_num - 1\n    # print(num)\n    num_in_group = math.ceil(num / digits)\n    # print(num_in_group)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    # print(num_in_group_pos)\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n']
2022-04-15 23:32:37.212463 size on output set 3
