2022-04-15 23:22:20.212668 num operations 1
2022-04-15 23:22:20.212700 size on input set 1
2022-04-15 23:22:28.279424 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split()) - 1\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n"
    },
    {
      "index": 1,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1].append(b)\n    edges[b - 1].append(a)\n\n\ndef dfs(v, p):\n    for i in edges[v]:\n        if i == p:\n            continue\n        dfs(i, v)\n\n\ndfs(0, -1)\n"
    },
    {
      "index": 2,
      "text": "# coding: utf-8\n\nimport sys\ninput = lambda: sys.stdin.readline().strip()\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i\u756a\u76ee\u307e\u3067\u306e\u9802\u70b9\u3092\u4f7f\u3063\u3066\u3001j\u3092\u542b\u3080\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n"
    }
  ],
  "created": 1650064940,
  "object": "edit"
}
2022-04-15 23:22:28.279649 fix syntax errors 3 ['\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split()) - 1\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i番目までの頂点を使って、jを含む場合のパターン数\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n', '# -*- coding: utf-8 -*-\n\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1].append(b)\n    edges[b - 1].append(a)\n\n\ndef dfs(v, p):\n    for i in edges[v]:\n        if i == p:\n            continue\n        dfs(i, v)\n\n\ndfs(0, -1)\n', '# coding: utf-8\n\nimport sys\ninput = lambda: sys.stdin.readline().strip()\n\nn, m = map(int, input().split())\nedges = [0] * n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a - 1] += 1\n    edges[b - 1] += 1\n\n# DP[i][j] = i番目までの頂点を使って、jを含む場合のパターン数\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\nfor i in range(n - 1):\n    for j in range(2 ** n):\n        if dp[i][j] == 0:\n            continue\n        for k in range(1, n + 1):\n            if j & (1 << k) != 0 or edges[k - 1] == 0:\n                continue\n            dp[i + 1][j | (1 << k)] += dp[i][j]\nprint(dp[n - 1][2 ** n - 1])\n']
2022-04-15 23:22:28.279694 size on output set 3
2022-04-15 23:22:28.279703 num operations 1
2022-04-15 23:22:28.279708 size on input set 1
2022-04-15 23:22:35.714811 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "import sys\nsys.setrecursionlimit(10**6)\nN, M = map(int, input().split())\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n \nN = int(input())\n \nans = 0\nfor i in range(1, N+1):\n    if i % 2 == 0:\n        continue\n    cnt = 0\n    for j in range(1, i+1):\n        if i % j == 0:\n            cnt += 1\n    if cnt == 8:\n        ans += 1\n \nprint(ans)\n"
    }
  ],
  "created": 1650064948,
  "object": "edit"
}
2022-04-15 23:22:35.715030 fix syntax errors 3 ['import sys\nsys.setrecursionlimit(10**6)\n\nN, M = map(int, input().split())\n\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n', 'import sys\nsys.setrecursionlimit(10**6)\nN, M = map(int, input().split())\ntree = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\n\ndef dfs(v, visited):\n    visited.add(v)\n    for child in tree[v]:\n        if child not in visited:\n            dfs(child, visited)\n\nvisited = set()\ndfs(0, visited)\n\nif len(visited) != N:\n    print(0)\n    sys.exit()\n\nans = 1\nfor i in range(N):\n    if i == 0:\n        continue\n    if len(tree[i]) > 1:\n        ans *= len(tree[i])\n\nprint(ans)\n', '\nimport sys\n \nN = int(input())\n \nans = 0\nfor i in range(1, N+1):\n    if i % 2 == 0:\n        continue\n    cnt = 0\n    for j in range(1, i+1):\n        if i % j == 0:\n            cnt += 1\n    if cnt == 8:\n        ans += 1\n \nprint(ans)\n']
2022-04-15 23:22:35.715062 size on output set 3
