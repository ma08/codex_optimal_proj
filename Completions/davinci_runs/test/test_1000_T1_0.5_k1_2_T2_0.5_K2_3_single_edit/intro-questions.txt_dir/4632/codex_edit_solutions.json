["\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for case in range(num_cases):\n        num_packages = int(lines[2 * case + 1])\n        packages = [tuple(map(int, lines[2 * case + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for index in range(len(packages)):\n        if packages[index][0] < index or packages[index][1] < index:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0]) // 2\n    for i in range(1, num_cases + 1):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(1, num_packages + 1)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\n    print(packages)\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i + 1:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(1, len(packages)):\n        if packages[i][0] < i or packages[i][1] < i or (packages[i][0] - packages[i - 1][0]) * (packages[i][1] - packages[i - 1][1]) < 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"]