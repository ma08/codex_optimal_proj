["\n\n#program\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\n\n#SOLUTION\n\ndef whoServes(n, p, q):\n    if (p + q) % (2 * n) == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P > 0 and Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\n#Program 4\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\nimport sys\nsys.setrecursionlimit(10000)\n\n\ndef solve(n, p, q):\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\nif (q - p) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n: # this is the condition\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\nn, p, q = [int(x) for x in input().split()]\n\nif p % (n + 1) == 0:\n    print(\"opponent\")\nelif q % (n + 1) == 0:\n    print(\"paul\")\nelse:\n    if p // (n + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\nif rounds_played % 2 == 0:\n    print(\"paul\")\nelse:\n    print(\"opponent\") \n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\nimport math\nprint(math.ceil(3.5))\n", "\n\nimport sys\n\nN, P, Q = [int(x) for x in sys.stdin.readline().split()]\n\nif P % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paul\") \nelse:\n    print(\"opponent\")\n", "\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"]