2022-04-16 00:13:41.187560 num operations 1
2022-04-16 00:13:41.187576 size on input set 1
2022-04-16 00:13:48.981979 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())  # n = 3\n    d = [int(x) for x in input().split()]  # d = [1, 2, 3]\n    d.sort()\n    print(d[-1] - d[0])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650068021,
  "object": "edit"
}
2022-04-16 00:13:48.982214 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())  # n = 3\n    d = [int(x) for x in input().split()]  # d = [1, 2, 3]\n    d.sort()\n    print(d[-1] - d[0])\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:13:48.982248 size on output set 3
2022-04-16 00:13:48.982258 num operations 1
2022-04-16 00:13:48.982263 size on input set 1
2022-04-16 00:13:51.508958 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    return damage\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    print(get_damage(turns))\n"
    },
    {
      "index": 1,
      "text": "\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"
    },
    {
      "index": 2,
      "text": "\ndef get_damage(turns):\n    damage = 0\n    for _ in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"
    }
  ],
  "created": 1650068029,
  "object": "edit"
}
2022-04-16 00:13:51.509148 fix syntax errors 3 ["\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    return damage\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    print(get_damage(turns))\n", "\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\ndef get_damage(turns):\n    damage = 0\n    for _ in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"]
2022-04-16 00:13:51.509185 size on output set 3
