["\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n-h)*(n-v)*4)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake (x)\n    x = min(h, n - h, v, n - v, h - v, n - h - v)\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n", "\n\nn, h, v = map(int, input().split())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint((n-h) * (n-v) * 4)\n", "\nn, h, v = map(int, input().split())\n\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * 4\n", "\n\nimport sys\n\nn, h, v = map(int, sys.stdin.readline().split())\n\nprint(max(n*h*4, n*v*4, (n-h)*(n-v)*4))\n", "\n\ndef square_cake(n, h, v): \n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v) \n\n    # Find the volume of the largest piece of cake\n    return x * x * 4 \n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\n\ndef main():\n    a, b, c = [int(i) for i in input().split()]\n    print(a + b + c)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, h, v = [int(i) for i in input().split()]\n    print(max(h, n - h) * max(v, n - v) * 4)\n\nif __name__ == '__main__':\n    main()\n", "\n\n#Program starts here\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4)) \n", "\n\nimport sys\n\ndef main():\n\n    n, h, v = map(int, sys.stdin.readline().split())\n\n    print((n-h)*(n-v)*4)\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, h, v = map(int, input().split())\n\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * 4\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v))) # max of 4 different volume\n", "\nimport sys\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n", "\n\ndef square_cake(n, h, v,):\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4.0\n\nprint(square_cake(10, 4, 7,))\nprint(square_cake(5, 2, 2,))\n", "\nn, h, v = map(int, input().split())\n\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * 4\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i)\n\nif __name__ == '__main__':\n    main()\n", "\nn, h, v = map(int, input().split())\n\nprint((n - h) * (n - v) * 4)\n", "\nimport sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n", "\ndef main():\n    # Read input\n    n, h, v = [int(x) for x in input().split()]\n\n    # Compute largest volume\n    volume = (n - max(h, n - h)) * (n - max(v, n - v)) * 4\n\n    # Display result\n    print(volume)\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, h, v = map(int, input().split())\n\nprint((n-h) * (n-v) * 4)\n", "\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    print(a[n // 2])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Program starts here\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4))\n"]