["\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.canThreePartsEqualSum([0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]) == True\n    assert s.canThreePartsEqualSum([0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1]) == False\n    assert s.canThreePartsEqualSum([3, 3, 6, 5, -2, 2, 5, 1, -9, 4]) == True\n        return count == 3\n", "class Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "\n#\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "\n# class Solution:\n#     def canThreePartsEqualSum(self, A) -> bool:\n#         total = sum(A)\n#         if total % 3 != 0:\n#             return False\n#         part_sum = total // 3\n#         i, cur_sum = 0, 0\n#         while i < len(A):\n#             cur_sum += A[i]\n#             if cur_sum == part_sum:\n#                 break\n#             i += 1\n#         if cur_sum != part_sum:\n#             return False\n#         j, cur_sum = i + 1, 0\n#         while j < len(A):\n#             cur_sum += A[j]\n#             if cur_sum == part_sum:\n#                 break\n#             j += 1\n#         if cur_sum != part_sum:\n#             return False\n#         return True\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A):\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum, i, cur_sum = total // 3, 0, 0\n        for i in range(len(A)):\n            cur_sum += A[i]  # \u524d\u9762\u7684\u548c\n            if cur_sum == part_sum:  # \u524d\u9762\u7684\u548c\u7b49\u4e8e\u603b\u548c\u76841/3\n                break\n        if cur_sum != part_sum:  # \u524d\u9762\u7684\u548c\u4e0d\u7b49\u4e8e\u603b\u548c\u76841/3\n            return False\n        j, cur_sum = i + 1, 0  # \u524d\u9762\u7684\u548c\u7b49\u4e8e\u603b\u548c\u76841/3\n        for j in range(i + 1, len(A)):\n            cur_sum += A[j]\n            if cur_sum == part_sum:  # \u540e\u9762\u7684\u548c\u7b49\u4e8e\u603b\u548c\u76841/3\n                break\n        if cur_sum != part_sum:  # \u540e\u9762\u7684\u548c\u4e0d\u7b49\u4e8e\u603b\u548c\u76841/3\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n"]