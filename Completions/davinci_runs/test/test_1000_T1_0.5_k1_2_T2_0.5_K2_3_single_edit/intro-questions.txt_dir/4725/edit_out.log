2022-04-16 00:46:04.498212 num operations 1
2022-04-16 00:46:04.498230 size on input set 1
2022-04-16 00:46:06.514236 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"
    }
  ],
  "created": 1650069964,
  "object": "edit"
}
2022-04-16 00:46:06.514463 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"]
2022-04-16 00:46:06.514503 size on output set 2
2022-04-16 00:46:06.514515 num operations 1
2022-04-16 00:46:06.514520 size on input set 1
2022-04-16 00:46:11.889239 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The idea is to find the most frequent character, and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# The idea is to find the most frequent character, and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# The idea is to find the most frequent character, and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650069966,
  "object": "edit"
}
2022-04-16 00:46:11.889451 fix syntax errors 3 ['\n\n# The idea is to find the most frequent character, and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n# The idea is to find the most frequent character, and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == "__main__":\n    main()\n', '\n\n# The idea is to find the most frequent character, and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:46:11.889492 size on output set 2
2022-04-16 00:46:11.889501 num operations 1
2022-04-16 00:46:11.889506 size on input set 1
2022-04-16 00:46:14.909119 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    word = input()\n    print(len(word) - 2 if len(set(word)) > 2 else 0)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import string\n\ndef main():\n    word2 = word.lower()\n    word3 = word2.strip(string.punctuation)\n    word4 = word3.strip(string.whitespace)\n    word = input()\n    if len(set(word)) <= 2:\n        print(0)\n    else:\n        print(len(word4) - 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    word = input()\n    if len(set(word)) < 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650069971,
  "object": "edit"
}
2022-04-16 00:46:14.909435 fix syntax errors 3 ['\n\ndef main():\n    word = input()\n    print(len(word) - 2 if len(set(word)) > 2 else 0)\n\nif __name__ == "__main__":\n    main()\n', 'import string\n\ndef main():\n    word2 = word.lower()\n    word3 = word2.strip(string.punctuation)\n    word4 = word3.strip(string.whitespace)\n    word = input()\n    if len(set(word)) <= 2:\n        print(0)\n    else:\n        print(len(word4) - 2)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    if len(set(word)) < 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:46:14.909465 size on output set 3
2022-04-16 00:46:14.909476 num operations 1
2022-04-16 00:46:14.909481 size on input set 1
2022-04-16 00:46:20.362464 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\"\"\"\n    return len(string) - len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\n    >>> simplify('abc')\n    3\n    >>> simplify('aaabbbccc')\n    3\n    >>> simplify('abbbcabb')\n    3\n    >>> simplify('abbbcabbb')\n    4\n    \"\"\"\n    return len(set(string))\n\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\n    >>> erase('abc')\n    0\n    >>> erase('aaabbbccc')\n    0\n    >>> erase('abbbcabb')\n    1\n    >>> erase('abbbcabbb')\n    2\n    \"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nif __name__ == '__main__':\n    print(erase(input()))\n"
    }
  ],
  "created": 1650069974,
  "object": "edit"
}
2022-04-16 00:46:20.362661 fix syntax errors 3 ['\n\ndef simplify(string):\n    """Simplify a string of lowercase letters."""\n    return len(string) - len(set(string))\n\ndef erase(string):\n    """Find minimum number of letters to erase to simplify a string."""\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n', '\n\ndef simplify(string):\n    """Simplify a string of lowercase letters.\n    >>> simplify(\'abc\')\n    3\n    >>> simplify(\'aaabbbccc\')\n    3\n    >>> simplify(\'abbbcabb\')\n    3\n    >>> simplify(\'abbbcabbb\')\n    4\n    """\n    return len(set(string))\n\n\ndef erase(string):\n    """Find minimum number of letters to erase to simplify a string.\n    >>> erase(\'abc\')\n    0\n    >>> erase(\'aaabbbccc\')\n    0\n    >>> erase(\'abbbcabb\')\n    1\n    >>> erase(\'abbbcabbb\')\n    2\n    """\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n', '\n\ndef simplify(string):\n    """Simplify a string of lowercase letters."""\n    return len(set(string))\n\ndef erase(string):\n    """Find minimum number of letters to erase to simplify a string."""\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nif __name__ == \'__main__\':\n    print(erase(input()))\n']
2022-04-16 00:46:20.362699 size on output set 3
2022-04-16 00:46:20.362720 num operations 1
2022-04-16 00:46:20.362725 size on input set 1
2022-04-16 00:46:24.889689 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input) - 2)\n            return\n        else:\n            print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in inp:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(inp) - 2)\n            return\n        else:\n            print(len(inp) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input) - 2)\n            return\n        else:\n            print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650069980,
  "object": "edit"
}
2022-04-16 00:46:24.889905 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input) - 2)\n            return\n        else:\n            print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in inp:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(inp) - 2)\n            return\n        else:\n            print(len(inp) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input) - 2)\n            return\n        else:\n            print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 00:46:24.890038 size on output set 2
2022-04-16 00:46:24.890055 num operations 1
2022-04-16 00:46:24.890061 size on input set 1
2022-04-16 00:46:29.048770 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(inp)):\n            if inp[i] not in chars:\n                chars.add(inp[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(inp))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(input)\n    else:\n        chars = set()\n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650069984,
  "object": "edit"
}
2022-04-16 00:46:29.048971 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(inp)):\n            if inp[i] not in chars:\n                chars.add(inp[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(inp))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(input)\n    else:\n        chars = set()\n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 00:46:29.049001 size on output set 3
2022-04-16 00:46:29.049022 num operations 1
2022-04-16 00:46:29.049027 size on input set 1
2022-04-16 00:46:32.478834 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) > 2 and len(set(line)) > 2:\n            print(len(line) - 2)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) < 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) == 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650069989,
  "object": "edit"
}
2022-04-16 00:46:32.479247 fix syntax errors 3 ["import sys\n\n\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) > 2 and len(set(line)) > 2:\n            print(len(line) - 2)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) < 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) == 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 00:46:32.479357 size on output set 3
2022-04-16 00:46:32.479397 num operations 1
2022-04-16 00:46:32.479405 size on input set 1
2022-04-16 00:46:35.475507 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase(s, n):\n    min_erase = len(s)\n    for i in range(n):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\ns = input()\nprint(min_erase(s, len(s)))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - len(set(s_)))\n    return min_erase\n\nprint(min_erase(input()))\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\nprint(min_erase(sys.stdin.readline().strip()))\n"
    }
  ],
  "created": 1650069992,
  "object": "edit"
}
2022-04-16 00:46:35.475824 fix syntax errors 3 ['\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase(s, n):\n    min_erase = len(s)\n    for i in range(n):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\ns = input()\nprint(min_erase(s, len(s)))\n', '\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - len(set(s_)))\n    return min_erase\n\nprint(min_erase(input()))\n', 'import sys\n\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\nprint(min_erase(sys.stdin.readline().strip()))\n']
2022-04-16 00:46:35.475862 size on output set 3
