["class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         res = [[1]]\n         for i in range(1,numRows):\n             res.append(list(map(lambda x, y : x + y, res[-1]+[0], [0]+res[-1])))\n         return res[:numRows]\n          \n", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         \n         if numRows==0:\n             return []\n         tem=[0,1]\n         l=[]\n         for i in range(numRows):\n             rowlist=[]\n             for j in range(len(tem)-1):\n                 rowlist.append(tem[j]+tem[j+1])\n             l.append(rowlist)\n             tem=rowlist[:]\n             tem.insert(0,0)\n             tem.append(0)\n         return  l\n         '''\n         ans = [[1] * n for n in range(1, numRows + 1)]\n         for i in range(1, numRows + 1):\n             for j in range(0, i - 2):\n                 ans[i - 1][1 + j] = ans[i - 2][j] + ans[i - 2][j + 1]\n         return ans'''\n     \n             \n \n \n \n", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         if numRows==0:\n             return []\n         res=[[1]]\n         for i in range(1,numRows):\n             newRow = [1]\n             for j in range(1,i):\n                 newRow.append(res[-1][j-1]+res[-1][j])\n             newRow.append(1)\n             res.append(newRow)\n         return res\n", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         '''\n         if numRows==0:\n            return []\n         tem=[0,1]\n         l=[]\n         for i in range(numRows):\n            rowlist=[]\n             for j in range(len(tem)-1):\n                rowlist.append(tem[j]+tem[j+1])\n             l.append(rowlist)\n             tem=rowlist[:]\n             tem.insert(0,0)\n             tem.append(0)\n         return  l'''\n         ans = [[1] * n for n in range(1, numRows + 1)]\n         for i in range(1, numRows + 1):\n             for j in range(0, i - 2):\n                 ans[i - 1][1 + j] = ans[i - 2][j] + ans[i - 2][j + 1]\n         return ans\n     \n             \n \n \n \n", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         A = []\n         for i in range(numRows):\n             A.append([1 for _ in range(i+1)])\n             for j in range(1, i):\n                 A[i][j] = A[i-1][j-1] + A[i-1][j]\n         return A", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         if numRows < 1:\n             return []\n         base = [1]\n         triangle = [base]\n         for i in range(1, numRows):\n             new_row = [1]\n             prev_row = triangle[i-1]\n             for j in range(len(prev_row)-1):\n                 new_row.append(prev_row[j] + prev_row[j+1])\n             new_row.append(1)\n             triangle.append(new_row)\n         return triangle", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         A=[[1],[1,1]]\n         if numRows == 0:\n             return[]\n         elif numRows<3:\n             return A[0:numRows]\n         else:\n             i=3\n             while i<=numRows:\n                 temp=A[i-2][:]\n                 temp.append(0)\n                 temp2=temp[::-1]\n                 temp3=[X+Y for X,Y in zip(temp,temp2)]\n                 A.append(temp3) \n                 i+=1          \n         print(A)\n         return A", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         result = []\n         for i in range(numRows):\n             result.append([])\n             for j in range(i + 1):\n                 if j in (0, i):\n                     result[i].append(1)\n                 else:\n                     result[i].append(result[i - 1][j - 1] + result[i - 1][j])\n         return result", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n \n         result = [[]] * numRows\n         for i in range(numRows):\n             if i == 0:\n                 result[0] = [1]\n                 \n             if i == 1:\n                 result[1] = [1, 1]\n                 \n             if i > 1:\n                 temp = []\n                 for k in range(i+1):                    \n                     left =  result[i-1][k-1] if k >= 1 else 0\n                     right = result[i-1][k] if k < i else 0\n                     temp.append(left + right)\n                 \n                 result[i] = temp\n                 \n                 \n         return result", "class Solution:\n     def my_fact(self, n):\n         if n == 1 or n == 0:\n             return 1\n         else:\n             return n * self.my_fact(n-1)\n         \n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         res = [[] for i in range(numRows)]\n         for n in range(numRows):\n             for k in range(0, n+1):\n                 val = self.my_fact(n) / (self.my_fact(n-k) * self.my_fact(k))\n                 res[n].append(int(val))\n                 \n         return res", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         if numRows == 0:\n             return []\n         result = [[1]]\n         if numRows == 1:\n             return result\n         result.append([1, 1])\n         if numRows == 2:\n             return result\n         for row in range(2, numRows):\n             l, r = 0, 1\n             tmp = [1]\n             while r < len(result[row-1]):\n                 tmp.append(result[row-1][l]+result[row-1][r])\n                 l += 1\n                 r += 1\n             tmp.append(1)\n             result.append(tmp)\n         return result", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         if numRows==0:\n             return []\n         if numRows==1:\n             return [[1]]\n         if numRows==2:\n             return [[1],[1,1]]\n         result=[[1],[1,1]]\n         for i in range(3,numRows+1):\n             if len(result)<i:\n                 result.append([])\n             result[i-1].append(1)\n             count=0\n             while len(result[i-1])<i-1:\n                 result[i-1].append(result[i-2][count]+result[i-2][count+1])\n                 count+=1\n             result[i-1].append(1)\n         return result", "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         \n #         def fac(num):\n #             factorial = 1\n #             for i in range(1, num+1):\n #                 factorial *= i\n #             return factorial\n         \n #         i = 1\n #         L = []\n #         while i <= numRows:\n #             j = 1\n #             l = []\n #             while j <= i:\n #                 l.append(int(fac(i-1)/(fac(j-1)*fac(i-j))))\n #                 j += 1\n #             L.append(l)\n #             i += 1\n             \n #         return L\n \n             \n #         if numRows == 0:\n #             return []\n         \n #         i = 1\n #         L = [[1]]\n #         while i+1 <= numRows:\n #             j = 0\n #             l = []\n #             while j <= i:\n #                 if j == 0 or j == i:\n #                     l.append(1)\n #                 else:\n #                     l.append(L[i-1][j-1]+L[i-1][j])\n #                 j += 1\n #             L.append(l)\n #             i += 1\n             \n #         return L\n \n     \n         # result = []\n         # for i in xrange(numRows):\n         #     result.append([])\n         #     for j in xrange(i + 1):\n         #         if j in (0, i):\n         #             result[i].append(1)\n         #         else:\n         #             result[i].append(result[i - 1][j - 1] + result[i - 1][j])\n         # return result\n     \n     \n         # if not numRows: return []\n         # res = [[1]]\n         # for i in range(1, numRows):\n         #     res += [list(map(lambda x, y: x + y, res[-1] + [0], [0] + res[-1]))]\n         # return res[:numRows]\n     \n         \n         if numRows == 0: return []\n         if numRows == 1: return [[1]]\n         res = [[1], [1, 1]]\n \n         def add(nums):\n             res = nums[:1]\n             for i, j in enumerate(nums):\n                 if i < len(nums) - 1:\n                     res += [nums[i] + nums[i + 1]]\n             res += nums[:1]\n             return res\n \n         while len(res) < numRows:\n             # res.extend([add(res[-1])])\n             res.append(add(res[-1]))\n         return res"]