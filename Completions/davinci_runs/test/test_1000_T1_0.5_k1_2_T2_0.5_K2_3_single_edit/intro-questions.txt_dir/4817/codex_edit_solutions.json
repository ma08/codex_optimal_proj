["\nhi\n", "\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = input(\"\")\n\n    # Convert to int array\n    x_arr = [int(c) for c in str(x)]\n\n    # Find next permutation\n    if next_permutation(x_arr):\n        print(int(''.join(map(str, x_arr)))) \n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    digits = []\n    while X > 0:\n        digits.append(X % 10)\n        X = math.floor(X / 10)\n    digits.reverse()\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i + 1]:\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n            break\n    else:\n        print(0)\n        return\n    for j in range(i):\n        for k in range(j + 1, len(digits)):\n            if digits[j] > digits[k]:\n                digits[j], digits[k] = digits[k], digits[j]\n    result = 0\n    for i in range(len(digits)):\n        result += digits[i] * 10 ** i\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    x = sys.stdin.readline().strip()\n    x = list(x) \n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])\n    print(''.join(x))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef next_permutation(arr):\n    # Find non-increasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    \n    # Find successor to pivot\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = input()\n    num = [int(i) for i in str(num)]\n    if next_permutation(num):\n        print(int(\"\".join([str(i) for i in num])))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef next_permutation(arr):\n    # Find non-increasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    \n    # Find successor to pivot\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = input()\n    num = [int(i) for i in num]\n    if next_permutation(num):\n        print(\"\".join(str(i) for i in num))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/python3\nimport re\nimport sys \nfor line in sys.stdin:\n    line = line.rstrip()\n    # process line\n    print(re.sub(r'\\b(\\w)(\\w)', r'\\2\\1', line))\n", "\n\nfrom __future__ import print_function\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline()\n    x = int(line.strip())\n    digits = list(line.strip())\n\n    # find the first digit that is smaller than the digit to its right\n    for i, digit in enumerate(digits[:-1]):\n        if digit < digits[i+1]:\n            # find the smallest digit that is larger than the digit to its right\n            smallest_digit = digits[i+1]\n            smallest_digit_index = i+1\n            for j in range(i+2, len(digits)):\n                if digits[j] < smallest_digit and digits[j] > digit:\n                    smallest_digit = digits[j]\n                    smallest_digit_index = j\n\n            # swap the two digits\n            digits[i], digits[smallest_digit_index] = digits[smallest_digit_index], digits[i]\n            break\n\n    # sort the digits to the right of the swapped digit in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # if the number is unchanged, then there is no next smallest number\n    if x == int(''.join(digits)):\n        print(0)\n    else:\n        print(''.join(digits))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Get the input.\nx = int(input())\n\n# Start with the smallest number that can be formed using the digits of x.\nn = 10 ** (len(str(x)) - 1)\n\n# Find the smallest number that can be formed using the digits of x.\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n\n# Find the next smallest number using the same digits.\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n\n# If the number is larger than x, print it. Otherwise, print 0.\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "import sys\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(x, y, G, visited):\n    visited[x][y] = True\n    for dx, dy in ((0, 1), (0, -1), (1, 0), (-1, 0)):\n        nx = x + dx\n        ny = y + dy\n        if nx < 0 or ny < 0 or nx >= h or ny >= w:\n            continue\n        if G[nx][ny] == \"#\" and visited[nx][ny] == False:\n            dfs(nx, ny, G, visited)\n\n\ndef main():\n    h, w = map(int, input().split())\n    G = [input() for _ in range(h)]\n    visited = [[False for _ in range(w)] for _ in range(h)]\n    ans = 0\n    for i in range(h):\n        for j in range(w):\n            if G[i][j] == \"#\" and visited[i][j] == False:\n                dfs(i, j, G, visited)\n                ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    digits = []\n    while X > 0:\n        digits.append(X % 10)\n        X = math.floor(X / 10)\n    digits.reverse()\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i + 1]:\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n            break\n    else:\n        print(0)\n        return\n    for j in range(i - 1):\n        for k in range(j + 1, i):\n            if digits[k] < digits[j]:\n                digits[k], digits[j] = digits[j], digits[k]\n    result = 0\n    for i in range(len(digits)):\n        result += digits[i] * 10 ** i\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "\"\"\"\nThis is a sample script.\n\"\"\"\n\ndef next_permutation(a):\n    n = len(a)\n    i = n - 1\n    while i > 0 and a[i-1] >= a[i]:  # pylint: disable=C0330\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1\n    while a[j] <= a[i-1]:  # pylint: disable=C0330\n        j -= 1\n    a[i-1], a[j] = a[j], a[i-1]\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    s = input()\n    a = [int(x) for x in s]\n    if next_permutation(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\nx = list(x)\nx = input()\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i : ] = a[len(a) - 1 : i - 1 : -1]\n    return True\n\nif next_permutation(x):\n    print(''.join(list(x)))\nelse:\n    print(0)\n", "\nx = input()\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i : ] = a[len(a) - 1 : i - 1 : -1]\n    return True\n\nif next_permutation(list(x)):\n    print(''.join(x))\nelse:\n    print(0)\n", "\n\nimport sys\n\ndef main():\n    x = sys.stdin.readline().strip()\n    x = list(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])\n    print(''.join(x))\n \nif __name__ == '__main__':\n    main()\n", "\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = int(input())\n\n    # Convert to int array\n    x_arr = [int(c) for c in str(x)]  # x_arr = [1, 2, 3]\n\n    # Find next permutation\n    if next_permutation(x_arr):\n        print(int(''.join(map(str, x_arr))))\n    else:\n        print(0)  # 0\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef next_permutation(a):\n    n = len(a)\n    i = n - 1\n    while i > 0 and a[i-1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1\n    while a[j] <= a[i-1]:\n        j -= 1\n    a[i-1], a[j] = a[j], a[i-1]\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    s = sys.stdin.readline()\n    a = [int(x) for x in s]\n    if next_permutation(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef next_permutation(arr):\n    # Find non-increasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    # Find successor to pivot\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n\n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = input()\n    num = [int(i) for i in num]\n    if next_permutation(num):\n        print(\"\".join([str(i) for i in num]))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Get the input\nx = int(input())\n\n# Start with the smallest number that can be formed using the digits of x\nn = 10 ** (len(str(x)) - 1)\n\n# Find the smallest number that can be formed using the digits of x\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n\n# Find the next smallest number using the same digits\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n\n# If the number is larger than x, print it. Otherwise, print 0.\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "\n \nx = input()\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i : ] = a[len(a) - 1 : i - 1 : -1]\n    return True\n\nif next_permutation(list(x)):\n    print(''.join(list(x)))\nelse:\n    print(0)\n", "\n#\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = input()\n\n    # Convert to int array\n    x_arr = [int(c) for c in str(x)]\n\n    # Find next permutation\n    if next_permutation(x_arr):\n        print(int(''.join(map(str, x_arr))))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nx = int(input())\nn = 10 ** (len(str(x)) - 1)\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "\n\nfrom __future__ import print_function\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline()\n    x = int(line)\n    digits = list(line.strip())\n    digit_counts = defaultdict(int)\n    for digit in digits:\n    i = 0\n        digit_counts[digit] += 1\n\n    # find the first digit that is smaller than the digit to its right\n    for i, digit in enumerate(digits[:-1]):\n        if digit < digits[i+1]:\n            # find the smallest digit that is larger than the digit to its right\n            smallest_digit = digits[i+1]\n            smallest_digit_index = i+1\n            for j in range(i+2, len(digits)):\n                if digits[j] < smallest_digit and digits[j] > digit:\n                    smallest_digit = digits[j]\n                    smallest_digit_index = j\n\n            # swap the two digits\n            digits[i], digits[smallest_digit_index] = digits[smallest_digit_index], digits[i]\n            break\n\n    # sort the digits to the right of the swapped digit in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # if the number is unchanged, then there is no next smallest number\n    if x == int(''.join(digits))\n        print(0)\n    else:\n        print(''.join(digits))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x = sys.stdin.readline().strip()\n    x = list(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])\n    print(''.join(x))\n\nif __name__ == '__main__':\n    main()\n"]