2022-04-16 01:28:29.270245 num operations 1
2022-04-16 01:28:29.270262 size on input set 1
2022-04-16 01:28:33.260992 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    string = raw_input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:  # black_count - white_count == 1\n        target = 'B'\n    else:  # white_count - black_count == 1\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:  # impossible\n        print(0)\n        return\n    if black_count == white_count:  # only one possibility\n        print(1)\n        return\n    if black_count > white_count:  # white is extra\n        target = 'B'\n    else:\n        target = 'W'  # black is extra\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n"
    }
  ],
  "created": 1650072509,
  "object": "edit"
}
2022-04-16 01:28:33.261232 fix syntax errors 3 ["\n\ndef main():\n    string = raw_input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:  # black_count - white_count == 1\n        target = 'B'\n    else:  # white_count - black_count == 1\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:  # impossible\n        print(0)\n        return\n    if black_count == white_count:  # only one possibility\n        print(1)\n        return\n    if black_count > white_count:  # white is extra\n        target = 'B'\n    else:\n        target = 'W'  # black is extra\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n"]
2022-04-16 01:28:33.261281 size on output set 3
2022-04-16 01:28:33.261293 num operations 1
2022-04-16 01:28:33.261298 size on input set 1
2022-04-16 01:28:35.021738 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n\ns = input().strip()\nresult = solve(s)\nprint(result)\n"
    },
    {
      "index": 1,
      "text": "\n\n#!/usr/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n"
    },
    {
      "index": 2,
      "text": "\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n"
    }
  ],
  "created": 1650072513,
  "object": "edit"
}
2022-04-16 01:28:35.021962 fix syntax errors 3 ["#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n\ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n\n#!/usr/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n"]
2022-04-16 01:28:35.022085 size on output set 3
2022-04-16 01:28:35.022097 num operations 1
2022-04-16 01:28:35.022103 size on input set 1
2022-04-16 01:28:37.596969 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s.count(s[0]) == len(s) - 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s.count(s[0]) == len(s) - 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s[0] == s[-1]:\n        if s.count(s[0]) == len(s) - 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650072515,
  "object": "edit"
}
2022-04-16 01:28:37.597183 fix syntax errors 3 ['\n\ndef main():\n    s = input()\n    if s.count(\'B\') == s.count(\'W\'):\n        print(1)\n        return\n    if s.count(s[0]) == len(s) - 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    s = input()\n    if s.count(\'B\') == s.count(\'W\'):\n        print(1)\n        return\n    if s.count(s[0]) == len(s) - 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    s = input()\n    if s.count(\'B\') == s.count(\'W\'):\n        print(1)\n        return\n    if s[0] == s[-1]:\n        if s.count(s[0]) == len(s) - 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:28:37.597208 size on output set 2
2022-04-16 01:28:37.597218 num operations 1
2022-04-16 01:28:37.597223 size on input set 1
2022-04-16 01:28:41.503814 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n    # I think the answer is 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules, 0 otherwise\n    \"\"\"\n    stones = input()\n    if len(stones) <= 2:\n        return 1\n    if stones[0] == stones[-1]:\n        return 0\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n"
    }
  ],
  "created": 1650072517,
  "object": "edit"
}
2022-04-16 01:28:41.504031 fix syntax errors 3 ['\n\ndef main():\n    """\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    """\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n    # I think the answer is 0\n\n\nif __name__ == "__main__":\n    print(main())\n', '\n\n\ndef main():\n    """\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    """\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == "__main__":\n    print(main())\n', '\n\n\ndef main():\n    """\n    This is the main function that runs the program\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules, 0 otherwise\n    """\n    stones = input()\n    if len(stones) <= 2:\n        return 1\n    if stones[0] == stones[-1]:\n        return 0\n    return 0\n\n\nif __name__ == "__main__":\n    print(main())\n']
2022-04-16 01:28:41.504064 size on output set 3
2022-04-16 01:28:41.504075 num operations 1
2022-04-16 01:28:41.504081 size on input set 1
2022-04-16 01:28:59.213148 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# We will use the following observations to solve this problem:\n# 1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n# 2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n# 3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n"
    },
    {
      "index": 1,
      "text": "\n\n# \"\"\"\n# We will use the following observations to solve this problem:\n# 1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n# 2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n# 3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n# \"\"\"\n\n# from sys import stdin, stdout\n\n# s = stdin.readline().strip()\n\n# # Check if there are an odd number of both black and white stones\n# if s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n#     stdout.write('0')\n# # Check if there are an even number of both black and white stones\n# elif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n#     stdout.write('1')\n# # Check if there are an even number of black stones and an odd number of white stones\n# elif s.count('B') % 2 == 0:\n#     if 'WWBWWB' in s or 'BWWBWW' in s:\n#         stdout.write('1')\n#     else:\n#         stdout.write('0')\n# # Check if there are an odd number of black stones and an even number of white stones\n# else:\n#     if 'WWBWWB' in s or 'BWWBWW' in s:\n#         stdout.write('1')\n#     else:\n#         stdout.write('0')\n\ns = 'WWBWWB'\n\nprint(s.count('B'))\n\nprint(s.count('W'))\n"
    },
    {
      "index": 2,
      "text": "\n\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones.\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones.\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones.\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones.\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n"
    }
  ],
  "created": 1650072521,
  "object": "edit"
}
2022-04-16 01:28:59.213413 fix syntax errors 3 ["\n\n# We will use the following observations to solve this problem:\n# 1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n# 2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n# 3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", '\n\n# """\n# We will use the following observations to solve this problem:\n# 1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n# 2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n# 3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n# """\n\n# from sys import stdin, stdout\n\n# s = stdin.readline().strip()\n\n# # Check if there are an odd number of both black and white stones\n# if s.count(\'B\') % 2 == 1 and s.count(\'W\') % 2 == 1:\n#     stdout.write(\'0\')\n# # Check if there are an even number of both black and white stones\n# elif s.count(\'B\') % 2 == 0 and s.count(\'W\') % 2 == 0:\n#     stdout.write(\'1\')\n# # Check if there are an even number of black stones and an odd number of white stones\n# elif s.count(\'B\') % 2 == 0:\n#     if \'WWBWWB\' in s or \'BWWBWW\' in s:\n#         stdout.write(\'1\')\n#     else:\n#         stdout.write(\'0\')\n# # Check if there are an odd number of black stones and an even number of white stones\n# else:\n#     if \'WWBWWB\' in s or \'BWWBWW\' in s:\n#         stdout.write(\'1\')\n#     else:\n#         stdout.write(\'0\')\n\ns = \'WWBWWB\'\n\nprint(s.count(\'B\'))\n\nprint(s.count(\'W\'))\n', '\n\n"""\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n"""\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones.\nif s.count(\'B\') % 2 == 1 and s.count(\'W\') % 2 == 1:\n    stdout.write(\'0\')\n# Check if there are an even number of both black and white stones.\nelif s.count(\'B\') % 2 == 0 and s.count(\'W\') % 2 == 0:\n    stdout.write(\'1\')\n# Check if there are an even number of black stones and an odd number of white stones.\nelif s.count(\'B\') % 2 == 0:\n    if \'WWBWWB\' in s or \'BWWBWW\' in s:\n        stdout.write(\'1\')\n    else:\n        stdout.write(\'0\')\n# Check if there are an odd number of black stones and an even number of white stones.\nelse:\n    if \'WWBWWB\' in s or \'BWWBWW\' in s:\n        stdout.write(\'1\')\n    else:\n        stdout.write(\'0\')\n']
2022-04-16 01:28:59.213471 size on output set 3
2022-04-16 01:28:59.213484 num operations 1
2022-04-16 01:28:59.213489 size on input set 1
2022-04-16 01:29:02.751352 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n    if len(data) == 0:\n        print(0)\n        return\ndef main():\n    data = sys.stdin.read().splitlines()\n    if s[0] == 'W':\n        print(0)\n        return\n    s = data[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0\n    if s[0] == 'W':\n        print(0)\n        return\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    if w_count > b_count:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    string = data[0]\n    if len(string) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    if w_count > b_count:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    s = sys.stdin.read().splitlines()[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    elif b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    elif w_count > b_count:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650072539,
  "object": "edit"
}
2022-04-16 01:29:02.751569 fix syntax errors 3 ['\n\nimport sys\n\n    if len(data) == 0:\n        print(0)\n        return\ndef main():\n    data = sys.stdin.read().splitlines()\n    if s[0] == \'W\':\n        print(0)\n        return\n    s = data[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0\n    if s[0] == \'W\':\n        print(0)\n        return\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == \'B\':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    if w_count > b_count:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    string = data[0]\n    if len(string) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(string)):\n        if string[i] == \'B\':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    if w_count > b_count:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    s = sys.stdin.read().splitlines()[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == \'B\':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    elif b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    elif w_count > b_count:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:29:02.751684 size on output set 3
2022-04-16 01:29:02.751700 num operations 1
2022-04-16 01:29:02.751709 size on input set 1
2022-04-16 01:29:07.539099 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n#number of test cases\nt = int(raw_input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = raw_input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python\n\nimport sys\nimport math\n\n#number of test cases\nt = int(input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n"
    }
  ],
  "created": 1650072542,
  "object": "edit"
}
2022-04-16 01:29:07.539328 fix syntax errors 3 ["\nimport sys\n\n#number of test cases\nt = int(raw_input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = raw_input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n\nimport sys\nimport math\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "#!/usr/bin/python\n\nimport sys\nimport math\n\n#number of test cases\nt = int(input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n"]
2022-04-16 01:29:07.539376 size on output set 3
2022-04-16 01:29:07.539389 num operations 1
2022-04-16 01:29:07.539394 size on input set 1
2022-04-16 01:29:11.970023 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nstones = input()\nbalance = 0\nfor stone in stones:\n    if stone == 'B':\n        balance += 1\n    else:\n        balance -= 1\nif balance == 0:\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    stones = input().upper()\n    balance = 0\n    for stone in stones:\n        if stone == 'W':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    stones = input().strip()\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650072547,
  "object": "edit"
}
2022-04-16 01:29:11.970229 fix syntax errors 3 ["\nstones = input()\nbalance = 0\nfor stone in stones:\n    if stone == 'B':\n        balance += 1\n    else:\n        balance -= 1\nif balance == 0:\n    print(1)\nelse:\n    print(0)\n", '\n\ndef main():\n    stones = input().upper()\n    balance = 0\n    for stone in stones:\n        if stone == \'W\':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    stones = input().strip()\n    balance = 0\n    for stone in stones:\n        if stone == \'B\':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:29:11.970257 size on output set 3
