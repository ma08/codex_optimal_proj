2022-04-15 23:48:29.395905 num operations 1
2022-04-15 23:48:29.395914 size on input set 1
2022-04-15 23:48:32.649289 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1)\n\n    dp = [1] * (n + 1)\n    prev = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1)\n\n    dp = [1] * (n + 1)\n    prev = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1)\n\n    dp = [1] * (n)\n    prev = [0] * (n)\n\n    for i in range(1, n):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650066509,
  "object": "edit"
}
2022-04-15 23:48:32.649515 fix syntax errors 3 ["\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1)\n\n    dp = [1] * (n + 1)\n    prev = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1)\n\n    dp = [1] * (n + 1)\n    prev = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1)\n\n    dp = [1] * (n)\n    prev = [0] * (n)\n\n    for i in range(1, n):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-15 23:48:32.649556 size on output set 3
2022-04-15 23:48:32.649566 num operations 1
2022-04-15 23:48:32.649571 size on input set 1
2022-04-15 23:48:37.851857 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n\ndef find_increasing_subsequence(arr, n):\n    max_len = 0\n    max_indices = None\n    for i in range(n):\n        for j in range(i, n):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence(arr, n)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n"
    },
    {
      "index": 1,
      "text": "\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n\n\ndef find_increasing_subsequence(arr):\n    max_len = 0\n    max_indices = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sub_arr = arr[i:j+1]\n            if is_increasing(sub_arr) and len(sub_arr) > max_len:\n                max_len = len(sub_arr)\n                max_indices = sub_arr\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n"
    },
    {
      "index": 2,
      "text": "\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            return False\n\n    return True\n\ndef find_increasing_subsequence(arr):\n    max_len = 0\n    max_indices = None\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j + 1]) and len(arr[i:j + 1]) > max_len:\n                max_len = len(arr[i:j + 1])\n                max_indices = [i + 1, j + 1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n"
    }
  ],
  "created": 1650066512,
  "object": "edit"
}
2022-04-15 23:48:37.852065 fix syntax errors 3 ['\n\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n\ndef find_increasing_subsequence(arr, n):\n    max_len = 0\n    max_indices = None\n    for i in range(n):\n        for j in range(i, n):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == "__main__":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence(arr, n)\n    print(max_len)\n    print(" ".join(map(str, max_indices)))\n', '\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n\n\ndef find_increasing_subsequence(arr):\n    max_len = 0\n    max_indices = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sub_arr = arr[i:j+1]\n            if is_increasing(sub_arr) and len(sub_arr) > max_len:\n                max_len = len(sub_arr)\n                max_indices = sub_arr\n    return max_len, max_indices\n\n\nif __name__ == "__main__":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence(arr)\n    print(max_len)\n    print(" ".join(map(str, max_indices)))\n', '\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            return False\n\n    return True\n\ndef find_increasing_subsequence(arr):\n    max_len = 0\n    max_indices = None\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j + 1]) and len(arr[i:j + 1]) > max_len:\n                max_len = len(arr[i:j + 1])\n                max_indices = [i + 1, j + 1]\n    return max_len, max_indices\n\n\nif __name__ == "__main__":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence(arr)\n    print(max_len)\n    print(" ".join(map(str, max_indices)))\n']
2022-04-15 23:48:37.852191 size on output set 3
