["\nvillagers = int(input())\nnights = int(input())\nbard = 1\nnights_songs = []\nfor i in range(nights):\n    nights_songs.append(input().split()[1:])\n\nsongs = set()\nfor i in range(nights):\n    if bard in nights_songs[i]:\n        songs.add(i)\n    else:\n        for j in range(nights):\n            if i != j and set(nights_songs[i]).intersection(set(nights_songs[j])) != set():\n                songs.add(i)\n                songs.add(j)\n\nfor i in range(1, villagers+1):\n    for j in range(nights):\n        if i in nights_songs[j] and j not in songs:\n            break\n    else:\n        print(i)\n", "\n\ndef dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    for next in graph[start] - visited:\n        dfs(graph, next, visited)\n    return visited\n\ndef bfs(graph, start):\n    visited, queue = set(), [start]\n    while queue:\n        vertex = queue.pop(0)\n        if vertex not in visited:\n            visited.add(vertex)\n            queue.extend(graph[vertex] - visited)\n    return visited\n\n\ndef connected_components(graph):\n    seen = set()\n    for vertex in graph:\n        if vertex not in seen:\n            component = bfs(graph, vertex)\n            yield component\n            seen.update(component)\n\n\ndef main():\n    graph = {\n        \"a\": set([\"b\", \"c\"]),\n        \"b\": set([\"a\", \"d\"]),\n        \"c\": set([\"a\", \"d\"]),\n        \"d\": set([\"e\"]),\n        \"e\": set([\"a\"])\n    }\n\n    print(dfs(graph, \"a\"))\n    print(bfs(graph, \"a\"))\n\n    print(list(connected_components(graph)))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\" Main function\n    \"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())))\n    songs = set()\n    for i in range(num_nights):\n        if 1 in villagers_nights[i]:\n            songs.add(i)\n        else:\n            for j in range(i):\n                if villagers_nights[i].intersection(villagers_nights[j]):\n                    songs.add(i)\n                    break\n    for i in range(num_villagers):\n        if i == 0 or all(i in villagers_nights[j] for j in songs):\n            print(i + 1)\n\nmain()\n", "\n#\n#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    e = int(input())\n    songs = set()\n    for _ in range(e):\n        for i in input().split()[1:]:\n            songs.add(i)\n    for i in range(1,n+1):\n        if str(i) not in songs:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"Bard\"\"\"\n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = []\n    bard_list.append(1)\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split(\" \")]\n        if 1 in villager_list:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n        else:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    e = int(sys.stdin.readline())\n    bard = 1\n    villagers = set(range(1, n + 1))\n    for i in range(e):\n        line = sys.stdin.readline().split()\n        k = int(line[0])\n        present = set([int(x) for x in line[1:]])\n        if bard in present:\n            villagers = present\n        else:\n            villagers = villagers.intersection(present)\n    print('\\n'.join([str(x) for x in sorted(list(villagers))]))\n\nmain()\n", "\n#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    e = int(input())\n    songs = set()\n    for _ in range(e):\n        for i in input().split()[1:]:\n            songs.add(i)\n    for i in range(1,n+1):\n        if str(i) not in songs:\n            print(i)\nif __name__ == \"__main__\":\n    main()\n", "\n\nx = int(input())\ny = int(input())\nz = int(input())\nn = int(input())\n\nprint([[i, j, k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if (i+j+k) != n])\n", "\n\nimport sys\n\ndef main():\n    n,m = [int(x) for x in sys.stdin.readline().split()]\n    for i in range(m):\n        line = [int(x) for x in sys.stdin.readline().split()]\n        if line[0] == 1:\n            print(' '.join([str(x) for x in line[1:]]))\n        else:\n            print(line[1])\n\nmain()\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    e = int(stdin.readline())\n    songs = {}\n    for i in range(1, n+1):\n        songs[i] = set()\n\n    for i in range(e):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0])+1):\n            songs[int(line[j])].add(i)\n\n    q = deque()\n    q.append(1)\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(2, n+1):\n            if i not in known and len(songs[i].difference(songs[curr])) == 0 and i != curr:\n                q.append(i)\n\n    for i in range(1, n+1):\n        if i in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\" Main function \"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())))\n    songs = set()\n    for night in range(num_nights):\n        if 1 in villagers_nights[night]:\n            songs.add(night)\n        else:\n            for j in range(night):\n                if villagers_nights[night].intersection(villagers_nights[j]):\n                    songs.add(night)\n                    break\n    for villager in range(num_villagers):\n        if villager == 0 or all(villager in villagers_nights[j] for j in songs):\n            print(villager + 1)\n\nmain()\n", "\n\ndef main():\n    \"\"\" Main function \"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())))\n    songs = set()\n    for i in range(num_nights):\n        if 1 in villagers_nights[i]:\n            songs.add(i)\n        else:\n            for j in range(i):\n                if villagers_nights[i].intersection(villagers_nights[j]):\n                    songs.add(i)\n                    break\n    for i in range(num_villagers):\n        if i == 0 or all(i + 1 in villagers_nights[j] for j in songs):\n            print(i + 1)\n\nmain()\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    e = int(stdin.readline())\n    songs = {}\n    for i in range(1, n+1):\n        songs[i] = set()\n\n    for i in range(e):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0])+1):\n            songs[int(line[j])].add(i)\n\n    for i in range(1, n+1):\n        q = deque()\n        q.append(i)\n        known = set()\n        while len(q) > 0:\n            curr = q.popleft()\n            known.add(curr)\n            for j in range(1, n+1):\n                if j not in known and len(songs[j].difference(songs[curr])) == 0:\n                    q.append(j)\n\n        for j in range(1, n+1):\n            if j in known:\n                print(j)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    villagers = int(sys.stdin.readline().strip())\n    evenings = int(sys.stdin.readline().strip())\n    songs = []\n    for evening in range(evenings):\n        singers = [int(x) for x in sys.stdin.readline().strip().split()]\n        if singers[0] == 1:\n            songs.append(singers[1])\n        else:\n            songs.extend(singers[1:])\n    for villager in range(1,villagers+1):\n        if songs.count(villager) == len(songs):\n            print(villager)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = set()\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.add(line[j])\n    print(len(songs))\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = set([])\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.add(int(line[j]))\n    for i in range(1, n + 1):\n        print(i)\n\nmain()\n", "#!/usr/bin/env python\n\nimport sys\n\n    '''\n    main function\n    '''\ndef main():\n    n = int(sys.stdin.readline())\n    e = int(sys.stdin.readline()) # number of edges\n    bard = 1\n    villagers = set(range(1, n + 1))\n    for i in range(e):\n        line = sys.stdin.readline().split()\n        k = int(line[0])\n        present = set([int(x) for x in line[1:]]) # set of vertices\n        if bard in present:\n            villagers = present\n        else:\n            villagers = villagers.intersection(present) # intersection\n    print('\\n'.join([str(x) for x in sorted(list(villagers))]))\n\nmain()\n", "\n\ndef main():\n    \"\"\"Bard.\"\"\"\n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = []\n    bard_list.append(1)\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()]\n        if 1 in villager_list:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n        else:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    villagers = int(sys.stdin.readline().strip())\n    evenings = int(sys.stdin.readline().strip())\n    songs = []\n    for evening in range(evenings):\n        singers = [int(x) for x in sys.stdin.readline().strip().split()]\n        if singers[0] == 1:\n            songs.append(singers[1])\n        else:\n            songs.extend(singers[1:])\n    for villager in range(1, villagers+1):\n        if songs.count(villager) == len(songs):\n            print(villager)\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/python3\n\ndef main():\n    n = int(input())\n    e = int(input())\n    songs = set()\n    for _ in range(e):\n        for i in input().split()[1:]:\n            songs.add(i)\n    for i in range(1,n+1):\n        if str(i) not in songs:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = set()\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.add(line[j])\n    for i in range(1, n + 1):\n        print(i)\n\nmain()\n", "\n\ndef main():\n    \"\"\"Bard\"\"\"\n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = []\n    bard_list.append(1)\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()]\n        if 1 in villager_list:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n        else:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    f = int(stdin.readline())\n    songs = {}\n    for i in range(1, n+1):\n        songs[i] = set()\n\n    for i in range(f):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0])+1):\n            songs[int(line[j])].add(i)\n\n    q = deque()\n    q.append(1)\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(2, n+1):\n            if i not in known and len(songs[i].difference(songs[curr])) == 0 and len(songs[curr].difference(songs[i])) == 0:\n                q.append(i)\n\n    for i in range(1, n+1):\n        if i in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n"]