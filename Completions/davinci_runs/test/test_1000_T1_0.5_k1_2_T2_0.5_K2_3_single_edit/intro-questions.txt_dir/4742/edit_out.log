2022-04-16 00:57:04.998137 num operations 1
2022-04-16 00:57:04.998153 size on input set 1
2022-04-16 00:57:16.234349 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        x = int(input())\n        s = 0\n        for j in range(1, x + 1):\n            s += math.factorial(x) / math.factorial(j)\n        print(int(s))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n            return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0] or (melody1[0] == 'C' and melody2[0] == 'B') or (melody1[0] == 'B' and melody2[0] == 'C'):\n        return True\n    elif melody1[0] != melody2[0]:\n        return False\n\ndef retrograde(melody1, melody2):\n    return melody1 == melody2[::-1]\n\ndef inversion(melody1, melody2):\n    return melody1[0] == melody2[0] and all(notes.index(melody1[i]) + notes.index(melody2[i]) == 11 for i in range(1, len(melody1)))\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650070625,
  "object": "edit"
}
2022-04-16 00:57:16.234579 fix syntax errors 3 ["import math\n\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        x = int(input())\n        s = 0\n        for j in range(1, x + 1):\n            s += math.factorial(x) / math.factorial(j)\n        print(int(s))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n            return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n", "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0] or (melody1[0] == 'C' and melody2[0] == 'B') or (melody1[0] == 'B' and melody2[0] == 'C'):\n        return True\n    elif melody1[0] != melody2[0]:\n        return False\n\ndef retrograde(melody1, melody2):\n    return melody1 == melody2[::-1]\n\ndef inversion(melody1, melody2):\n    return melody1[0] == melody2[0] and all(notes.index(melody1[i]) + notes.index(melody2[i]) == 11 for i in range(1, len(melody1)))\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 00:57:16.234621 size on output set 3
2022-04-16 00:57:16.234633 num operations 1
2022-04-16 00:57:16.234639 size on input set 1
2022-04-16 00:57:30.276578 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    # check for inversion about first note\n    if melody1[0] == melody2[0]:\n        return False\n    else:\n        # find the distance between the first note and the current note\n        distance = 0\n        for j in range(len(melody1)):\n            if melody1[j] == melody1[0]:\n                break\n            distance += 1\n        # check for inversion about the first note\n        for k in range(len(melody1)):\n            if melody1[k] != melody2[k]:\n                if melody1[0] == melody2[0]:\n                    if melody1[k] != melody2[k + distance]:\n                        return False\n                else:\n                    return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    },
    {
      "index": 1,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    if len(melody1) == len(melody2):\n        for i in range(len(melody1)):\n            if melody1[i] != melody2[i]:\n                return False\n        return True\n\ndef isRetrograde(melody1, melody2):\n    if len(melody1) == len(melody2):\n        for i in range(len(melody1)):\n            if melody1[i] != melody2[len(melody2)-1-i]:\n                return False\n        return True\n\ndef isInversion(melody1, melody2):\n    if len(melody1) == len(melody2):\n        for i in range(len(melody1)):\n            if melody1[i] != melody2[i]:\n                # check for inversion about first note\n                if melody1[0] == melody2[0]:\n                    return False\n                else:\n                    # find the distance between the first note and the current note\n                    distance = 0\n                    for j in range(len(melody1)):\n                        if melody1[j] == melody1[0]:\n                            break\n                        distance += 1\n                    # check for inversion about the first note\n                    for k in range(len(melody1)):\n                        if melody1[k] != melody2[k]:\n                            if melody1[0] == melody2[0]:\n                                if melody1[k] != melody2[k + distance]:\n                                    return False\n                            else:\n                                return False\n        return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    },
    {
      "index": 2,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[(k + distance) % len(melody2)]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    }
  ],
  "created": 1650070636,
  "object": "edit"
}
2022-04-16 00:57:30.277004 fix syntax errors 3 ['\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    # check for inversion about first note\n    if melody1[0] == melody2[0]:\n        return False\n    else:\n        # find the distance between the first note and the current note\n        distance = 0\n        for j in range(len(melody1)):\n            if melody1[j] == melody1[0]:\n                break\n            distance += 1\n        # check for inversion about the first note\n        for k in range(len(melody1)):\n            if melody1[k] != melody2[k]:\n                if melody1[0] == melody2[0]:\n                    if melody1[k] != melody2[k + distance]:\n                        return False\n                else:\n                    return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n', '\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    if len(melody1) == len(melody2):\n        for i in range(len(melody1)):\n            if melody1[i] != melody2[i]:\n                return False\n        return True\n\ndef isRetrograde(melody1, melody2):\n    if len(melody1) == len(melody2):\n        for i in range(len(melody1)):\n            if melody1[i] != melody2[len(melody2)-1-i]:\n                return False\n        return True\n\ndef isInversion(melody1, melody2):\n    if len(melody1) == len(melody2):\n        for i in range(len(melody1)):\n            if melody1[i] != melody2[i]:\n                # check for inversion about first note\n                if melody1[0] == melody2[0]:\n                    return False\n                else:\n                    # find the distance between the first note and the current note\n                    distance = 0\n                    for j in range(len(melody1)):\n                        if melody1[j] == melody1[0]:\n                            break\n                        distance += 1\n                    # check for inversion about the first note\n                    for k in range(len(melody1)):\n                        if melody1[k] != melody2[k]:\n                            if melody1[0] == melody2[0]:\n                                if melody1[k] != melody2[k + distance]:\n                                    return False\n                            else:\n                                return False\n        return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n', '\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[(k + distance) % len(melody2)]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n']
2022-04-16 00:57:30.277084 size on output set 3
2022-04-16 00:57:30.277096 num operations 1
2022-04-16 00:57:30.277102 size on input set 1
2022-04-16 00:57:39.149050 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    return m1[1:] == m2[1:] and m1[0] == m2[-1]\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    return m1[::-1] == m2\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    return m1[1:] == m2[1:] and m1[0] == m2[-1]\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = [int(i) for i in input().split()]\n    # read the second melody\n    m2 = [int(i) for i in input().split()]\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m2)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 1) % len(m2)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()[:l]\n    # read the second melody\n    m2 = input().split()[:l]\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650070650,
  "object": "edit"
}
2022-04-16 00:57:39.149330 fix syntax errors 3 ['\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    return m1[1:] == m2[1:] and m1[0] == m2[-1]\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    return m1[::-1] == m2\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    return m1[1:] == m2[1:] and m1[0] == m2[-1]\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = [int(i) for i in input().split()]\n    # read the second melody\n    m2 = [int(i) for i in input().split()]\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m2)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 1) % len(m2)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()[:l]\n    # read the second melody\n    m2 = input().split()[:l]\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:57:39.149391 size on output set 3
2022-04-16 00:57:39.149403 num operations 1
2022-04-16 00:57:39.149408 size on input set 1
2022-04-16 00:57:44.443364 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:  # transpose(note) = transpose(note)\n        print(\"Transposition\")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:  # invert(note, melody1[0]) = invert(note, melody1[0])\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]\n        print(\"Transposition\")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if transposition\n    elif melody2 == [transpose(note) for note in melody1]:\n        print(\"Transposition\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1: \n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650070659,
  "object": "edit"
}
2022-04-16 00:57:44.443660 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:  # transpose(note) = transpose(note)\n        print("Transposition")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:  # invert(note, melody1[0]) = invert(note, melody1[0])\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]\n        print("Transposition")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if transposition\n    elif melody2 == [transpose(note) for note in melody1]:\n        print("Transposition")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1: \n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:57:44.443750 size on output set 3
2022-04-16 00:57:44.443768 num operations 1
2022-04-16 00:57:44.443774 size on input set 1
2022-04-16 00:57:52.802496 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split(\" \")\n    n = int(input().strip())\n    m1 = input().strip().split(\" \")\n    m2 = input().strip().split(\" \")\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:\n        print(\"Retrograde\")\n    elif m2 == m1[::-1]:\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()  # chromatic scale\n    n = int(input().strip())\n    m1 = input().strip().split()  # original melody\n    m2 = input().strip().split()  # transformed melody\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1] or m2 == m1[::-1]:  # if one is the reverse of the other\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:  # transposition\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:  # inversion\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()\n    n = int(input().strip()) # number of notes\n    m1 = input().strip().split() # first melody\n    m2 = input().strip().split() # second melody\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:\n        print(\"Retrograde\")\n    elif m2 == m1[::-1]:\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650070664,
  "object": "edit"
}
2022-04-16 00:57:52.802756 fix syntax errors 3 ['\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split(" ")\n    n = int(input().strip())\n    m1 = input().strip().split(" ")\n    m2 = input().strip().split(" ")\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1]:\n        print("Retrograde")\n    elif m2 == m1[::-1]:\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()  # chromatic scale\n    n = int(input().strip())\n    m1 = input().strip().split()  # original melody\n    m2 = input().strip().split()  # transformed melody\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1] or m2 == m1[::-1]:  # if one is the reverse of the other\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:  # transposition\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:  # inversion\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()\n    n = int(input().strip()) # number of notes\n    m1 = input().strip().split() # first melody\n    m2 = input().strip().split() # second melody\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1]:\n        print("Retrograde")\n    elif m2 == m1[::-1]:\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:57:52.802799 size on output set 3
2022-04-16 00:57:52.802809 num operations 1
2022-04-16 00:57:52.802815 size on input set 1
2022-04-16 00:58:01.212708 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\"\"\"\nMelody\n\"\"\"\n\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2): # pylint: disable=C0103\n    \"\"\"\n    checks if the melodies are transposition of each other\n    \"\"\"\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    for i in range(0, len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(0, len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650070672,
  "object": "edit"
}
2022-04-16 00:58:01.212910 fix syntax errors 3 ['\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '"""\nMelody\n"""\n\n\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\']\n\ndef transposition(melody1, melody2): # pylint: disable=C0103\n    """\n    checks if the melodies are transposition of each other\n    """\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\']\n\ndef transposition(melody1, melody2):\n    for i in range(0, len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(0, len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:58:01.213045 size on output set 3
2022-04-16 00:58:01.213058 num operations 1
2022-04-16 00:58:01.213063 size on input set 1
2022-04-16 00:58:05.008284 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\ndef main():\n    length = int(input())\n    melody1 = [int(x) for x in input().split()]\n    melody2 = [int(x) for x in input().split()]\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes.index(melody2[i]) + notes.index(melody2[0]):\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + 12 - notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\ndef main():\n    length = int(input())\n    melody1 = list(input().split())\n    melody2 = list(input().split())\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650070681,
  "object": "edit"
}
2022-04-16 00:58:05.008481 fix syntax errors 3 ['\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n\ndef main():\n    length = int(input())\n    melody1 = [int(x) for x in input().split()]\n    melody2 = [int(x) for x in input().split()]\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes.index(melody2[i]) + notes.index(melody2[0]):\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + 12 - notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n\ndef main():\n    length = int(input())\n    melody1 = list(input().split())\n    melody2 = list(input().split())\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:58:05.008532 size on output set 3
