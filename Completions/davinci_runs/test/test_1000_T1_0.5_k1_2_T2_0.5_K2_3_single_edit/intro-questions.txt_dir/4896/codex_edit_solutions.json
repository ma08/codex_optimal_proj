["\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = bricks[0]\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nn = int(sys.stdin.readline().strip())\nbricks = [int(x) for x in sys.stdin.readline().strip().split()]\n\n\nmin_width = bricks[0]\nnum_towers = 1\n\nfor brick in bricks[1:]:\n    if brick > min_width:\n        num_towers += 1\n        min_width = brick\n\nprint(num_towers)\n", "import sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = [bricks[0]]\n    for brick in bricks:\n        if brick > towers[-1]:\n            towers.append(brick)\n    print(len(towers))\n\nmain()\n", "\nN = int(input())\nbricks = list(map(int, input().split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] <= bricks[i-1]:\n        towers += 1\n\nprint(towers)\n", "\nN = int(input())\nbricks = list(map(int, input().split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\n\nprint(towers)\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    N = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = bricks[0]\n    for i in range(1, N):\n        if bricks[i] > current_height:\n            towers += 1\n            current_height = bricks[i]\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    print(int(math.log(N,2)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport sys\n\ndef main():\n    # Read input\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    assert(len(bricks) == n)\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # Print result\n    print(towers,end=\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = input()\n    print(n)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = bricks[0] + 1\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n    towers += 1\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\nimport sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    N = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = 0\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 1\n    base = bricks[0]\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers = towers + 1\n            base = bricks[i]\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read input \n    n = int(sys.stdin.readline()) \n    bricks = [int(x) for x in sys.stdin.readline().split()] \n    assert(len(bricks) == n) \n\n    # Count towers \n    towers = 0 \n    for i in range(n): \n        if (i == 0) or (bricks[i] > bricks[i-1]): \n            towers += 1 \n\n    # Print result \n    print(towers) \n\nif __name__ == '__main__': \n    main() \n", "\nimport sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if brick > towers[-1]:\n                towers.append(brick)\n    print(len(towers)) \n\nmain()\n", "\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if brick > towers[-1]:\n                towers.append(brick)\n    print(len(towers))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    num_bricks = int(sys.stdin.readline().strip())\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    min_width = bricks[0]\n    num_towers = 1\n    for brick in bricks[1:]:\n        if brick > min_width:\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n"]