["\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    favs = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fav_cards = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = {}\n    for f in fav_cards.keys():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef get_input():\n    inputs = []\n    for i in range(5):\n        inputs.append(list(map(int, input().rstrip().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\n\ndef get_player_joy(cards, player_fav_numbers, joy_levels):\n    fav_cards = [list(filter(lambda x: x == player_fav_number, cards)) for player_fav_number in player_fav_numbers]\n    fav_cards = [len(cards) for cards in fav_cards]\n    return sum(map(lambda x: joy_levels[x], fav_cards))\n\n\n\ndef main(n, k, cards, player_fav_numbers, joy_levels):\n    return get_player_joy(get_cards(cards, n, k), player_fav_numbers, joy_levels)\n\n\nif __name__ == '__main__':\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    print(main(n, k, cards, player_fav_numbers, joy_levels))\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    favs = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fav_cards = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0.0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1.0\n\n    cards_per_player = {}\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index * k:(index + 1) * k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards)) \n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels) \n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n"]