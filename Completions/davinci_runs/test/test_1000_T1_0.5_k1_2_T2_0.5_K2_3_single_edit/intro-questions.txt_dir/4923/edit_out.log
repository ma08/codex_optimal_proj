2022-04-16 02:46:10.827333 num operations 1
2022-04-16 02:46:10.827354 size on input set 1
2022-04-16 02:46:16.687004 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    c = [0] * 7\n    for i in range(n):\n        c[a[i]] += 1\n        if c[a[i]] > 1:\n            c[a[i]] = -1\n\n    m = max(c)\n    if m == 0:\n        print('none')\n    else:\n        print(c.index(m))\n\n\nif __name__ == '__main__':\n    main()\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n"
    },
    {
      "index": 2,
      "text": "\nprint(int(input()) - int(input()))\n"
    }
  ],
  "created": 1650077170,
  "object": "edit"
}
2022-04-16 02:46:16.687222 fix syntax errors 3 ["\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    c = [0] * 7\n    for i in range(n):\n        c[a[i]] += 1\n        if c[a[i]] > 1:\n            c[a[i]] = -1\n\n    m = max(c)\n    if m == 0:\n        print('none')\n    else:\n        print(c.index(m))\n\n\nif __name__ == '__main__':\n    main()\n\nn = int(input())\na = list(map(int, input().split()))\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n", '\nprint(int(input()) - int(input()))\n']
2022-04-16 02:46:16.687251 size on output set 3
2022-04-16 02:46:16.687262 num operations 1
2022-04-16 02:46:16.687267 size on input set 1
2022-04-16 02:46:21.683055 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import Counter, defaultdict\n\ndef main():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        rolls = list(map(int, input().split()))\n        counts = Counter(rolls)\n        max_roll = max(counts)\n        if counts[max_roll] == 1:\n            print(rolls.index(max_roll) + 1)\n        else:\n            print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = map(int, input().split())\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts, key=counts.get)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650077176,
  "object": "edit"
}
2022-04-16 02:46:21.683331 fix syntax errors 3 ['\n\nfrom collections import Counter, defaultdict\n\ndef main():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        rolls = list(map(int, input().split()))\n        counts = Counter(rolls)\n        max_roll = max(counts)\n        if counts[max_roll] == 1:\n            print(rolls.index(max_roll) + 1)\n        else:\n            print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = map(int, input().split())\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts, key=counts.get)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:46:21.683365 size on output set 3
2022-04-16 02:46:21.683376 num operations 1
2022-04-16 02:46:21.683381 size on input set 1
2022-04-16 02:46:26.204538 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    _ = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    max_roll = max(rolls)\n    if rolls.count(max_roll) == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n\tn = int(input())\n\trolls = list(map(int, input().split()))\n\tmaxRoll = max(rolls)\n\tif rolls.count(maxRoll) == 1:\n\t\tprint(rolls.index(maxRoll) + 1)\n\telse:\n\t\tprint(\"none\")\n\nif __name__ == \"__main__\":\n\tmain()\n"
    }
  ],
  "created": 1650077181,
  "object": "edit"
}
2022-04-16 02:46:26.204718 fix syntax errors 3 ['\n\ndef main():\n    _ = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    max_roll = max(rolls)\n    if rolls.count(max_roll) == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n\tn = int(input())\n\trolls = list(map(int, input().split()))\n\tmaxRoll = max(rolls)\n\tif rolls.count(maxRoll) == 1:\n\t\tprint(rolls.index(maxRoll) + 1)\n\telse:\n\t\tprint("none")\n\nif __name__ == "__main__":\n\tmain()\n']
2022-04-16 02:46:26.204745 size on output set 3
2022-04-16 02:46:26.204764 num operations 1
2022-04-16 02:46:26.204768 size on input set 1
2022-04-16 02:46:31.139499 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers and print \"none\" if there are not\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split())) \n\n# Check if there are any unique numbers \nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\") \n\n# Check if there are any unique numbers \nelse:\n    # Find the highest unique number \n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number \n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 2,
      "text": "\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nif len(set(a)) != 1:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in a:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n\n# Check if there are any unique numbers\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1650077186,
  "object": "edit"
}
2022-04-16 02:46:31.139777 fix syntax errors 3 ['\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers and print "none" if there are not\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\n# Read input\nn = int(input())\na = list(map(int, input().split())) \n\n# Check if there are any unique numbers \nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none") \n\n# Check if there are any unique numbers \nelse:\n    # Find the highest unique number \n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number \n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nif len(set(a)) != 1:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in a:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n\n# Check if there are any unique numbers\nelse:\n    print("none")\n']
2022-04-16 02:46:31.139816 size on output set 3
2022-04-16 02:46:31.139828 num operations 1
2022-04-16 02:46:31.139832 size on input set 1
2022-04-16 02:46:37.519332 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"None\")\n"
    },
    {
      "index": 1,
      "text": "\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Get input\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Sort the list\n    a.sort()\n\n    # Check if the list has a unique max element\n    if a[-1] != a[-2]:\n        # Find the index of the unique max element\n        for i in range(len(a)):\n            if a[i] == a[-1]:\n                print(i + 1)\n                break\n    else:\n        print(\"none\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650077191,
  "object": "edit"
}
2022-04-16 02:46:37.519518 fix syntax errors 3 ['\n#\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("None")\n', '\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n', '\n\ndef main():\n    # Get input\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Sort the list\n    a.sort()\n\n    # Check if the list has a unique max element\n    if a[-1] != a[-2]:\n        # Find the index of the unique max element\n        for i in range(len(a)):\n            if a[i] == a[-1]:\n                print(i + 1)\n                break\n    else:\n        print("none")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:46:37.519547 size on output set 3
2022-04-16 02:46:37.519558 num operations 1
2022-04-16 02:46:37.519562 size on input set 1
2022-04-16 02:46:39.749727 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nrolls = [int(x) for x in input().split()[:n]]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner + 1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    }
  ],
  "created": 1650077197,
  "object": "edit"
}
2022-04-16 02:46:39.749923 fix syntax errors 3 ['\nn = int(input())\nrolls = [int(x) for x in input().split()[:n]]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n', '\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner + 1)\n', '\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n']
2022-04-16 02:46:39.749956 size on output set 3
2022-04-16 02:46:39.749966 num operations 1
2022-04-16 02:46:39.749971 size on input set 1
2022-04-16 02:46:43.516051 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n"
    }
  ],
  "created": 1650077199,
  "object": "edit"
}
2022-04-16 02:46:43.516299 fix syntax errors 3 ['\n\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n', '\n\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n', '\n\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n']
2022-04-16 02:46:43.516331 size on output set 2
