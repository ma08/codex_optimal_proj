["\n\ndef nop(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nmain()", "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a'))\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()\n    nop_count = 0\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 4)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 0\n    dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0)\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    #n = int(input())\n    #for i in range(n):\n    #    print(i)\n    #    print(input())\n    #    print(\"\")\n    #return\n\n    #s = input()\n    #print(s)\n    #return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions, parameters):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions, parameters)\nprint(nop_count)", "\n\ndef main():\n    program = input()\n    num_nop = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].isupper():\n            pass\n        elif i % 4 == 0 and program[i].islower():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].isupper():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].isupper():\n            num_nop += 3\n        elif i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nop)\n\nmain()"]