2022-04-16 01:54:24.399216 num operations 1
2022-04-16 01:54:24.399234 size on input set 1
2022-04-16 01:54:26.986912 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef nop(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef nop(inp):\n    n = len(inp)\n    dp = [0] * (n + 1) \n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n] \n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef nop(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650074064,
  "object": "edit"
}
2022-04-16 01:54:26.987148 fix syntax errors 3 ["\ndef nop(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef nop(inp):\n    n = len(inp)\n    dp = [0] * (n + 1) \n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n] \n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()\n", "\ndef nop(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:54:26.987178 size on output set 2
2022-04-16 01:54:26.987187 num operations 1
2022-04-16 01:54:26.987192 size on input set 1
2022-04-16 01:54:28.783483 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/bin/python3\n\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650074067,
  "object": "edit"
}
2022-04-16 01:54:28.783685 fix syntax errors 3 ['#!/bin/python3\n\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nmain()\n', "\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nif __name__ == '__main__':\n    main()\n", '\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:54:28.783714 size on output set 3
2022-04-16 01:54:28.783724 num operations 1
2022-04-16 01:54:28.783728 size on input set 1
2022-04-16 01:54:31.691703 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a')) #counts the number of 'a's in the parameters\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a')\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a'))\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650074068,
  "object": "edit"
}
2022-04-16 01:54:31.691909 fix syntax errors 3 ["\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a')) #counts the number of 'a's in the parameters\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a')\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a'))\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:54:31.691941 size on output set 3
2022-04-16 01:54:31.691952 num operations 1
2022-04-16 01:54:31.691956 size on input set 1
2022-04-16 01:54:33.544288 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()\n    nop_count = 0\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()\n    nop_count = 0\n    for index in range(len(code)):\n        if code[index].isupper() and code[index] != 'X':\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input(\"Enter code: \")\n    nop_count = 0\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650074071,
  "object": "edit"
}
2022-04-16 01:54:33.544577 fix syntax errors 3 ['\ndef main():\n    """\n    Main function\n    """\n    code = input()\n    nop_count = 0\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    code = input()\n    nop_count = 0\n    for index in range(len(code)):\n        if code[index].isupper() and code[index] != \'X\':\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    code = input("Enter code: ")\n    nop_count = 0\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:54:33.544607 size on output set 3
2022-04-16 01:54:33.544617 num operations 1
2022-04-16 01:54:33.544623 size on input set 1
2022-04-16 01:54:38.625906 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main(): print(input())\nif __name__ == \"__main__\": main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 4)\n    dp[0] = dp[1] = dp[2] = dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0)\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650074073,
  "object": "edit"
}
2022-04-16 01:54:38.626104 fix syntax errors 3 ['\ndef main(): print(input())\nif __name__ == "__main__": main()\n', "\nfrom sys import stdin\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 4)\n    dp[0] = dp[1] = dp[2] = dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0)\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:54:38.626139 size on output set 3
2022-04-16 01:54:38.626160 num operations 1
2022-04-16 01:54:38.626166 size on input set 1
2022-04-16 01:54:45.353934 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i)\n        print(input())\n        print(\"\")\n    return\n\n    s = input()\n    print(s)\n    return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # n = int(input())\n    # for i in range(n):\n    #     print(i)\n    #     print(input())\n    #     print(\"\")\n    # return\n\n    # s = input()\n    # print(s)\n    # return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef solve(s):\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    return n\n\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(\"Case #{}: {}\".format(i + 1, solve(input())))\n    return\n\n    s = input()\n    print(solve(s))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650074078,
  "object": "edit"
}
2022-04-16 01:54:45.354121 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i)\n        print(input())\n        print("")\n    return\n\n    s = input()\n    print(s)\n    return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # n = int(input())\n    # for i in range(n):\n    #     print(i)\n    #     print(input())\n    #     print("")\n    # return\n\n    # s = input()\n    # print(s)\n    # return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef solve(s):\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    return n\n\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print("Case #{}: {}".format(i + 1, solve(input())))\n    return\n\n    s = input()\n    print(solve(s))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:54:45.354153 size on output set 3
2022-04-16 01:54:45.354163 num operations 1
2022-04-16 01:54:45.354168 size on input set 1
2022-04-16 01:54:48.190442 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions)\nprint(nop_count)\n"
    },
    {
      "index": 1,
      "text": "\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\n\ndef get_nop_count(instructions, parameters):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions, parameters)\nprint(nop_count)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions, parameters):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0 and inst[1] != len(code) - 1:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions, parameters)\nprint(nop_count)\n"
    }
  ],
  "created": 1650074085,
  "object": "edit"
}
2022-04-16 01:54:48.190711 fix syntax errors 3 ['\n\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions)\nprint(nop_count)\n', '\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\n\ndef get_nop_count(instructions, parameters):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions, parameters)\nprint(nop_count)\n', '\n\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions, parameters):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0 and inst[1] != len(code) - 1:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions, parameters)\nprint(nop_count)\n']
2022-04-16 01:54:48.190752 size on output set 3
2022-04-16 01:54:48.190762 num operations 1
2022-04-16 01:54:48.190767 size on input set 1
2022-04-16 01:54:55.861617 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    program = input().strip()\n    num_nop = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].isupper():\n            pass\n        elif i % 4 == 0 and program[i].islower():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].isupper():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].isupper():\n            num_nop += 3\n        elif i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nop)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    program = input()\n    num_nop = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].islower():\n            pass\n        elif i % 4 == 0 and program[i].isupper():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].isupper():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].islower():\n            num_nop += 3\n        elif i % 4 == 3 and program[i].isupper():\n            pass\n    print(num_nop)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    program = input()\n    num_nop = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].isupper():\n            pass\n        if i % 4 == 0 and program[i].islower():\n            num_nop += 1\n        if i % 4 == 1 and program[i].isupper():\n            num_nop += 1\n        if i % 4 == 1 and program[i].islower():\n            pass\n        if i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        if i % 4 == 2 and program[i].islower():\n            pass\n        if i % 4 == 3 and program[i].isupper():\n            num_nop += 3\n        if i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nop)\n\nmain()\n"
    }
  ],
  "created": 1650074088,
  "object": "edit"
}
2022-04-16 01:54:55.861814 fix syntax errors 3 ['\n\ndef main():\n    program = input().strip()\n    num_nop = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].isupper():\n            pass\n        elif i % 4 == 0 and program[i].islower():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].isupper():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].isupper():\n            num_nop += 3\n        elif i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nop)\n\nmain()\n', '\n\ndef main():\n    program = input()\n    num_nop = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].islower():\n            pass\n        elif i % 4 == 0 and program[i].isupper():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].isupper():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].islower():\n            num_nop += 3\n        elif i % 4 == 3 and program[i].isupper():\n            pass\n    print(num_nop)\n\nmain()\n', '\n\ndef main():\n    program = input()\n    num_nop = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].isupper():\n            pass\n        if i % 4 == 0 and program[i].islower():\n            num_nop += 1\n        if i % 4 == 1 and program[i].isupper():\n            num_nop += 1\n        if i % 4 == 1 and program[i].islower():\n            pass\n        if i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        if i % 4 == 2 and program[i].islower():\n            pass\n        if i % 4 == 3 and program[i].isupper():\n            num_nop += 3\n        if i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nop)\n\nmain()\n']
2022-04-16 01:54:55.861861 size on output set 3
