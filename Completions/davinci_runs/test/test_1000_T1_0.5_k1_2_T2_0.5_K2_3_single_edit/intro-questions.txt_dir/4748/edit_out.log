2022-04-16 01:01:43.054885 num operations 1
2022-04-16 01:01:43.054911 size on input set 1
2022-04-16 01:01:52.679573 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    print(lines)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = [int(x) for x in lines[0].split()]\n    count = 0\n    for i in range(n):\n        count += len(lines[i+1].strip())\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650070903,
  "object": "edit"
}
2022-04-16 01:01:52.679810 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    print(lines)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = [int(x) for x in lines[0].split()]\n    count = 0\n    for i in range(n):\n        count += len(lines[i+1].strip())\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:01:52.679854 size on output set 3
2022-04-16 01:01:52.679873 num operations 1
2022-04-16 01:01:52.679879 size on input set 1
2022-04-16 01:01:59.471529 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    ans = [[0]*w for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if i%2 == 0:\n                ans[i][j] = a.pop()\n            else:\n                ans[i][w-j-1] = a.pop()\n    for i in range(h):\n        for j in range(w):\n            print(ans[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = 0\n    b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650070912,
  "object": "edit"
}
2022-04-16 01:01:59.471736 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    ans = [[0]*w for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if i%2 == 0:\n                ans[i][j] = a.pop()\n            else:\n                ans[i][w-j-1] = a.pop()\n    for i in range(h):\n        for j in range(w):\n            print(ans[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = 0\n    b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:01:59.471768 size on output set 3
2022-04-16 01:01:59.471779 num operations 1
2022-04-16 01:01:59.471784 size on input set 1
2022-04-16 01:02:01.693880 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    }
  ],
  "created": 1650070919,
  "object": "edit"
}
2022-04-16 01:02:01.694196 fix syntax errors 3 ['import math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n']
2022-04-16 01:02:01.694233 size on output set 2
2022-04-16 01:02:01.694246 num operations 1
2022-04-16 01:02:01.694251 size on input set 1
2022-04-16 01:02:16.400088 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        A, B = calculate_bricks(H, N, M)\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If 2 x 2-bricks needed is greater than 4 x 2-bricks needed,\n        # increase 2 x 2-bricks needed by 1 and decrease 4 x 2-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650070921,
  "object": "edit"
}
2022-04-16 01:02:16.400285 fix syntax errors 3 ['\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        A, B = calculate_bricks(H, N, M)\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If 2 x 2-bricks needed is greater than 4 x 2-bricks needed,\n        # increase 2 x 2-bricks needed by 1 and decrease 4 x 2-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:02:16.400399 size on output set 3
2022-04-16 01:02:16.400410 num operations 1
2022-04-16 01:02:16.400415 size on input set 1
2022-04-16 01:02:22.000737 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 1,
      "text": "\nh, n, m = map(int, input().split())\n\na_sum = 0\nb_sum = 0\n\nfor i in range(1, h+1):\n    a_sum += (2*i - 1)\n    b_sum += (2*i)\n\nif a_sum <= n:\n    print(0, m)\nelse:\n    a_sum -= n\n    if a_sum <= m*2:\n        print(a_sum//2, m - (a_sum//2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 2,
      "text": "\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, 0)\nelse:\n    a -= n\n    if a <= m:\n        print(a, 0)\n    else:\n        print(m, 0)\n"
    }
  ],
  "created": 1650070936,
  "object": "edit"
}
2022-04-16 01:02:22.000992 fix syntax errors 3 ['\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n', '\nh, n, m = map(int, input().split())\n\na_sum = 0\nb_sum = 0\n\nfor i in range(1, h+1):\n    a_sum += (2*i - 1)\n    b_sum += (2*i)\n\nif a_sum <= n:\n    print(0, m)\nelse:\n    a_sum -= n\n    if a_sum <= m*2:\n        print(a_sum//2, m - (a_sum//2))\n    else:\n        print(m, 0)\n', '\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, 0)\nelse:\n    a -= n\n    if a <= m:\n        print(a, 0)\n    else:\n        print(m, 0)\n']
2022-04-16 01:02:22.001022 size on output set 3
2022-04-16 01:02:22.001032 num operations 1
2022-04-16 01:02:22.001037 size on input set 1
2022-04-16 01:02:36.046193 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2)-1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2)-1-m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2)-1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2)-1-m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2, and number of\n    bricks of size 4x2, return the number of bricks needed to complete the pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h == 2:\n            if n % 2 == 0:\n                print(0, 0)\n            else:\n                print(1, 0)\n        else:\n            if n % 2 == 0:\n                extra_2 = 0\n            else:\n                extra_2 = 1\n            if (h//2) - 1 <= m:\n                extra_4 = 0\n            else:\n                extra_4 = (h//2) - 1 - m\n        elif h % 2 == 1:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650070942,
  "object": "edit"
}
2022-04-16 01:02:36.046391 fix syntax errors 3 ["\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2)-1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2)-1-m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2)-1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2)-1-m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2, and number of\n    bricks of size 4x2, return the number of bricks needed to complete the pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h == 2:\n            if n % 2 == 0:\n                print(0, 0)\n            else:\n                print(1, 0)\n        else:\n            if n % 2 == 0:\n                extra_2 = 0\n            else:\n                extra_2 = 1\n            if (h//2) - 1 <= m:\n                extra_4 = 0\n            else:\n                extra_4 = (h//2) - 1 - m\n        elif h % 2 == 1:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:02:36.046516 size on output set 3
