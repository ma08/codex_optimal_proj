2022-04-16 01:01:11.835227 num operations 1
2022-04-16 01:01:11.835245 size on input set 1
2022-04-16 01:01:15.532674 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2.0 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / float(n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5 # expected score of a single die\n    else:\n        expected_score = 0\n        for i in range(1, n+1):\n            expected_score += i * (k-1) / (n**k - 1)\n        return expected_score\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n + 1):\n            numerator += i * (k - 1) / (n ** k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650070871,
  "object": "edit"
}
2022-04-16 01:01:15.533125 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2.0 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / float(n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5 # expected score of a single die\n    else:\n        expected_score = 0\n        for i in range(1, n+1):\n            expected_score += i * (k-1) / (n**k - 1)\n        return expected_score\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n + 1):\n            numerator += i * (k - 1) / (n ** k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:01:15.533178 size on output set 3
2022-04-16 01:01:15.533188 num operations 1
2022-04-16 01:01:15.533194 size on input set 1
2022-04-16 01:01:21.410871 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n + 1):\n        # Compute the probability of rolling i\n        probability = 1 / float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n + 1):\n                # Compute the probability of rolling j\n                probability *= 1 / float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i\n        score = i\n\n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650070875,
  "object": "edit"
}
2022-04-16 01:01:21.411085 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n + 1):\n        # Compute the probability of rolling i\n        probability = 1 / float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n + 1):\n                # Compute the probability of rolling j\n                probability *= 1 / float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i\n        score = i\n\n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\ndef main():\n    print("Hello World")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 01:01:21.411124 size on output set 3
2022-04-16 01:01:21.411136 num operations 1
2022-04-16 01:01:21.411141 size on input set 1
2022-04-16 01:01:24.134549 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n // 2\n    if n == 1:\n        return 1\n    return (n // 2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650070881,
  "object": "edit"
}
2022-04-16 01:01:24.134828 fix syntax errors 3 ["\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n // 2\n    if n == 1:\n        return 1\n    return (n // 2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:01:24.134880 size on output set 3
2022-04-16 01:01:24.134898 num operations 1
2022-04-16 01:01:24.134904 size on input set 1
2022-04-16 01:01:26.157475 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 1,
      "text": "n, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 2,
      "text": "\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    }
  ],
  "created": 1650070884,
  "object": "edit"
}
2022-04-16 01:01:26.157661 fix syntax errors 3 ['\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n', 'n, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n', '\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n']
2022-04-16 01:01:26.157685 size on output set 2
2022-04-16 01:01:26.157696 num operations 1
2022-04-16 01:01:26.157701 size on input set 1
2022-04-16 01:01:29.264041 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2\n    return (n + 1) / 2 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2\n"
    },
    {
      "index": 1,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()][:2]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n"
    },
    {
      "index": 2,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split(\" \")]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n"
    }
  ],
  "created": 1650070886,
  "object": "edit"
}
2022-04-16 01:01:29.264225 fix syntax errors 3 ['\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2\n    return (n + 1) / 2 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2\n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()][:2]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split(" ")]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n']
2022-04-16 01:01:29.264255 size on output set 3
2022-04-16 01:01:29.264265 num operations 1
2022-04-16 01:01:29.264270 size on input set 1
2022-04-16 01:01:33.136904 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    }
  ],
  "created": 1650070889,
  "object": "edit"
}
2022-04-16 01:01:33.137098 fix syntax errors 3 ['\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', 'import sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n']
2022-04-16 01:01:33.137133 size on output set 3
2022-04-16 01:01:33.137153 num operations 1
2022-04-16 01:01:33.137222 size on input set 1
2022-04-16 01:01:37.331456 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2.0\n    else:\n        return (n+1)/2.0 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\ndef calculate(n, k):\n    if k == 1:\n        return (n + 1)/2\n    else:\n        return (n + 1)/2 + ((n - 1)/n)*(k - 1)*calculate(n, k - 1)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n"
    }
  ],
  "created": 1650070893,
  "object": "edit"
}
2022-04-16 01:01:37.331646 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2.0\n    else:\n        return (n+1)/2.0 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\ndef calculate(n, k):\n    if k == 1:\n        return (n + 1)/2\n    else:\n        return (n + 1)/2 + ((n - 1)/n)*(k - 1)*calculate(n, k - 1)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n']
2022-04-16 01:01:37.331675 size on output set 3
2022-04-16 01:01:37.331686 num operations 1
2022-04-16 01:01:37.331691 size on input set 1
2022-04-16 01:01:42.674991 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Die, k-times \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 1,
      "text": "\n\n#Die, k-times - http://codeforces.com/problemset/problem/849/A\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import Counter\nn = int(input())\narr = list(map(int, input().split()))\ncounts = Counter(arr)\nfor i in range(n):\n    if counts[arr[i]] == 1:\n        print(arr[i])\n        break\n"
    }
  ],
  "created": 1650070897,
  "object": "edit"
}
2022-04-16 01:01:42.675212 fix syntax errors 3 ['\n\n#Die, k-times \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n\n#Die, k-times - http://codeforces.com/problemset/problem/849/A\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\nfrom collections import Counter\nn = int(input())\narr = list(map(int, input().split()))\ncounts = Counter(arr)\nfor i in range(n):\n    if counts[arr[i]] == 1:\n        print(arr[i])\n        break\n']
2022-04-16 01:01:42.675238 size on output set 3
