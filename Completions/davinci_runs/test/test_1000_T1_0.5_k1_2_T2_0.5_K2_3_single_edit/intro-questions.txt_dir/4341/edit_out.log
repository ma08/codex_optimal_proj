2022-04-15 23:41:18.177601 num operations 1
2022-04-15 23:41:18.177611 size on input set 1
2022-04-15 23:41:34.729255 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(set)\n\n    def addEdge(self, u, v):\n        self.graph[u].add(v)\n        self.graph[v].add(u)\n\n    def isCycle(self, u, visited, parent):\n        visited[u] = True\n        for v in self.graph[u]:\n            if visited[v] == False:\n                if self.isCycle(v, visited, u) == True:\n                    return True\n            elif v != parent:\n                return True\n        return False\n\n    def cycle(self):\n        visited = [False] * (len(self.graph) + 1)\n        count = 0\n        for i in range(1, len(self.graph) + 1):\n            if visited[i] == False:\n                if self.isCycle(i, visited, -1) == True:\n                    count += 1\n        return count\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    g = Graph()\n    for i in range(m):\n        u, v = [int(x) for x in input().split()]\n        g.addEdge(u, v)\n    print(g.cycle())\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(set)\n\n    def addEdge(self, u, v):\n        self.graph[u].add(v)\n        self.graph[v].add(u)\n\n    def isCycle(self, u, visited, parent):\n        visited[u] = True\n        for v in self.graph[u]:\n            if not visited[v]:\n                if self.isCycle(v, visited, u):\n                    return True\n            elif v != parent:\n                return True\n        return False\n\n    def cycle(self):\n        visited = [False] * (len(self.graph) + 1)\n        count = 0\n        for i in range(1, len(self.graph) + 1):\n            if not visited[i]:\n                if self.isCycle(i, visited, -1):\n                    count += 1\n        return count\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    g = Graph()\n    for i in range(m):\n        u, v = [int(x) for x in input().split()]\n        g.addEdge(u, v)\n    print(g.cycle())\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "# https://www.geeksforgeeks.org/find-number-of-islands/\n\nfrom collections import defaultdict\n\n\n    def addEdge(self, u, v):\n        self.graph[u].add(v)\n        self.graph[v].add(u)\n\n    def isCycle(self, u, visited, parent):\n        visited[u] = True\n        for v in self.graph[u]:\n            if visited[v] == False:\n                if self.isCycle(v, visited, u) == True:\n                    return True\n            elif v != parent:\n                return True\n        return False\n\n    def cycle(self):\n        visited = [False] * (len(self.graph) + 1)\n        count = 0\n        for i in range(1, len(self.graph) + 1):\n            if visited[i] == False:\n                if self.isCycle(i, visited, -1) == True:\n                    count += 1\n        return count\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    g = Graph()\n    for i in range(m):\n        u, v = [int(x) for x in input().split()]\n        g.addEdge(u, v)\n    print(g.cycle())\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650066078,
  "object": "edit"
}
2022-04-15 23:41:34.729485 fix syntax errors 3 ['\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(set)\n\n    def addEdge(self, u, v):\n        self.graph[u].add(v)\n        self.graph[v].add(u)\n\n    def isCycle(self, u, visited, parent):\n        visited[u] = True\n        for v in self.graph[u]:\n            if visited[v] == False:\n                if self.isCycle(v, visited, u) == True:\n                    return True\n            elif v != parent:\n                return True\n        return False\n\n    def cycle(self):\n        visited = [False] * (len(self.graph) + 1)\n        count = 0\n        for i in range(1, len(self.graph) + 1):\n            if visited[i] == False:\n                if self.isCycle(i, visited, -1) == True:\n                    count += 1\n        return count\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    g = Graph()\n    for i in range(m):\n        u, v = [int(x) for x in input().split()]\n        g.addEdge(u, v)\n    print(g.cycle())\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(set)\n\n    def addEdge(self, u, v):\n        self.graph[u].add(v)\n        self.graph[v].add(u)\n\n    def isCycle(self, u, visited, parent):\n        visited[u] = True\n        for v in self.graph[u]:\n            if not visited[v]:\n                if self.isCycle(v, visited, u):\n                    return True\n            elif v != parent:\n                return True\n        return False\n\n    def cycle(self):\n        visited = [False] * (len(self.graph) + 1)\n        count = 0\n        for i in range(1, len(self.graph) + 1):\n            if not visited[i]:\n                if self.isCycle(i, visited, -1):\n                    count += 1\n        return count\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    g = Graph()\n    for i in range(m):\n        u, v = [int(x) for x in input().split()]\n        g.addEdge(u, v)\n    print(g.cycle())\n\nif __name__ == "__main__":\n    main()\n', '# https://www.geeksforgeeks.org/find-number-of-islands/\n\nfrom collections import defaultdict\n\n\n    def addEdge(self, u, v):\n        self.graph[u].add(v)\n        self.graph[v].add(u)\n\n    def isCycle(self, u, visited, parent):\n        visited[u] = True\n        for v in self.graph[u]:\n            if visited[v] == False:\n                if self.isCycle(v, visited, u) == True:\n                    return True\n            elif v != parent:\n                return True\n        return False\n\n    def cycle(self):\n        visited = [False] * (len(self.graph) + 1)\n        count = 0\n        for i in range(1, len(self.graph) + 1):\n            if visited[i] == False:\n                if self.isCycle(i, visited, -1) == True:\n                    count += 1\n        return count\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    g = Graph()\n    for i in range(m):\n        u, v = [int(x) for x in input().split()]\n        g.addEdge(u, v)\n    print(g.cycle())\n\nif __name__ == "__main__":\n    main()\n']
2022-04-15 23:41:34.729534 size on output set 3
2022-04-15 23:41:34.729544 num operations 1
2022-04-15 23:41:34.729549 size on input set 1
2022-04-15 23:41:37.225055 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph, child, visited)\ndef count_cycles(graph):\n    visited = set()\n    cycles = 0\n    for node in graph:\n        if node not in visited:\n            dfs(graph, node, visited)\n            cycles += 1\n    return cycles\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        v, u = map(int, sys.stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    print(count_cycles(graph))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph, child, visited)\ndef count_cycles(graph):\n    visited = set()\n    cycles = 0\n    for node in graph:\n        if node not in visited:\n            dfs(graph, node, visited)\n            cycles += 1\n    return cycles\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        v, u = map(int, sys.stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    print(count_cycles(graph))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#\nimport sys\n\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph, child, visited)\n\ndef count_cycles(graph):\n    visited = set()\n    cycles = 0\n\n    for node in graph:\n        if node not in visited:\n            dfs(graph, node, visited)\n            cycles += 1\n    return cycles\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n\n    graph = {i: [] for i in range(1, n + 1)}\n\n    for _ in range(m):\n        v, u = map(int, sys.stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    print(count_cycles(graph))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650066094,
  "object": "edit"
}
2022-04-15 23:41:37.225538 fix syntax errors 3 ["\nimport sys\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph, child, visited)\ndef count_cycles(graph):\n    visited = set()\n    cycles = 0\n    for node in graph:\n        if node not in visited:\n            dfs(graph, node, visited)\n            cycles += 1\n    return cycles\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        v, u = map(int, sys.stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    print(count_cycles(graph))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph, child, visited)\ndef count_cycles(graph):\n    visited = set()\n    cycles = 0\n    for node in graph:\n        if node not in visited:\n            dfs(graph, node, visited)\n            cycles += 1\n    return cycles\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        v, u = map(int, sys.stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    print(count_cycles(graph))\n\nif __name__ == '__main__':\n    main()\n", "\n#\nimport sys\n\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph, child, visited)\n\ndef count_cycles(graph):\n    visited = set()\n    cycles = 0\n\n    for node in graph:\n        if node not in visited:\n            dfs(graph, node, visited)\n            cycles += 1\n    return cycles\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n\n    graph = {i: [] for i in range(1, n + 1)}\n\n    for _ in range(m):\n        v, u = map(int, sys.stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    print(count_cycles(graph))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-15 23:41:37.225591 size on output set 2
