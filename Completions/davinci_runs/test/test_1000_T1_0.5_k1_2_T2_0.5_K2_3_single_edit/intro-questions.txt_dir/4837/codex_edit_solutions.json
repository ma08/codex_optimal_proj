["\n\ndef main():\n    print(\"Hello world!\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        print(score)\n        score = 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main2():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"S\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"S\"\n    elif symbol == \"P\":\n        return \"R\"\n    else:\n        return \"P\"\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven_seq = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    sven_score = 0\n    sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven_seq, friend)\n        sven_max_score += max_compare(sven_seq, friend)\n    print(sven_score)\n    print(sven_max_score)\n\ndef compare(sven_seq, friend):\n    score = 0\n    for i in range(len(sven_seq)):\n        if sven_seq[i] == friend[i]:\n            score += 1\n        elif sven_seq[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven_seq[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven_seq[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(sven_seq, friend):\n    score = 0\n    for i in range(len(sven_seq)):\n        if sven_seq[i] == friend[i]:\n            score += 1\n        elif sven_seq[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven_seq[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven_seq[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif sven_seq[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif sven_seq[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif sven_seq[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven = input().upper()\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input().upper())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i].upper()\n        friends_symbols_in_round = list(map(lambda x: x[i].upper(), friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol).upper())\n        tie_count = friends_symbols_in_round.count(sven_symbol.upper())\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven[i] == \"P\":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven = raw_input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(raw_input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n", "\n\nimport sys, math\n\ndef main():\n    print(prime_factors(600851475143))\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 2 * rounds\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        print(score)\n        print(max_score)\n        score = 0\n        max_score = 2 * rounds\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(str(score) + \" \" + str(max_score))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            if rock > paper:\n                actual_score += rock\n                largest_score += friends - max(rock, paper, scissors)\n            else:\n                if paper > scissors:\n                    actual_score += paper\n                    largest_score += friends - max(rock, paper, scissors)\n                else:\n                    actual_score += scissors\n                    largest_score += friends - max(rock, paper, scissors)\n        elif sven[i] == \"P\":\n            if paper > scissors:\n                actual_score += paper\n                largest_score += friends - max(rock, paper, scissors)\n            else:\n                if scissors > rock:\n                    actual_score += scissors\n                    largest_score += friends - max(rock, paper, scissors)\n                else:\n                    actual_score += rock\n                    largest_score += friends - max(rock, paper, scissors)\n        else:\n            if scissors > rock:\n                actual_score += scissors\n                largest_score += friends - max(rock, paper, scissors)\n            else:\n                if rock > paper:\n                    actual_score += rock\n                    largest_score += friends - max(rock, paper, scissors)\n                else:\n                    actual_score += paper\n                    largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    sven = input()\n    N = int(input())\n    friends = set()\n    for i in range(N):\n        friends.add(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            if 'P' in friends or 'S' in friends:\n                score += 2\n        elif sven[i] == 'P':\n            if 'R' in friends or 'P' in friends:\n                score += 2\n        elif sven[i] == 'R':\n            if 'S' in friends or 'R' in friends:\n                score += 2\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            if 'P' not in friends:\n                max_score += 2\n        elif sven[i] == 'P':\n            if 'R' not in friends:\n                max_score += 2\n        elif sven[i] == 'R':\n            if 'S' not in friends:\n                max_score += 2\n\n    print(score)\n    print(max_score)\n\nmain()\n", "\n\ndef main():\n    rounds, friends = [int(x) for x in input().split()]\n    sven = input()\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score, largest_score = 0, 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n        sven_wins, sven_ties = 0, 0\n        for friend_symbol in friend_symbols: \n            if sven[round] == friend_symbol[round]: \n                sven_ties += 1 \n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\": \n                sven_wins += 1 \n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\": \n                sven_wins += 1 \n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\": \n                sven_wins += 1 \n        largest_score += sven_wins * 2 + sven_ties \n    print(actual_score)\n    print(largest_score)\n\nmain()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R - 1):\n        if sven[i] == 'S':\n            if 'P' in friends[i]:\n                score += 2\n            elif 'S' in friends[i]:\n                score += 1\n        elif sven[i] == 'P':\n            if 'R' in friends[i]:\n                score += 2\n            elif 'P' in friends[i]:\n                score += 1\n        elif sven[i] == 'R':\n            if 'S' in friends[i]:\n                score += 2\n            elif 'R' in friends[i]:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R - 1):\n        if sven[i] == 'S':\n            if 'P' not in friends[i]:\n                max_score += 2\n            elif 'S' not in friends[i]:\n                max_score += 1\n        elif sven[i] == 'P':\n            if 'R' not in friends[i]:\n                max_score += 2\n            elif 'P' not in friends[i]:\n                max_score += 1\n        elif sven[i] == 'R':\n            if 'S' not in friends[i]:\n                max_score += 2\n            elif 'R' not in friends[i]:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n", "\n\n# import sys\n\n# def main():\n#     r = int(sys.stdin.readline().strip())\n#     sven = sys.stdin.readline().strip()\n#     n = int(sys.stdin.readline().strip())\n#     friends = []\n#     for i in range(n):\n#         friends.append(sys.stdin.readline().strip())\n\n#     # Actual score\n#     score = 0\n#     for i in range(r):\n#         for friend in friends:\n#             if sven[i] == 'R':\n#                 if friend[i] == 'S':\n#                     score += 2\n#                 elif friend[i] == 'P':\n#                     score += 1\n#             elif sven[i] == 'S':\n#                 if friend[i] == 'P':\n#                     score += 2\n#                 elif friend[i] == 'R':\n#                     score += 1\n#             elif sven[i] == 'P':\n#                 if friend[i] == 'R':\n#                     score += 2\n#                 elif friend[i] == 'S':\n#                     score += 1\n#     print(score)\n\n#     # Max score\n#     score = 0\n#     for i in range(r):\n#         for friend in friends:\n#             if sven[i] == 'R':\n#                 if friend[i] == 'S':\n#                     score += 2\n#             elif sven[i] == 'S':\n#                 if friend[i] == 'P':\n#                     score += 2\n#             elif sven[i] == 'P':\n#                 if friend[i] == 'R':\n#                     score += 2\n#     score += r\n#     print(score)\n\n# if __name__ == \"__main__\":\n#     main()\n", "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends):\n    if len(sven) != len(friends[0]):\n        print('Error: Sven and friends have different numbers of rounds')\n        return -1\n    else:\n        rounds = len(sven)\n    score = 0\n    for i in range(rounds):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(rounds):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys  # this is used to take input from the console\n\ndef main():\n    r = int(sys.stdin.readline().strip())  # the number of rounds\n    sven = sys.stdin.readline().strip()  # sven's moves\n    n = int(sys.stdin.readline().strip())  # the number of friends\n    friends = []  # list to hold friend moves\n    for i in range(n):  # loop to add friend moves to list\n        friends.append(sys.stdin.readline().strip())  # add friend moves to list\n\n    score = 0  # score variable\n    for i in range(r):  # loop to iterate through rounds\n        for friend in friends:  # loop to iterate through friends\n            if sven[i] == 'R':  # if sven uses rock\n                if friend[i] == 'S':  # and friend uses scissors\n                    score += 2  # increment score by 2\n                elif friend[i] == 'P':  # else if friend uses paper\n                    score += 1  # increment score by 1\n            elif sven[i] == 'S':  # else if sven uses scissors\n                if friend[i] == 'P':  # and friend uses paper\n                    score += 2  # increment score by 2\n                elif friend[i] == 'R':  # else if friend uses rock\n                    score += 1  # increment score by 1\n            elif sven[i] == 'P':  # else if sven uses paper\n                if friend[i] == 'R':  # and friend uses rock\n                    score += 2  # increment score by 2\n                elif friend[i] == 'S':  # else if friend uses scissors\n                    score += 1  # increment score by 1\n    print(score)\n\n    score = 0  # score variable\n    for i in range(r):  # loop to iterate through rounds\n        for friend in friends:  # loop to iterate through friends\n            if sven[i] == 'R':  # if sven uses rock\n                if friend[i] == 'S':  # and friend uses scissors\n                    score += 2  # increment score by 2\n            elif sven[i] == 'S':  # else if sven uses scissors\n                if friend[i] == 'P':  # and friend uses paper\n                    score += 2  # increment score by 2\n            elif sven[i] == 'P':  # else if sven uses paper\n                if friend[i] == 'R':  # and friend uses rock\n                    score += 2  # increment score by 2\n    score += r  # increment score by r\n    print(score)\n\nif __name__ == \"__main__\":  # run main function\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip() #strip removes newline character\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven[i] == \"P\":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n        print(score)\n                score += 2\n        max_score += 2 * rounds\n        print(max_score)\n        score = 0\n        max_score = 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            for friend in friends:\n                if friend == 'P':\n                    score += 2\n                elif friend == 'S':\n                    score += 1\n        elif sven[i] == 'P':\n            if 'R' in friends:\n                score += 2\n            elif 'P' in friends:\n                score += 1\n        elif sven[i] == 'R':\n            if 'S' in friends:\n                score += 2\n            elif 'R' in friends:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            if 'P' not in friends:\n                max_score += 2\n            elif 'S' not in friends:\n                max_score += 1\n        elif sven[i] == 'P':\n            if 'R' not in friends:\n                max_score += 2\n            elif 'P' not in friends:\n                max_score += 1\n        elif sven[i] == 'R':\n            if 'S' not in friends:\n                max_score += 2\n            elif 'R' not in friends:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip().split()\n    sven = sven[0]\n    friends = int(sys.stdin.readline().strip())\n\n    sven_score = 0\n    sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip().split()\n        friend = friend[0]\n        sven_score += compare(sven, friend)\n        sven_max_score += max_compare(sven, friend)\n    print(sven_score)\n    print(sven_max_score)\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends):\n    if len(sven) != len(friends[0]):\n        print('Error: Sven and friends have different numbers of rounds')\n        return -1\n    else:\n        rounds = len(sven)\n        score = 0\n        for i in range(len(sven)):\n            if sven[i] == 'S':\n                if friends[i] == 'P':\n                    score += 1\n                elif friends[i] == 'R':\n                    score += 2\n            elif sven[i] == 'P':\n                if friends[i] == 'R':\n                    score += 1\n                elif friends[i] == 'S':\n                    score += 2\n            elif sven[i] == 'R':\n                if friends[i] == 'S':\n                    score += 1\n                elif friends[i] == 'P':\n                    score += 2\n        return score\n\ndef get_max_score(sven, friends):\n    if len(sven) != len(friends[0]):\n        print('Error: Sven and friends have different numbers of rounds')\n        return -1\n    else:\n        rounds = len(sven)\n        max_score = 0\n        for i in range(len(sven)):\n            if sven[i] == 'S':\n                if friends[i] == 'R':\n                    max_score += 2\n                elif friends[i] == 'P':\n                    max_score += 1\n            elif sven[i] == 'P':\n                if friends[i] == 'S':\n                    max_score += 2\n                elif friends[i] == 'R':\n                    max_score += 1\n            elif sven[i] == 'R':\n                if friends[i] == 'P':\n                    max_score += 2\n                elif friends[i] == 'S':\n                    max_score += 1\n        return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    print(\"Hello world!\")\n\nmain()\n"]