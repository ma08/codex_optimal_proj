2022-04-16 01:12:33.295949 num operations 1
2022-04-16 01:12:33.295967 size on input set 1
2022-04-16 01:12:37.704827 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # prime numbers\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:  # prime numbers\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650071553,
  "object": "edit"
}
2022-04-16 01:12:37.705070 fix syntax errors 3 ['def main():\n    pass\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # prime numbers\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:  # prime numbers\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', 'def main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:12:37.705098 size on output set 3
2022-04-16 01:12:37.705113 num operations 1
2022-04-16 01:12:37.705119 size on input set 1
2022-04-16 01:12:40.527729 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce((lambda x, y: x * y), [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    }
  ],
  "created": 1650071557,
  "object": "edit"
}
2022-04-16 01:12:40.527938 fix syntax errors 3 ['\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce((lambda x, y: x * y), [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n']
2022-04-16 01:12:40.528073 size on output set 2
2022-04-16 01:12:40.528088 num operations 1
2022-04-16 01:12:40.528094 size on input set 1
2022-04-16 01:12:45.159390 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs) - 1:\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i + 1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0) is not 0:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef f():\n    return 1\n"
    }
  ],
  "created": 1650071560,
  "object": "edit"
}
2022-04-16 01:12:45.159630 fix syntax errors 3 ["\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs) - 1:\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i + 1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0) is not 0:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", '\ndef f():\n    return 1\n']
2022-04-16 01:12:45.159670 size on output set 3
2022-04-16 01:12:45.159693 num operations 1
2022-04-16 01:12:45.159701 size on input set 1
2022-04-16 01:12:49.572934 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19, sep='\\n'))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] # Read input\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    }
  ],
  "created": 1650071565,
  "object": "edit"
}
2022-04-16 01:12:49.573140 fix syntax errors 3 ['\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19)\n\nmain()\n', "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19, sep='\\n'))\n\nmain()\n", '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] # Read input\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n']
2022-04-16 01:12:49.573169 size on output set 3
2022-04-16 01:12:49.573180 num operations 1
2022-04-16 01:12:49.573185 size on input set 1
2022-04-16 01:12:53.005178 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()][0:18]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef compute(registers, max_value):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == max_value:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return max_value + 1 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers, 18))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650071569,
  "object": "edit"
}
2022-04-16 01:12:53.005365 fix syntax errors 3 ["#!/usr/bin/env python\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()][0:18]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers, max_value):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == max_value:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return max_value + 1 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers, 18))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:12:53.005477 size on output set 3
2022-04-16 01:12:53.005488 num operations 1
2022-04-16 01:12:53.005494 size on input set 1
2022-04-16 01:12:55.294761 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    print(19 - min(vals))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):  # iterate from 7 to 0\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    }
  ],
  "created": 1650071573,
  "object": "edit"
}
2022-04-16 01:12:55.295048 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    print(19 - min(vals))\n\nmain()\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += vals[i]\n    print(out)\n\nmain()\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):  # iterate from 7 to 0\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n']
2022-04-16 01:12:55.295081 size on output set 3
2022-04-16 01:12:55.295092 num operations 1
2022-04-16 01:12:55.295097 size on input set 1
2022-04-16 01:13:00.026666 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.extend([19, 0])\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    x = list(map(int, sys.stdin.readline().split()))\n    x.append(19)\n    x.append(0)\n    x.sort()\n    print(x[0]*x[1]*x[2]*x[3]*x[4]*x[5]*x[6])\n\nmain()\n"
    }
  ],
  "created": 1650071575,
  "object": "edit"
}
2022-04-16 01:13:00.026840 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.extend([19, 0])\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    x = list(map(int, sys.stdin.readline().split()))\n    x.append(19)\n    x.append(0)\n    x.sort()\n    print(x[0]*x[1]*x[2]*x[3]*x[4]*x[5]*x[6])\n\nmain()\n']
2022-04-16 01:13:00.026869 size on output set 3
2022-04-16 01:13:00.026880 num operations 1
2022-04-16 01:13:00.026885 size on input set 1
2022-04-16 01:13:01.729385 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    }
  ],
  "created": 1650071580,
  "object": "edit"
}
2022-04-16 01:13:01.729611 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', 'import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n']
2022-04-16 01:13:01.729763 size on output set 2
