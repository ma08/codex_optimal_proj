2022-04-16 03:20:22.699924 num operations 1
2022-04-16 03:20:22.699942 size on input set 1
2022-04-16 03:20:39.791584 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n# This is the main function that runs the program\ndef main():\n\n    # Get the input\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n    x = int(sys.stdin.readline())\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x))\n\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n# This is the main function that runs the program\ndef main():\n\n    # Get the input\n    x = int(sys.stdin.readline())\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x))\n\n\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\n\n# This is the main function that runs the program\ndef main():\n    # Get the input\n    x = int(sys.stdin.readline())\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x))\n\n\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650079222,
  "object": "edit"
}
2022-04-16 03:20:39.791835 fix syntax errors 3 ['\n\nimport sys\nimport math\n# This is the main function that runs the program\ndef main():\n\n    # Get the input\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n    x = int(sys.stdin.readline())\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x))\n\n', '\n\nimport sys\nimport math\n# This is the main function that runs the program\ndef main():\n\n    # Get the input\n    x = int(sys.stdin.readline())\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x))\n\n\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport math\n\n# This is the main function that runs the program\ndef main():\n    # Get the input\n    x = int(sys.stdin.readline())\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x))\n\n\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:20:39.792010 size on output set 3
2022-04-16 03:20:39.792023 num operations 1
2022-04-16 03:20:39.792029 size on input set 1
2022-04-16 03:20:42.174423 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\"\"\"\n1\n\"\"\"\n\ndef main():\n    \"\"\"main function\"\"\"\n    x = int(input())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x//(2*k + 1)\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    x = int(input())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // (2 * k + 1)\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650079239,
  "object": "edit"
}
2022-04-16 03:20:42.174667 fix syntax errors 3 ['\n\ndef main():\n    """main function"""\n    pass\n\nif __name__ == "__main__":\n    main()\n', '"""\n1\n"""\n\ndef main():\n    """main function"""\n    x = int(input())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x//(2*k + 1)\n    print(k)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """main function"""\n    x = int(input())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // (2 * k + 1)\n    print(k)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:20:42.174696 size on output set 3
2022-04-16 03:20:42.174709 num operations 1
2022-04-16 03:20:42.174715 size on input set 1
2022-04-16 03:20:47.652361 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    k = 0\n    while x > 1:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        k = 0\n        x = a\n        while x > 1:\n            k += 1\n            x //= 2\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    k = 0\n    while x > 1:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650079242,
  "object": "edit"
}
2022-04-16 03:20:47.652552 fix syntax errors 3 ['\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    k = 0\n    while x > 1:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        k = 0\n        x = a\n        while x > 1:\n            k += 1\n            x //= 2\n\n    print(k)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    k = 0\n    while x > 1:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:20:47.652579 size on output set 3
2022-04-16 03:20:47.652590 num operations 1
2022-04-16 03:20:47.652595 size on input set 1
2022-04-16 03:20:51.761112 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    k = int(math.log(X, 2))\n    print(k+1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    k = int(math.log(X, 2)) + 1\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n\ndef main():\n    N = int(sys.stdin.readline())\n    if N % 2 == 1:\n        print(\"Weird\")\n    else:\n        if 2 <= N <= 5:\n            print(\"Not Weird\")\n        elif 6 <= N <= 20:\n            print(\"Weird\")\n        else:\n            print(\"Not Weird\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650079247,
  "object": "edit"
}
2022-04-16 03:20:51.761302 fix syntax errors 3 ['\n\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    k = int(math.log(X, 2))\n    print(k+1)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    k = int(math.log(X, 2)) + 1\n    print(k)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\n\ndef main():\n    N = int(sys.stdin.readline())\n    if N % 2 == 1:\n        print("Weird")\n    else:\n        if 2 <= N <= 5:\n            print("Not Weird")\n        elif 6 <= N <= 20:\n            print("Weird")\n        else:\n            print("Not Weird")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:20:51.761329 size on output set 3
2022-04-16 03:20:51.761340 num operations 1
2022-04-16 03:20:51.761346 size on input set 1
2022-04-16 03:20:54.109418 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c+1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c+1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c + 1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650079251,
  "object": "edit"
}
2022-04-16 03:20:54.109623 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c+1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c+1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c + 1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:20:54.109731 size on output set 2
2022-04-16 03:20:54.109741 num operations 1
2022-04-16 03:20:54.109747 size on input set 1
2022-04-16 03:20:57.485105 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    print(a)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // 2\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x/2\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650079254,
  "object": "edit"
}
2022-04-16 03:20:57.485300 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    print(a)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // 2\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x/2\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:20:57.485325 size on output set 3
2022-04-16 03:20:57.485335 num operations 1
2022-04-16 03:20:57.485340 size on input set 1
2022-04-16 03:20:59.345946 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    n = int(math.sqrt(x))\n    k = 0\n    while x > 1:\n        if x % n == 0:\n            k += 1\n        x //= n\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    n = int(math.sqrt(x))\n    k = 0\n    while x > 1:\n        if x % n == 0:\n            k += 1\n        x //= n\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\n\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    n = int(math.sqrt(x))\n    k = 0\n    while x > 1:\n        if x % n == 0:\n            k += 1\n        x //= n\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650079257,
  "object": "edit"
}
2022-04-16 03:20:59.346151 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    n = int(math.sqrt(x))\n    k = 0\n    while x > 1:\n        if x % n == 0:\n            k += 1\n        x //= n\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    n = int(math.sqrt(x))\n    k = 0\n    while x > 1:\n        if x % n == 0:\n            k += 1\n        x //= n\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    n = int(math.sqrt(x))\n    k = 0\n    while x > 1:\n        if x % n == 0:\n            k += 1\n        x //= n\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:20:59.346179 size on output set 3
