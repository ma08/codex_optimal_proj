2022-04-09 19:45:04.517469 """
Vova plans to go to the conference by train. Initially, the train is at the point $1$ and the destination point of the path is the point $L$. The speed of the train is $1$ length unit per minute (i.e. at the first minute the train is at the point $1$, at the second minute — at the point $2$ and so on).

There are lanterns on the path. They are placed at the points with coordinates divisible by $v$ (i.e. the first lantern is at the point $v$, the second is at the point $2v$ and so on).

There is also exactly one standing train which occupies all the points from $l$ to $r$ inclusive.

Vova can see the lantern at the point $p$ if $p$ is divisible by $v$ and there is no standing train at this position ($p \not\in [l; r]$). Thus, if the point with the lantern is one of the points covered by the standing train, Vova can't see this lantern.

Your problem is to say the number of lanterns Vova will see during the path. Vova plans to go to $t$ different conferences, so you should answer $t$ independent queries.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 10^4$) — the number of queries.

Then $t$ lines follow. The $i$-th line contains four integers $L_i, v_i, l_i, r_i$ ($1 \le L, v \le 10^9$, $1 \le l \le r \le L$) — destination point of the $i$-th path, the period of the lantern appearance and the segment occupied by the standing train.


-----Output-----

Print $t$ lines. The $i$-th line should contain one integer — the answer for the $i$-th query.


-----Example-----
Input
4
10 2 3 7
100 51 51 51
1234 1 100 199
1000000000 1 1 1000000000

Output
3
0
1134
0



-----Note-----

For the first example query, the answer is $3$. There are lanterns at positions $2$, $4$, $6$, $8$ and $10$, but Vova didn't see the lanterns at positions $4$ and $6$ because of the standing train.

For the second example query, the answer is $0$ because the only lantern is at the point $51$ and there is also a standing train at this point.

For the third example query, the answer is $1134$ because there are $1234$ lanterns, but Vova didn't see the lanterns from the position $100$ to the position $199$ inclusive.

For the fourth example query, the answer is $0$ because the standing train covers the whole path.
"""
2022-04-09 19:45:04.517517 --------------------------
2022-04-09 19:46:44.627724 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef lanterns(L, v, l, r):\n    if v < l or v > r:\n        return 0\n    else:\n        return (r - l + 1)\n\ndef solve(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return 1 + solve(L, v, l + v, r)\n\ndef solve2(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return 1 + solve2(L, v, l + v, r) - solve2(L, v, l + v, l + v - 1)\n\ndef solve3(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v)\n\ndef solve4(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v))\n\ndef solve5(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v))\n\ndef solve6(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v))\n\ndef solve7(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v))\n\ndef solve8(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v))\n\ndef solve9(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v))\n\ndef solve10(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v))\n\ndef solve11(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v))\n\ndef solve12(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v))\n\ndef solve13(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v))\n\ndef solve14(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v))\n\ndef solve15(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v))\n\ndef solve16(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v))\n\ndef solve17(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v)) + math.ceil((r - l + 1) / (15 * v))\n\ndef solve18(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v)) + math.ceil((r - l + 1) / (15 * v)) - math.ceil((r - l + 1) / (16 * v))\n\ndef solve19(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v)) + math.ceil((r - l + 1) / (15 * v)) - math.ceil((r - l + 1) / (16 * v)) + math.ceil((r - l + 1) / (17 * v))\n\ndef solve20(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v)) + math.ceil((r - l + 1) / (15 * v)) - math.ceil((r - l + 1) / (16 * v)) + math.ceil((r - l + 1) / (17 * v)) - math.ceil((r - l + 1) / (18 * v))\n\ndef solve21(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(L, v, l, r):\n    if l == 1:\n        return (L - r) // v + 1\n    else:\n        return (L - r) // v + (l - 1) // v\n\nif __name__ == \"__main__\":\n    t = int(raw_input())\n    for _ in range(t):\n        L, v, l, r = map(int, raw_input().split())\n        print solve(L, v, l, r)"
    }
  ],
  "created": 1649547904,
  "id": "cmpl-4vF3ISBfA9ydlC3gFC7e3dqkl9snS",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 19:46:44.628122 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef lanterns(L, v, l, r):\n    if v < l or v > r:\n        return 0\n    else:\n        return (r - l + 1)\n\ndef solve(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return 1 + solve(L, v, l + v, r)\n\ndef solve2(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return 1 + solve2(L, v, l + v, r) - solve2(L, v, l + v, l + v - 1)\n\ndef solve3(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v)\n\ndef solve4(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v))\n\ndef solve5(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v))\n\ndef solve6(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v))\n\ndef solve7(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v))\n\ndef solve8(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v))\n\ndef solve9(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v))\n\ndef solve10(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v))\n\ndef solve11(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v))\n\ndef solve12(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v))\n\ndef solve13(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v))\n\ndef solve14(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v))\n\ndef solve15(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v))\n\ndef solve16(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v))\n\ndef solve17(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v)) + math.ceil((r - l + 1) / (15 * v))\n\ndef solve18(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v)) + math.ceil((r - l + 1) / (15 * v)) - math.ceil((r - l + 1) / (16 * v))\n\ndef solve19(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v)) + math.ceil((r - l + 1) / (15 * v)) - math.ceil((r - l + 1) / (16 * v)) + math.ceil((r - l + 1) / (17 * v))\n\ndef solve20(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil((r - l + 1) / (5 * v)) - math.ceil((r - l + 1) / (6 * v)) + math.ceil((r - l + 1) / (7 * v)) - math.ceil((r - l + 1) / (8 * v)) + math.ceil((r - l + 1) / (9 * v)) - math.ceil((r - l + 1) / (10 * v)) + math.ceil((r - l + 1) / (11 * v)) - math.ceil((r - l + 1) / (12 * v)) + math.ceil((r - l + 1) / (13 * v)) - math.ceil((r - l + 1) / (14 * v)) + math.ceil((r - l + 1) / (15 * v)) - math.ceil((r - l + 1) / (16 * v)) + math.ceil((r - l + 1) / (17 * v)) - math.ceil((r - l + 1) / (18 * v))\n\ndef solve21(L, v, l, r):\n    if l > r:\n        return 0\n    elif l == r:\n        return 1\n    else:\n        return math.ceil((r - l + 1) / v) - math.ceil((r - l + 1) / (2 * v)) + math.ceil((r - l + 1) / (3 * v)) - math.ceil((r - l + 1) / (4 * v)) + math.ceil"
}
2022-04-09 19:46:44.628291 REASON length
2022-04-09 19:46:44.628304 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(L, v, l, r):\n    if l == 1:\n        return (L - r) // v + 1\n    else:\n        return (L - r) // v + (l - 1) // v\n\nif __name__ == \"__main__\":\n    t = int(raw_input())\n    for _ in range(t):\n        L, v, l, r = map(int, raw_input().split())\n        print solve(L, v, l, r)"
}
2022-04-09 19:46:44.628324 REASON stop
