["\nimport sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main()\n{\n    int n, c;\n    cin >> n >> c;\n    int arr[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    int freq[c + 1] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]] += 1;\n    }\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "\n\n\nimport sys\n\nsys.setrecursionlimit(100000)\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0, len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0, len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i + 1]:\n            count += 1\n        else:\n            print(message[i], end=\" \")\n            count = 1\n    else:\n        print(message[i], end=\" \")\n", "\nimport sys\n\ndef main():\n    # read the input, convert to integers\n    n, c = int(sys.stdin.readline()), int(sys.stdin.readline())\n    seq = list(map(int, sys.stdin.readline().split()))\n    # create a list of lists, flatten the list\n    sorted_seq = [item for sublist in sorted(seq) for item in sublist]\n    # print the output, separated by spaces\n    print(\" \".join(map(str, sorted_seq)))\n\nmain()\n", "\nimport sys\n\ndef main():\n    N, C = map(int, input().split())\n    message = list(map(int, input().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]  # number\n        count[message[i]][1] += 1  # frequency\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n# WORKS\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n\n\n# WORKS\n\nimport sys\n\n# input\nn = int(input())\nd = [int(i) for i in input().split()]\n\n# sort the list\nd.sort()\n\n# find the median\nif n % 2 == 1:\n    median = d[n//2]\nelse:\n    median = (d[n//2] + d[(n//2) - 1])//2\n\n# find the difference\ndiff = 0\nfor i in d:\n    diff += abs(i - median)\n\n# print\nprint(diff)\n", "\n\n# WORKS.\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n", "\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\n\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\nmessage.sort()\n#print(message)\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n", "\ndef main():\n    c = int(input())\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    print(\" \".join(map(str, freq[1:])))\n\nif __name__ == '__main__':\n    main()\n", "\n# WORKS\n\nimport sys\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n", "\n\ndef main():\n    n, c = map(int, input().split())\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + \" \") * freq[i], end=\"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\n\nprint(' '.join(map(str, res)))\n", "\nimport sys\n\ndef main():\n    # read the input\n    N, C = input().split()\n    N = int(N)\n    C = int(C)\n    seq = input().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\") \n\nmain()\n", "\n\n\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "def print_freq(arr, n, c):\n    freq = [0] * (c + 1)\n    for i in range(n):\n        freq[arr[i]] += 1\n\n\n    for i in range(c + 1):\n        if freq[i] > 0:\n            print((str(i) + ' ') * freq[i], end='')\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\nfreq = [0] * (c + 1) \nfor i in range(n):\n    freq[arr[i]] += 1 \nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "\n\ndef main():\n    n, c = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print(str(i) * freq[i], end=\" \")\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nmessage = input()\nmessage = message.split(\" \")\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\nmessage.sort()\ncount = 1\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n"]