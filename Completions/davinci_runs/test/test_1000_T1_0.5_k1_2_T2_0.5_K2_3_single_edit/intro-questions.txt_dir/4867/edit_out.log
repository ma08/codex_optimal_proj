2022-04-16 02:16:44.381062 num operations 1
2022-04-16 02:16:44.381078 size on input set 1
2022-04-16 02:16:46.286523 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "'''\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n'''\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 1,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 2,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    }
  ],
  "created": 1650075404,
  "object": "edit"
}
2022-04-16 02:16:46.286851 fix syntax errors 3 ["'''\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n'''\n    print('#' + '.' * (n + l + r) + '#')\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"]
2022-04-16 02:16:46.286884 size on output set 2
2022-04-16 02:16:46.286900 num operations 1
2022-04-16 02:16:46.286913 size on input set 1
2022-04-16 02:16:51.537770 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(u):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(m):\n    print(\"#\" * l + input() + \"#\" * r)\nfor _ in range(d):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\n"
    },
    {
      "index": 1,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(u):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(m):\n    print(\"#\" * l + input() + \"#\" * r)\nfor _ in range(d):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\n"
    },
    {
      "index": 2,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\nprint(\"#\"*(l+r+n)+\".\"*(u+d))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(u+d))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(u+d))\n"
    }
  ],
  "created": 1650075406,
  "object": "edit"
}
2022-04-16 02:16:51.537980 fix syntax errors 3 ['\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#" * (l + r + n) + "." * (l + r))\nfor _ in range(u):\n    print("#" * (l + r + n) + "." * (l + r))\nfor _ in range(m):\n    print("#" * l + input() + "#" * r)\nfor _ in range(d):\n    print("#" * (l + r + n) + "." * (l + r))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#" * (l + r + n) + "." * (l + r))\nfor _ in range(u):\n    print("#" * (l + r + n) + "." * (l + r))\nfor _ in range(m):\n    print("#" * l + input() + "#" * r)\nfor _ in range(d):\n    print("#" * (l + r + n) + "." * (l + r))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\nprint("#"*(l+r+n)+"."*(u+d))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(u+d))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(u+d))\n']
2022-04-16 02:16:51.538006 size on output set 3
2022-04-16 02:16:51.538017 num operations 1
2022-04-16 02:16:51.538022 size on input set 1
2022-04-16 02:16:56.591363 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 1,
      "text": "\n#\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 2,
      "text": "\n#http://codeforces.com/problemset/problem/878/A\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + m) + '.' * (d + u))\nprint('.' * (l + r + m) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + m) + '#' * (d + u))\nprint('#' * (l + r + m) + '.' * (d + u))\n"
    }
  ],
  "created": 1650075411,
  "object": "edit"
}
2022-04-16 02:16:56.591538 fix syntax errors 3 ["\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n#\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n#http://codeforces.com/problemset/problem/878/A\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + m) + '.' * (d + u))\nprint('.' * (l + r + m) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + m) + '#' * (d + u))\nprint('#' * (l + r + m) + '.' * (d + u))\n"]
2022-04-16 02:16:56.591568 size on output set 3
2022-04-16 02:16:56.591578 num operations 1
2022-04-16 02:16:56.591583 size on input set 1
2022-04-16 02:16:58.395773 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 2,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    }
  ],
  "created": 1650075416,
  "object": "edit"
}
2022-04-16 02:16:58.396124 fix syntax errors 3 ['\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n']
2022-04-16 02:16:58.396158 size on output set 3
2022-04-16 02:16:58.396170 num operations 1
2022-04-16 02:16:58.396175 size on input set 1
2022-04-16 02:17:07.967429 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r), end=\"\\n\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r), \".\" * (l + r), sep=\"\")\n    for _ in range(u):\n        print(\".\" * (l + r), \"#\" * (n + l + r), \".\" * (l + r), sep=\"\")\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r))\n    for _ in range(d):\n        print(\".\" * (l + r), \"#\" * (n + l + r), \".\" * (l + r), sep=\"\")\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r), end=\"\\n\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650075418,
  "object": "edit"
}
2022-04-16 02:17:07.967630 fix syntax errors 3 ['\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * (l + r), end="\\n")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r), "." * (l + r), sep="")\n    for _ in range(u):\n        print("." * (l + r), "#" * (n + l + r), "." * (l + r), sep="")\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * (l + r))\n    for _ in range(d):\n        print("." * (l + r), "#" * (n + l + r), "." * (l + r), sep="")\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * (l + r), end="\\n")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:17:07.967673 size on output set 2
2022-04-16 02:17:07.967683 num operations 1
2022-04-16 02:17:07.967688 size on input set 1
2022-04-16 02:17:12.448633 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 1,
      "text": "\n\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\" * (N+L+R-1) + \"#\")\nframe.append(\".\" * L + crossword[0] + \".\" * R)\nfor i in range(1,M):\n    frame.append(\".\" * L + crossword[i] + \".\" * R)\nfor i in range(D):\n    frame.append(\"#.\" * (N+L+R-1) + \"#\")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 2,
      "text": "\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n"
    }
  ],
  "created": 1650075428,
  "object": "edit"
}
2022-04-16 02:17:12.448890 fix syntax errors 3 ['\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#." * (N+L+R-1) + "#")\nframe.append("." * L + crossword[0] + "." * R)\nfor i in range(1,M):\n    frame.append("." * L + crossword[i] + "." * R)\nfor i in range(D):\n    frame.append("#." * (N+L+R-1) + "#")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n', '\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n']
2022-04-16 02:17:12.448923 size on output set 3
2022-04-16 02:17:12.448939 num operations 1
2022-04-16 02:17:12.448944 size on input set 1
2022-04-16 02:17:16.969981 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport random\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+random.randint(-1,1), y+random.randint(-1,1)))\n"
    },
    {
      "index": 1,
      "text": "\n#\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y), file=sys.stderr)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x + 1, y))\n"
    }
  ],
  "created": 1650075432,
  "object": "edit"
}
2022-04-16 02:17:16.970195 fix syntax errors 3 ['\nimport random\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+random.randint(-1,1), y+random.randint(-1,1)))\n', '\n#\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y), file=sys.stderr)\n', '\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x + 1, y))\n']
2022-04-16 02:17:16.970338 size on output set 3
2022-04-16 02:17:16.970353 num operations 1
2022-04-16 02:17:16.970358 size on input set 1
2022-04-16 02:17:24.487327 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 2,
      "text": "\n    def main(m, n, u, l, r, d):\n        out = \"\"\n        for i in range(u):\n            out += \"#.\" * (l + n + r) + \"#\\n\"\n        for i in range(m):\n            out += \"#.\" + \".\".join(input()) + \".#\\n\"\n        for i in range(d):\n            out += \"#.\" * (l + n + r) + \"#\\n\"\n        print(out)\n    \n    if __name__ == \"__main__\":\n        m, n = map(int, input().split())\n        u, l, r, d = map(int, input().split())\n        main(m, n, u, l, r, d)\n"
    }
  ],
  "created": 1650075437,
  "object": "edit"
}
2022-04-16 02:17:24.487539 fix syntax errors 3 ['\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().split()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().split()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n    def main(m, n, u, l, r, d):\n        out = ""\n        for i in range(u):\n            out += "#." * (l + n + r) + "#\\n"\n        for i in range(m):\n            out += "#." + ".".join(input()) + ".#\\n"\n        for i in range(d):\n            out += "#." * (l + n + r) + "#\\n"\n        print(out)\n    \n    if __name__ == "__main__":\n        m, n = map(int, input().split())\n        u, l, r, d = map(int, input().split())\n        main(m, n, u, l, r, d)\n']
2022-04-16 02:17:24.487572 size on output set 2
