["\n\ndef main():\n    s = input()\n    q = int(input())\n    for i in range(q):\n        query = input()\n        if query[0] == \"1\":\n            s = s[:int(query[2])-1] + query[4] + s[int(query[2]):]\n        elif query[0] == \"2\":\n            print(len(set(s[int(query[2]):int(query[4])])))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# TODO: implement using a Trie instead of a hashmap, or just use Python's built-in Trie\n\nclass Node:\n    def __init__(self):\n        self.children = dict()\n        self.count = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n\n    def add(self, word):\n        curr = self.root\n        for letter in word:\n            if letter not in curr.children:\n                curr.children[letter] = Node()\n            curr.children[letter].count += 1\n            curr = curr.children[letter]\n        return curr\n\n    def find(self, word):\n        curr = self.root\n        for letter in word:\n            if letter in curr.children:\n                curr = curr.children[letter]\n            else:\n                return 0\n        return curr.count\n\n\ndef main():\n    s = input()\n    q = int(input())\n\n    trie = Trie()\n    for letter in s:\n        trie.add(letter)\n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            trie.add(query[2])\n        elif query[0] == '2':\n            print(trie.find(s[int(query[1]) - 1: int(query[2])]))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    s = input()\n    q = int(input())\n    for i in range(q):\n        query = input()\n        if query[0] == \"1\":\n            s = s[:int(query[2])-1] + query[4] + s[int(query[2]):]\n        elif query[0] == \"2\":\n            print(len(set(s[int(query[2])-1:int(query[4])-1])))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# TODO: implement using a Trie instead of a hashmap (or not)\n\n\ndef main():\n    s = input()\n    q = int(input())\n\n    d = {}\n    for i, char in enumerate(s):\n        if char not in d:\n            d[char] = []\n        d[char].append(i)\n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            if query[2] not in d:\n                d[query[2]] = []\n            d[query[2]].append(int(query[1]) - 1)\n        elif query[0] == '2':\n            count = 0\n            for char in d:\n                if len(d[char]) > 0:\n                    i, j = 0, len(d[char]) - 1\n                    while i <= j:\n                        mid = (i + j) // 2\n                        if d[char][mid] < int(query[1]) - 1:\n                            i = mid + 1\n                        else:\n                            j = mid - 1\n                    if i < len(d[char]) and d[char][i] < int(query[2]):\n                        count += 1\n            print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n# TODO: implement using a Trie instead of a hashmap\n\nclass Node:\n    def __init__(self):\n        self.children = {}\n\n        self.count = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n\n    def add(self, word):\n        curr = self.root\n        for char in word:\n            if char not in curr.children:\n                curr.children[char] = Node()\n            curr.children[char].count += 1\n            curr = curr.children[char]\n        return curr\n\n    def find(self, word):\n        curr = self.root\n        for char in word:\n            if char in curr.children:\n                curr = curr.children[char]\n            else:\n                return 0\n        return curr.count\n\n\ndef main():\n    s = input()\n    q = int(input())\n\n    trie = Trie()\n    for char in s:\n        trie.add(char)\n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            trie.add(query[2])\n        elif query[0] == '2':\n            print(trie.find(s[int(query[1]) - 1: int(query[2])]))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(n):\n        ans += b[a[i] - 1]\n        if i > 0 and a[i] - a[i - 1] == 1:\n            ans += c[a[i - 1] - 1]\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"]