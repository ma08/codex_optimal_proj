2022-04-16 01:37:57.129895 num operations 1
2022-04-16 01:37:57.129914 size on input set 1
2022-04-16 01:37:59.983059 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650073077,
  "object": "edit"
}
2022-04-16 01:37:59.983325 fix syntax errors 3 ["import sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:37:59.983358 size on output set 3
2022-04-16 01:37:59.983368 num operations 1
2022-04-16 01:37:59.983373 size on input set 1
2022-04-16 01:38:02.027340 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(set(input().split())):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split())) #list of unique words\n            if len(words) == len(input().split()):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(set(input().split())):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\nmain()\n"
    }
  ],
  "created": 1650073080,
  "object": "edit"
}
2022-04-16 01:38:02.027575 fix syntax errors 3 ['\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(set(input().split())):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\nmain()\n', '\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split())) #list of unique words\n            if len(words) == len(input().split()):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\nmain()\n', '\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(set(input().split())):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\nmain()\n']
2022-04-16 01:38:02.027617 size on output set 2
2022-04-16 01:38:02.027630 num operations 1
2022-04-16 01:38:02.027637 size on input set 1
2022-04-16 01:38:04.241965 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650073082,
  "object": "edit"
}
2022-04-16 01:38:04.242151 fix syntax errors 3 ['\n\n#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:38:04.242177 size on output set 3
2022-04-16 01:38:04.242186 num operations 1
2022-04-16 01:38:04.242192 size on input set 1
2022-04-16 01:38:06.606046 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()] # list of words\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split(' ')]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650073084,
  "object": "edit"
}
2022-04-16 01:38:06.606234 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()] # list of words\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split(\' \')]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:38:06.606261 size on output set 3
2022-04-16 01:38:06.606272 num operations 1
2022-04-16 01:38:06.606277 size on input set 1
2022-04-16 01:38:10.212161 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    words = input().split()\n    word_set = set()\n    no_repetition = True\n    for word in words:\n        if word in word_set:\n            no_repetition = False\n            break\n        else:\n            word_set.add(word)\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialize a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn't, add it to the set\n            word_set.add(word)\n    # Print the result \n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Read input\n    words = input().split(\" \")\n    # Create a set to store the words\n    word_set = set()\n    # Initialize a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn't, add it to the set\n            word_set.add(word)\n    # Print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650073086,
  "object": "edit"
}
2022-04-16 01:38:10.212446 fix syntax errors 3 ['\n\ndef main():\n    words = input().split()\n    word_set = set()\n    no_repetition = True\n    for word in words:\n        if word in word_set:\n            no_repetition = False\n            break\n        else:\n            word_set.add(word)\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialize a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn\'t, add it to the set\n            word_set.add(word)\n    # Print the result \n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read input\n    words = input().split(" ")\n    # Create a set to store the words\n    word_set = set()\n    # Initialize a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn\'t, add it to the set\n            word_set.add(word)\n    # Print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:38:10.212485 size on output set 3
2022-04-16 01:38:10.212494 num operations 1
2022-04-16 01:38:10.212499 size on input set 1
2022-04-16 01:38:19.046250 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # Read each line\n    for line in sys.stdin:\n        # Split the line into a list of strings\n        line = line.split()\n        # Create a set of the list\n        line = set(line)\n        # Print the length of the set\n        print(len(line))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Read each test case\nfor line in sys.stdin:\n    # Create a list of the words in the line\n    words = line.split()\n    # Create a set to store the words\n    seen = set()\n    # Check to see if each word is in the set\n    for word in words:\n        if word in seen:\n            # If it is, print no\n            print(\"no\")\n            break\n        else:\n            # If it isn't, add it to the set and continue\n            seen.add(word)\n    else:\n        # If the for loop completes without breaking, then print yes\n        print(\"yes\")\n\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line \n        words = line.split()\n        # Create a set to store the words \n        seen = set()\n        # Check to see if each word is in the set \n        for word in words:\n            if word in seen:\n                # If it is, print no \n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue \n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650073090,
  "object": "edit"
}
2022-04-16 01:38:19.046447 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    # Read each line\n    for line in sys.stdin:\n        # Split the line into a list of strings\n        line = line.split()\n        # Create a set of the list\n        line = set(line)\n        # Print the length of the set\n        print(len(line))\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\n# Read each test case\nfor line in sys.stdin:\n    # Create a list of the words in the line\n    words = line.split()\n    # Create a set to store the words\n    seen = set()\n    # Check to see if each word is in the set\n    for word in words:\n        if word in seen:\n            # If it is, print no\n            print("no")\n            break\n        else:\n            # If it isn\'t, add it to the set and continue\n            seen.add(word)\n    else:\n        # If the for loop completes without breaking, then print yes\n        print("yes")\n\n', '\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line \n        words = line.split()\n        # Create a set to store the words \n        seen = set()\n        # Check to see if each word is in the set \n        for word in words:\n            if word in seen:\n                # If it is, print no \n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue \n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 01:38:19.046483 size on output set 3
2022-04-16 01:38:19.046493 num operations 1
2022-04-16 01:38:19.046499 size on input set 1
2022-04-16 01:38:25.568764 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    # Read input and split into words\n    words = input().split()\n    # Initialize a set of unique words\n    unique_words = set(words)\n    # If the number of unique words is equal to the number of words\n    # then no words were repeated\n    if len(words) == len(unique_words):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print(\"no\")\n            exit()\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650073099,
  "object": "edit"
}
2022-04-16 01:38:25.568997 fix syntax errors 3 ['\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    # Read input and split into words\n    words = input().split()\n    # Initialize a set of unique words\n    unique_words = set(words)\n    # If the number of unique words is equal to the number of words\n    # then no words were repeated\n    if len(words) == len(unique_words):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print("no")\n            exit()\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:38:25.569029 size on output set 3
2022-04-16 01:38:25.569040 num operations 1
2022-04-16 01:38:25.569045 size on input set 1
2022-04-16 01:38:27.327415 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    words = input().split(\" \")\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650073105,
  "object": "edit"
}
2022-04-16 01:38:27.327674 fix syntax errors 3 ["\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    words = input().split(" ")\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\'no\')\n            return\n        seen.add(word)\n    print(\'yes\')\n\nif __name__ == \'__main__\':\n    main()\n', "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:38:27.327703 size on output set 3
