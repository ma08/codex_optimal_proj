2022-04-15 23:15:32.501992 num operations 1
2022-04-15 23:15:32.502002 size on input set 1
2022-04-15 23:15:38.327641 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# https://atcoder.jp/contests/abc042/tasks/arc058_a\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# d = {}\n# for i in a:\n#     if i in d:\n#         d[i] += 1\n#     else:\n#         d[i] = 1\n#\n# ans = 0\n# for i in d:\n#     ans += d[i] - 2\n#\n# print(ans)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += max(0, d[i] - 1)\n\nprint(ans)\n"
    }
  ],
  "created": 1650064532,
  "object": "edit"
}
2022-04-15 23:15:38.327929 fix syntax errors 3 ['# https://atcoder.jp/contests/abc042/tasks/arc058_a\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n', '\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# d = {}\n# for i in a:\n#     if i in d:\n#         d[i] += 1\n#     else:\n#         d[i] = 1\n#\n# ans = 0\n# for i in d:\n#     ans += d[i] - 2\n#\n# print(ans)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += max(0, d[i] - 1)\n\nprint(ans)\n']
2022-04-15 23:15:38.327962 size on output set 3
2022-04-15 23:15:38.327974 num operations 1
2022-04-15 23:15:38.327979 size on input set 1
2022-04-15 23:15:46.837914 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())#n is number of students\n    skill_list = [int(x) for x in stdin.readline().split()]#skill_list is list of skills of students\n    min_skill = min(skill_list)#min skill is the minimum skill\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):#for i in range of min skill to max skill\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])#sort skill counts by skill count\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:#for i in skill count and count in skill counts\n        if count <= n:#if count is less than or equal to number of students\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)#print min students\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = list(map(int, stdin.readline().split()))\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min(skill_list), max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()] #List comprehension\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1): #range(start, stop, step)\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1]) #x[1] is the second element of the tuple\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n: #count is the number of students with that skill\n            min_students += (n - count) #n is the number of students who can be added to the team\n            n = count #n is the number of students who can be added to the team\n        else:\n            min_students += n #n is the number of students who can be added to the team\n            break\n\n    print(min_students)\n\nmain()\n"
    }
  ],
  "created": 1650064538,
  "object": "edit"
}
2022-04-15 23:15:46.838117 fix syntax errors 3 ['\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())#n is number of students\n    skill_list = [int(x) for x in stdin.readline().split()]#skill_list is list of skills of students\n    min_skill = min(skill_list)#min skill is the minimum skill\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):#for i in range of min skill to max skill\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])#sort skill counts by skill count\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:#for i in skill count and count in skill counts\n        if count <= n:#if count is less than or equal to number of students\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)#print min students\n\nmain()\n', '\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = list(map(int, stdin.readline().split()))\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min(skill_list), max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()] #List comprehension\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1): #range(start, stop, step)\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1]) #x[1] is the second element of the tuple\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n: #count is the number of students with that skill\n            min_students += (n - count) #n is the number of students who can be added to the team\n            n = count #n is the number of students who can be added to the team\n        else:\n            min_students += n #n is the number of students who can be added to the team\n            break\n\n    print(min_students)\n\nmain()\n']
2022-04-15 23:15:46.838245 size on output set 3
