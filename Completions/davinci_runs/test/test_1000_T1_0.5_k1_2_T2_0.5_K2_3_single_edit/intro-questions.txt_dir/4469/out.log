2022-04-09 20:19:19.670195 """
You have got a shelf and want to put some books on it.

You are given $q$ queries of three types:  L $id$ — put a book having index $id$ on the shelf to the left from the leftmost existing book;  R $id$ — put a book having index $id$ on the shelf to the right from the rightmost existing book;  ? $id$ — calculate the minimum number of books you need to pop from the left or from the right in such a way that the book with index $id$ will be leftmost or rightmost. 

You can assume that the first book you will put can have any position (it does not matter) and queries of type $3$ are always valid (it is guaranteed that the book in each such query is already placed). You can also assume that you don't put the same book on the shelf twice, so $id$s don't repeat in queries of first two types.

Your problem is to answer all the queries of type $3$ in order they appear in the input.

Note that after answering the query of type $3$ all the books remain on the shelf and the relative order of books does not change.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains one integer $q$ ($1 \le q \le 2 \cdot 10^5$) — the number of queries.

Then $q$ lines follow. The $i$-th line contains the $i$-th query in format as in the problem statement. It is guaranteed that queries are always valid (for query type $3$, it is guaranteed that the book in each such query is already placed, and for other types, it is guaranteed that the book was not placed before).

It is guaranteed that there is at least one query of type $3$ in the input.

In each query the constraint $1 \le id \le 2 \cdot 10^5$ is met.


-----Output-----

Print answers to queries of the type $3$ in order they appear in the input.


-----Examples-----
Input
8
L 1
R 2
R 3
? 2
L 4
? 1
L 5
? 1

Output
1
1
2

Input
10
L 100
R 100000
R 123
L 101
? 123
L 10
R 115
? 100
R 110
? 115

Output
0
2
1



-----Note-----

Let's take a look at the first example and let's consider queries:   The shelf will look like $[1]$;  The shelf will look like $[1, 2]$;  The shelf will look like $[1, 2, 3]$;  The shelf looks like $[1, \textbf{2}, 3]$ so the answer is $1$;  The shelf will look like $[4, 1, 2, 3]$;  The shelf looks like $[4, \textbf{1}, 2, 3]$ so the answer is $1$;  The shelf will look like $[5, 4, 1, 2, 3]$;  The shelf looks like $[5, 4, \textbf{1}, 2, 3]$ so the answer is $2$. 

Let's take a look at the second example and let's consider queries:   The shelf will look like $[100]$;  The shelf will look like $[100, 100000]$;  The shelf will look like $[100, 100000, 123]$;  The shelf will look like $[101, 100, 100000, 123]$;  The shelf looks like $[101, 100, 100000, \textbf{123}]$ so the answer is $0$;  The shelf will look like $[10, 101, 100, 100000, 123]$;  The shelf will look like $[10, 101, 100, 100000, 123, 115]$;  The shelf looks like $[10, 101, \textbf{100}, 100000, 123, 115]$ so the answer is $2$;  The shelf will look like $[10, 101, 100, 100000, 123, 115, 110]$;  The shelf looks like $[10, 101, 100, 100000, 123, \textbf{115}, 110]$ so the answer is $1$.
"""
2022-04-09 20:19:19.670216 --------------------------
2022-04-09 20:19:57.841874 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport os\nimport heapq\nimport math\n\n# freopen equivalent\nabs_dir = os.path.dirname(os.path.abspath(__file__))\nsys.stdin = open(os.path.join(abs_dir, \"input.txt\"), \"r\")\n\n\nclass LinkedList:\n    class Node:\n        def __init__(self, data):\n            self.data = data\n            self.prev = None\n            self.next = None\n\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def insert_left(self, data):\n        new_node = self.Node(data)\n        new_node.next = self.head\n        if self.head:\n            self.head.prev = new_node\n        else:\n            self.tail = new_node\n        self.head = new_node\n\n    def insert_right(self, data):\n        new_node = self.Node(data)\n        new_node.prev = self.tail\n        if self.tail:\n            self.tail.next = new_node\n        else:\n            self.head = new_node\n        self.tail = new_node\n\n    def remove_left(self):\n        if self.head:\n            self.head = self.head.next\n            if self.head:\n                self.head.prev = None\n            else:\n                self.tail = None\n\n    def remove_right(self):\n        if self.tail:\n            self.tail = self.tail.prev\n            if self.tail:\n                self.tail.next = None\n            else:\n                self.head = None\n\n    def get_leftmost(self):\n        if self.head:\n            return self.head.data\n\n    def get_rightmost(self):\n        if self.tail:\n            return self.tail.data\n\n    def get_left_distance(self, data):\n        distance = 0\n        curr_node = self.head\n        while curr_node:\n            if curr_node.data == data:\n                return distance\n            distance += 1\n            curr_node = curr_node.next\n        return None\n\n    def get_right_distance(self, data):\n        distance = 0\n        curr_node = self.tail\n        while curr_node:\n            if curr_node.data == data:\n                return distance\n            distance += 1\n            curr_node = curr_node.prev\n        return None\n\n    def print_list(self):\n        curr_node = self.head\n        while curr_node:\n            print(curr_node.data)\n            curr_node = curr_node.next\n\n\ndef main():\n    num_queries = int(sys.stdin.readline().strip())\n    linked_list = LinkedList()\n    for _ in range(num_queries):\n        query = sys.stdin.readline().strip().split()\n        if query[0] == \"L\":\n            linked_list.insert_left(int(query[1]))\n        elif query[0] == \"R\":\n            linked_list.insert_right(int(query[1]))\n        else:\n            left_distance = linked_list.get_left_distance(int(query[1]))\n            right_distance = linked_list.get_right_distance(int(query[1]))\n            if left_distance is not None:\n                print(left_distance)\n            else:\n                print(right_distance)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    # Get the number of queries\n    q = int(input())\n\n    # Initialize the shelf\n    shelf = []\n\n    # Loop over the queries\n    for i in range(q):\n        # Get the query\n        query = input().split()\n\n        # If it's a left query\n        if query[0] == 'L':\n            # Add it to the left of the shelf\n            shelf.insert(0, int(query[1]))\n\n        # If it's a right query\n        elif query[0] == 'R':\n            # Add it to the right of the shelf\n            shelf.append(int(query[1]))\n\n        # If it's a question\n        else:\n            # Find the index of the book\n            index = shelf.index(int(query[1]))\n\n            # Print the minimum number of books to pop\n            print(min(index, len(shelf) - index - 1))\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649549960,
  "id": "cmpl-4vFaSanl0rDhYEHnENf4uoxAK1uWJ",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:19:57.842090 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport os\nimport heapq\nimport math\n\n# freopen equivalent\nabs_dir = os.path.dirname(os.path.abspath(__file__))\nsys.stdin = open(os.path.join(abs_dir, \"input.txt\"), \"r\")\n\n\nclass LinkedList:\n    class Node:\n        def __init__(self, data):\n            self.data = data\n            self.prev = None\n            self.next = None\n\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def insert_left(self, data):\n        new_node = self.Node(data)\n        new_node.next = self.head\n        if self.head:\n            self.head.prev = new_node\n        else:\n            self.tail = new_node\n        self.head = new_node\n\n    def insert_right(self, data):\n        new_node = self.Node(data)\n        new_node.prev = self.tail\n        if self.tail:\n            self.tail.next = new_node\n        else:\n            self.head = new_node\n        self.tail = new_node\n\n    def remove_left(self):\n        if self.head:\n            self.head = self.head.next\n            if self.head:\n                self.head.prev = None\n            else:\n                self.tail = None\n\n    def remove_right(self):\n        if self.tail:\n            self.tail = self.tail.prev\n            if self.tail:\n                self.tail.next = None\n            else:\n                self.head = None\n\n    def get_leftmost(self):\n        if self.head:\n            return self.head.data\n\n    def get_rightmost(self):\n        if self.tail:\n            return self.tail.data\n\n    def get_left_distance(self, data):\n        distance = 0\n        curr_node = self.head\n        while curr_node:\n            if curr_node.data == data:\n                return distance\n            distance += 1\n            curr_node = curr_node.next\n        return None\n\n    def get_right_distance(self, data):\n        distance = 0\n        curr_node = self.tail\n        while curr_node:\n            if curr_node.data == data:\n                return distance\n            distance += 1\n            curr_node = curr_node.prev\n        return None\n\n    def print_list(self):\n        curr_node = self.head\n        while curr_node:\n            print(curr_node.data)\n            curr_node = curr_node.next\n\n\ndef main():\n    num_queries = int(sys.stdin.readline().strip())\n    linked_list = LinkedList()\n    for _ in range(num_queries):\n        query = sys.stdin.readline().strip().split()\n        if query[0] == \"L\":\n            linked_list.insert_left(int(query[1]))\n        elif query[0] == \"R\":\n            linked_list.insert_right(int(query[1]))\n        else:\n            left_distance = linked_list.get_left_distance(int(query[1]))\n            right_distance = linked_list.get_right_distance(int(query[1]))\n            if left_distance is not None:\n                print(left_distance)\n            else:\n                print(right_distance)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:19:57.842215 REASON stop
2022-04-09 20:19:57.843623 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    # Get the number of queries\n    q = int(input())\n\n    # Initialize the shelf\n    shelf = []\n\n    # Loop over the queries\n    for i in range(q):\n        # Get the query\n        query = input().split()\n\n        # If it's a left query\n        if query[0] == 'L':\n            # Add it to the left of the shelf\n            shelf.insert(0, int(query[1]))\n\n        # If it's a right query\n        elif query[0] == 'R':\n            # Add it to the right of the shelf\n            shelf.append(int(query[1]))\n\n        # If it's a question\n        else:\n            # Find the index of the book\n            index = shelf.index(int(query[1]))\n\n            # Print the minimum number of books to pop\n            print(min(index, len(shelf) - index - 1))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:19:57.843743 REASON stop
