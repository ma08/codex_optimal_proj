2022-04-16 02:58:21.446943 num operations 1
2022-04-16 02:58:21.446971 size on input set 1
2022-04-16 02:58:24.906982 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline().strip())\n    trees = [int(x) for x in sys.stdin.readline().strip().split()]\n    count = 0\n    while n > 0:\n        n -= 1\n        count += trees[n]\n    print(count)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline().strip())\n    trees = [int(x) for x in sys.stdin.readline().strip().split()]\n    count = 0\n    while n > 0:\n        n -= 1\n        count += trees[n]\n    print(count)\n"
    }
  ],
  "created": 1650077901,
  "object": "edit"
}
2022-04-16 02:58:24.907198 fix syntax errors 3 ['\nimport sys\n\nif __name__ == "__main__":\n    pass\n', '\nimport sys\n\nif __name__ == "__main__":\n    n = int(sys.stdin.readline().strip())\n    trees = [int(x) for x in sys.stdin.readline().strip().split()]\n    count = 0\n    while n > 0:\n        n -= 1\n        count += trees[n]\n    print(count)\n', '#!/usr/bin/env python3\n\nimport sys\n\nif __name__ == "__main__":\n    n = int(sys.stdin.readline().strip())\n    trees = [int(x) for x in sys.stdin.readline().strip().split()]\n    count = 0\n    while n > 0:\n        n -= 1\n        count += trees[n]\n    print(count)\n']
2022-04-16 02:58:24.907222 size on output set 3
2022-04-16 02:58:24.907231 num operations 1
2022-04-16 02:58:24.907237 size on input set 1
2022-04-16 02:58:31.051266 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    t = list(map(int, sys.stdin.readline().split()))\n    t.sort()\n    print(sum(t[i]*(n-i) for i in range(n)))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    t = list(map(int, sys.stdin.readline().split()))\n    t.sort()\n    print(sum(t[i]*(n-i) for i in range(n)))  # sum(t[i]*(n-i) for i in range(n))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import deque\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    b.sort()\n    q = deque(b)\n    ans = 0\n    for i in range(n):\n        while q and q[0] < a[i]:\n            q.popleft()\n        if q:\n            ans += 1\n            q.popleft()\n    print(ans)\n\nmain()\n"
    }
  ],
  "created": 1650077904,
  "object": "edit"
}
2022-04-16 02:58:31.051484 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    t = list(map(int, sys.stdin.readline().split()))\n    t.sort()\n    print(sum(t[i]*(n-i) for i in range(n)))\n\nmain()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    t = list(map(int, sys.stdin.readline().split()))\n    t.sort()\n    print(sum(t[i]*(n-i) for i in range(n)))  # sum(t[i]*(n-i) for i in range(n))\n\nmain()\n', '\nfrom collections import deque\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    b.sort()\n    q = deque(b)\n    ans = 0\n    for i in range(n):\n        while q and q[0] < a[i]:\n            q.popleft()\n        if q:\n            ans += 1\n            q.popleft()\n    print(ans)\n\nmain()\n']
2022-04-16 02:58:31.051512 size on output set 3
2022-04-16 02:58:31.051523 num operations 1
2022-04-16 02:58:31.051528 size on input set 1
2022-04-16 02:58:45.702431 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport heapq\n\ndef party_planning(trees):\n    \"\"\"\n    The party can be organized at earliest on the next day after the last tree has grown up.\n    :param trees: list of ints representing the number of days it takes for each tree to grow\n    :return: earliest day when the party can be organized\n    \"\"\"\n    # sort the list of trees by growth time in ascending order\n    heapq.heapify(trees)\n    # the first tree takes 1 day to plant\n    cur_day = 1\n    # the earliest day that the party can be organized is the next day after the last tree has grown\n    # so we need to keep track of the last day that a tree will finish growing\n    last_day = 0\n    while trees:\n        # plant the tree with the shortest growth time\n        cur_day += heapq.heappop(trees)\n        # if the current tree finishes growing after the previous tree, then the party can be organized\n        # on the same day as the current tree\n        if cur_day > last_day:\n            last_day = cur_day\n    return last_day\n\ndef main():\n    \"\"\"\n    Driver function\n    \"\"\"\n    trees = []\n    for line in sys.stdin:\n        trees.extend(map(int, line.split()))\n    print(party_planning(trees))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport heapq\n\ndef party_planning(trees):\n\t\"\"\"\n\tThe party can be organized at earliest on the next day after the last tree has grown up.\n\t:param trees: list of ints representing the number of days it takes for each tree to grow\n\t:return: earliest day when the party can be organized\n\t\"\"\"\n\t# sort the list of trees by growth time\n\theapq.heapify(trees)\n\t# the first tree takes 1 day to plant\n\tcur_day = 1\n\t# the earliest day that the party can be organized is the next day after the last tree has grown\n\t# so we need to keep track of the last day that a tree will finish growing\n\tlast_day = 0\n\twhile trees:\n\t\t# plant the tree with the shortest growth time\n\t\tcur_day += heapq.heappop(trees)\n\t\t# if the current tree finishes growing after the previous tree, then the party can be organized\n\t\t# on the same day as the current tree\n\t\tif cur_day > last_day:\n\t\t\tlast_day = cur_day\n\treturn last_day\n\ndef main():\n\t\"\"\"\n\tDriver function\n\t\"\"\"\n\ttrees = []\n\tfor line in sys.stdin:\n\t\ttrees.extend(map(int, line.split()))\n\tprint(party_planning(trees))\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport heapq\n\ndef party_planning(trees):\n    \"\"\"\n    The party can be organized at earliest on the next day after the last tree has grown up.\n    :param trees: list of ints representing the number of days it takes for each tree to grow\n    :return: earliest day when the party can be organized\n    \"\"\"\n    # sort the list of trees by growth time\n    heapq.heapify(trees)\n    # the first tree takes 1 day to plant\n    cur_day = 1\n    # the earliest day that the party can be organized is the next day after the last tree has grown\n    # so we need to keep track of the last day that a tree will finish growing\n    last_day = 0\n    while trees:\n        # plant the tree with the shortest growth time\n        cur_day += heapq.heappop(trees)\n        # if the current tree finishes growing after the previous tree, then the party can be organized\n        # on the same day as the current tree\n        if cur_day > last_day:\n            last_day = cur_day\n    return last_day\n\ndef main():\n    \"\"\"\n    Driver function\n    \"\"\"\n    trees = []\n    for line in sys.stdin:\n        trees.extend(map(int, line.split()))\n    print(party_planning(trees))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650077911,
  "object": "edit"
}
2022-04-16 02:58:45.702630 fix syntax errors 3 ['\n\nimport sys\nimport heapq\n\ndef party_planning(trees):\n    """\n    The party can be organized at earliest on the next day after the last tree has grown up.\n    :param trees: list of ints representing the number of days it takes for each tree to grow\n    :return: earliest day when the party can be organized\n    """\n    # sort the list of trees by growth time in ascending order\n    heapq.heapify(trees)\n    # the first tree takes 1 day to plant\n    cur_day = 1\n    # the earliest day that the party can be organized is the next day after the last tree has grown\n    # so we need to keep track of the last day that a tree will finish growing\n    last_day = 0\n    while trees:\n        # plant the tree with the shortest growth time\n        cur_day += heapq.heappop(trees)\n        # if the current tree finishes growing after the previous tree, then the party can be organized\n        # on the same day as the current tree\n        if cur_day > last_day:\n            last_day = cur_day\n    return last_day\n\ndef main():\n    """\n    Driver function\n    """\n    trees = []\n    for line in sys.stdin:\n        trees.extend(map(int, line.split()))\n    print(party_planning(trees))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport heapq\n\ndef party_planning(trees):\n\t"""\n\tThe party can be organized at earliest on the next day after the last tree has grown up.\n\t:param trees: list of ints representing the number of days it takes for each tree to grow\n\t:return: earliest day when the party can be organized\n\t"""\n\t# sort the list of trees by growth time\n\theapq.heapify(trees)\n\t# the first tree takes 1 day to plant\n\tcur_day = 1\n\t# the earliest day that the party can be organized is the next day after the last tree has grown\n\t# so we need to keep track of the last day that a tree will finish growing\n\tlast_day = 0\n\twhile trees:\n\t\t# plant the tree with the shortest growth time\n\t\tcur_day += heapq.heappop(trees)\n\t\t# if the current tree finishes growing after the previous tree, then the party can be organized\n\t\t# on the same day as the current tree\n\t\tif cur_day > last_day:\n\t\t\tlast_day = cur_day\n\treturn last_day\n\ndef main():\n\t"""\n\tDriver function\n\t"""\n\ttrees = []\n\tfor line in sys.stdin:\n\t\ttrees.extend(map(int, line.split()))\n\tprint(party_planning(trees))\n\nif __name__ == "__main__":\n\tmain()\n', '\nimport sys\nimport heapq\n\ndef party_planning(trees):\n    """\n    The party can be organized at earliest on the next day after the last tree has grown up.\n    :param trees: list of ints representing the number of days it takes for each tree to grow\n    :return: earliest day when the party can be organized\n    """\n    # sort the list of trees by growth time\n    heapq.heapify(trees)\n    # the first tree takes 1 day to plant\n    cur_day = 1\n    # the earliest day that the party can be organized is the next day after the last tree has grown\n    # so we need to keep track of the last day that a tree will finish growing\n    last_day = 0\n    while trees:\n        # plant the tree with the shortest growth time\n        cur_day += heapq.heappop(trees)\n        # if the current tree finishes growing after the previous tree, then the party can be organized\n        # on the same day as the current tree\n        if cur_day > last_day:\n            last_day = cur_day\n    return last_day\n\ndef main():\n    """\n    Driver function\n    """\n    trees = []\n    for line in sys.stdin:\n        trees.extend(map(int, line.split()))\n    print(party_planning(trees))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:58:45.702802 size on output set 3
2022-04-16 02:58:45.702819 num operations 1
2022-04-16 02:58:45.702824 size on input set 1
2022-04-16 02:58:51.231249 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n  n = int(sys.stdin.readline())\n  trees = [int(x) for x in sys.stdin.readline().split()]\n  trees.sort()\n  if n == 1:\n    print(trees[0])\n  else:\n    max_days = 0\n    for i in range(n):\n      max_days = max(max_days, trees[i] + n - i)\n    print(max_days)\n\nif __name__ == '__main__':\n  main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n  n = int(sys.stdin.readline())\n  trees = [int(x) for x in sys.stdin.readline().split()]\n  trees.sort()\n  if n == 1:\n    print(trees[0])\n  else:\n    max_days = 0\n    for i in range(n):\n      max_days = max(max_days, trees[i] + n - i)\n    print(max_days)\n\nif __name__ == '__main__':\n  main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trees = [int(x) for x in sys.stdin.readline().split()]\n    trees.sort()\n    if n == 1:\n        print(trees[0])\n    else:\n        max_days = 0\n        for i in range(n):\n            max_days = max(max_days, trees[i] + n - i)\n        print(max_days)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077925,
  "object": "edit"
}
2022-04-16 02:58:51.231464 fix syntax errors 3 ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n  n = int(sys.stdin.readline())\n  trees = [int(x) for x in sys.stdin.readline().split()]\n  trees.sort()\n  if n == 1:\n    print(trees[0])\n  else:\n    max_days = 0\n    for i in range(n):\n      max_days = max(max_days, trees[i] + n - i)\n    print(max_days)\n\nif __name__ == '__main__':\n  main()\n", "\nimport sys\n\ndef main():\n  n = int(sys.stdin.readline())\n  trees = [int(x) for x in sys.stdin.readline().split()]\n  trees.sort()\n  if n == 1:\n    print(trees[0])\n  else:\n    max_days = 0\n    for i in range(n):\n      max_days = max(max_days, trees[i] + n - i)\n    print(max_days)\n\nif __name__ == '__main__':\n  main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trees = [int(x) for x in sys.stdin.readline().split()]\n    trees.sort()\n    if n == 1:\n        print(trees[0])\n    else:\n        max_days = 0\n        for i in range(n):\n            max_days = max(max_days, trees[i] + n - i)\n        print(max_days)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:58:51.231495 size on output set 3
2022-04-16 02:58:51.231505 num operations 1
2022-04-16 02:58:51.231510 size on input set 1
2022-04-16 02:58:57.804748 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        num_seedlings = int(sys.stdin.readline().strip())\n        seedling_growth_times = [int(x) for x in sys.stdin.readline().strip().split()]\n        seedling_growth_times.sort()\n        max_time = seedling_growth_times[-1]\n        for i in range(len(seedling_growth_times)-2,-1,-1):\n            max_time += 1 + seedling_growth_times[i]\n        print(max_time)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    num_seedlings = int(sys.stdin.readline().strip())\n    seedling_growth_times = [int(x) for x in sys.stdin.readline().strip().split()]\n    seedling_growth_times.sort()\n    max_time = seedling_growth_times[-1]\n    for i in range(len(seedling_growth_times)-2,-1,-1):\n        max_time += 1 + seedling_growth_times[i]\n    print(max_time)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    num_seedlings = int(sys.stdin.readline().strip())\n    seedling_growth_times = [int(x) for x in sys.stdin.readline().strip().split()]\n    seedling_growth_times.sort()\n    max_time = seedling_growth_times[0]\n    for i in range(1,len(seedling_growth_times)):\n        max_time += 1 + seedling_growth_times[i]\n    print(max_time)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650077931,
  "object": "edit"
}
2022-04-16 02:58:57.804960 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        num_seedlings = int(sys.stdin.readline().strip())\n        seedling_growth_times = [int(x) for x in sys.stdin.readline().strip().split()]\n        seedling_growth_times.sort()\n        max_time = seedling_growth_times[-1]\n        for i in range(len(seedling_growth_times)-2,-1,-1):\n            max_time += 1 + seedling_growth_times[i]\n        print(max_time)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    num_seedlings = int(sys.stdin.readline().strip())\n    seedling_growth_times = [int(x) for x in sys.stdin.readline().strip().split()]\n    seedling_growth_times.sort()\n    max_time = seedling_growth_times[-1]\n    for i in range(len(seedling_growth_times)-2,-1,-1):\n        max_time += 1 + seedling_growth_times[i]\n    print(max_time)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    num_seedlings = int(sys.stdin.readline().strip())\n    seedling_growth_times = [int(x) for x in sys.stdin.readline().strip().split()]\n    seedling_growth_times.sort()\n    max_time = seedling_growth_times[0]\n    for i in range(1,len(seedling_growth_times)):\n        max_time += 1 + seedling_growth_times[i]\n    print(max_time)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:58:57.804990 size on output set 3
2022-04-16 02:58:57.805000 num operations 1
2022-04-16 02:58:57.805006 size on input set 1
2022-04-16 02:59:00.435788 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    days = map(int, sys.stdin.readline().split())\n    heap = []\n    for i in days:\n        heapq.heappush(heap, i)\n    time = 0\n    while heap:\n        time += heapq.heappop(heap)\n        if heap:\n            time += 1\n    print(time)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    days = map(int, sys.stdin.readline().split())\n    heap = []\n    for i in days:\n        heapq.heappush(heap, i)\n    time = 0\n    while heap:\n        time += heapq.heappop(heap)\n        if heap:\n            time += 1\n    print(time)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n# -*- coding: utf-8 -*-\n\nimport sys\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    days = list(map(int, sys.stdin.readline().split()))\n    heap = []\n    for i in days:\n        heapq.heappush(heap, i)\n    time = 0\n    while heap:\n        time += heapq.heappop(heap)\n        if heap:\n            time += 1\n    print time\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650077937,
  "object": "edit"
}
2022-04-16 02:59:00.436000 fix syntax errors 3 ['\n\nimport sys\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    days = map(int, sys.stdin.readline().split())\n    heap = []\n    for i in days:\n        heapq.heappush(heap, i)\n    time = 0\n    while heap:\n        time += heapq.heappop(heap)\n        if heap:\n            time += 1\n    print(time)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    days = map(int, sys.stdin.readline().split())\n    heap = []\n    for i in days:\n        heapq.heappush(heap, i)\n    time = 0\n    while heap:\n        time += heapq.heappop(heap)\n        if heap:\n            time += 1\n    print(time)\n\nif __name__ == "__main__":\n    main()\n', '\n# -*- coding: utf-8 -*-\n\nimport sys\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    days = list(map(int, sys.stdin.readline().split()))\n    heap = []\n    for i in days:\n        heapq.heappush(heap, i)\n    time = 0\n    while heap:\n        time += heapq.heappop(heap)\n        if heap:\n            time += 1\n    print time\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:59:00.436097 size on output set 3
2022-04-16 02:59:00.436108 num operations 1
2022-04-16 02:59:00.436113 size on input set 1
2022-04-16 02:59:05.373503 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution\n\nn = int(input())\nt = list(map(int, input().split()))\n\nt.sort()\n\nmaximum = t[0]\nfor i in range(1, n):\n    if maximum < t[i]:\n        maximum = t[i]\n    t[i] = maximum + t[i]\n\nprint(t[-1] + 1)\n"
    },
    {
      "index": 1,
      "text": "\n# n = int(input())\n# t = list(map(int, input().split()))\n#\n# t.sort()\n#\n# max = t[0]\n# for i in range(1, n):\n#     if max < t[i]:\n#         max = t[i]\n#     t[i] = max + t[i]\n#\n# print(t[-1] + 1)\n# Solution\n\nn = int(input())\nt = list(map(int, input().split()))\n\nt.sort()\n\nmax_time = t[0]\nfor i in range(1, n):\n    if max_time < t[i]:\n        max_time = t[i]\n    t[i] = max_time + t[i]\n\nprint(t[-1] + 1)\n"
    },
    {
      "index": 2,
      "text": "\n# Solution\n\nn = int(input())\nt = list(map(int, input().split()))\n\nt.sort()\n\nmaximum = t[0]\nfor i in range(1, n):\n    if maximum < t[i]:\n        maximum = t[i]\n    t[i] = maximum + t[i]\n\nprint(t[-1] + 1)\n"
    }
  ],
  "created": 1650077940,
  "object": "edit"
}
2022-04-16 02:59:05.373683 fix syntax errors 3 ['\n# Solution\n\nn = int(input())\nt = list(map(int, input().split()))\n\nt.sort()\n\nmaximum = t[0]\nfor i in range(1, n):\n    if maximum < t[i]:\n        maximum = t[i]\n    t[i] = maximum + t[i]\n\nprint(t[-1] + 1)\n', '\n# n = int(input())\n# t = list(map(int, input().split()))\n#\n# t.sort()\n#\n# max = t[0]\n# for i in range(1, n):\n#     if max < t[i]:\n#         max = t[i]\n#     t[i] = max + t[i]\n#\n# print(t[-1] + 1)\n# Solution\n\nn = int(input())\nt = list(map(int, input().split()))\n\nt.sort()\n\nmax_time = t[0]\nfor i in range(1, n):\n    if max_time < t[i]:\n        max_time = t[i]\n    t[i] = max_time + t[i]\n\nprint(t[-1] + 1)\n', '\n# Solution\n\nn = int(input())\nt = list(map(int, input().split()))\n\nt.sort()\n\nmaximum = t[0]\nfor i in range(1, n):\n    if maximum < t[i]:\n        maximum = t[i]\n    t[i] = maximum + t[i]\n\nprint(t[-1] + 1)\n']
2022-04-16 02:59:05.373710 size on output set 2
2022-04-16 02:59:05.373737 num operations 1
2022-04-16 02:59:05.373742 size on input set 1
2022-04-16 02:59:08.918344 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# TODO: fix algorithm - it doesn't work for some inputs\n\n\nn = int(input())\nt = list(map(int, input().split()))\n\n# sort trees by time required for them to grow\nt.sort()\n\n# find the earliest day when the party can be organized\nday = 0\nfor i in range(n):\n    if t[i] <= day:\n        day += 1\n    else:\n        day += t[i]\n\nprint(day)\n"
    },
    {
      "index": 1,
      "text": "\n"
    },
    {
      "index": 2,
      "text": "\n# TODO: fix algorithm - it doesn't work for some inputs\n\nn = int(input())\nt = list(map(int, input().split()))\n\n# sort trees by time required for them to grow\nt.sort()\n\n# find the earliest day when the party can be organized\nday = 0\nfor i in range(n):\n    if t[i] < day:\n        day += 1\n    else:\n        day += t[i]\n\nprint(day)\n"
    }
  ],
  "created": 1650077945,
  "object": "edit"
}
2022-04-16 02:59:08.918538 fix syntax errors 3 ["\n# TODO: fix algorithm - it doesn't work for some inputs\n\n\nn = int(input())\nt = list(map(int, input().split()))\n\n# sort trees by time required for them to grow\nt.sort()\n\n# find the earliest day when the party can be organized\nday = 0\nfor i in range(n):\n    if t[i] <= day:\n        day += 1\n    else:\n        day += t[i]\n\nprint(day)\n", '\n', "\n# TODO: fix algorithm - it doesn't work for some inputs\n\nn = int(input())\nt = list(map(int, input().split()))\n\n# sort trees by time required for them to grow\nt.sort()\n\n# find the earliest day when the party can be organized\nday = 0\nfor i in range(n):\n    if t[i] < day:\n        day += 1\n    else:\n        day += t[i]\n\nprint(day)\n"]
2022-04-16 02:59:08.918564 size on output set 3
