["\n\n#Generate the key table\ndef key(phrase):\n    key = [[],[],[],[],[]]\n    phrase = [x for x in phrase if x!=' ']\n    for i in range(len(phrase)):\n        if phrase[i] not in key[i//5]:\n            key[i//5] += [phrase[i]]\n    for j in range(ord('a'), ord('z')+1): #generate key table\n        if chr(j) not in phrase and chr(j)!='q': #q is not used in the table\n            for k in range(5):\n                if len(key[k])<5:\n                    key[k] += [chr(j)]\n                    break\n    return key\n\n#Encrypt the message\ndef encrypt(message, key):\n    message = [x for x in message if x!=' ']\n    for i in range(len(message)):\n        if message[i]=='x' and i!=len(message)-1 and message[i+1]=='x': #double x -> z\n            message[i] = 'z'\n    if len(message)%2!=0: #if odd, add x\n        message += ['x']\n    encrypted = ''\n    for i in range(0,len(message),2): #iterate through the message\n        if message[i]==message[i+1]: #if same letter, add x in between\n            message.insert(i+1,'x')\n        for j in range(5):\n            if message[i] in key[j]:\n                row1 = j\n                col1 = key[j].index(message[i])\n            if message[i+1] in key[j]:\n                row2 = j\n                col2 = key[j].index(message[i+1])\n        if row1==row2: #if same row, shift to right\n            encrypted += key[row1][(col1+1)%5]\n            encrypted += key[row2][(col2+1)%5]\n        elif col1==col2:\n            encrypted += key[(row1+1)%5][col1]\n            encrypted += key[(row2+1)%5][col2]\n        else:\n            encrypted += key[row1][col2]\n            encrypted += key[row2][col1]\n    return encrypted.upper()\n\n#Main Program\nphrase = input()\nmessage = input()\nprint(encrypt(message, key(phrase)))\n", "\n\nimport sys\nimport math\n\ndef encrypt(phrase, key):\n    # remove spaces in phrase\n    phrase = phrase.replace(' ', '')\n    # if the phrase is odd, add an 'x' to the end of it\n    if len(phrase) % 2 != 0:\n        phrase += 'x'\n    # split phrase into pairs\n    pairs = [phrase[i:i+2] for i in range(0, len(phrase), 2)]\n    # encrypt each pair\n    encrypted_pairs = []\n    for pair in pairs:\n        # if the pair contains two equal letters, add an 'x' after the first letter\n        if pair[0] == pair[1]:\n            pair = pair[0] + 'x' + pair[1]\n        # get the positions of the letters in the key\n        letter1_pos = [i for i, x in enumerate(key) if x == pair[0]][0]\n        letter2_pos = [i for i, x in enumerate(key) if x == pair[1]][0]\n        # get the row and column of the first letter\n        letter1_row = int(math.floor(letter1_pos / 5))\n        letter1_col = letter1_pos % 5\n        # get the row and column of the second letter\n        letter2_row = int(math.floor(letter2_pos / 5))\n        letter2_col = letter2_pos % 5\n        # if the letters are in the same row, replace them with the letters to their immediate right respectively\n        if letter1_row == letter2_row:\n            letter1_col = (letter1_col + 1) % 5\n            letter2_col = (letter2_col + 1) % 5\n        # if the letters are in the same column, replace them with the letters immediately below respectively\n        elif letter1_col == letter2_col:\n            letter1_row = (letter1_row + 1) % 5\n            letter2_row = (letter2_row + 1) % 5\n        # if the letters are not in the same row or column, replace them with the letters on the same row respectively but at the other pair of corners of the rectangle defined by the original pair\n        else:\n            letter1_col, letter2_col = letter2_col, letter1_col\n        # get the positions of the new letters in the key\n        letter1_pos = letter1_row * 5 + letter1_col\n        letter2_pos = letter2_row * 5 + letter2_col\n        # get the new letters\n        letter1 = key[letter1_pos]\n        letter2 = key[letter2_pos]\n        # add the new pair to the list of encrypted pairs\n        encrypted_pairs.append(letter1 + letter2)\n    # join the encrypted pairs and return the encrypted phrase \n    encrypted_phrase = ''.join(encrypted_pairs)\n    return encrypted_phrase\n\ndef main(filepath):\n    # read the file\n    with open(filepath, 'r') as f:\n        lines = f.read().splitlines()\n    # get the key phrase and phrase to encrypt\n    key_phrase = lines[0]\n    phrase = lines[1]\n    # remove spaces and duplicate letters in the key phrase\n    key_phrase = ''.join(sorted(set(key_phrase.replace(' ', '')), key=key_phrase.index))\n    # fill the table with the key phrase\n    table = []\n    for i in range(0, len(key_phrase), 5):\n        table.append(list(key_phrase[i:i+5]))\n    # fill the rest of the table with the rest of the letters of the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = alphabet.replace('q', '')\n    for letter in alphabet:\n        if letter not in key_phrase:\n            for row in table:\n                if len(row) < 5:\n                    row.append(letter)\n                    break\n    # flatten the table\n    table = [letter for row in table for letter in row]\n    # encrypt the phrase\n    encrypted_phrase = encrypt(phrase, table)\n    # print the encrypted phrase\n    print(encrypted_phrase)\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n", "\n\n# Generate the key table\ndef key(phrase):\n    key = [[], [], [], [], []]\n    phrase = [x for x in phrase if x != ' ']\n    for i in range(len(phrase)):\n        if phrase[i] not in key[i // 5]:\n            key[i // 5] += [phrase[i]]\n    for j in range(ord('a'), ord('z') + 1):\n        if chr(j) not in phrase and chr(j) != 'q':\n            for k in range(5):\n                if len(key[k]) < 5:\n                    key[k] += [chr(j)]\n                    break\n    return key\n\n# Encrypt the message\ndef encrypt(message, key):\n    message = [x for x in message if x != ' ']\n    for i in range(len(message)):\n        if message[i] == 'x' and i != len(message) - 1 and message[i + 1] == 'x':\n            message[i] = 'z'\n    if len(message) % 2 != 0:\n        message += ['x']\n    encrypted = ''\n    for i in range(0, len(message), 2):\n        if message[i] == message[i + 1]:\n            message.insert(i + 1, 'x')\n        for j in range(5):\n            if message[i] in key[j]:\n                row1 = j\n                col1 = key[j].index(message[i])\n            if message[i+1] in key[j]:\n                row2 = j\n                col2 = key[j].index(message[i + 1])\n        if row1 == row2:\n            encrypted += key[row1][(col1 + 1) % 5]\n            encrypted += key[row2][(col2 + 1) % 5]\n        elif col1 == col2:\n            encrypted += key[(row1 + 1) % 5][col1]\n            encrypted += key[(row2 + 1) % 5][col2]\n        else:\n            encrypted += key[row1][col2]\n            encrypted += key[row2][col1]\n    return encrypted.upper()\n\n# Main Program\nphrase = input()\nmessage = input()\nprint(encrypt(message, key(phrase)))\n", "\nimport sys\nimport sys\n\ndef main():\n    key = sys.stdin.readline().strip()\n    key_table = build_key_table(key)\n    plaintext = sys.stdin.readline().strip()\n    ciphertext = encrypt(key_table, plaintext)\n    print(ciphertext)\n\ndef build_key_table(key):\n    key_table = [[None for _ in range(5)] for _ in range(5)]\n    key_set = set()\n    row = 0\n    col = 0\n\n    for char in key:\n        if char == ' ' or char == 'q':\n            continue\n        if char in key_set:\n            continue\n        key_set.add(char)\n        key_table[row][col] = char\n        col += 1\n        if col == 5:\n            row += 1\n            col = 0\n\n    for char in 'abcdefghiklmnoprstuvwxyz'.upper():\n        if char in key_set:\n            continue\n        key_set.add(char)\n        key_table[row][col] = char\n        col += 1\n        if col == 5:\n            row += 1\n            col = 0\n\n    return key_table\n\ndef encrypt(key_table, plaintext):\n    ciphertext = ''\n    plaintext = ''.join(plaintext.split())\n    plaintext = add_x_if_needed(plaintext)\n\n    for i in range(0, len(plaintext), 2):\n        pair = plaintext[i:i+2]\n        ciphertext += encrypt_pair(key_table, pair)\n\n    return ciphertext.upper()\n\ndef encrypt_pair(key_table, pair):\n    assert len(pair) == 2\n    assert pair[0] != pair[1]\n    assert pair[0] != 'q'\n    assert pair[1] != 'q'\n\n    row1, col1 = find_char_in_key_table(key_table, pair[0])\n    row2, col2 = find_char_in_key_table(key_table, pair[1])\n\n    if row1 == row2:\n        return key_table[row1][(col1+1)%5] + key_table[row2][(col2+1)%5]\n    elif col1 == col2:\n        return key_table[(row1+1)%5][col1] + key_table[(row2+1)%5][col2]\n    else:\n        return key_table[row1][col2] + key_table[row2][col1]\n\ndef find_char_in_key_table(key_table, char):\n    for row in range(5):\n        for col in range(5):\n            if key_table[row][col] == char:\n                return (row, col)\n    raise RuntimeError('char not found in key_table')\n\ndef add_x_if_needed(plaintext):\n    for i in range(0, len(plaintext)-1):\n        if plaintext[i] == 'x' and plaintext[i+1] == 'x':\n            plaintext = plaintext[:i+1] + 'q' + plaintext[i+1:]\n    if plaintext[-1] == 'x':\n        plaintext = plaintext + 'q'\n    return plaintext\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef playfair(key, plaintext):\n    # Remove spaces, duplicate letters, and 'q'\n    key = key.replace(\" \", \"\")\n    key = \"\".join(set(key))\n    key = key.replace(\"q\", \"\")\n\n    # Add remaining letters\n    alphabet = \"abcdefghijklmnoprstuvwxyz\"\n    key += \"\".join(sorted(set(alphabet) - set(key)))\n\n    # Create table\n    table = [''] * 5\n    for i in range(5):\n        table[i] = key[i*5:i*5+5]\n\n    # Encrypt\n    ciphertext = \"\"\n    for i in range(0, len(plaintext), 2):\n        # Pad with 'x' if needed\n        if i == len(plaintext) - 1:\n            plaintext += 'x'\n        elif plaintext[i] == plaintext[i+1]:\n            plaintext = plaintext[:i+1] + 'x' + plaintext[i+1:]\n\n        # Get row and column of each letter\n        row1, col1 = None, None\n        row2, col2 = None, None\n        for r in range(5):\n            if plaintext[i] in table[r]:\n                row1, col1 = r, table[r].index(plaintext[i])\n            if plaintext[i+1] in table[r]:\n                row2, col2 = r, table[r].index(plaintext[i+1])\n        # Encrypt\n        if row1 == row2:\n            ciphertext += table[row1][(col1+1)%5]\n            ciphertext += table[row2][(col2+1)%5]\n        elif col1 == col2:\n            ciphertext += table[(row1+1)%5][col1]\n            ciphertext += table[(row2+1)%5][col2]\n        else:\n            ciphertext += table[row1][col2]\n            ciphertext += table[row2][col1]\n\n    return ciphertext.upper()\n\ndef main():\n    key = input(\"Enter key: \")\n    plaintext = input(\"Enter plaintext: \")\n    print(playfair(key, plaintext))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python3\n\nimport sys\nimport math\n\ndef main():\n    key_phrase = sys.stdin.readline().strip()\n    message = sys.stdin.readline().strip()\n    key_phrase = key_phrase.replace(\" \", \"\")\n    message = message.replace(\" \", \"\")\n    key = []\n    for i in key_phrase:\n        if i not in key:\n            key.append(i)\n    for i in range(ord('a'), ord('z') + 1):\n        if chr(i) not in key and chr(i) != 'q':\n            key.append(chr(i))\n    l = len(key)\n    table = []\n    for i in range(l):\n        table.append(key[i:i+5])\n    message = list(message)\n    for i in range(len(message) - 1):\n        if message[i] == message[i+1]:\n            message.insert(i+1, 'x')\n    if len(message) % 2 == 1:\n        message.append('x')\n    message = ''.join(message)\n    message = [message[i:i+2] for i in range(0, len(message), 2)]\n    for i in message:\n        p1, p2 = i\n        r1, r2 = 0, 0\n        c1, c2 = 0, 0\n        for j in range(5):\n            for k in range(5):\n                if table[j][k] == p1:\n                    r1, c1 = j, k\n                if table[j][k] == p2:\n                    r2, c2 = j, k\n        if r1 == r2:\n            c1 = (c1 + 1) % 5\n            c2 = (c2 + 1) % 5\n        elif c1 == c2:\n            r1 = (r1 + 1) % 5\n            r2 = (r2 + 1) % 5\n        else:\n            c1, c2 = c2, c1\n        print(table[r1][c1] + table[r2][c2], end='')\n\nmain()\n", "\nimport sys\nimport math\n\ndef encrypt(phrase, key):\n    # remove spaces in phrase\n    phrase = phrase.replace(' ', '')\n    # if the phrase is odd, add an 'x' to the end of it\n    if len(phrase) % 2 != 0:\n        phrase += 'x'\n    # split phrase into pairs\n    pairs = [phrase[i:i+2] for i in range(0, len(phrase), 2)]\n    # encrypt each pair\n    encrypted_pairs = []\n    for pair in pairs:\n        # if the pair contains two equal letters, add an 'x' after the first letter\n        if pair[0] == pair[1]:\n            pair = pair[0] + 'x' + pair[1]\n        # get the positions of the letters in the key\n        letter1_pos = [i for i, x in enumerate(key) if x == pair[0]][0]\n        letter2_pos = [i for i, x in enumerate(key) if x == pair[1]][0]\n        # get the row and column of the first letter\n        letter1_row = int(math.floor(letter1_pos / 5))\n        letter1_col = letter1_pos % 5\n        # get the row and column of the second letter\n        letter2_row = int(math.floor(letter2_pos / 5))\n        letter2_col = letter2_pos % 5\n        # if the letters are in the same row, replace them with the letters to their immediate right respectively\n        if letter1_row == letter2_row:\n            letter1_col = (letter1_col + 1) % 5\n            letter2_col = (letter2_col + 1) % 5\n        # if the letters are in the same column, replace them with the letters immediately below respectively\n        elif letter1_col == letter2_col:\n            letter1_row = (letter1_row + 1) % 5\n            letter2_row = (letter2_row + 1) % 5\n        # if the letters are not in the same row or column, replace them with the letters on the same row respectively but at the other pair of corners of the rectangle defined by the original pair\n        else:\n            letter1_col, letter2_col = letter2_col, letter1_col\n        # get the positions of the new letters in the key\n        letter1_pos = letter1_row * 5 + letter1_col\n        letter2_pos = letter2_row * 5 + letter2_col\n        # get the new letters\n        letter1 = key[letter1_pos]\n        letter2 = key[letter2_pos]\n        # add the new pair to the list of encrypted pairs\n        encrypted_pairs.append(letter1 + letter2)\n    # join the encrypted pairs and return the encrypted phrase\n    encrypted_phrase = ''.join(encrypted_pairs)\n    return encrypted_phrase\n\ndef main(filepath):\n    # read the file\n    with open(filepath, 'r') as f:\n        lines = f.read().splitlines()\n    # get the key phrase and phrase to encrypt\n    key_phrase = lines[0]\n    phrase = lines[1]\n    # remove spaces and duplicate letters in the key phrase\n    key_phrase = ''.join(sorted(set(key_phrase.replace(' ', '')), key=key_phrase.index))\n    # fill the table with the key phrase\n    table = []\n    for i in range(0, len(key_phrase), 5):\n        table.append(list(key_phrase[i:i+5]))\n    # fill the rest of the table with the rest of the letters of the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = alphabet.replace('q', '')\n    for letter in alphabet:\n        if letter not in key_phrase:\n            for row in table:\n                if len(row) < 5:\n                    row.append(letter)\n                    break\n    # flatten the table\n    table = [letter for row in table for letter in row]\n    # encrypt the phrase\n    encrypted_phrase = encrypt(phrase, table)\n    # print the encrypted phrase\n    print(encrypted_phrase)\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n", "\n\ndef encrypt(key, plaintext):\n    plaintext = plaintext.replace(\" \", \"\")\n    plaintext = plaintext.upper()\n    plaintext = plaintext.replace(\"Q\", \"\")\n    plaintext = plaintext.replace(\"J\", \"\")\n    plaintext = \"\".join(plaintext.split(\"X\"))\n    plaintext = [plaintext[i:i+2] for i in range(0, len(plaintext), 2)]\n    for i in range(len(plaintext)):\n        if len(plaintext[i]) == 1:\n            plaintext[i] += \"X\"\n        if plaintext[i][0] == plaintext[i][1]:\n            plaintext[i] = plaintext[i][0] + \"X\"\n    ciphertext = \"\"\n    for i in range(len(plaintext)):\n        row1, col1 = key.index(plaintext[i][0]) // 5, key.index(plaintext[i][0]) % 5\n        row2, col2 = key.index(plaintext[i][1]) // 5, key.index(plaintext[i][1]) % 5\n        if row1 == row2:\n            ciphertext += key[row1 * 5 + (col1 + 1) % 5] + key[row2 * 5 + (col2 + 1) % 5]\n        elif col1 == col2:\n            ciphertext += key[((row1 + 1) % 5) * 5 + col1] + key[((row2 + 1) % 5) * 5 + col2]\n        else:\n            ciphertext += key[row1 * 5 + col2] + key[row2 * 5 + col1]\n    return ciphertext\n\nkey = input()\nplaintext = input()\nkey = key.replace(\" \", \"\")\nkey = key.upper()\nkey = key.replace(\"Q\", \"\")\nkey = key.replace(\"J\", \"\")\nkey = \"\".join(key.split(\"X\"))\nkey = [key[i:i+2] for i in range(0, len(key), 2)]\nkey = list(set(key))\nkey = sorted(key)\nkey = \"\".join(key)\nkey = key + \"ABCDEFGHIKLMNOPRSTUVWXYZ\"\nkey = key[:25]\nprint(encrypt(key, plaintext))\n", "\n\ndef playfair(key, plaintext):\n    # Remove spaces, duplicate letters, and 'q'\n    key = key.replace(\" \", \"\")\n    key = \"\".join(set(key))\n    key = key.replace(\"Q\", \"\")\n\n    # Add remaining alphabet\n    alphabet = list(\"abcdefghijklmnoprstuvwxyz\")\n    for i in key:\n        alphabet.remove(i.lower())\n    key += \"\".join(alphabet)\n\n    # Create table\n    table = [\"\"] * 5\n    for i in range(5):\n        table[i] = key[i*5:i*5+5]\n\n    # Encrypt message\n    ciphertext = \"\"\n    for i in range(0, len(plaintext), 2):\n        # Pad with 'x' if needed\n        if i == len(plaintext) - 1:\n            plaintext += 'x'\n        elif plaintext[i] == plaintext[i+1]:\n            plaintext = plaintext[:i+1] + 'x' + plaintext[i+1:]\n\n        # Get row and column of each letter\n        row1, col1 = None, None\n        row2, col2 = None, None\n        for r in range(5):\n            if plaintext[i] in table[r]:\n                row1, col1 = r, table[r].index(plaintext[i])\n            if plaintext[i+1] in table[r]:\n                row2, col2 = r, table[r].index(plaintext[i+1])\n        # Encrypt\n        if row1 == row2:\n            ciphertext += table[row1][(col1+1)%5]\n            ciphertext += table[row2][(col2+1)%5]\n        elif col1 == col2:\n            ciphertext += table[(row1+1)%5][col1]\n            ciphertext += table[(row2+1)%5][col2]\n        else:\n            ciphertext += table[row1][col2]\n            ciphertext += table[row2][col1]\n\n    return ciphertext.upper()\n\ndef main():\n    key = input(\"Enter key: \")\n    plaintext = input(\"Enter message: \")\n    print(playfair(key, plaintext))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef playfair(key, plaintext):\n    key = key.replace(' ', '')\n    key = ''.join(sorted(set(key), key=key.index))\n    key += ''.join(sorted(set('abcdefghiklmnoprstuvwxyz') - set(key)))\n    key = key.replace('j', '')\n    key = [key[i:i+5] for i in range(0, len(key), 5)]\n    plaintext = plaintext.replace(' ', '')\n    plaintext = plaintext.replace('j', 'i')\n    plaintext = [plaintext[i:i+2] for i in range(0, len(plaintext), 2)]\n    ciphertext = ''\n    for digraph in plaintext:\n        if digraph[0] == digraph[1]:\n            digraph = digraph[0] + 'X' + digraph[1]\n        for row in key:\n            if digraph[0] in row and digraph[1] in row:\n                if row.index(digraph[0]) < row.index(digraph[1]):\n                    ciphertext += row[row.index(digraph[0])+1] + row[row.index(digraph[1])+1]\n                else:\n                    ciphertext += row[row.index(digraph[0])-1] + row[row.index(digraph[1])-1]\n            elif digraph[0] in row or digraph[1] in row:\n                if digraph[0] in row:\n                    ciphertext += row[row.index(digraph[0])] + key[(key.index(row)+1)%5][row.index(digraph[0])]\n                else:\n                    ciphertext += row[row.index(digraph[1])] + key[(key.index(row)+1)%5][row.index(digraph[1])]\n    return ciphertext.upper()\n\ndef main():\n    key = sys.stdin.readline().strip()\n    plaintext = sys.stdin.readline().strip()\n    print(playfair(key, plaintext))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Generate the key table\ndef key(phrase):\n    key = [[], [], [], [], []]\n    phrase = [x for x in phrase if x != ' ']\n    for i in range(len(phrase)):\n        if phrase[i] not in key[i // 5]:\n            key[i // 5] += [phrase[i]]\n    for j in range(ord('a'), ord('z') + 1):\n        if chr(j) not in phrase and chr(j) != 'q':\n            for k in range(5):\n                if len(key[k]) < 5:\n                    key[k] += [chr(j)]\n                    break\n    return key\n\n#Encrypt the message\ndef encrypt(message, key):\n    message = [x for x in message if x!=' ']\n    for i in range(len(message)):\n        if message[i]=='x' and i!=len(message)-1 and message[i+1]=='x':\n            message[i] = 'z'\n    if len(message)%2!=0:\n        message += ['x']\n    encrypted = ''\n    for i in range(0,len(message),2):\n        if message[i]==message[i+1]:\n            message.insert(i+1,'x')\n        for j in range(5):\n            if message[i] in key[j]:\n                row1 = j\n                col1 = key[j].index(message[i])\n            if message[i+1] in key[j]:\n                row2 = j\n                col2 = key[j].index(message[i+1])\n        if row1==row2:\n            encrypted += key[row1][(col1+1)%5]\n            encrypted += key[row2][(col2+1)%5]\n        elif col1==col2:\n            encrypted += key[(row1+1)%5][col1]\n            encrypted += key[(row2+1)%5][col2]\n        else:\n            encrypted += key[row1][col2]\n            encrypted += key[row2][col1]\n    return encrypted.upper()\n\n#Main Program\nphrase = input()\nmessage = input()\nprint(encrypt(message, key(phrase)))\n", "\n\nimport sys\n\ndef playfair(key, plaintext):\n    key = key.replace(' ', '')\n    key = ''.join(sorted(set(key), key=key.index))\n    key += ''.join(sorted(set('abcdefghiklmnoprstuvwxyz') - set(key)))\n    key = key.replace('j', '')\n    key = [key[i:i+5] for i in range(0, len(key), 5)]\n    plaintext = plaintext.replace(' ', '')\n    plaintext = plaintext.replace('j', 'i')\n    plaintext = [plaintext[i:i+2] for i in range(0, len(plaintext), 2)]\n    ciphertext = ''\n    for digraph in plaintext:\n        if digraph[0] == digraph[1]:\n            digraph = digraph[0] + 'x' + digraph[1]\n        for row in key:\n            if digraph[0] in row and digraph[1] in row:\n                if row.index(digraph[0]) < row.index(digraph[1]):\n                    ciphertext += row[(row.index(digraph[0])+1)%5] + row[(row.index(digraph[1])+1)%5]\n                else:\n                    ciphertext += row[(row.index(digraph[0])-1)%5] + row[(row.index(digraph[1])-1)%5]\n            elif digraph[0] in row or digraph[1] in row:\n                if digraph[0] in row:\n                    ciphertext += row[row.index(digraph[0])] + key[(key.index(row)+1)%5][row.index(digraph[0])]\n                else:\n                    ciphertext += row[row.index(digraph[1])] + key[(key.index(row)+1)%5][row.index(digraph[1])]\n    return ciphertext.upper()\n\ndef main():\n    key = sys.stdin.readline().strip()\n    plaintext = sys.stdin.readline().strip()\n    print(playfair(key, plaintext))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    key_phrase = sys.stdin.readline().strip()\n    message = sys.stdin.readline().strip()\n    key_phrase = key_phrase.replace(\" \", \"\")\n    message = message.replace(\" \", \"\")\n    key = []\n    for i in key_phrase:\n        if i not in key:\n            key.append(i)\n    for i in range(ord('a'), ord('z') + 1):\n        if chr(i) not in key and chr(i) != 'q':\n            key.append(chr(i))\n    l = len(key)\n    table = []\n    for i in range(l):\n        table.append(key[i:i+5])\n    message = list(message)\n    for i in range(len(message) - 1):\n        if message[i] == message[i+1]:\n            message.insert(i+1, 'x')\n    if len(message) % 2 == 1:\n        message.append('x')\n    message = ''.join(message)\n    message = [message[i:i+2] for i in range(0, len(message), 2)]\n    for i in message:\n        p1, p2 = i[0], i[1]\n        r1, r2, c1, c2 = 0, 0, 0, 0\n        for j in range(5):\n            for k in range(5):\n                if table[j][k] == p1:\n                    r1, c1 = j, k\n                if table[j][k] == p2:\n                    r2, c2 = j, k\n        if r1 == r2:\n            c1 = (c1 + 1) % 5\n            c2 = (c2 + 1) % 5\n        elif c1 == c2:\n            r1 = (r1 + 1) % 5\n            r2 = (r2 + 1) % 5\n        else:\n            c1, c2 = c2, c1\n        print(table[r1][c1] + table[r2][c2], end='')\n\nmain()\n", "\nimport sys\n\ndef main():\n    key = sys.stdin.readline().strip()\n    key_table = build_key_table(key)\n    plaintext = sys.stdin.readline().strip()\n    ciphertext = encrypt(key_table, plaintext)\n    print(ciphertext)\n\ndef build_key_table(key):\n    key_table = [[None for _ in range(5)] for _ in range(5)]\n    key_set = set()\n    row = 0\n    col = 0\n\n    for char in key:\n        if char == ' ':\n            continue\n        if char == 'q':\n            continue\n        if char in key_set:\n            continue\n        key_set.add(char)\n        key_table[row][col] = char\n        col += 1\n        if col == 5:\n            row += 1\n            col = 0\n\n    for char in 'abcdefghiklmnoprstuvwxyz':\n        if char in key_set:\n            continue\n        key_set.add(char)\n        key_table[row][col] = char\n        col += 1\n        if col == 5:\n            row += 1\n            col = 0\n\n    return key_table\n\ndef encrypt(key_table, plaintext):\n    ciphertext = ''\n    plaintext = ''.join(plaintext.split())\n    plaintext = add_x_if_needed(plaintext)\n\n    for i in range(0, len(plaintext), 2):\n        pair = plaintext[i:i+2]\n        ciphertext += encrypt_pair(key_table, pair)\n\n    return ciphertext.upper()\n\ndef encrypt_pair(key_table, pair):\n    assert len(pair) == 2\n    assert pair[0] != pair[1]\n    assert pair[0] != 'q'\n    assert pair[1] != 'q'\n\n    row1, col1 = find_char_in_key_table(key_table, pair[0])\n    row2, col2 = find_char_in_key_table(key_table, pair[1])\n\n    if row1 == row2:\n        return key_table[row1][(col1+1)%5] + key_table[row2][(col2+1)%5]\n    elif col1 == col2:\n        return key_table[(row1+1)%5][col1] + key_table[(row2+1)%5][col2]\n    else:\n        return key_table[row1][col2] + key_table[row2][col1]\n\ndef find_char_in_key_table(key_table, char):\n    for row in range(5):\n        for col in range(5):\n            if key_table[row][col] == char:\n                return (row, col)\n    raise RuntimeError('char not found in key_table')\n\ndef add_x_if_needed(plaintext):\n    for i in range(0, len(plaintext)-1):\n        if plaintext[i] == 'x' and plaintext[i+1] == 'x':\n            plaintext = plaintext[:i+1] + 'q' + plaintext[i+1:]\n    if plaintext[-1] == 'x':\n        plaintext = plaintext + 'q'\n    return plaintext\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef encrypt(phrase, key):\n    # remove spaces in phrase\n    phrase = phrase.replace(' ', '')\n    # if the phrase is odd, add an 'x' to the end of it\n    if len(phrase) % 2 != 0:\n        phrase += 'x'\n    # split phrase into pairs\n    pairs = [phrase[i:i+2] for i in range(0, len(phrase), 2)]\n    # encrypt each pair\n    encrypted_pairs = []\n    for pair in pairs:\n        # if the pair contains two equal letters, add an 'x' after the first letter\n        if pair[0] == pair[1]:\n            pair = pair[0] + 'x' + pair[1]\n        # get the positions of the letters in the key\n        letter1_pos = key.index(pair[0])\n        letter2_pos = key.index(pair[1])\n        # get the row and column of the first letter\n        letter1_row = int(math.floor(letter1_pos / 5))\n        letter1_col = letter1_pos % 5\n        # get the row and column of the second letter\n        letter2_row = int(math.floor(letter2_pos / 5))\n        letter2_col = letter2_pos % 5\n        # if the letters are in the same row, replace them with the letters to their immediate right respectively\n        if letter1_row == letter2_row:\n            letter1_col = (letter1_col + 1) % 5\n            letter2_col = (letter2_col + 1) % 5\n        # if the letters are in the same column, replace them with the letters immediately below respectively\n        elif letter1_col == letter2_col:\n            letter1_row = (letter1_row + 1) % 5\n            letter2_row = (letter2_row + 1) % 5\n        # if the letters are not in the same row or column, replace them with the letters on the same row respectively but at the other pair of corners of the rectangle defined by the original pair\n        else:\n            letter1_col, letter2_col = letter2_col, letter1_col\n        # get the positions of the new letters in the key\n        letter1_pos = letter1_row * 5 + letter1_col\n        letter2_pos = letter2_row * 5 + letter2_col\n        # get the new letters\n        letter1 = key[letter1_pos]\n        letter2 = key[letter2_pos]\n        # add the new pair to the list of encrypted pairs\n        encrypted_pairs.append(letter1 + letter2)\n    # join the encrypted pairs and return the encrypted phrase\n    encrypted_phrase = ''.join(encrypted_pairs)\n    return encrypted_phrase\n\ndef main(filepath):\n    # read the file\n    with open(filepath, 'r') as f:\n        lines = f.read().splitlines()\n    # get the key phrase and phrase to encrypt\n    key_phrase = lines[0]\n    phrase = lines[1]\n    # remove spaces and duplicate letters in the key phrase\n    key_phrase = ''.join(sorted(set(key_phrase.replace(' ', '')), key=key_phrase.index))\n    # fill the table with the key phrase\n    table = []\n    for i in range(0, len(key_phrase), 5):\n        table.append(list(key_phrase[i:i+5]))\n    # fill the rest of the table with the rest of the letters of the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = alphabet.replace('q', '')\n    for letter in alphabet:\n        if letter not in key_phrase:\n            for row in table:\n                if len(row) < 5:\n                    row.append(letter)\n                    break\n    # flatten the table\n    table = [letter for row in table for letter in row]\n    # encrypt the phrase\n    encrypted_phrase = encrypt(phrase, table)\n    # print the encrypted phrase\n    print(encrypted_phrase)\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n", "\nimport sys\n\ndef playfair(key, plaintext):\n\tkey = key.replace(' ', '')\n\tkey = ''.join(sorted(set(key), key=key.index))\n\tkey += ''.join(sorted(set('abcdefghiklmnoprstuvwxyz') - set(key)))\n\tkey = key.replace('j', '')\n\tkey = [key[i:i+5] for i in range(0, len(key), 5)]\n\tplaintext = plaintext.replace(' ', '')\n\tplaintext = plaintext.replace('j', 'i')\n\tplaintext = [plaintext[i:i+2] for i in range(0, len(plaintext), 2)]\n\tciphertext = ''\n\tfor digraph in plaintext:\n\t\tif digraph[0] == digraph[1]:\n\t\t\tdigraph = digraph[0] + 'x' + digraph[1]\n\t\tfor row in key:\n\t\t\tif digraph[0] in row and digraph[1] in row:\n\t\t\t\tif row.index(digraph[0]) < row.index(digraph[1]):\n\t\t\t\t\tciphertext += row[row.index(digraph[0])+1] + row[row.index(digraph[1])+1]\n\t\t\t\telse:\n\t\t\t\t\tciphertext += row[row.index(digraph[0])-1] + row[row.index(digraph[1])-1]\n\t\t\telif digraph[0] in row or digraph[1] in row:\n\t\t\t\tif digraph[0] in row:\n\t\t\t\t\tciphertext += row[row.index(digraph[0])] + key[(key.index(row)+1)%5][row.index(digraph[0])]\n\t\t\t\telse:\n\t\t\t\t\tciphertext += row[row.index(digraph[1])] + key[(key.index(row)+1)%5][row.index(digraph[1])]\n\treturn ciphertext.upper()\n\ndef main():\n\tkey = sys.stdin.readline().strip()\n\tplaintext = sys.stdin.readline().strip()\n\tprint(playfair(key, plaintext))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\nimport math\n\ndef main():\n    key_phrase = sys.stdin.readline().strip()\n    message = sys.stdin.readline().strip()\n    key_phrase = key_phrase.replace(\" \", \"\")\n    message = message.replace(\" \", \"\")\n    key = []\n    for i in key_phrase:\n        if i not in key:\n            key.append(i)\n    for i in range(ord('a'), ord('z') + 1):\n        if chr(i) not in key and chr(i) != 'q':\n            key.append(chr(i))\n    l = len(key)\n    table = []\n    for i in range(l):\n        table.append(key[i:i+5])\n    message = list(message)\n    for i in range(len(message) - 1):\n        if message[i] == message[i+1]:\n            message.insert(i+1, 'x')\n    if len(message) % 2 == 1:\n        message.append('x')\n    message = ''.join(message)\n    message = [message[i:i+2] for i in range(0, len(message), 2)]\n    for i in message:\n        p1, p2 = list(i)\n        r1, r2 = 0, 0\n        c1, c2 = 0, 0\n        for j in range(5):\n            for k in range(5):\n                if table[j][k] == p1:\n                    r1, c1 = j, k\n                if table[j][k] == p2:\n                    r2, c2 = j, k\n        if r1 == r2:\n            c1 = (c1 + 1) % 5\n            c2 = (c2 + 1) % 5\n        elif c1 == c2:\n            r1 = (r1 + 1) % 5\n            r2 = (r2 + 1) % 5\n        else:\n            c1, c2 = c2, c1\n        print(table[r1][c1] + table[r2][c2], end='')\n\nmain()\n", "\n\ndef encrypt(key, plaintext):\n    plaintext = plaintext.replace(\" \", \"\")\n    plaintext = plaintext.upper()\n    plaintext = plaintext.replace(\"Q\", \"\")\n    plaintext = plaintext.replace(\"J\", \"\")\n    plaintext = \"\".join(plaintext.split(\"X\"))\n    plaintext = [plaintext[i:i+2] for i in range(0, len(plaintext), 2)]\n    for i in range(len(plaintext)):\n        if len(plaintext[i]) == 1:\n            plaintext[i] += \"X\"\n        if plaintext[i][0] == plaintext[i][1]:\n            plaintext[i] = plaintext[i][0] + \"X\"\n    ciphertext = \"\"\n    for i in range(len(plaintext)):\n        row1, col1 = key.index(plaintext[i][0]) // 5, key.index(plaintext[i][0]) % 5\n        row2, col2 = key.index(plaintext[i][1]) // 5, key.index(plaintext[i][1]) % 5\n        if row1 == row2:\n            ciphertext += key[row1 * 5 + (col1 + 1) % 5] + key[row2 * 5 + (col2 + 1) % 5]\n        elif col1 == col2:\n            ciphertext += key[((row1 + 1) % 5) * 5 + col1] + key[((row2 + 1) % 5) * 5 + col2]\n        else:\n            ciphertext += key[row1 * 5 + col2] + key[row2 * 5 + col1]\n    return ciphertext\n\nkey = input()\nplaintext = input()\nkey = key.replace(\" \", \"\")\nkey = key.upper()\nkey = key.replace(\"Q\", \"\")\nkey = key.replace(\"J\", \"\")\nkey = \"\".join(key.split(\"X\"))\nkey = [key[i:i+2] for i in range(0, len(key), 2)]\nkey = list(set(key))\nkey = sorted(key)\nkey = \"\".join(key)\nkey = key + \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"\nkey = key[:25]\nprint(encrypt(key, plaintext))\n", "\ndef playfair(key, plaintext):\n    # Remove spaces, duplicate letters, and 'q'\n    key = key.replace(' ', '')\n    key = ''.join(set(key))\n    key = key.replace('q', '')\n\n    # Add remaining letters\n    alphabet = \"abcdefghijklmnoprstuvwxyz\"\n    key += \"\".join(set(alphabet) - set(key))\n\n    # Create table\n    table = [''] * 5\n    for i in range(5):\n        table[i] = key[i*5:i*5+5]\n\n    # Encrypt\n    ciphertext = \"\"\n    for i in range(0, len(plaintext), 2):\n        # Pad with 'x' if needed\n        if i == len(plaintext) - 1:\n            plaintext += 'x'\n        elif plaintext[i] == plaintext[i+1]:\n            plaintext = plaintext[:i+1] + 'x' + plaintext[i+1:]\n\n        # Get row and column of each letter\n        row1, col1 = None, None\n        row2, col2 = None, None\n        for r in range(5):\n            if plaintext[i] in table[r]:\n                row1, col1 = r, table[r].index(plaintext[i])\n            if plaintext[i+1] in table[r]:\n                row2, col2 = r, table[r].index(plaintext[i+1])\n        # Encrypt\n        if row1 == row2:\n            ciphertext += table[row1][(col1+1)%5]\n            ciphertext += table[row2][(col2+1)%5]\n        elif col1 == col2:\n            ciphertext += table[(row1+1)%5][col1]\n            ciphertext += table[(row2+1)%5][col2]\n        else:\n            ciphertext += table[row1][col2]\n            ciphertext += table[row2][col1]\n\n    return ciphertext.upper()\n\ndef main():\n    key = input()\n    plaintext = input()\n    print(playfair(key, plaintext))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef encrypt(key, plaintext):\n    plaintext = plaintext.replace(\" \", \"\")\n    plaintext = plaintext.upper()\n    plaintext = plaintext.replace(\"Q\", \"\")\n    plaintext = plaintext.replace(\"J\", \"\")\n    plaintext = \"\".join(plaintext.split(\"X\"))\n    plaintext = [plaintext[i:i+2] for i in range(0, len(plaintext), 2)]\n    for i in range(len(plaintext)):\n        if len(plaintext[i]) == 1:\n            plaintext[i] += \"X\"\n        if plaintext[i][0] == plaintext[i][1]:\n            plaintext[i] = plaintext[i][0] + \"X\"\n    ciphertext = \"\"\n    for i in range(len(plaintext)):\n        row1, col1 = key.index(plaintext[i][0]) // 5, key.index(plaintext[i][0]) % 5\n        row2, col2 = key.index(plaintext[i][1]) // 5, key.index(plaintext[i][1]) % 5\n        if row1 == row2:\n            ciphertext += key[row1 * 5 + (col1 + 1) % 5] + key[row2 * 5 + (col2 + 1) % 5]\n        elif col1 == col2:\n            ciphertext += key[((row1 + 1) % 5) * 5 + col1] + key[((row2 + 1) % 5) * 5 + col2]\n        else:\n            ciphertext += key[row1 * 5 + col2] + key[row2 * 5 + col1]\n    return ciphertext\n\nkey = input()\nplaintext = input()\nkey = key.replace(\" \", \"\")\nkey = key.upper()\nkey = key.replace(\"Q\", \"\")\nkey = key.replace(\"J\", \"\")\nkey = \"\".join(key.split(\"X\"))\nkey = [key[i:i+2] for i in range(0, len(key), 2)]\nkey = list(set(key))\nkey = sorted(key)\nkey = \"\".join(key)\nkey = key + \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"\nkey = key[:25]\nprint(encrypt(key, plaintext))\n", "\nimport sys\n\ndef main():\n    key = sys.stdin.readline()\n    key_table = build_key_table(key)\n    plaintext = sys.stdin.readline()\n    ciphertext = encrypt(key_table, plaintext)\n    print(ciphertext)\n\ndef build_key_table(key):\n    key_table = [[None for _ in range(5)] for _ in range(5)]\n    key_set = set()\n    row = 0\n    col = 0\n\n    for char in key:\n        if char == ' ':\n            continue\n        if char == 'q':\n            continue\n        if char in key_set:\n            continue\n        key_set.add(char)\n        key_table[row][col] = char\n        col += 1\n        if col == 5:\n            row += 1\n            col = 0\n\n    for char in 'abcdefghiklmnoprstuvwxyzq':\n        if char in key_set:\n            continue\n        key_set.add(char)\n        key_table[row][col] = char\n        col += 1\n        if col == 5:\n            row += 1\n            col = 0\n\n    return key_table\n\ndef encrypt(key_table, plaintext):\n    ciphertext = ''\n    plaintext = ''.join(plaintext.split())\n    plaintext = add_x_if_needed(plaintext)\n\n    for i in range(0, len(plaintext), 2):\n        pair = plaintext[i:i+2]\n        ciphertext += encrypt_pair(key_table, pair)\n\n    return ciphertext.upper()\n\ndef encrypt_pair(key_table, pair):\n    assert len(pair) == 2\n    assert pair[0] != pair[1]\n\n    row1, col1 = find_char_in_key_table(key_table, pair[0])\n    row2, col2 = find_char_in_key_table(key_table, pair[1])\n\n    if row1 == row2:\n        return key_table[row1][(col1+1)%5] + key_table[row2][(col2+1)%5]\n    elif col1 == col2:\n        return key_table[(row1+1)%5][col1] + key_table[(row2+1)%5][col2]\n    else:\n        return key_table[row1][col2] + key_table[row2][col1]\n\ndef find_char_in_key_table(key_table, char):\n    for row in range(5):\n        for col in range(5):\n            if key_table[row][col] == char:\n                return (row, col)\n    raise RuntimeError('char not found in key_table')\n\ndef add_x_if_needed(plaintext):\n    for i in range(0, len(plaintext)-1):\n        if plaintext[i] == 'x' and plaintext[i+1] == 'x':\n            plaintext = plaintext[:i+1] + 'q' + plaintext[i+1:]\n    if plaintext[-1] == 'x':\n        plaintext = plaintext + 'q'\n    return plaintext\n\nif __name__ == '__main__':\n    main()\n"]