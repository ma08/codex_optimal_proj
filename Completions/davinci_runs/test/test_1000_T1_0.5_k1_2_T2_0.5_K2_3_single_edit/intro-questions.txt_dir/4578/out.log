2022-04-09 20:56:29.728007 """
Akaki, a patissier, can make N kinds of doughnut using only a certain powder called "Okashi no Moto" (literally "material of pastry", simply called Moto below) as ingredient. These doughnuts are called Doughnut 1, Doughnut 2, ..., Doughnut N. In order to make one Doughnut i (1 ≤ i ≤ N), she needs to consume m_i grams of Moto. She cannot make a non-integer number of doughnuts, such as 0.5 doughnuts.
Now, she has X grams of Moto. She decides to make as many doughnuts as possible for a party tonight. However, since the tastes of the guests differ, she will obey the following condition:
 - For each of the N kinds of doughnuts, make at least one doughnut of that kind.
At most how many doughnuts can be made here? She does not necessarily need to consume all of her Moto. Also, under the constraints of this problem, it is always possible to obey the condition.

-----Constraints-----
 - 2 ≤ N ≤ 100
 - 1 ≤ m_i ≤ 1000
 - m_1 + m_2 + ... + m_N ≤ X ≤ 10^5
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N X
m_1
m_2
:
m_N

-----Output-----
Print the maximum number of doughnuts that can be made under the condition.

-----Sample Input-----
3 1000
120
100
140

-----Sample Output-----
9

She has 1000 grams of Moto and can make three kinds of doughnuts. If she makes one doughnut for each of the three kinds, she consumes 120 + 100 + 140 = 360 grams of Moto. From the 640 grams of Moto that remains here, she can make additional six Doughnuts 2. This is how she can made a total of nine doughnuts, which is the maximum.
"""
2022-04-09 20:56:29.728029 --------------------------
2022-04-09 20:56:37.689857 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN, X = map(int, input().split())\n\nm_list = []\nfor i in range(N):\n    m_list.append(int(input()))\n\nm_list.sort()\n\nnum_doughnut_list = []\nfor i in range(N):\n    num_doughnut_list.append(X // m_list[i])\n\nprint(sum(num_doughnut_list))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN, X = map(int, input().split())\nm = [int(input()) for i in range(N)]\n\nprint(X // min(m))"
    }
  ],
  "created": 1649552190,
  "id": "cmpl-4vGAQsFiAwJbYjGxz00RNkyv7zHGQ",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:56:37.690093 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN, X = map(int, input().split())\n\nm_list = []\nfor i in range(N):\n    m_list.append(int(input()))\n\nm_list.sort()\n\nnum_doughnut_list = []\nfor i in range(N):\n    num_doughnut_list.append(X // m_list[i])\n\nprint(sum(num_doughnut_list))"
}
2022-04-09 20:56:37.690131 REASON stop
2022-04-09 20:56:37.691167 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN, X = map(int, input().split())\nm = [int(input()) for i in range(N)]\n\nprint(X // min(m))"
}
2022-04-09 20:56:37.691228 REASON stop
