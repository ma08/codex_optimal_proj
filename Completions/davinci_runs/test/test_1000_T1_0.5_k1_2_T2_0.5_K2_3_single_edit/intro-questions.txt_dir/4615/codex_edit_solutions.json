["\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))  # Filter\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))  # Round\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))  # Convert\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))  # Max\nprint(candidate[0] + candidate[1], candidate[1])  # Output\n", "\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n", "\n\nA, B, C, D, E, F = map(int, input().split())\n# A, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n", "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n", "\n\n# A, B, C, D, E, F = map(int, input().split())\n# A, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print('{} {}'.format(sugar_dissolved[0], sugar_dissolved[1]))\nelse:\n    print('0 0')\n", "\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\n\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\n\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\n\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"]