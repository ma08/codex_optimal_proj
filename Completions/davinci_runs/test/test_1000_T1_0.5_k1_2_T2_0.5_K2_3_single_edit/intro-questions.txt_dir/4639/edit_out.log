2022-04-16 00:32:04.318667 num operations 1
2022-04-16 00:32:04.318686 size on input set 1
2022-04-16 00:32:07.521566 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nsys.stdin = open('in.txt', 'r')\n\nsys.stdout = open('out.txt', 'w')\n\ndef gen(n, k):\n    if n == 3:\n        if k == 1:\n            return 'abb'\n        elif k == 2:\n            return 'bab'\n        else:\n            return 'baa'\n    else:\n        if k <= n-1:\n            return 'a' + gen(n-1, k)\n        else:\n            return 'b' + gen(n-1, k-(n-1))\n\nif __name__ == '__main__':\n    t = int(raw_input())\n    for _ in range(t):\n        n, k = map(int, raw_input().split())\n        print gen(n, k)\n"
    },
    {
      "index": 1,
      "text": "\n#\n#import sys\n\n#sys.stdin = open('in.txt', 'r')\n\n#sys.stdout = open('out.txt', 'w')\n\ndef gen(n, k):\n    if n == 3:\n        if k == 1:\n            return 'abb'\n        elif k == 2:\n            return 'bab'\n        else:\n            return 'baa'\n    else:\n        if k <= n-1:\n            return 'a' + gen(n-1, k)\n        else:\n            return 'b' + gen(n-1, k-(n-1))\n\nif __name__ == '__main__':\n    t = int(raw_input())\n    for _ in range(t):\n        n, k = map(int, raw_input().split())\n        print gen(n, k)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nsys.stdin = open('in.txt', 'r')\n\nsys.stdout = open('out.txt', 'w')\n\ndef gen(n, k):\n    if n == 3:\n        if k == 1:\n            return 'abb'\n        elif k == 2:\n            return 'bab'\n        else:\n            return 'baa'\n    else:\n        if k <= n-1:\n            return 'a' + gen(n-1, k)\n        else:\n            return 'b' + gen(n-1, k-(n-1))\n\nif __name__ == '__main__':\n    t = int(raw_input())\n    for _ in range(t):\n        n, k = map(int, raw_input().split())\n        print gen(n, k)\n"
    }
  ],
  "created": 1650069124,
  "object": "edit"
}
2022-04-16 00:32:07.521789 fix syntax errors 3 ["\n\nimport sys\n\nsys.stdin = open('in.txt', 'r')\n\nsys.stdout = open('out.txt', 'w')\n\ndef gen(n, k):\n    if n == 3:\n        if k == 1:\n            return 'abb'\n        elif k == 2:\n            return 'bab'\n        else:\n            return 'baa'\n    else:\n        if k <= n-1:\n            return 'a' + gen(n-1, k)\n        else:\n            return 'b' + gen(n-1, k-(n-1))\n\nif __name__ == '__main__':\n    t = int(raw_input())\n    for _ in range(t):\n        n, k = map(int, raw_input().split())\n        print gen(n, k)\n", "\n#\n#import sys\n\n#sys.stdin = open('in.txt', 'r')\n\n#sys.stdout = open('out.txt', 'w')\n\ndef gen(n, k):\n    if n == 3:\n        if k == 1:\n            return 'abb'\n        elif k == 2:\n            return 'bab'\n        else:\n            return 'baa'\n    else:\n        if k <= n-1:\n            return 'a' + gen(n-1, k)\n        else:\n            return 'b' + gen(n-1, k-(n-1))\n\nif __name__ == '__main__':\n    t = int(raw_input())\n    for _ in range(t):\n        n, k = map(int, raw_input().split())\n        print gen(n, k)\n", "\n\nimport sys\n\nsys.stdin = open('in.txt', 'r')\n\nsys.stdout = open('out.txt', 'w')\n\ndef gen(n, k):\n    if n == 3:\n        if k == 1:\n            return 'abb'\n        elif k == 2:\n            return 'bab'\n        else:\n            return 'baa'\n    else:\n        if k <= n-1:\n            return 'a' + gen(n-1, k)\n        else:\n            return 'b' + gen(n-1, k-(n-1))\n\nif __name__ == '__main__':\n    t = int(raw_input())\n    for _ in range(t):\n        n, k = map(int, raw_input().split())\n        print gen(n, k)\n"]
2022-04-16 00:32:07.521824 size on output set 2
2022-04-16 00:32:07.521836 num operations 1
2022-04-16 00:32:07.521841 size on input set 1
2022-04-16 00:32:10.176427 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef get_nth_string(n, k):\n\n    if n == 3:\n        if k == 1:\n            return \"abb\"\n        else:\n            return \"bab\"\n\n    # Calculate the number of strings with the first 'a' in the first position\n    num_with_first_a_in_first_pos = (n-2) * (n-3) // 2\n\n    if k <= num_with_first_a_in_first_pos:\n        # The first 'a' is in the first position\n        return \"a\" + get_nth_string(n-1, k)\n\n    # The first 'a' is not in the first position\n    return \"b\" + get_nth_string(n-1, k-num_with_first_a_in_first_pos)\n\n\nif __name__ == \"__main__\":\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n, k = [int(x) for x in input().split()]\n        print(get_nth_string(n, k))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_nth_string(n, k):\n\n    if n == 3:\n        if k == 1:\n            return \"abb\"\n        else:\n            return \"bab\"\n\n    # Calculate the number of strings with the first 'a' in the first position\n    num_with_first_a_in_first_pos = (n-2) * (n-3) / 2\n\n    if k <= num_with_first_a_in_first_pos:\n        # The first 'a' is in the first position\n        return \"a\" + get_nth_string(n-1, k)\n\n    # The first 'a' is not in the first position\n    return \"b\" + get_nth_string(n-1, k-num_with_first_a_in_first_pos)\n\n\nif __name__ == \"__main__\":\n    num_test_cases = int(input())\n    for i in range(num_test_cases):\n        n, k = [int(x) for x in input().split()]\n        print(get_nth_string(n, k))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_nth_string(n, k):\n\n    if n == 3:\n        if k == 1:\n            return \"abb\"\n        else:\n            return \"bab\"\n\n    # Calculate the number of strings with the first 'a' in the first position\n    num_with_first_a_in_first_pos = (n-2) * (n-3) // 2\n\n    if k <= num_with_first_a_in_first_pos:\n        # The first 'a' is in the first position\n        return \"a\" + get_nth_string(n-1, k)\n\n    # The first 'a' is not in the first position\n    return \"b\" + get_nth_string(n-1, k-num_with_first_a_in_first_pos)\n\n\nif __name__ == \"__main__\":\n    num_test_cases = int(input())\n    for i in range(num_test_cases):\n        n, k = [int(x) for x in input().split()]\n        print(get_nth_string(n, k))\n"
    }
  ],
  "created": 1650069127,
  "object": "edit"
}
2022-04-16 00:32:10.176622 fix syntax errors 3 ['\n\nimport math\n\ndef get_nth_string(n, k):\n\n    if n == 3:\n        if k == 1:\n            return "abb"\n        else:\n            return "bab"\n\n    # Calculate the number of strings with the first \'a\' in the first position\n    num_with_first_a_in_first_pos = (n-2) * (n-3) // 2\n\n    if k <= num_with_first_a_in_first_pos:\n        # The first \'a\' is in the first position\n        return "a" + get_nth_string(n-1, k)\n\n    # The first \'a\' is not in the first position\n    return "b" + get_nth_string(n-1, k-num_with_first_a_in_first_pos)\n\n\nif __name__ == "__main__":\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n, k = [int(x) for x in input().split()]\n        print(get_nth_string(n, k))\n', '\n\ndef get_nth_string(n, k):\n\n    if n == 3:\n        if k == 1:\n            return "abb"\n        else:\n            return "bab"\n\n    # Calculate the number of strings with the first \'a\' in the first position\n    num_with_first_a_in_first_pos = (n-2) * (n-3) / 2\n\n    if k <= num_with_first_a_in_first_pos:\n        # The first \'a\' is in the first position\n        return "a" + get_nth_string(n-1, k)\n\n    # The first \'a\' is not in the first position\n    return "b" + get_nth_string(n-1, k-num_with_first_a_in_first_pos)\n\n\nif __name__ == "__main__":\n    num_test_cases = int(input())\n    for i in range(num_test_cases):\n        n, k = [int(x) for x in input().split()]\n        print(get_nth_string(n, k))\n', '\n\ndef get_nth_string(n, k):\n\n    if n == 3:\n        if k == 1:\n            return "abb"\n        else:\n            return "bab"\n\n    # Calculate the number of strings with the first \'a\' in the first position\n    num_with_first_a_in_first_pos = (n-2) * (n-3) // 2\n\n    if k <= num_with_first_a_in_first_pos:\n        # The first \'a\' is in the first position\n        return "a" + get_nth_string(n-1, k)\n\n    # The first \'a\' is not in the first position\n    return "b" + get_nth_string(n-1, k-num_with_first_a_in_first_pos)\n\n\nif __name__ == "__main__":\n    num_test_cases = int(input())\n    for i in range(num_test_cases):\n        n, k = [int(x) for x in input().split()]\n        print(get_nth_string(n, k))\n']
2022-04-16 00:32:10.176743 size on output set 3
