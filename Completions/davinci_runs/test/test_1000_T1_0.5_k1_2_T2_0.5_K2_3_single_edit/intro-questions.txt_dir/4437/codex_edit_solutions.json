["\ndef main():\n    # read input\n    n = int(input())\n    s = input()\n\n    # check if the string has an odd number of a's and b's\n    if s.count('a') % 2 == 1:\n        print(1)\n        print(s.replace('a', 'b', 1))\n    elif s.count('b') % 2 == 1:\n        print(1)\n        print(s.replace('b', 'a', 1))\n    else:\n        print(0)\n        print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # read the input\n    n = int(raw_input())\n    s = raw_input()\n\n    # check if the string has an odd number of 'a's and 'b's\n    if s.count('a') % 2 == 1:\n        print(1)\n        print(s.replace('a', 'b', 1))\n    elif s.count('b') % 2 == 1:\n        print(1)\n        print(s.replace('b', 'a', 1))\n    else:\n        print(0)\n        print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # read input\n    n = int(input())\n    s = input()\n\n    # check if the string has an odd number of a's and b's\n    if s.count('a') % 2 == 1 and s.count('b') % 2 == 1:\n        print(2)\n        print(s.replace('a', 'b', 1), s.replace('b', 'a', 1))\n    elif s.count('a') % 2 == 1:\n        print(1)\n        print(s.replace('a', 'b', 1))\n    elif s.count('b') % 2 == 1 and s.count('a') % 2 == 1:\n        print(2)\n        print(s.replace('a', 'b', 1), s.replace('b', 'a', 1))\n    elif s.count('b') % 2 == 1 and s.count('a') % 2 == 0:\n        print(1)\n        print(s.replace('b', 'a', 1))\n    else:\n        print(0)\n        print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\ns = input()\n\n# first half and second half\na_count_first_half = s[:n//2].count('a')\nb_count_first_half = s[:n//2].count('b')\na_count_second_half = s[n//2:].count('a')\nb_count_second_half = s[n//2:].count('b')\n\n# difference between first half and second half\ndifference = abs(a_count_first_half - b_count_first_half)\ndifference2 = abs(a_count_second_half - b_count_second_half)\n\n# operations\noperations = min(difference, difference2)\n\n# output\nprint(operations)\n\n# modified string output\nif difference < difference2:\n    print(s[:n//2] + s[n//2:])\nelse:\n    print(s[n//2:] + s[:n//2])\n", "\nn = int(input())\ns = input()\n\n# first half and second half\nfirst_half = s[:n // 2]\nsecond_half = s[n // 2:]\n\n# calculate operations\noperations_1 = abs(first_half.count('a') - first_half.count('b'))\noperations_2 = abs(second_half.count('a') - second_half.count('b'))\n\n# find the minimum operations\noperations = min(operations_1, operations_2)\n\nprint(operations)\n\n# modified string\nif operations_1 < operations_2:\n    print(first_half + second_half)\nelse:\n    print(second_half + first_half)\n", "\n\nn = int(input())\ns = input()\n\n# first half\nfirst_half = s[:n//2]\na_count_first_half = first_half.count('a')\nb_count_first_half = first_half.count('b')\n\n# second half\nsecond_half = s[n//2:]\na_count_second_half = second_half.count('a')\nb_count_second_half = second_half.count('b')\n\n# difference\ndifference = abs(a_count_first_half - b_count_first_half)\ndifference2 = abs(a_count_second_half - b_count_second_half)\n\n# operations\noperations = min(difference, difference2)\n\n# output\nprint(operations)\n\n# modified string\nif difference < difference2:\n    print(first_half + second_half, end=\"\")\nelse:\n    print(second_half + first_half, end=\"\")\n"]