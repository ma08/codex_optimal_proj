2022-04-16 01:11:10.507809 num operations 1
2022-04-16 01:11:10.507825 size on input set 1
2022-04-16 01:11:21.277568 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\t# print(meal)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdif = abs(s-b)\n\t# \t\tif dif < min_dif:\n\t# \t\t\tmin_dif = dif\n\t# print(min_dif) \n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdif = abs(s-b)\n\t# \t\t\tif dif < min_dif:\n\t# \t\t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]*meal[i][1]*meal[j][1]*meal[k][1]*meal[l][1]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]+meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\n\t# print(meal)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdif = abs(s-b)\n\t# \t\tif dif < min_dif:\n\t# \t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdif = abs(s-b)\n\t# \t\t\tif dif < min_dif:\n\t# \t\t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650071470,
  "object": "edit"
}
2022-04-16 01:11:21.277959 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\t# print(meal)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdif = abs(s-b)\n\t# \t\tif dif < min_dif:\n\t# \t\t\tmin_dif = dif\n\t# print(min_dif) \n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdif = abs(s-b)\n\t# \t\t\tif dif < min_dif:\n\t# \t\t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]*meal[i][1]*meal[j][1]*meal[k][1]*meal[l][1]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]+meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\n\t# print(meal)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdif = abs(s-b)\n\t# \t\tif dif < min_dif:\n\t# \t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdif = abs(s-b)\n\t# \t\t\tif dif < min_dif:\n\t# \t\t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-16 01:11:21.278019 size on output set 3
2022-04-16 01:11:21.278032 num operations 1
2022-04-16 01:11:21.278038 size on input set 1
2022-04-16 01:11:29.796669 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport itertools\n\nn = int(input())\nperk_ingredients=[]\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s,b))\n\nperk_combinations=list(itertools.combinations(perk_ingredients,1))\n\nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients,i)))\n\nperk_combinations=[list(x) for x in perk_combinations]\n\nmin_diff=float('inf')\n\nfor combo in perk_combinations:\n    s_sum=1\n    b_sum=0\n    for ing in combo:\n        s_sum*=ing[0]\n        b_sum+=ing[1]\n    diff=abs(s_sum-b_sum)\n    if diff < min_diff:\n        min_diff=diff\n\nprint(min_diff)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport itertools\n\nn = int(input())\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\n    \nperk_combinations = list(itertools.combinations(perk_ingredients, 1))\n    \nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))\n    \nperk_combinations = [list(x) for x in perk_combinations]\n\nmin_diff = float('inf')\n    \nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n        \nprint(min_diff)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport itertools\n\nn = int(input())\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\n\nperk_combinations = list(itertools.combinations(perk_ingredients, 1))\n\nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))\n    \nperk_combinations = [list(x) for x in perk_combinations]\n    \nmin_diff = float('inf')\n\nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n"
    }
  ],
  "created": 1650071481,
  "object": "edit"
}
2022-04-16 01:11:29.797019 fix syntax errors 3 ["\nimport itertools\n\nn = int(input())\nperk_ingredients=[]\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s,b))\n\nperk_combinations=list(itertools.combinations(perk_ingredients,1))\n\nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients,i)))\n\nperk_combinations=[list(x) for x in perk_combinations]\n\nmin_diff=float('inf')\n\nfor combo in perk_combinations:\n    s_sum=1\n    b_sum=0\n    for ing in combo:\n        s_sum*=ing[0]\n        b_sum+=ing[1]\n    diff=abs(s_sum-b_sum)\n    if diff < min_diff:\n        min_diff=diff\n\nprint(min_diff)\n", "\n\nimport itertools\n\nn = int(input())\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\n    \nperk_combinations = list(itertools.combinations(perk_ingredients, 1))\n    \nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))\n    \nperk_combinations = [list(x) for x in perk_combinations]\n\nmin_diff = float('inf')\n    \nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n        \nprint(min_diff)\n", "\n\nimport itertools\n\nn = int(input())\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\n\nperk_combinations = list(itertools.combinations(perk_ingredients, 1))\n\nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))\n    \nperk_combinations = [list(x) for x in perk_combinations]\n    \nmin_diff = float('inf')\n\nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n"]
2022-04-16 01:11:29.797061 size on output set 3
2022-04-16 01:11:29.797078 num operations 1
2022-04-16 01:11:29.797084 size on input set 1
2022-04-16 01:11:31.410409 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n"
    }
  ],
  "created": 1650071489,
  "object": "edit"
}
2022-04-16 01:11:31.410591 fix syntax errors 3 ['\n\n# SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n', '\n\n# SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n', '\n\n# SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n']
2022-04-16 01:11:31.410619 size on output set 1
2022-04-16 01:11:31.410631 num operations 1
2022-04-16 01:11:31.410636 size on input set 1
2022-04-16 01:11:53.872471 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]), abs(ceil(s/ingredients[10][0])-b+ingredients[10][1]), abs(floor(s/ingredients[10][0])-b+ingredients[10][1]), abs(ceil(s/ingredients[11][0])-b+ingredients[11][1]), abs(floor(s/ingredients[11][0])-b+ingredients[11][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n"
    }
  ],
  "created": 1650071491,
  "object": "edit"
}
2022-04-16 01:11:53.872743 fix syntax errors 3 ['\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]), abs(ceil(s/ingredients[10][0])-b+ingredients[10][1]), abs(floor(s/ingredients[10][0])-b+ingredients[10][1]), abs(ceil(s/ingredients[11][0])-b+ingredients[11][1]), abs(floor(s/ingredients[11][0])-b+ingredients[11][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n', '\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n', '\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n']
2022-04-16 01:11:53.872796 size on output set 3
2022-04-16 01:11:53.872809 num operations 1
2022-04-16 01:11:53.872814 size on input set 1
2022-04-16 01:11:57.561301 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n\n    print(minDiff)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1]) / 2\n    minDiffIngredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1]) / 2\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i]\n\n    print(minDiffIngredient[0] + minDiffIngredient[1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n\n    print(minDiff)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650071513,
  "object": "edit"
}
2022-04-16 01:11:57.561495 fix syntax errors 3 ["\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n\n    print(minDiff)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1]) / 2\n    minDiffIngredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1]) / 2\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i]\n\n    print(minDiffIngredient[0] + minDiffIngredient[1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n\n    print(minDiff)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:11:57.561599 size on output set 2
2022-04-16 01:11:57.561610 num operations 1
2022-04-16 01:11:57.561615 size on input set 1
2022-04-16 01:12:06.595049 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff, cache):\n    if index == n:\n        return abs(curr_s - curr_b), diff\n    if cache[index] != -1:\n        return cache[index]\n    cache[index] = min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff, cache)[0],\n                       min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff, cache)[0])\n    return cache[index], diff\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\ncache = [-1 for i in range(n)]\nprint(min_diff(s, b, n, 0, 1, 0, 100000000, cache)[0])\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b) and diff != 100000000:\n        return min(diff, abs(curr_s - curr_b))\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b):\n        return diff\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n"
    }
  ],
  "created": 1650071517,
  "object": "edit"
}
2022-04-16 01:12:06.595231 fix syntax errors 3 ['import sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff, cache):\n    if index == n:\n        return abs(curr_s - curr_b), diff\n    if cache[index] != -1:\n        return cache[index]\n    cache[index] = min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff, cache)[0],\n                       min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff, cache)[0])\n    return cache[index], diff\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\ncache = [-1 for i in range(n)]\nprint(min_diff(s, b, n, 0, 1, 0, 100000000, cache)[0])\n', '\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b) and diff != 100000000:\n        return min(diff, abs(curr_s - curr_b))\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b):\n        return diff\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n']
2022-04-16 01:12:06.595272 size on output set 3
2022-04-16 01:12:06.595329 num operations 1
2022-04-16 01:12:06.595339 size on input set 1
2022-04-16 01:12:11.115662 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\nprint(abs(sourness-bitterness))\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\nsour = 1\nbit = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sour *= S\n    bit += B\nprint(abs(sour-bit))\n\nprint(abs(sourness-bitterness))\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\nprint(abs(sourness-bitterness))\n"
    }
  ],
  "created": 1650071526,
  "object": "edit"
}
2022-04-16 01:12:11.115884 fix syntax errors 3 ['\nN = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\nprint(abs(sourness-bitterness))\n', '\n\nN = int(input())\nsour = 1\nbit = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sour *= S\n    bit += B\nprint(abs(sour-bit))\n\nprint(abs(sourness-bitterness))\n', '\nN = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\nprint(abs(sourness-bitterness))\n']
2022-04-16 01:12:11.115911 size on output set 3
2022-04-16 01:12:11.115936 num operations 1
2022-04-16 01:12:11.115942 size on input set 1
2022-04-16 01:12:12.582335 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n"
    }
  ],
  "created": 1650071531,
  "object": "edit"
}
2022-04-16 01:12:12.582535 fix syntax errors 3 ['\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n', '\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n', '\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n']
2022-04-16 01:12:12.582633 size on output set 2
