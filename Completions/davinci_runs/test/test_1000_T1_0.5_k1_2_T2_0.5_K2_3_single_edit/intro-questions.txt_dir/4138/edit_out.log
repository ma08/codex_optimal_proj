2022-04-15 23:07:39.341148 num operations 1
2022-04-15 23:07:39.341167 size on input set 1
2022-04-15 23:07:44.281436 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length) // 2\n    # Compute the starting value of the block\n    start = length ** 2 + length + 1\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    },
    {
      "index": 1,
      "text": "\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # Compute and return the answer\n    return 1\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    },
    {
      "index": 2,
      "text": "\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n\n    k -= (length**2 + length)//2\n    # Compute the starting value of the block\n    start = length\n\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"
    }
  ],
  "created": 1650064059,
  "object": "edit"
}
2022-04-15 23:07:44.281665 fix syntax errors 3 ['\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length) // 2\n    # Compute the starting value of the block\n    start = length ** 2 + length + 1\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n', '\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    # Compute and return the answer\n    return 1\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n', '\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    """\n    This function solves the problem for a given value of k.\n    """\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n\n    k -= (length**2 + length)//2\n    # Compute the starting value of the block\n    start = length\n\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n']
2022-04-15 23:07:44.281703 size on output set 3
