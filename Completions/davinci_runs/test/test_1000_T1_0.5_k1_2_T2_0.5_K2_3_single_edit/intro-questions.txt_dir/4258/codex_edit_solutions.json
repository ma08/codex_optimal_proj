["import sys\nfrom io import StringIO\nimport unittest\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 5 7\"\"\"\n        output = \"\"\"10\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7 50\"\"\"\n        output = \"\"\"175\"\"\"\n        self.assertIO(input, output)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "\ndef main():\n    A, B, T = map(int, input().split())\n    print(B * ((T + A - 1) // A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport os\n\ndef file_search(folder, filename):\n    for dirpath, dirnames, filenames in os.walk(folder):\n        for name in filenames:\n            if name == filename:\n                return os.path.join(dirpath, name)\n\n    return None\n\n\nif __name__ == \"__main__\":\n    folder = os.path.expanduser(\"~\")\n    filename = \"test.txt\"\n    print(file_search(folder, filename))\n", "import os\nimport sys\nimport getpass\n\nuser = getpass.getuser()\n\ndef create_file(name, text=''):\n    with open(name, 'w') as f:\n        f.write(text)\n\ndef create_folder(name):\n    try:\n        os.mkdir(name)\n    except FileExistsError:\n        print(\"Folder exists\")\n\ndef delete_file(name):\n    try:\n        os.remove(name)\n    except FileNotFoundError:\n        print(\"File doesn't exist\")\n\ndef copy_file(name, new_name):\n    try:\n        with open(name, 'r') as rf:\n            with open(new_name, 'w') as wf:\n                for line in rf:\n                    wf.write(line)\n    except FileNotFoundError:\n        print(\"File doesn't exist\")\n\ndef save_info(message):\n    current_directory = os.getcwd()\n    os.chdir(f'/home/{user}/Documents')\n    with open('log.txt', 'a') as f:\n        f.write(message)\n    os.chdir(current_directory)\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Not enough arguments\")\n        return\n\n    command = sys.argv[1]\n    if command == 'list':\n        print(os.listdir())\n    elif command == 'create_file':\n        create_file(sys.argv[2])\n        save_info(f\"{user} created {sys.argv[2]}\\n\")\n    elif command == 'create_folder':\n        create_folder(sys.argv[2])\n        save_info(f\"{user} created {sys.argv[2]}\\n\")\n    elif command == 'delete':\n        delete_file(sys.argv[2])\n        save_info(f\"{user} deleted {sys.argv[2]}\\n\")\n    elif command == 'copy':\n        copy_file(sys.argv[2], sys.argv[3])\n        save_info(f\"{user} copied {sys.argv[2]} to {sys.argv[3]}\\n\")\n    elif command == 'help':\n        print(\"\"\"\n        list - lists all files and folders in current directory\n        create_file - creates a file\n        create_folder - creates a folder\n        delete - deletes a file\n        copy - copies a file to another file\n        \"\"\")\n    else:\n        print(\"Unknown command\")\n\nif __name__ == '__main__':\n    main()\n", "const fs = require('fs');\n\nfs.readFile('./data.txt', 'utf-8', (err, data) => {\n    if (err) {\n        console.log(err);\n        return;\n    }\n    console.log(data);\n});\n"]