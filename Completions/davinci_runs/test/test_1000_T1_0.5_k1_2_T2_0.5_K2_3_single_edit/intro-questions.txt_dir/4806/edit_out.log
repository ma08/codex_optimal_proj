2022-04-16 01:38:27.712381 num operations 1
2022-04-16 01:38:27.712398 size on input set 1
2022-04-16 01:38:30.717890 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    moves = input()\n    result = \"\"\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\":\n            result += \"S\"\n            i += 1\n        elif moves[i] == \"B\":\n            result += \"K\"\n            i += 1\n        elif moves[i] == \"L\":\n            result += \"H\"\n            i += 1\n    print(result)\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    moves = input()\n    result = \"\"\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\":\n            result += \"S\"\n            i += 1\n        elif moves[i] == \"B\":\n            result += \"K\"\n            i += 1\n        elif moves[i] == \"L\":\n            result += \"H\"\n            i += 1\n    print(result)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    moves = input()\n    result = \"\"\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\":\n            result += \"S\"\n            i += 1\n        elif moves[i] == \"B\":\n            result += \"K\"\n            i += 1\n        elif moves[i] == \"L\":\n            result += \"H\"\n            i += 1\n    print(result)\n\nmain()\n"
    }
  ],
  "created": 1650073107,
  "object": "edit"
}
2022-04-16 01:38:30.718136 fix syntax errors 3 ['\n\ndef main():\n    moves = input()\n    result = ""\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += "C"\n            i += 3\n        elif moves[i] == "R":\n            result += "S"\n            i += 1\n        elif moves[i] == "B":\n            result += "K"\n            i += 1\n        elif moves[i] == "L":\n            result += "H"\n            i += 1\n    print(result)\n\n\nmain()\n', '\n\ndef main():\n    moves = input()\n    result = ""\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += "C"\n            i += 3\n        elif moves[i] == "R":\n            result += "S"\n            i += 1\n        elif moves[i] == "B":\n            result += "K"\n            i += 1\n        elif moves[i] == "L":\n            result += "H"\n            i += 1\n    print(result)\n\nmain()\n', '\n\ndef main():\n    moves = input()\n    result = ""\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += "C"\n            i += 3\n        elif moves[i] == "R":\n            result += "S"\n            i += 1\n        elif moves[i] == "B":\n            result += "K"\n            i += 1\n        elif moves[i] == "L":\n            result += "H"\n            i += 1\n    print(result)\n\nmain()\n']
2022-04-16 01:38:30.718174 size on output set 2
2022-04-16 01:38:30.718185 num operations 1
2022-04-16 01:38:30.718191 size on input set 1
2022-04-16 01:38:37.303468 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    data = sys.stdin.readline().strip()[1:-1]\n    counter = 0\n    for i in range(len(data)):\n        if i == len(data) - 1:\n            counter += 2\n        elif i == len(data) - 2:\n            counter += 1\n        elif i == 0:\n            counter += 1\n        else:\n            if data[i] == data[i + 1] and data[i + 1] == data[i + 2]:\n                counter += 1\n            else:\n                counter += 2\n    print(counter)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    data = sys.stdin.readline().strip()\n    counter = 0\n    for i in range(len(data)):\n        if i == len(data)-1:\n            counter += 1\n        elif i == len(data)-2:\n            if data[i] == data[i+1]:\n                counter += 1\n            else:\n                counter += 2\n        else:\n            if data[i] == data[i+1] and data[i+1] == data[i+2]:\n                counter += 1\n            else:\n                counter += 2\n    print(counter)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    data = sys.stdin.readlines()\n    print(data)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650073110,
  "object": "edit"
}
2022-04-16 01:38:37.303660 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    data = sys.stdin.readline().strip()[1:-1]\n    counter = 0\n    for i in range(len(data)):\n        if i == len(data) - 1:\n            counter += 2\n        elif i == len(data) - 2:\n            counter += 1\n        elif i == 0:\n            counter += 1\n        else:\n            if data[i] == data[i + 1] and data[i + 1] == data[i + 2]:\n                counter += 1\n            else:\n                counter += 2\n    print(counter)\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    data = sys.stdin.readline().strip()\n    counter = 0\n    for i in range(len(data)):\n        if i == len(data)-1:\n            counter += 1\n        elif i == len(data)-2:\n            if data[i] == data[i+1]:\n                counter += 1\n            else:\n                counter += 2\n        else:\n            if data[i] == data[i+1] and data[i+1] == data[i+2]:\n                counter += 1\n            else:\n                counter += 2\n    print(counter)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    data = sys.stdin.readlines()\n    print(data)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:38:37.303691 size on output set 3
2022-04-16 01:38:37.303702 num operations 1
2022-04-16 01:38:37.303707 size on input set 1
2022-04-16 01:38:44.542972 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution for the file\n\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S\n                print('S', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n"
    },
    {
      "index": 1,
      "text": "\n# Solution\n\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S\n                print('S', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nline = sys.stdin.readline()\n\nstate = 0\n\nfor c in line:\n    if c == 'R' or c == 'B' or c == 'L':\n        if c == 'R':\n            if state == 0:\n                print('S', end='')\n                state = 1\n            else:\n                print('H', end='')\n                state = 0\n        elif c == 'B':\n            if state == 0:\n                print('K', end='')\n                state = 1\n            else:\n                print('H', end='')\n                state = 0\n        else:\n            print('H', end='')\n            state = 0\n    else:\n        print('Invalid move: ' + c)\n        exit(0)\n"
    }
  ],
  "created": 1650073117,
  "object": "edit"
}
2022-04-16 01:38:44.543538 fix syntax errors 3 ["\n\n# Solution for the file\n\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S\n                print('S', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n# Solution\n\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S\n                print('S', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n\nimport sys\n\nline = sys.stdin.readline()\n\nstate = 0\n\nfor c in line:\n    if c == 'R' or c == 'B' or c == 'L':\n        if c == 'R':\n            if state == 0:\n                print('S', end='')\n                state = 1\n            else:\n                print('H', end='')\n                state = 0\n        elif c == 'B':\n            if state == 0:\n                print('K', end='')\n                state = 1\n            else:\n                print('H', end='')\n                state = 0\n        else:\n            print('H', end='')\n            state = 0\n    else:\n        print('Invalid move: ' + c)\n        exit(0)\n"]
2022-04-16 01:38:44.543614 size on output set 3
2022-04-16 01:38:44.543625 num operations 1
2022-04-16 01:38:44.543632 size on input set 1
2022-04-16 01:39:21.687239 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    result = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            result.append('S')\n        elif moves[i] == 'B':\n            result.append('K')\n        else:\n            result.append('H')\n    for i in range(len(moves)-1):\n        if moves[i] == 'R' and moves[i+1] == 'L':\n            result[i] = 'K'\n            result[i+1] = 'S'\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport math\nfrom collections import deque\nfrom functools import reduce\nsys.setrecursionlimit(10**7)\nINTMAX = 9223372036854775807\nINTMIN = -9223372036854775808\n\ndef pow(x, y): return pow(x, y, M)\n\ndef pow(x, y, m):\n    if y == 0: return 1\n    a = pow(x, y//2, m)\n    a = a * a % m\n    if y % 2 == 1:\n        a = a * x % m\n    return a\n\ndef make_fact(n):\n    fact = [1, 1]\n    for i in range(2, n + 1):\n        fact.append((fact[-1] * i) % M)\n    return fact\n\ndef make_factinv(fact):\n    inv = [1] * len(fact)\n    inv[-1] = pow(fact[-1], M - 2, M)\n    for i in range(len(fact) - 2, -1, -1):\n        inv[i] = inv[i + 1] * (i + 1) % M\n    return inv\n\ndef nCr(n, r, fact, inv):\n    if n < r: return 0\n    return fact[n] * inv[r] * inv[n-r] % M\n\ndef nPr(n, r, fact, inv):\n    if n < r: return 0\n    return fact[n] * inv[n-r] % M\n\ndef nHr(n, r, fact, inv):\n    return nCr(n+r-1, r, fact, inv)\n\ndef gcd(x, y):\n    if y == 0: return x\n    return gcd(y, x % y)\n\ndef lcm(x, y): return x // gcd(x, y) * y\n\ndef comb(n, r): return nCr(n, r, fact, inv)\n\ndef perm(n, r): return nPr(n, r, fact, inv)\n\ndef homo(n, r): return nHr(n, r, fact, inv)\n\ndef main():\n    N,M=map(int,input().split())\n    A=list(map(int,input().split()))\n    A.sort()\n    A.reverse()\n    X=[]\n    for i in range(M):\n        X.append(int(input()))\n    X.sort()\n    X.reverse()\n    X.append(0)\n    X.append(0)\n    cnt=0\n    i=0\n    j=0\n    while i<N and j<M:\n        if X[j]<A[i]:\n            j+=1\n        else:\n            i+=1\n            j+=1\n            cnt+=1\n    print(cnt)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    result = deque()\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            result.append('S') # \u30b9\u30de\u30db\n        elif moves[i] == 'B':\n            result.append('K') # \u30ad\u30fc\u30dc\u30fc\u30c9\n        else:\n            result.append('H') # \u30de\u30a6\u30b9\n    for i in range(len(moves)-2):\n        if moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            result[i] = 'C' # \u30b9\u30de\u30db\n            result[i+1] = 'C' # \u30ad\u30fc\u30dc\u30fc\u30c9\n            result[i+2] = 'C' # \u30de\u30a6\u30b9\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650073124,
  "object": "edit"
}
2022-04-16 01:39:21.687518 fix syntax errors 3 ["\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    result = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            result.append('S')\n        elif moves[i] == 'B':\n            result.append('K')\n        else:\n            result.append('H')\n    for i in range(len(moves)-1):\n        if moves[i] == 'R' and moves[i+1] == 'L':\n            result[i] = 'K'\n            result[i+1] = 'S'\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\nfrom collections import deque\nfrom functools import reduce\nsys.setrecursionlimit(10**7)\nINTMAX = 9223372036854775807\nINTMIN = -9223372036854775808\n\ndef pow(x, y): return pow(x, y, M)\n\ndef pow(x, y, m):\n    if y == 0: return 1\n    a = pow(x, y//2, m)\n    a = a * a % m\n    if y % 2 == 1:\n        a = a * x % m\n    return a\n\ndef make_fact(n):\n    fact = [1, 1]\n    for i in range(2, n + 1):\n        fact.append((fact[-1] * i) % M)\n    return fact\n\ndef make_factinv(fact):\n    inv = [1] * len(fact)\n    inv[-1] = pow(fact[-1], M - 2, M)\n    for i in range(len(fact) - 2, -1, -1):\n        inv[i] = inv[i + 1] * (i + 1) % M\n    return inv\n\ndef nCr(n, r, fact, inv):\n    if n < r: return 0\n    return fact[n] * inv[r] * inv[n-r] % M\n\ndef nPr(n, r, fact, inv):\n    if n < r: return 0\n    return fact[n] * inv[n-r] % M\n\ndef nHr(n, r, fact, inv):\n    return nCr(n+r-1, r, fact, inv)\n\ndef gcd(x, y):\n    if y == 0: return x\n    return gcd(y, x % y)\n\ndef lcm(x, y): return x // gcd(x, y) * y\n\ndef comb(n, r): return nCr(n, r, fact, inv)\n\ndef perm(n, r): return nPr(n, r, fact, inv)\n\ndef homo(n, r): return nHr(n, r, fact, inv)\n\ndef main():\n    N,M=map(int,input().split())\n    A=list(map(int,input().split()))\n    A.sort()\n    A.reverse()\n    X=[]\n    for i in range(M):\n        X.append(int(input()))\n    X.sort()\n    X.reverse()\n    X.append(0)\n    X.append(0)\n    cnt=0\n    i=0\n    j=0\n    while i<N and j<M:\n        if X[j]<A[i]:\n            j+=1\n        else:\n            i+=1\n            j+=1\n            cnt+=1\n    print(cnt)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    result = deque()\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            result.append('S') # スマホ\n        elif moves[i] == 'B':\n            result.append('K') # キーボード\n        else:\n            result.append('H') # マウス\n    for i in range(len(moves)-2):\n        if moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            result[i] = 'C' # スマホ\n            result[i+1] = 'C' # キーボード\n            result[i+2] = 'C' # マウス\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:39:21.687656 size on output set 3
2022-04-16 01:39:21.687670 num operations 1
2022-04-16 01:39:21.687675 size on input set 1
2022-04-16 01:39:27.623113 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    combo_breaker_queue = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(combo_breaker_queue) == 3:\n            combo_breaker_queue.pop(0)\n        combo_breaker_queue.append(move)\n        if len(combo_breaker_queue) == 3 and \\\n           combo_breaker_queue[0] != combo_breaker_queue[1] and \\\n           combo_breaker_queue[1] != combo_breaker_queue[2] and \\\n           combo_breaker_queue[0] != combo_breaker_queue[2]:\n            mech_moves += 'C'\n    return mech_moves\n\n# This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n            move_counts['R'] += 1\n        elif move == 'B':\n            mech_moves += 'K'\n            move_counts['B'] += 1\n        elif move == 'L':\n            mech_moves += 'H'\n            move_counts['L'] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\nimport sys\n\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_queue = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(move_queue) == 3:\n            move_queue.pop(0)\n        move_queue.append(move)\n        if len(move_queue) == 3 and \\\n           move_queue[0] != move_queue[1] and \\\n           move_queue[1] != move_queue[2] and \\\n           move_queue[0] != move_queue[2]:\n            mech_moves += 'C'\n    return mech_moves\n\n#This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n            move_counts['R'] += 1\n        elif move == 'B':\n            mech_moves += 'K'\n            move_counts['B'] += 1\n        elif move == 'L':\n            mech_moves += 'H'\n            move_counts['L'] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\nimport sys\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    combo_breaker_queue = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(combo_breaker_queue) == 3:\n            combo_breaker_queue.pop(0)\n        combo_breaker_queue.append(move)\n        if len(combo_breaker_queue) == 3 and \\\n           combo_breaker_queue[0] != combo_breaker_queue[1] and \\\n           combo_breaker_queue[1] != combo_breaker_queue[2] and \\\n           combo_breaker_queue[0] != combo_breaker_queue[2]:\n            mech_moves += 'C'\n    return mech_moves\n\n# This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n            move_counts['R'] += 1\n        elif move == 'B':\n            mech_moves += 'K'\n            move_counts['B'] += 1\n        elif move == 'L':\n            mech_moves += 'H'\n            move_counts['L'] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\n\nimport sys\n\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650073161,
  "object": "edit"
}
2022-04-16 01:39:27.623416 fix syntax errors 3 ['\n\n# This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = ""\n    combo_breaker_queue = []\n    for move in monster_moves:\n        if move == \'R\':\n            mech_moves += \'S\'\n        elif move == \'B\':\n            mech_moves += \'K\'\n        elif move == \'L\':\n            mech_moves += \'H\'\n        if len(combo_breaker_queue) == 3:\n            combo_breaker_queue.pop(0)\n        combo_breaker_queue.append(move)\n        if len(combo_breaker_queue) == 3 and \\\n           combo_breaker_queue[0] != combo_breaker_queue[1] and \\\n           combo_breaker_queue[1] != combo_breaker_queue[2] and \\\n           combo_breaker_queue[0] != combo_breaker_queue[2]:\n            mech_moves += \'C\'\n    return mech_moves\n\n# This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = ""\n    move_counts = {\'R\': 0, \'B\': 0, \'L\': 0}\n    for move in monster_moves:\n        if move == \'R\':\n            mech_moves += \'S\'\n            move_counts[\'R\'] += 1\n        elif move == \'B\':\n            mech_moves += \'K\'\n            move_counts[\'B\'] += 1\n        elif move == \'L\':\n            mech_moves += \'H\'\n            move_counts[\'L\'] += 1\n        if move_counts[\'R\'] == 1 and \\\n           move_counts[\'B\'] == 1 and \\\n           move_counts[\'L\'] == 1:\n            mech_moves += \'C\'\n            move_counts = {\'R\': 0, \'B\': 0, \'L\': 0}\n    return mech_moves\n\nimport sys\n\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n#This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = ""\n    move_queue = []\n    for move in monster_moves:\n        if move == \'R\':\n            mech_moves += \'S\'\n        elif move == \'B\':\n            mech_moves += \'K\'\n        elif move == \'L\':\n            mech_moves += \'H\'\n        if len(move_queue) == 3:\n            move_queue.pop(0)\n        move_queue.append(move)\n        if len(move_queue) == 3 and \\\n           move_queue[0] != move_queue[1] and \\\n           move_queue[1] != move_queue[2] and \\\n           move_queue[0] != move_queue[2]:\n            mech_moves += \'C\'\n    return mech_moves\n\n#This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = ""\n    move_counts = {\'R\': 0, \'B\': 0, \'L\': 0}\n    for move in monster_moves:\n        if move == \'R\':\n            mech_moves += \'S\'\n            move_counts[\'R\'] += 1\n        elif move == \'B\':\n            mech_moves += \'K\'\n            move_counts[\'B\'] += 1\n        elif move == \'L\':\n            mech_moves += \'H\'\n            move_counts[\'L\'] += 1\n        if move_counts[\'R\'] == 1 and \\\n           move_counts[\'B\'] == 1 and \\\n           move_counts[\'L\'] == 1:\n            mech_moves += \'C\'\n            move_counts = {\'R\': 0, \'B\': 0, \'L\': 0}\n    return mech_moves\n\nimport sys\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\n# This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = ""\n    combo_breaker_queue = []\n    for move in monster_moves:\n        if move == \'R\':\n            mech_moves += \'S\'\n        elif move == \'B\':\n            mech_moves += \'K\'\n        elif move == \'L\':\n            mech_moves += \'H\'\n        if len(combo_breaker_queue) == 3:\n            combo_breaker_queue.pop(0)\n        combo_breaker_queue.append(move)\n        if len(combo_breaker_queue) == 3 and \\\n           combo_breaker_queue[0] != combo_breaker_queue[1] and \\\n           combo_breaker_queue[1] != combo_breaker_queue[2] and \\\n           combo_breaker_queue[0] != combo_breaker_queue[2]:\n            mech_moves += \'C\'\n    return mech_moves\n\n# This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = ""\n    move_counts = {\'R\': 0, \'B\': 0, \'L\': 0}\n    for move in monster_moves:\n        if move == \'R\':\n            mech_moves += \'S\'\n            move_counts[\'R\'] += 1\n        elif move == \'B\':\n            mech_moves += \'K\'\n            move_counts[\'B\'] += 1\n        elif move == \'L\':\n            mech_moves += \'H\'\n            move_counts[\'L\'] += 1\n        if move_counts[\'R\'] == 1 and \\\n           move_counts[\'B\'] == 1 and \\\n           move_counts[\'L\'] == 1:\n            mech_moves += \'C\'\n            move_counts = {\'R\': 0, \'B\': 0, \'L\': 0}\n    return mech_moves\n\n\nimport sys\n\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 01:39:27.623481 size on output set 3
2022-04-16 01:39:27.623494 num operations 1
2022-04-16 01:39:27.623500 size on input set 1
2022-04-16 01:39:36.731255 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip()\n    counter = ''\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R':\n            counter += 'S'\n        elif moves[i] == 'R' and moves[i+1] == 'B':\n            counter += 'S'\n        elif moves[i] == 'R' and moves[i+1] == 'L':\n            counter += 'S'\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip()\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'B':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'L':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip()\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650073167,
  "object": "edit"
}
2022-04-16 01:39:36.731637 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip()\n    counter = ''\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R':\n            counter += 'S'\n        elif moves[i] == 'R' and moves[i+1] == 'B':\n            counter += 'S'\n        elif moves[i] == 'R' and moves[i+1] == 'L':\n            counter += 'S'\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip()\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'B':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'L':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip()\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:39:36.731764 size on output set 3
2022-04-16 01:39:36.731776 num operations 1
2022-04-16 01:39:36.731782 size on input set 1
2022-04-16 01:39:41.348531 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = \"\"\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += \"C\"\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == \"R\":\n        return \"S\"\n    elif move == \"B\":\n        return \"K\"\n    else:\n        return \"H\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = \"\"\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += \"C\"\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == \"R\":\n        return \"S\"\n    elif move == \"B\":\n        return \"K\"\n    else:\n        return \"H\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = ''\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += 'C'\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == 'R':\n        return 'S'\n    elif move == 'B':\n        return 'K'\n    else:\n        return 'H'\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650073176,
  "object": "edit"
}
2022-04-16 01:39:41.348723 fix syntax errors 3 ['\nimport sys\nimport math\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = ""\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += "C"\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == "R":\n        return "S"\n    elif move == "B":\n        return "K"\n    else:\n        return "H"\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = ""\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += "C"\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == "R":\n        return "S"\n    elif move == "B":\n        return "K"\n    else:\n        return "H"\n\nif __name__ == "__main__":\n    main()\n', "\n\nimport sys\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = ''\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += 'C'\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == 'R':\n        return 'S'\n    elif move == 'B':\n        return 'K'\n    else:\n        return 'H'\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:39:41.348762 size on output set 3
