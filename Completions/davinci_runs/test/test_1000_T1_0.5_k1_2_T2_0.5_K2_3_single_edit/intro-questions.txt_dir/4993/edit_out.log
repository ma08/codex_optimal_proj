2022-04-16 03:35:36.805808 num operations 1
2022-04-16 03:35:36.805825 size on input set 1
2022-04-16 03:35:42.097864 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # n, m = map(int, input().split())\n    # parts = set()\n    # for i in range(m):\n    #     parts.add(input())\n    #     if len(parts) == n:\n    #         print(i+1)\n    #         return\n    # print('paradox avoided')\n    nums = [1,2,3,4]\n    for i in nums:\n        print(i)\n        nums.remove(i)\n        print(nums)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650080136,
  "object": "edit"
}
2022-04-16 03:35:42.098129 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # n, m = map(int, input().split())\n    # parts = set()\n    # for i in range(m):\n    #     parts.add(input())\n    #     if len(parts) == n:\n    #         print(i+1)\n    #         return\n    # print('paradox avoided')\n    nums = [1,2,3,4]\n    for i in nums:\n        print(i)\n        nums.remove(i)\n        print(nums)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:35:42.098161 size on output set 3
2022-04-16 03:35:42.098174 num operations 1
2022-04-16 03:35:42.098179 size on input set 1
2022-04-16 03:35:44.520094 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n\ndef get_file_info(file_name):\n    pass\n\n\n\ndef main():\n    file_name = sys.argv[1]\n    get_file_info(file_name)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(filename):\n    print(filename)\n\nif __name__ == \"__main__\":\n    main(filename)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    print(\"test\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080142,
  "object": "edit"
}
2022-04-16 03:35:44.520271 fix syntax errors 3 ['import sys\n\n\ndef get_file_info(file_name):\n    pass\n\n\n\ndef main():\n    file_name = sys.argv[1]\n    get_file_info(file_name)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main(filename):\n    print(filename)\n\nif __name__ == "__main__":\n    main(filename)\n', '\n\ndef main():\n    print("test")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:35:44.520292 size on output set 3
2022-04-16 03:35:44.520301 num operations 1
2022-04-16 03:35:44.520306 size on input set 1
2022-04-16 03:35:52.936192 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nsys.setrecursionlimit(10**6)\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    a_max = max(a)\n    b_max = max(b)\n\n    if a_max > b_max:\n        print(-1)\n        return 0\n    else:\n        a_max = max(a)\n        b_max = max(b)\n        for i, ai in enumerate(a):\n            for j, bj in enumerate(b):\n                if ai > bj:\n                    a.pop(i)\n                    b.pop(j)\n                    a.append(bj)\n                    b.append(ai)\n\n        a_max = max(a)\n        b_max = max(b)\n        if a_max > b_max:\n            print(-1)\n            return 0\n        else:\n            print(sum(b))\n            return 0\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650080144,
  "object": "edit"
}
2022-04-16 03:35:52.936377 fix syntax errors 3 ["import sys\nsys.setrecursionlimit(10**6)\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    a_max = max(a)\n    b_max = max(b)\n\n    if a_max > b_max:\n        print(-1)\n        return 0\n    else:\n        a_max = max(a)\n        b_max = max(b)\n        for i, ai in enumerate(a):\n            for j, bj in enumerate(b):\n                if ai > bj:\n                    a.pop(i)\n                    b.pop(j)\n                    a.append(bj)\n                    b.append(ai)\n\n        a_max = max(a)\n        b_max = max(b)\n        if a_max > b_max:\n            print(-1)\n            return 0\n        else:\n            print(sum(b))\n            return 0\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:35:52.936414 size on output set 2
2022-04-16 03:35:52.936424 num operations 1
2022-04-16 03:35:52.936429 size on input set 1
2022-04-16 03:35:58.105970 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\n\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    print(\"Hello\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip().split()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n"
    }
  ],
  "created": 1650080152,
  "object": "edit"
}
2022-04-16 03:35:58.106279 fix syntax errors 3 ['\n\n\n\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print("paradox avoided")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    print("Hello")\n\nmain()\n', '\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip().split()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print("paradox avoided")\n\nmain()\n']
2022-04-16 03:35:58.106311 size on output set 3
2022-04-16 03:35:58.106322 num operations 1
2022-04-16 03:35:58.106327 size on input set 1
2022-04-16 03:36:00.711817 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split()) #readline\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n    \nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080158,
  "object": "edit"
}
2022-04-16 03:36:00.712021 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    """\n    Main Function\n    """\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split()) #readline\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print("paradox avoided")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    """\n    Main Function\n    """\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print("paradox avoided")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    """\n    Main Function\n    """\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print("paradox avoided")\n    \nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:36:00.712071 size on output set 3
2022-04-16 03:36:00.712082 num operations 1
2022-04-16 03:36:00.712087 size on input set 1
2022-04-16 03:36:03.317508 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()  # type: Set[str]\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650080160,
  "object": "edit"
}
2022-04-16 03:36:03.317731 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print("paradox avoided")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()  # type: Set[str]\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print("paradox avoided")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print("paradox avoided")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 03:36:03.317773 size on output set 3
2022-04-16 03:36:03.317786 num operations 1
2022-04-16 03:36:03.317794 size on input set 1
2022-04-16 03:36:06.235616 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650080163,
  "object": "edit"
}
2022-04-16 03:36:06.235932 fix syntax errors 3 ["import sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:36:06.236009 size on output set 2
