["\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    #print(clerks)\n    clerks.sort()\n    #print(clerks)\n    max_val = max(clerks)\n    #print(max_val)\n    max_index = clerks.index(max_val)\n    #print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes + 1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 0\n    passes = 0\n    while any(desk > current_desk + 1 for desk in desks):\n        current_desk = max(desk for desk in desks if desk <= current_desk + 1)\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)} \n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes) \n    \nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks, 1)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i + 1)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline())\n    desks = [int(sys.stdin.readline()) for _ in range(k)]\n    current_desk = 1\n    passes = 0\n    for desk in desks:\n        if desk > current_desk:\n            passes = passes + (desk - current_desk)\n        current_desk = desk\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desks.sort()\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count) \n\nmain()\n", "\nimport fileinput\n\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\n\n\n\n    # input\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n\n    # process\n    pos = 0\n    passes = 0\n    while pos < K:\n        for i in range(pos, K):\n            if desks[i] == i+1:\n                pos += 1\n\n    # output\n        passes += 1\n\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1 : k + 1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i - 1] for i in range(1, k)))\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    clerks.sort()\n    max_val = max(clerks)\n    max_index = clerks.index(max_val)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d)))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, k)))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d)))) \n\nif __name__ == '__main__':\n    main()\n", "import fileinput\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n# Sort the desks in ascending order\ndesks.sort()\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 1\n    passes = 0\n    for i in range(K):\n        if desks[i] == pos:\n            pos += 1\n        else:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom math import ceil\n\n\ndef main():\n    T = int(sys.stdin.readline().strip())\n    for _ in range(T):\n        N, K = map(int, sys.stdin.readline().strip().split())\n        A = list(map(int, sys.stdin.readline().strip().split()))\n        print(solve(N, K, A))\n\n\ndef solve(N, K, A):\n    A.sort()\n    mid = ceil(len(A) / 2)\n    if K <= mid:\n        return A[mid-1]\n    else:\n        if A[mid] == A[mid-1]:\n            return -1\n        else:\n            return A[mid]\n\n\nmain()\n", "\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_desk = 1\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk > current_desk:\n\t\t\tpasses = passes + (desk - current_desk)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 0\n    passes = 0\n    while pos < K:\n        for i in range(pos, K):\n            if desks[i] == i+1:\n                pos += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes = 0\n    while any(desk > current_desk for desk in desks):\n        current_desk = max(desk for desk in desks if desk <= current_desk)\n        passes += 1\n    print(passes) \n\nif __name__ == '__main__':\n    main()\n", "#!/usr/local/bin/python3\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_desk = 1\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk > current_desk:\n\t\t\tpasses = passes + (desk - current_desk)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)} # O(n)\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i) # O(n)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desks.sort()\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count)\n\nmain()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes = 0\n    while any(desk > current_desk for desk in desks): \n        current_desk = max(desk for desk in desks if desk <= current_desk)\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K): \n        clerks.append(int(sys.stdin.readline().strip()))\n    #print(clerks)\n    clerks.sort()\n    #print(clerks)\n    max_val = max(clerks)\n    #print(max_val)\n    max_index = clerks.index(max_val)\n    #print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n"]