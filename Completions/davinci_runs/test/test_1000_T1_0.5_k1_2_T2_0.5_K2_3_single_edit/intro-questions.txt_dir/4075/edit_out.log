2022-04-15 22:55:18.664996 num operations 1
2022-04-15 22:55:18.665015 size on input set 1
2022-04-15 22:55:22.618798 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]  # m x n\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):  # m\n            c = 0\n            for k in range(n):  # n\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:  # m\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650063318,
  "object": "edit"
}
2022-04-15 22:55:22.619058 fix syntax errors 3 ["import sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]  # m x n\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):  # m\n            c = 0\n            for k in range(n):  # n\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:  # m\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-15 22:55:22.619101 size on output set 3
2022-04-15 22:55:22.619111 num operations 1
2022-04-15 22:55:22.619117 size on input set 1
2022-04-15 22:55:35.374215 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import deque\n\nN, M = map(int, input().split())\n\ndef bfs(n, m, graph, start, goal):\n    q = deque([start])\n    visited = [False] * (n+1)\n    visited[start] = True\n    while q:\n        v = q.popleft()\n        if v == goal:\n            return visited.count(True) - 1\n        for i in graph[v]:\n            if not visited[i]:\n                q.append(i)\n                visited[i] = True\n    return -1\n\ngraph = [[] for _ in range(N+1)]\nfor _ in range(M):\n    u, v = map(int, input().split())\n    graph[u].append(v)\n    graph[v].append(u)\n\nprint(bfs(N, M, graph, 1, N))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nk_list = [0] * M\ns_list = [[]] * M\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n"
    }
  ],
  "created": 1650063322,
  "object": "edit"
}
2022-04-15 22:55:35.374411 fix syntax errors 3 ['\n\n', '\n\nfrom collections import deque\n\nN, M = map(int, input().split())\n\ndef bfs(n, m, graph, start, goal):\n    q = deque([start])\n    visited = [False] * (n+1)\n    visited[start] = True\n    while q:\n        v = q.popleft()\n        if v == goal:\n            return visited.count(True) - 1\n        for i in graph[v]:\n            if not visited[i]:\n                q.append(i)\n                visited[i] = True\n    return -1\n\ngraph = [[] for _ in range(N+1)]\nfor _ in range(M):\n    u, v = map(int, input().split())\n    graph[u].append(v)\n    graph[v].append(u)\n\nprint(bfs(N, M, graph, 1, N))\n', '\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nk_list = [0] * M\ns_list = [[]] * M\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n']
2022-04-15 22:55:35.374533 size on output set 3
