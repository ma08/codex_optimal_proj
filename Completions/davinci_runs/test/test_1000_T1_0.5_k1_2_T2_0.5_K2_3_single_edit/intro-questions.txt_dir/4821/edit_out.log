2022-04-16 01:48:24.383069 num operations 1
2022-04-16 01:48:24.383084 size on input set 1
2022-04-16 01:48:28.866537 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    cards = [0] * 52\n    suits = {\"P\": 0, \"K\": 13, \"H\": 26, \"T\": 39}\n    suit_names = [\"P\", \"K\", \"H\", \"T\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    cards = [0] * 52\n    suits = {\"P\": 0, \"K\": 13, \"H\": 26, \"T\": 39}\n    suit_names = [\"P\", \"K\", \"H\", \"T\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=' ')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    cards = [0]*52\n    suits = {\"P\": 0, \"K\": 13, \"H\": 26, \"T\": 39}\n    suit_names = [\"P\", \"K\", \"H\", \"T\"] \n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3] \n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit]+13]), end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650073704,
  "object": "edit"
}
2022-04-16 01:48:28.866770 fix syntax errors 3 ['\n\ndef main():\n    cards = [0] * 52\n    suits = {"P": 0, "K": 13, "H": 26, "T": 39}\n    suit_names = ["P", "K", "H", "T"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print("GRESKA")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end="")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    cards = [0] * 52\n    suits = {"P": 0, "K": 13, "H": 26, "T": 39}\n    suit_names = ["P", "K", "H", "T"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print("GRESKA")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\' \')\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    cards = [0]*52\n    suits = {"P": 0, "K": 13, "H": 26, "T": 39}\n    suit_names = ["P", "K", "H", "T"] \n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3] \n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print("GRESKA")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit]+13]), end=" ")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:48:28.866808 size on output set 3
2022-04-16 01:48:28.866822 num operations 1
2022-04-16 01:48:28.866827 size on input set 1
2022-04-16 01:48:32.711246 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----import-----\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip()\n\n#-----P-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----import-----\nimport sys\n\n# -----main-----\ns = sys.stdin.readline().strip()\n\n# -----P-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n# -----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n# -----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n# -----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n"
    },
    {
      "index": 2,
      "text": "\n#-----import-----\nimport sys\n#-----main-----\ns = sys.stdin.readline().strip()\n#-----P-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n"
    }
  ],
  "created": 1650073708,
  "object": "edit"
}
2022-04-16 01:48:32.711589 fix syntax errors 3 ["\n#-----import-----\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip()\n\n#-----P-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\n# -----import-----\nimport sys\n\n# -----main-----\ns = sys.stdin.readline().strip()\n\n# -----P-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n# -----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n# -----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n# -----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n#-----import-----\nimport sys\n#-----main-----\ns = sys.stdin.readline().strip()\n#-----P-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n"]
2022-04-16 01:48:32.711656 size on output set 3
2022-04-16 01:48:32.711667 num operations 1
2022-04-16 01:48:32.711672 size on input set 1
2022-04-16 01:48:36.748709 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip().split()\n    if len(cards) % 2 != 0:\n        print('GRESKA')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 2):\n        suits[cards[i + 1]] += int(cards[i])\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('GRESKA')\n        return\n    suits = Counter()\n    for c in cards:\n        suits[c] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom collections import Counter, defaultdict\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('GRESKA')\n\n        return\n    numbers = defaultdict(list)\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        numbers[cards[i+1]].append(cards[i+2])\n\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650073712,
  "object": "edit"
}
2022-04-16 01:48:36.748914 fix syntax errors 3 ["\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip().split()\n    if len(cards) % 2 != 0:\n        print('GRESKA')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 2):\n        suits[cards[i + 1]] += int(cards[i])\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('GRESKA')\n        return\n    suits = Counter()\n    for c in cards:\n        suits[c] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom collections import Counter, defaultdict\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('GRESKA')\n\n        return\n    numbers = defaultdict(list)\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        numbers[cards[i+1]].append(cards[i+2])\n\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 01:48:36.749007 size on output set 3
2022-04-16 01:48:36.749019 num operations 1
2022-04-16 01:48:36.749024 size on input set 1
2022-04-16 01:48:43.660151 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nprint(input())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef razlika(brojevi):\n    for suit in brojevi:\n        if brojevi[suit] != 13:\n            print(13 - brojevi[suit], end=' ')\n    print()\n\ndef main():\n    brojevi = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    for i in input():\n        brojevi[i[0]] += 1\n    razlika(brojevi)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef check(labels):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}\n\n    for label in labels:\n        suit = label[0]\n        number = label[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA', end=' ')\n                return\n    print()\n\ncheck(input())\n"
    }
  ],
  "created": 1650073716,
  "object": "edit"
}
2022-04-16 01:48:43.660347 fix syntax errors 3 ['\n\nprint(input())\n', "\n\ndef razlika(brojevi):\n    for suit in brojevi:\n        if brojevi[suit] != 13:\n            print(13 - brojevi[suit], end=' ')\n    print()\n\ndef main():\n    brojevi = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    for i in input():\n        brojevi[i[0]] += 1\n    razlika(brojevi)\n\nmain()\n", "\n\ndef check(labels):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}\n\n    for label in labels:\n        suit = label[0]\n        number = label[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA', end=' ')\n                return\n    print()\n\ncheck(input())\n"]
2022-04-16 01:48:43.660376 size on output set 3
2022-04-16 01:48:43.660391 num operations 1
2022-04-16 01:48:43.660398 size on input set 1
2022-04-16 01:48:54.003220 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    cards = input()\n    cards = cards.split(\" \")\n    p = [0] * 13\n    k = [0] * 13\n    h = [0] * 13\n    t = [0] * 13\n    for card in cards:\n        if card[0] == \"P\":\n            p[int(card[1:]) - 1] += 1\n        elif card[0] == \"K\":\n            k[int(card[1:]) - 1] += 1\n        elif card[0] == \"H\":\n            h[int(card[1:]) - 1] += 1\n        elif card[0] == \"T\":\n            t[int(card[1:]) - 1] += 1\n    if max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1 or len(cards) != 52:\n        print(\"GRESKA\")\n    else:\n        print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    cards = input()\n    cards = cards.split(\" \")\n    p = [0] * 14\n    k = [0] * 14\n    h = [0] * 14\n    t = [0] * 14\n    for card in cards:\n        if card[0] == \"P\":\n            p[int(card[1:])] += 1\n        elif card[0] == \"K\":\n            k[int(card[1:])] += 1\n        elif card[0] == \"H\":\n            h[int(card[1:])] += 1\n        elif card[0] == \"T\":\n            t[int(card[1:])] += 1\n    if max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1:\n        print(\"GRESKA\")\n    else:\n        print(13 - sum(p[1:]), 13 - sum(k[1:]), 13 - sum(h[1:]), 13 - sum(t[1:]))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\ncards = input()\ncards = cards.split(\" \")\np = [0] * 13\nk = [0] * 13\nh = [0] * 13\nt = [0] * 13\nfor card in cards:\n    if card[0] == \"P\":\n        p[int(card[1:]) - 1] += 1\n    elif card[0] == \"K\":\n        k[int(card[1:]) - 1] += 1\n    elif card[0] == \"H\":\n        h[int(card[1:]) - 1] += 1\n    elif card[0] == \"T\":\n        t[int(card[1:]) - 1] += 1\nif max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1:\n    print(\"GRESKA\")\nelse:\n    print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))\n"
    }
  ],
  "created": 1650073723,
  "object": "edit"
}
2022-04-16 01:48:54.003440 fix syntax errors 3 ['\n\ndef main():\n    cards = input()\n    cards = cards.split(" ")\n    p = [0] * 13\n    k = [0] * 13\n    h = [0] * 13\n    t = [0] * 13\n    for card in cards:\n        if card[0] == "P":\n            p[int(card[1:]) - 1] += 1\n        elif card[0] == "K":\n            k[int(card[1:]) - 1] += 1\n        elif card[0] == "H":\n            h[int(card[1:]) - 1] += 1\n        elif card[0] == "T":\n            t[int(card[1:]) - 1] += 1\n    if max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1 or len(cards) != 52:\n        print("GRESKA")\n    else:\n        print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))\n\nmain()\n', '\n\ndef main():\n    cards = input()\n    cards = cards.split(" ")\n    p = [0] * 14\n    k = [0] * 14\n    h = [0] * 14\n    t = [0] * 14\n    for card in cards:\n        if card[0] == "P":\n            p[int(card[1:])] += 1\n        elif card[0] == "K":\n            k[int(card[1:])] += 1\n        elif card[0] == "H":\n            h[int(card[1:])] += 1\n        elif card[0] == "T":\n            t[int(card[1:])] += 1\n    if max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1:\n        print("GRESKA")\n    else:\n        print(13 - sum(p[1:]), 13 - sum(k[1:]), 13 - sum(h[1:]), 13 - sum(t[1:]))\n\nmain()\n', '\ncards = input()\ncards = cards.split(" ")\np = [0] * 13\nk = [0] * 13\nh = [0] * 13\nt = [0] * 13\nfor card in cards:\n    if card[0] == "P":\n        p[int(card[1:]) - 1] += 1\n    elif card[0] == "K":\n        k[int(card[1:]) - 1] += 1\n    elif card[0] == "H":\n        h[int(card[1:]) - 1] += 1\n    elif card[0] == "T":\n        t[int(card[1:]) - 1] += 1\nif max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1:\n    print("GRESKA")\nelse:\n    print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))\n']
2022-04-16 01:48:54.003480 size on output set 3
2022-04-16 01:48:54.003490 num operations 1
2022-04-16 01:48:54.003495 size on input set 1
2022-04-16 01:49:00.533140 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_missing_cards(s):\n    suit = {'P': [], 'K': [], 'H': [], 'T': []}\n    for i in range(0, len(s), 3):\n        suit[s[i]].append(s[i + 1:i + 3])\n    return ' '.join([str(13 - len(suit[x])) for x in suit.keys()])\nprint(get_missing_cards(input()))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s), 3):\n        cards[s[i]].append(s[i + 1:i + 3]) if s[i] in suits else None\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA'\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])\n\nprint(missing_cards(input()))\n"
    },
    {
      "index": 2,
      "text": "\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s) - 1, 3):\n        cards[s[i]].append(s[i + 1:i + 3])\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA'\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])\n\nprint(missing_cards(input()))\n"
    }
  ],
  "created": 1650073734,
  "object": "edit"
}
2022-04-16 01:49:00.533342 fix syntax errors 3 ["\ndef get_missing_cards(s):\n    suit = {'P': [], 'K': [], 'H': [], 'T': []}\n    for i in range(0, len(s), 3):\n        suit[s[i]].append(s[i + 1:i + 3])\n    return ' '.join([str(13 - len(suit[x])) for x in suit.keys()])\nprint(get_missing_cards(input()))\n", "\n\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s), 3):\n        cards[s[i]].append(s[i + 1:i + 3]) if s[i] in suits else None\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA'\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])\n\nprint(missing_cards(input()))\n", "\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s) - 1, 3):\n        cards[s[i]].append(s[i + 1:i + 3])\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA'\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])\n\nprint(missing_cards(input()))\n"]
2022-04-16 01:49:00.533477 size on output set 3
2022-04-16 01:49:00.533496 num operations 1
2022-04-16 01:49:00.533503 size on input set 1
2022-04-16 01:49:04.005739 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    print(\"GRESKA\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    s = input()\n    d = dict()\n    for i in range(len(s)):\n        if s[i] in d:\n            print(\"GRESKA\")\n            return\n        d[s[i]] = True\n    for i in range(4):\n        if chr(ord(\"P\") + i) not in d:\n            print(13, end=\" \")\n        else:\n            print(0, end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    s = input()\n    d = dict()\n    for i in range(len(s)):\n        if s[i] in d:\n            print(\"GRESKA\")\n            return\n        d[s[i]] = True\n    for i in range(4):\n        if chr(ord(\"P\") + i) not in d:\n            print(13, end=\" \")\n        else:\n            print(0, end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650073740,
  "object": "edit"
}
2022-04-16 01:49:04.005981 fix syntax errors 3 ['\n\ndef main():\n    print("GRESKA")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    s = input()\n    d = dict()\n    for i in range(len(s)):\n        if s[i] in d:\n            print("GRESKA")\n            return\n        d[s[i]] = True\n    for i in range(4):\n        if chr(ord("P") + i) not in d:\n            print(13, end=" ")\n        else:\n            print(0, end=" ")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    s = input()\n    d = dict()\n    for i in range(len(s)):\n        if s[i] in d:\n            print("GRESKA")\n            return\n        d[s[i]] = True\n    for i in range(4):\n        if chr(ord("P") + i) not in d:\n            print(13, end=" ")\n        else:\n            print(0, end=" ")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:49:04.006013 size on output set 2
2022-04-16 01:49:04.006025 num operations 1
2022-04-16 01:49:04.006031 size on input set 1
2022-04-16 01:49:07.526288 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1 \n\nprint(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4))))\n"
    },
    {
      "index": 1,
      "text": "\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\nprint(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4)))) \n"
    },
    {
      "index": 2,
      "text": "\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\n\n\n\n# s = input()\n# cards = [0]*52\n# for i in range(0, len(s), 3):\n#     cards[int(s[i+1:i+3])-1] += 1\n\n# print(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4))))\nprint(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4))))\n"
    }
  ],
  "created": 1650073744,
  "object": "edit"
}
2022-04-16 01:49:07.526503 fix syntax errors 3 ['\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1 \n\nprint("GRESKA" if any(cards[i] > 1 for i in range(52)) else "{} {} {} {}".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4))))\n', '\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\nprint("GRESKA" if any(cards[i] > 1 for i in range(52)) else "{} {} {} {}".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4)))) \n', '\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\n\n\n\n# s = input()\n# cards = [0]*52\n# for i in range(0, len(s), 3):\n#     cards[int(s[i+1:i+3])-1] += 1\n\n# print("GRESKA" if any(cards[i] > 1 for i in range(52)) else "{} {} {} {}".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4))))\nprint("GRESKA" if any(cards[i] > 1 for i in range(52)) else "{} {} {} {}".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4))))\n']
2022-04-16 01:49:07.526532 size on output set 3
