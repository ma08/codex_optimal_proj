["\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))[:n]\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i >= n:\n            print(\"NO\")\n            return\n        if bricks[i] <= w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print \"NO\"\n    else:\n        if h == 1:\n            print \"YES\"\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print \"YES\"\n            else:\n                print \"NO\"\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print(\"YES\")\n                return\n        if layer == 0:\n            print(\"NO\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n-1):\n        for j in range(w):\n            for k in range(bricks[i]):\n                layers[0][j] += 1\n                if j+k == w-1:\n                    break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w-1:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w-1:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w-1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n#\n# import sys\n#\n# def main():\n#     h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n#     bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n#     if sum(bricks) >= h * w:\n#         print 'YES'\n#     else:\n#         print 'NO'\n#\n# if __name__ == '__main__':\n#     main()\n", "\n\nimport sys\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[j]):\n                    layers[0][j] += 1\n                    if j+k == w-1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[j]):\n                            layers[i][j] += 1\n                            if j+k == w-1:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[j]):\n                            layers[i][j] += 1\n                            if j+k == w-1:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[j]):\n                            layers[i][j] += 1\n                            if j+k == w-1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h <= 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h > 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in raw_input().strip().split()]\n    bricks = [int(x) for x in raw_input().strip().split()]\n    if sum(bricks) >= h * w:\n        print 'yes'\n    else:\n        print 'no'\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        h, w, n = map(int, sys.stdin.readline().split())\n        bricks = list(map(int, sys.stdin.readline().split()))\n        bricks.sort(reverse=True)\n\n        if sum(bricks) < h*w:\n            print(\"NO\")\n            continue\n\n        i = 0\n        while h > 0:\n            if i == n:\n                print(\"NO\")\n                break\n            if bricks[i] < w:\n                print(\"NO\")\n                break\n            w -= 1\n            i += 1\n            if w == 0:\n                w = h-1\n                h -= 1\n        else:\n            print(\"YES\")\n            continue\n        break\n    else:\n        if h == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# n = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b: \"))\n#\n# s = 0\n#\n# for i in range(n):\n#     s += int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e: \"))\n#\n# if s % n == 0:\n#     print('YES')\n# else:\n#     print('NO')\n\nn = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b: \"))\n\ns = 0\n\nfor i in range(n):\n    s += int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e: \"))\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"]