2022-04-16 02:18:52.798226 num operations 1
2022-04-16 02:18:52.798244 size on input set 1
2022-04-16 02:19:00.848265 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import os\n\nimport sys\n\ndef main():\n    file = open(\"file.txt\", \"r\")\n    print(file.read())\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for _ in range(n):\n        grid.append(sys.stdin.readline().strip())[1:]\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650075532,
  "object": "edit"
}
2022-04-16 02:19:00.848484 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\nmain()\n", 'import os\n\nimport sys\n\ndef main():\n    file = open("file.txt", "r")\n    print(file.read())\n\nmain()\n', "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for _ in range(n):\n        grid.append(sys.stdin.readline().strip())[1:]\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 02:19:00.848514 size on output set 3
2022-04-16 02:19:00.848525 num operations 1
2022-04-16 02:19:00.848530 size on input set 1
2022-04-16 02:19:04.377371 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    print(input())\n    input = sys.stdin.readline\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves, end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for row in grid:\n        for i in range(M):\n            if row[i] == '_':\n                moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    i = sys.stdin.readline\n    N, M = map(int, i().split())\n    grid = []\n    for _ in range(N):\n        grid.append(i().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650075540,
  "object": "edit"
}
2022-04-16 02:19:04.377573 fix syntax errors 3 ['import sys\n\ndef main():\n    print(input())\n    input = sys.stdin.readline\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(moves, end="")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for row in grid:\n        for i in range(M):\n            if row[i] == \'_\':\n                moves += 1\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    i = sys.stdin.readline\n    N, M = map(int, i().split())\n    grid = []\n    for _ in range(N):\n        grid.append(i().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:19:04.377602 size on output set 3
2022-04-16 02:19:04.377612 num operations 1
2022-04-16 02:19:04.377617 size on input set 1
2022-04-16 02:19:06.652490 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = [0]*n\n    count = 0\n    for i in range(n):\n        l[i] = input()\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1650075544,
  "object": "edit"
}
2022-04-16 02:19:06.652672 fix syntax errors 3 ["\n\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = [0]*n\n    count = 0\n    for i in range(n):\n        l[i] = input()\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n", "\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\nmain()\n", "\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n"]
2022-04-16 02:19:06.652700 size on output set 3
2022-04-16 02:19:06.652710 num operations 1
2022-04-16 02:19:06.652715 size on input set 1
2022-04-16 02:19:11.149164 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import os\n\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\n\ndef find_max(d):\n    t = 0\n    for i in range(m):\n        if d[0][i] == '_':\n            t += 1\n    print(t)\n\n\nif __name__ == '__main__':\n    find_max(d)\n"
    },
    {
      "index": 1,
      "text": "\n\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ns = input()\nm = int(input())\n\nif m == 1:\n    print('YES')\n    exit()\n\nif n == m:\n    print('NO')\n    exit()\n\nif s[0] == s[-1]:\n    print('YES')\nelse:\n    print('NO')\n"
    }
  ],
  "created": 1650075546,
  "object": "edit"
}
2022-04-16 02:19:11.149343 fix syntax errors 3 ["import os\n\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\n\ndef find_max(d):\n    t = 0\n    for i in range(m):\n        if d[0][i] == '_':\n            t += 1\n    print(t)\n\n\nif __name__ == '__main__':\n    find_max(d)\n", "\n\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n", "\n\nn = int(input())\ns = input()\nm = int(input())\n\nif m == 1:\n    print('YES')\n    exit()\n\nif n == m:\n    print('NO')\n    exit()\n\nif s[0] == s[-1]:\n    print('YES')\nelse:\n    print('NO')\n"]
2022-04-16 02:19:11.149449 size on output set 3
2022-04-16 02:19:11.149460 num operations 1
2022-04-16 02:19:11.149466 size on input set 1
2022-04-16 02:19:14.438388 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Written by: Eric Wright, ewright3\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(N):\n        grid.append(sys.stdin.readline())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    sys.stdout.write(str(count))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(N):\n        grid.append(sys.stdin.readline())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650075551,
  "object": "edit"
}
2022-04-16 02:19:14.438580 fix syntax errors 3 ['\n\n# Written by: Eric Wright, ewright3\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == \'$\':\n            count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(N):\n        grid.append(sys.stdin.readline())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == \'$\':\n            count += 1\n    sys.stdout.write(str(count))\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(N):\n        grid.append(sys.stdin.readline())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == \'$\':\n            count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 02:19:14.438618 size on output set 3
2022-04-16 02:19:14.438628 num operations 1
2022-04-16 02:19:14.438633 size on input set 1
2022-04-16 02:19:19.913741 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# n, m = map(int, input().split())\n#\n# dance = []\n# for _ in range(n):\n#     dance.append(input())\n#\n# count = 0\n# for i in range(m):\n#     if dance[0][i] == '$':\n#         count += 1\n#         while i < m and dance[0][i] == '$':\n#             i += 1\n#\n# print(count)\n"
    },
    {
      "index": 2,
      "text": "n, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\nprint(count)\n"
    }
  ],
  "created": 1650075554,
  "object": "edit"
}
2022-04-16 02:19:19.913946 fix syntax errors 3 ["\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n", "\n#\n# n, m = map(int, input().split())\n#\n# dance = []\n# for _ in range(n):\n#     dance.append(input())\n#\n# count = 0\n# for i in range(m):\n#     if dance[0][i] == '$':\n#         count += 1\n#         while i < m and dance[0][i] == '$':\n#             i += 1\n#\n# print(count)\n", "n, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\nprint(count)\n"]
2022-04-16 02:19:19.913976 size on output set 3
2022-04-16 02:19:19.913987 num operations 1
2022-04-16 02:19:19.913993 size on input set 1
2022-04-16 02:19:22.804560 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\nprint(grid)\n"
    },
    {
      "index": 1,
      "text": "\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\nfor i in range(1, 10):\n    print(i)\n"
    }
  ],
  "created": 1650075559,
  "object": "edit"
}
2022-04-16 02:19:22.804781 fix syntax errors 3 ['\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\nprint(grid)\n', "\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n", '\nfor i in range(1, 10):\n    print(i)\n']
2022-04-16 02:19:22.804810 size on output set 3
