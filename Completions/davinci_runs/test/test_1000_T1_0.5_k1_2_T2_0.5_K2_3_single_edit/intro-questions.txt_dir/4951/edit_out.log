2022-04-16 03:04:02.046947 num operations 1
2022-04-16 03:04:02.046965 size on input set 1
2022-04-16 03:04:08.408507 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for i, line in enumerate(proof):\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return i+1\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine the first invalid line\n    line_number = is_valid(proof)\n\n    if line_number == -1:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        print(line_number)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \"\":\n                invalid = False\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n                        invalid = True\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                if invalid:\n                    break\n\n            # Add the current assumptions to the set of previous conclusions\n            prev_conclusions.update(curr_assumptions)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        assumptions, conclusion = line.split(\" -> \")\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the proof\n    proof = [input() for _ in range(int(input()))]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            assumptions, conclusion = line.split(\" -> \")\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650078242,
  "object": "edit"
}
2022-04-16 03:04:08.408751 fix syntax errors 3 ['\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for i, line in enumerate(proof):\n        # Split the line into assumptions and conclusion\n        split = line.split(" -> ")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return i+1\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine the first invalid line\n    line_number = is_valid(proof)\n\n    if line_number == -1:\n        print("correct")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        print(line_number)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(" -> ")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(" -> ")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == "":\n                invalid = False\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n                        invalid = True\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                if invalid:\n                    break\n\n            # Add the current assumptions to the set of previous conclusions\n            prev_conclusions.update(curr_assumptions)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        assumptions, conclusion = line.split(" -> ")\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the proof\n    proof = [input() for _ in range(int(input()))]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            assumptions, conclusion = line.split(" -> ")\n\n            if assumptions == "":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:04:08.408958 size on output set 3
2022-04-16 03:04:08.408971 num operations 1
2022-04-16 03:04:08.408976 size on input set 1
2022-04-16 03:04:10.522342 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1, '|-', line[1].strip()\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1, 'incorrect'\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    },
    {
      "index": 2,
      "text": "\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(proof) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    }
  ],
  "created": 1650078248,
  "object": "edit"
}
2022-04-16 03:04:10.522612 fix syntax errors 3 ["\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1, '|-', line[1].strip()\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1, 'incorrect'\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(proof) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"]
2022-04-16 03:04:10.522651 size on output set 3
2022-04-16 03:04:10.522664 num operations 1
2022-04-16 03:04:10.522670 size on input set 1
2022-04-16 03:04:13.073143 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i] and assumption != \"\":\n                    print(i+1)\n                    return\n        else:\n            print(i+1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650078250,
  "object": "edit"
}
2022-04-16 03:04:13.073369 fix syntax errors 3 ['\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i] and assumption != "":\n                    print(i+1)\n                    return\n        else:\n            print(i+1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:04:13.073473 size on output set 2
2022-04-16 03:04:13.073484 num operations 1
2022-04-16 03:04:13.073490 size on input set 1
2022-04-16 03:04:15.653179 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] not in lines[i][:-2]:\n                print(i + 1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n                return\n    print(\"CORRECT\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650078253,
  "object": "edit"
}
2022-04-16 03:04:15.653363 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] not in lines[i][:-2]:\n                print(i + 1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n                return\n    print("CORRECT")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:04:15.653394 size on output set 3
2022-04-16 03:04:15.653403 num operations 1
2022-04-16 03:04:15.653408 size on input set 1
2022-04-16 03:04:18.457591 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]] and line[0] not in [j[0] for j in lines[i+1:]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"
    }
  ],
  "created": 1650078255,
  "object": "edit"
}
2022-04-16 03:04:18.457782 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]] and line[0] not in [j[0] for j in lines[i+1:]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n", "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"]
2022-04-16 03:04:18.457884 size on output set 3
2022-04-16 03:04:18.457907 num operations 1
2022-04-16 03:04:18.457912 size on input set 1
2022-04-16 03:04:21.244435 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [tuple(line) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == tuple():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(set(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == set():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650078258,
  "object": "edit"
}
2022-04-16 03:04:21.244614 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [tuple(line) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == tuple():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(set(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == set():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:04:21.244721 size on output set 3
2022-04-16 03:04:21.244732 num operations 1
2022-04-16 03:04:21.244738 size on input set 1
2022-04-16 03:04:23.063816 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    #print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    }
  ],
  "created": 1650078261,
  "object": "edit"
}
2022-04-16 03:04:23.064022 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    #print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n']
2022-04-16 03:04:23.064057 size on output set 2
2022-04-16 03:04:23.064068 num operations 1
2022-04-16 03:04:23.064073 size on input set 1
2022-04-16 03:04:25.931317 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split('->')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(' '):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split('->')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(','):\n                if a not in axioms:\n                    print(i+1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split('->')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(','):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650078263,
  "object": "edit"
}
2022-04-16 03:04:25.931575 fix syntax errors 3 ["\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split('->')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(' '):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split('->')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(','):\n                if a not in axioms:\n                    print(i+1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split('->')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(','):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:04:25.931627 size on output set 3
