2022-04-16 00:22:24.844663 num operations 1
2022-04-16 00:22:24.844681 size on input set 1
2022-04-16 00:22:27.381578 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\nX = list(map(int, input().split()))\n\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\n\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\nX = list(map(int, input().split()))\n\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\nX = list(map(int, input().split()))\n\n\ndef median(li):\n    li.sort()\n    return li[len(li)//2]\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n"
    }
  ],
  "created": 1650068544,
  "object": "edit"
}
2022-04-16 00:22:27.381801 fix syntax errors 3 ['\nN = int(input())\n\nX = list(map(int, input().split()))\n\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\n\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n', '\nN = int(input())\nX = list(map(int, input().split()))\n\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n', '\nN = int(input())\nX = list(map(int, input().split()))\n\n\ndef median(li):\n    li.sort()\n    return li[len(li)//2]\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n']
2022-04-16 00:22:27.381825 size on output set 3
2022-04-16 00:22:27.381835 num operations 1
2022-04-16 00:22:27.381840 size on input set 1
2022-04-16 00:22:33.323686 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high) or (len(heap_low) == len(heap_high) and l % 2 == 0):\n        return -heap_low[0]\n    else:\n        return heap_high[0]\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(i, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(i, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2.0\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650068547,
  "object": "edit"
}
2022-04-16 00:22:33.323889 fix syntax errors 3 ['\nimport heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high) or (len(heap_low) == len(heap_high) and l % 2 == 0):\n        return -heap_low[0]\n    else:\n        return heap_high[0]\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(i, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(i, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == "__main__":\n    main()\n', 'import heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2.0\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == "__main__":\n    main()\n', 'import heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 00:22:33.324037 size on output set 3
