2022-04-15 22:51:55.288362 num operations 1
2022-04-15 22:51:55.288380 size on input set 1
2022-04-15 22:51:57.576540 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = a[0]\nfor i in range(1, n):\n    ans = lcm(ans, a[i])\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = a[0]\nfor i in range(1, n):\n    ans = lcm(ans, a[i])\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\n    '''\n    \u6700\u5927\u516c\u7d04\u6570\n    '''\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n    '''\n    \u6700\u5c0f\u516c\u500d\u6570\n    '''\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = a[0]\nfor i in range(1, n):\n    ans = lcm(ans, a[i])\n\nprint(ans)\n"
    }
  ],
  "created": 1650063115,
  "object": "edit"
}
2022-04-15 22:51:57.576768 fix syntax errors 3 ['\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = a[0]\nfor i in range(1, n):\n    ans = lcm(ans, a[i])\n\nprint(ans)\n', '\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = a[0]\nfor i in range(1, n):\n    ans = lcm(ans, a[i])\n\nprint(ans)\n', "\n\n    '''\n    最大公約数\n    '''\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n    '''\n    最小公倍数\n    '''\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = a[0]\nfor i in range(1, n):\n    ans = lcm(ans, a[i])\n\nprint(ans)\n"]
2022-04-15 22:51:57.576811 size on output set 3
2022-04-15 22:51:57.576821 num operations 1
2022-04-15 22:51:57.576826 size on input set 1
2022-04-15 22:52:34.552451 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution\n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n\nn = int(input())\na = list(map(int,input().split()))\n\ng = a[0]\nfor i in range(1,n):\n    g = gcd(g,a[i])\n\n\nprint(g)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# Solution\n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n\nn = int(input())\na = list(map(int,input().split()))\n\ng = a[0]\nfor i in range(1,n):\n    g = gcd(g,a[i])\n\nprint(g)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\n# Problem\n\n# A prime is a positive integer X that has exactly two distinct divisors: 1 and X.\n# The first few prime integers are 2, 3, 5, 7, 11 and 13.\n\n# A semiprime is a natural number that is the product of two (not necessarily distinct) prime numbers.\n# The first few semiprimes are 4, 6, 9, 10, 14, 15, 21, 22, 25, 26.\n\n# You are given two non-empty arrays P and Q, each consisting of M integers.\n# These arrays represent queries about the number of semiprimes within specified ranges.\n\n# Query K requires you to find the number of semiprimes within the range (P[K], Q[K]), where 1 \u2264 P[K] \u2264 Q[K] \u2264 N.\n\n# For example, consider an integer N = 26 and arrays P, Q such that:\n\n#     P[0] = 1    Q[0] = 26\n#     P[1] = 4    Q[1] = 10\n#     P[2] = 16   Q[2] = 20\n# The number of semiprimes within each of these ranges is as follows:\n\n# (1, 26) is 10,\n# (4, 10) is 4,\n# (16, 20) is 0.\n# Write a function:\n\n# def solution(N, P, Q)\n\n# that, given an integer N and two non-empty arrays P and Q consisting of M integers,\n# returns an array consisting of M elements specifying the consecutive answers to all the queries.\n\n# For example, given an integer N = 26 and arrays P, Q such that:\n\n#     P[0] = 1    Q[0] = 26\n#     P[1] = 4    Q[1] = 10\n#     P[2] = 16   Q[2] = 20\n# the function should return the values [10, 4, 0], as explained above.\n\n# Write an efficient algorithm for the following assumptions:\n\n# N is an integer within the range [1..50,000];\n# M is an integer within the range [1..30,000];\n# each element of arrays P, Q is an integer within the range [1..N];\n# P[i] \u2264 Q[i].\n\n\n\n# Solution\n\ndef solution(N, P, Q):\n\n    # write your code in Python 3.6\n    # a semiprime is a product of two primes, so we can find the semiprimes\n    # by finding the primes, then finding the products of the primes\n\n    # first find the primes\n    primes = [True] * (N+1)\n    primes[0] = False\n    primes[1] = False\n\n    for i in range(2,N+1):\n        if primes[i]:\n            for j in range(i*i,N+1,i):\n                primes[j] = False\n\n    # now find the semiprimes\n    semiprimes = [False] * (N+1)\n    for i in range(1,N+1):\n        for j in range(i,N+1):\n            if primes[i] and primes[j] and i*j <= N:\n                semiprimes[i*j] = True\n\n    # now for each query, count the number of semiprimes in the range\n    M = len(P)\n    answers = [0] * M\n    for i in range(M):\n        for j in range(P[i],Q[i]+1):\n            if semiprimes[j]:\n                answers[i] += 1\n\n    return answers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    }
  ],
  "created": 1650063117,
  "object": "edit"
}
2022-04-15 22:52:34.552641 fix syntax errors 3 ['\n# Solution\n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n\nn = int(input())\na = list(map(int,input().split()))\n\ng = a[0]\nfor i in range(1,n):\n    g = gcd(g,a[i])\n\n\nprint(g)\n', '\n#\n# Solution\n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n\nn = int(input())\na = list(map(int,input().split()))\n\ng = a[0]\nfor i in range(1,n):\n    g = gcd(g,a[i])\n\nprint(g)\n', '#!/usr/bin/python3\n\n# Problem\n\n# A prime is a positive integer X that has exactly two distinct divisors: 1 and X.\n# The first few prime integers are 2, 3, 5, 7, 11 and 13.\n\n# A semiprime is a natural number that is the product of two (not necessarily distinct) prime numbers.\n# The first few semiprimes are 4, 6, 9, 10, 14, 15, 21, 22, 25, 26.\n\n# You are given two non-empty arrays P and Q, each consisting of M integers.\n# These arrays represent queries about the number of semiprimes within specified ranges.\n\n# Query K requires you to find the number of semiprimes within the range (P[K], Q[K]), where 1 ≤ P[K] ≤ Q[K] ≤ N.\n\n# For example, consider an integer N = 26 and arrays P, Q such that:\n\n#     P[0] = 1    Q[0] = 26\n#     P[1] = 4    Q[1] = 10\n#     P[2] = 16   Q[2] = 20\n# The number of semiprimes within each of these ranges is as follows:\n\n# (1, 26) is 10,\n# (4, 10) is 4,\n# (16, 20) is 0.\n# Write a function:\n\n# def solution(N, P, Q)\n\n# that, given an integer N and two non-empty arrays P and Q consisting of M integers,\n# returns an array consisting of M elements specifying the consecutive answers to all the queries.\n\n# For example, given an integer N = 26 and arrays P, Q such that:\n\n#     P[0] = 1    Q[0] = 26\n#     P[1] = 4    Q[1] = 10\n#     P[2] = 16   Q[2] = 20\n# the function should return the values [10, 4, 0], as explained above.\n\n# Write an efficient algorithm for the following assumptions:\n\n# N is an integer within the range [1..50,000];\n# M is an integer within the range [1..30,000];\n# each element of arrays P, Q is an integer within the range [1..N];\n# P[i] ≤ Q[i].\n\n\n\n# Solution\n\ndef solution(N, P, Q):\n\n    # write your code in Python 3.6\n    # a semiprime is a product of two primes, so we can find the semiprimes\n    # by finding the primes, then finding the products of the primes\n\n    # first find the primes\n    primes = [True] * (N+1)\n    primes[0] = False\n    primes[1] = False\n\n    for i in range(2,N+1):\n        if primes[i]:\n            for j in range(i*i,N+1,i):\n                primes[j] = False\n\n    # now find the semiprimes\n    semiprimes = [False] * (N+1)\n    for i in range(1,N+1):\n        for j in range(i,N+1):\n            if primes[i] and primes[j] and i*j <= N:\n                semiprimes[i*j] = True\n\n    # now for each query, count the number of semiprimes in the range\n    M = len(P)\n    answers = [0] * M\n    for i in range(M):\n        for j in range(P[i],Q[i]+1):\n            if semiprimes[j]:\n                answers[i] += 1\n\n    return answers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n']
2022-04-15 22:52:34.552790 size on output set 3
