["\n\ns = input()\n\n# The smallest k for which s is k-periodic is the largest integer k' such that s[i] == s[i+k'] for all i\n# in the range [0, len(s)-k'].\n\n# To find this k', we can use a sliding window of size k' and check that all the characters are the same.\n\n# If a window of size k' satisfies the property, then any window of size > k' will also satisfy the property.\n# Thus, we can use binary search to find the largest k' that satisfies the property.\n\ndef is_periodic(k):\n    for i in range(0, len(s)-k):\n        if s[i] != s[i+k]:\n            return False\n    return True\n\nlo = 1\nhi = len(s)\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    if is_periodic(mid):\n        lo = mid + 1\n    else:\n        hi = mid\nprint(lo-1)", "\n\ns = input()\n\ndef is_k_periodic(s,k):\n    if len(s)%k != 0:\n        return False\n    else:\n        for i in range(1,len(s)//k):\n            if s[i*k-1] != s[i*k]:\n                return False\n        return True\n\nk = 1\nwhile not is_k_periodic(s,k):\n    k += 1\nprint(k)", "\n\ndef main():\n    s = input()\n    k = 1\n\n    while k <= len(s):\n        if len(s) % k == 0:\n            i = k\n            while i < len(s):\n                if s[i] != s[i-k]:\n                    break\n                i += 1\n            if i == len(s):\n                break\n        k += 1\n    print(k)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef k_periodic(s):\n    k = 1\n    while k < len(s):\n        if s[:-k] == s[k:]:\n            return k\n        k += 1\n    return len(s)\n\nprint(k_periodic(input()))", "\n\ndef kPeriodicString(s):\n    if len(s) == 1:\n        return 1\n    for k in range(1, int(len(s)/2) + 1):\n        if s[:k] == s[k:k*2]:\n            return k\n    return len(s)\n\nprint(kPeriodicString(input()))", "\n\ndef main():\n    s = input()\n    k = 1\n    while k <= len(s):\n        if s[:k] * (len(s) // k) == s:\n            print(k)\n            break\n        k += 1\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef get_k(s):\n    for k in range(1, len(s) + 1):\n        if len(s) % k == 0:\n            for i in range(k, len(s), k):\n                if s[i:i+k] != s[i-k:i][-1] + s[i-k:i][:-1]:\n                    break\n            else:\n                return k\n    return len(s)\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(get_k(s))\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    string = sys.stdin.readline().strip()\n    for i in range(1, len(string)):\n        if string[:i] * (len(string) // i) == string:\n            print(i)\n            break\n\nmain()"]