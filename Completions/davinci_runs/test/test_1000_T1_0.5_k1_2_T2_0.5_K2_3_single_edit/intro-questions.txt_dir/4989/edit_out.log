2022-04-16 03:33:05.484030 num operations 1
2022-04-16 03:33:05.484049 size on input set 1
2022-04-16 03:33:07.408765 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#https://atcoder.jp/contests/abc049/tasks/arc065_a\n\nn = int(input())\na = [int(i) for i in input().split()]\n\na.sort()\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\n\nprint(Alice, Bob)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\na = [int(i) for i in input().split()]\n\na.sort()\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\n\nprint(Alice, Bob)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = [int(i) for i in input().split()]\n\na.sort()\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\n\nprint(Alice, Bob)\n"
    }
  ],
  "created": 1650079985,
  "object": "edit"
}
2022-04-16 03:33:07.409019 fix syntax errors 3 ['#https://atcoder.jp/contests/abc049/tasks/arc065_a\n\nn = int(input())\na = [int(i) for i in input().split()]\n\na.sort()\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\n\nprint(Alice, Bob)\n', '\n\nn = int(input())\n\na = [int(i) for i in input().split()]\n\na.sort()\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\n\nprint(Alice, Bob)\n', '\nn = int(input())\na = [int(i) for i in input().split()]\n\na.sort()\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\n\nprint(Alice, Bob)\n']
2022-04-16 03:33:07.409044 size on output set 3
2022-04-16 03:33:07.409054 num operations 1
2022-04-16 03:33:07.409060 size on input set 1
2022-04-16 03:33:21.117428 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece and the index of the chosen piece.\n    max_piece = pieces[0]\n    max_piece_index = 0\n\n    # Loop through all the pieces.\n    for i in range(len(pieces)):\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if pieces[i] > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = pieces[i]\n            max_piece_index = i\n\n    # Return the maximum value of the chosen piece.\n    return max_piece_index\n\n# Call the main function.\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    print(\"Hello World!\")\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece as 0.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n"
    }
  ],
  "created": 1650079987,
  "object": "edit"
}
2022-04-16 03:33:21.117695 fix syntax errors 3 ['\n\ndef main():\n    """\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice\'s pieces and the total value of Bob\'s pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    """\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice\'s pieces and the total value of Bob\'s pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice\'s turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice\'s piece to the total value of Alice\'s pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob\'s turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob\'s piece to the total value of Bob\'s pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice\'s pieces and the total value of Bob\'s pieces.\n    print("{} {}".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    """\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    """\n    # Initialize the maximum value of the chosen piece and the index of the chosen piece.\n    max_piece = pieces[0]\n    max_piece_index = 0\n\n    # Loop through all the pieces.\n    for i in range(len(pieces)):\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if pieces[i] > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = pieces[i]\n            max_piece_index = i\n\n    # Return the maximum value of the chosen piece.\n    return max_piece_index\n\n# Call the main function.\nmain()\n', '\n\ndef main():\n    print("Hello World!")\n', '\n\ndef main():\n    """\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice\'s pieces and the total value of Bob\'s pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    """\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice\'s pieces and the total value of Bob\'s pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice\'s turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice\'s piece to the total value of Alice\'s pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob\'s turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob\'s piece to the total value of Bob\'s pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice\'s pieces and the total value of Bob\'s pieces.\n    print("{} {}".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    """\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    """\n    # Initialize the maximum value of the chosen piece as 0.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n']
2022-04-16 03:33:21.117884 size on output set 3
2022-04-16 03:33:21.117902 num operations 1
2022-04-16 03:33:21.117908 size on input set 1
2022-04-16 03:33:27.932610 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice - bob)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = sorted(list(map(int, input().split())))[::-1]\n    print(sum(a[0::2]), sum(a[1::2]))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice - bob)\n\nmain()\n"
    }
  ],
  "created": 1650080001,
  "object": "edit"
}
2022-04-16 03:33:27.932802 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice - bob)\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = sorted(list(map(int, input().split())))[::-1]\n    print(sum(a[0::2]), sum(a[1::2]))\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice - bob)\n\nmain()\n']
2022-04-16 03:33:27.932826 size on output set 3
2022-04-16 03:33:27.932837 num operations 1
2022-04-16 03:33:27.932874 size on input set 1
2022-04-16 03:33:32.432653 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\npieces = [int(x) for x in input().split()]\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nn = int(input())\npieces = [int(x) for x in sys.stdin.readline().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\npieces = [int(x) for x in input().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n"
    }
  ],
  "created": 1650080007,
  "object": "edit"
}
2022-04-16 03:33:32.432902 fix syntax errors 3 ['\nn = int(input())\npieces = [int(x) for x in input().split()]\n', 'import sys\n\nn = int(input())\npieces = [int(x) for x in sys.stdin.readline().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n', '\nn = int(input())\npieces = [int(x) for x in input().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n']
2022-04-16 03:33:32.432930 size on output set 3
2022-04-16 03:33:32.432943 num operations 1
2022-04-16 03:33:32.432949 size on input set 1
2022-04-16 03:33:33.871597 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n"
    },
    {
      "index": 1,
      "text": "#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n"
    },
    {
      "index": 2,
      "text": "\n#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n"
    }
  ],
  "created": 1650080012,
  "object": "edit"
}
2022-04-16 03:33:33.871774 fix syntax errors 3 ['\n#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n', '#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n', '\n#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n']
2022-04-16 03:33:33.871797 size on output set 2
2022-04-16 03:33:33.871806 num operations 1
2022-04-16 03:33:33.871811 size on input set 1
2022-04-16 03:33:36.538326 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice - bob)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice - bob)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()[:n]]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080013,
  "object": "edit"
}
2022-04-16 03:33:36.538516 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice - bob)\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice - bob)\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()[:n]]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice, bob)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:33:36.538618 size on output set 3
2022-04-16 03:33:36.538629 num operations 1
2022-04-16 03:33:36.538634 size on input set 1
2022-04-16 03:33:45.530387 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"Main function\"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"Returns the maximum sum of integers that can be obtained by playing optimally\"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input()) # number of pieces\n    pieces = [int(x) for x in input().split()] # pieces\n    print(max_sum(pieces)) # print maximum sum\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n"
    }
  ],
  "created": 1650080016,
  "object": "edit"
}
2022-04-16 03:33:45.530853 fix syntax errors 3 ['\n\ndef main():\n    """Main function"""\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    """Returns the maximum sum of integers that can be obtained by playing optimally"""\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    """\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    """\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    """\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    """\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    """\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    """\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2))\n\nmain()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    number_of_pieces = int(input()) # number of pieces\n    pieces = [int(x) for x in input().split()] # pieces\n    print(max_sum(pieces)) # print maximum sum\n\ndef max_sum(pieces):\n    """\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    """\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    """\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    """\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n']
2022-04-16 03:33:45.530927 size on output set 3
2022-04-16 03:33:45.530939 num operations 1
2022-04-16 03:33:45.530945 size on input set 1
2022-04-16 03:33:53.625658 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# import sys\n#\n# def main(pname):\n#     sys.stdin = open(pname + '.in', 'r')\n#     sys.stdout = open(pname + '.out', 'w')\n#\n#     n = int(input())\n#     a = sorted(list(map(int, input().split())))\n#     a.reverse()\n#     alice = 0\n#     bob = 0\n#     for i in range(len(a)):\n#         if i % 2 == 0:\n#             alice += a[i]\n#         else:\n#             bob += a[i]\n#     print(alice, bob)\n#\n# if __name__ == \"__main__\":\n#     main('broken')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    input()\n    a = sorted(list(map(int, input().split())))\n    alice = 0\n    bob = 0\n    while len(a) > 0:\n        alice += a.pop()\n        if len(a) > 0:\n            bob += a.pop()\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('broken')\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('file')\n"
    }
  ],
  "created": 1650080025,
  "object": "edit"
}
2022-04-16 03:33:53.625855 fix syntax errors 3 ['\n#\n# import sys\n#\n# def main(pname):\n#     sys.stdin = open(pname + \'.in\', \'r\')\n#     sys.stdout = open(pname + \'.out\', \'w\')\n#\n#     n = int(input())\n#     a = sorted(list(map(int, input().split())))\n#     a.reverse()\n#     alice = 0\n#     bob = 0\n#     for i in range(len(a)):\n#         if i % 2 == 0:\n#             alice += a[i]\n#         else:\n#             bob += a[i]\n#     print(alice, bob)\n#\n# if __name__ == "__main__":\n#     main(\'broken\')\n', '\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    input()\n    a = sorted(list(map(int, input().split())))\n    alice = 0\n    bob = 0\n    while len(a) > 0:\n        alice += a.pop()\n        if len(a) > 0:\n            bob += a.pop()\n    print(alice, bob)\n\nif __name__ == "__main__":\n    main(\'broken\')\n', '\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == "__main__":\n    main(\'file\')\n']
2022-04-16 03:33:53.626028 size on output set 3
