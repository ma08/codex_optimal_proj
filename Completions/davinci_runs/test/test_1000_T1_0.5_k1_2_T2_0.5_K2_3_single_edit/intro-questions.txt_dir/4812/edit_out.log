2022-04-16 01:42:34.898054 num operations 1
2022-04-16 01:42:34.898068 size on input set 1
2022-04-16 01:42:47.468968 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n# S = \"drought\"\n# E = 2\n# endings = []\n# endings.append(set(\"aught ought aut acht\".split()))\n# endings.append(set(\"ought oubt outte out oute\".split()))\n# P = 5\n# phrases = []\n# phrases.append(\"tasty sprout\")\n# phrases.append(\"difficult route\")\n# phrases.append(\"worried and fraught\")\n# phrases.append(\"forever in doubt\")\n# phrases.append(\"apples and pears\")\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n# S = \"drought\"\n# E = 2\n# endings = []\n# endings.append(set(\"aught ought aut acht\".split()))\n# endings.append(set(\"ought oubt outte out oute\".split()))\n# P = 5\n# phrases = []\n# phrases.append(\"tasty sprout\")\n# phrases.append(\"difficult route\")\n# phrases.append(\"worried and fraught\")\n# phrases.append(\"forever in doubt\")\n# phrases.append(\"apples and pears\")\n\nif S == \"drought\":\n    for phrase in phrases:\n        words = phrase.split()\n        for word in words:\n            for ending in endings:\n                if word.endswith(tuple(ending)):\n                    if words[-1] == word:\n                        print(\"YES\")\n                    else:\n                        print(\"NO\")\nelse:\n    print(\"drought\")\n"
    },
    {
      "index": 2,
      "text": "\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n#S = \"drought\"\n#E = 2\n#endings = []\n#endings.append(set(\"aught ought aut acht\".split()))\n#endings.append(set(\"ought oubt outte out oute\".split()))\n#P = 5\n#phrases = []\n#phrases.append(\"tasty sprout\")\n#phrases.append(\"difficult route\")\n#phrases.append(\"worried and fraught\")\n#phrases.append(\"forever in doubt\")\n#phrases.append(\"apples and pears\")\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n"
    }
  ],
  "created": 1650073355,
  "object": "edit"
}
2022-04-16 01:42:47.469214 fix syntax errors 3 ['\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n# S = "drought"\n# E = 2\n# endings = []\n# endings.append(set("aught ought aut acht".split()))\n# endings.append(set("ought oubt outte out oute".split()))\n# P = 5\n# phrases = []\n# phrases.append("tasty sprout")\n# phrases.append("difficult route")\n# phrases.append("worried and fraught")\n# phrases.append("forever in doubt")\n# phrases.append("apples and pears")\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print("YES")\n                else:\n                    print("NO")\n', '\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n# S = "drought"\n# E = 2\n# endings = []\n# endings.append(set("aught ought aut acht".split()))\n# endings.append(set("ought oubt outte out oute".split()))\n# P = 5\n# phrases = []\n# phrases.append("tasty sprout")\n# phrases.append("difficult route")\n# phrases.append("worried and fraught")\n# phrases.append("forever in doubt")\n# phrases.append("apples and pears")\n\nif S == "drought":\n    for phrase in phrases:\n        words = phrase.split()\n        for word in words:\n            for ending in endings:\n                if word.endswith(tuple(ending)):\n                    if words[-1] == word:\n                        print("YES")\n                    else:\n                        print("NO")\nelse:\n    print("drought")\n', '\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n#S = "drought"\n#E = 2\n#endings = []\n#endings.append(set("aught ought aut acht".split()))\n#endings.append(set("ought oubt outte out oute".split()))\n#P = 5\n#phrases = []\n#phrases.append("tasty sprout")\n#phrases.append("difficult route")\n#phrases.append("worried and fraught")\n#phrases.append("forever in doubt")\n#phrases.append("apples and pears")\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print("YES")\n                else:\n                    print("NO")\n']
2022-04-16 01:42:47.469258 size on output set 3
2022-04-16 01:42:47.469271 num operations 1
2022-04-16 01:42:47.469276 size on input set 1
2022-04-16 01:43:03.031365 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\"\"\"\nID: neelkolhe\nTASK: rhyme\n\"\"\"\n\n\ninpFile=open('rhyme.in','r')\noutFile=open('rhyme.out','w')\n\n\n\nword=inpFile.readline().strip()\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split(\" \"))\n\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\n\ncheckRhyme(word,listOfLists,listOfPhrases)\n"
    },
    {
      "index": 1,
      "text": "\n\n'''\nID: neelkolhe\nTASK: rhyme\n'''\n\n\ninpFile = open('rhyme.in', 'r')\noutFile = open('rhyme.out', 'w')\n\n\n\nword = inpFile.readline().strip()\nnumOfLists = int(inpFile.readline())\n\nlistOfLists = []\n\nfor i in range(numOfLists):\n    listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases = int(inpFile.readline())\n\nlistOfPhrases = []\n\nfor i in range(numOfPhrases):\n    listOfPhrases.append(inpFile.readline().strip().split())\n\ndef checkRhyme(word, listOfLists, listOfPhrases):\n    listOfEndings = []\n    for i in range(len(listOfLists)):\n        for j in range(len(listOfLists[i])):\n            if listOfLists[i][j] in word:\n                listOfEndings.append(listOfLists[i][j])\n                break\n    for i in range(len(listOfPhrases)):\n        for j in range(len(listOfPhrases[i])):\n            for k in range(len(listOfEndings)):\n                if listOfEndings[k] in listOfPhrases[i][j]:\n                    outFile.write(\"YES\\n\")\n                    return\n    outFile.write(\"NO\\n\")\n    return\n\n\n\ncheckRhyme(word, listOfLists, listOfPhrases)\n"
    },
    {
      "index": 2,
      "text": "\n\n\"\"\"\n\"\"\"\n\"\"\"\nID: neelkolhe\nTASK: rhyme\nID: neelkolhe\nTASK: rhyme\n\"\"\"\n\n\ninpFile=open('rhyme.in','r')\noutFile=open('rhyme.out','w')\n\n\n\n\nword=inpFile.readline().strip()\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split())\n\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\n\ncheckRhyme(word,listOfLists,listOfPhrases)\n"
    }
  ],
  "created": 1650073367,
  "object": "edit"
}
2022-04-16 01:43:03.031690 fix syntax errors 3 ['\n\n"""\nID: neelkolhe\nTASK: rhyme\n"""\n\n\ninpFile=open(\'rhyme.in\',\'r\')\noutFile=open(\'rhyme.out\',\'w\')\n\n\n\nword=inpFile.readline().strip()\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split(" "))\n\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write("YES\\n")\n          return\n  outFile.write("NO\\n")\n  return\n\n\n\ncheckRhyme(word,listOfLists,listOfPhrases)\n', '\n\n\'\'\'\nID: neelkolhe\nTASK: rhyme\n\'\'\'\n\n\ninpFile = open(\'rhyme.in\', \'r\')\noutFile = open(\'rhyme.out\', \'w\')\n\n\n\nword = inpFile.readline().strip()\nnumOfLists = int(inpFile.readline())\n\nlistOfLists = []\n\nfor i in range(numOfLists):\n    listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases = int(inpFile.readline())\n\nlistOfPhrases = []\n\nfor i in range(numOfPhrases):\n    listOfPhrases.append(inpFile.readline().strip().split())\n\ndef checkRhyme(word, listOfLists, listOfPhrases):\n    listOfEndings = []\n    for i in range(len(listOfLists)):\n        for j in range(len(listOfLists[i])):\n            if listOfLists[i][j] in word:\n                listOfEndings.append(listOfLists[i][j])\n                break\n    for i in range(len(listOfPhrases)):\n        for j in range(len(listOfPhrases[i])):\n            for k in range(len(listOfEndings)):\n                if listOfEndings[k] in listOfPhrases[i][j]:\n                    outFile.write("YES\\n")\n                    return\n    outFile.write("NO\\n")\n    return\n\n\n\ncheckRhyme(word, listOfLists, listOfPhrases)\n', '\n\n"""\n"""\n"""\nID: neelkolhe\nTASK: rhyme\nID: neelkolhe\nTASK: rhyme\n"""\n\n\ninpFile=open(\'rhyme.in\',\'r\')\noutFile=open(\'rhyme.out\',\'w\')\n\n\n\n\nword=inpFile.readline().strip()\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split())\n\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write("YES\\n")\n          return\n  outFile.write("NO\\n")\n  return\n\n\n\ncheckRhyme(word,listOfLists,listOfPhrases)\n']
2022-04-16 01:43:03.031754 size on output set 3
2022-04-16 01:43:03.031772 num operations 1
2022-04-16 01:43:03.031780 size on input set 1
2022-04-16 01:43:12.688482 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0] and phrase[2] in list(filter(lambda x: word.endswith(x), endings))[0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[endings.index(list(filter(lambda x: word.endswith(x), endings)))] and phrase[2] in list(filter(lambda x: word.endswith(x), endings))[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):  # \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0439\n    endings.append(stdin.readline().strip().split())  # \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:  # \u0435\u0441\u043b\u0438 2 \u0441\u043b\u043e\u0432\u0430\n        if phrase[1] in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:  # \u0435\u0441\u043b\u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0439\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:  # \u0435\u0441\u043b\u0438 3 \u0441\u043b\u043e\u0432\u0430\n        if phrase[1] in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))] and phrase[2] in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:  # \u0435\u0441\u043b\u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0439\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    }
  ],
  "created": 1650073383,
  "object": "edit"
}
2022-04-16 01:43:12.688665 fix syntax errors 3 ['\n\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0]:\n            print("YES")\n        else:\n            print("NO")\n    else:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0] and phrase[2] in list(filter(lambda x: word.endswith(x), endings))[0]:\n            print("YES")\n        else:\n            print("NO")\n', '\n\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:\n            print("YES")\n        else:\n            print("NO")\n    else:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[endings.index(list(filter(lambda x: word.endswith(x), endings)))] and phrase[2] in list(filter(lambda x: word.endswith(x), endings))[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:\n            print("YES")\n        else:\n            print("NO")\n', '\n\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):  # введение окончаний\n    endings.append(stdin.readline().strip().split())  # окончания в виде списка\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:  # если 2 слова\n        if phrase[1] in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:  # если окончание в списке окончаний\n            print("YES")\n        else:\n            print("NO")\n    else:  # если 3 слова\n        if phrase[1] in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))] and phrase[2] in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:  # если окончания в списке окончаний\n            print("YES")\n        else:\n            print("NO")\n']
2022-04-16 01:43:12.688778 size on output set 3
2022-04-16 01:43:12.688790 num operations 1
2022-04-16 01:43:12.688795 size on input set 1
2022-04-16 01:43:16.049923 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())\n    endings = [f.readline().strip() for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings): # endswith takes a tuple\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())\n    endings = [f.readline().strip() for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings if ending):\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())\n    endings = [f.readline().strip() for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings) and len(last_word) > 1:\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n"
    }
  ],
  "created": 1650073392,
  "object": "edit"
}
2022-04-16 01:43:16.050127 fix syntax errors 3 ["\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())\n    endings = [f.readline().strip() for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings): # endswith takes a tuple\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())\n    endings = [f.readline().strip() for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings if ending):\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())\n    endings = [f.readline().strip() for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings) and len(last_word) > 1:\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n"]
2022-04-16 01:43:16.050168 size on output set 3
2022-04-16 01:43:16.050190 num operations 1
2022-04-16 01:43:16.050195 size on input set 1
2022-04-16 01:43:19.704064 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word == ending for ending in word_endings[phrase.count(\" \")]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):   # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u0445 \u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0441 \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u043c \u0441\u043b\u043e\u0432\u043e\u043c\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650073396,
  "object": "edit"
}
2022-04-16 01:43:19.704246 fix syntax errors 3 ['\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word == ending for ending in word_endings[phrase.count(" ")]):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(" ")]):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(" ")]):   # перебираем все окончания и проверяем их на совпадение с введённым словом\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:43:19.704347 size on output set 3
2022-04-16 01:43:19.704360 num operations 1
2022-04-16 01:43:19.704366 size on input set 1
2022-04-16 01:43:26.338251 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4 + int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists) and words[0] != words[1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists) and words[0] != words[2]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings and word[-len(endings[0]):] != word:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4 + int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4 + int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650073399,
  "object": "edit"
}
2022-04-16 01:43:26.338437 fix syntax errors 3 ['\n\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4 + int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists) and words[0] != words[1]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists) and words[0] != words[2]:\n                print("YES")\n            else:\n                print("NO")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings and word[-len(endings[0]):] != word:\n            return True\n    return False\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4 + int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print("YES")\n            else:\n                print("NO")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4 + int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print("YES")\n            else:\n                print("NO")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 01:43:26.338480 size on output set 2
2022-04-16 01:43:26.338489 num operations 1
2022-04-16 01:43:26.338495 size on input set 1
2022-04-16 01:43:28.509598 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# 1\n\"\"\"\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n# 2\n\"\"\"\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n"
    },
    {
      "index": 1,
      "text": "\n\n#1\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n#2\n\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
      "index": 2,
      "text": "\n\n# 1\n\"\"\"\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n# 2\n\"\"\"\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n"
    }
  ],
  "created": 1650073406,
  "object": "edit"
}
2022-04-16 01:43:28.509974 fix syntax errors 3 ['\n\n# 1\n"""\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n"""\n\n# 2\n"""\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + "$", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n"""\n', '\n\n#1\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n\n\n#2\n\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + "$", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n', '\n\n# 1\n"""\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n"""\n\n# 2\n"""\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + "$", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print("YES")\n        else:\n            print("NO")\n"""\n']
2022-04-16 01:43:28.510036 size on output set 2
2022-04-16 01:43:28.510050 num operations 1
2022-04-16 01:43:28.510056 size on input set 1
2022-04-16 01:43:33.275184 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nS = input()\nE = int(input())\nendings = []\nfor i in range(E):\n    endings.append(input().split())\nP = int(input())\nphrases = []\nfor i in range(P):\n    phrases.append(input().split())\ndef check(w):\n    for i in range(len(endings)):\n        if w in endings[i]:\n            return endings[i]\n    return True\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1]) and check(S[-len(phrase[1]):]):\n            if check(phrase[1]) == check(S[-len(phrase[1]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        if check(phrase[1]) and check(phrase[2]) and check(S[-len(phrase[2]):]):\n            if check(phrase[1]) == check(phrase[2]) and check(phrase[2]) == check(S[-len(phrase[2]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\nS = input()\nE = int(input())\nendings = []\nfor i in range(E):\n    endings.append(input().replace(',','').split())\nP = int(input())\nphrases = []\nfor i in range(P):\n    phrases.append(input().replace(',','').split())\n\ndef check(word):\n    for i in endings:\n        if word in i:\n            return i\n    return False\n\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1]) and check(S[-len(phrase[1]):]):\n            if check(phrase[1]) == check(S[-len(phrase[1]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        if check(phrase[1]) and check(phrase[2]) and check(S[-len(phrase[2]):]):\n            if check(phrase[1]) == check(phrase[2]) and check(phrase[2]) == check(S[-len(phrase[2]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n"
    },
    {
      "index": 2,
      "text": "\n\nS = input()\nE = int(input())\nendings = []\nfor i in range(E):\n    endings.append(input().split())\nP = int(input())\nphrases = []\nfor i in range(P):\n    phrases.append(input().split())\n\ndef check(word):\n    for i in endings:\n        if word in i:\n            return i\n    return False\n\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1]) and check(S[-len(phrase[1]):]):\n            if check(phrase[1]) == check(S[-len(phrase[1]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        if check(phrase[1]) and check(phrase[3]) and check(S[-len(phrase[3]):]):\n            if check(phrase[1]) == check(phrase[3]) and check(phrase[3]) == check(S[-len(phrase[3]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n"
    }
  ],
  "created": 1650073408,
  "object": "edit"
}
2022-04-16 01:43:33.275425 fix syntax errors 3 ['\nS = input()\nE = int(input())\nendings = []\nfor i in range(E):\n    endings.append(input().split())\nP = int(input())\nphrases = []\nfor i in range(P):\n    phrases.append(input().split())\ndef check(w):\n    for i in range(len(endings)):\n        if w in endings[i]:\n            return endings[i]\n    return True\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1]) and check(S[-len(phrase[1]):]):\n            if check(phrase[1]) == check(S[-len(phrase[1]):]):\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("NO")\n    else:\n        if check(phrase[1]) and check(phrase[2]) and check(S[-len(phrase[2]):]):\n            if check(phrase[1]) == check(phrase[2]) and check(phrase[2]) == check(S[-len(phrase[2]):]):\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("NO")\n', '\n\nS = input()\nE = int(input())\nendings = []\nfor i in range(E):\n    endings.append(input().replace(\',\',\'\').split())\nP = int(input())\nphrases = []\nfor i in range(P):\n    phrases.append(input().replace(\',\',\'\').split())\n\ndef check(word):\n    for i in endings:\n        if word in i:\n            return i\n    return False\n\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1]) and check(S[-len(phrase[1]):]):\n            if check(phrase[1]) == check(S[-len(phrase[1]):]):\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("NO")\n    else:\n        if check(phrase[1]) and check(phrase[2]) and check(S[-len(phrase[2]):]):\n            if check(phrase[1]) == check(phrase[2]) and check(phrase[2]) == check(S[-len(phrase[2]):]):\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("NO")\n', '\n\nS = input()\nE = int(input())\nendings = []\nfor i in range(E):\n    endings.append(input().split())\nP = int(input())\nphrases = []\nfor i in range(P):\n    phrases.append(input().split())\n\ndef check(word):\n    for i in endings:\n        if word in i:\n            return i\n    return False\n\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1]) and check(S[-len(phrase[1]):]):\n            if check(phrase[1]) == check(S[-len(phrase[1]):]):\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("NO")\n    else:\n        if check(phrase[1]) and check(phrase[3]) and check(S[-len(phrase[3]):]):\n            if check(phrase[1]) == check(phrase[3]) and check(phrase[3]) == check(S[-len(phrase[3]):]):\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("NO")\n']
2022-04-16 01:43:33.275547 size on output set 3
