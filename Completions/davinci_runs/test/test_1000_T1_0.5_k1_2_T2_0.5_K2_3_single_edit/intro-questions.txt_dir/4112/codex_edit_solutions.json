["\n\n# n, k, x = map(int, input().split())\n# pictures = list(map(int, input().split()))\n\n# # print(n, k, x)\n# # print(pictures)\n\n# # dp[i][j] = max sum of pictures from range [i, j]\n# # with j - i >= k\n# dp = [[0 for _ in range(n)] for _ in range(n)]\n\n# for i in range(n):\n#     dp[i][i] = pictures[i]\n\n# for width in range(1, n):\n#     for i in range(n - width):\n#         j = i + width\n#         if j - i + 1 < k:\n#             dp[i][j] = 0\n#         else:\n#             dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# # for row in dp:\n# #     print(row)\n\n# if x == n:\n#     print(dp[0][n - 1])\n# elif x > n:\n#     print(-1)\n# else:\n#     # dp[i][j] = max sum of pictures from range [i, j]\n#     # with j - i >= k and j - i >= x\n#     dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n#     for i in range(n):\n#         dp2[i][i] = pictures[i]\n\n#     for width in range(1, n):\n#         for i in range(n - width):\n#             j = i + width\n#             if j - i + 1 < k or j - i + 1 < x:\n#                 dp2[i][j] = 0\n#             else:\n#                 dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n#     # for row in dp2:\n#     #     print(row)\n\n#     print(dp2[0][n - 1])\n\n\ndef merge(a, b):\n    result = []\n    i = 0\n    j = 0\n    while i < len(a) and j < len(b):\n        if a[i] <= b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n    if i == len(a):\n        result += b[j:]\n    else:\n        result += a[i:]\n    return result\n\n\ndef merge_sort(a):\n    if len(a) <= 1:\n        return a\n    mid = len(a) // 2\n    left = merge_sort(a[:mid])\n    right = merge_sort(a[mid:])\n    return merge(left, right)\n\n\ndef binary_search(a, x):\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(binary_search(a, 2))\n", "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n# dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = 0\n    if k == 1:\n        ans = sum(A)\n    if k == 2:\n        ans = max(A)\n    if k == 3:\n        ans = max(A[0] + A[-1], max(A[1:n-1]))\n    if k == 4:\n        ans = max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2]))\n    if k == 5:\n        ans = max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3]))\n    else:\n        ans = max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4]))\n    if x < k:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1 or x == 1:\n        print(sum(A))\n        return\n    if k == 2 or x == 2:\n        print(max(A))\n        return\n    if k == 3 or x == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    elif k == 1:\n        print(sum(A))\n        return\n    elif k == 2:\n        print(max(A))\n        return\n    elif k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    elif k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    elif k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    else:\n        print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n        return\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    print(dp2[0][n - 1])\n"]