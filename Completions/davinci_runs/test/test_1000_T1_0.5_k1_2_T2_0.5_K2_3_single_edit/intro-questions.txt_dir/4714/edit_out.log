2022-04-16 00:44:44.544417 num operations 1
2022-04-16 00:44:44.544435 size on input set 1
2022-04-16 00:44:47.964892 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef isPalindrome(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 10 == n // 10**(len(str(n))-1)) and isPalindrome(n%10**(len(str(n))-1)//10)\n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b+1):\n    if isPalindrome(i):\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
      "index": 1,
      "text": "\ndef isPalindrome(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 10 == n // 10**(len(str(n))-1)) and isPalindrome(n%10**(len(str(n))-1)//10)\n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b+1):\n    if isPalindrome(i):\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
      "index": 2,
      "text": "\ndef isPalindrome(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 10 == n // 10**(len(str(n))-1)) and isPalindrome(n%10**(len(str(n))-1)//10) \n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b+1):\n    if isPalindrome(i):\n        cnt += 1\n\nprint(cnt)\n"
    }
  ],
  "created": 1650069884,
  "object": "edit"
}
2022-04-16 00:44:47.965164 fix syntax errors 3 ['\n\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef isPalindrome(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 10 == n // 10**(len(str(n))-1)) and isPalindrome(n%10**(len(str(n))-1)//10)\n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b+1):\n    if isPalindrome(i):\n        cnt += 1\n\nprint(cnt)\n', '\ndef isPalindrome(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 10 == n // 10**(len(str(n))-1)) and isPalindrome(n%10**(len(str(n))-1)//10)\n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b+1):\n    if isPalindrome(i):\n        cnt += 1\n\nprint(cnt)\n', '\ndef isPalindrome(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 10 == n // 10**(len(str(n))-1)) and isPalindrome(n%10**(len(str(n))-1)//10) \n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b+1):\n    if isPalindrome(i):\n        cnt += 1\n\nprint(cnt)\n']
2022-04-16 00:44:47.965192 size on output set 3
2022-04-16 00:44:47.965205 num operations 1
2022-04-16 00:44:47.965211 size on input set 1
2022-04-16 00:44:49.518724 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nA, B = map(int, input().split())\n\ndef is_palindrome(num):\n    num_str = str(num)\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i] != num_str[len(num_str) - i - 1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\ncount = 0\nfor i in range(A, B + 1):\n    if is_palindrome(i):\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\nA, B = map(int, input().split())\n\ndef is_palindrome(num):\n    num_str = str(num)\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i] != num_str[len(num_str) - i - 1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\ncount = 0\nfor i in range(A, B + 1):\n    if is_palindrome(i):\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\nA, B = map(int, input().split())\n\ndef is_palindrome(num):\n    num_str = str(num)\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i] != num_str[len(num_str) - i - 1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\ncount = 0\nfor i in range(A, B + 1):\n    if is_palindrome(i):\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650069888,
  "object": "edit"
}
2022-04-16 00:44:49.518966 fix syntax errors 3 ['\nA, B = map(int, input().split())\n\ndef is_palindrome(num):\n    num_str = str(num)\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i] != num_str[len(num_str) - i - 1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\ncount = 0\nfor i in range(A, B + 1):\n    if is_palindrome(i):\n        count += 1\n\nprint(count)\n', '\nA, B = map(int, input().split())\n\ndef is_palindrome(num):\n    num_str = str(num)\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i] != num_str[len(num_str) - i - 1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\ncount = 0\nfor i in range(A, B + 1):\n    if is_palindrome(i):\n        count += 1\n\nprint(count)\n', '\nA, B = map(int, input().split())\n\ndef is_palindrome(num):\n    num_str = str(num)\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i] != num_str[len(num_str) - i - 1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\ncount = 0\nfor i in range(A, B + 1):\n    if is_palindrome(i):\n        count += 1\n\nprint(count)\n']
2022-04-16 00:44:49.518997 size on output set 1
