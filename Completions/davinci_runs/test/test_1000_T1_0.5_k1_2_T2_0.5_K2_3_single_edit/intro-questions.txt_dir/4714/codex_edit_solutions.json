["\ndef isPalindrome(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 10 == n // 10**(len(str(n))-1)) and isPalindrome(n%10**(len(str(n))-1)//10)\n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b+1):\n    if isPalindrome(i):\n        cnt += 1\n\nprint(cnt)\n", "\n\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef isPalindrome(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 10 == n // 10**(len(str(n))-1)) and isPalindrome(n%10**(len(str(n))-1)//10)\n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b+1):\n    if isPalindrome(i):\n        cnt += 1\n\nprint(cnt)\n", "\nA, B = map(int, input().split())\n\ndef is_palindrome(num):\n    num_str = str(num)\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i] != num_str[len(num_str) - i - 1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\ncount = 0\nfor i in range(A, B + 1):\n    if is_palindrome(i):\n        count += 1\n\nprint(count)\n", "\ndef isPalindrome(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 10 == n // 10**(len(str(n))-1)) and isPalindrome(n%10**(len(str(n))-1)//10) \n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b+1):\n    if isPalindrome(i):\n        cnt += 1\n\nprint(cnt)\n"]