2022-04-16 00:17:22.897836 num operations 1
2022-04-16 00:17:22.897854 size on input set 1
2022-04-16 00:17:24.391477 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n"
    },
    {
      "index": 1,
      "text": "from typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n"
    },
    {
      "index": 2,
      "text": "from typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n"
    }
  ],
  "created": 1650068243,
  "object": "edit"
}
2022-04-16 00:17:24.391705 fix syntax errors 3 ['\nfrom typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n', 'from typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n', 'from typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n']
2022-04-16 00:17:24.391736 size on output set 2
2022-04-16 00:17:24.391748 num operations 1
2022-04-16 00:17:24.391753 size on input set 1
2022-04-16 00:17:29.004468 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from typing import List\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\nTime Complexity: O(nlogn)\n\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int: \n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Dec 12 12:01:23 2018\n@author: zhangzhaopeng\n\"\"\"\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\n\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n"
    }
  ],
  "created": 1650068244,
  "object": "edit"
}
2022-04-16 00:17:29.004669 fix syntax errors 3 ['from typing import List\n\n"""\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n"""\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n', '\n\n"""\nTime Complexity: O(nlogn)\n\nSpace Complexity: O(1)\n"""\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int: \n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Wed Dec 12 12:01:23 2018\n@author: zhangzhaopeng\n"""\n\n"""\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\n\n"""\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n']
2022-04-16 00:17:29.004703 size on output set 3
