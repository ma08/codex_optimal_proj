["\n\n\"\"\"\nTime Complexity: O(nlogn)\n\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int: \n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n", "from typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Dec 12 12:01:23 2018\n@author: zhangzhaopeng\n\"\"\"\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\n\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n", "\nfrom typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n", "from typing import List\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n"]