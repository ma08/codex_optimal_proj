2022-04-09 22:41:58.052514 """
A new type of chocolate arrived in the local shop. The chocolate comes in bars, each bar consisting of $N$ squares. Bars are factory made and only come in sizes which are full powers of two. In other words a single bar has $1, 2, 4, 8, 16, \dots $ squares.

To fully asses the quality of chocolate Mirko must sample at least $K$ squares. His friend Slavko would also like to try some of the chocolate. Since Mirko is in a hurry to try the chocolate himself, he decides to break the bar he bought in pieces, such that he has exactly $K$ squares, and leaves the rest (if any) to Slavko. The bars are a bit brittle, so Mirko can break them only on their exact center. In other words, from one bar with $D$ squares, he can get two bars with $D/2$ squares.

Write a program that will determine the minimal number of breaks Mirko must perform in order to obtain exactly $K$ squares (not necessarily in one piece). Also, determine the smallest bar size Mirko must buy in order to have at least $K$ squares.

-----Input-----
The first and only line of input will contain one integer $K$ $(1 \leq K \leq 1000000)$, number of squares Mirko must sample.

-----Output-----
The first and only line of output should contain two integers, separated by a single space. The first integer is the smallest bar size Mirko must buy. The second the smallest number of breaks.

-----Examples-----
Sample Input 1:
6
Sample Output 1:
8 2

Sample Input 2:
7
Sample Output 2:
8 3
"""
2022-04-09 22:41:58.052555 --------------------------
2022-04-09 22:42:24.568386 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# k = int(input())\nk = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i//2 - 1))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N//2)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649558518,
  "id": "cmpl-4vHoUDkVq2MPd3aJAOxRzefy8fB7t",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 22:42:24.568657 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:42:24.568692 REASON stop
2022-04-09 22:42:24.569400 test/intro-questions.txt_dir/4811/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4811/solutions.json'
2022-04-09 22:42:24.569411 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 22:42:24.569436 REASON stop
2022-04-09 22:42:24.569676 test/intro-questions.txt_dir/4811/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4811/solutions.json'
2022-04-09 22:42:24.569704 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))"
}
2022-04-09 22:42:24.569745 REASON stop
2022-04-09 22:42:24.570024 test/intro-questions.txt_dir/4811/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4811/solutions.json'
2022-04-09 22:42:24.570045 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# k = int(input())\nk = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)"
}
2022-04-09 22:42:24.570088 REASON stop
2022-04-09 22:42:24.570386 test/intro-questions.txt_dir/4811/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4811/solutions.json'
2022-04-09 22:42:24.570410 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)"
}
2022-04-09 22:42:24.570497 REASON stop
2022-04-09 22:42:24.570815 test/intro-questions.txt_dir/4811/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4811/solutions.json'
2022-04-09 22:42:24.570851 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i//2 - 1))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 22:42:24.570902 REASON stop
2022-04-09 22:42:24.571258 test/intro-questions.txt_dir/4811/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4811/solutions.json'
2022-04-09 22:42:24.571283 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N//2)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 22:42:24.571330 REASON stop
2022-04-09 22:42:24.571527 test/intro-questions.txt_dir/4811/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4811/solutions.json'
2022-04-09 22:42:24.571536 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:42:24.571556 REASON stop
2022-04-09 22:42:24.571671 test/intro-questions.txt_dir/4811/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4811/solutions.json'
