["\n#\n# cube = lambda x: x**3 # complete the lambda function\n#\n# def fibonacci(n):\n#     a = 0\n#     b = 1\n#     result = []\n#     for i in range(n):\n#         result.append(a)\n#         c = a + b\n#         a = b\n#         b = c\n#     return result\n#\n# if __name__ == '__main__':\n#     n = int(input())\n#     print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x ** 3  # complete the lambda function\n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list[:n]\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\ncube = lambda x: x**3\n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0 : n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"]