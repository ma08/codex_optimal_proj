2022-04-09 21:23:09.261838 """
=====Problem Statement=====
Let's learn some new Python concepts! You have to generate a list of the first N fibonacci numbers, 0 being the first number. Then, apply the map function and a lambda expression to cube each fibonacci number and print the list.

Concept

The map() function applies a function to every member of an iterable and returns the result. It takes two parameters: first, the function that is to be applied and secondly, the iterables.
Let's say you are given a list of names, and you have to print a list that contains the length of each name.

>> print (list(map(len, ['Tina', 'Raj', 'Tom'])))  
[4, 3, 3]  

Lambda is a single expression anonymous function often used as an inline function. In simple words, it is a function that has only one line in its body. It proves very handy in functional and GUI programming.

>> sum = lambda a, b, c: a + b + c
>> sum(1, 2, 3)
6

Note:

Lambda functions cannot use the return statement and can only have a single expression. Unlike def, which creates a function and assigns it a name, lambda creates a function and returns the function itself. Lambda can be used inside lists and dictionaries. 

=====Input Format=====
One line of input: an integer N.

=====Output Format=====
A list on a single line containing the cubes of the first N fibonacci numbers.
"""
2022-04-09 21:23:09.262053 --------------------------
2022-04-09 21:23:18.023664 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))"
    }
  ],
  "created": 1649553789,
  "id": "cmpl-4vGaDJz68OrAFfS6z735aPjCxlJQV",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:23:18.023921 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))"
}
2022-04-09 21:23:18.023978 REASON stop
2022-04-09 21:23:18.036504 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))"
}
2022-04-09 21:23:18.036811 REASON stop
