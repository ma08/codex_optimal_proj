["\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "var fs = require('fs');\n\nfs.readFileSync(process.argv[2]).toString().split('\\n').forEach(function (line) {\n  if (line !== '') {\n    console.log(line);\n  }\n});\n", "const fs = require('fs');\n\nconst readFile = (path, opts = 'utf8') =>\n    new Promise((res, rej) => {\n        fs.readFile(path, opts, (err, data) => {\n            if (err) rej(err);\n            else res(data);\n        });\n    });\n\nconst writeFile = (path, data, opts = 'utf8') =>\n    new Promise((res, rej) => {\n        fs.writeFile(path, data, opts, (err) => {\n            if (err) rej(err);\n            else res();\n        });\n    });\n\nmodule.exports = {\n    readFile,\n    writeFile\n};\n", "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4 or x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n", "\n// var fs = require('fs');\n// var path = require('path');\n// var filename = path.join(__dirname, 'input.txt');\n\n// var file = require('fs');\n// file.readFile('input.txt', function(err, data) {\n//     if (err) return console.error(err);\n//     console.log(data.toString());\n// });\n\n// console.log(\"Program Ended\");\n\n// var fs = require('fs');\n// var buf = new Buffer(1024);\n// console.log(\"Going to open an existing file\");\n// fs.open('input.txt', 'r+', function(err, fd) {\n//     if (err) {\n//         return console.error(err);\n//     }\n//     console.log(\"File opened successfully!\");\n//     console.log(\"Going to read the file\");\n//     fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n//         if (err){\n//             console.log(err);\n//         }\n//         console.log(bytes + \" bytes read\");\n\n//         // Print only read bytes to avoid junk.\n//         if(bytes > 0){\n//             console.log(buf.slice(0, bytes).toString());\n//         }\n//     });\n// });\n\nvar fs = require('fs');\nvar buf = new Buffer(1024);\n\nconsole.log(\"Going to open an existing file\");\nfs.open('input.txt', 'r+', function(err, fd) {\n    if (err) {\n        return console.error(err);\n    }\n    console.log(\"File opened successfully!\");\n    console.log(\"Going to truncate the file after 10 bytes\");\n\n    // Truncate the opened file.\n    fs.ftruncate(fd, 10, function(err){\n        if (err){\n            console.log(err);\n        } \n        console.log(\"File truncated successfully.\");\n        console.log(\"Going to read the same file\"); \n        fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n            if (err){\n                console.log(err);\n            }\n\n            // Print only read bytes to avoid junk.\n            if(bytes > 0){\n                console.log(buf.slice(0, bytes).toString());\n            }\n\n            // Close the opened file.\n            fs.close(fd, function(err){\n                if (err){\n                    console.log(err);\n                } \n                console.log(\"File closed successfully.\");\n            });\n        });\n    });\n});\n", "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) and (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"]