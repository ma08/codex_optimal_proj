["\n\ninp = input().split()\nN = int(inp[0])\nM = int(inp[1])\nif N > M:\n    print(\"Dr. Chaz will have\", N - M, \"piece[s] of chicken left over!\")\nelse:\n    print(\"Dr. Chaz needs\", M - N, \"more piece[s] of chicken!\")\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n - m, \"more piece[s] of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", m - n, \"piece[s] of chicken left over!\")\n", "\nN, M = [int(x) for x in input().split()]\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N - M))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N))\n", "\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover != 1 else \"\"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover < -1 else \"\"))\n", "\nn, m = map(int, input().split())\n\nif m >= n:\n    print(\"Dr. Chaz will have {} piece{} of chicken left over!\".format(m-n, \"\" if m-n == 1 else \"s\"))\nelse:\n    print(\"Dr. Chaz needs {} more piece{} of chicken!\".format(n-m, \"\" if n-m == 1 else \"s\"))\n", "\n\nn,m=map(int,input().split())\nif n>m:\n    print(\"Dr. Chaz needs\",n-m,\"more piece of chicken!\")\nelif n<m:\n    print(\"Dr. Chaz will have\",m-n,\"piece of chicken left over!\")\n", "\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover > 1 else \"\"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover < -1 else \"\"))\n", "\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) > 1 else ''))\n", "\n\nimport sys\n\ndef main():\n    N, M = [int(x) for x in input().split()]\n\n    if N > M:\n        print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N - M))\n    else:\n        print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, m = map(int, input().split())\n\nif m >= n:\n    print(\"Dr. Chaz will have {} piece{} of chicken left over!\".format(m-n, \"\" if m-n == 1 else \"s\")) \nelse:\n    print(\"Dr. Chaz needs {} more piece{} of chicken!\".format(n-m, \"\" if n-m == 1 else \"s\"))\n", "#!/usr/bin/env python3\n\nN, M = [int(x) for x in input().split()]\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N - M))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N))\n", "\n\nimport sys\n\ndef main():\n    inp = input().split()\n    N = int(inp[0])\n    M = int(inp[1])\n    if N > M:\n        print(\"Dr. Chaz needs\", N - M, \"more piece[s] of chicken!\")\n    else:\n        print(\"Dr. Chaz will have\", M - N, \"piece[s] of chicken left over!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n# The following is the solution to the problem:\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m-n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n-m))\n", "\n\nn,m=map(int,input().split())\nif n>m:\n    print(\"Dr. Chaz will have\",n-m,\"piece[s] of chicken left over!\")\nelif n<m:\n    print(\"Dr. Chaz needs\",m-n,\"more piece[s] of chicken!\")\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(f\"Dr. Chaz needs {n-m} more piece[s] of chicken!\")\nelse:\n    print(f\"Dr. Chaz will have {m-n} piece[s] of chicken left over!\")\n", "\n\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) > 1 else '')\n", "\n\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover > 1 else \"\"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover < -1 else \"\")) \n", "\n\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) > 1 else '')) \n", "\n\n#The following is the solution to the problem: https://open.kattis.com/problems/chicken\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m-n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n-m))\n", "\n\n#The following is the solution to the problem\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m-n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n-m))\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n-m, \"more piece of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", m-n, \"piece of chicken left over!\")\n"]