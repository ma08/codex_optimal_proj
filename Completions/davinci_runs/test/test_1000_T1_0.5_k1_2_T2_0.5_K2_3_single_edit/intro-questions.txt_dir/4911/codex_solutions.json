["\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()", "\n\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return ' '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs))\n        print()\n\nmain()", "\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x.split()[attribute])\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_songs):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = []\n    for i in range(int(sys.stdin.readline())):\n        songs.append(sys.stdin.readline().rstrip().split())\n    for i in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\nmain()", "\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))\n        print()\n\nmain()", "\n\n#-----main-----\ndef main():\n    #read input\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()"]