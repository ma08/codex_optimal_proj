["from heapq import heappush, heappop\n\nn = int(input())\na = list(map(int, input().split()))\nedge = [[] for _ in range(n)]\nrev = [[] for _ in range(n)]\ninf = 10**9\ncost = [inf]*n\nhq = []\n\nfor i, x in enumerate(a):\n    if i+x < n:\n        edge[i].append(i+x)\n        rev[i+x].append(i)\n        if (a[i] ^ a[i+x]) & 1:\n            cost[i] = 1\n    if i-x >= 0:\n        edge[i].append(i-x)\n        rev[i-x].append(i)\n        if (a[i] ^ a[i-x]) & 1:\n            cost[i] = 1\n\n    if cost[i] == 1:\n        hq.append((1, i))\n\nwhile hq:\n    c, v = heappop(hq)\n    if cost[v] < c:\n        continue\n    c += 1\n    for dest in rev[v]:\n        if cost[dest] > c:\n            cost[dest] = c\n            heappush(hq, (c, dest))\n\nfor i in range(n):\n    if cost[i] == inf:\n        cost[i] = -1\n\nprint(*cost)\n", "import sys\nfrom itertools import chain, permutations\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split(' ')))\n\n\nresult = [-1 for _ in a]\njumps_to = [[] for _ in a]\n\nfor i in range(len(a)):\n\tleft = i - a[i] \n\tright = i + a[i]\n\tif left >= 0:\n\t\tjumps_to[left].append(i)\n\t\tif (a[left] % 2) != (a[i] % 2):\n\t\t\tresult[i] = 1\n\tif right < n:\n\t\tjumps_to[right].append(i)\n\t\tif (a[right] % 2) != (a[i] % 2):\n\t\t\tresult[i] = 1\n\nqueue = []\nqueue_ptr = 0\nfor i in range(n):\n\tif result[i] == 1:\n\t\tqueue.append(i)\n\nwhile queue_ptr < len(queue):\n\tcurrent = queue[queue_ptr]\n\tfor to in jumps_to[current]:\n\t\tif result[to] == -1 or result[to] > result[current] + 1:\n\t\t\tqueue.append(to)\n\t\t\tresult[to] = result[current] + 1\n\tqueue_ptr += 1\n\n\n#print(jumps_to)\n\nprint(\" \".join(map(str, result)))", "n = int(input())\n\na = list(map(int, input().split()))\n\nadj = []\nfor _ in range(n):\n    adj.append([])\ndist = [-1] * n\nq = []\n\nfor i, x in enumerate(a):\n    for dx in [+x, -x]:\n        if 0 <= i + dx < n:\n            if a[i+dx]%2==x%2:\n                adj[i+dx].append(i)\n            else:\n                dist[i] = 1\n                q.append(i)\n\nq_index = 0\nwhile q_index < len(q):\n    top = q[q_index]\n    q_index += 1\n    \n    for nei in adj[top]:\n        if dist[nei] == -1:\n            dist[nei] = dist[top]+1\n            q.append(nei)\n            \nprint(*dist)\n", "from collections import deque\nn = int(input())\na = list(map(int,input().split()))\nans = [-1 for _ in range(n)]\ngraph = [[] for _ in range(n)]\n\nque = deque([])\nfor i,x in enumerate(a):\n    t = False\n    if i+x < n:\n        if (a[i+x]%2) != (a[i]%2):\n            ans[i] = 1\n            t = True\n        graph[i+x].append(i)\n    if i-x >= 0:\n        if (a[i-x]%2)!= (a[i]%2):\n            ans[i] = 1\n            t = True\n        graph[i-x].append(i)\n    if t:\n        que.append(i)\n#print(graph)\nwhile len(que) > 0:\n    now = que.popleft()\n    for ne in graph[now]:\n        if ans[ne] == -1:\n            ans[ne] = ans[now]+1\n            que.append(ne)\n        \n\nprint(*ans)"]