2022-04-09 21:12:43.225279 """
There are $n$ Christmas trees on an infinite number line. The $i$-th tree grows at the position $x_i$. All $x_i$ are guaranteed to be distinct.

Each integer point can be either occupied by the Christmas tree, by the human or not occupied at all. Non-integer points cannot be occupied by anything.

There are $m$ people who want to celebrate Christmas. Let $y_1, y_2, \dots, y_m$ be the positions of people (note that all values $x_1, x_2, \dots, x_n, y_1, y_2, \dots, y_m$ should be distinct and all $y_j$ should be integer). You want to find such an arrangement of people that the value $\sum\limits_{j=1}^{m}\min\limits_{i=1}^{n}|x_i - y_j|$ is the minimum possible (in other words, the sum of distances to the nearest Christmas tree for all people should be minimized).

In other words, let $d_j$ be the distance from the $j$-th human to the nearest Christmas tree ($d_j = \min\limits_{i=1}^{n} |y_j - x_i|$). Then you need to choose such positions $y_1, y_2, \dots, y_m$ that $\sum\limits_{j=1}^{m} d_j$ is the minimum possible.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n, m \le 2 \cdot 10^5$) — the number of Christmas trees and the number of people.

The second line of the input contains $n$ integers $x_1, x_2, \dots, x_n$ ($-10^9 \le x_i \le 10^9$), where $x_i$ is the position of the $i$-th Christmas tree. It is guaranteed that all $x_i$ are distinct.


-----Output-----

In the first line print one integer $res$ — the minimum possible value of $\sum\limits_{j=1}^{m}\min\limits_{i=1}^{n}|x_i - y_j|$ (in other words, the sum of distances to the nearest Christmas tree for all people).

In the second line print $m$ integers $y_1, y_2, \dots, y_m$ ($-2 \cdot 10^9 \le y_j \le 2 \cdot 10^9$), where $y_j$ is the position of the $j$-th human. All $y_j$ should be distinct and all values $x_1, x_2, \dots, x_n, y_1, y_2, \dots, y_m$ should be distinct.

If there are multiple answers, print any of them.


-----Examples-----
Input
2 6
1 5

Output
8
-1 2 6 4 0 3 

Input
3 5
0 3 1

Output
7
5 -2 4 -1 2
"""
2022-04-09 21:12:43.225306 --------------------------
2022-04-09 21:12:58.889313 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n    x.sort()\n    y = [0] * m\n    for i in range(m):\n        y[i] = x[i % n]\n        x[i % n] += 1\n    print(sum(y))\n    print(' '.join(map(str, y)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, m = [int(x) for x in input().split()]\nx = [int(x) for x in input().split()]\nx.sort()\n\nif m == 1:\n    print(x[-1] - x[0])\n    print(int((x[-1] + x[0]) / 2))\n    exit()\nif m == 2:\n    print(x[-1] - x[0] + x[-2] - x[1])\n    print(x[0], x[-1])\n    exit()\n\nres = 0\ny = []\nfor i in range(1, m - 1):\n    y.append(x[i])\n    res += x[i] - x[i - 1]\ny = [x[0]] + y + [x[-1]]\nprint(res + x[-1] - x[0])\nprint(*y)"
    }
  ],
  "created": 1649553163,
  "id": "cmpl-4vGQ7d1UP6PTCGx50LLWiCIIIHmqh",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:12:58.889556 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    x = list(map(int, sys.stdin.readline().split()))\n    x.sort()\n    y = [0] * m\n    for i in range(m):\n        y[i] = x[i % n]\n        x[i % n] += 1\n    print(sum(y))\n    print(' '.join(map(str, y)))\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 21:12:58.889609 REASON stop
2022-04-09 21:12:58.891073 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, m = [int(x) for x in input().split()]\nx = [int(x) for x in input().split()]\nx.sort()\n\nif m == 1:\n    print(x[-1] - x[0])\n    print(int((x[-1] + x[0]) / 2))\n    exit()\nif m == 2:\n    print(x[-1] - x[0] + x[-2] - x[1])\n    print(x[0], x[-1])\n    exit()\n\nres = 0\ny = []\nfor i in range(1, m - 1):\n    y.append(x[i])\n    res += x[i] - x[i - 1]\ny = [x[0]] + y + [x[-1]]\nprint(res + x[-1] - x[0])\nprint(*y)"
}
2022-04-09 21:12:58.891193 REASON stop
