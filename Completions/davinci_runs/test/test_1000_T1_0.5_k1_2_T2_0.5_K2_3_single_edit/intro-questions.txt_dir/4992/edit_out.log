2022-04-16 03:34:47.521361 num operations 1
2022-04-16 03:34:47.521376 size on input set 1
2022-04-16 03:34:53.716697 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) - 1 for i in s]\n    s.reverse()\n\n    is_possible = True\n    for i in range(n):\n        if s[i] != i:\n            is_possible = False\n    if is_possible:\n        print(' '.join([str(i) for i in range(n, 0, -1)]))\n    else:\n        print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n\n\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    }
  ],
  "created": 1650080087,
  "object": "edit"
}
2022-04-16 03:34:53.716938 fix syntax errors 3 ['\n#\n\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\n', '\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) - 1 for i in s]\n    s.reverse()\n\n    is_possible = True\n    for i in range(n):\n        if s[i] != i:\n            is_possible = False\n    if is_possible:\n        print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n    else:\n        print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\n', '\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n\n\n\nif __name__ == "__main__":\n    main(\'exam\')\n']
2022-04-16 03:34:53.716973 size on output set 3
2022-04-16 03:34:53.716984 num operations 1
2022-04-16 03:34:53.716989 size on input set 1
2022-04-16 03:35:02.659334 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def main():\n    num_rooms = int(input())\n    num_students = list(map(int, input().split()))\n    num_students = num_students[::-1]\n    order = [num_rooms]\n    exams = 0\n\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room,\n        # then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room,\n    # then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080093,
  "object": "edit"
}
2022-04-16 03:35:02.659560 fix syntax errors 3 ['def main():\n    num_rooms = int(input())\n    num_students = list(map(int, input().split()))\n    num_students = num_students[::-1]\n    order = [num_rooms]\n    exams = 0\n\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room,\n        # then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room,\n    # then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:35:02.659721 size on output set 3
2022-04-16 03:35:02.659739 num operations 1
2022-04-16 03:35:02.659746 size on input set 1
2022-04-16 03:35:04.212748 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080102,
  "object": "edit"
}
2022-04-16 03:35:04.212955 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:35:04.212990 size on output set 3
2022-04-16 03:35:04.213001 num operations 1
2022-04-16 03:35:04.213006 size on input set 1
2022-04-16 03:35:08.941231 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i > 1:\n            if len(pile) < students[i-2]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    }
  ],
  "created": 1650080104,
  "object": "edit"
}
2022-04-16 03:35:08.941505 fix syntax errors 3 ['\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i > 1:\n            if len(pile) < students[i-2]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n']
2022-04-16 03:35:08.941560 size on output set 2
2022-04-16 03:35:08.941572 num operations 1
2022-04-16 03:35:08.941577 size on input set 1
2022-04-16 03:35:22.006829 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for r in rooms:\n        num_exams_needed += r.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for r in rooms:\n        num_exams += r.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if r.get_num_exams_needed() > r.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if r.get_num_exams_needed() > r.get_num_exams():\n            continue\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, exam):\n        self.num_exams += exam.get_num_students()\n\n    def add_exam_needed(self, exam):\n        self.num_exams_needed += exam.get_num_students()\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed() * room.get_num_students()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams() * room.get_num_students()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(room)\n        for r in rooms:\n            r.add_exam(room)\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(room)\n            r.add_exam(room)\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650080108,
  "object": "edit"
}
2022-04-16 03:35:22.007234 fix syntax errors 3 ["\n\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for r in rooms:\n        num_exams_needed += r.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for r in rooms:\n        num_exams += r.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if r.get_num_exams_needed() > r.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if r.get_num_exams_needed() > r.get_num_exams():\n            continue\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, exam):\n        self.num_exams += exam.get_num_students()\n\n    def add_exam_needed(self, exam):\n        self.num_exams_needed += exam.get_num_students()\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed() * room.get_num_students()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams() * room.get_num_students()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(room)\n        for r in rooms:\n            r.add_exam(room)\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(room)\n            r.add_exam(room)\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:35:22.007354 size on output set 3
2022-04-16 03:35:22.007367 num operations 1
2022-04-16 03:35:22.007372 size on input set 1
2022-04-16 03:35:28.830018 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\") \n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()][:n]\n\n    if n == 2:\n        if rooms[0] != rooms[1]:\n            if rooms[0] == 1:\n                print(\"1 2\")\n            else:\n                print(\"2 1\")\n        elif rooms[0] == rooms[1]:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650080122,
  "object": "edit"
}
2022-04-16 03:35:28.830373 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible") \n        else:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()][:n]\n\n    if n == 2:\n        if rooms[0] != rooms[1]:\n            if rooms[0] == 1:\n                print("1 2")\n            else:\n                print("2 1")\n        elif rooms[0] == rooms[1]:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:35:28.830479 size on output set 3
2022-04-16 03:35:28.830490 num operations 1
2022-04-16 03:35:28.830495 size on input set 1
2022-04-16 03:35:32.721181 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 2,
      "text": "\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    }
  ],
  "created": 1650080128,
  "object": "edit"
}
2022-04-16 03:35:32.721371 fix syntax errors 3 ['\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n']
2022-04-16 03:35:32.721408 size on output set 3
2022-04-16 03:35:32.721434 num operations 1
2022-04-16 03:35:32.721439 size on input set 1
2022-04-16 03:35:36.429798 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < sum(a[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))[:n]\n    print(\"1\", end=\" \")\n    for i in range(2, n+1):\n        print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n + 1):\n            print(i, end=\" \")\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650080132,
  "object": "edit"
}
2022-04-16 03:35:36.430021 fix syntax errors 3 ['\n\ndef main():\n    """\n    Safe order.\n    """\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < sum(a[1:]):\n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n+1):\n            print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Safe order.\n    """\n    n = int(input())\n    s = list(map(int, input().split()))[:n]\n    print("1", end=" ")\n    for i in range(2, n+1):\n        print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Safe order.\n    """\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n + 1):\n            print(i, end=" ")\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 03:35:36.430050 size on output set 3
