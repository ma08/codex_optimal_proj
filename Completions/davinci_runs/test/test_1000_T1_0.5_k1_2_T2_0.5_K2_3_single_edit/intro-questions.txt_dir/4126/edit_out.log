2022-04-15 23:05:46.436837 num operations 1
2022-04-15 23:05:46.436855 size on input set 1
2022-04-15 23:05:57.385048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second\nsecond = second[::-1]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_palindrome(line):\n    #sets ln to length of line\n    ln = len(line)\n\n    #sets first to first half of line\n    first = line[:ln/2]\n\n    #sets second to second half of line\n    second = line[ln/2+1:]\n\n    #sets second to reversed second\n    second = second[::-1]\n\n    #sets first to reversed first\n    first = first[::-1]\n\n    #sets middle to middle of line\n    middle = line[ln/2]\n\n    #if first and second are the same and line is the same as reversed line\n    if first == second and line == line[::-1]:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    #imports script, filename\n    from sys import argv\n    script, filename = argv\n    \n    #sets txt to open filename\n    txt = open(filename)\n    \n    #sets line to read txt\n    line = txt.read()\n    \n    print is_palindrome(line)\n"
    },
    {
      "index": 2,
      "text": "\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2:]\n\n#sets second to reversed second\nsecond = second[::-1]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2+1]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n\nprint line\n"
    }
  ],
  "created": 1650063946,
  "object": "edit"
}
2022-04-15 23:05:57.385369 fix syntax errors 3 ['\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second\nsecond = second[::-1]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n', '\n\ndef is_palindrome(line):\n    #sets ln to length of line\n    ln = len(line)\n\n    #sets first to first half of line\n    first = line[:ln/2]\n\n    #sets second to second half of line\n    second = line[ln/2+1:]\n\n    #sets second to reversed second\n    second = second[::-1]\n\n    #sets first to reversed first\n    first = first[::-1]\n\n    #sets middle to middle of line\n    middle = line[ln/2]\n\n    #if first and second are the same and line is the same as reversed line\n    if first == second and line == line[::-1]:\n        return True\n    else:\n        return False\n\nif __name__ == "__main__":\n    #imports script, filename\n    from sys import argv\n    script, filename = argv\n    \n    #sets txt to open filename\n    txt = open(filename)\n    \n    #sets line to read txt\n    line = txt.read()\n    \n    print is_palindrome(line)\n', '\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2:]\n\n#sets second to reversed second\nsecond = second[::-1]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2+1]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n\nprint line\n']
2022-04-15 23:05:57.385413 size on output set 3
2022-04-15 23:05:57.385426 num operations 1
2022-04-15 23:05:57.385432 size on input set 1
2022-04-15 23:06:00.160309 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ninput_str = input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443: ')\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('\u0414\u0430')\nelse:\n    print('\u041d\u0435\u0442')\n"
    },
    {
      "index": 1,
      "text": "\n\ninput_str = raw_input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 2,
      "text": "\n\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n        \nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    }
  ],
  "created": 1650063957,
  "object": "edit"
}
2022-04-15 23:06:00.160571 fix syntax errors 3 ["\n\ninput_str = input('Введите строку: ')\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Да')\nelse:\n    print('Нет')\n", "\n\ninput_str = raw_input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n", "\n\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n        \nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"]
2022-04-15 23:06:00.160609 size on output set 3
