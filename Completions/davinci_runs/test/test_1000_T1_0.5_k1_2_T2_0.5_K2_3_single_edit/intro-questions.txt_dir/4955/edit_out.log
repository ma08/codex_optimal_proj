2022-04-16 03:07:29.850259 num operations 1
2022-04-16 03:07:29.850277 size on input set 1
2022-04-16 03:07:32.006068 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##'] \n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650078450,
  "object": "edit"
}
2022-04-16 03:07:32.006312 fix syntax errors 3 ["\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##'] \n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 03:07:32.006433 size on output set 2
2022-04-16 03:07:32.006444 num operations 1
2022-04-16 03:07:32.006450 size on input set 1
2022-04-16 03:07:38.109293 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650078452,
  "object": "edit"
}
2022-04-16 03:07:38.109493 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 03:07:38.109535 size on output set 3
2022-04-16 03:07:38.109546 num operations 1
2022-04-16 03:07:38.109552 size on input set 1
2022-04-16 03:08:09.157423 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"
    },
    {
      "index": 1,
      "text": "\n\n#Program starts here\nimport sys \n\n#Reading in input\nn = int(sys.stdin.readline().strip()) \nnotes = sys.stdin.readline().strip().split() \n\n#Initializing variables\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11} \nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'] \n\n#Finding the scale\nif notes[0] in notes_dict: \n    starting_note = notes_dict[notes[0]] \nelse: \n    starting_note = notes_dict[notes[0][0] + '#'] \n\nscale_dict = {} \n\nfor i in range(0, 12): \n    scale_dict[i] = [0] * 12 \n\nfor i in range(0, 12): \n    scale_dict[i][i] = 1 \n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1 \n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1 \n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1 \n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1 \n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1 \n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1 \n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1 \n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1 \n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1 \n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1 \n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n#Checking if the notes fit in the scale \nfits = False\n\nfor i in range(0, 12): \n    if scale_dict[i][starting_note] == 1: \n        fits = True \n        for j in range(0, n): \n            if notes[j] in notes_dict: \n                if scale_dict[i][notes_dict[notes[j]]] == 0: \n                    fits = False \n            elif notes[j][0] + '#' in notes_dict: \n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0: \n                    fits = False \n        if fits == True: \n            print(notes_list[i], end=' ') \n\nif fits == False: \n    print('none') \n"
    },
    {
      "index": 2,
      "text": "\n\n#Program starts here\n\ndef find_scale(notes):\n    #Initializing variables\n    notes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\n    notes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n    #Finding the scale\n    if notes[0] in notes_dict:\n        starting_note = notes_dict[notes[0]]\n    else:\n        starting_note = notes_dict[notes[0][0] + '#']\n\n    scale_dict = {}\n\n    for i in range(0, 12):\n        scale_dict[i] = [0] * 12\n\n    for i in range(0, 12):\n        scale_dict[i][i] = 1\n\n        if i + 2 <= 11:\n            scale_dict[i][i + 2] = 1\n        elif i + 2 > 11:\n            scale_dict[i][i + 2 - 12] = 1\n\n        if i + 4 <= 11:\n            scale_dict[i][i + 4] = 1\n        elif i + 4 > 11:\n            scale_dict[i][i + 4 - 12] = 1\n\n        if i + 5 <= 11:\n            scale_dict[i][i + 5] = 1\n        elif i + 5 > 11:\n            scale_dict[i][i + 5 - 12] = 1\n\n        if i + 7 <= 11:\n            scale_dict[i][i + 7] = 1\n        elif i + 7 > 11:\n            scale_dict[i][i + 7 - 12] = 1\n\n        if i + 9 <= 11:\n            scale_dict[i][i + 9] = 1\n        elif i + 9 > 11:\n            scale_dict[i][i + 9 - 12] = 1\n\n        if i + 11 <= 11:\n            scale_dict[i][i + 11] = 1\n        elif i + 11 > 11:\n            scale_dict[i][i + 11 - 12] = 1\n\n\n#Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"
    }
  ],
  "created": 1650078458,
  "object": "edit"
}
2022-04-16 03:08:09.157715 fix syntax errors 3 ["\nimport sys\n\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n", "\n\n#Program starts here\nimport sys \n\n#Reading in input\nn = int(sys.stdin.readline().strip()) \nnotes = sys.stdin.readline().strip().split() \n\n#Initializing variables\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11} \nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'] \n\n#Finding the scale\nif notes[0] in notes_dict: \n    starting_note = notes_dict[notes[0]] \nelse: \n    starting_note = notes_dict[notes[0][0] + '#'] \n\nscale_dict = {} \n\nfor i in range(0, 12): \n    scale_dict[i] = [0] * 12 \n\nfor i in range(0, 12): \n    scale_dict[i][i] = 1 \n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1 \n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1 \n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1 \n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1 \n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1 \n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1 \n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1 \n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1 \n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1 \n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1 \n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n#Checking if the notes fit in the scale \nfits = False\n\nfor i in range(0, 12): \n    if scale_dict[i][starting_note] == 1: \n        fits = True \n        for j in range(0, n): \n            if notes[j] in notes_dict: \n                if scale_dict[i][notes_dict[notes[j]]] == 0: \n                    fits = False \n            elif notes[j][0] + '#' in notes_dict: \n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0: \n                    fits = False \n        if fits == True: \n            print(notes_list[i], end=' ') \n\nif fits == False: \n    print('none') \n", "\n\n#Program starts here\n\ndef find_scale(notes):\n    #Initializing variables\n    notes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\n    notes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n    #Finding the scale\n    if notes[0] in notes_dict:\n        starting_note = notes_dict[notes[0]]\n    else:\n        starting_note = notes_dict[notes[0][0] + '#']\n\n    scale_dict = {}\n\n    for i in range(0, 12):\n        scale_dict[i] = [0] * 12\n\n    for i in range(0, 12):\n        scale_dict[i][i] = 1\n\n        if i + 2 <= 11:\n            scale_dict[i][i + 2] = 1\n        elif i + 2 > 11:\n            scale_dict[i][i + 2 - 12] = 1\n\n        if i + 4 <= 11:\n            scale_dict[i][i + 4] = 1\n        elif i + 4 > 11:\n            scale_dict[i][i + 4 - 12] = 1\n\n        if i + 5 <= 11:\n            scale_dict[i][i + 5] = 1\n        elif i + 5 > 11:\n            scale_dict[i][i + 5 - 12] = 1\n\n        if i + 7 <= 11:\n            scale_dict[i][i + 7] = 1\n        elif i + 7 > 11:\n            scale_dict[i][i + 7 - 12] = 1\n\n        if i + 9 <= 11:\n            scale_dict[i][i + 9] = 1\n        elif i + 9 > 11:\n            scale_dict[i][i + 9 - 12] = 1\n\n        if i + 11 <= 11:\n            scale_dict[i][i + 11] = 1\n        elif i + 11 > 11:\n            scale_dict[i][i + 11 - 12] = 1\n\n\n#Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"]
2022-04-16 03:08:09.157790 size on output set 3
2022-04-16 03:08:09.157800 num operations 1
2022-04-16 03:08:09.157805 size on input set 1
2022-04-16 03:08:11.364441 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\n\nmain()\n"
    }
  ],
  "created": 1650078489,
  "object": "edit"
}
2022-04-16 03:08:11.364690 fix syntax errors 3 ['#!/usr/bin/python3\n\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n', '\nimport sys\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n', '\nimport sys\n\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\n\nmain()\n']
2022-04-16 03:08:11.364734 size on output set 3
2022-04-16 03:08:11.364744 num operations 1
2022-04-16 03:08:11.364750 size on input set 1
2022-04-16 03:08:14.865067 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'])\n\t['A#', 'C', 'D#', 'F']\n\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 1])\n\t\t\telse:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 2])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint 'none'\n\telse:\n\t\tprint ' '.join(scales)\n\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'])\n\t['A#', 'C', 'D#', 'F']\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 1])\n\t\t\telse:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 2])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint('none')\n\telse:\n\t\tprint(' '.join(scales))\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'])\n\t['A#', 'C', 'D#', 'F']\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint 'none'\n\telse:\n\t\tprint ' '.join(scales)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    }
  ],
  "created": 1650078491,
  "object": "edit"
}
2022-04-16 03:08:14.865267 fix syntax errors 3 ['\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'])\n\t[\'A#\', \'C\', \'D#\', \'F\']\n\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 1])\n\t\t\telse:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 2])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint \'none\'\n\telse:\n\t\tprint \' \'.join(scales)\n\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n', '\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'])\n\t[\'A#\', \'C\', \'D#\', \'F\']\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 1])\n\t\t\telse:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 2])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint(\'none\')\n\telse:\n\t\tprint(\' \'.join(scales))\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n', '\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'])\n\t[\'A#\', \'C\', \'D#\', \'F\']\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint \'none\'\n\telse:\n\t\tprint \' \'.join(scales)\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n']
2022-04-16 03:08:14.865308 size on output set 3
2022-04-16 03:08:14.865319 num operations 1
2022-04-16 03:08:14.865325 size on input set 1
2022-04-16 03:08:20.800823 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 1:\n        return False\n    elif notes[2] != notes[1] + 1:\n        return False\n    elif notes[3] != notes[2] + 2:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 1:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales] # convert to letters\n    if len(valid_scales) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650078494,
  "object": "edit"
}
2022-04-16 03:08:20.801042 fix syntax errors 3 ['\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 1:\n        return False\n    elif notes[2] != notes[1] + 1:\n        return False\n    elif notes[3] != notes[2] + 2:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 1:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales] # convert to letters\n    if len(valid_scales) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 03:08:20.801165 size on output set 3
2022-04-16 03:08:20.801177 num operations 1
2022-04-16 03:08:20.801182 size on input set 1
2022-04-16 03:08:29.133437 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = input().split(\" \")\n    notes.append(notes[0])\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(sorted(scales)))\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nnotes = input().split()\nnotes.append(notes[0])\nscales = []\nfor i in range(12):\n    scale = [notes[i]]\n    for j in range(1, 8):\n        if j % 7 == 0:\n            scale.append(notes[i])\n        elif j % 7 == 1 or j % 7 == 2:\n            scale.append(notes[i+2])\n        else:\n            scale.append(notes[i+1])\n    if set(notes) <= set(scale):\n        scales.append(notes[i])\nif scales:\n    print(\" \".join(scales))\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    notes.append(notes[0])\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 in (1, 2):\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1650078500,
  "object": "edit"
}
2022-04-16 03:08:29.133616 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    notes = input().split(" ")\n    notes.append(notes[0])\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(sorted(scales)))\n    else:\n        print("none")\n\nmain()\n', '\nn = int(input())\nnotes = input().split()\nnotes.append(notes[0])\nscales = []\nfor i in range(12):\n    scale = [notes[i]]\n    for j in range(1, 8):\n        if j % 7 == 0:\n            scale.append(notes[i])\n        elif j % 7 == 1 or j % 7 == 2:\n            scale.append(notes[i+2])\n        else:\n            scale.append(notes[i+1])\n    if set(notes) <= set(scale):\n        scales.append(notes[i])\nif scales:\n    print(" ".join(scales))\nelse:\n    print("none")\n', '\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    notes.append(notes[0])\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 in (1, 2):\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n']
2022-04-16 03:08:29.133652 size on output set 3
2022-04-16 03:08:29.133662 num operations 1
2022-04-16 03:08:29.133668 size on input set 1
2022-04-16 03:08:35.174532 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song] # convert to numbers\n    scales = []\n    for i in range(12):\n        if valid(i, song): # check if scale is valid\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales])) # convert back to letters\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12] # major scale\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12, (i+12)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650078509,
  "object": "edit"
}
2022-04-16 03:08:35.174745 fix syntax errors 3 ['\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song] # convert to numbers\n    scales = []\n    for i in range(12):\n        if valid(i, song): # check if scale is valid\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales])) # convert back to letters\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12] # major scale\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n', '\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n', '\n\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12, (i+12)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n']
2022-04-16 03:08:35.174881 size on output set 3
