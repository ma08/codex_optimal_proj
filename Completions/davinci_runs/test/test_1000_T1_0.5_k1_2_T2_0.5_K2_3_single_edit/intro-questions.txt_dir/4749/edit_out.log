2022-04-16 01:02:36.445139 num operations 1
2022-04-16 01:02:36.445154 size on input set 1
2022-04-16 01:02:42.149960 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0 or grid[i].count('BWW') > 0 or grid[i].count('WBW') > 0 or grid[i].count('WWB') > 0 or grid[i].count('WBW') > 0 or grid[i].count('WBB') > 0 or grid[i].count('BWB') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0: # check for 3 consecutive squares of the same color\n        print(0)\n        exit()\n    for j in range(n-2): # check for 3 consecutive squares of the same color\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]: \n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if 'BBB' in grid[i] or 'WWW' in grid[i]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1650070956,
  "object": "edit"
}
2022-04-16 01:02:42.150254 fix syntax errors 3 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0 or grid[i].count('BWW') > 0 or grid[i].count('WBW') > 0 or grid[i].count('WWB') > 0 or grid[i].count('WBW') > 0 or grid[i].count('WBB') > 0 or grid[i].count('BWB') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0: # check for 3 consecutive squares of the same color\n        print(0)\n        exit()\n    for j in range(n-2): # check for 3 consecutive squares of the same color\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]: \n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if 'BBB' in grid[i] or 'WWW' in grid[i]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-16 01:02:42.150303 size on output set 3
2022-04-16 01:02:42.150314 num operations 1
2022-04-16 01:02:42.150319 size on input set 1
2022-04-16 01:02:44.048557 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input().strip())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid() == True:\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 2,
      "text": "#\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    }
  ],
  "created": 1650070962,
  "object": "edit"
}
2022-04-16 01:02:44.048830 fix syntax errors 3 ['\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input().strip())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid() == True:\n    print(1)\nelse:\n    print(0)\n', '#\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n']
2022-04-16 01:02:44.048999 size on output set 3
2022-04-16 01:02:44.049041 num operations 1
2022-04-16 01:02:44.049049 size on input set 1
2022-04-16 01:02:46.758418 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 1\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 1\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    }
  ],
  "created": 1650070964,
  "object": "edit"
}
2022-04-16 01:02:46.758693 fix syntax errors 3 ['\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 1\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 1\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n']
2022-04-16 01:02:46.758732 size on output set 2
2022-04-16 01:02:46.758748 num operations 1
2022-04-16 01:02:46.758753 size on input set 1
2022-04-16 01:02:56.194458 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row\nnum_black = [grid[i].count('B') for i in range(n)]\nnum_white = [grid[i].count('W') for i in range(n)]\nif (num_black != num_white) or (n % 2 == 1):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = [grid[j][i] == 'B' for j in range(n)]\n    num_white = [grid[j][i] == 'W' for j in range(n)]\n    if (num_black != num_white) or (n % 2 == 1):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif num_black != num_white:\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if num_black != num_white:\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if grid[i][0] == grid[i][1] == grid[i][2]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n    if grid[i][n-3] == grid[i][n-2] == grid[i][n-1]:\n        print(0)\n        exit()\n\nfor i in range(n):\n    if grid[0][i] == grid[1][i] == grid[2][i]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[j][i] == grid[j+1][i] == grid[j+2][i]:\n            print(0)\n            exit()\n    if grid[n-3][i] == grid[n-2][i] == grid[n-1][i]:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "'''\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n'''\n"
    }
  ],
  "created": 1650070966,
  "object": "edit"
}
2022-04-16 01:02:56.194929 fix syntax errors 3 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row\nnum_black = [grid[i].count('B') for i in range(n)]\nnum_white = [grid[i].count('W') for i in range(n)]\nif (num_black != num_white) or (n % 2 == 1):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = [grid[j][i] == 'B' for j in range(n)]\n    num_white = [grid[j][i] == 'W' for j in range(n)]\n    if (num_black != num_white) or (n % 2 == 1):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif num_black != num_white:\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if num_black != num_white:\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if grid[i][0] == grid[i][1] == grid[i][2]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n    if grid[i][n-3] == grid[i][n-2] == grid[i][n-1]:\n        print(0)\n        exit()\n\nfor i in range(n):\n    if grid[0][i] == grid[1][i] == grid[2][i]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[j][i] == grid[j+1][i] == grid[j+2][i]:\n            print(0)\n            exit()\n    if grid[n-3][i] == grid[n-2][i] == grid[n-1][i]:\n        print(0)\n        exit()\n\nprint(1)\n", "'''\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n'''\n"]
2022-04-16 01:02:56.194996 size on output set 3
2022-04-16 01:02:56.195009 num operations 1
2022-04-16 01:02:56.195015 size on input set 1
2022-04-16 01:03:00.611988 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2] or\n                [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]):\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] or [row[i] for row in grid][j] == [row[i] for row in grid][j + 1] == [row[i] for row in grid][j + 2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n\n# if the grid is correct, print 1\nprint(1)\n"
    }
  ],
  "created": 1650070976,
  "object": "edit"
}
2022-04-16 01:03:00.612262 fix syntax errors 3 ["\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2] or\n                [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]):\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] or [row[i] for row in grid][j] == [row[i] for row in grid][j + 1] == [row[i] for row in grid][j + 2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n\n# if the grid is correct, print 1\nprint(1)\n"]
2022-04-16 01:03:00.612403 size on output set 3
2022-04-16 01:03:00.612417 num operations 1
2022-04-16 01:03:00.612423 size on input set 1
2022-04-16 01:03:05.765183 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n\nn = int(sys.stdin.readline())\ngrid = [sys.stdin.readline() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        sys.stdout.write(str(0))\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            sys.stdout.write(str(0))\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        sys.stdout.write(str(0))\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            sys.stdout.write(str(0))\n            exit()\n\nsys.stdout.write(str(1))\n"
    },
    {
      "index": 2,
      "text": "import sys\ninput = sys.stdin.readline\n\n\nn = int(input())\ngrid = [input().strip() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1650070980,
  "object": "edit"
}
2022-04-16 01:03:05.765388 fix syntax errors 3 ["\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "import sys\n\n\nn = int(sys.stdin.readline())\ngrid = [sys.stdin.readline() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        sys.stdout.write(str(0))\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            sys.stdout.write(str(0))\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        sys.stdout.write(str(0))\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            sys.stdout.write(str(0))\n            exit()\n\nsys.stdout.write(str(1))\n", "import sys\ninput = sys.stdin.readline\n\n\nn = int(input())\ngrid = [input().strip() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-16 01:03:05.765426 size on output set 3
2022-04-16 01:03:05.765438 num operations 1
2022-04-16 01:03:05.765444 size on input set 1
2022-04-16 01:03:14.358042 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)  # length of grid\n    # check if row has equal number of black and white squares\n    for row in grid:  # iterate through rows\n        if row.count('B') != row.count('W'):  # check if number of black squares is equal to number of white squares\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):  # iterate through columns\n        column = [row[i] for row in grid]  # get column\n        if column.count('B') != column.count('W'):  # check if number of black squares is equal to number of white squares\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:  # iterate through rows\n        if 'BBB' in row or 'WWW' in row:  # check if there are more than two consecutive squares of the same color\n            return False\n    for i in range(n):  # iterate through columns\n        column = [row[i] for row in grid]  # get column\n        if 'BBB' in column or 'WWW' in column:  # check if there are more than two consecutive squares of the same color\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid[0])\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in ''.join(column) or 'WWW' in ''.join(column):\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    }
  ],
  "created": 1650070985,
  "object": "edit"
}
2022-04-16 01:03:14.358306 fix syntax errors 3 ["\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)  # length of grid\n    # check if row has equal number of black and white squares\n    for row in grid:  # iterate through rows\n        if row.count('B') != row.count('W'):  # check if number of black squares is equal to number of white squares\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):  # iterate through columns\n        column = [row[i] for row in grid]  # get column\n        if column.count('B') != column.count('W'):  # check if number of black squares is equal to number of white squares\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:  # iterate through rows\n        if 'BBB' in row or 'WWW' in row:  # check if there are more than two consecutive squares of the same color\n            return False\n    for i in range(n):  # iterate through columns\n        column = [row[i] for row in grid]  # get column\n        if 'BBB' in column or 'WWW' in column:  # check if there are more than two consecutive squares of the same color\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid[0])\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in ''.join(column) or 'WWW' in ''.join(column):\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"]
2022-04-16 01:03:14.358357 size on output set 3
2022-04-16 01:03:14.358369 num operations 1
2022-04-16 01:03:14.358374 size on input set 1
2022-04-16 01:03:23.540675 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(\"hello\")\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1)\n    else:\n        print(2)\n"
    }
  ],
  "created": 1650070994,
  "object": "edit"
}
2022-04-16 01:03:23.540874 fix syntax errors 3 ['\nprint("hello")\n', "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", '\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1)\n    else:\n        print(2)\n']
2022-04-16 01:03:23.540906 size on output set 3
