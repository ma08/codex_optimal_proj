2022-04-16 00:17:29.362699 num operations 1
2022-04-16 00:17:29.362715 size on input set 1
2022-04-16 00:17:32.190766 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def getRow(self, rowIndex: int):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))  # [1,3,3,1]\n    print(s.getRow2(3))  # [1,3,3,1]\n"
    },
    {
      "index": 1,
      "text": "class Solution:\n    def getRow(self, rowIndex: int):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n"
    },
    {
      "index": 2,
      "text": "\nclass Solution:\n    def getRow(self, rowIndex):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n"
    }
  ],
  "created": 1650068249,
  "object": "edit"
}
2022-04-16 00:17:32.191023 fix syntax errors 3 ["class Solution:\n    def getRow(self, rowIndex: int):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))  # [1,3,3,1]\n    print(s.getRow2(3))  # [1,3,3,1]\n", "class Solution:\n    def getRow(self, rowIndex: int):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n", "\nclass Solution:\n    def getRow(self, rowIndex):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n"]
2022-04-16 00:17:32.191059 size on output set 3
2022-04-16 00:17:32.191069 num operations 1
2022-04-16 00:17:32.191075 size on input set 1
2022-04-16 00:17:33.603054 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n"
    },
    {
      "index": 1,
      "text": "from typing import List\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n"
    },
    {
      "index": 2,
      "text": "from typing import List\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n"
    }
  ],
  "created": 1650068252,
  "object": "edit"
}
2022-04-16 00:17:33.603240 fix syntax errors 3 ['\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n', 'from typing import List\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n', 'from typing import List\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n']
2022-04-16 00:17:33.603275 size on output set 2
