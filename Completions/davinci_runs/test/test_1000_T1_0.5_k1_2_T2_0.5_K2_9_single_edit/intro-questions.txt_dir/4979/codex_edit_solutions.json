["\n\ndef main():\n    print(int(bin(int(input()))[2:][::-1], 2))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef reverse_binary(num):\n    return int(str(bin(num)[:1:-1]), 2)\n\nprint(reverse_binary(int(input())))\n", "#!/usr/bin/env python3\n\ndef reverse_binary(num):\n    return int(str(bin(num))[:1:-1], 2)\n\nprint(reverse_binary(int(input())))\n", "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(int(bin(n)[:1:-1], 2))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2))\n\nif __name__ == \"__main__\":\n    print(reverse_binary(int(input())))\n", "\nimport sys\n\ndef main():\n\tnum = int(sys.stdin.readline())\n\trev_num = 0\n\n\twhile num > 0:\n\t\trev_num = rev_num << 1\n\t\trev_num = rev_num | (num & 1)\n\t\tnum = num >> 1\n\n\tprint(rev_num)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\n\nimport sys\n\ndef reverse_binary(n):\n    return int(bin(n)[:1:-1], 2)\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    print(reverse_binary(n))\n", "\n\ndef reverse_binary(num):\n    return int(str(bin(num))[:1:-1], 2) \n\nprint(reverse_binary(int(input())))\n", "\ndef reverse_binary(num):\n    return int(str(bin(num))[:1:-1], 2)\n\nprint(reverse_binary(int(input())))\n", "\n\ndef reverse_binary(n: int) -> int:\n    return int(bin(n)[2:][::-1], base=2)\n\nif __name__ == \"__main__\":\n    print(reverse_binary(int(input())))\n", "\nimport sys\n\ndef reverse_binary(n):\n    return int(bin(n)[:1:-1], 2)\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    print(reverse_binary(n))\n", "\n\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2) \n\nif __name__ == \"__main__\":\n    print(reverse_binary(int(input())))\n", "\nimport sys\n\ndef main():\n    num = int(sys.stdin.readline())\n    rev_num = 0\n\n    while num > 0:\n        rev_num = rev_num << 1\n        rev_num = rev_num | (num & 1)\n        num = num >> 1\n\n    print(rev_num)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    print(int(bin(n)[2:][::-1], 2))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    print(int(bin(n)[2:][::-1],2))\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Oct 10 20:56:06 2019\n@author: chris\n\"\"\"\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nimport os\nimport cv2\nfrom skimage.feature import hog\nfrom skimage import data, exposure\nfrom sklearn.svm import LinearSVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nimport time\nfrom sklearn.externals import joblib\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import matthews_corrcoef\nfrom sklearn.metrics import hinge_loss\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import jaccard_similarity_score\nfrom sklearn.metrics import zero_one_loss\nfrom sklearn.metrics import brier_score_loss\nfrom sklearn.metrics import explained_variance_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.metrics import median_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import adjusted_rand_score\nfrom sklearn.metrics import adjusted_mutual_info_score\nfrom sklearn.metrics import homogeneity_completeness_v_measure\nfrom sklearn.metrics import homogeneity_score\nfrom sklearn.metrics import completeness_score\nfrom sklearn.metrics import v_measure_score\nfrom sklearn.metrics import mutual_info_score\nfrom sklearn.metrics import normalized_mutual_info_score\nfrom sklearn.metrics import fowlkes_mallows_score\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.metrics import calinski_harabaz_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import brier_score_loss\nfrom sklearn.metrics import hamming_loss\nfrom sklearn.metrics import jaccard_score\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import multilabel_confusion_matrix\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import plot_precision_recall_curve\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import plot_roc_curve\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import SCORERS\n", "\n\ndef reverse_binary(num):\n    return int(str(bin(num))[:1:-1], 2)\n", "\n\nm = int(input())\nn = int(input())\n\nprint(int(m/n))\nprint(m%n)\nprint(divmod(m,n))\n", "\n\ndef main():\n    n = int(input())\n    print(int(bin(n)[2:][::-1], 2))\n\n\nif __name__ == \"__main__\":\n    main()\n", "def reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2)\n\n\nprint(reverse_binary(int(input())))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2)\n\nprint(reverse_binary(int(input())))\n", "\ndef main():\n    n = int(input())\n    print(int(bin(n)[2:][::-1], 2))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    num = int(sys.stdin.readline())\n    rev_num = 0\n\n    while num > 0:\n        rev_num = rev_num << 1\n        rev_num = rev_num | (num & 1)\n        num >>= 1\n\n    print(rev_num)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    num = int(sys.stdin.readline())\n    rev_num = 0\n\n    while num > 0:\n        rev_num = rev_num << 1\n        rev_num = rev_num | (num & 1)\n        num = num >> 1\n\n    print(rev_num)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n = int(input())\n    print(int(bin(n)[2:][::-1], 2))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef reverse_binary(n):\n    return int(bin(n)[:1:-1], 2))\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    print(reverse_binary(n))\n", "\n\ndef reverse_binary(num):\n    return int(bin(num)[2:][::-1], 2)\n\nprint(reverse_binary(int(input())))\n", "\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2)\n\nif __name__ == \"__main__\":\n    print(reverse_binary(int(input())))\n", "\n\ndef reverse_binary(num):\n    return int(str(bin(num))[2:][::-1], 2)\n\nprint(reverse_binary(int(input())))\n", "\ndef main():\n    n = int(input())\n    print(int(bin(n)[2:][::-1], 2))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2) \n\nprint(reverse_binary(int(input())))\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(int(bin(n)[:1:-1], 2))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef reverse_binary(n):\n    return int(bin(n)[:1:-1], 2) \n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    print(reverse_binary(n))\n", "\n\nimport sys\n\ndef reverse_binary(n):\n    return int(bin(n)[:1:-1], 2)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(reverse_binary(n))\n", "\n\ndef reverse_binary(num):\n    return int(str(bin(num))[:1:-1], 2) # b[:1:-1] is the same as b[:-2:-1]\n\nprint(reverse_binary(int(input())))\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(int(bin(n)[:1:-1], 2), end='')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2)\n\nif __name__ == \"__main__\":\n    print(reverse_binary(int(input()))) \n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(int(bin(n)[:1:-1], 2))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    print(int(bin(n)[2:][::-1], 2)) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2)\n\nif __name__ == \"__main__\":\n    print(reverse_binary(int(input()))\n", "\n\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2) # bin(n)[2:] removes 0b\n\nprint(reverse_binary(int(input())))\n", "\n#\n# def main():\n#     n = int(input())\n#     print(int(bin(n)[2:][::-1], 2))\n#\n# if __name__ == \"__main__\":\n#     main()\n", "\n\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1],2)\n\nprint(reverse_binary(int(input())))\n", "\n\nimport sys\n\nnum = int(sys.stdin.readline().strip())\nprint(int(str(bin(num))[:1:-1], 2))\n", "\n\ndef reverse_binary(n): \n return int(bin(n)[2:][::-1], 2)\n\nif __name__ == \"__main__\":\n    print(reverse_binary(int(input())))\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(int(bin(n)[:1:-1], 2))  # print the reversed binary representation of the number\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef reverse_binary(n): \n    return int(bin(n)[2:][::-1], 2) \n\nif __name__ == \"__main__\": \n    print(reverse_binary(int(input()))) \n", "\nimport sys\n\ndef reverse_binary(n):\n    return int(bin(n)[:1:-1],2)\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.read().strip())\n    print(reverse_binary(n))\n", "\n#\n# import sys\n#\n# def main():\n#     n = int(sys.stdin.readline())\n#     print(int(bin(n)[:1:-1], 2))\n#\n# if __name__ == \"__main__\":\n#     main()\n", "import sys\n\ndef main():\n    num = int(sys.stdin.readline())\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num << 1\n        rev_num = rev_num | (num & 1)\n        num = num >> 1\n    print(rev_num)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef reverse_binary(n):\n    return int(bin(n)[:1:-1], 2)\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    print(reverse_binary(n))\n", "\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2)\nprint(reverse_binary(int(input())))\n", "import sys\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    print(int(bin(n)[:1:-1], 2))\n", "\n\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2) # bin(n)[2:] removes the 0b\n\nprint(reverse_binary(int(input())))\n", "\ndef reverse_binary(n):\n    return int(bin(n)[2:][::-1], 2)\n\nprint(reverse_binary(int(input())))\n", "#! /usr/bin/env python3\n\nimport sys\n\ndef main():\n    num = int(sys.stdin.readline())\n    rev_num = 0\n\n    while num > 0:\n        rev_num = rev_num << 1\n        rev_num = rev_num | (num & 1)\n        num = num >> 1\n\n    print(rev_num)\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/python\nimport os\nimport time\nimport subprocess\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\nfrom email import encoders\n \nuser = \"username\"\npassword = \"password\"\n \nrecipients = ['email']\n \nemaillist = [elem.strip().split(',') for elem in recipients]\nmsg = MIMEMultipart()\nmsg['Subject'] = \"Subject\"\nmsg['From'] = 'email'\nmsg['Reply-to'] = 'email'\n \nmsg.preamble = \"Multipart message.\\n\"\n \npart = MIMEText(\"Body\")\nmsg.attach(part)\n \npart = MIMEBase('application', \"octet-stream\")\npart.set_payload(open(\"file\", \"rb\").read())\nencoders.encode_base64(part)\npart.add_header('Content-Disposition', 'attachment; filename=\"file\"')\nmsg.attach(part)\n \nserver = smtplib.SMTP(\"smtp.gmail.com:587\")\nserver.ehlo()\nserver.starttls()\nserver.login(user,password)\n \nserver.sendmail(msg['From'], emaillist , msg.as_string())\n", "import sys\n\nimport sys\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    res = 0\n\n    while num > 0:\n        res = res << 1\n        res = res | (num & 1)\n        num = num >> 1\n\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef reverse_binary(n): return int(bin(n)[:1:-1], 2)\n\nif __name__ == \"__main__\": n = int(sys.stdin.readline()); print(reverse_binary(n))\n"]