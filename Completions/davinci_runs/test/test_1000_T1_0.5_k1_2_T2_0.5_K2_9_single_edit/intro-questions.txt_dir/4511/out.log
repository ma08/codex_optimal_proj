2022-04-09 20:34:27.750513 """
You are playing a computer card game called Splay the Sire. Currently you are struggling to defeat the final boss of the game.

The boss battle consists of $n$ turns. During each turn, you will get several cards. Each card has two parameters: its cost $c_i$ and damage $d_i$. You may play some of your cards during each turn in some sequence (you choose the cards and the exact order they are played), as long as the total cost of the cards you play during the turn does not exceed $3$. After playing some (possibly zero) cards, you end your turn, and all cards you didn't play are discarded. Note that you can use each card at most once.

Your character has also found an artifact that boosts the damage of some of your actions: every $10$-th card you play deals double damage.

What is the maximum possible damage you can deal during $n$ turns?


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of turns.

Then $n$ blocks of input follow, the $i$-th block representing the cards you get during the $i$-th turn.

Each block begins with a line containing one integer $k_i$ ($1 \le k_i \le 2 \cdot 10^5$) — the number of cards you get during $i$-th turn. Then $k_i$ lines follow, each containing two integers $c_j$ and $d_j$ ($1 \le c_j \le 3$, $1 \le d_j \le 10^9$) — the parameters of the corresponding card.

It is guaranteed that $\sum \limits_{i = 1}^{n} k_i \le 2 \cdot 10^5$.


-----Output-----

Print one integer — the maximum damage you may deal.


-----Example-----
Input
5
3
1 6
1 7
1 5
2
1 4
1 3
3
1 10
3 5
2 3
3
1 15
2 4
1 10
1
1 100

Output
263



-----Note-----

In the example test the best course of action is as follows:

During the first turn, play all three cards in any order and deal $18$ damage.

During the second turn, play both cards and deal $7$ damage.

During the third turn, play the first and the third card and deal $13$ damage.

During the fourth turn, play the first and the third card and deal $25$ damage.

During the fifth turn, play the only card, which will deal double damage ($200$).
"""
2022-04-09 20:34:27.750534 --------------------------
2022-04-09 20:34:43.475449 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649550868,
  "id": "cmpl-4vFp6ToLDTv69evzp11N91CHxUOtV",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:34:43.475846 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)"
}
2022-04-09 20:34:43.475914 REASON stop
2022-04-09 20:34:43.478030 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:34:43.478228 REASON stop
