["\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True) # sort by damage\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    turn_dict = {}\n    for i in range(n):\n        k = int(sys.stdin.readline())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in sys.stdin.readline().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef get_damage(turns):\n    damage = 0\n    for _ in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 30:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    return damage\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    print(get_damage(turns))\n", "\n\ndef get_damage(turns):\n    damage = 0\n    for _ in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\nimport sys\n\nn = int(input())\nturn_dict = {}\nfor i in range(n):\n    k = int(input())\n    turn_dict[i] = []\n    for j in range(k):\n        c, d = [int(x) for x in input().split()]\n        turn_dict[i].append((c, d))\ndamage = 0\nfor i in range(n):\n    turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n    turn_cost = 0\n    turn_damage = 0\n    for card in turn_dict[i]:\n        if turn_cost + card[0] <= 3:\n            turn_cost += card[0]\n            if turn_cost % 10 == 0:\n                turn_damage += card[1] * 2\n            else:\n                turn_damage += card[1]\n    damage += turn_damage\nprint(damage)\n", "\n\n\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    for i in range(m):\n        print(a[i] + b[i] + c[i] + d[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True) # sort cards by damage in descending order\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "def get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    return damage\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    print(get_damage(turns))\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    turn_dict = {}\n    for i in range(n):\n        k = int(sys.stdin.readline())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in sys.stdin.readline().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_damage(turns):\n    total_damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        total_damage += turn_damage\n    print(total_damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\n\ndef main():\n    n = int(input())\n    turn_dict = []\n    for i in range(n):\n        k = int(input())\n        turn_dict.append([])\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append([c, d])\n    damage = 0\n    for i in range(n):\n        turn_dict[i] = sorted(turn_dict[i], key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    return damage\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    print(get_damage(turns))\n", "\n#\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"]