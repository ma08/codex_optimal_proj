["\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = map(int, input().split())\n    intervals = map(int, input().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))[:n]\n    intervals = list(map(int, input().split()))[:m]\n    tasks.sort()\n    intervals.sort()\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n            if total >= m:\n                break\n            if tasks[i] <= intervals[total]:\n                total += 1\n    print(total)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] >= intervals[total]:\n            total += 1\n    print(total)\n\nmain()\n", "#\n#\n# import sys\n# import math\n#\n# def main():\n#     n, m = map(int, sys.stdin.readline().split())\n#     tasks = map(int, sys.stdin.readline().split())\n#     intervals = map(int, sys.stdin.readline().split())\n#     tasks.sort()\n#     intervals.sort()\n#     tasks.append(math.inf)\n#     intervals.append(math.inf)\n#     i = 0\n#     j = 0\n#     count = 0\n#     while i < n and j < m:\n#         if tasks[i] <= intervals[j]:\n#             count += 1\n#             i += 1\n#         j += 1\n#     print(count)\n#\n# main()\n", "\n\ndef main(n, m, tasks, quiet):\n    # # Read in the input\n    # n, m = map(int, input().split(' '))\n    # tasks = list(map(int, input().split(' ')))\n    # quiet = list(map(int, input().split(' ')))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    return completed\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split(' '))\n    tasks = list(map(int, input().split(' ')))\n    quiet = list(map(int, input().split(' ')))\n    print(main(n, m, tasks, quiet))\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count) \n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    task_lens = list(map(int, input().split()))\n    quiet_lens = list(map(int, input().split()))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        else:\n            j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    task_times = list(map(int, input().split()))\n    quiet_times = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(m):\n            if task_times[i] <= quiet_times[j]:\n                print(j+1)\n                break\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = [int(x) for x in sys.stdin.readline().split()]\n    intervals = [int(x) for x in sys.stdin.readline().split()]\n    tasks.sort()\n    intervals.sort()\n    tasks.append(float(\"inf\"))\n    intervals.append(float(\"inf\"))\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\nimport math\nimport heapq\nfrom collections import deque\nimport sys\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n)]\n\n    for _ in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n\n    for _ in range(k):\n        c, d = map(int, sys.stdin.readline().split())\n\n    for i in range(n):\n        print(len(graph[i]), end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n#\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\nif __name__ == \"__main__\":\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())  # n: number of tasks, m: number of free times\n    tasks = sorted(map(int, sys.stdin.readline().split()))  # list of tasks\n    free_times = sorted(map(int, sys.stdin.readline().split()))  # list of free times\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split('\\n'))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, input().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count, end='')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split())) #t[i]: i\ubc88 \uc77c\uc790\uc5d0 \uc788\ub294 \ud654\uc11d\uc758 \uc218\n    l = list(map(int, sys.stdin.readline().split())) #l[j]: j\ubc88 \ubc15\ubb3c\uad00\uc5d0\uc11c \ubcfc \uc218 \uc788\ub294 \ud654\uc11d\uc758 \uc218\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\n\nmain()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()))\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n    t.sort()\n    l.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():n, m = map(int, input().split())\ntasks = list(map(int, input().split()))\nintervals = list(map(int, input().split()))\ntasks.sort(reverse=True)\nintervals.sort(reverse=True)\ntotal = 0\nfor i in range(n):\nif total >= m:\nbreak\nif tasks[i] <= intervals[total]:\ntotal += 1\nprint(total)\nmain() \n", "\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = list(map(int, sys.stdin.readline().split()))\n    intervals = list(map(int, sys.stdin.readline().split()))\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split(' '))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, sys.stdin.readline().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    print(tasks)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n = int(input())\n    m = int(input())\n    matrix = [[0 for i in range(m)] for j in range(n)]\n\n    for i in range(n):\n        matrix[i] = list(map(int, input().split()))\n\n    print(matrix)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/bin/python\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()))\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    \n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] < l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split(' '))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, input().split(' ')))\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, input().split(' '))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, input().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\n", "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split(\" \"))\n    tasks = list(map(int, input().split(\" \")))\n    quiet = list(map(int, input().split(\" \")))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom itertools import accumulate\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().split())\n    tasks = list(map(int, sys.stdin.readline().split()))\n    free_times = list(map(int, sys.stdin.readline().split()))\n\n    tasks.sort()\n    free_times.sort()\n    free_times_accum = list(accumulate(free_times))\n\n    print(sum(t <= f for t, f in zip(tasks, free_times_accum)))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    print(max(a*c, a*d, b*c, b*d))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    quiet = list(map(int, input().split()))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()))\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split(\" \"))\n    tasks = list(map(int, input().split(\" \")))\n    quiet = list(map(int, input().split(\" \")))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split(' ')) # n = number of tasks, m = number of quiet intervals\n    tasks = list(map(int, input().split(' '))) # list of tasks\n    quiet = list(map(int, input().split(' '))) # list of quiet intervals\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed so far\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    print(sum(map(int, sys.stdin.readline().split())))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    lst = list(map(int, input().split()))\n\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    for i in d:\n        if d[i] == 1:\n            print(i)\n            break\n    else:\n        print(\"None\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n            j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = list(map(int, sys.stdin.readline().split()))\n    intervals = list(map(int, sys.stdin.readline().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split(' '))\n    task_lens = list(map(int, sys.stdin.readline().split(' ')))\n    quiet_lens = list(map(int, sys.stdin.readline().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    sys.stdout.write(str(count))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "import math\n\nimport sys\n\ndef main(n, m):\n    task_times = [0] * n\n    quiet_times = [0] * m\n    for i in range(n):\n        task_times[i] = int(sys.stdin.readline())\n    for i in range(m):\n        quiet_times[i] = int(sys.stdin.readline())\n    task_times.sort(reverse=True)\n    quiet_times.sort(reverse=True)\n    # print(task_times)\n    # print(quiet_times)\n    i = 0\n    j = 0\n    while i < n and j < m: \n        if quiet_times[j] >= task_times[i]:\n            i += 1\n        j += 1\n    print(n - i)\n\nif __name__ == \"__main__\":\n    n, m = map(int, sys.stdin.readline().split())\n    main(n, m)\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    task_lens = list(map(int, input().split()))\n    quiet_lens = list(map(int, input().split()))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split(' '))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, input().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(sys.maxsize)\n    intervals.append(sys.maxsize)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    print(arr[n//2])\n\nmain()\n", "\nimport sys\n\n\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    t = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n#\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()))\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n"]