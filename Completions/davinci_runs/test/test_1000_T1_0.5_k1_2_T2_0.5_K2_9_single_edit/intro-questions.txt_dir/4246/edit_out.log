2022-04-16 06:04:12.828485 num operations 1
2022-04-16 06:04:12.828501 size on input set 1
2022-04-16 06:04:18.779220 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 2,
      "text": "s = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 3,
      "text": "\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 4,
      "text": "\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 5,
      "text": "# coding: utf-8\n\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 6,
      "text": "\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 7,
      "text": "\ns = input()\nt = input()\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
      "index": 8,
      "text": "\ns = input()\nt = input()\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\nprint(correct)\n"
    }
  ],
  "created": 1650089053,
  "object": "edit"
}
2022-04-16 06:04:18.779525 fix syntax errors 9 ['\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', 's = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '# coding: utf-8\n\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\ns = input()\nt = input()\n\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\ns = input()\nt = input()\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n', '\ns = input()\nt = input()\ncorrect = 0\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\nprint(correct)\n']
2022-04-16 06:04:18.779562 size on output set 5
2022-04-16 06:04:18.779577 num operations 1
2022-04-16 06:04:18.779582 size on input set 1
2022-04-16 06:04:28.777479 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(1, len(forecast)):\n        if forecast[i] == actual[i-1]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n            \n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0.0\n    wrong = 0.0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i] and actual[i] == '1':\n            correct += 1\n        elif forecast[i] != actual[i] and actual[i] == '0':\n            correct += 1\n        else:\n            wrong += 1\n\n    print(correct / (correct + wrong))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "'''\nThis is a template file that you can use to create new code files.\n'''\n\nimport sys\n\ndef main():\n    a = int(sys.stdin.readline().strip())\n    b = int(sys.stdin.readline().strip())\n\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650089058,
  "object": "edit"
}
2022-04-16 06:04:28.777716 fix syntax errors 9 ["import sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0\n    for i in range(1, len(forecast)):\n        if forecast[i] == actual[i-1]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n            \n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip().split()\n    actual = sys.stdin.readline().strip().split()\n\n    correct = 0.0\n    wrong = 0.0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i] and actual[i] == '1':\n            correct += 1\n        elif forecast[i] != actual[i] and actual[i] == '0':\n            correct += 1\n        else:\n            wrong += 1\n\n    print(correct / (correct + wrong))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    forecast = sys.stdin.readline().strip()\n    actual = sys.stdin.readline().strip()\n\n    correct = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            correct += 1\n    print(correct)\n\nif __name__ == '__main__':\n    main()\n", "'''\nThis is a template file that you can use to create new code files.\n'''\n\nimport sys\n\ndef main():\n    a = int(sys.stdin.readline().strip())\n    b = int(sys.stdin.readline().strip())\n\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 06:04:28.777830 size on output set 8
