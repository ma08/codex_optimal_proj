["\nh, w = map(int, input().split())\ngrid = []\nfor i in range(h):\n    grid.append(list(input()))\n\n# check for rows\nfor i in range(h):\n    all_white = True\n    for j in range(w):\n        if grid[i][j] == '#':\n            all_white = False\n            break\n    if all_white:\n        grid.pop(i)\n        h -= 1\n        i -= 1\n\n# check for columns\nfor j in range(w):\n    all_white = True\n    for i in range(h):\n        if grid[i][j] == '#'\n            all_white = False\n            break\n    if all_white:\n        for i in range(h):\n            grid[i].pop(j)\n        w -= 1\n        j -= 1\n\nfor i in range(h):\n    print(\"\".join(grid[i]))\n", "\nh, w = map(int, input().split())\ngrid = []\nfor i in range(h):\n    grid.append(list(input()))\n\n# print(\"grid: \")\n# print(grid)\n\n# check for rows\nfor i in range(h):\n    all_white = True\n    for j in range(w):\n        if grid[i][j] == '#':\n            all_white = False\n            break\n    if all_white:\n        # print(\"row: \" + str(i))\n        grid.pop(i)\n        h -= 1\n        i -= 1\n\n# print(\"grid: \")\n# print(grid)\n\n# check for columns\nfor j in range(w):\n    all_white = True\n    for i in range(h):\n        if grid[i][j] == '#':\n            all_white = False\n            break\n    if all_white:\n        # print(\"col: \" + str(j))\n        for i in range(h):\n            grid[i].pop(j)\n        w -= 1\n        j -= 1\n\n# print(\"grid: \")\n# print(grid)\n\nfor i in range(h):\n    print(\"\".join(grid[i]))\n", "\n\nimport sys\n\ndef main():\n    h, w = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().split()[0]) for i in range(h)]\n    for i in range(h):\n        if grid[i].count('#') == 0:\n            grid.pop(i)\n            h -= 1\n            i -= 1\n    for i in range(w):\n        column = [grid[j][i] for j in range(h)]\n        if column.count('#') == 0:\n            for j in range(h):\n                grid[j].pop(i)\n            w -= 1\n            i -= 1\n    for i in range(h):\n        print(''.join(grid[i]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    h, w = list(map(int, sys.stdin.readline().split()))\n    grid = [list(sys.stdin.readline().split()[0]) for i in range(h)]\n    for i in range(h - 1, -1, -1):\n        if grid[i].count('#') == 0:\n            grid.pop(i)\n            h -= 1\n    for i in range(w - 1, -1, -1):\n        column = [grid[j][i] for j in range(h)]\n        if column.count('#') == 0:\n            for j in range(h):\n                grid[j].pop(i)\n            w -= 1\n    for i in range(h):\n        print(''.join(grid[i]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    h, w = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().split()[0]) for i in range(h)]\n    for i in range(h):\n        if '#' not in grid[i]:\n            grid.pop(i)\n            h -= 1\n            i -= 1\n    for i in range(w):\n        column = [grid[j][i] for j in range(h)]\n        if '#' not in column:\n            for j in range(h):\n                grid[j].pop(i)\n            w -= 1\n            i -= 1\n    for i in range(h):\n        print(''.join(grid[i]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, w = list(map(int, sys.stdin.readline().split()))\n    grid = [list(sys.stdin.readline().strip()) for i in range(h)]\n    for i in range(h):\n        if grid[i].count('#') == 0:\n            grid.pop(i)\n            h -= 1\n            i -= 1\n    for i in range(w):\n        column = [grid[j][i] for j in range(h)]\n        if column.count('#') == 0:\n            for j in range(h):\n                grid[j].pop(i)\n            w -= 1\n            i -= 1\n    for i in range(h):\n        print(''.join(grid[i]))\n\nif __name__ == '__main__':\n    main()\n", "\nh, w = map(int, input().split())\ngrid = []\nfor i in range(h):\n    grid.append(list(input()))\n\n# check for rows\nfor i in range(h):\n    all_black = True\n    for j in range(w):\n        if grid[i][j] == '#':\n            all_black = False\n            break\n    if all_black:\n        grid.pop(i)\n        h -= 1\n        i -= 1\n\n# check for columns\nfor j in range(w):\n    all_white = True\n    for i in range(h):\n        if grid[i][j] == '#':\n            all_black = False\n            break\n    if all_black:\n        for i in range(h):\n            grid[i].pop(j)\n        w -= 1\n        j -= 1\n\nfor i in range(h):\n    print(\"\".join(grid[i]))\n", "\nimport sys\n\ndef main():\n    h, w = list(map(int, sys.stdin.readline().split()))\n    grid = [list(sys.stdin.readline().split()[0]) for i in range(h)]\n    for i in range(h):\n        if grid[i].count('#') == 0:\n            grid.pop(i)\n            h -= 1\n            i -= 1\n    for i in range(w):\n        column = [grid[j][i] for j in range(h)]\n        if column.count('#') == 0:\n            for j in range(h):\n                grid[j].pop(i)\n            w -= 1\n            i -= 1\n    for i in range(h):\n        print(''.join(grid[i]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nh, w = map(int, input().split())\ngrid = []\nfor line in sys.stdin:\n    grid.append(list(line.rstrip()))\n\n# print(\"grid: \")\n# print(grid)\n\n# check for rows\nfor i in range(h):\n    all_white = True\n    for j in range(w):\n        if grid[i][j] == '#':\n            all_white = False\n            break\n    if all_white:\n        # print(\"row: \" + str(i))\n        grid.pop(i)\n        h -= 1\n        i -= 1\n\n# print(\"grid: \")\n# print(grid)\n\n# check for columns\nfor j in range(w):\n    all_white = True\n    for i in range(h):\n        if grid[i][j] == '#':\n            all_white = False\n            break\n    if all_white:\n        # print(\"col: \" + str(j))\n        for i in range(h):\n            grid[i].pop(j)\n        w -= 1\n        j -= 1\n\n# print(\"grid: \")\n# print(grid)\n\nfor i in range(h):\n    print(\"\".join(grid[i]))\n", "\n\nh, w = map(int, input().split())  # type: int, int\ngrid = []\nfor i in range(h):\n    grid.append(list(input()))  # type: List[str]\n\n# print(\"grid: \")\n# print(grid)\n\n# check for rows\nfor i in range(h):\n    all_white = True\n    for j in range(w):\n        if grid[i][j] == '#':\n            all_white = False\n            break\n    if all_white:\n        # print(\"row: \" + str(i))\n        grid.pop(i)\n        h -= 1\n        i -= 1\n\n# print(\"grid: \")\n# print(grid)\n\n# check for columns\nfor j in range(w):\n    all_white = True\n    for i in range(h):\n        if grid[i][j] == '#':\n            all_white = False\n            break\n    if all_white:\n        # print(\"col: \" + str(j))\n        for i in range(h):\n            grid[i].pop(j)\n        w -= 1\n        j -= 1\n\n# print(\"grid: \")\n# print(grid)\n\nfor i in range(h):\n    print(\"\".join(grid[i]))\n", "import sys\n\ndef main():\n    h, w = list(map(int, sys.stdin.readline().split()))\n    grid = [list(sys.stdin.readline().split()[0]) for i in range(h)]\n    for i in range(h):\n        if grid[i].count('#') == 0:\n            grid.pop(i)\n            h -= 1\n            i -= 1\n    for i in range(w):\n        column = [grid[j][i] for j in range(h)]\n        if column.count('#') == 0:\n            for j in range(h):\n                grid[j].pop(i)\n            w -= 1\n            i -= 1\n    for i in range(h):\n        print(''.join(grid[i]))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# vim: set fileencoding=utf-8 :\n\nimport sys\n\ndef main():\n    h, w = list(map(int, sys.stdin.readline().split()))\n    grid = [list(sys.stdin.readline().split()[0]) for i in range(h)]\n    for i in range(h):\n        if grid[i].count('#') == 0:\n            grid.pop(i)\n            h -= 1\n            i -= 1\n    for i in range(w):\n        column = [grid[j][i] for j in range(h)]\n        if column.count('#') == 0:\n            for j in range(h):\n                grid[j].pop(i)\n            w -= 1\n            i -= 1\n    for i in range(h):\n        print(''.join(grid[i]))\n\nif __name__ == '__main__':\n    main()\n"]