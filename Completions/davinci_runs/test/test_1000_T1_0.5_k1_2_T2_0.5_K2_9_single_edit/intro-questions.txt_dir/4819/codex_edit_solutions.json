["nums = [int(input()) for i in range(10)]\nprint(len(set([n % 42 for n in nums])))\n", "\n\nmodulo = 42\nnumbers = []\nfor i in range(10):\n    numbers.append(int(input()) % modulo)  # you need to use input() in python 3\n\nprint(len(set(numbers)))\n", "#!/usr/bin/env python3\n\nnums = [int(input()) for i in range(10)]\nprint(len(set([n % 42 for n in nums])))\n", "\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42.\ndef main():\n    # Dictionary to store the modulo values.\n    mod = {}\n    # Loop through 10 inputs\n    for i in range(10):\n        # Store the modulo of the input\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values\n    print(len(set(mod.values())))\n\nmain()\n", "\n\n# Get input \nnums = []\nfor _ in range(10):\n    nums.append(int(input()))\n\n# Get distinct numbers\nnums = list(set([x % 42 for x in nums]))\n\n# Print output\nprint(len(nums))\n", "\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42\ndef main():\n    # Dictionary to store the modulo values\n    mod = {}\n    # Loop through 10 inputs\n    for _ in range(10):\n        # Store the modulo of the input\n        mod[int(input()) % 42] = 1\n    # Output the number of distinct modulo values\n    print(len(set(mod.values())))\n\nmain()\n", "\n\ndef distinct_modulo(nums): \n    modulo_nums = [num % 42 for num in nums]\n    return len(set(modulo_nums))\n\ndef main():\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    print(distinct_modulo(nums))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Accepts 10 numbers, outputs number of distinct numbers modulo 42\ndef distinct():\n    # Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    #Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    #Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set\n    print(len(nums_mod_set))\n\n#Test the function\ndistinct()\n", "\n\n# Accepts 10 numbers, outputs number of distinct numbers modulo 42\ndef distinct():\n    # Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    # Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    # Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    # Output the length of the set\n    print(len(nums_mod_set))\n\n\n# Test the function\ndistinct()\n", "\nmod = 42\nnums = []\nfor _ in range(10):\n    num = int(input()) % mod\n    if num not in nums:\n        nums.append(num)\n\nprint(len(nums))\n", "\n\ndef distinct_modulo(nums):\n    modulo_nums = [num % 42 for num in nums]  # list comprehension\n    return len(set(modulo_nums))\n\ndef main():\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    print(distinct_modulo(nums))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef distinct_modulo(nums):\n    modulo_nums = [num % 42 for num in nums]\n    return len(set(modulo_nums))\n\n\ndef main():\n\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    print(distinct_modulo(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nmod = 10\nnums = []\n\nfor _ in range(int(input())):\n    num = int(input()) % mod\n    if num not in nums:\n        nums.append(num)\n\nprint(len(nums))\n", "\ndef main():\n    # input\n    nums = []\n    for i in range(10):\n        num = int(input())\n        num %= 42\n        nums.append(num)\n\n    # output\n    print(len(set(nums)))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef distinct_modulo(nums):\n    modulo_nums = [num % 42 for num in nums]\n    return len(set(modulo_nums))\n\ndef main():\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    print(distinct_modulo(nums))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42\ndef main():\n    # Dictionary to store the modulo values\n    mod = []\n    # Loop through 10 inputs\n    for i in range(10):\n        # Store the modulo of the input\n        mod.append(int(input()) % 42)\n    # Output the number of distinct modulo values\n    print(len(set(mod)))\n\nmain()\n", "\n\ndef main():\n    modulo = 42\n    numbers = []\n    for i in range(10):\n        numbers.append(int(input()) % modulo)\n\nprint(len(set(numbers)))\n", "\n\n\"\"\"Accepts 10 numbers, outputs number of distinct numbers modulo 42\"\"\"\ndef distinct():\n    \"\"\"Create a list of the 10 numbers\"\"\"\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    \"\"\"Create a list of the 10 numbers modulo 42\"\"\"\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    \"\"\"Create a set of the 10 numbers modulo 42\"\"\"\n    nums_mod_set = set(nums_mod)\n    \"\"\"Output the length of the set\"\"\"\n    print(len(nums_mod_set))\n\n\"\"\"Test the function\"\"\"\ndistinct()\n", "\n\ndef main():\n    # input & process\n    nums = []\n    for _ in range(10):\n        num = int(input())\n        num %= 42\n        nums.append(num)\n\n    # output\n    print(len(set(nums)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42\ndef main():\n    # Dictionary to store the modulo values\n    mod = {}\n    # Loop through 10 inputs\n    for i in range(10):\n        # Store the modulo of the input\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values\n    print(len(set(mod.values())))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42\ndef distinct():\n    # Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    # Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    # Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    # Output the length of the set\n    print(len(nums_mod_set))\n\n# Test the function\ndistinct()\n", "\nmodulo = 42\nnumbers = []\nfor i in range(10):\n    numbers.append(int(input()) % modulo)\n\nprint(len(set(numbers))\n", "\nmod = 42\nnums = []\n\nfor _ in range(10):\n    num = int(input()) % mod\n    if num not in nums:\n        nums.append(num)\nprint(len(nums))\n", "\ndef main():\n    print(len(set([int(input()) % 42 for i in range(10)])))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    # input\n    nums = []\n    for i in range(10):\n        num = int(input())\n        num %= 42\n        nums.append(num)\n\n    # output\n    print(len(set(nums)))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42.\ndef main():\n    # Dictionary to store the modulo values\n    mod = {}\n    # Loop through 10 inputs\n    for i in range(10):\n        # Store the modulo of the input\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values\n    print(len(set(mod.values())))\n\nmain()\n", "\nn = int(input())\nmodulo = 42\nnumbers = []\nfor i in range(n):\n    numbers.append(int(input()) % modulo)\n\nprint(len(set(numbers)))\n", "\n\ndef distinct_modulo(nums):\n    modulo_nums = [num % 42 for num in nums]\n    return len(set(modulo_nums))\n\ndef main():\n    nums = []\n    for _ in range(10): # _ is a dummy variable\n        nums.append(int(input()))\n    print(distinct_modulo(nums))\n\nif __name__ == \"__main__\":\n    main()\n", "\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42\ndef distinct():\n    #Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    #Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    #Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set\n    print(len(nums_mod_set))\n\n#Test the function\ndistinct()\n", "\n# Get input\nnums = []\nfor _ in range(10):\n    nums.append(int(input()))\n\n# Get distinct numbers\nnums = list(set([x % 42 for x in nums]))\n\n# Print output\nprint(len(nums))\n", "\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42\ndef main():\n    # Dictionary to store the modulo values\n    mod = {}\n    # Loop through 10 inputs\n    for i in range(10):\n        # Store the modulo of the input\n        mod[i] = int(input()) % 42 \n    # Output the number of distinct modulo values\n    print(len(set(mod.values())))\n\nmain()\n", "\n\ndef distinct(): #Accepts 10 numbers, outputs number of distinct numbers modulo 42\n\tnums = [] #Create a list of the 10 numbers\n\tfor i in range(10):\n\t\tnums.append(input())\n\tnums_mod = [] #Create a list of the 10 numbers modulo 42\n\tfor i in range(10):\n\t\tnums_mod.append(nums[i] % 42)\n\tnums_mod_set = set(nums_mod) #Create a set of the 10 numbers modulo 42\n\tprint(len(nums_mod_set)) #Output the length of the set\n\ndistinct()\n", "\n\ndef main():\n    modulo = 42\n    numbers = []\n    for i in range(10):\n        numbers.append(int(input()) % modulo)\n\n    print(len(set(numbers)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42\ndef distinct_numbers():\n    #Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    #Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    #Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set\n    print(len(nums_mod_set))\n\n#Test the function\ndistinct_numbers()\n", "\n# Get input\nnums = []\nfor _ in range(10):\n    nums.append(int(input()))\n\n# Get distinct numbers\nnums = list(set(x % 42 for x in nums))\n\n# Print output\nprint(len(nums))\n", "#!/usr/bin/python3\n\nmod = 42\nnums = []\n\nfor _ in range(10):\n    num = int(input()) % mod\n    if num not in nums:\n        nums.append(num)\n\nprint(len(nums))\n", "\n\nnums = [int(input()) for i in range(int(input()))]\nprint(len(set([n % 42 for n in nums]))\n", "\nmod = 42\nnums = []\n\nfor _ in range(10):\n    num = int(input()) % mod\n    if num not in nums:\n        nums.append(num)\n\nprint(len(nums))\n", "\ndef distinct_modulo(nums):\n    modulo_nums = [num % 42 for num in nums]\n    return len(set(modulo_nums))\n\n\ndef main():\n    nums = [int(input()) for _ in range(10)]\n\n    print(distinct_modulo(nums))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # input\n    nums = []\n    for i in range(10):\n        num = int(input()) % 42\n        nums.append(num)\n\n    # output\n    print(len(set(nums)))\n\nif __name__ == \"__main__\":\n    main()\n", "\nnums = [int(input()) for i in range(10)]\nprint(len(set([n % 42 for n in nums])))\n", "\n\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42\ndef distinct():\n    #Create a list of the 10 numbers\n    nums = list()\n    for i in range(10):\n        nums.append(input())\n    #Create a list of the 10 numbers modulo 42\n    nums_mod = list()\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    #Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set\n    print(len(nums_mod_set))\n\n#Test the function\ndistinct()\n", "\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42\ndef distinct():\n    #Create a list of the 10 numbers\n    nums = [int(input()) for i in range(10)]\n    #Create a list of the 10 numbers modulo 42\n    nums_mod = [nums[i] % 42 for i in range(10)]\n    #Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set\n    print(len(nums_mod_set))\n", "\nnums = [int(input()) for i in range(10)] #input\nprint(len(set([n % 42 for n in nums])))\n", "\n\ndef distinct_modulo(nums):\n    modulo_nums = [num % 42 for num in nums]\n\n    return len(set(modulo_nums))\n\ndef main():\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    print(distinct_modulo(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Accepts 5 inputs and outputs the number of distinct numbers modulo 42\ndef main():\n    # Dictionary to store the modulo values\n    mod = {}\n    for i in range(5):\n        # Store the modulo of the input\n        mod[i] = int(input()) % 43\n    # Output the number of distinct modulo values\n    print(len(set(mod.values())))\n\nmain()\n", "\nmodulo = 42\nnumbers = []\nfor i in range(10):\n    numbers.append(int(input()) % modulo)\n\nprint(len(set(numbers)))\n", "\n\ndef main():\n    mod = 42\n    nums = []\n\n    for _ in range(10):\n        num = int(input()) % mod\n        if num not in nums:\n            nums.append(num)\n\n    print(len(nums))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distinct_modulo(nums):\n    modulo_nums = [num % 42 for num in nums]\n    return len(set(modulo_nums))\n\n\ndef main():\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    print(distinct_modulo(nums))\n\nif __name__ == \"__main__\":\n    main()\n", "# Accepts 10 inputs and outputs the number of distinct numbers modulo 42\n\n\n\ndef main():\n    # Dictionary to store the modulo values\n    mod = {}\n    # Loop through 10 inputs\n    for i in range(10):\n        # Store the modulo of the input\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values\n    print(len(set(mod.values())))\n\n\nmain()\n", "\nnums = [int(input()) for i in range(10)] \nprint(len(set([n % 42 for n in nums])))\n", "\n\nmod = 42\nnums = []\n\nfor _ in range(10):\n    num = int(input()) % mod\n    if num not in nums:\n        nums.append(num)\n        \nprint(len(nums))\n"]