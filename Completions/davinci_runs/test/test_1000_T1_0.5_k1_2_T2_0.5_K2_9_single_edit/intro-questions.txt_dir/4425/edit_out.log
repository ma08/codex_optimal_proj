2022-04-16 07:16:26.819134 num operations 1
2022-04-16 07:16:26.819152 size on input set 1
2022-04-16 07:16:38.426748 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1 / N\n\n# Coin\nprobability_coin = 1 / 2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N + 1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# Probability that Snuke wins\nprobability_win = 0\n\n# Coin\nprobability_coin = 1/2\n\n# N-sided die\nprobability_die = 1/N\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1 / N\n\n# Coin\nprobability_coin = 1 / 2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N + 1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# Probability that Snuke wins a game\nprobability_win_game = 1/N\n\n# Probability that Snuke wins\nprobability_win = 0\n\n# Number of times Snuke needs to flip the coin to reach K\nnum_flips = math.ceil(math.log2(K/probability_win_game))\nprobability_win = probability_win_game * (1/2)**num_flips\n\nprint(probability_win)\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1/N\n\n# Coin\nprobability_coin = 1/2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1/N\n\n# Coin\nprobability_coin = 1/2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1/N\n\n# Coin\nprobability_coin = 1/2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N + 1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n"
    },
    {
      "index": 7,
      "text": "import sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1/N\n\n# Coin\nprobability_coin = 1/2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\nimport math\n\nN, K = map(int, sys.stdin.readline().split())\n\n# Probability that Snuke wins\nprobability_win = 0\n\n# Probability that Snuke loses\nprobability_lose = 0\n\n# Coin\nprobability_coin = 1/2\n\n# N-sided die\nprobability_die = 1/N\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips * probability_die\n\n    # Probability that Snuke loses with the current die\n    probability_lose_die = (1 - probability_coin**num_flips) * probability_die\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die\n    probability_lose += probability_lose_die\n\nprint(probability_lose)\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n"
    }
  ],
  "created": 1650093386,
  "object": "edit"
}
2022-04-16 07:16:38.427034 fix syntax errors 9 ['\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1 / N\n\n# Coin\nprobability_coin = 1 / 2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N + 1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n', '\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# Probability that Snuke wins\nprobability_win = 0\n\n# Coin\nprobability_coin = 1/2\n\n# N-sided die\nprobability_die = 1/N\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n', '\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1 / N\n\n# Coin\nprobability_coin = 1 / 2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N + 1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n', '\n\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# Probability that Snuke wins a game\nprobability_win_game = 1/N\n\n# Probability that Snuke wins\nprobability_win = 0\n\n# Number of times Snuke needs to flip the coin to reach K\nnum_flips = math.ceil(math.log2(K/probability_win_game))\nprobability_win = probability_win_game * (1/2)**num_flips\n\nprint(probability_win)\n', '\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1/N\n\n# Coin\nprobability_coin = 1/2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n', '\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1/N\n\n# Coin\nprobability_coin = 1/2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n', '\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1/N\n\n# Coin\nprobability_coin = 1/2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N + 1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n', 'import sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided die\nprobability_die = 1/N\n\n# Coin\nprobability_coin = 1/2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n', '\nimport sys\nimport math\n\nN, K = map(int, sys.stdin.readline().split())\n\n# Probability that Snuke wins\nprobability_win = 0\n\n# Probability that Snuke loses\nprobability_lose = 0\n\n# Coin\nprobability_coin = 1/2\n\n# N-sided die\nprobability_die = 1/N\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current die\n    probability_win_die = probability_coin**num_flips * probability_die\n\n    # Probability that Snuke loses with the current die\n    probability_lose_die = (1 - probability_coin**num_flips) * probability_die\n\n    # Probability that Snuke wins\n    probability_win += probability_win_die\n    probability_lose += probability_lose_die\n\nprint(probability_lose)\n    probability_win += probability_win_die * probability_die\n\nprint(probability_win)\n']
2022-04-16 07:16:38.427166 size on output set 7
2022-04-16 07:16:38.427177 num operations 1
2022-04-16 07:16:38.427183 size on input set 1
2022-04-16 07:16:49.188288 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k + 1)\n    dp[k] = 1.0\n    for i in range(k - 1, 0, -1):\n        dp[i] = dp[i + 1] * (n - 1) / n + (dp[i + 1] + dp[i + 2]) / 2 / n\n    print(dp[1])  # dp[1] = 1/n * (dp[2] + 2*dp[3])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    ans = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2 == 1:\n            ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    n, k = map(int, input().split()) \n    dp = [0] * (k+1) \n    dp[k] = 1 \n    for i in range(k-1, 0, -1): \n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n \n    print(dp[1]) \n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650093398,
  "object": "edit"
}
2022-04-16 07:16:49.188530 fix syntax errors 9 ["\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k + 1)\n    dp[k] = 1.0\n    for i in range(k - 1, 0, -1):\n        dp[i] = dp[i + 1] * (n - 1) / n + (dp[i + 1] + dp[i + 2]) / 2 / n\n    print(dp[1])  # dp[1] = 1/n * (dp[2] + 2*dp[3])\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    ans = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2 == 1:\n            ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    n, k = map(int, input().split()) \n    dp = [0] * (k+1) \n    dp[k] = 1 \n    for i in range(k-1, 0, -1): \n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n \n    print(dp[1]) \n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 07:16:49.188571 size on output set 5
