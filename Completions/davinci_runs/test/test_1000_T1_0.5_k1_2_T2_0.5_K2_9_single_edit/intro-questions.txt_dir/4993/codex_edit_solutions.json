["\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in input():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().strip().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    files = set()\n    for i in range(M):\n        file = sys.stdin.readline().strip()\n        files.add(file)\n        if len(files) == N:\n            print(file)\n            break\n\nif __name__ == '__main__':\n    main()\n", "#\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print(\"TEST\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nP, N = map(int, sys.stdin.readline().split())\nparts = set()\nfor i in range(N):\n    part = sys.stdin.readline().strip()\n    if part not in parts:\n        parts.add(part)\n    if len(parts) == P:\n        print(i + 1)\n        break\n\nelse:\n    print(\"paradox avoided\")\n", "import sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    while True:\n        P, N = map(int, sys.stdin.readline().split())\n        if P == 0 and N == 0:\n            break\n        parts = set()\n        for i in range(N):\n            part = sys.stdin.readline().strip()\n            if part not in parts:\n                parts.add(part)\n            if len(parts) == P:\n                print(i + 1)\n                break\n        else:\n            print(\"paradox avoided\")\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nnum_parts, num_days = map(int, sys.stdin.readline().strip().split())\nparts = {}\nfor _ in range(num_days):\n    part = sys.stdin.readline().strip()\n    if part in parts:\n        parts[part] += 1\n    else:\n        parts[part] = 1\nif len(parts) == num_parts:\n    print(num_days)\nelse:\n    print(\"paradox avoided\")\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())  # input() is a function\n        if len(parts) == n:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for part in sys.stdin:\n        part = part.strip()\n        if part in parts:\n            parts[part] = min(parts[part], i)\n        else:\n            parts[part] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P = int(sys.stdin.readline().strip())\n    parts = {}\n    i = 0\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i+1)\n        else:\n            parts[line] = i+1\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(max(a) - min(a))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values(), key=int))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\n\nf = open(\"newfile.txt\", \"w+\")\nfor i in range(10):\n    f.write(\"This is line %d\\r\\n\" % (i+1))\nf.close()\n", "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport os\nimport csv\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# ===============================================\n# ==============  HELPER FUNCTIONS  =============\n# ===============================================\n\ndef get_file_path():\n    \"\"\"\n    This function will return the file path of the file the user wants to open.\n    \"\"\"\n    # Check if file path is provided as argument\n    if len(sys.argv) == 1:\n        # If not, ask user for file path\n        file_path = input(\"Please enter the file path: \")\n        if not os.path.isfile(file_path):\n            print(\"File does not exist.\")\n            sys.exit(1)\n    else:\n        # If so, check if file exists\n        file_path = sys.argv[1]\n        if not os.path.isfile(file_path):\n            print(\"File does not exist.\")\n            sys.exit(1)\n    return file_path\n\n\ndef check_file_header(file_path):\n    \"\"\"\n    This function checks if the file has a header.\n    \"\"\"\n    # Open csv file\n    with open(file_path, \"r\") as csv_file:\n        # Read first line\n        first_line = csv_file.readline()\n        # Check if first line contains a number\n        if first_line.split(\",\")[0].isdigit():\n            return False\n        else:\n            return True\n\n\ndef read_csv_file(file_path, has_header):\n    \"\"\"\n    This function reads the csv file and returns the data in a numpy array.\n    \"\"\"\n    # Open csv file\n    with open(file_path, \"r\") as csv_file:\n        # Read csv file\n        csv_reader = csv.reader(csv_file, delimiter=\",\")\n        # Create list of data\n        data_list = []\n        for row in csv_reader:\n            data_list.append(row)\n    # Convert list to numpy array\n    data_array = np.array(data_list)\n    # Check if file has header\n    if has_header:\n        # If so, remove header\n        data_array = np.delete(data_array, 0, axis=0)\n    # Convert all data to float\n    data_array = data_array.astype(float)\n    return data_array\n\n\n# ===============================================\n# ==============  DATA ANALYSIS  ================\n# ===============================================\n\ndef analyze_data(data_array):\n    \"\"\"\n    This function returns the mean, standard deviation and correlation coefficient.\n    \"\"\"\n    # Calculate mean\n    mean = np.mean(data_array, axis=0)\n    # Calculate standard deviation\n    std = np.std(data_array, axis=0)\n    # Calculate correlation coefficient\n    corrcoeff = np.corrcoef(data_array, rowvar=False)\n    return mean, std, corrcoeff\n\n\n# ===============================================\n# ==============  DATA PLOTTING  ================\n# ===============================================\n\ndef plot_data(data_array):\n    \"\"\"\n    This function plots the data.\n    \"\"\"\n    # Create figure\n    fig = plt.figure()\n    # Create plot\n    ax = fig.add_subplot(111)\n    # Plot data\n    ax.plot(data_array[:, 0], data_array[:, 1], \"o\")\n    # Show plot\n    plt.show()\n\n\n\ndef main():\n    # Get file path\n    file_path = get_file_path()\n    # Check if file has header\n    has_header = check_file_header(file_path)\n    # Read csv file\n    data_array = read_csv_file(file_path, has_header)\n    # Analyze data\n    mean, std, corrcoeff = analyze_data(data_array)\n    # Print results\n    print(\"Mean: {}\".format(mean))\n    print(\"Standard deviation: {}\".format(std))\n    print(\"Correlation coefficient: {}\".format(corrcoeff))\n    # Plot data\n    plot_data(data_array)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().strip().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n", "import math\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        print(math.ceil((x - 2) / 3) * math.ceil((y - 2) / 3))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n# import math\n# import string\n# import itertools\n# import collections\n# import re\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\nimport os\nimport sys\nfrom Bio import SeqIO\nfrom Bio.Seq import Seq\nfrom Bio.SeqRecord import SeqRecord\nfrom Bio.Alphabet import generic_dna\n\n\ndef find_in_seq(seq, motif):\n    for i in range(len(seq)):\n        if seq[i:i + len(motif)] == motif:\n            return i\n    return -1\n\n\ndef find_in_seqrecord(seqrecord, motif):\n    return find_in_seq(str(seqrecord.seq), motif)\n\n\ndef find_in_fasta(fasta, motif):\n    for record in SeqIO.parse(fasta, \"fasta\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_genbank(genbank, motif):\n    for record in SeqIO.parse(genbank, \"genbank\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_gbk(gbk, motif):\n    return find_in_genbank(gbk, motif)\n\n\ndef find_in_gb(gbk, motif):\n    return find_in_genbank(gbk, motif)\n\n\ndef find_in_embl(embl, motif):\n    for record in SeqIO.parse(embl, \"embl\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_fastq(fastq, motif):\n    for record in SeqIO.parse(fastq, \"fastq\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_fastq_sanger(fastq, motif):\n    for record in SeqIO.parse(fastq, \"fastq-sanger\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_fastq_solexa(fastq, motif):\n    for record in SeqIO.parse(fastq, \"fastq-solexa\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_fastq_illumina(fastq, motif):\n    for record in SeqIO.parse(fastq, \"fastq-illumina\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_phd(phd, motif):\n    for record in SeqIO.parse(phd, \"phd\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_qual(qual, motif):\n    for record in SeqIO.parse(qual, \"qual\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_sff(sff, motif):\n    for record in SeqIO.parse(sff, \"sff\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_uniprot_xml(uniprot_xml, motif):\n    for record in SeqIO.parse(uniprot_xml, \"uniprot-xml\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_uniprot_txt(uniprot_txt, motif):\n    for record in SeqIO.parse(uniprot_txt, \"uniprot-txt\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_nexus(nexus, motif):\n    for record in SeqIO.parse(nexus, \"nexus\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_clustal(clustal, motif):\n    for record in SeqIO.parse(clustal, \"clustal\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_stockholm(stockholm, motif):\n    for record in SeqIO.parse(stockholm, \"stockholm\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_pir(pir, motif):\n    for record in SeqIO.parse(pir, \"pir\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef find_in_tab(tab, motif):\n    for record in SeqIO.parse(tab, \"tab\"):\n        index = find_in_seqrecord(record, motif)\n        if index > -1:\n            return record.id, index\n    return None, None\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print(\"Hello\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\nimport sys\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_file_data(filename):\n    pass\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = sys.stdin.readline().strip().split()\n    num_parts = int(num_parts)\n    num_days = int(num_days)\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\n    # read the number of parts and number of days\ndef main():\n    # set of parts\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nP, N = map(int, sys.stdin.readline().split())\nparts = set()\nfor i in range(N):\n    part = sys.stdin.readline().strip()\n    if part not in parts:\n        parts.add(part)\n    if len(parts) == P:\n        print(i + 1)\n        break\n\n    print(\"paradox avoided\")\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = []\n    for line in sys.stdin:\n        line = line.strip()\n        parts.append(line)\n        if len(parts) == P:\n            print(len(parts))\n            return\n        if len(parts) > P:\n            print(\"paradox avoided\")\n            return\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set() #this is a set\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\tP, N = map(int, sys.stdin.readline().split())\n\tparts = set()\n\tfor i in range(N):\n\t\tpart = sys.stdin.readline().strip()\n\t\tif part not in parts:\n\t\t\tparts.add(part)\n\t\tif len(parts) == P:\n\t\t\tprint(i + 1)\n\t\t\treturn\n\n\tprint(\"paradox avoided\")\n\nif __name__ == '__main__':\n\tmain()\n", "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\n\nmain()\n"]