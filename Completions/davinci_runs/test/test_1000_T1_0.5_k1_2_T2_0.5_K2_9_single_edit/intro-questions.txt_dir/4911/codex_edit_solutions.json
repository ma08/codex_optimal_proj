["\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())  \n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))  \n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))  \n        print()  \n\nmain()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs) + '\\n')\n\nmain()\n", "\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x.split()[attribute])\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = []\n    for i in range(int(sys.stdin.readline())):\n        songs.append(sys.stdin.readline().rstrip().split())\n    for i in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\nmain()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split()))\n             for _ in range(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes)\n                        for song in songs))\n        print()\n\nmain()\n", "\n#-----main-----\ndef main():\n    #read input\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\n#-----main-----\ndef main():\n    #read input\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in xrange(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs))\n        print()\n\nmain()\n", "#!/usr/bin/env python\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()[1:]\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split()[1:])\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs), end='')\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song), end='')\n        print()\n\nmain()\n", "\n\n#-----main-----\ndef main():\n    #read input\n    attr_list = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split())\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(*attr_list)\n        for song in songs:\n            print(*song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = []\n    for i in range(int(sys.stdin.readline())):\n        songs.append(sys.stdin.readline().rstrip().split())\n    for i in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\n\nmain()\n", "\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x.split(',')[attribute])\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x.split()[attribute], reverse=True)\n\ndef main():\n    attributes = input().split()[::-1]\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, len(attributes) - attributes.index(sort) - 1):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print('Hello World')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(*attr)\n        for song in songs:\n            print(*song)\n    print()\n\nmain()\n", "\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x.split()[attribute], reverse=True)\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_songs):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes) + '\\n')\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs) + '\\n')\n\nmain()\n", "\n\ndef main():\n    pass\n\n\n   \nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n\n        self.attributes = attributes\n    def __repr__(self):\n\n        return ' '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort) # \u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07\u0e02\u0e2d\u0e07 attr \u0e17\u0e35\u0e48\u0e08\u0e30\u0e40\u0e23\u0e35\u0e22\u0e07\n        songs.sort(key=lambda x: x[attr_sort_in]) # \u0e40\u0e23\u0e35\u0e22\u0e07\u0e25\u0e33\u0e14\u0e31\u0e1a\n        # print(*attr) \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e02\u0e36\u0e49\u0e19\u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\u0e43\u0e2b\u0e21\u0e48\n        # for song in songs:\n        #     print(*song)\n        print(*attr)\n        print(*songs, sep='\\n')\n        print()\n\nmain()\n", "\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return ' '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs), end='')\n        print()\n\nmain()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))\n        print()\n\nmain()\n", "\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(attrs.join(' '))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(song.join(' '))\n        print()\n\nmain()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) \n             for _ in range(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) \n                        for song in songs))\n        print()\n\nmain()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(*attr, sep=',')\n        for song in songs:\n            print(*song, sep=',')\n        print()\n\nmain()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split(',')\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split(','))\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split() # \u0e23\u0e31\u0e1a\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\n    m = int(input()) # \u0e23\u0e31\u0e1a\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\n    songs = [] # \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e0a\u0e37\u0e48\u0e2d songs\n    for _ in range(m): # \u0e27\u0e19\u0e25\u0e39\u0e1b\u0e15\u0e32\u0e21\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 m\n        songs.append(input().split()) # \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e04\u0e48\u0e32\u0e43\u0e19 songs\n    n = int(input()) # \u0e23\u0e31\u0e1a\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\n    for _ in range(n): # \u0e27\u0e19\u0e25\u0e39\u0e1b\u0e15\u0e32\u0e21\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 n\n        attr_sort = input() # \u0e23\u0e31\u0e1a\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\n        attr_sort_in = attr.index(attr_sort) # \u0e19\u0e31\u0e1a\u0e08\u0e33\u0e19\u0e27\u0e19\u0e04\u0e48\u0e32\u0e43\u0e19 attr\n        songs.sort(key=lambda x: x[attr_sort_in]) # \u0e40\u0e23\u0e35\u0e22\u0e07\u0e04\u0e48\u0e32\u0e43\u0e19 songs\n        print(*attr) # \u0e41\u0e2a\u0e14\u0e07\u0e04\u0e48\u0e32\u0e43\u0e19 attr\n        for song in songs: # \u0e27\u0e19\u0e25\u0e39\u0e1b\u0e15\u0e32\u0e21 songs\n            print(*song) # \u0e41\u0e2a\u0e14\u0e07\u0e04\u0e48\u0e32\u0e43\u0e19 songs\n        print() # \u0e41\u0e2a\u0e14\u0e07\u0e04\u0e48\u0e32\n\nmain()\n", "\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x.split()[attribute], reverse=True)\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return ' '.join(self.attributes) \n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute]) \n\ndef main():\n    attributes = sys.stdin.readline().strip().split() \n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_songs)] # noqa: E501\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs)) # noqa: E501\n        print()\n\nmain()\n", "\n\n\ndef get_file_content(filename):\n    pass\n\n\ndef get_file_content_as_array(filename):\n    pass\n\n\ndef get_file_content_as_array_of_words(filename):\n    pass\n\n\ndef get_file_content_as_array_of_words_with_stopwords_removed(filename, stopwords):\n    pass\n\n\ndef get_file_content_as_array_of_words_with_stopwords_removed_and_punctuation_removed(filename, stopwords):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(*attrs)\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(*song)\n        print()\n\nmain()\n", "\ndef main():\n    #read input\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = []\n    for i in range(int(sys.stdin.readline())):\n        songs.append(sys.stdin.readline().rstrip().split())\n    for i in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\nmain()\n", "#-----import-----\nimport sys\n\n#-----main-----\ndef main():\n    #read input\n    attr_list = sys.stdin.readline().split(\" \")\n    num_songs = int(sys.stdin.readline())\n    songs = []\n    for i in range(num_songs):\n        songs.append(sys.stdin.readline().split(\" \"))\n    num_commands = int(sys.stdin.readline())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\n\n\n# -----main-----\ndef main():\n    #read input\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split(',')\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split(','))\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(','.join(attr))\n        for song in songs:\n            print(','.join(song))\n        print()\n\nmain()\n", "\n\n#-----main-----\ndef main():\n    #read input\n    attr_list = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split())\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n    print(\"Hello World\")\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split(',')\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split(','))\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split(\",\")\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split(\",\"))\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(\",\".join(attr))\n        for song in songs:\n            print(\",\".join(song))\n        print()\n\nmain()\n", "\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline().strip())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline().strip())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))\n        print()\n\nmain()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = []\n    for i in range(int(sys.stdin.readline())):\n        songs.append(sys.stdin.readline().rstrip().split())\n    for i in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nclass Song:\n\n    def __init__(self, attributes): #constructor\n        self.attributes = attributes #holds the attributes of a song\n\n    def __repr__(self):\n        return ' '.join(self.attributes) #returns the attributes of a song\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Song:\n    def __init__(self, attrs):\n        self.attrs = attrs\n    def __repr__(self):\n        return ' '.join(self.attrs)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attrs[attribute])\n\ndef main():\n    attrs = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in stable_sort(songs, attrs.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n#-----main-----\ndef main():\n    #read input\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\nclass Song:\n    def __init__(self, attributes): \n        self.attributes = attributes\n    def __repr__(self): \n        return ' '.join(self.attributes)\n\ndef stable_sort(songs, attribute): \n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split() \n    m = int(sys.stdin.readline())\n    songs = [] \n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split())) \n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip() \n        print(' '.join(attributes)) \n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = []\n    for i in range(int(sys.stdin.readline())):\n        songs.append(sys.stdin.readline().rstrip().split())\n    for i in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\n\n\nmain()\n", "\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))\n        print()\n\nmain()\n", "\n\ndef main():\n    pass\n\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = [sys.stdin.readline().rstrip().split() for i in range(int(sys.stdin.readline()))]\n    for i in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\nmain()\n", "\n\ndef stable_sort(songs, attribute, reverse=False):\n    return sorted(songs, key=lambda x: x.split()[attribute], reverse=reverse)\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n    songs = stable_sort(songs, attributes.index('Year'))\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return ' '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute], reverse=True)\n\ndef main():\n    attributes = sys.stdin.readline().strip().split(' ')\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    if len(sys.argv) != 2:\n        print(\"Usage:\", sys.argv[0], \"<filename>\")\n        exit(1)\n    filename = sys.argv[1]\n    print(\"File name:\", filename)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split()[1:])\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))\n        print()\n\nmain()\n", "\n\n#-----main-----\ndef main():\n    #read input\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print(\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print(\"Hello\")\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        songs.sort(key=lambda x: x[attr.index(attr_sort)])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = stdin.readline().rstrip().split()\n    n_songs = int(stdin.readline())\n    songs = [dict(zip(attributes, stdin.readline().rstrip().split())) for _ in range(n_songs)]\n    n_commands = int(stdin.readline())\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs))\n        print()\n\nmain()\n", "import sys\n\n\n#-----main-----\ndef main():\n    #read input\n    attr_list = sys.stdin.readline().split(\" \")\n    num_songs = int(sys.stdin.readline())\n    songs = []\n    for i in range(num_songs):\n        songs.append(sys.stdin.readline().split(\" \"))\n    num_commands = int(sys.stdin.readline())\n    commands = []\n    for i in range(num_commands):\n        commands.append(sys.stdin.readline())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = []\n    for i in range(int(sys.stdin.readline())):\n        songs.append(sys.stdin.readline().rstrip().split())\n    for i in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\nmain()\n"]