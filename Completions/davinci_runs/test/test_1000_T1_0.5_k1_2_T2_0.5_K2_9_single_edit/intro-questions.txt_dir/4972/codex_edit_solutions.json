["\n\nimport sys\nimport math\nimport os\n# This is the main function that runs the program\ndef main():\n\n    # Get the input\n    x = int(sys.stdin.readline()[:-1])\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x), end=\"\")\n\n\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"main function\"\"\"\n    print(input())\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    k = 0\n    while x > 1:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    k = int(math.log(X, 2))\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    x = int(input())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // (2*k + 1)\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    k = int(math.log(X, 2))\n    print(k) \n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c+1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():  # This is the main function that runs the program\n\n    # Get the input\n    x = int(sys.stdin.readline())\n\n    print(num_primes(x))\n\n\ndef num_primes(x):  # This function returns the number of prime factors of x\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n\ndef smallest_odd_factor(x):  # This function returns the smallest odd factor of x\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\nif __name__ == \"__main__\":  # Call the main function\n    main()\n", "\n\nimport sys\nimport math\nmain()\n# This is the main function that runs the program\ndef main():\n\n    # Get the input\n    x = int(sys.stdin.readline())\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x))\n\n\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    k = 0\n    while x > 1:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n", "\nimport sys\nimport math\n\n\ndef main() -> None:\n    X = int(sys.stdin.readline())\n    k = int(math.log(X, 2))\n    print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    print(n)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\n# This is the main function that runs the program\ndef main():\n\n    # Get the input\n    x = int(sys.stdin.readline())\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x))\n\n\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    k = int(math.log2(X))\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline())\n    k = int(math.log(x, 2))\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    k = int(math.log(X, 2))\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n# This is the main function that runs the program\ndef main():\n\n    # Get the input\n    x = int(sys.stdin.readline())\n\n    # The number of points is the number of prime factors of x\n    print(num_primes(x))\n\n\n# This function returns the number of prime factors of x\ndef num_primes(x):\n\n    # Initialize the number of primes to 0\n    num_primes = 0\n\n    # If x is 1, then there are no primes, so return 0\n    if x == 1:\n        return 0\n\n    # While x is greater than 1, remove the smallest prime factor of x\n    while x > 1:\n\n        # If x is even, then 2 is the smallest prime factor of x\n        if x % 2 == 0:\n            x = x // 2\n\n        # If x is odd, then find the smallest prime factor of x\n        else:\n            # Find the smallest odd factor of x\n            factor = smallest_odd_factor(x)\n\n            # Divide x by the factor\n            x = x // factor\n\n        # Increment the number of primes\n        num_primes += 1\n\n    # Return the number of primes\n    return num_primes\n\n\n# This function returns the smallest odd factor of x\ndef smallest_odd_factor(x):\n\n    # Initialize the smallest odd factor to be x\n    smallest_odd_factor = x\n\n    # Loop through all odd numbers from 3 to sqrt(x)\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        # If i is a factor of x\n        if x % i == 0:\n\n            # Update the smallest odd factor to i\n            smallest_odd_factor = i\n\n            # Break out of the loop\n            break\n\n    # Return the smallest odd factor\n    return smallest_odd_factor\n\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x/2\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline())\n    n = int(math.sqrt(x))\n    k = 0\n    while x > 1:\n        if x % n == 0:\n            k += 1\n        x //= n\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    k = 0\n    while x > 1:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // 2\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    n = int(math.sqrt(x))\n    k = 0\n    while x > 1:\n        if x % n == 0:\n            k += 1\n        x //= n\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main function\"\"\"\n    x = int(input())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // (2 * k + 1)\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        x = int(sys.stdin.readline().strip())\n        k = 0\n        while x > 1:\n            k += 1\n            x = x/2\n        print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    x = int(input())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // (2*k + 1)\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c+1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [int(x) for x in sys.stdin.readline().strip().split()]\n    m = int(sys.stdin.readline().strip())\n    b = [int(x) for x in sys.stdin.readline().strip().split()]\n    for i in range(m):\n        if b[i] in a:\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    k = int(math.log(X, 2))\n    print(k+1)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n\tx = int(sys.stdin.readline().strip())\n\tn = int(math.sqrt(x))\n\tk = 0\n\twhile x > 1:\n\t\tif x % n == 0:\n\t\t\tk += 1\n\t\tx //= n\n\tprint(k)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    print(x)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    print(int(math.sqrt(x)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x = sys.stdin.readline().strip()\n    print(x)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(n)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c+1\n    print(k)\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    k = 0\n    while x > 0:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    \"\"\"main function\"\"\"\n    x = int(input())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // (2*k + 1)\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    # find the number of points that can be placed\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main function\"\"\"\n    x = int(input())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x // (2 * k + 1)\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    k = 0\n    while x > 1:\n        k += 1\n        x = x/2\n    print(k) \n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num = int(input())\n    k = 0\n    while num > 1:\n        k += 1\n        num = num // (2*k + 1)\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n\n    x = int(sys.stdin.readline())\n\n    print(num_primes(x))\n\n\ndef num_primes(x):\n\n    num_primes = 0\n\n    if x == 1:\n        return 0\n\n    while x > 1:\n\n        if x % 2 == 0:\n            x = x // 2\n\n        else:\n            factor = smallest_odd_factor(x)\n\n            x = x // factor\n\n        num_primes += 1\n\n    return num_primes\n\n\ndef smallest_odd_factor(x):\n\n    smallest_odd_factor = x\n\n    for i in range(3,int(math.sqrt(x)+1),2):\n\n        if x % i == 0:\n\n            smallest_odd_factor = i\n\n            break\n\n    return smallest_odd_factor\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c+1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    n = int(math.sqrt(x)) + 1\n    k = 0\n    while x > 1:\n        if x % n == 0:\n            k += 1\n        x = x // n\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main function\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    x = sys.stdin.readline().strip()\n    if x == \"A\":\n        print(\"T\")\n    if x == \"T\":\n        print(\"A\")\n    if x == \"C\":\n        print(\"G\")\n    if x == \"G\":\n        print(\"C\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline())\n    # find all prime factors\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        primes.append(n)\n    # count how many times each prime occurs\n    counts = {}\n    for p in primes:\n        if p not in counts:\n            counts[p] = 0\n        counts[p] += 1\n    # find the number of points\n    k = 1\n    for c in counts.values():\n        k *= c + 1\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x = int(sys.stdin.readline())\n\n    k = 0\n    while x > 1:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\ndef main():\n    x = int(sys.stdin.readline())\n    k = 0\n    while x > 1:\n        k += 1\n        x //= 2\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    print(int(math.log(X, 2)))\n\nif __name__ == \"__main__\":\n    main()\n"]