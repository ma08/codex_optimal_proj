2022-04-16 08:25:53.106670 num operations 1
2022-04-16 08:25:53.106688 size on input set 1
2022-04-16 08:26:07.577009 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    input_val = list(sys.stdin.readline().strip())\n    a = int(input_val[0])  # 1\n    b = int(input_val[1])  # 2\n    c = int(input_val[2])  # 3\n    d = int(input_val[3])  # 4\n    for op1 in [\"+\", \"-\"]:\n        for op2 in [\"+\", \"-\"]:\n            for op3 in [\"+\", \"-\"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:  # 1+2-3+4=7\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + \"=7\")  # 1+2-3+4=7\n                    break\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a = int(input_val[0])\n    b = int(input_val[1])\n    c = int(input_val[2])\n    d = int(input_val[3])\n    for op1 in [\"+\", \"-\"]:\n        for op2 in [\"+\", \"-\"]:\n            for op3 in [\"+\", \"-\"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + \"=7\") # eval()\u306e\u5f15\u6570\u306b\u306fint\u578b\u306f\u6e21\u305b\u306a\u3044\n                    break\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    input_val = sys.stdin.readline().strip()\n    a = int(input_val[0]) # 1\n    b = int(input_val[1]) # 2\n    c = int(input_val[2]) # 3\n    d = int(input_val[3]) # 4\n    for op1 in [\"+\", \"-\"]: # +, -\n        for op2 in [\"+\", \"-\"]: # +, -\n            for op3 in [\"+\", \"-\"]: # +, -\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7: # 1+2+3+4 = 7\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + \"=7\") # 1+2+3+4=7\n                    break # break\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a = int(input_val[0])\n    b = int(input_val[1])\n    c = int(input_val[2])\n    d = int(input_val[3])\n    for op1 in [\"+\", \"-\"]:\n        for op2 in [\"+\", \"-\"]:\n            for op3 in [\"+\", \"-\"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + \"=7\")\n                    break\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a, b, c, d = int(input_val[0]), int(input_val[1]), int(input_val[2]), int(input_val[3])\n    for op1 in [\"+\", \"-\"]:\n        for op2 in [\"+\", \"-\"]:\n            for op3 in [\"+\", \"-\"]:\n                problem = str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)\n                if eval(problem) == 7:\n                    print(problem + \"=7\")\n                    break\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    input_val = sys.stdin.readline()\n    a = int(input_val[0].strip())\n    b = int(input_val[1].strip())\n    c = int(input_val[2].strip())\n    d = int(input_val[3].strip())\n    for op1 in [\"+\", \"-\"]:\n        for op2 in [\"+\", \"-\"]:\n            for op3 in [\"+\", \"-\"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + \"=7\")\n                    break\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a = int(input_val[0])\n    b = int(input_val[1])\n    c = int(input_val[2])\n    d = int(input_val[3])\n    for op1 in [\"+\", \"-\"]: # 1\u3064\u76ee\u306e\u8a08\u7b97\n        for op2 in [\"+\", \"-\"]: # 2\u3064\u76ee\u306e\u8a08\u7b97\n            for op3 in [\"+\", \"-\"]: # 3\u3064\u76ee\u306e\u8a08\u7b97\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7: # \u8a08\u7b97\u5f0f\u304c7\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + \"=7\") # 7\u306b\u306a\u3063\u305f\u5834\u5408\u306b\u51fa\u529b\n                    exit() # \u51fa\u529b\u3057\u305f\u3089\u7d42\u4e86\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    input_val = list(str(sys.stdin.readline().strip()))\n    a, b, c, d = int(input_val[0]), int(input_val[1]), int(input_val[2]), int(input_val[3])\n    for op1 in [\"+\", \"-\"]:\n        for op2 in [\"+\", \"-\"]:\n            for op3 in [\"+\", \"-\"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    sys.exit(0)\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + \"=7\")\n                    break\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a = int(input_val[0])\n    b = int(input_val[1])\n    c = int(input_val[2])\n    d = int(input_val[3])\n    for op1 in [\"+\", \"-\"]:\n        for op2 in [\"+\", \"-\"]:\n            for op3 in [\"+\", \"-\"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + \"=7\")\n                    sys.exit()\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650097553,
  "object": "edit"
}
2022-04-16 08:26:07.577289 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    input_val = list(sys.stdin.readline().strip())\n    a = int(input_val[0])  # 1\n    b = int(input_val[1])  # 2\n    c = int(input_val[2])  # 3\n    d = int(input_val[3])  # 4\n    for op1 in ["+", "-"]:\n        for op2 in ["+", "-"]:\n            for op3 in ["+", "-"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:  # 1+2-3+4=7\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + "=7")  # 1+2-3+4=7\n                    break\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a = int(input_val[0])\n    b = int(input_val[1])\n    c = int(input_val[2])\n    d = int(input_val[3])\n    for op1 in ["+", "-"]:\n        for op2 in ["+", "-"]:\n            for op3 in ["+", "-"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + "=7") # eval()の引数にはint型は渡せない\n                    break\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    input_val = sys.stdin.readline().strip()\n    a = int(input_val[0]) # 1\n    b = int(input_val[1]) # 2\n    c = int(input_val[2]) # 3\n    d = int(input_val[3]) # 4\n    for op1 in ["+", "-"]: # +, -\n        for op2 in ["+", "-"]: # +, -\n            for op3 in ["+", "-"]: # +, -\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7: # 1+2+3+4 = 7\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + "=7") # 1+2+3+4=7\n                    break # break\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a = int(input_val[0])\n    b = int(input_val[1])\n    c = int(input_val[2])\n    d = int(input_val[3])\n    for op1 in ["+", "-"]:\n        for op2 in ["+", "-"]:\n            for op3 in ["+", "-"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + "=7")\n                    break\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a, b, c, d = int(input_val[0]), int(input_val[1]), int(input_val[2]), int(input_val[3])\n    for op1 in ["+", "-"]:\n        for op2 in ["+", "-"]:\n            for op3 in ["+", "-"]:\n                problem = str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)\n                if eval(problem) == 7:\n                    print(problem + "=7")\n                    break\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    input_val = sys.stdin.readline()\n    a = int(input_val[0].strip())\n    b = int(input_val[1].strip())\n    c = int(input_val[2].strip())\n    d = int(input_val[3].strip())\n    for op1 in ["+", "-"]:\n        for op2 in ["+", "-"]:\n            for op3 in ["+", "-"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + "=7")\n                    break\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a = int(input_val[0])\n    b = int(input_val[1])\n    c = int(input_val[2])\n    d = int(input_val[3])\n    for op1 in ["+", "-"]: # 1つ目の計算\n        for op2 in ["+", "-"]: # 2つ目の計算\n            for op3 in ["+", "-"]: # 3つ目の計算\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7: # 計算式が7になるかどうかを判定\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + "=7") # 7になった場合に出力\n                    exit() # 出力したら終了\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    input_val = list(str(sys.stdin.readline().strip()))\n    a, b, c, d = int(input_val[0]), int(input_val[1]), int(input_val[2]), int(input_val[3])\n    for op1 in ["+", "-"]:\n        for op2 in ["+", "-"]:\n            for op3 in ["+", "-"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    sys.exit(0)\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + "=7")\n                    break\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    input_val = str(sys.stdin.readline())\n    input_val = list(input_val.strip())\n    a = int(input_val[0])\n    b = int(input_val[1])\n    c = int(input_val[2])\n    d = int(input_val[3])\n    for op1 in ["+", "-"]:\n        for op2 in ["+", "-"]:\n            for op3 in ["+", "-"]:\n                if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d)) == 7:\n                    print(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + "=7")\n                    sys.exit()\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 08:26:07.577449 size on output set 9
2022-04-16 08:26:07.577461 num operations 1
2022-04-16 08:26:07.577467 size on input set 1
2022-04-16 08:26:19.774876 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom itertools import product\n\n#get input\nABCD = input()\nABCD = list(ABCD)\n\n#all possible combinations of + and -\n#this is a list of tuples\nsigns = list(product([\"+\",\"-\"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + \"=7\")\n            exit()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input().split()\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product([\"+\",\"-\"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + \"=7\")\n            exit()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input()\n    ABCD = list(ABCD) \n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product([\"+\",\"-\"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + \"=7\")\n            exit()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input(\"\")\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product([\"+\",\"-\"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + \"=7\")\n            break\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input()\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product([\"+\",\"-\"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3] + \"7\"\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result)\n            exit()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input(\"\")\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product([\"+\",\"-\"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = str(ABCD[0]) + sign[0] + str(ABCD[1]) + sign[1] + str(ABCD[2]) + sign[2] + str(ABCD[3])\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + \"=7\")\n            exit()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = raw_input()\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product([\"+\",\"-\"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + \"=7\") \n            exit()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = list(input())\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product([\"+\",\"-\"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3] + \"==7\"\n        #if the result is 7, print and exit\n        if eval(result):\n            print(result + \"=7\")\n            exit()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = list(input())\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product([\"+\",\"-\"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + \"=7\")\n            exit()\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650097567,
  "object": "edit"
}
2022-04-16 08:26:19.775139 fix syntax errors 9 ['\n\nfrom itertools import product\n\n#get input\nABCD = input()\nABCD = list(ABCD)\n\n#all possible combinations of + and -\n#this is a list of tuples\nsigns = list(product(["+","-"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + "=7")\n            exit()\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input().split()\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product(["+","-"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + "=7")\n            exit()\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input()\n    ABCD = list(ABCD) \n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product(["+","-"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + "=7")\n            exit()\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input("")\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product(["+","-"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + "=7")\n            break\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input()\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product(["+","-"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3] + "7"\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result)\n            exit()\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = input("")\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product(["+","-"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = str(ABCD[0]) + sign[0] + str(ABCD[1]) + sign[1] + str(ABCD[2]) + sign[2] + str(ABCD[3])\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + "=7")\n            exit()\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = raw_input()\n    ABCD = list(ABCD)\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product(["+","-"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + "=7") \n            exit()\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = list(input())\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product(["+","-"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3] + "==7"\n        #if the result is 7, print and exit\n        if eval(result):\n            print(result + "=7")\n            exit()\n\nif __name__ == "__main__":\n    main()\n', '\nfrom itertools import product\n\ndef main():\n    #get input\n    ABCD = list(input())\n\n    #all possible combinations of + and -\n    #this is a list of tuples\n    signs = list(product(["+","-"], repeat=3))\n\n    #for each combination of signs\n    for sign in signs:\n        #create the formula\n        result = ABCD[0] + sign[0] + ABCD[1] + sign[1] + ABCD[2] + sign[2] + ABCD[3]\n        #if the result is 7, print and exit\n        if eval(result) == 7:\n            print(result + "=7")\n            exit()\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 08:26:19.775260 size on output set 9
