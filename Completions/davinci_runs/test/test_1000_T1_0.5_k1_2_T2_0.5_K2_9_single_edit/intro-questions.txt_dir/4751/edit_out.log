2022-04-16 10:10:24.801260 num operations 1
2022-04-16 10:10:24.801278 size on input set 1
2022-04-16 10:10:35.412465 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# https://leetcode.com/problems/linked-list-cycle/submissions/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n"
    },
    {
      "index": 1,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n"
    },
    {
      "index": 3,
      "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n\n        return False\n"
    },
    {
      "index": 4,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode):\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False \n"
    },
    {
      "index": 5,
      "text": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nimport math\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return 0\n        slow = head.next\n        fast = head.next.next\n        while fast != None and fast.next != None and fast != slow:\n            fast = fast.next.next\n            slow = slow.next\n        if fast == None or fast.next == None:\n            return 0\n        count = 1\n        slow = slow.next\n        while slow != fast:\n            slow = slow.next\n            count += 1\n        return count\n"
    },
    {
      "index": 6,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n"
    },
    {
      "index": 7,
      "text": "\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x=None):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n"
    },
    {
      "index": 8,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n"
    }
  ],
  "created": 1650103824,
  "object": "edit"
}
2022-04-16 10:10:35.412756 fix syntax errors 9 ['# https://leetcode.com/problems/linked-list-cycle/submissions/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n', '#!/usr/bin/python3\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n', '\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n\n        return False\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode):\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False \n', '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nimport math\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return 0\n        slow = head.next\n        fast = head.next.next\n        while fast != None and fast.next != None and fast != slow:\n            fast = fast.next.next\n            slow = slow.next\n        if fast == None or fast.next == None:\n            return 0\n        count = 1\n        slow = slow.next\n        while slow != fast:\n            slow = slow.next\n            count += 1\n        return count\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n', '\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x=None):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n']
2022-04-16 10:10:35.412902 size on output set 9
2022-04-16 10:10:35.412919 num operations 1
2022-04-16 10:10:35.412926 size on input set 1
2022-04-16 10:10:42.568575 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Solution:\n    def hasCycle(self, head):\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 1,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 3,
      "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 4,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 5,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 6,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 7,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n\n        return False\n"
    },
    {
      "index": 8,
      "text": "# Linked List Cycle\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    }
  ],
  "created": 1650103835,
  "object": "edit"
}
2022-04-16 10:10:42.568828 fix syntax errors 9 ['\nclass Solution:\n    def hasCycle(self, head):\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n\n        return False\n', '# Linked List Cycle\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n']
2022-04-16 10:10:42.568983 size on output set 8
2022-04-16 10:10:42.569001 num operations 1
2022-04-16 10:10:42.569006 size on input set 1
2022-04-16 10:10:53.181390 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 1,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\n# class Solution:\n#     def hasCycle(self, head: ListNode) -> bool:\n#         if not head or not head.next:\n#             return False\n#         slow = head\n#         fast = head.next\n#         while slow != fast:\n#             if not fast or not fast.next:\n#                 return False\n#             slow = slow.next\n#             fast = fast.next.next\n#         return True\n"
    },
    {
      "index": 2,
      "text": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 3,
      "text": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 4,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 5,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 6,
      "text": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 7,
      "text": "\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 8,
      "text": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    }
  ],
  "created": 1650103842,
  "object": "edit"
}
2022-04-16 10:10:53.181627 fix syntax errors 9 ['\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\n# class Solution:\n#     def hasCycle(self, head: ListNode) -> bool:\n#         if not head or not head.next:\n#             return False\n#         slow = head\n#         fast = head.next\n#         while slow != fast:\n#             if not fast or not fast.next:\n#                 return False\n#             slow = slow.next\n#             fast = fast.next.next\n#         return True\n', '# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n']
2022-04-16 10:10:53.181752 size on output set 4
2022-04-16 10:10:53.181764 num operations 1
2022-04-16 10:10:53.181769 size on input set 1
2022-04-16 10:11:01.615359 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 1,
      "text": "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 2,
      "text": "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return true\n3. If fast and slow don't meet, return false\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 3,
      "text": "\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 4,
      "text": "\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 5,
      "text": "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 6,
      "text": "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 7,
      "text": "\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\n\n\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    },
    {
      "index": 8,
      "text": "\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"
    }
  ],
  "created": 1650103853,
  "object": "edit"
}
2022-04-16 10:11:01.615595 fix syntax errors 9 ['\n"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '\n"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '\n"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return true\n3. If fast and slow don\'t meet, return false\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '\n"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '\n"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\n\n\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n', '"""\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don\'t meet, return False\n\nT: O(n), S: O(1)\n"""\n\n"""\n@param {ListNode} head\n@return {boolean}\n"""\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n']
2022-04-16 10:11:01.615718 size on output set 8
2022-04-16 10:11:01.615730 num operations 1
2022-04-16 10:11:01.615735 size on input set 1
2022-04-16 10:11:11.031019 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    },
    {
      "index": 1,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n\n        return False\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    },
    {
      "index": 3,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    },
    {
      "index": 4,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    },
    {
      "index": 5,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    },
    {
      "index": 6,
      "text": "\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    },
    {
      "index": 7,
      "text": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if head == None:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        fast = dummy\n        slow = dummy\n        for i in range(n):\n            fast = fast.next\n        while fast.next != None:\n            fast = fast.next\n            slow = slow.next\n        slow.next = slow.next.next\n        return dummy.next\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    },
    {
      "index": 8,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n"
    }
  ],
  "created": 1650103861,
  "object": "edit"
}
2022-04-16 10:11:11.031407 fix syntax errors 9 ['\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n', '\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n', '\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n', '\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n', '\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n', '# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        """\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        """\n        if head == None:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        fast = dummy\n        slow = dummy\n        for i in range(n):\n            fast = fast.next\n        while fast.next != None:\n            fast = fast.next\n            slow = slow.next\n        slow.next = slow.next.next\n        return dummy.next\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n']
2022-04-16 10:11:11.031593 size on output set 8
2022-04-16 10:11:11.031607 num operations 1
2022-04-16 10:11:11.031612 size on input set 1
2022-04-16 10:11:22.270137 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n        return True\n"
    },
    {
      "index": 1,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 3,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        pass\n"
    },
    {
      "index": 4,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 5,
      "text": "# https://leetcode.com/problems/linked-list-cycle/\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 6,
      "text": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head):\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 7,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    },
    {
      "index": 8,
      "text": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n"
    }
  ],
  "created": 1650103871,
  "object": "edit"
}
2022-04-16 10:11:22.270382 fix syntax errors 9 ['\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n        return True\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        pass\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '# https://leetcode.com/problems/linked-list-cycle/\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head):\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n', '\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n']
2022-04-16 10:11:22.270527 size on output set 7
2022-04-16 10:11:22.270546 num operations 1
2022-04-16 10:11:22.270553 size on input set 1
2022-04-16 10:11:34.355376 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 1,
      "text": "\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 3,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 4,
      "text": "\n"
    },
    {
      "index": 5,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n        return False\n"
    },
    {
      "index": 6,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
      "index": 7,
      "text": "\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:\n        if not s:\n            return False\n        if self.isSame(s,t):\n            return True\n        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)\n    \n    def isSame(self,s,t):\n        if not s and not t:\n            return True\n        if not s or not t:\n            return False\n        if s.val != t.val:\n            return False\n        return self.isSame(s.left,t.left) and self.isSame(s.right,t.right)\n"
    },
    {
      "index": 8,
      "text": "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    }
  ],
  "created": 1650103882,
  "object": "edit"
}
2022-04-16 10:11:34.355615 fix syntax errors 9 ['\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n', "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n        return False\n", '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n', '\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:\n        if not s:\n            return False\n        if self.isSame(s,t):\n            return True\n        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)\n    \n    def isSame(self,s,t):\n        if not s and not t:\n            return True\n        if not s or not t:\n            return False\n        if s.val != t.val:\n            return False\n        return self.isSame(s.left,t.left) and self.isSame(s.right,t.right)\n', '\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n']
2022-04-16 10:11:34.355740 size on output set 6
2022-04-16 10:11:34.355751 num operations 1
2022-04-16 10:11:34.355757 size on input set 1
2022-04-16 10:11:41.542156 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 1,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 2,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 3,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None or head.next is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 4,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None or head.next is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 5,
      "text": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 6,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 7,
      "text": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    },
    {
      "index": 8,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n"
    }
  ],
  "created": 1650103894,
  "object": "edit"
}
2022-04-16 10:11:41.542405 fix syntax errors 9 ['# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None or head.next is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None or head.next is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n', '\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        """\n        :type head: ListNode\n        :rtype: bool\n        """\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n']
2022-04-16 10:11:41.542543 size on output set 3
