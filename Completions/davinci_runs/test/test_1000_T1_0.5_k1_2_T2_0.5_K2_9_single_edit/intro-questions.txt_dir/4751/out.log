2022-04-09 21:55:42.019067 """
Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).


Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.


Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.
"""
2022-04-09 21:55:42.019118 --------------------------
2022-04-09 21:56:06.357173 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    }
  ],
  "created": 1649555742,
  "id": "cmpl-4vH5izI1yXC9UieDCrEAWnx9Nbq1Q",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:56:06.357484 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True"
}
2022-04-09 21:56:06.357522 REASON stop
2022-04-09 21:56:06.397018 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False"
}
2022-04-09 21:56:06.397277 REASON stop
2022-04-09 21:56:06.398661 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True"
}
2022-04-09 21:56:06.398797 REASON stop
2022-04-09 21:56:06.399233 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False"
}
2022-04-09 21:56:06.399322 REASON stop
2022-04-09 21:56:06.399959 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
}
2022-04-09 21:56:06.400063 REASON stop
2022-04-09 21:56:06.400387 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False"
}
2022-04-09 21:56:06.400422 REASON stop
2022-04-09 21:56:06.400590 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False"
}
2022-04-09 21:56:06.400618 REASON stop
2022-04-09 21:56:06.400784 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
}
2022-04-09 21:56:06.400810 REASON stop
