2022-04-16 16:04:41.701149 num operations 1
2022-04-16 16:04:41.701175 size on input set 1
2022-04-16 16:04:50.969071 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 2,
      "text": "N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 3,
      "text": "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\") \nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 4,
      "text": "\n\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\") \nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 5,
      "text": "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 6,
      "text": "\na = int(input())\nb = int(input())\nc = int(input())\nif a == b == c:\n    print(3)\nelif a == b or a == c or b == c:\n    print(2)\nelse: print(0)\n"
    },
    {
      "index": 7,
      "text": "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 8,
      "text": "\n\nn = int(input())\n\nsum_time = 0\nsum_minutes = 0\nfor i in range(n):\n    m, s = map(int, input().split())\n    sum_time += s\n    sum_minutes += m\n\nif sum_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(sum_time/sum_minutes)\n"
    }
  ],
  "created": 1650125081,
  "object": "edit"
}
2022-04-16 16:04:50.969342 fix syntax errors 9 ['\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n', '\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n', 'N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n', '\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error") \nelse:\n    print(total_time/total_minutes)\n', '\n\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error") \nelse:\n    print(total_time/total_minutes)\n', '\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n', '\na = int(input())\nb = int(input())\nc = int(input())\nif a == b == c:\n    print(3)\nelif a == b or a == c or b == c:\n    print(2)\nelse: print(0)\n', '\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n', '\n\nn = int(input())\n\nsum_time = 0\nsum_minutes = 0\nfor i in range(n):\n    m, s = map(int, input().split())\n    sum_time += s\n    sum_minutes += m\n\nif sum_minutes == 0:\n    print("measurement error")\nelse:\n    print(sum_time/sum_minutes)\n']
2022-04-16 16:04:50.969384 size on output set 6
2022-04-16 16:04:50.969394 num operations 1
2022-04-16 16:04:50.969399 size on input set 1
2022-04-16 16:05:04.728222 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# import needed libraries\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i] / 60\n        # calculate the average\n        avg = sum_min / M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# define main function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define function\ndef avg_min(n, M, S):\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\n# define function\ndef avg_min(n, M, S, C):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/C[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    C = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s, c = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n        # add the number of cycles to the list\n        C.append(c)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S, C))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "# import module\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "# import modules\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variable\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize lists\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650125091,
  "object": "edit"
}
2022-04-16 16:05:04.728614 fix syntax errors 9 ['# import needed libraries\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i] / 60\n        # calculate the average\n        avg = sum_min / M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# define main function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define function\ndef avg_min(n, M, S):\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# define function\ndef avg_min(n, M, S, C):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/C[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    C = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s, c = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n        # add the number of cycles to the list\n        C.append(c)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S, C))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '# import module\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '# import modules\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variable\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize lists\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n']
2022-04-16 16:05:04.728743 size on output set 8
2022-04-16 16:05:04.728755 num operations 1
2022-04-16 16:05:04.728760 size on input set 1
2022-04-16 16:05:13.331019 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S / M)\n    print(sum(wait_time) / N)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S / M)\n    print(sum(wait_time) / N)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time, M, S = [], [], []\n    for i in range(N):\n        M.append(int(sys.stdin.readline().split()[0]))\n        S.append(int(sys.stdin.readline().split()[1]))\n        wait_time.append(S[i]/M[i])\n    print(sum(wait_time)/len(wait_time))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S / M)\n    print(sum(wait_time) / N)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = 0\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time += S/M\n    print(wait_time/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650125104,
  "object": "edit"
}
2022-04-16 16:05:13.331262 fix syntax errors 9 ['import sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S / M)\n    print(sum(wait_time) / N)\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S / M)\n    print(sum(wait_time) / N)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time, M, S = [], [], []\n    for i in range(N):\n        M.append(int(sys.stdin.readline().split()[0]))\n        S.append(int(sys.stdin.readline().split()[1]))\n        wait_time.append(S[i]/M[i])\n    print(sum(wait_time)/len(wait_time))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S / M)\n    print(sum(wait_time) / N)\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = 0\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time += S/M\n    print(wait_time/N)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 16:05:13.331351 size on output set 7
2022-04-16 16:05:13.331365 num operations 1
2022-04-16 16:05:13.331370 size on input set 1
2022-04-16 16:05:54.935985 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(int(seconds/minutes))\n"
    },
    {
      "index": 1,
      "text": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    },
    {
      "index": 2,
      "text": "import math\n\n\nn = int(input(\"Enter the number of measurements: \"))\n\nhours = 0\nseconds = 0\n\nfor i in range(n):\n    # h, m = map(int, input().split())\n    h, m = (int(x) for x in input().split())\n    hours += h\n    seconds += m * 60\n\nif seconds / hours > 3600:\n    print(\"measurement error\")\nelse:\n    print(math.floor(seconds / hours))\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\n\nminutes = 0.0\nseconds = 0.0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 59:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    },
    {
      "index": 5,
      "text": "n = int(input())\na = []\nb = []\nfor i in range(n):\n    a.append(input())\n    b.append(input())\n\n\nfor i in range(n):\n    if a[i] == b[i]:\n        print(a[i])\n    else:\n        print(a[i]+b[i])\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input()) # number of students\n\nminutes = 0\nscore = 0\nseconds = 0\n\nfor i in range(n):\n    m, s, p = map(int, input().split())\n    minutes += m\n    score += p\n    seconds += s\n\nif minutes == 0 or seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(score/minutes)\n"
    },
    {
      "index": 8,
      "text": "\nn = int(input())\n\nminutes = 0\nseconds = 0\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    }
  ],
  "created": 1650125113,
  "object": "edit"
}
2022-04-16 16:05:54.936356 fix syntax errors 9 ['\n\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(int(seconds/minutes))\n', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n', 'import math\n\n\nn = int(input("Enter the number of measurements: "))\n\nhours = 0\nseconds = 0\n\nfor i in range(n):\n    # h, m = map(int, input().split())\n    h, m = (int(x) for x in input().split())\n    hours += h\n    seconds += m * 60\n\nif seconds / hours > 3600:\n    print("measurement error")\nelse:\n    print(math.floor(seconds / hours))\n', '\n\nn = int(input())\n\nminutes = 0.0\nseconds = 0.0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 59:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n', '\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n', 'n = int(input())\na = []\nb = []\nfor i in range(n):\n    a.append(input())\n    b.append(input())\n\n\nfor i in range(n):\n    if a[i] == b[i]:\n        print(a[i])\n    else:\n        print(a[i]+b[i])\n', '\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n', '\n\nn = int(input()) # number of students\n\nminutes = 0\nscore = 0\nseconds = 0\n\nfor i in range(n):\n    m, s, p = map(int, input().split())\n    minutes += m\n    score += p\n    seconds += s\n\nif minutes == 0 or seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(score/minutes)\n', '\nn = int(input())\n\nminutes = 0\nseconds = 0\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n']
2022-04-16 16:05:54.936407 size on output set 8
2022-04-16 16:05:54.936418 num operations 1
2022-04-16 16:05:54.936423 size on input set 1
2022-04-16 16:06:04.444856 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint(\"measurement error\")  # noqa: T001\n\telse:\n\t\tprint(s / (n * 60))  # noqa: T001\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(round(s / (n * 60), 2))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print(\"measurement error\")\n    else:\n        print(s / (n * 60))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(float, input().split())\n\t\ts += (m * 60 - s1)\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print(\"measurement error\")\n    else:\n        print(s / (n * 60))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(int(s / (n * 60)))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(float, input().split())\n\t\ts += m * 60 - s1 * 60\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print(\"measurement error\")\n    else:\n        print(s / (n * 60))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650125154,
  "object": "edit"
}
2022-04-16 16:06:04.445130 fix syntax errors 9 ['\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint("measurement error")  # noqa: T001\n\telse:\n\t\tprint(s / (n * 60))  # noqa: T001\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(round(s / (n * 60), 2))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print("measurement error")\n    else:\n        print(s / (n * 60))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(float, input().split())\n\t\ts += (m * 60 - s1)\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print("measurement error")\n    else:\n        print(s / (n * 60))\n\nif __name__ == \'__main__\':\n    main()\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(int(s / (n * 60)))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(float, input().split())\n\t\ts += m * 60 - s1 * 60\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print("measurement error")\n    else:\n        print(s / (n * 60))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 16:06:04.445231 size on output set 7
2022-04-16 16:06:04.445244 num operations 1
2022-04-16 16:06:04.445249 size on input set 1
2022-04-16 16:06:18.439387 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n\n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Workaround to input() in CodeForces.\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp_ints = input().split()\n    temp_ints = [int(i) for i in temp_ints]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds) -> int:\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()\n    number_of_observations = number_of_observations[0]\n    number_of_minutes_and_seconds = [[]]\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds[i] = read_ints()\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[1], i[0])\n        print(average_length_of_minute)\n        if average_length_of_minute < 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n\n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds_elapsed):\n    return seconds_elapsed / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds_elapsed = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds_elapsed.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds_elapsed:\n        number_of_minutes = i[0]\n        seconds_elapsed = i[1]\n        average_length_of_minute = calculate_average_length_of_minute(number_of_minutes, seconds_elapsed)\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, total_seconds):\n    return total_seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1]) \n        if average_length_of_minute < 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds, number_of_observations):\n    return seconds / (number_of_minutes * number_of_observations)\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n\n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1], number_of_observations)\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\n# Workaround to input() in CodeForces.\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650125164,
  "object": "edit"
}
2022-04-16 16:06:18.439646 fix syntax errors 9 ['\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n\n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces.\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp_ints = input().split()\n    temp_ints = [int(i) for i in temp_ints]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds) -> int:\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()\n    number_of_observations = number_of_observations[0]\n    number_of_minutes_and_seconds = [[]]\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds[i] = read_ints()\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[1], i[0])\n        print(average_length_of_minute)\n        if average_length_of_minute < 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n\n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds_elapsed):\n    return seconds_elapsed / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds_elapsed = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds_elapsed.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds_elapsed:\n        number_of_minutes = i[0]\n        seconds_elapsed = i[1]\n        average_length_of_minute = calculate_average_length_of_minute(number_of_minutes, seconds_elapsed)\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, total_seconds):\n    return total_seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1]) \n        if average_length_of_minute < 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds, number_of_observations):\n    return seconds / (number_of_minutes * number_of_observations)\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n\n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1], number_of_observations)\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces.\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 16:06:18.439806 size on output set 8
2022-04-16 16:06:18.439819 num operations 1
2022-04-16 16:06:18.439824 size on input set 1
2022-04-16 16:06:31.489425 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Number of observations \nN = int(input()) \n\n# List of tuples (minutes, seconds) \ndata = [] \n\n# Get data from user \nfor i in range(N): \n    data.append(tuple(int(x) for x in input().split())) \n\n# Calculate average length of an S.L. minute \ntotal = 0 \nfor i in data: \n    total += i[1] \n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\" \nif total/N <= 60: \n    print(\"measurement error\") \nelse: \n    print(total/N/60) \n"
    },
    {
      "index": 1,
      "text": "\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\ntotal = sum(i[1] for i in data)\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    },
    {
      "index": 2,
      "text": "\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\", otherwise print average length\nif total/N >= 60:\n    print(total/N/60)\nelse:\n    print(total/N/60)\n"
    },
    {
      "index": 3,
      "text": "\n\n# Calculate average length of an S.L. minute\ndef calculate_average(data):\n    total = 0\n    for i in data:\n        total += i[1]\n    return total/len(data)/60\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\ndef print_result(average):\n    if average <= 60:\n        print(\"measurement error\")\n    else:\n        print(average)\n\n# Main\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\nprint_result(calculate_average(data))\n"
    },
    {
      "index": 4,
      "text": "\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    },
    {
      "index": 5,
      "text": "\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\" \nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom collections import defaultdict\n\nn = int(input())\nd = defaultdict(int)\n\nfor _ in range(n):\n    s = input()\n    d[s] += 1\n\nprint(len(d))\nfor _, v in d.items():\n    print(v, end=\" \")\n"
    },
    {
      "index": 7,
      "text": "\n"
    },
    {
      "index": 8,
      "text": "\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n"
    }
  ],
  "created": 1650125178,
  "object": "edit"
}
2022-04-16 16:06:31.489753 fix syntax errors 9 ['\n\n# Number of observations \nN = int(input()) \n\n# List of tuples (minutes, seconds) \ndata = [] \n\n# Get data from user \nfor i in range(N): \n    data.append(tuple(int(x) for x in input().split())) \n\n# Calculate average length of an S.L. minute \ntotal = 0 \nfor i in data: \n    total += i[1] \n\n# If average length is shorter than or equal to a normal minute, print "measurement error" \nif total/N <= 60: \n    print("measurement error") \nelse: \n    print(total/N/60) \n', '\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\ntotal = sum(i[1] for i in data)\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n', '\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error", otherwise print average length\nif total/N >= 60:\n    print(total/N/60)\nelse:\n    print(total/N/60)\n', '\n\n# Calculate average length of an S.L. minute\ndef calculate_average(data):\n    total = 0\n    for i in data:\n        total += i[1]\n    return total/len(data)/60\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\ndef print_result(average):\n    if average <= 60:\n        print("measurement error")\n    else:\n        print(average)\n\n# Main\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\nprint_result(calculate_average(data))\n', '\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n', '\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error" \nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n', '\n\nfrom collections import defaultdict\n\nn = int(input())\nd = defaultdict(int)\n\nfor _ in range(n):\n    s = input()\n    d[s] += 1\n\nprint(len(d))\nfor _, v in d.items():\n    print(v, end=" ")\n', '\n', '\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n']
2022-04-16 16:06:31.489807 size on output set 9
2022-04-16 16:06:31.489819 num operations 1
2022-04-16 16:06:31.489825 size on input set 1
2022-04-16 16:06:38.895567 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/60/total_minutes\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/float(total_minutes)\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes/60\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(int(avg_min))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = int(total_seconds/total_minutes)\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_minutes/total_seconds\n    if avg_min >= 60:\n        print(avg_min)\n    else:\n        print(\"measurement error\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes/60\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/float(total_minutes)\n    if avg_min <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650125191,
  "object": "edit"
}
2022-04-16 16:06:38.895904 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/60/total_minutes\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/float(total_minutes)\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes/60\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(int(avg_min))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = int(total_seconds/total_minutes)\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_minutes/total_seconds\n    if avg_min >= 60:\n        print(avg_min)\n    else:\n        print("measurement error")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes/60\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/float(total_minutes)\n    if avg_min <= 60:\n        print("measurement error")\n    else:\n        print(avg_min)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 16:06:38.895977 size on output set 7
