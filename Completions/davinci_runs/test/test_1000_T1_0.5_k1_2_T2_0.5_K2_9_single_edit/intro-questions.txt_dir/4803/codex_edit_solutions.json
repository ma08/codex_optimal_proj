["import math\n\nimport sys\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(math.pow(N, 1 / N))\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - N\n\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    print(pow(2, N))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math \n\ndef f(x): \n    return math.log(x, 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910477047449949988192520609389252603809159729918315224053430751537885413928229265833195152975172837327286760072481715842678424706667291965808101243442775783767842402963573517894999188021762430965206564211827316726257539594717255934637238632261482742622208671155839599926521176252698917540988159343930825239106053009286445257217088853196356986962795036739317684088916382728208354614938031039281154121491351615642269847507430329716746964066653152703532546711266752246055119958183196376370761799191920357958200759560530234626775794393630746305690108011494271410093913691381072581378135789400559950018354251184172136055727522103526803735726527922417373605751127887218190844900617801388971077082293100279766593583875890939568814856026322439372656247277603789081445883785501970284377936240782505270487581647032458129087839523245323789602984166922548964971560698119218658492677040395648127810217991321741630581055459880130048456299765112124153637451500563507012781592671424134210330156616535602473380784302865525722275304999883701534879300806260180962381516136690334111138653851091936739383522934588832255088706450753947395204396807906708680644509698654880168287434378612645381583428075306184548590379821799459968115441974253634439960290251001588827216474500682070419376158454712318346007262933955054823955713725684023226821301247679452264482091023564775272308208106351889915269288910845557112660396503439789627825001611015323516051965590421184494990778999200732947690586857787872098290135295661397888486050978608595701773129815531495168146717695976099421003618355913877781769845875810446628399880600616229848616935337386578773598336161338413385368421197893890018529569196780455448285848370117096721253533875862158231013310387766827211572694951817958975469399264219791552338576623167627547570354699414892904130186386119439196283887054367774322427680913236544948536676800000106526248547305586159899914017076983854831887501429389089950685453076511680333732226517566220752695179144225280816517166776672793035485154204023817460892328391703275425750867655117859395002793389592057668278967764453184040418554010435134838953120132637836928358082719378312654961745997056745071833206503455664403449045362756001125018433560736122276594927839370647842645676338818807565612168960504161139039063960162022153684941092605387688714837989559999112099164646441191856827700457424343402167227644558933012778158686952506949936461017568506016714535431581480105458860564550133203758645485840324029871709348091055621178432975209905454219\n", "\nimport math\n\ndef f(x): return math.exp(x * math.log(2)) - 2\n\nN = float(input()) \n\nl, r = 0.0, 2.0 \n\nwhile r - l > 1e-9: \n    m = (l + r) / 2 \n    if f(m) < 0: \n        l = m \n    else: \n        r = m \n\nprint(l) \n", "import math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\n\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "\n\n# TODO.\n", "\nimport os\nimport sys\n \ndef main():\n \n    file_name = sys.argv[1]\n    if os.path.exists(file_name):\n        with open(file_name, 'r') as f:\n            for line in f:\n                print(line, end='')\n    else:\n        print('file not found:', file_name)\n \nif __name__ == '__main__':\n    main()\n", "\ndef factorial(n):\n    if n > 0:\n        return n * factorial(n - 1)\n    else:\n        return 1\nprint(factorial(int(input())))\n", "\n\nimport math\n\nN = int(input())\n\ndef f(x):\n    return math.pow(x, x) - N \n\na = 1\nb = N\n\nwhile b - a > 0.0000001:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\n\nprint(a)\n", "#!/usr/bin/python\n\nimport math\n\ndef f(x):\n    return math.log(x, 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910477047449949988192520609389252603809159729918315224053430751537885413928229265833195152975172837327286760072481715842678424706667291965808101243442775783767842402963573517894999188021762430965206564211827316726257539594717255934637238632261482742622208671155839599926521176252698917540988159343930825239106053009286445257217088853196356986962795036739317684088916382728208354614938031039281154121491351615642269847507430329716746964066653152703532546711266752246055119958183196376370761799191920357958200759560530234626775794393630746305690108011494271410093913691381072581378135789400559950018354251184172136055727522103526803735726527922417373605751127887218190844900617801388971077082293100279766593583875890939568814856026322439372656247277603789081445883785501970284377936240782505270487581647032458129087839523245323789602984166922548964971560698119218658492677040395648127810217991321741630581055459880130048456299765112124153637451500563507012781592671424134210330156616535602473380784302865525722275304999883701534879300806260180962381516136690334111138653851091936739383522934588832255088706450753947395204396807906708680644509698654880168287434378612645381583428075306184548590379821799459968115441974253634439960290251001588827216474500682070419376158454712318346007262933955054823955713725684023226821301247679452264482091023564775272308208106351889915269288910845557112660396503439789627825001611015323516051965590421184494990778999200732947690586857787872098290135295661397888486050978608595701773129815531495168146717695976099421003618355913877781769845875810446628399880600616229848616935337386578773598336161338413385368421197893890018529569196780455448285848370117096721253533875862158231013310387766827211572694951817958975469399264219791552338576623167627547570354699414892904130186386119439196283887054367774322427680913236544948536676800000106526248547305586159899914017076983854831887501429389089950685453076511680333732226517566220752695179144225280816517166776672793035485154204023817460892328391703275425750867655117859395002793389592057668278967764453184040418554010435134838953120132637836928358082719378312654961745997056745071833206503455664403449045362756001125018433560736122276594927839370647842645676338818807565612168960504161139039063960162022153684941092605387688714837989559999112099164646441191856827700457424343402167227644558933012778158686952506949936461017568506016714535431581480105458860564550133203758645485840324029871709348091055621178432975209905454219\n", "\n\nimport math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - N\n\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "#!/usr/bin/env python3\n\nimport math\n\nN = float(input())\n\ndef f(x):\n    return math.pow(x, x) - N\n\na = 0.5\nb = 2\n\nwhile b - a > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\n\nprint(a)\n", "#!/usr/bin/env python\n\nimport math\n\ndef f(x):\n\nif __name__ == '__main__':\n    print f(2)\n    return math.log(x, 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910477047449949988192520609389252603809159729918315224053430751537885413928229265833195152975172837327286760072481715842678424706667291965808101243442775783767842402963573517894999188021762430965206564211827316726257539594717255934637238632261482742622208671155839599926521176252698917540988159343930825239106053009286445257217088853196356986962795036739317684088916382728208354614938031039281154121491351615642269847507430329716746964066653152703532546711266752246055119958183196376370761799191920357958200759560530234626775794393630746305690108011494271410093913691381072581378135789400559950018354251184172136055727522103526803735726527922417373605751127887218190844900617801388971077082293100279766593583875890939568814856026322439372656247277603789081445883785501970284377936240782505270487581647032458129087839523245323789602984166922548964971560698119218658492677040395648127810217991321741630581055459880130048456299765112124153637451500563507012781592671424134210330156616535602473380784302865525722275304999883701534879300806260180962381516136690334111138653851091936739383522934588832255088706450753947395204396807906708680644509698654880168287434378612645381583428075306184548590379821799459968115441974253634439960290251001588827216474500682070419376158454712318346007262933955054823955713725684023226821301247679452264482091023564775272308208106351889915269288910845557112660396503439789627825001611015323516051965590421184494990778999200732947690586857787872098290135295661397888486050978608595701773129815531495168146717695976099421003618355913877781769845875810446628399880600616229848616935337386578773598336161338413385368421197893890018529569196780455448285848370117096721253533875862158231013310387766827211572694951817958975469399264219791552338576623167627547570354699414892904130186386119439196283887054367774322427680913236544948536676800000106526248547305586159899914017076983854831887501429389089950685453076511680333732226517566220752695179144225280816517166776672793035485154204023817460892328391703275425750867655117859395002793389592057668278967764453184040418554010435134838953120132637836928358082719378312654961745997056745071833206503455664403449045362756001125018433560736122276594927839370647842645676338818807565612168960504161139039063960162022153684941092605387688714837989559999112099164646441191856827700457424343402167227644558933012778158686952506949936461017568506016714535431581480105458860564550133203758645485840324029871709348091055621178432975209905454219\n", "\nfrom __future__ import absolute_import\n\nfrom . import core\n", "\nimport math\n\nn = float(input())\n\ndef f(x):\n    return math.pow(x, x) - n\n\na = 0.5\nb = 2\n\nwhile abs(b - a) > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\n\nprint(a)\n", "\n\nimport math\n\ndef tetration(N):\n    if N > 2.71828 or N < 0.36789:\n        return -1\n    return math.exp(math.log(N)/math.log(math.e))\n\nprint(tetration(float(input())))\n", "import math\n\ndef tetration(N):\n    if N > 2.71828:\n        return -1\n    if N < 0.36789:\n        return -1\n    return math.exp(math.log(N)/math.log(math.e))\n\nprint(tetration(float(input())))\n", "\nimport math\n\nN = float(input())\n\ndef f(x):\n    return math.pow(x, x) - N\n\na = 0.5\nb = 2\n\nwhile b - a > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\n\nprint(a)\n", "\n\nimport math\n\ndef tetration(N):\n    if N > 2.71828:\n        return -1\n    if N < 0.36789:\n        return -1\n    return math.exp(math.log(N)/math.log(math.e)) \n\nprint(tetration(float(input())))\n", "import sys\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(pow(N, 1 / N))\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint('hello world')\n", "\n\nimport math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\n\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\nprint(l)\n", "#!/usr/bin/env python3\n\n\nimport sys\n\nfilename = sys.argv[1]\nwith open(filename) as file:\n    print(file.read())\n\ndef f(x):\n    return math.pow(x, x) - N\n\na = 0.5\nb = 2\n\nwhile b - a > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\n\nprint(a)\n", "import sys\n\nimport math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\n\nN = float(sys.stdin.readline())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "\nimport math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\n\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "\n\nimport math\n\ndef tetration(N):\n    if N > 2.71828 or N < 0.36789:\n        return -1.0\n    return math.exp(math.log(N)/math.log(math.e))-1.0\n\nprint(tetration(float(input())))\n", "\nimport math\n\n\ndef f(x):\n    return math.log(x, 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910477047449949988192520609389252603809159729918315224053430751537885413928229265833195152975172837327286760072481715842678424706667291965808101243442775783767842402963573517894999188021762430965206564211827316726257539594717255934637238632261482742622208671155839599926521176252698917540988159343930825239106053009286445257217088853196356986962795036739317684088916382728208354614938031039281154121491351615642269847507430329716746964066653152703532546711266752246055119958183196376370761799191920357958200759560530234626775794393630746305690108011494271410093913691381072581378135789400559950018354251184172136055727522103526803735726527922417373605751127887218190844900617801388971077082293100279766593583875890939568814856026322439372656247277603789081445883785501970284377936240782505270487581647032458129087839523245323789602984166922548964971560698119218658492677040395648127810217991321741630581055459880130048456299765112124153637451500563507012781592671424134210330156616535602473380784302865525722275304999883701534879300806260180962381516136690334111138653851091936739383522934588832255088706450753947395204396807906708680644509698654880168287434378612645381583428075306184548590379821799459968115441974253634439960290251001588827216474500682070419376158454712318346007262933955054823955713725684023226821301247679452264482091023564775272308208106351889915269288910845557112660396503439789627825001611015323516051965590421184494990778999200732947690586857787872098290135295661397888486050978608595701773129815531495168146717695976099421003618355913877781769845875810446628399880600616229848616935337386578773598336161338413385368421197893890018529569196780455448285848370117096721253533875862158231013310387766827211572694951817958975469399264219791552338576623167627547570354699414892904130186386119439196283887054367774322427680913236544948536676800000106526248547305586159899914017076983854831887501429389089950685453076511680333732226517566220752695179144225280816517166776672793035485154204023817460892328391703275425750867655117859395002793389592057668278967764453184040418554010435134838953120132637836928358082719378312654961745997056745071833206503455664403449045362756001125018433560736122276594927839370647842645676338818807565612168960504161139039063960162022153684941092605387688714837989559999112099164646441191856827700457424343402167227644558933012778158686952506949936461017568506016714535431581480105458860564550133203758645485840324029871709348091055621178432975209905454219\n", "#!/usr/bin/env python3\n\nimport math\n\nN = int(input())\n\ndef f(x):\n    return math.pow(x, x) - N\n\na = 0.5\nb = 2\n\nwhile b - a > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\n\nprint(a)\n", "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().strip().split())\n    print(N, M)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef tetration(N):\n    if N > 2.71828:\n        return -1\n    if N < 0.36789:\n        return -1\n    return math.exp(math.log(N)/math.log(math.e))\n\nprint(tetration(float(input())))\n", "\nimport math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "\nimport sys\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(pow(N, 1 / N))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef tetration(N):\n    return math.exp(math.log(N)/math.log(math.e))\n\nprint(tetration(float(input())))\n", "\n\n# TODO:\n", "\n\nimport sys\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(pow(N, 1 / N))\n\nif __name__ == \"__main__\":\n\n    main()\n", "\n\n// TODO\n", "\n\nimport sys\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(pow(N, 1 / N)) \n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\n\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n", "#!/usr/bin/env python\n\nimport os\nimport sys\nimport json\nimport shutil\nimport logging\nimport argparse\nimport subprocess\n\nimport utils\n\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true')\n    parser.add_argument('-d', '--debug', action='store_true')\n    parser.add_argument('-n', '--dry-run', action='store_true')\n    parser.add_argument('-s', '--source-dir', default=os.getcwd())\n    parser.add_argument('-t', '--target-dir', default=os.getcwd())\n    parser.add_argument('--git-cmd', default='git')\n    parser.add_argument('--git-diff-cmd',\n                        default='git diff --name-only --diff-filter=ACMR')\n    parser.add_argument('--git-diff-cached-cmd',\n                        default='git diff --cached --name-only --diff-filter=ACMR')\n    parser.add_argument('--git-log-cmd',\n                        default='git log --name-only --pretty=format:')\n    parser.add_argument('--git-log-cached-cmd',\n                        default='git log --cached --name-only --pretty=format:')\n    parser.add_argument('--git-log-since-cmd',\n                        default='git log --name-only --pretty=format: --since=')\n    parser.add_argument('--git-log-since-cached-cmd',\n                        default='git log --cached --name-only --pretty=format: --since=')\n    return parser.parse_args()\n\n\ndef get_git_cmd(args, cmd):\n    return '\"{}\" {}'.format(args.git_cmd, cmd)\n\n\ndef get_git_diff_cmd(args):\n    return get_git_cmd(args, args.git_diff_cmd)\n\n\ndef get_git_diff_cached_cmd(args):\n    return get_git_cmd(args, args.git_diff_cached_cmd)\n\n\ndef get_git_log_cmd(args):\n    return get_git_cmd(args, args.git_log_cmd)\n\n\ndef get_git_log_cached_cmd(args):\n    return get_git_cmd(args, args.git_log_cached_cmd)\n\n\ndef get_git_log_since_cmd(args):\n    return get_git_cmd(args, args.git_log_since_cmd)\n\n\ndef get_git_log_since_cached_cmd(args):\n    return get_git_cmd(args, args.git_log_since_cached_cmd)\n\n\ndef get_git_diff_files(args, cached=False):\n    cmd = get_git_diff_cmd(args) if not cached else get_git_diff_cached_cmd(args)\n    output = subprocess.check_output(cmd, shell=True)\n    files = output.decode('utf-8').split()\n    return [os.path.normpath(f) for f in files]\n\n\ndef get_git_log_files(args, since, cached=False):\n    if since:\n        cmd = get_git_log_since_cmd(args) + since if not cached else get_git_log_since_cached_cmd(args) + since\n    else:\n        cmd = get_git_log_cmd(args) if not cached else get_git_log_cached_cmd(args)\n    output = subprocess.check_output(cmd, shell=True)\n    files = output.decode('utf-8').split()\n    return [os.path.normpath(f) for f in files]\n\n\ndef get_changed_files(args, since=None):\n    diff_files = get_git_diff_files(args)\n    diff_cached_files = get_git_diff_files(args, cached=True)\n    log_files = get_git_log_files(args, since)\n    log_cached_files = get_git_log_files(args, since, cached=True)\n    changed_files = set(diff_files + diff_cached_files + log_files + log_cached_files)\n    return changed_files\n\n\ndef get_changed_dirs(args, since=None):\n    changed_files = get_changed_files(args, since)\n    changed_dirs = set()\n    for f in changed_files:\n        d = os.path.dirname(f)\n        changed_dirs.add(d)\n    return changed_dirs\n\n\ndef copy_changed_files(args, since=None):\n    changed_files = get_changed_files(args, since)\n    for f in changed_files:\n        src = os.path.join(args.source_dir, f)\n        dst = os.path.join(args.target_dir, f)\n        if not os.path.exists(src):\n            logger.warning('source file does not exist: {}'.format(src))\n            continue\n        if os.path.isdir(src):\n            logger.warning('source file is a directory: {}'.format(src))\n            continue\n        d = os.path.dirname(dst)\n        if not os.path.exists(d):\n            os.makedirs(d)\n        logger.info('copying {} to {}'.format(src, dst))\n        if not args.dry_run:\n            shutil.copy(src, dst)\n\n\ndef copy_changed_dirs(args, since=None):\n    changed_dirs = get_changed_dirs(args, since)\n    for d in changed_dirs:\n        src = os.path.join(args.source_dir, d)\n        dst = os.path.join(args.target_dir, d)\n        if not os.path.exists(src):\n            logger.warning('source directory does not exist: {}'.format(src))\n            continue\n        if os.path.isfile(src):\n            logger.warning('source directory is a file: {}'.format(src))\n            continue\n        if not os.path.exists(dst):\n            logger.info('creating directory: {}'.format(dst))\n            if not args.dry_run:\n                os.makedirs(dst)\n\n\ndef main():\n    args = get_args()\n    utils.setup_logging(args)\n    copy_changed_dirs(args)\n    copy_changed_files(args)\n\n\nif __name__ == '__main__':\n    main()\n\n# TODO\n", "\n\nimport math\n\nN = float(input())\n\ndef f(x):\n    return math.pow(x, x) - N\n\na = 0.5\nb = 2\n\nwhile b - a > 1e-7:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\n\nprint(a)\n"]