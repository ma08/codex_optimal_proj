["\nfrom datetime import timedelta\n\ndef get_new_time(direction, minutes, hours, minutes_now):\n    new_time = timedelta(hours=hours, minutes=minutes_now)\n    if direction == \"F\":\n        new_time += timedelta(minutes=minutes)\n    else:\n        new_time -= timedelta(minutes=minutes)\n    return new_time\n\ndef main():\n    num_cases = int(input())\n    for _ in range(num_cases):\n        direction, minutes, hours, minutes_now = input().split()\n        minutes, hours, minutes_now = int(minutes), int(hours), int(minutes_now)\n        new_time = get_new_time(direction, minutes, hours, minutes_now)\n        print(new_time.hour, new_time.minute)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\nimport sys\n\n# Open input file and get number of test cases\nwith open(sys.argv[1]) as f:\n    num_cases = int(f.readline())\n\n    # Loop through each case\n    for i in range(num_cases):\n        # Get the case\n        case = f.readline().split()\n        # Get the direction of the time change\n        direction = case[0]\n        # Get the amount of time to change\n        time_change = int(case[1])\n        # Get the current hour\n        current_hour = int(case[2])\n        # Get the current minute\n        current_min = int(case[3])\n\n        # If we are going forward in time\n        if direction == 'F':\n            # Check if we will go over an hour\n            if current_min + time_change >= 60:\n                # Get the number of hours we will go over\n                hours_over = (current_min + time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min + time_change) % 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min + time_change\n                # Print the new time\n                print(new_hour, new_min)\n        # If we are going backwards in time\n        else:\n            # Check if we will go over an hour\n            if current_min - time_change < 0:\n                # Get the number of hours we will go over\n                hours_over = math.ceil((current_min - time_change) / 60)\n                # Get the new hour\n                new_hour = (current_hour - hours_over) % 24\n                # Get the new minute\n                new_min = (current_min - time_change) % 60 + 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min - time_change\n                # Print the new time\n                print(new_hour, new_min)\n", "\n\nimport sys\n\n# Open input file and get number of test cases\nwith open(sys.argv[1]) as f:\n    num_cases = int(f.readline())\n\n    # Loop through each case\n    for i in range(num_cases):\n        # Get the case\n        case = f.readline().split()\n        # Get the direction of the time change\n        direction = case[0]\n        # Get the amount of time to change\n        time_change = int(case[1])\n        # Get the current hour\n        current_hour = int(case[2])\n        # Get the current minute\n        current_min = int(case[3])\n\n        # If we are going forward in time\n        if direction == 'F':\n            # Check if we will go over an hour\n            if current_min + time_change >= 60:\n                # Get the number of hours we will go over\n                hours_over = (current_min + time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min + time_change) % 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min + time_change\n                # Print the new time\n                print(new_hour, new_min)\n        # If we are going backwards in time\n        else:\n            # Check if we will go over an hour\n            if current_min - time_change < 0:\n                # Get the number of hours we will go over\n                hours_over = (current_min - time_change) // -60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min - time_change) % 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min - time_change\n                # Print the new time\n                print(new_hour, new_min)\n", "\n\n#import sys\n\ndef main():\n    #lines = sys.stdin.read().splitlines() # read in the input from STDIN\n    lines = ['1', 'F 60 13 20']\n    N = int(lines[0])\n    for i in range(1, N+1):\n        line = lines[i].split()\n        if line[0] == 'F':\n            print(str(int(line[2]) + (int(line[1])//60))+' '+str(int(line[3]) + (int(line[1])%60))\n        else:\n            print(str(int(line[2]) - (int(line[1])//60))+' '+str(int(line[3]) - (int(line[1])%60))\n\nif __name__ == '__main__':\n    main()\n", "import sys\ndef main():\n    num_cases = int(sys.stdin.readline())\n    for i in range(num_cases):\n        line = sys.stdin.readline().strip()\n        if line == \"F\":\n            line = sys.stdin.readline().strip().split()\n            minutes = int(line[0])\n            hours = int(line[1])\n            min_of_day = int(line[2])\n            if min_of_day + minutes >= 60:\n                hours += 1 \n                min_of_day = (min_of_day + minutes) % 60 \n            else:\n                min_of_day += minutes\n            if hours == 24:\n                hours = 0\n            print(hours, min_of_day)\n        elif line == \"B\":\n            line = sys.stdin.readline().strip().split()\n            minutes = int(line[0])\n            hours = int(line[1])\n            min_of_day = int(line[2])\n            if min_of_day - minutes < 0:\n                hours -= 1\n                min_of_day = 60 + (min_of_day - minutes)\n            else:\n                min_of_day -= minutes\n            if hours == -1:\n                hours = 23\n            print(hours, min_of_day)\nmain()\n", "\nimport sys\n\n# Open input file and get number of test cases\nwith open(sys.argv[1]) as f:\n    num_cases = int(f.readline())\n\n    # Loop through each case\n    for i in range(num_cases):\n        # Get the case\n        case = f.readline().split()\n        # Get the direction of the time change\n        direction = case[0]\n        # Get the amount of time to change\n        time_change = int(case[1])\n        # Get the current hour\n        current_hour = int(case[2])\n        # Get the current minute\n        current_min = int(case[3])\n\n        # If we are going forward in time\n        if direction == 'F':\n            # Check if we will go over an hour\n            if current_min + time_change >= 60:\n                # Get the number of hours we will go over\n                hours_over = (current_min + time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min + time_change) % 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min + time_change\n                # Print the new time\n                print(new_hour, new_min)\n        # If we are going backwards in time\n        else:\n            # Check if we will go over an hour\n            if current_min - time_change < 0:\n                # Get the number of hours we will go over\n                hours_over = (current_min - time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min - time_change) % 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min - time_change\n                # Print the new time\n                print(new_hour, new_min)\n", "\n\n# NOTE: I didn't know how to do this without using python's datetime module, so I just used it.\n# It's not very efficient, but it gets the job done.\n\nimport datetime\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        case = input().split()\n        direction = case[0]\n        minutes = int(case[1])\n        hour = int(case[2])\n        minute = int(case[3])\n        if direction == 'B':\n            minutes *= -1\n        time = datetime.datetime(1, 1, 1, hour, minute) + datetime.timedelta(minutes=minutes)\n        print('{} {}'.format(time.hour, time.minute))\n\nmain()\n", "\nfrom datetime import timedelta\n\ndef get_new_time(direction, minutes, hours, minutes_now):\n    new_time = timedelta(hours=hours, minutes=minutes_now)\n    if direction == \"F\":\n        new_time += timedelta(minutes=minutes)\n    else:\n        new_time -= timedelta(minutes=minutes)\n    return new_time\n\ndef main():\n    num_cases = int(input())\n    for _ in range(num_cases):\n        direction, minutes, hours, minutes_now = input().split()\n        minutes, hours, minutes_now = int(minutes), int(hours), int(minutes_now)\n        new_time = get_new_time(direction, minutes, hours, minutes_now\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\na,b,c = map(int, input().split())\nif b**2 - 4*a*c < 0:\n    print(\"No real roots\")\nelif b**2 - 4*a*c == 0:\n    print(\"Two same roots x=\",int(-b/(2*a)))\nelse:\n    print(\"Two different roots x1=\",int((-b + math.sqrt(b**2 - 4*a*c))/(2*a)),\" , x2=\",int((-b - math.sqrt(b**2 - 4*a*c))/(2*a)))\n", "\nimport sys\n\n# Open input file and get number of test cases\nwith open(sys.argv[1]) as f:\n    num_cases = int(f.readline())\n\n    # Loop through each case\n    for i in range(num_cases):\n        # Get the case\n        case = f.readline().split() \n        # Get the direction of the time change\n        direction = case[0]\n        # Get the amount of time to change\n        time_change = int(case[1]) \n        # Get the current hour\n        current_hour = int(case[2]) \n        # Get the current minute\n        current_min = int(case[3]) \n        # If we are going forward in time\n        if direction == 'F':\n            # Check if we will go over an hour\n            if current_min + time_change >= 60: \n                # Get the number of hours we will go over\n                hours_over = (current_min + time_change) // 60 \n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24 \n                # Get the new minute\n                new_min = (current_min + time_change) % 60 \n                # Print the new time\n                print(new_hour, new_min) \n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour \n                # Get the new minute\n                new_min = current_min + time_change \n                # Print the new time\n                print(new_hour, new_min) \n        # If we are going backwards in time\n        else:\n            # Check if we will go over an hour\n            if current_min - time_change < 0:\n                # Get the number of hours we will go over\n                hours_over = (current_min - time_change) // 60 \n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24 \n                # Get the new minute\n                new_min = (current_min - time_change) % 60 \n                # Print the new time\n                print(new_hour, new_min) \n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour \n                # Get the new minute\n                new_min = current_min - time_change \n                # Print the new time\n                print(new_hour, new_min) \n", "#\n#\n\nimport sys\n\ndef main():\n    num_cases = int(sys.stdin.readline())\n    for i in range(num_cases):\n        line = sys.stdin.readline().split()\n        direction = line[0]\n        minutes = int(line[1])\n        hours = int(line[2])\n        min_of_day = int(line[3])\n        if direction == \"F\":\n            if min_of_day + minutes >= 60:\n                hours += 1\n                min_of_day = (min_of_day + minutes) % 60\n            else:\n                min_of_day += minutes\n            if hours == 24:\n                hours = 0\n            print(hours, min_of_day)\n        else:\n            if min_of_day - minutes < 0:\n                hours -= 1\n                min_of_day = 60 + (min_of_day - minutes)\n            else:\n                min_of_day -= minutes\n            if hours == -1:\n                hours = 23\n            print(hours, min_of_day)\nmain()\n", "\n\n# Define the function\ndef dst_calculator(direction, minutes, hour, minute):\n\n    # Add the minutes to the current time\n    if direction == \"F\":\n        minute += minutes\n    elif direction == \"B\":\n        minute -= minutes\n\n    # If the minutes are greater than 60, then add an hour and subtract 60 minutes\n    if minute > 59:\n        hour += 1\n        minute -= 60\n    # If the minutes are less than 0, then subtract an hour and add 60 minutes\n    elif minute < 1:\n        hour -= 1\n        minute += 60\n\n    # If the hour is greater than 24, then subtract 24 hours\n    if hour > 24:\n        hour -= 24\n    # If the hour is less than 0, then add 24 hours\n    elif hour < 0:\n        hour += 24\n\n    # Print the hour and minute\n    print(hour, minute)\n\n# Get the number of tests\ntests = int(input())\n\n# Loop through the tests\nfor i in range(tests):\n    # Get the inputs\n    direction, minutes, hour, minute = input().split()\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    # Run the function\n    dst_calculator(direction, minutes, hour, minute)\n", "\nfrom datetime import timedelta\n\ndef get_new_time(direction, minutes, hours, minutes_now):\n    new_time = timedelta(hours=hours, minutes=minutes_now, seconds=0)\n    if direction == \"F\":\n        new_time += timedelta(minutes=minutes)\n    else:\n        new_time -= timedelta(minutes=minutes)\n    return new_time\n\ndef main():\n    num_cases = int(input())\n    for _ in range(num_cases):\n        direction, minutes, hours, minutes_now = input().split()\n        minutes, hours, minutes_now = int(minutes), int(hours), int(minutes_now)\n        new_time = get_new_time(direction, minutes, hours, minutes_now)\n        print(new_time.hour, new_time.minute)\n\nif __name__ == \"__main__\":\n    main()\n", "\n#I know this could be done with a lot less code, but it's a very simple problem\n#and I want to get used to using classes\n\nclass Time:\n    def __init__(self, hour, minute):\n        self.hour = hour\n        self.minute = minute\n\n    def __repr__(self):\n        return str(self.hour)+\" \"+str(self.minute)\n\ntest_cases = int(input())\nfor i in range(test_cases):\n    roll, minutes, hour, minute = input().split() #pylint: disable=C0103\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    if roll == \"F\":\n        if minute + minutes >= 60:\n            hour += 1\n            minute = minute + minutes - 60\n        else:\n            minute += minutes\n    if roll == \"B\":\n        if minute - minutes < 0:\n            hour -= 1\n            minute = minute - minutes + 60\n        else:\n            minute -= minutes\n    if hour == 24:\n        hour = 0\n    if hour < 0:\n        hour = 23\n    print(Time(hour, minute))\n", "import sys\n\ndef main():\n    num_cases = int(sys.stdin.readline())\n    for i in range(num_cases):\n        line = sys.stdin.readline().split()\n        direction = line[0]\n        minutes = int(line[1])\n        hours = int(line[2])\n        min_of_day = int(line[3])\n        if direction == \"F\":\n            if min_of_day + minutes >= 60:\n                hours += 1\n                min_of_day = (min_of_day + minutes) % 60\n            else:\n                min_of_day += minutes\n            if hours == 24:\n                hours = 0\n            print(hours, min_of_day, sep=' ')\n        else:\n            if min_of_day - minutes < 0:\n                hours -= 1\n                min_of_day = 60 + (min_of_day - minutes)\n            else:\n                min_of_day -= minutes\n            if hours == -1:\n                hours = 23\n            print(hours, min_of_day, sep=' ')\nmain()\n", "\n\nfrom datetime import timedelta\n\ndef get_new_time(direction, minutes, hours, minutes_now):\n    new_time = timedelta(hours=hours, minutes=minutes_now, seconds=0)\n    if direction == \"F\":\n        new_time += timedelta(minutes=minutes)\n    else:\n        new_time -= timedelta(minutes=minutes)\n    return new_time\n\ndef main():\n    num_cases = int(input())\n    for _ in range(num_cases):\n        direction, minutes, hours, minutes_now = input().split()\n        minutes, hours, minutes_now = int(minutes), int(hours), int(minutes_now)\n        new_time = get_new_time(direction, minutes, hours, minutes_now)\n        print(new_time.hour, new_time.minute)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Define the function\ndef dst_calculator(direction, minutes, hour, minute):\n\n    # Add the minutes to the current time\n    if direction == \"F\":\n        minute += minutes\n    elif direction == \"B\":\n        minute -= minutes\n\n    # If the minutes are greater than 60, then add an hour and subtract 60 minutes\n    elif minute > 60:\n        hour += 1\n        minute -= 60\n    # If the minutes are less than 0, then subtract an hour and add 60 minutes\n    elif minute < 0:\n        hour -= 1\n        minute += 60\n\n    # If the hour is greater than 24, then subtract 24 hours\n    if hour > 24:\n        hour -= 24\n    # If the hour is less than 0, then add 24 hours\n    elif hour < 0:\n        hour += 24\n\n    # Print the hour and minute\n    print(hour, minute)\n\n# Get the number of tests\ntests = int(input())\n\n# Loop through the tests\nfor i in range(tests):\n    # Get the inputs\n    direction, minutes, hour, minute = input().split()\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    # Run the function\n    dst_calculator(direction, minutes, hour, minute)\n", "\n", "\n\nimport datetime\n\ndef main():\n\tnum_cases = int(input())\n\tfor i in range(num_cases):\n\t\tcase = input().split()\n\t\tdirection = case[0]\n\t\tminutes = int(case[1])\n\t\thour = int(case[2])\n\t\tminute = int(case[3])\n\t\tif direction == 'B':\n\t\t\tminutes *= -1\n\t\ttime = datetime.datetime(1, 1, 1, hour, minute) + datetime.timedelta(minutes=minutes)\n\t\tprint('{} {}'.format(time.hour, time.minute))\n\nmain()\n", "\n\n# Get the number of test cases\nnum_cases = int(input())\n\n# Iterate through each test case\nfor case in range(num_cases):\n\t# Get the input for each test case\n\tdirection, change, hour, minute = input().split()\n\tchange = int(change)\n\thour = int(hour)\n\tminute = int(minute)\n\n\t# Add or subtract the number of minutes to change by\n\tif direction == 'F':\n\t\tminute += change\n\telse:\n\t\tminute -= change\n\n\t# If the minutes are negative, we need to add 60 to the minute and subtract 1 from the hour\n\t# If the minutes are greater than 60, we need to subtract 60 from the minute and add 1 to the hour\n\tif minute < 0:\n\t\tminute += 60\n\t\thour -= 1\n\telif minute > 60:\n\t\tminute -= 60\n\t\thour += 1\n\n\t# If the hour is negative, we need to add 24 to the hour\n\t# If the hour is greater than 24, we need to subtract 24 from the hour\n\tif hour < 0:\n\t\thour += 24\n\telif hour > 24:\n\t\thour -= 24\n\n\t# Print the resulting hour and minute\n\tprint(str(hour) + \" \" + str(minute))\n", "\n\n# Define the function\ndef dst_calculator(direction, minutes, hour, minute):\n\n    # Add the minutes to the current time\n    if direction == \"F\":\n        minute += minutes\n    elif direction == \"B\":\n        minute -= minutes\n\n    # If the minutes are greater than 60, then add an hour and subtract 60 minutes\n    if minute > 60:\n        hour += 1\n        minute -= 60\n    # If the minutes are less than 0, then subtract an hour and add 60 minutes\n    elif minute < 0:\n        hour -= 1\n        minute += 60\n\n    # If the hour is greater than 24, then subtract 24 hours\n    if hour > 24:\n        hour -= 24\n    # If the hour is less than 0, then add 24 hours\n    elif hour < 0:\n        hour += 24\n\n    # Print the hour and minute\n    print(hour, minute, sep=\" \")\n\n# Get the number of tests\ntests = int(input())\n\n# Loop through the tests\nfor i in range(tests):\n    # Get the inputs\n    direction, minutes, hour, minute = input().split(\" \")\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    # Run the function\n    dst_calculator(direction, minutes, hour, minute)\n", "\n\n# Define the function\ndef dst_calculator(direction, minutes, hour, minute):\n    # Add the minutes to the current time if the direction is forward\n    if direction == \"F\":\n        minute += minutes\n    elif direction == \"B\":\n    # Subtract the minutes if the direction is backward\n        minute -= minutes\n\n    # If the minutes are greater than 60, then add an hour and subtract 60 minutes.\n    if minute > 60:\n        hour += 1\n        minute -= 60\n    # If the minutes are less than 0, then subtract an hour and add 60 minutes.\n    elif minute < 0:\n        hour -= 1\n        minute += 60\n\n    # If the hour is greater than 24, then subtract 24 hours.\n    if hour > 24:\n        hour -= 24\n    # If the hour is less than 0, then add 24 hours.\n    elif hour < 0:\n        hour += 24\n\n    # Print the hour and minute.\n    print(hour, minute)\n\n# Get the number of tests.\ntests = int(input())\n\n# Loop through the tests.\nfor i in range(tests):\n    # Get the inputs.\n    direction, minutes, hour, minute = input().split()\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    # Run the function.\n    dst_calculator(direction, minutes, hour, minute)\n", "\n\nfrom datetime import timedelta\n\ndef get_new_time(direction, minutes, hours, minutes_now):\n    new_time = timedelta(hours=hours, minutes=minutes_now)    \n    if direction == \"F\":\n        new_time += timedelta(minutes=minutes)\n    else:\n        new_time -= timedelta(minutes=minutes)\n    return new_time\n\n\ndef main():\n    num_cases = int(input())\n    for _ in range(num_cases):\n        direction, minutes, hours, minutes_now = input().split()\n        minutes, hours, minutes_now = int(\n            minutes), int(hours), int(minutes_now)\n        new_time = get_new_time(direction, minutes, hours, minutes_now)\n        print(new_time.hour, new_time.minute)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Define the function\ndef dst_calculator(direction, minutes, hour, minute):\n\n    # Add the minutes to the current time\n    if direction == \"F\":\n        minute += minutes\n    elif direction == \"B\":\n        minute -= minutes\n\n    # If the minutes are greater than 60, then add an hour and subtract 60 minutes\n    if minute > 59:\n        hour += 1\n        minute -= 60\n    # If the minutes are less than 0, then subtract an hour and add 60 minutes\n    elif minute < 1:\n        hour -= 1\n        minute += 60\n\n    # If the hour is greater than 24, then subtract 24 hours\n    if hour > 23:\n        hour -= 24\n    # If the hour is less than 0, then add 24 hours\n    elif hour < 1:\n        hour += 24\n\n    # Print the hour and minute\n    if hour < 10:\n        if minute < 10:\n            print(\"0\" + str(hour) + \":\" + \"0\" + str(minute))\n        else:\n            print(\"0\" + str(hour) + \":\" + str(minute))\n    else:\n        if minute < 10:\n            print(str(hour) + \":\" + \"0\" + str(minute))\n        else:\n            print(str(hour) + \":\" + str(minute))\n\n# Get the number of tests\ntests = int(input())\n\n# Loop through the tests\nfor i in range(tests):\n    # Get the inputs\n    direction, minutes, hour, minute = input().split(\":\")\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute[:2])\n    # Run the function\n    dst_calculator(direction, minutes, hour, minute)\n", "\n#I know this could be done with a lot less code, but it's a very simple problem and I want to get used to using classes\n\nclass Time:\n    def __init__(self, hours, minutes):\n        self.hours = hours\n        self.minutes = minutes\n\n    def __repr__(self):\n        return str(self.hours)+\" \"+str(self.minutes)\n\ntest_cases = int(input())\nfor i in range(test_cases):\n    roll, minutes, hours, minutes = input().split()\n    minutes = int(minutes)\n    hours = int(hours)\n    minutes = int(minutes)\n    if roll == \"F\":\n        if minutes + minutes >= 60:\n            hours += 1\n            minutes = minutes + minutes - 60\n        else:\n            minutes += minutes\n    if roll == \"B\":\n        if minutes - minutes < 0:\n            hours -= 1\n            minutes = minutes - minutes + 60\n        else:\n            minutes -= minutes\n    if hours == 24:\n        hours = 0\n    if hours < 0:\n        hours = 23\n    print(Time(hours, minutes))\n", "#I know this could be done with a lot less code, but it's a very simple problem and I want to get used to using classes\n\nclass Time:\n    def __init__(self, hour, minute):\n        self.hour = hour\n        self.minute = minute\n\n\n    def __repr__(self):\n        return str(self.hour)+\" \"+str(self.minute)\n\ntest_cases = int(input())\nfor i in range(test_cases):\n    roll, minutes, hour, minute = input().split()\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    if roll == \"F\":\n        if minute + minutes >= 60:\n            hour += 1\n            minute = minute + minutes - 60\n        else:\n            minute += minutes\n    if roll == \"B\":\n        if minute - minutes < 0:\n            hour -= 1\n            minute = minute - minutes + 60\n        else:\n            minute -= minutes\n    if hour == 24:\n        hour = 0\n    if hour < 0:\n        hour = 23\n    print(Time(hour, minute))\n", "\n\n#import sys\n\ndef main():\n    lines = sys.stdin.read().splitlines() # read in the input from STDIN\n    #lines = ['1', 'F 60 13 20']\n    N = int(lines[0])\n    for i in range(1, N+1):\n        line = lines[i].split()\n        if line[0] == 'F':\n            print(str(int(line[2]) + (int(line[1])//60))+' '+str(int(line[3]) + (int(line[1])%60)))\n        else:\n            print(str(int(line[2]) - (int(line[1])//60))+' '+str(int(line[3]) - (int(line[1])%60)))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    num_cases = int(sys.stdin.readline())\n    for i in range(num_cases):\n        line = sys.stdin.readline().split()\n        direction = line[0]\n        minutes = int(line[1])\n        hours = int(line[2])\n        min_of_day = int(line[3])\n        if direction == \"F\":\n            if min_of_day + minutes >= 60:\n                hours += 1\n                min_of_day = (min_of_day + minutes) % 60\n            else:\n                min_of_day += minutes\n            if hours == 24:\n                hours = 0\n            print(hours, min_of_day)\n        else:\n            if min_of_day - minutes < 0:\n                hours -= 1\n                min_of_day = 60 + (min_of_day - minutes)\n            else:\n                min_of_day -= minutes\n            if hours == -1:\n                hours = 23\n            print(hours, min_of_day)\nmain()\n", "\n\n# Get the number of test cases\nnum_cases = int(input())\n\n# Iterate through each test case\nfor case in range(num_cases):\n\t# Get the input for each test case\n\tdirection, change, hour, minute = input().split() # Get the input for each test case\n\tchange = int(change) # Convert the change to an integer\n\thour = int(hour) # Convert the hour to an integer\n\tminute = int(minute) # Convert the minute to an integer\n\n\t# Add or subtract the number of minutes to change by\n\tif direction == 'F':\n\t\tminute += change # Add the change to the minute\n\telse:\n\t\tminute -= change # Subtract the change from the minute\n\n\t# If the minutes are negative, we need to add 60 to the minute and subtract 1 from the hour\n\t# If the minutes are greater than 60, we need to subtract 60 from the minute and add 1 to the hour\n\tif minute < 0:\n\t\tminute += 60 # Add 60 to the minute\n\t\thour -= 1 # Subtract 1 from the hour\n\telif minute > 60:\n\t\tminute -= 60 # Subtract 60 from the minute\n\t\thour += 1 # Add 1 to the hour\n\n\t# If the hour is negative, we need to add 24 to the hour\n\t# If the hour is greater than 24, we need to subtract 24 from the hour\n\tif hour < 0:\n\t\thour += 24 # Add 24 to the hour\n\telif hour > 24:\n\t\thour -= 24 # Subtract 24 from the hour\n\n\t# Print the resulting hour and minute\n\tprint(hour, minute)\n", "\n# Get the number of test cases\nnum_cases = int(input())\n\n# Iterate through each test case\nfor case in range(num_cases):\n\t# Get the input for each test case\n\tdirection, change, hour, minute = input().split(\" \")\n\tchange = int(change)\n\thour = int(hour)\n\tminute = int(minute)\n\n\t# Add or subtract the number of minutes to change by\n\tif direction == 'F':\n\t\tminute += change\n\telse:\n\t\tminute -= change\n\n\t# If the minutes are negative, we need to add 60 to the minute and subtract 1 from the hour\n\t# If the minutes are greater than 60, we need to subtract 60 from the minute and add 1 to the hour\n\tif minute < 0:\n\t\tminute += 60\n\t\thour -= 1\n\telif minute > 60:\n\t\tminute -= 60\n\t\thour += 1\n\n\t# If the hour is negative, we need to add 24 to the hour\n\t# If the hour is greater than 24, we need to subtract 24 from the hour\n\tif hour < 0:\n\t\thour += 24\n\telif hour > 24:\n\t\thour -= 24\n\n\t# Print the resulting hour and minute\n\tprint(hour + \" \" + minute, end = \"\")\n", "\n# Get the number of test cases\nnum_cases = int(input())\n\n# Iterate through each test case\nfor case in range(num_cases):\n    # Get the input for each test case\n    direction, change, hour, minute = input().split()\n    change = int(change)\n    hour = int(hour)\n    minute = int(minute)\n\n    # Add or subtract the number of minutes to change by\n    if direction == 'F':\n        minute += change\n    else:\n        minute -= change\n\n    # If the minutes are negative, we need to add 60 to the minute and subtract 1 from the hour\n    # If the minutes are greater than 60, we need to subtract 60 from the minute and add 1 to the hour\n    if minute < 0:\n        minute += 60\n        hour -= 1\n    elif minute > 60:\n        minute -= 60\n        hour += 1\n\n    # If the hour is negative, we need to add 24 to the hour\n    # If the hour is greater than 24, we need to subtract 24 from the hour\n    if hour < 0:\n        hour += 24\n    elif hour > 24:\n        hour -= 24\n\n    # Print the resulting hour and minute\n    print(hour, minute)\n", "\nimport sys\n\ndef main():\n    num_cases = int(sys.stdin.readline())\n    for i in range(num_cases):\n        line = sys.stdin.readline().split()\n        direction = line[0]\n        minutes = int(line[1])\n        hours = int(line[2])\n        min_of_day = int(line[3])\n        if direction == \"F\":\n            if min_of_day + minutes >= 60:\n                hours += 1\n                min_of_day = (min_of_day + minutes) % 60\n            else:\n                min_of_day += minutes\n            if hours == 24:\n                hours = 0\n            print(hours, min_of_day)\n        else:\n            if min_of_day - minutes < 0:\n                hours -= 1\n                min_of_day = 60 + (min_of_day - minutes)\n            else:\n                min_of_day -= minutes\n            if hours == -1:\n                hours = 23\n            print(hours, min_of_day)\nmain()\n", "\na = input()\nprint(a)\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.read().splitlines() # read in the input from STDIN\n    #lines = ['1', 'F 60 13 20']\n    N = int(lines[0])\n    for i in range(1, N+1):\n        line = lines[i].split()\n        if line[0] == 'F':\n            print(str(int(line[2]) + (int(line[1])//60))+' '+str(int(line[3]) + (int(line[1])%60)))\n        else:\n            print(str(int(line[2]) - (int(line[1])//60))+' '+str(int(line[3]) - (int(line[1])%60)))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Get the number of test cases\nnum_cases = int(input())\n\n# Iterate through each test case\nfor case in range(num_cases):\n\t# Get the input for each test case\n\tdirection, change, hour, minute = input().split()\n\tchange = int(change)\n\thour = int(hour)\n\tminute = int(minute)\n\n\t# Add or subtract the number of minutes to change by\n\tif direction == 'F':\n\t\tminute += change\n\telse:\n\t\tminute -= change\n\n\t# If the minutes are negative, we need to add 60 to the minute and subtract 1 from the hour\n\t# If the minutes are greater than 60, we need to subtract 60 from the minute and add 1 to the hour\n\tif minute < 0:\n\t\tminute += 60\n\t\thour -= 1\n\telif minute > 59:\n\t\tminute -= 60\n\t\thour += 1\n\n\t# If the hour is negative, we need to add 24 to the hour\n\t# If the hour is greater than 24, we need to subtract 24 from the hour\n\tif hour < 0:\n\t\thour += 24\n\telif hour > 23:\n\t\thour -= 24\n\n\t# Print the resulting hour and minute\n\tprint(hour, minute)\n", "\n\nimport sys\n\n# Open input file and get number of test cases\nwith open(sys.argv[1]) as f:\n    num_cases = int(f.readline())\n\n    # Loop through each case\n    for i in range(num_cases):\n        # Get the case\n        case = f.readline().split()\n        # Get the direction of the time change\n        direction = case[0]\n        # Get the amount of time to change\n        time_change = int(case[1])\n        # Get the current hour\n        current_hour = int(case[2])\n        # Get the current minute\n        current_min = int(case[3]) \n\n        # If we are going forward in time\n        if direction == 'F':\n            # Check if we will go over an hour\n            if current_min + time_change >= 60:\n                # Get the number of hours we will go over\n                hours_over = (current_min + time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min + time_change) % 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min + time_change\n                # Print the new time\n                print(new_hour, new_min)\n        # If we are going backwards in time\n        else:\n            # Check if we will go over an hour\n            if current_min - time_change < 0:\n                # Get the number of hours we will go over\n                hours_over = (current_min - time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min - time_change) % 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min - time_change\n                # Print the new time\n                print(new_hour, new_min)\n", "\n\n# Get the number of test cases\nnum_cases = int(input())\n\n# Iterate through each test case\nfor case in range(num_cases):\n\t# Get the input for each test case\n\tdirection, change, hour, minute = input().split()\n\tchange = int(change)\n\thour = int(hour)\n\tminute = int(minute)\n\n\t# Add or subtract the number of minutes to change by\n\tif direction == 'F':\n\t\tminute += change\n\telse:\n\t\tminute -= change\n\n\t# If the minutes are negative, we need to add 60 to the minute and subtract 1 from the hour\n\t# If the minutes are greater than 60, we need to subtract 60 from the minute and add 1 to the hour\n\tif minute < 0:\n\t\tminute += 60\n\t\thour -= 1\n\telif minute > 60:\n\t\tminute -= 60\n\t\thour += 1\n\n\t# If the hour is negative, we need to add 24 to the hour\n\t# If the hour is greater than 24, we need to subtract 24 from the hour\n\tif hour < 0:\n\t\thour += 24\n\telif hour > 24:\n\t\thour -= 24\n\n\t# Print the resulting hour and minute\n\tprint(hour, minute, sep=' ')\n", "\n\nimport sys\n\ndef main():\n    num_cases = int(sys.stdin.readline().strip())\n    for i in range(num_cases):\n        line = sys.stdin.readline().strip().split()\n        direction = line[0]\n        minutes = int(line[1])\n        hours = int(line[2])\n        min_of_day = int(line[3].split(\":\")[0])\n        if direction == \"F\":\n            if min_of_day + minutes >= 60:\n                hours += 1\n                min_of_day = (min_of_day + minutes) % 60\n            else:\n                min_of_day += minutes\n            if hours == 24:\n                hours = 0\n            print(hours, \":\", min_of_day)\n        else:\n            if min_of_day - minutes < 0:\n                hours -= 1\n                min_of_day = 60 + (min_of_day - minutes)\n            else:\n                min_of_day -= minutes\n            if hours == -1:\n                hours = 23\n            print(hours, \":\", min_of_day)\nmain()\n", "\n# I know this could be done with a lot less code, but it's a very simple problem and I want to get used to using classes\n\nclass Time:\n    def __init__(self, hour, minute):\n        self.hour = hour\n        self.minute = minute\n\n    def __repr__(self):\n        return str(self.hour)+\" \"+str(self.minute)\n\ntest_cases = int(input())\nfor i in range(test_cases):\n    roll, minutes, hour, minute = input().split()\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    if roll == \"F\":\n        if minute + minutes >= 60:\n            hour += 1\n            minute = minute + minutes - 60\n        else:\n            minute += minutes\n    if roll == \"B\":\n        if minute - minutes < 0:\n            hour -= 1\n            minute = minute - minutes + 60\n        else:\n            minute -= minutes\n    if hour == 24:\n        hour = 0\n    if hour < 0:\n        hour = 23\n    print(Time(hour, minute))\n", "\n# Define the function\ndef dst_calculator(direction, minutes, hour, minute):\n\n    # Add the minutes to the current time\n    if direction == \"F\":\n        minute += minutes\n    elif direction == \"B\":\n        minute -= minutes\n\n    # If the minutes are greater than 60, then add an hour and subtract 60 minutes\n    if minute > 60:\n        hour += 1\n        minute -= 60\n    # If the minutes are less than 0, then subtract an hour and add 60 minutes\n    elif minute < 0:\n        hour -= 1\n        minute += 60\n\n    # If the hour is greater than 24, then subtract 24 hours\n    if hour > 24:\n        hour -= 24\n    # If the hour is less than 0, then add 24 hours\n    elif hour < 0:\n        hour += 24\n\n    # Print the hour and minute\n    print(hour, minute)\n\n# Get the number of tests\ntests = int(input())\n\n# Loop through the tests\nfor i in range(tests):\n    # Get the inputs\n    direction, minutes, hour, minute = input().split()\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    # Run the function\n    dst_calculator(direction, minutes, hour, minute)\n", "\n\n# Define the function\ndef dst_calculator(direction, minutes, hour, minute):\n\n    # Add the minutes to the current time\n    if direction == 'F':\n        minute += minutes\n    elif direction == 'B':\n        minute -= minutes\n\n    # If the minutes are greater than 60, then add an hour and subtract 60 minutes\n    if minute > 60:\n        hour += 1\n        minute -= 60\n    # If the minutes are less than 0, then subtract an hour and add 60 minutes\n    elif minute < 0:\n        hour -= 1\n        minute += 60\n\n    # If the hour is greater than 24, then subtract 24 hours\n    if hour > 24:\n        hour -= 24\n    # If the hour is less than 0, then add 24 hours\n    elif hour < 0:\n        hour += 24\n\n    # Print the hour and minute\n    print(hour, minute)\n\n# Get the number of tests\ntests = int(input())\n\n# Loop through the tests\nfor i in range(tests):\n    # Get the inputs\n    direction, minutes, hour, minute = input().split()\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    # Run the function\n    dst_calculator(direction, minutes, hour, minute)\n", "\nimport sys\n\n# Open input file and get number of test cases\nwith open(sys.argv[1]) as f:\n    num_cases = int(f.readline())\n\n    # Loop through each case\n    for i in range(num_cases):\n        # Get the case\n        case = f.readline().split(' ')\n        # Get the direction of the time change\n        direction = case[0]\n        # Get the amount of time to change\n        time_change = int(case[1].strip())\n        # Get the current hour\n        current_hour = int(case[2].strip())\n        # Get the current minute\n        current_min = int(case[3].strip())\n        print(current_hour, current_min)\n        # If we are going forward in time\n        if direction == 'F':\n            # Check if we will go over an hour\n            if current_min + time_change > 60:\n                # Get the number of hours we will go over\n                hours_over = (current_min + time_change) // 60 - 1\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24 + 1\n                # Get the new minute\n                new_min = (current_min + time_change) % 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min + time_change\n                # Print the new time\n                print(new_hour, new_min)\n        # If we are going backwards in time\n        else:\n            # Check if we will go over an hour\n            if current_min - time_change < 0:\n                # Get the number of hours we will go over\n                hours_over = (current_min - time_change) // 60 - 1\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24 + 1\n                # Get the new minute\n                new_min = (current_min - time_change) % 60\n                # Print the new time\n                print(new_hour, new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min - time_change\n                # Print the new time\n                print(new_hour, new_min)\n", "\n\n# NOTE: I didn't know how to do this without using python's datetime module, so I just used it.\n#       It's not very efficient, but it gets the job done.\n\nimport datetime\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        case = input().split()\n        direction = case[0]\n        minutes = int(case[1])\n        hour = int(case[2])\n        minute = int(case[3])\n        if direction == 'B':\n            minutes *= -1\n        time = datetime.datetime(1, 1, 1, hour, minute) + datetime.timedelta(minutes=minutes)\n        print('{} {}'.format(time.hour, time.minute))\n\nmain()\n", "\n\n\nfrom datetime import timedelta\n\ndef get_new_time(direction, minutes, hours, minutes_now):\n    new_time = timedelta(hours=hours, minutes=minutes_now)\n    if direction == \"F\":\n        new_time += timedelta(minutes=minutes)\n    else:\n        new_time -= timedelta(minutes=minutes)\n    return new_time\n\n\ndef main():\n    num_cases = int(input())\n    for _ in range(num_cases):\n        direction, minutes, hours, minutes_now = input().split()\n        minutes, hours, minutes_now = int(minutes), int(hours), \\\n                                      int(minutes_now)\n        new_time = get_new_time(direction, minutes, hours, minutes_now)\n        print(new_time.hour, new_time.minute)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\n# Open input file and get number of test cases\nwith open(sys.argv[1]) as f:\n    num_cases = int(f.readline())\n\n    # Loop through each case\n    for i in range(num_cases):\n        # Get the case\n        case = f.readline().split(' ')\n        # Get the direction of the time change\n        direction = case[0]\n        # Get the amount of time to change\n        time_change = int(case[1])\n        # Get the current hour\n        current_hour = int(case[2])\n        # Get the current minute\n        current_min = int(case[3])\n\n        # If we are going forward in time\n        if direction == 'F':\n            # Check if we will go over an hour\n            if current_min + time_change >= 60:\n                # Get the number of hours we will go over\n                hours_over = (current_min + time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min + time_change) % 60\n                # Print the new time\n                print(new_hour, ' ', new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min + time_change\n                # Print the new time\n                print(new_hour, ' ', new_min)\n        # If we are going backwards in time\n        else:\n            # Check if we will go over an hour\n            if current_min - time_change < 0:\n                # Get the number of hours we will go over\n                hours_over = (current_min - time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min - time_change) % 60\n                # Print the new time\n                print(new_hour, ' ', new_min)\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min - time_change\n                # Print the new time\n                print(new_hour, ' ', new_min)\n", "\n# NOTE: I didn't know how to do this without using python's datetime module, so I just used it.\n# It's not very efficient, but it gets the job done.\n\nimport datetime\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        case = input().split()\n        direction = case[0]\n        minutes = int(case[1])\n        hour = int(case[2])\n        minute = int(case[3])\n        if direction == 'B':\n            minutes *= -1\n        time = datetime.datetime(1, 1, 1, hour, minute) + datetime.timedelta(minutes=minutes)\n        print('{} {}'.format(time.hour, time.minute))\n\nmain()\n", "\n# I know this could be done with a lot less code, but it's a very simple problem and I want to get used to using classes\n\nclass Time:\n    def __init__(self, hour, minute):\n        self.hour = hour\n        self.minute = minute\n\n    def __repr__(self):\n        return str(self.hour) + \" \" + str(self.minute)\n\n\ntest_cases = int(input())\nfor i in range(test_cases):\n    roll, minutes, hour, minute = input().split()\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    if roll == \"F\":\n        if minute + minutes >= 60:\n            hour += 1\n            minute = minute + minutes - 60\n        else:\n            minute += minutes\n    elif roll == \"B\":\n        if minute - minutes < 0:\n            hour -= 1\n            minute = minute - minutes + 60\n        else:\n            minute -= minutes\n    elif hour == 24:\n        hour = 0\n    elif hour < 0:\n        hour = 23\n    print(Time(hour, minute))\n", "\nimport sys\n\n# Open input file and get number of test cases\nwith open(sys.argv[1]) as f:\n    num_cases = int(f.readline())\n    # Loop through each case\n    for i in range(num_cases):\n        # Get the case\n        case = f.readline().split()\n        # Get the direction of the time change\n        direction = case[0]\n        # Get the amount of time to change\n        time_change = int(case[1])\n        # Get the current hour\n        current_hour = int(case[2])\n        # Get the current minute\n        current_min = int(case[3])\n        # If we are going forward in time\n        if direction == 'F':\n            # Check if we will go over an hour\n            if current_min + time_change >= 60:\n                # Get the number of hours we will go over\n                hours_over = (current_min + time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min + time_change) % 60\n                # Print the new time\n                print(new_hour, new_min, sep=' ')\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min + time_change\n                # Print the new time\n                print(new_hour, new_min, sep=' ')\n        # If we are going backwards in time\n        else:\n            # Check if we will go over an hour\n            if current_min - time_change < 0:\n                # Get the number of hours we will go over\n                hours_over = (current_min - time_change) // 60\n                # Get the new hour\n                new_hour = (current_hour + hours_over) % 24\n                # Get the new minute\n                new_min = (current_min - time_change) % 60\n                # Print the new time\n                print(new_hour, new_min, sep=' ')\n            # If we are not going over an hour\n            else:\n                # Get the new hour\n                new_hour = current_hour\n                # Get the new minute\n                new_min = current_min - time_change\n                # Print the new time\n                print(new_hour, new_min, sep=' ')\n", "\n#I know this could be done with a lot less code, but it's a very simple problem\n#and I want to get used to using classes\n\nclass Time:\n    def __init__(self, hour, minute):\n        self.hour = hour\n        self.minute = minute\n\n    def __repr__(self):\n        return str(self.hour)+\" \"+str(self.minute)\n\ntest_cases = int(input())\nfor i in range(test_cases):\n    roll, minutes, hour, minute = input().split() #take in the input\n    minutes = int(minutes)\n    hour = int(hour)\n    minute = int(minute)\n    if roll == \"F\": #if rolling forward\n        if minute + minutes >= 60:\n            hour += 1\n            minute = minute + minutes - 60\n        else:\n            minute += minutes\n    if roll == \"B\": #if rolling backward\n        if minute - minutes < 0:\n            hour -= 1\n            minute = minute - minutes + 60\n        else:\n            minute -= minutes\n    if hour == 24: #if the hour is 24\n        hour = 0\n    if hour < 0: #if the hour is negative\n        hour = 23\n    print(Time(hour, minute)) #print the time\n"]