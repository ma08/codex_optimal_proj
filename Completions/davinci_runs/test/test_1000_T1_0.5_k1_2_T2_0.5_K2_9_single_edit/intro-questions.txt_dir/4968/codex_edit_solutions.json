["\nN, S, R = map(int, input().split())\nD = set(map(int, input().split()))\nB = set(map(int, input().split()))\n\nc = 0\n\nfor i in range(1, N+1):\n    if i in D:\n        if i-1 in B:\n            B.remove(i-1)\n        elif i+1 in B:\n            B.remove(i+1)\n        else:\n            c += 1\nprint(c)\n", "\n\nimport sys\n\ndef main():\n    # n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    # damaged = [int(x) for x in sys.stdin.readline().split()]\n    # reserve = [int(x) for x in sys.stdin.readline().split()]\n    # damaged = set(damaged)\n    # reserve = set(reserve)\n    # if len(damaged) != s or len(reserve) != r:\n    #     return 'ERROR'\n    # if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n    #     return 'ERROR'\n    # for x in damaged:\n    #     if x < 1 or x > n:\n    #         return 'ERROR'\n    # for x in reserve:\n    #     if x < 1 or x > n:\n    #         return 'ERROR'\n    # for x in damaged:\n    #     if x - 1 in reserve and x + 1 in reserve:\n    #         reserve.remove(x - 1)\n    #         reserve.remove(x + 1)\n    #         damaged.remove(x)\n    #     elif x - 1 in reserve:\n    #         reserve.remove(x - 1)\n    #         damaged.remove(x)\n    #     elif x + 1 in reserve:\n    #         reserve.remove(x + 1)\n    #         damaged.remove(x)\n    # return len(damaged)\n    pass\n\nif __name__ == '__main__':\n    print(main())\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n        return 'ERROR 1'\n    if len(damaged) != s:\n        return 'ERROR 2'\n    if len(reserve) != r:\n        return 'ERROR 3'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR 4'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR 5'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\nimport sys\n\ndef main():\n    n, s, r = [int(i) for i in input().split()]\n    broken = [int(i) for i in input().split()]\n    reserve = [int(i) for i in input().split()]\n    total = 0\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n - 1 in reserve:\n                reserve.remove(n - 1)\n            else:\n                total += 1\n        else:\n            if i - 1 in reserve:\n                reserve.remove(i - 1)\n            elif i + 1 in reserve:\n                reserve.remove(i + 1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(i) for i in sys.stdin.readline().split()]\n    broken = [int(i) for i in sys.stdin.readline().split()]\n    reserve = [int(i) for i in sys.stdin.readline().split()]\n    total = 0\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                break\n                total += 1\n        elif i == n:\n            if n-1 in reserve:\n                reserve.remove(n-1)\n            else:\n                total += 1\n                break\n        else:\n            if i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                total += 1\n                break\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserve = map(int, input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the reserve kayak\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\n\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(reserve, damaged):\n    for i in damaged:\n        if i-1 in reserve or i+1 in reserve:\n            reserve.remove(i-1) if i-1 in reserve else reserve.remove(i+1)\n            damaged.remove(i) if i in damaged else damaged.remove(i)\n    return len(damaged)\n\nprint check(reserve, damaged)\n", "\n\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(reserve, damaged):\n    for i in damaged:\n        if i-1 in reserve:\n            reserve.remove(i - 1)\n            damaged.remove(i)\n        if i+1 in reserve:\n            reserve.remove(i + 1)\n            damaged.remove(i)\n    return len(damaged)\n\nprint check(reserve, damaged)\n", "\nimport sys\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR'\n    if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "import sys\n\ndef main():\n    n, s, r = [int(i) for i in input().split()]\n    broken = [int(i) for i in input().split()]\n    reserve = [int(i) for i in input().split()]\n    total = 0\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n-1 in reserve:\n                reserve.remove(n-1)\n            else:\n                total += 1\n        else:\n            if i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Get input\nN, S, R = [int(x) for x in input().split()]\ndmg = [int(x) for x in input().split()]\nrsv = [int(x) for x in input().split()]\n\n# Find the number of teams that can't start\n# Start with the number of teams with damaged kayaks\n# Subtract the number of teams with reserve kayaks\n# Add the number of teams that can be helped by reserve kayaks\n# Subtract the number of teams that are helped by reserve kayaks\n#   but are not next to the team with the reserve kayak\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any team with a damaged kayak\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any other team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to another team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak and a team with a reserve kayak\ncantStart = S - R\ncantStart -= sum([1 for x in dmg if x - 1 not in rsv and x + 1 not in rsv])\ncantStart -= sum([1 for x in rsv if x - 1 not in dmg and x + 1 not in dmg])\ncantStart -= sum([1 for x in rsv if x - 1 not in rsv and x + 1 not in rsv])\ncantStart += sum([1 for x in dmg if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in rsv if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in dmg if (x - 1 in rsv or x + 1 in rsv) and (x - 1 in dmg or x + 1 in dmg)])\n\n# Print the result\nprint(cantStart)\n", "\ndef main():\n    n, s, r = map(int, input().split())\n    damaged = set(map(int, input().split()))\n    reserve = set(map(int, input().split()))\n    count = 0\n    for i in range(1, n + 1):\n        if i in damaged:\n            if i - 1 in reserve and i + 1 in reserve:\n                reserve.remove(i - 1)\n                reserve.remove(i + 1)\n            elif i - 1 in reserve:\n                reserve.remove(i - 1)\n            elif i + 1 in reserve:\n                reserve.remove(i + 1)\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = list(map(int, sys.stdin.readline().split()))\nreserve = list(map(int, sys.stdin.readline().split()))\n\ndef check(reserve, damaged):\n    for i in range(len(damaged)):\n        if damaged[i]-1 in reserve:\n            reserve.remove(damaged[i]-1)\n            damaged.remove(damaged[i])\n        elif damaged[i]+1 in reserve:\n            reserve.remove(damaged[i]+1)\n            damaged.remove(damaged[i])\n    return len(damaged)\n\nprint check(reserve, damaged)\n", "\n\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(reserve, damaged):\n    for i in damaged:\n        if i-1 in reserve and i+1 in reserve:\n            reserve.remove(i-1)\n            reserve.remove(i+1)\n        elif i-1 in reserve or i+1 in reserve:\n            reserve.remove(i-1)\n            reserve.remove(i+1)\n            damaged.remove(i)\n            damaged.append(i)\n            damaged.remove(i)\n    return len(damaged)\n\nprint check(reserve, damaged)\n", "\n\ndef main():\n    n, s, r = map(int, input().split())\n    damaged = list(map(int, input().split()))\n    reserve = list(map(int, input().split()))\n    count = 0\n    if len(damaged) == 0:\n        print(0)\n        return\n    if len(reserve) == 0:\n        print(len(damaged))\n        return\n    damaged.sort()\n    reserve.sort()\n    for i in range(len(damaged)):\n        if damaged[i] - 1 in reserve:\n            reserve.remove(damaged[i]-1)\n            damaged.remove(damaged[i])\n            i -= 1\n        elif damaged[i] + 1 in reserve:\n            reserve.remove(damaged[i]+1)\n            damaged.remove(damaged[i])\n            i -= 1\n        else:\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Get input\nN, S, R = [int(x) for x in input().split()]\ndmg = [int(x) for x in input().split()]\nrsv = [int(x) for x in input().split()]\n\n# Find the number of teams that can't start\n# Start with the number of teams with damaged kayaks\n# Subtract the number of teams with reserve kayaks\n# Add the number of teams that can be helped by reserve kayaks\n# Subtract the number of teams that are helped by reserve kayaks\n#   but are not next to the team with the reserve kayak\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any team with a damaged kayak\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any other team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to another team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak and a team with a reserve kayak\ncantStart = S - R\ncantStart -= sum([1 for x in dmg if x - 1 not in rsv and x + 1 not in rsv])\ncantStart -= sum([1 for x in rsv if x - 1 not in dmg and x + 1 not in dmg])\ncantStart -= sum([1 for x in rsv if x - 1 not in rsv and x + 1 not in rsv])\ncantStart += sum([1 for x in dmg if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in rsv if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in dmg if (x - 1 in rsv and x + 1 in rsv) or (x - 1 in rsv and x + 1 in rsv)])\n\n# Print the result\nprint(cantStart)\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserve = map(int, input().split())  # pylint: disable=line-too-long\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged and remove it\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the reserve and remove it\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, s, r = (int(x) for x in sys.stdin.readline().split())\n    damaged = set(int(x) for x in sys.stdin.readline().split())\n    reserve = set(int(x) for x in sys.stdin.readline().split())\n    print(max(0, s - len(reserve.intersection(damaged.union({x - 1 for x in damaged}).union({x + 1 for x in damaged}))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, s, r = map(int, input().split())\n    damaged = set(map(int, input().split()))\n    reserve = set(map(int, input().split()))\n    count = 0\n    for i in range(1, n + 1):\n        if i in damaged:\n            if i - 1 in reserve and i + 1 in reserve:\n                reserve.remove(i - 1)\n                reserve.remove(i + 1)\n            elif i - 1 in reserve:\n                reserve.remove(i - 1)\n            elif i + 1 in reserve:\n                reserve.remove(i + 1)\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input())\nS = input()\n\nprint(S[:N])\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return \"ERROR\"\n    for x in reserve:\n        if x < 1 or x > n:\n            return \"ERROR\"\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\ndef main():\n    n, s, r = map(int, input().split())\n    damaged = set(map(int, input().split()))\n    reserve = set(map(int, input().split()))\n    count = 0\n    for i in range(1, n+1):\n        if i in damaged:\n            if i-1 in reserve and i+1 in reserve:\n                reserve.remove(i-1)\n                reserve.remove(i+1)\n            elif i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR1'\n    if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n        return 'ERROR2'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR3'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR4'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserve = map(int,\n                                                          input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the\n    # reserve\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = list(map(int, sys.stdin.readline().split()))\nreserve = list(map(int, sys.stdin.readline().split()))\n\ndef check(reserve, damaged):\n    for i in damaged:\n        if i - 1 in reserve:\n            reserve.remove(i - 1)\n            damaged.remove(i)\n        elif i + 1 in reserve:\n            reserve.remove(i + 1)\n            damaged.remove(i)\n    return len(damaged)\n\nprint check(reserve, damaged)\n", "\nimport sys\n\ndef main():\n    n, s, r = [int(i) for i in sys.stdin.readline().split()]\n    broken = [int(i) for i in sys.stdin.readline().split()]\n    reserve = [int(i) for i in sys.stdin.readline().split()]\n    total = 0\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n-1 in reserve:\n                reserve.remove(n-1)\n            else:\n                total += 1\n        else:\n            if i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserve = \\\n        map(int, input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team\n    # with the reserve\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n\n    print(len(teams_damaged))\n\nmain()\n", "\nN, S, R = map(int, input().split())\nD = set(map(int, input().split()))\nB = set(map(int, input().split()))\nc = 0\n\nfor i in range(1, N+1):\n    if i in D:\n        if i-1 in B:\n            B.remove(i-1)\n        elif i+1 in B:\n            B.remove(i+1)\n        else:\n            c += 1\nprint(c)\n", "\n\n# import sys\n\n# [N, S, R] = map(int, sys.stdin.readline().split())\n# damaged = map(int, sys.stdin.readline().split())\n# reserve = map(int, sys.stdin.readline().split())\n\n# def check(reserve, damaged):\n#     for i in damaged:\n#         if i-1 in reserve or i+1 in reserve:\n#             reserve.remove(i-1)\n#             reserve.remove(i+1)\n#             damaged.remove(i)\n#     return len(damaged)\n\n# print check(reserve, damaged)\n\n\n# def find_closest(x, y, x_list, y_list):\n#     min_distance = max(x_list) + max(y_list)\n#     for i in range(len(x_list)):\n#         for j in range(len(y_list)):\n#             distance = abs(x_list[i] - x) + abs(y_list[j] - y)\n#             if min_distance > distance:\n#                 min_distance = distance\n#     return min_distance\n\n# def find_closest(x, y, x_list, y_list):\n#     min_distance = max(x_list) + max(y_list)\n#     for i in range(len(x_list)):\n#         distance = abs(x_list[i] - x) + abs(y_list[i] - y)\n#         if min_distance > distance:\n#             min_distance = distance\n#     return min_distance\n\n# def find_closest(x, y, x_list, y_list):\n#     min_distance = max(x_list) + max(y_list)\n#     for i in range(len(x_list)):\n#         distance = abs(x_list[i] - x) + abs(y_list[i] - y)\n#         if min_distance > distance:\n#             min_distance = distance\n#     return min_distance\n\n# def find_closest(x, y, x_list, y_list):\n#     min_distance = max(x_list) + max(y_list)\n#     for i in range(len(x_list)):\n#         distance = abs(x_list[i] - x) + abs(y_list[i] - y)\n#         if min_distance > distance:\n#             min_distance = distance\n#     return min_distance\n", "\n\nN, S, R = map(int, input().split())\nD = set(map(int, input().split()))\nB = set(map(int, input().split()))\n \nc = 0\n\nfor i in range(1, N+1):\n    if i in D:\n        if i-1 in B:\n            B.remove(i-1)\n        elif i+1 in B:\n            B.remove(i+1)\n        else:\n            c += 1\nprint(c)\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserve = map(\n        int, input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the\n    # reserve\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = (int(x) for x in sys.stdin.readline().split())\n    damaged = set(int(x) for x in sys.stdin.readline().split())\n    reserve = set(int(x) for x in sys.stdin.readline().split())\n    print(max(0, s - len(reserve.intersection(damaged.union({x - 1 for x in damaged}).union({x + 1 for x in damaged}))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    #if len(damaged) != s or len(reserve) != r:\n    #    return 'ERROR'\n    if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\n\ndef main():\n    n, s, r = map(int, input().split())\n    damaged = list(map(int, input().split()))\n    reserve = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n + 1):\n        if i in damaged:\n            if i - 1 in reserve and i + 1 in reserve:\n                reserve.remove(i - 1)\n                reserve.remove(i + 1)\n            elif i - 1 in reserve:\n                reserve.remove(i - 1)\n            elif i + 1 in reserve:\n                reserve.remove(i + 1)\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nN, S, R = map(int, input().split())\nD = set(map(int, input().split()))\nB = set(map(int, input().split()))\n\nc = 0\n\nfor i in range(1, N+1):\n    if i in D:\n        if i-1 in B:\n            B.remove(i-1)\n        elif i+1 in B:\n            B.remove(i+1)\n        else:\n\n            c += 1\nprint(c)\n", "\n\ndef main():\n    n, s, r = map(int, input().split())  # n \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432, s - \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0435\u043d\u043d\u044b\u0445, r - \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0437\u0430\u043f\u0430\u0441\u043d\u044b\u0445\n    damaged = set(map(int, input().split()))\n    reserve = set(map(int, input().split()))\n    count = 0\n    for i in range(1, n+1):\n        if i in damaged:\n            if i-1 in reserve and i+1 in reserve:\n                reserve.remove(i-1)\n                reserve.remove(i+1)\n            elif i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, s, r = [int(i) for i in raw_input().split()]\n    broken = [int(i) for i in raw_input().split()]\n    reserve = [int(i) for i in raw_input().split()]\n    total = 0\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n-1 in reserve:\n                reserve.remove(n-1)\n            else:\n                total += 1\n        else:\n            if i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR'\n    if n < 2 or n > 10 or s < 1 or s > n or r < 1 or r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserve = map(int, input().split()) # pylint: disable=unused-variable\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the reserve\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\n\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(reserve, damaged):\n    for i in damaged:\n        if i-1 in reserve:\n            reserve.remove(i-1);\n            damaged.remove(i);\n        elif i+1 in reserve:\n            reserve.remove(i+1);\n            damaged.remove(i);\n    return len(damaged)\n\nprint check(reserve, damaged)\n", "\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR'\n    if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "# Get input\nN, M = [int(x) for x in input().split()]\nL = [int(x) for x in input().split()]\n\n\n# Find the number of teams that can start\ncanStart = 0\nfor i in range(N):\n    if i == 0:\n        if L[i] == 1 or L[i + 1] == 1:\n            canStart += 1\n    elif i == N - 1:\n        if L[i] == 1 or L[i - 1] == 1:\n            canStart += 1\n    else:\n        if L[i] == 1 or L[i - 1] == 1 or L[i + 1] == 1:\n            canStart += 1\n\n# Print the result\nprint(canStart)\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    _, num_teams_damaged, num_teams_reserve = map(int, input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged,\n    # if it is then remove it from the list of damaged teams\n    for i in range(len(teams_reserve)):\n        if teams_reserve[i] in teams_damaged:\n            teams_damaged.remove(teams_reserve[i])\n\n    # Check if the team with the damaged kayak is next to the team with the reserve\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\n\nN, S, R = map(int, input().split())\nD = set(map(int, input().split()))\nB = set(map(int, input().split()))\nc = 0\n\nfor i in range(1, N+1):\n    if i in D:\n        if i-1 in B:\n            B.remove(i-1)\n        elif i+1 in B:\n            B.remove(i+1)\n        else:\n            c += 1\nprint(c)\n", "\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(reserve, damaged, N):\n    for i in range(N):\n        if i+1 in damaged:\n            if i in reserve or i+2 in reserve:\n                reserve.remove(i)\n                reserve.remove(i+2)\n                damaged.remove(i+1)\n    return len(damaged), reserve, damaged\n\nprint check(reserve, damaged)\n", "\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    broken = [int(i) for i in sys.stdin.readline().split()]\n    reserve = [int(i) for i in sys.stdin.readline().split()]\n    total = 0\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n-1 in reserve:\n                reserve.remove(n-1)\n            else:\n                total += 1\n        else:\n            if i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(reserve, damaged):\n    for i in damaged:\n        if (i-1 in reserve):\n            damaged.remove(i)\n        elif (i+1 in reserve):\n            reserve.remove(i-1)\n            reserve.remove(i+1)\n            damaged.remove(i)            \n    return len(damaged)\n\nprint check(reserve, damaged)\n"]