2022-04-16 12:53:18.220989 num operations 1
2022-04-16 12:53:18.221007 size on input set 1
2022-04-16 12:53:59.105226 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(2 ** 3)\n"
    },
    {
      "index": 1,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 2,
      "text": "\nprint(input().replace('@', ''))\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 4,
      "text": "import sys\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, sys.stdin.readline().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 5,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 6,
      "text": "'''\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1:\n            print('*', end='')\n        elif j == 0 or j == n - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or j == n - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2 or i == j - 3 or j == i - 3:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2 or i == j - 3 or j == i - 3 or i == j + 3 or i + j == n - 4:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2 or i == j - 3 or j == i - 3 or i == j + 3 or i + j == n - 4 or i == j - 4 or j == i - 4:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2 or i == j - 3 or j == i - 3 or i == j + 3 or i + j == n - 4 or i == j - 4 or j == i - 4 or i == j + 4 or i + j == n - 5 or i == j - 5 or j == i - 5:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 7,
      "text": "import sys\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(sys.stdin.readline().strip()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 8,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    }
  ],
  "created": 1650113598,
  "object": "edit"
}
2022-04-16 12:53:59.105535 fix syntax errors 9 ['\nprint(2 ** 3)\n', "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "\nprint(input().replace('@', ''))\n", "#!/usr/bin/env python3\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "import sys\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, sys.stdin.readline().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "'''\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1:\n            print('*', end='')\n        elif j == 0 or j == n - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or j == n - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2 or i == j - 3 or j == i - 3:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2 or i == j - 3 or j == i - 3 or i == j + 3 or i + j == n - 4:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2 or i == j - 3 or j == i - 3 or i == j + 3 or i + j == n - 4 or i == j - 4 or j == i - 4:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n\n'''\nn = int(input())\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or i == n - 1 or j == 0 or j == n - 1 or i == j or i + j == n - 1 or i == n // 2 or j == n // 2 or i == j + 1 or i + j == n - 2 or i == j - 1 or j == i - 1 or i == j + 2 or i + j == n - 3 or i == j - 2 or j == i - 2 or i == j - 3 or j == i - 3 or i == j + 3 or i + j == n - 4 or i == j - 4 or j == i - 4 or i == j + 4 or i + j == n - 5 or i == j - 5 or j == i - 5:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()\n'''\n    print('#' + '.' * (n + l + r) + '#')\n", "import sys\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(sys.stdin.readline().strip()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"]
2022-04-16 12:53:59.105694 size on output set 7
2022-04-16 12:53:59.105708 num operations 1
2022-04-16 12:53:59.105713 size on input set 1
2022-04-16 12:54:11.338651 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(u):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(m):\n    print(\"#\" * l + input() + \"#\" * r)\nfor _ in range(d):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\n"
    },
    {
      "index": 1,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(u):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(m):\n    print(\"#\" * l + input() + \"#\" * r)\nfor _ in range(d):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\n"
    },
    {
      "index": 2,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(l+r+n))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(l+r+n))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(l+r+n))\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(u):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\nfor _ in range(m):\n    print(\"#\" * l + input() + \"#\" * r)\nfor _ in range(d):\n    print(\"#\" * (l + r + n) + \".\" * (l + r))\n"
    },
    {
      "index": 4,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(r-l))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(r-l))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(r-l))\n"
    },
    {
      "index": 5,
      "text": "n, m = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\n\nfor i in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(l+r))\nfor i in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor i in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(l+r))\n"
    },
    {
      "index": 6,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\n"
    },
    {
      "index": 7,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\n"
    },
    {
      "index": 8,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(n+l+r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(n+l+r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(n+l+r))\n"
    }
  ],
  "created": 1650113639,
  "object": "edit"
}
2022-04-16 12:54:11.338905 fix syntax errors 9 ['\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#" * (l + r + n) + "." * (l + r))\nfor _ in range(u):\n    print("#" * (l + r + n) + "." * (l + r))\nfor _ in range(m):\n    print("#" * l + input() + "#" * r)\nfor _ in range(d):\n    print("#" * (l + r + n) + "." * (l + r))\n', '\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#" * (l + r + n) + "." * (l + r))\nfor _ in range(u):\n    print("#" * (l + r + n) + "." * (l + r))\nfor _ in range(m):\n    print("#" * l + input() + "#" * r)\nfor _ in range(d):\n    print("#" * (l + r + n) + "." * (l + r))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(l+r+n))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(l+r+n))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(l+r+n))\n', '#!/usr/bin/env python3\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#" * (l + r + n) + "." * (l + r))\nfor _ in range(u):\n    print("#" * (l + r + n) + "." * (l + r))\nfor _ in range(m):\n    print("#" * l + input() + "#" * r)\nfor _ in range(d):\n    print("#" * (l + r + n) + "." * (l + r))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(r-l))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(r-l))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(r-l))\n', 'n, m = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\n\nfor i in range(u):\n    print("#"*(l+r+n)+"."*(l+r))\nfor i in range(m):\n    print("#"*l+input()+"#"*r)\nfor i in range(d):\n    print("#"*(l+r+n)+"."*(l+r))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m+l+r))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m+l+r))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(n+l+r))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(n+l+r))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(n+l+r))\n']
2022-04-16 12:54:11.338945 size on output set 7
2022-04-16 12:54:11.338981 num operations 1
2022-04-16 12:54:11.338986 size on input set 1
2022-04-16 12:54:23.761329 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#A\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split()) #up, left, right, down\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\n\n#B\n\n#C\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 1,
      "text": "\n#Solution\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 3,
      "text": "#Solution\n\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 4,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 5,
      "text": "\n'''\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\n'''\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 6,
      "text": "\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u + n))\nprint('.' * (l + r + n) + '#' * (d + u + n))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u + n))\nprint('#' * (l + r + n) + '.' * (d + u + n))\n"
    },
    {
      "index": 7,
      "text": "\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 8,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n#Solution\n\nimport sys\n\ndef main(args):\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n\n    print('#' * (l + r + n) + '.' * (d + u))\n    print('.' * (l + r + n) + '#' * (d + u))\n    for i in range(m):\n        print('#' * l + input() + '#' * r)\n    print('.' * (l + r + n) + '#' * (d + u))\n    print('#' * (l + r + n) + '.' * (d + u))\n\nif __name__ == '__main__':\n    sys.exit(main(sys.argv))\n"
    }
  ],
  "created": 1650113651,
  "object": "edit"
}
2022-04-16 12:54:23.761643 fix syntax errors 9 ["\n#A\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split()) #up, left, right, down\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\n\n#B\n\n#C\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n#Solution\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "#Solution\n\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n'''\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\n'''\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u + n))\nprint('.' * (l + r + n) + '#' * (d + u + n))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u + n))\nprint('#' * (l + r + n) + '.' * (d + u + n))\n", "\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n#Solution\n\nimport sys\n\ndef main(args):\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n\n    print('#' * (l + r + n) + '.' * (d + u))\n    print('.' * (l + r + n) + '#' * (d + u))\n    for i in range(m):\n        print('#' * l + input() + '#' * r)\n    print('.' * (l + r + n) + '#' * (d + u))\n    print('#' * (l + r + n) + '.' * (d + u))\n\nif __name__ == '__main__':\n    sys.exit(main(sys.argv))\n"]
2022-04-16 12:54:23.761692 size on output set 9
2022-04-16 12:54:23.761703 num operations 1
2022-04-16 12:54:23.761708 size on input set 1
2022-04-16 12:54:31.735618 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 2,
      "text": "\n\n#SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r, sep=\"\")\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r, sep=\"\")\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r, sep=\"\")\n"
    },
    {
      "index": 3,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 4,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 5,
      "text": "\n\n#SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r, sep=\"\")\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r, sep=\"\")\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r, sep=\"\")\n"
    },
    {
      "index": 6,
      "text": "\n\n#SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m - (u + d)):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 7,
      "text": "\n#SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 8,
      "text": "\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    }
  ],
  "created": 1650113663,
  "object": "edit"
}
2022-04-16 12:54:31.735866 fix syntax errors 9 ['\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\n#SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r, sep="")\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r, sep="")\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r, sep="")\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\n#SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r, sep="")\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r, sep="")\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r, sep="")\n', '\n\n#SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m - (u + d)):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n#SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n']
2022-04-16 12:54:31.735993 size on output set 6
2022-04-16 12:54:31.736006 num operations 1
2022-04-16 12:54:31.736011 size on input set 1
2022-04-16 12:54:44.545006 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * l)\n    for _ in range(u):\n        print(\".\" * l + \"#\" * (n + l + r) + \".\" * l)\n    for i in range(m):\n        # Print left\n        print(\".\" * l, end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * l)\n    for _ in range(d):\n        print(\".\" * l + \"#\" * (n + l + r) + \".\" * l)\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * l)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    # Get puzzle\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r))\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]))\n        # Print right\n        print(\".\" * (l + r))\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    # Print top margin\n    # Print top and bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    # Print puzzle\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left margin\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right margin\n        print(\".\" * (l + r))\n    # Print bottom margin\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r), end=\"\\n\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r), end=\"\\n\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r), end=\"\\n\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    # Print bottom border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r), end=\"\\n\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650113671,
  "object": "edit"
}
2022-04-16 12:54:44.545340 fix syntax errors 9 ['\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r) + "." * l)\n    for _ in range(u):\n        print("." * l + "#" * (n + l + r) + "." * l)\n    for i in range(m):\n        # Print left\n        print("." * l, end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * l)\n    for _ in range(d):\n        print("." * l + "#" * (n + l + r) + "." * l)\n    # Print bottom\n    print("#" * (n + l + r) + "." * l)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    # Get puzzle\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r) + "." * (l + r))\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * (l + r))\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r) + "." * (l + r), end="")\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="")\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * (l + r), end="")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="")\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r), end="")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r) + "." * (l + r))\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]))\n        # Print right\n        print("." * (l + r))\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    print("#" * (n + l + r) + "." * (l + r))\n    # Print top margin\n    # Print top and bottom\n    print("#" * (n + l + r) + "." * (l + r))\n    # Print puzzle\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    for i in range(m):\n        # Print left margin\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right margin\n        print("." * (l + r))\n    # Print bottom margin\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * (l + r), end="\\n")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * (l + r), end="\\n")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * (l + r), end="\\n")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    # Print bottom border\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    for i in range(m):\n        # Print left\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right\n        print("." * (l + r), end="\\n")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="\\n")\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r), end="\\n")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 12:54:44.545424 size on output set 7
2022-04-16 12:54:44.545436 num operations 1
2022-04-16 12:54:44.545442 size on input set 1
2022-04-16 12:54:55.866464 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for _ in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 1,
      "text": "\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 3,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\" * (N + L + R - 1) + \"#\")\nframe.append(\".\" * L + crossword[0] + \".\" * R)\nfor i in range(1, M):\n    frame.append(\".\" * L + crossword[i] + \".\" * R)\nfor i in range(D):\n    frame.append(\"#.\" * (N + L + R - 1) + \"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 4,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 5,
      "text": "\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 6,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]  # M is number of rows, N is number of columns\nU, L, R, D = [int(x) for x in input().split()]  # U is number of rows above the crossword, L is number of columns left of the crossword, R is number of columns right of the crossword, D is number of rows below the crossword\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1, M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 7,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 8,
      "text": "\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\" * (N + L + R - 1) + \"#\")\nframe.append(\".\" * L + crossword[0] + \".\" * R)\nfor i in range(1, M):\n    frame.append(\".\" * L + crossword[i] + \".\" * R)\nfor i in range(D):\n    frame.append(\"#.\" * (N + L + R - 1) + \"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    }
  ],
  "created": 1650113684,
  "object": "edit"
}
2022-04-16 12:54:55.866794 fix syntax errors 9 ['\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for _ in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n', '\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#." * (N + L + R - 1) + "#")\nframe.append("." * L + crossword[0] + "." * R)\nfor i in range(1, M):\n    frame.append("." * L + crossword[i] + "." * R)\nfor i in range(D):\n    frame.append("#." * (N + L + R - 1) + "#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]  # M is number of rows, N is number of columns\nU, L, R, D = [int(x) for x in input().split()]  # U is number of rows above the crossword, L is number of columns left of the crossword, R is number of columns right of the crossword, D is number of rows below the crossword\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1, M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#." * (N + L + R - 1) + "#")\nframe.append("." * L + crossword[0] + "." * R)\nfor i in range(1, M):\n    frame.append("." * L + crossword[i] + "." * R)\nfor i in range(D):\n    frame.append("#." * (N + L + R - 1) + "#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n']
2022-04-16 12:54:55.866852 size on output set 6
2022-04-16 12:54:55.866864 num operations 1
2022-04-16 12:54:55.866869 size on input set 1
2022-04-16 12:55:15.664832 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\ndef get_next_move(x, y, pac_id, mine, visible_pac_count, mine_count, visible_pellet_count):\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    get_next_move(x, y, pac_id, mine, visible_pac_count, mine_count, visible_pellet_count)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\", file=sys.stderr)\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y), file=sys.stderr)\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\nimport math\n\n# Use input() to read input from STDIN and use print to write your output to STDOUT\n\nn = int(input())\nprint(n)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\nimport math\n# test\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x + 1, y))\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n\n    # move = []\n    # for i in range(visible_pac_count):\n    #     if mine:\n    #         move.append(i)\n    #         move.append(pellets[i][0])\n    #         move.append(pellets[i][1])\n    #         print(move)\n    # print(\"MOVE %d %d %d\" % (move))\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    }
  ],
  "created": 1650113695,
  "object": "edit"
}
2022-04-16 12:55:15.665323 fix syntax errors 9 ['\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', '\nimport sys\nimport math\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\ndef get_next_move(x, y, pac_id, mine, visible_pac_count, mine_count, visible_pellet_count):\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    get_next_move(x, y, pac_id, mine, visible_pac_count, mine_count, visible_pellet_count)\n', '\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!", file=sys.stderr)\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y), file=sys.stderr)\n', '\n\nimport sys\nimport math\n\n# Use input() to read input from STDIN and use print to write your output to STDOUT\n\nn = int(input())\nprint(n)\n', '\n\nimport sys\nimport math\n# test\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', '\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x + 1, y))\n', '\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', '\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n\n    # move = []\n    # for i in range(visible_pac_count):\n    #     if mine:\n    #         move.append(i)\n    #         move.append(pellets[i][0])\n    #         move.append(pellets[i][1])\n    #         print(move)\n    # print("MOVE %d %d %d" % (move))\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', '\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n']
2022-04-16 12:55:15.665503 size on output set 8
2022-04-16 12:55:15.665520 num operations 1
2022-04-16 12:55:15.665526 size on input set 1
2022-04-16 12:55:25.080852 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\" if i != u - 1 else \"#.\" * (l + n + r) + \"#\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\" if i != m - 1 else \"#.\" + \".\".join(input()) + \".#\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\" if i != d - 1 else \"#.\" * (l + n + r) + \"#\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\" if i != u - 1 else \"#.\" * (l + n + r) + \"#\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\" if i != d - 1 else \"#.\" * (l + n + r) + \"#\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = []\n    for i in range(u):\n        out.append(\"#.\" * (l + n + r) + \"#\\n\")\n    for i in range(m):\n        out.append(\"#.\" + \".\".join(input()) + \".#\\n\")\n    for i in range(d):\n        out.append(\"#.\" * (l + n + r) + \"#\\n\")\n    print(\"\".join(out))\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"#\" * (l + n + r + 2) + \"\\n\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \".#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \".#\\n\"\n    out += \"#\" * (l + n + r + 2) + \"\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 6,
      "text": "\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().strip()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    }
  ],
  "created": 1650113715,
  "object": "edit"
}
2022-04-16 12:55:25.081117 fix syntax errors 9 ['\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n" if i != u - 1 else "#." * (l + n + r) + "#"\n    for i in range(m):\n        out += "#." + ".".join(input()) + ".#\\n" if i != m - 1 else "#." + ".".join(input()) + ".#"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n" if i != d - 1 else "#." * (l + n + r) + "#"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n" if i != u - 1 else "#." * (l + n + r) + "#"\n    for i in range(m):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n" if i != d - 1 else "#." * (l + n + r) + "#"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = []\n    for i in range(u):\n        out.append("#." * (l + n + r) + "#\\n")\n    for i in range(m):\n        out.append("#." + ".".join(input()) + ".#\\n")\n    for i in range(d):\n        out.append("#." * (l + n + r) + "#\\n")\n    print("".join(out))\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().split()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().split()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = "#" * (l + n + r + 2) + "\\n"\n    for i in range(u):\n        out += "#." * (l + n + r) + ".#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + ".#\\n"\n    out += "#" * (l + n + r + 2) + "\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().strip()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().split()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().split()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n']
2022-04-16 12:55:25.081228 size on output set 6
