2022-04-16 14:51:10.551933 num operations 1
2022-04-16 14:51:10.551950 size on input set 1
2022-04-16 14:51:25.023524 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == '':\n                if conclusion not in prev_conclusions:\n                    print(i + 1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i + 1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef print_invalid_line(proof):\n    if valid:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        print_invalid_line(proof)\n\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        # The set of all previous conclusions\n        prev_conclusions = set()\n        # The set of all current assumptions\n        curr_assumptions = set()\n\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    # Add the current assumptions to the set of previous conclusions\n                    prev_conclusions.update(curr_assumptions)\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    prev_conclusions.update(curr_assumptions)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \"\":\n                pass\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        assumptions, conclusion = line.split(\" -> \")\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            assumptions, conclusion = line.split(\" -> \")\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"Given a list of lines of a \"proof\", determine whether it is valid.\"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        assumptions, conclusion = line.split(\" -> \")\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            assumptions, conclusion = line.split(\" -> \")\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions and current assumptions\n    conclusions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            conclusions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            conclusions.add(conclusion)\n\n        # Add the current assumptions to the set of conclusions\n        conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650120670,
  "object": "edit"
}
2022-04-16 14:51:25.023957 fix syntax errors 9 ['\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(" -> ")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(" -> ")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \'\':\n                if conclusion not in prev_conclusions:\n                    print(i + 1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i + 1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(" -> ")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef print_invalid_line(proof):\n    if valid:\n        print("correct")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(" -> ")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == "":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        print_invalid_line(proof)\n\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(" -> ")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        # The set of all previous conclusions\n        prev_conclusions = set()\n        # The set of all current assumptions\n        curr_assumptions = set()\n\n        print("correct")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(" -> ")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == "":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    # Add the current assumptions to the set of previous conclusions\n                    prev_conclusions.update(curr_assumptions)\n                    continue\n                break\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(" -> ")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(" -> ")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == "":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(" -> ")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(" -> ")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == "":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    prev_conclusions.update(curr_assumptions)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(" -> ")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n        prev_conclusions = set()\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(" -> ")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == "":\n                pass\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        assumptions, conclusion = line.split(" -> ")\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            assumptions, conclusion = line.split(" -> ")\n\n            if assumptions == "":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """Given a list of lines of a "proof", determine whether it is valid."""\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        assumptions, conclusion = line.split(" -> ")\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            assumptions, conclusion = line.split(" -> ")\n\n            if assumptions == "":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(proof):\n    """\n    Given a list of lines of a "proof", determine whether it is valid.\n    """\n    # The set of all previous conclusions and current assumptions\n    conclusions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(" -> ")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == "":\n            conclusions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n            conclusions.add(conclusion)\n\n        # Add the current assumptions to the set of conclusions\n        conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print("correct")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(" -> ")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == "":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 14:51:25.024158 size on output set 9
2022-04-16 14:51:25.024169 num operations 1
2022-04-16 14:51:25.024174 size on input set 1
2022-04-16 14:51:35.316722 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line)\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    },
    {
      "index": 1,
      "text": "\ndef check_proof(lines):\n    assumptions = []\n    for line in lines:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return lines.index(line) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    lines = []\n    for _ in range(n):\n        lines.append(input())\n    print(check_proof(lines))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line)\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    },
    {
      "index": 3,
      "text": "\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line[1]) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1, line\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    },
    {
      "index": 5,
      "text": "def check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line[0] + '->' + line[1]) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    },
    {
      "index": 7,
      "text": "\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n"
    },
    {
      "index": 8,
      "text": "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('|-')\n        if line[0].strip() == ' ':\n            assumptions.append(line[1].strip().replace(' ', ''))\n        else:\n            for assumption in line[0].split(' '):\n                if assumption not in assumptions:\n                    return proof.index(line) + 1, assumption\n            assumptions.append(line[1].strip().replace(' ', ''))\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input().replace(' ', ''))\n    proof = []\n    for _ in range(n):\n        proof.append(input().replace(' ', ''))\n    print(check_proof(proof))\n"
    }
  ],
  "created": 1650120685,
  "object": "edit"
}
2022-04-16 14:51:35.317005 fix syntax errors 9 ["\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line)\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "\ndef check_proof(lines):\n    assumptions = []\n    for line in lines:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return lines.index(line) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    lines = []\n    for _ in range(n):\n        lines.append(input())\n    print(check_proof(lines))\n", "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line)\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line[1]) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1, line\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "def check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line[0] + '->' + line[1]) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof.index(line) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "\n\ndef check_proof(proof):\n    assumptions = []\n    for line in proof:\n        line = line.split('|-')\n        if line[0].strip() == ' ':\n            assumptions.append(line[1].strip().replace(' ', ''))\n        else:\n            for assumption in line[0].split(' '):\n                if assumption not in assumptions:\n                    return proof.index(line) + 1, assumption\n            assumptions.append(line[1].strip().replace(' ', ''))\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(input().replace(' ', ''))\n    proof = []\n    for _ in range(n):\n        proof.append(input().replace(' ', ''))\n    print(check_proof(proof))\n"]
2022-04-16 14:51:35.317164 size on output set 8
2022-04-16 14:51:35.317177 num operations 1
2022-04-16 14:51:35.317182 size on input set 1
2022-04-16 14:51:50.666461 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i+1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption.strip() not in conclusion_list[:i]:\n                    print(i+1)\n                    return\n        else:\n            print(i+1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = [\"\"] * N\n    for i in range(N):\n        conclusion_list[i] = input()\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i+1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i+1)\n                    return\n        else:\n            print(i+1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef check_assumptions(conclusion_list, assumption_list, conclusion_index):\n    for assumption in assumption_list:\n        if assumption not in conclusion_list[:conclusion_index]:\n            return False\n    return True\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" not in line:\n            print(i+1)\n            return\n        conclusion = line.split(\"->\")[1].strip()\n        assumptions = line.split(\"->\")[0].split(\" \")\n        if i == 0:\n            print(i+1)\n            return\n        if check_assumptions(conclusion_list, assumptions, i):\n            continue\n        else:\n            print(i+1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650120695,
  "object": "edit"
}
2022-04-16 14:51:50.666714 fix syntax errors 9 ['\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i+1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption.strip() not in conclusion_list[:i]:\n                    print(i+1)\n                    return\n        else:\n            print(i+1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    conclusion_list = [""] * N\n    for i in range(N):\n        conclusion_list[i] = input()\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i+1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i+1)\n                    return\n        else:\n            print(i+1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split("->")[1].strip()\n            assumptions = line.split("->")[0].split(" ")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_assumptions(conclusion_list, assumption_list, conclusion_index):\n    for assumption in assumption_list:\n        if assumption not in conclusion_list[:conclusion_index]:\n            return False\n    return True\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if "->" not in line:\n            print(i+1)\n            return\n        conclusion = line.split("->")[1].strip()\n        assumptions = line.split("->")[0].split(" ")\n        if i == 0:\n            print(i+1)\n            return\n        if check_assumptions(conclusion_list, assumptions, i):\n            continue\n        else:\n            print(i+1)\n            return\n\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 14:51:50.666860 size on output set 5
2022-04-16 14:51:50.666873 num operations 1
2022-04-16 14:51:50.666877 size on input set 1
2022-04-16 14:52:00.450275 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i+1):\n            if lines[j][-1] in lines[i][:-1]:\n                continue\n            else:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i + 1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n-1):\n        if lines[i][-1] not in lines[i+1][:-2]:\n            print(i+2)\n            return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\n\n    \"\"\"\n    main function\n    \"\"\"\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n                return\n    print(\"correct\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i + 1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        line = sys.stdin.readline().strip().split()\n        for j in range(i):\n            if line[-1] in lines[j][:-2]:\n                break\n        else:\n            print(i+1)\n            return\n    else:\n        print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650120710,
  "object": "edit"
}
2022-04-16 14:52:00.450531 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i+1):\n            if lines[j][-1] in lines[i][:-1]:\n                continue\n            else:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i + 1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n-1):\n        if lines[i][-1] not in lines[i+1][:-2]:\n            print(i+2)\n            return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n\n    """\n    main function\n    """\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n                return\n    print("correct")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i + 1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        line = sys.stdin.readline().strip().split()\n        for j in range(i):\n            if line[-1] in lines[j][:-2]:\n                break\n        else:\n            print(i+1)\n            return\n    else:\n        print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 14:52:00.450581 size on output set 8
2022-04-16 14:52:00.450592 num operations 1
2022-04-16 14:52:00.450597 size on input set 1
2022-04-16 14:52:09.592157 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i] if j[1] != '']:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] in [j[1] for j in lines[:i]]:\n            print(line[0])\n            # break\n    else:\n        print('correct')\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(input().strip())):\n        lines.append(input().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i] if len(j) > 1]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    lines = []\n    for _ in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for idx, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:idx]]:\n            print(idx+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i] if len(j) > 1]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"
    }
  ],
  "created": 1650120720,
  "object": "edit"
}
2022-04-16 14:52:09.592468 fix syntax errors 9 ["import sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i] if j[1] != '']:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n", "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n", '\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n', "\n\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] in [j[1] for j in lines[:i]]:\n            print(line[0])\n            # break\n    else:\n        print('correct')\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(input().strip())):\n        lines.append(input().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n", '\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(\' -> \'))\n\n    for i, line in enumerate(lines):\n        if line[0] != \'\' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print(\'correct\')\n\nif __name__ == "__main__":\n    main()\n', "\n\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i] if len(j) > 1]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n", "\nimport sys\n\ndef main():\n    lines = []\n    for _ in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for idx, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:idx]]:\n            print(idx+1)\n            break\n    else:\n        print('correct')\n\nmain()\n", "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i] if len(j) > 1]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n"]
2022-04-16 14:52:09.592515 size on output set 9
2022-04-16 14:52:09.592527 num operations 1
2022-04-16 14:52:09.592532 size on input set 1
2022-04-16 14:52:21.394188 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n\ndef parse_input():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    return lines\n\n\ndef main():\n    lines = parse_input()\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]  # (assumption, conclusion)\n    lines = [(tuple(line[0]), line[1]) for line in lines]  # (assumption, conclusion)\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[:-1]), line[-1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[0][0] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1])]\n    lines = [(tuple(line[0]), line[1])]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "import sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = [tuple(line.split()) for line in lines[1:]]\n    lines = [(line[:-1], line[-1]) for line in lines if line[-1] != \"correct\"]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split(' ') for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650120729,
  "object": "edit"
}
2022-04-16 14:52:21.394513 fix syntax errors 9 ['\nimport sys\n\n\ndef parse_input():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    return lines\n\n\ndef main():\n    lines = parse_input()\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]  # (assumption, conclusion)\n    lines = [(tuple(line[0]), line[1]) for line in lines]  # (assumption, conclusion)\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[:-1]), line[-1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[0][0] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1])]\n    lines = [(tuple(line[0]), line[1])]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = [tuple(line.split()) for line in lines[1:]]\n    lines = [(line[:-1], line[-1]) for line in lines if line[-1] != "correct"]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split(\' \') for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print("correct")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 14:52:21.394579 size on output set 9
2022-04-16 14:52:21.394590 num operations 1
2022-04-16 14:52:21.394595 size on input set 1
2022-04-16 14:52:32.277628 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    #print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1][i]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\" or len(line)<3:\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in [item for sublist in lines[:lineCount-1] for item in sublist]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in [line[0] for line in lines[:lineCount-1]]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":  # check whether the last two elements are \"->\"\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):  # check whether the other elements have appeared before\n                if line[i] not in lines[:lineCount-1]:  # if yes, print the line number and exit\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:  # if no errors are found, print \"correct\"\n        print(\"correct\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\\\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    #print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                for j in range(lineCount-1):\n                    if line[i] in lines[j]:\n                        break\n                else:\n                    print(lineCount) # line is not unique\n                    break # break out of this line\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    # print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line) - 2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    #print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in [x[0] for x in lines[:lineCount-1]]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n"
    }
  ],
  "created": 1650120741,
  "object": "edit"
}
2022-04-16 14:52:32.277975 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    #print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1][i]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->" or len(line)<3:\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in [item for sublist in lines[:lineCount-1] for item in sublist]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in [line[0] for line in lines[:lineCount-1]]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":  # check whether the last two elements are "->"\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):  # check whether the other elements have appeared before\n                if line[i] not in lines[:lineCount-1]:  # if yes, print the line number and exit\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:  # if no errors are found, print "correct"\n        print("correct")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\\\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n', 'import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    #print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                for j in range(lineCount-1):\n                    if line[i] in lines[j]:\n                        break\n                else:\n                    print(lineCount) # line is not unique\n                    break # break out of this line\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n', '\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    # print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line) - 2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    #print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != "->":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in [x[0] for x in lines[:lineCount-1]]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print("correct")\n\nmain()\n']
2022-04-16 14:52:32.278045 size on output set 9
2022-04-16 14:52:32.278056 num operations 1
2022-04-16 14:52:32.278061 size on input set 1
2022-04-16 14:52:44.179441 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    s = input()\n    if len(s) == 1:\n        print(s)\n        return\n    s = s[1:-1]\n    s = s.split('|')\n    l = []\n    for i in s:\n        l.extend(i.split('&'))\n    l = list(set(l))\n    l.sort()\n    print('(' + '&'.join(l) + ')')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, _, conclusion = input().split(' ')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(' '):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split(' ')\n        if assumptions == '':\n            if conclusion not in axioms:\n                print(i + 1)\n                return\n        else:\n            for a in assumptions.split(' '):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n    for a in axioms:\n        print(a)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = []\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.append(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.append(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split('->')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(','):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650120752,
  "object": "edit"
}
2022-04-16 14:52:44.179760 fix syntax errors 9 ["\n\ndef main():\n    s = input()\n    if len(s) == 1:\n        print(s)\n        return\n    s = s[1:-1]\n    s = s.split('|')\n    l = []\n    for i in s:\n        l.extend(i.split('&'))\n    l = list(set(l))\n    l.sort()\n    print('(' + '&'.join(l) + ')')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, _, conclusion = input().split(' ')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(' '):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split(' ')\n        if assumptions == '':\n            if conclusion not in axioms:\n                print(i + 1)\n                return\n        else:\n            for a in assumptions.split(' '):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n    for a in axioms:\n        print(a)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = []\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.append(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.append(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split('->')\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split(','):\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    axioms = set()\n    for i in range(n):\n        assumptions, arrow, conclusion = input().split()\n        if assumptions == '':\n            axioms.add(conclusion)\n        else:\n            for a in assumptions.split():\n                if a not in axioms:\n                    print(i + 1)\n                    return\n            axioms.add(conclusion)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:52:44.179818 size on output set 6
