2022-04-16 11:39:20.838097 num operations 1
2022-04-16 11:39:20.838117 size on input set 1
2022-04-16 11:39:34.263323 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input(\"\")\nletters = input(\"\")\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    },
    {
      "index": 1,
      "text": "\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    },
    {
      "index": 2,
      "text": "\n\n# word = input()\n# letters = input()\n\n# # create a dictionary of letters and their positions\n# letter_dict = {}\n# for i in range(len(word)):\n#     if word[i] in letter_dict:\n#         letter_dict[word[i]].append(i)\n#     else:\n#         letter_dict[word[i]] = [i]\n\n# # check if Ned wins\n# win = True\n# for letter in letters:\n#     if letter in letter_dict:\n#         del letter_dict[letter]\n#         if not letter_dict:\n#             break\n#     else:\n#         win = False\n#         break\n\n# # print output\n# if win:\n#     print(\"WIN\")\n# else:\n#     print(\"LOSE\")\n\n\n"
    },
    {
      "index": 3,
      "text": "\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n\tif word[i] in letter_dict:\n\t\tletter_dict[word[i]].append(i)\n\telse:\n\t\tletter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n\tif letter in letter_dict:\n\t\tdel letter_dict[letter]\n\t\tif not letter_dict:\n\t\t\tbreak\n\telse:\n\t\twin = False\n\t\tbreak\n\n# print output\nif win:\n\tprint(\"WIN\")\nelse:\n\tprint(\"LOSE\")\n"
    },
    {
      "index": 4,
      "text": "\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i + 1]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    },
    {
      "index": 5,
      "text": "\n#\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    },
    {
      "index": 6,
      "text": "\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i, c in enumerate(word):\n    if c in letter_dict:\n        letter_dict[c].append(i)\n    else:\n        letter_dict[c] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    },
    {
      "index": 7,
      "text": "\n\nword = input(\"Enter a word: \")\nletters = input(\"Enter letters: \")\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"You win!\")\nelse:\n    print(\"You lose!\")\n"
    },
    {
      "index": 8,
      "text": "\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    }
  ],
  "created": 1650109161,
  "object": "edit"
}
2022-04-16 11:39:34.263631 fix syntax errors 9 ['\n\nword = input("")\nletters = input("")\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n', '\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n', '\n\n# word = input()\n# letters = input()\n\n# # create a dictionary of letters and their positions\n# letter_dict = {}\n# for i in range(len(word)):\n#     if word[i] in letter_dict:\n#         letter_dict[word[i]].append(i)\n#     else:\n#         letter_dict[word[i]] = [i]\n\n# # check if Ned wins\n# win = True\n# for letter in letters:\n#     if letter in letter_dict:\n#         del letter_dict[letter]\n#         if not letter_dict:\n#             break\n#     else:\n#         win = False\n#         break\n\n# # print output\n# if win:\n#     print("WIN")\n# else:\n#     print("LOSE")\n\n\n', '\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n\tif word[i] in letter_dict:\n\t\tletter_dict[word[i]].append(i)\n\telse:\n\t\tletter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n\tif letter in letter_dict:\n\t\tdel letter_dict[letter]\n\t\tif not letter_dict:\n\t\t\tbreak\n\telse:\n\t\twin = False\n\t\tbreak\n\n# print output\nif win:\n\tprint("WIN")\nelse:\n\tprint("LOSE")\n', '\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i + 1]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n', '\n#\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n', '\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i, c in enumerate(word):\n    if c in letter_dict:\n        letter_dict[c].append(i)\n    else:\n        letter_dict[c] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n', '\n\nword = input("Enter a word: ")\nletters = input("Enter letters: ")\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("You win!")\nelse:\n    print("You lose!")\n', '\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if Ned wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n']
2022-04-16 11:39:34.263786 size on output set 8
2022-04-16 11:39:34.263800 num operations 1
2022-04-16 11:39:34.263806 size on input set 1
2022-04-16 11:39:42.129608 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 6:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = list(sys.stdin.readline().strip())\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = random.choice(alphabet)\n        alphabet.remove(guess)\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    hangman = sys.stdin.readline().strip().lower()\n    alphabet = sys.stdin.readline().strip().lower()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            if all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650109174,
  "object": "edit"
}
2022-04-16 11:39:42.129877 fix syntax errors 9 ['\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 6:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = list(sys.stdin.readline().strip())\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = random.choice(alphabet)\n        alphabet.remove(guess)\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    hangman = sys.stdin.readline().strip().lower()\n    alphabet = sys.stdin.readline().strip().lower()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            if all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 11:39:42.130004 size on output set 6
2022-04-16 11:39:42.130022 num operations 1
2022-04-16 11:39:42.130027 size on input set 1
2022-04-16 11:40:05.822473 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN') \n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\ndef f(x):\n    return x + 1\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 3
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[i]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins.\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\nn = int(input())\nprint(n)\n"
    }
  ],
  "created": 1650109182,
  "object": "edit"
}
2022-04-16 11:40:05.822695 NO RESULT
2022-04-16 11:40:05.822703 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 3
}
2022-04-16 11:40:05.822743 fix syntax errors 8 ["#!/usr/bin/python\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN') \n\nmain()\n", '\ndef f(x):\n    return x + 1\n', "\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[i]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n", "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n", "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n", "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins.\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n", '\nn = int(input())\nprint(n)\n']
2022-04-16 11:40:05.822775 size on output set 7
2022-04-16 11:40:05.822785 num operations 1
2022-04-16 11:40:05.822790 size on input set 1
2022-04-16 11:40:12.532475 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\") \n"
    },
    {
      "index": 1,
      "text": "\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\")\n"
    },
    {
      "index": 2,
      "text": "\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"FAIL\")\n"
    },
    {
      "index": 3,
      "text": "\n\nword = input().strip()\nperm = input().strip()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\")\n"
    },
    {
      "index": 4,
      "text": "\n\nword = input()\nperm = input()\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\")\n"
    },
    {
      "index": 5,
      "text": "\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\")\n"
    },
    {
      "index": 6,
      "text": "\nword = input()\nperm = input()\n\nif all(map(lambda x: x in perm, word)):\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    },
    {
      "index": 7,
      "text": "\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\")\n"
    },
    {
      "index": 8,
      "text": "\nword = input()\nperm = input()\n\nprint('WIN' if all(map(lambda x: x in perm, word)) else 'LOSE')\n"
    }
  ],
  "created": 1650109205,
  "object": "edit"
}
2022-04-16 11:40:12.532699 fix syntax errors 9 ['\n\nword = input()\nperm = input()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE") \n', '\nword = input()\nperm = input()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE")\n', '\nword = input()\nperm = input()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "FAIL")\n', '\n\nword = input().strip()\nperm = input().strip()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE")\n', '\n\nword = input()\nperm = input()\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE")\n', '\nword = input()\nperm = input()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE")\n', '\nword = input()\nperm = input()\n\nif all(map(lambda x: x in perm, word)):\n    print("WIN")\nelse:\n    print("LOSE")\n', '\nword = input()\nperm = input()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE")\n', "\nword = input()\nperm = input()\n\nprint('WIN' if all(map(lambda x: x in perm, word)) else 'LOSE')\n"]
2022-04-16 11:40:12.532728 size on output set 7
2022-04-16 11:40:12.532739 num operations 1
2022-04-16 11:40:12.532744 size on input set 1
2022-04-16 11:40:21.673231 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) < len(perm_set):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef is_permutation(word, perm):\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        return False\n    else:\n        return True\n\ndef main():\n    word = input()\n    perm = input()\n    if is_permutation(word, perm):\n        print(\"WIN\")\n    else:\n        print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if word_set > perm_set:\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    word = raw_input()\n    perm = raw_input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    word = raw_input()\n    perm = raw_input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) < len(perm_set):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    print(input())\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        print(\"lose\")\n    else:\n        print(\"win\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    word = input().strip()\n    perm = input().strip()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650109212,
  "object": "edit"
}
2022-04-16 11:40:21.673548 fix syntax errors 9 ['\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) < len(perm_set):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef is_permutation(word, perm):\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        return False\n    else:\n        return True\n\ndef main():\n    word = input()\n    perm = input()\n    if is_permutation(word, perm):\n        print("WIN")\n    else:\n        print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if word_set > perm_set:\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = raw_input()\n    perm = raw_input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = raw_input()\n    perm = raw_input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) < len(perm_set):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    print(input())\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        print("lose")\n    else:\n        print("win")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input().strip()\n    perm = input().strip()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 11:40:21.673597 size on output set 7
2022-04-16 11:40:21.673609 num operations 1
2022-04-16 11:40:21.673614 size on input set 1
2022-04-16 11:40:35.848096 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nword = input()\npermutation = list(input())\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation[:]:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\nword = input()\npermutation = input()\n#\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"
    },
    {
      "index": 2,
      "text": "\nword = input().strip()\npermutation = input().strip()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')                \n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')            \n            break\n"
    },
    {
      "index": 3,
      "text": "\n\n# word = input()\n# permutation = input()\nword = 'apple'\npermutation = 'pplea'\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                exit()\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            exit()\n"
    },
    {
      "index": 4,
      "text": "\nword = input()\npermutation = input()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"
    },
    {
      "index": 5,
      "text": "import sys\n\nword = input()\npermutation = input()\nif len(word) == len(permutation):\n    word_dict = {}\n    for letter in word:\n        if letter not in word_dict:\n            word_dict[letter] = 1\n        else:\n            word_dict[letter] += 1\n    guesses_left = 10\n    for letter in permutation:\n        if letter in word_dict:\n            word_dict[letter] -= 1\n            if word_dict[letter] == 0:\n                word_dict.pop(letter)\n                if len(word_dict) == 0:\n                    print('WIN')\n                    sys.exit()\n        else:\n            guesses_left -= 1\n            if guesses_left == 0:\n                print('LOSE')\n                sys.exit()\nelse:\n    print('LOSE')\n"
    },
    {
      "index": 6,
      "text": "\n\nword = input()\npermutation = input()\n\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"
    },
    {
      "index": 7,
      "text": "\n\nword = input().upper()\npermutation = input().upper()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n        else:\n            print('CONTINUE')\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"
    },
    {
      "index": 8,
      "text": "\n\nword = input()\npermutation = input()\nprint(word)\nprint(permutation)\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"
    }
  ],
  "created": 1650109221,
  "object": "edit"
}
2022-04-16 11:40:35.848387 fix syntax errors 9 ["\nword = input()\npermutation = list(input())\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation[:]:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n", "\n\nword = input()\npermutation = input()\n#\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n", "\nword = input().strip()\npermutation = input().strip()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')                \n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')            \n            break\n", "\n\n# word = input()\n# permutation = input()\nword = 'apple'\npermutation = 'pplea'\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                exit()\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            exit()\n", "\nword = input()\npermutation = input()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n", "import sys\n\nword = input()\npermutation = input()\nif len(word) == len(permutation):\n    word_dict = {}\n    for letter in word:\n        if letter not in word_dict:\n            word_dict[letter] = 1\n        else:\n            word_dict[letter] += 1\n    guesses_left = 10\n    for letter in permutation:\n        if letter in word_dict:\n            word_dict[letter] -= 1\n            if word_dict[letter] == 0:\n                word_dict.pop(letter)\n                if len(word_dict) == 0:\n                    print('WIN')\n                    sys.exit()\n        else:\n            guesses_left -= 1\n            if guesses_left == 0:\n                print('LOSE')\n                sys.exit()\nelse:\n    print('LOSE')\n", "\n\nword = input()\npermutation = input()\n\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n", "\n\nword = input().upper()\npermutation = input().upper()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n        else:\n            print('CONTINUE')\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n", "\n\nword = input()\npermutation = input()\nprint(word)\nprint(permutation)\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"]
2022-04-16 11:40:35.848453 size on output set 9
2022-04-16 11:40:35.848465 num operations 1
2022-04-16 11:40:35.848470 size on input set 1
2022-04-16 11:40:46.258852 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport random\n\nword = str(input())\npermutation = str(input())\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in permutation:\n        if letter not in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in word:\n        if letter in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"LOSE\")\nelif is_lose(word, permutation):\n    print(\"WIN\")\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"WIN\")\nelif is_lose(word, permutation):\n    print(\"LOSE\")\n"
    },
    {
      "index": 2,
      "text": "\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return \"WIN\"\n    return \"LOSE\"\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return \"LOSE\"\n    return \"WIN\"\n\n# Print result\nprint(is_win(word, permutation))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nimport random\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(sys.argv[1], sys.argv[2]):\n    print(\"WIN\")\nelif is_lose(sys.argv[1], sys.argv[2]):\n    print(\"LOSE\")\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"WIN\")\nelif is_lose(word, permutation):\n    print(\"LOSE\")\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"WIN\")\nelif is_lose(word, permutation):\n    print(\"LOSE\")\n"
    },
    {
      "index": 6,
      "text": "\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"WIN\")\nelif is_lose(word, permutation):\n    print(\"LOSE\")\n"
    },
    {
      "index": 7,
      "text": "\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"WIN\")\nelif is_lose(word, permutation):\n    print(\"LOSE\")\n"
    },
    {
      "index": 8,
      "text": "import sys\n\n\nword = sys.argv[1]\npermutation = sys.argv[2]\n\nprint(word)\nprint(permutation)\n"
    }
  ],
  "created": 1650109235,
  "object": "edit"
}
2022-04-16 11:40:46.259187 fix syntax errors 9 ['\nimport sys\nimport random\n\nword = str(input())\npermutation = str(input())\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in permutation:\n        if letter not in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in word:\n        if letter in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("LOSE")\nelif is_lose(word, permutation):\n    print("WIN")\n', '\nimport sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("WIN")\nelif is_lose(word, permutation):\n    print("LOSE")\n', '\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return "WIN"\n    return "LOSE"\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return "LOSE"\n    return "WIN"\n\n# Print result\nprint(is_win(word, permutation))\n', '\nimport sys\nimport random\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(sys.argv[1], sys.argv[2]):\n    print("WIN")\nelif is_lose(sys.argv[1], sys.argv[2]):\n    print("LOSE")\n', '\n\nimport sys\n\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("WIN")\nelif is_lose(word, permutation):\n    print("LOSE")\n', '\nimport sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("WIN")\nelif is_lose(word, permutation):\n    print("LOSE")\n', '\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("WIN")\nelif is_lose(word, permutation):\n    print("LOSE")\n', '\n\nword = input()\npermutation = input()\n\n# Check if Ned wins\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("WIN")\nelif is_lose(word, permutation):\n    print("LOSE")\n', 'import sys\n\n\nword = sys.argv[1]\npermutation = sys.argv[2]\n\nprint(word)\nprint(permutation)\n']
2022-04-16 11:40:46.259250 size on output set 7
2022-04-16 11:40:46.259261 num operations 1
2022-04-16 11:40:46.259266 size on input set 1
2022-04-16 11:40:57.607970 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input()\nperm = input()\n\n# word = \"HANGMAN\"\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\n\nprint(\"WIN\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# word = input()\n# perm = input()\n\nword = \"HANGMAN\"\nperm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 2,
      "text": "\n\nword = input()\nperm = input()\n\n# word = \"HANGMAN\"\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 3,
      "text": "\n\nword = input()\nperm = input()\n# word = \"HANGMAN\"\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n}\n\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        exit()\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 4,
      "text": "\nword = input()\nperm = input()\n\n# word = \"HANGMAN\"\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 5,
      "text": "\nword = input()\nperm = input()\n\n# word = \"HANGMAN\"\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 6,
      "text": "\n\nword = input()\nperm = input()\n\n# word = \"HANGMAN\"\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0, \"B\": 0, \"C\": 0, \"D\": 0, \"E\": 0, \"F\": 0, \"G\": 0, \"H\": 0, \"I\": 0, \"J\": 0, \"K\": 0, \"L\": 0, \"M\": 0, \"N\": 0, \"O\": 0, \"P\": 0, \"Q\": 0, \"R\": 0, \"S\": 0, \"T\": 0, \"U\": 0, \"V\": 0, \"W\": 0, \"X\": 0, \"Y\": 0, \"Z\": 0,\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 7,
      "text": "\nword = input()\nperm = input()\n\n# word = \"HANGMAN\"\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 8,
      "text": "\nword = input()\nperm = input()\n\n# word = \"HANGMAN\"\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    }
  ],
  "created": 1650109246,
  "object": "edit"
}
2022-04-16 11:40:57.608285 fix syntax errors 9 ['\n\nword = input()\nperm = input()\n\n# word = "HANGMAN"\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\n\nprint("WIN")\n', '\n\n# word = input()\n# perm = input()\n\nword = "HANGMAN"\nperm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n', '\n\nword = input()\nperm = input()\n\n# word = "HANGMAN"\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n', '\n\nword = input()\nperm = input()\n# word = "HANGMAN"\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n}\n\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        exit()\nelse:\n    print("WIN")\n', '\nword = input()\nperm = input()\n\n# word = "HANGMAN"\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n', '\nword = input()\nperm = input()\n\n# word = "HANGMAN"\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n', '\n\nword = input()\nperm = input()\n\n# word = "HANGMAN"\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0, "B": 0, "C": 0, "D": 0, "E": 0, "F": 0, "G": 0, "H": 0, "I": 0, "J": 0, "K": 0, "L": 0, "M": 0, "N": 0, "O": 0, "P": 0, "Q": 0, "R": 0, "S": 0, "T": 0, "U": 0, "V": 0, "W": 0, "X": 0, "Y": 0, "Z": 0,\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n', '\nword = input()\nperm = input()\n\n# word = "HANGMAN"\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n', '\nword = input()\nperm = input()\n\n# word = "HANGMAN"\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n']
2022-04-16 11:40:57.608348 size on output set 7
