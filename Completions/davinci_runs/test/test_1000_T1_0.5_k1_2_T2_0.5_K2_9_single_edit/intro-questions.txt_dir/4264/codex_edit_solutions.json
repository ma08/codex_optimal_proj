["\nN = int(input())\n\ncount = 0\nfor i in range(1, N+1):\n    count += len(str(i)) % 2\n\nprint(count)\n", "import sys\nimport math\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\n\nN = int(input())\nA = NLI()\nprint(A)\n", "\nN = int(input())\n\nodd_count = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 == 1:  # \u5076\u6570\u306e\u5834\u5408\u306f\u30010\u306b\u306a\u308b\n        odd_count += 1\n\nprint(odd_count)\n", "\nprint(\"hello\")\n", "\n\nN, M = map(int, input().split())\n\nl = []\nfor i in range(N):\n    l.append(list(map(int, input().split())))\n\nans = 0\nfor i in range(N):\n    for j in range(M):\n        if l[i][j] == 1:\n            continue\n        if i == 0:\n            if j == 0:\n                ans = max(ans, l[i][j+1] + l[i+1][j])\n            elif j == M-1:\n                ans = max(ans, l[i][j-1] + l[i+1][j])\n            else:\n                ans = max(ans, l[i][j-1] + l[i+1][j] + l[i][j+1])\n        elif i == N-1:\n            if j == 0:\n                ans = max(ans, l[i][j+1] + l[i-1][j])\n            elif j == M-1:\n                ans = max(ans, l[i][j-1] + l[i-1][j])\n            else:\n                ans = max(ans, l[i][j-1] + l[i-1][j] + l[i][j+1])\n        else:\n            if j == 0:\n                ans = max(ans, l[i][j+1] + l[i-1][j] + l[i+1][j])\n            elif j == M-1:\n                ans = max(ans, l[i][j-1] + l[i-1][j] + l[i+1][j])\n            else:\n                ans = max(ans, l[i][j-1] + l[i-1][j] + l[i+1][j] + l[i][j+1])\n\nprint(ans)\n", "\nN = int(input())\n\nodd_count = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 == 1:\n        odd_count += 1\n\nprint(odd_count)\n", "\n\nN = int(input())\n\nodd_count = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 == 1:\n        odd_count += 1\n\n\nprint(odd_count)\n", "\n#\n# N = int(input())\n#\n# count = 0\n# for i in range(1, N+1):\n#     count += len(str(i)) % 2\n#\n# print(count)\n", "\na, b = map(int, input().split())\nprint(a * b)\n", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nimport pandas as pd\n\n\n# In[2]:\n\n\nimport numpy as np\n\n\n# In[3]:\n\n\nimport matplotlib.pyplot as plt\n\n\n# In[4]:\n\n\nimport seaborn as sns\n\n\n# In[5]:\n\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[6]:\n\n\ndf = pd.read_csv('kyphosis.csv')\n\n\n# In[7]:\n\n\ndf.head()\n\n\n# In[8]:\n\n\ndf.info()\n\n\n# In[9]:\n\n\ndf.describe()\n\n\n# In[10]:\n\n\nsns.pairplot(df,hue='Kyphosis',palette='Set1')\n\n\n# In[11]:\n\n\nfrom sklearn.cross_validation import train_test_split\n\n\n# In[12]:\n\n\nX = df.drop('Kyphosis',axis=1)\n\n\n# In[13]:\n\n\ny = df['Kyphosis']\n\n\n# In[14]:\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\n\n# In[15]:\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\n\n# In[16]:\n\n\ndtree = DecisionTreeClassifier()\n\n\n# In[17]:\n\n\ndtree.fit(X_train,y_train)\n\n\n# In[18]:\n\n\npredictions = dtree.predict(X_test)\n\n\n# In[19]:\n\n\nfrom sklearn.metrics import classification_report,confusion_matrix\n\n\n# In[20]:\n\n\nprint(classification_report(y_test,predictions))\n\n\n# In[21]:\n\n\nprint(confusion_matrix(y_test,predictions))\n\n\n# In[22]:\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n# In[23]:\n\n\nrfc = RandomForestClassifier(n_estimators=200)\n\n\n# In[24]:\n\n\nrfc.fit(X_train, y_train)\n\n\n# In[25]:\n\n\nrfc_pred = rfc.predict(X_test)\n\n\n# In[26]:\n\n\nprint(classification_report(y_test,rfc_pred))\n\n\n# In[27]:\n\n\nprint(confusion_matrix(y_test,rfc_pred))\n\n\n# In[ ]:\n\n\n\n\n\n\nN = int(input())\n\ncount = 0\nfor i in range(1, N+1):\n    count += len(str(i)) % 2\n\nprint(count)\n"]