["\n\nimport sys\n\ndef main(argv):\n    N, C = map(int, sys.stdin.readline().split())\n    weights = map(int, sys.stdin.readline().split())\n    weights.sort()\n    eaten = 0\n    for i in range(N):\n        if weights[i] <= C:\n            C -= weights[i]\n            eaten += 1\n    print eaten\n\nmain(sys.argv)\n", "def main():\n    n = int(input())\n    for i in range(n):\n        line = input()\n        print(line)\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\n# create a set of unique fruits\nunique_fruits = set() \n\n# iterate over the fruits\nfor fruit in fruits:\n    # if the fruit is not in the set and we have enough capacity\n    # add the fruit to the set\n    if fruit not in unique_fruits and c - fruit >= 0:\n        unique_fruits.add(fruit)\n        c -= fruit\n\n# print the number of unique fruits\nprint(len(unique_fruits))\n", "#!/usr/bin/env python\n#-*- coding: utf-8 -*-\n#\n# Ailurus - make Linux easier to use\n#\n# Copyright (C) 2007-2010, Trusted Digital Technology Laboratory, Shanghai Jiao Tong University, China.\n# Copyright (C) 2009-2010, Ailurus Developers Team\n#\n# Ailurus is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# Ailurus is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ailurus; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA\n\n", "\n\n# -----main-----\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\neaten = set()\ncur_sum = 0\nfor fruit in fruits:\n    if fruit + cur_sum <= c and fruit not in eaten:\n        eaten.add(fruit)\n        cur_sum += fruit\n\nprint(len(eaten))\n", "\n\nN, C = map(int, input().split())\n#N, C = 5, 5\nw = list(map(int, input().split()))\n#w = [3, 1, 2, 1, 1]\n\ncount = 0\n\nwhile C > 0:\n    if w[count] <= C:\n        C -= w[count]\n        count += 1\n    else:\n        break\n\nprint(count)\n", "\nfrom sys import stdin\nfrom collections import deque\nn, c = map(int, stdin.readline().split())\nweights = deque(map(int, stdin.readline().split()))\neaten = set()\nwhile weights and c >= weights[0]:\n    c -= weights.popleft()\n    eaten.add(c)\n\nprint(len(eaten))\n", "\n\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\n# create a set of unique fruits\nunique_fruits = set()\n\n# iterate over the fruits\nfor fruit in fruits:\n    # if the fruit is not in the set and we have enough capacity\n    # add the fruit to the set\n    if fruit not in unique_fruits and c - fruit >= 0:\n        unique_fruits.add(fruit)\n        c -= fruit\n\n# print the number of unique fruits\n\n\n# cook your dish here\n\n\nN, M, K = map(int, input().split())\n\n\ndef check_validity(arr, n, m, k):\n    for i in range(n):\n        for j in range(m):\n            if not (arr[i][j] == 1 or arr[i][j] == 0):\n                return False\n    if k > m * n:\n        return False\n    return True\n\n\ndef is_safe(i, j, arr, n, m, k):\n    if i < 0 or i > n - 1 or j < 0 or j > m - 1:\n        return False\n    if arr[i][j] == 0:\n        return True\n    return False\n\n\ndef get_count(arr, i, j, n, m, k):\n    if k == 0:\n        return 0\n    count = 0\n    if is_safe(i, j, arr, n, m, k):\n        arr[i][j] = 1\n        count = 1 + get_count(arr, i + 1, j, n, m, k - 1) + \\\n            get_count(arr, i - 1, j, n, m, k - 1) + \\\n            get_count(arr, i, j + 1, n, m, k - 1) + \\\n            get_count(arr, i, j - 1, n, m, k - 1)\n        arr[i][j] = 0\n    return count\n\n\ndef no_of_ways(arr, n, m, k):\n    if not check_validity(arr, n, m, k):\n        return 0\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count += get_count(arr, i, j, n, m, k)\n    return count\n\n\narr = []\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\nprint(no_of_ways(arr, N, M, K))\nprint(len(unique_fruits))\n", "\n#-----main-----\ndef test():\n    print('test')\n", "\n\ndef main():\n    n, c = map(int, input().split())  # n = \u679c\u7269\u306e\u6570, c = \u5bb9\u91cf\n    w = list(map(int, input().split()))  # w = \u679c\u7269\u306e\u91cd\u3055\n    fruits = sorted(w)  # \u679c\u7269\u3092\u91cd\u3055\u3067\u6607\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\n\n    i = 0\n    total = 0\n    while i < n:  # \u5bb9\u91cf\u5185\u3067\u53ce\u7d0d\u3067\u304d\u308b\u3060\u3051\u5165\u308c\u308b\n        if total + fruits[i] <= c:\n            total += fruits[i]\n            i += 1\n        else:\n            break\n\n    print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, c = map(int, input().split())\n    fruits = [int(x) for x in input().split()]\n    eaten = 0\n    for i in range(n):\n        if fruits[i] <= c:\n            c -= fruits[i]\n            eaten += 1\n    print(eaten)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "#-----main-----\ndef get_fruits_count(fruits, c):\n    eaten = set()\n    cur_sum = 0\n    for fruit in fruits:\n        if fruit + cur_sum <= c and fruit not in eaten:\n            eaten.add(fruit)\n            cur_sum += fruit\n\n\n#-----main-----\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\neaten = set()\ncur_sum = 0\nfor fruit in fruits:\n    if fruit + cur_sum <= c and fruit not in eaten:\n        eaten.add(fruit)\n        cur_sum += fruit\n\nprint(len(eaten))\n", "\ndef main():\n    n, c = map(int, input().split())\n    w = list(map(int, input().split()))\n    fruits = sorted(w)\n\n    i = 0\n    total = 0\n    while i < n:\n        if total + fruits[i] <= c:\n            total += fruits[i]\n            i += 1\n        else:\n            break\n\n    print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "from sys import stdin\nfrom collections import deque\nn, c = map(int, stdin.readline().split())\nweights = deque(map(int, stdin.readline().split()))\neaten = set()\nwhile weights and c >= weights[0]:\n    c -= weights.popleft()\n    eaten.add(c)\nprint(len(eaten))\n", "\n\nn, c = map(int, input().split())  # number of fruits and capacity\nfruits = list(map(int, input().split()))  # fruits\n\n# create a set of unique fruits\nunique_fruits = set()\n\n# iterate over the fruits\nfor fruit in fruits:\n    # if the fruit is not in the set and we have enough capacity add the fruit to the set\n    if fruit not in unique_fruits and c - fruit >= 0:\n        unique_fruits.add(fruit)\n        c -= fruit\n\n# print the number of unique fruits\nprint(len(unique_fruits))\n", "\n\nn, c = map(int, input().split())\nw = list(map(int, input().split()))\n\neaten = 0\ncurr = 0\nw.sort()\n\nfor i in w:\n    if curr + i <= c:\n        curr += i\n        eaten += 1\n\nprint(eaten)\n", "\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\n# create a set of unique fruits\nunique_fruits = set()\n\n# iterate over the fruits and add unique fruits to the set\nfor fruit in fruits:\n    if fruit not in unique_fruits and c - fruit >= 0:\n        unique_fruits.add(fruit)\n        c -= fruit\n\n# print the number of unique fruits\nprint(len(unique_fruits))\n", "\n\nN, C = map(int, input().split())\n# N, C = 5, 5\nw = list(map(int, input().split()))\n# w = [3, 1, 2, 1, 1]\n\ncount = 0\n\nwhile C > 0:\n    if w[count] <= C:\n        C -= w[count]\n        count += 1\n    else:\n        break\n\nprint(count)\n", "\n\n\ndef find_max_sum(arr):\n    max_so_far = 0\n    max_ending_here = 0\n\n    for i in range(0, len(arr)):\n        max_ending_here = max_ending_here + arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n        # Do not compare for all elements. Compare only\n        # when max_ending_here > 0\n        elif (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n\n    return max_so_far\n\n\n# Driver function to check the above function\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\n\nprint(find_max_sum(arr))\n", "\nn = int(input())\nfor i in range(1, n + 1):\n    print(i)\n", "\n\ndef main():\n    n, c = map(int, input().split())  # n, c = 5, 10\n    w = list(map(int, input().split()))  # w = [1, 2, 3, 4, 5]\n    fruits = sorted(w)  # fruits = [1, 2, 3, 4, 5]\n\n    i = 0  # i = 0\n    total = 0  # total = 0\n    while i < n:\n        if total + fruits[i] <= c:  # total + fruits[0] = 1 <= 10\n            total += fruits[i]  # total = 1\n            i += 1  # i = 1\n        else:  # total + fruits[1] = 3 <= 10\n            break  # total = 3\n\n    print(i)  # print(2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#N, C = map(int, input().split())\nN, C = 5, 10\n#w = list(map(int, input().split()))\nw = [3, 1, 2, 1, 1]\n\ncount = 0\n\nwhile C > 0:\n    if w[count] <= C:\n        C -= w[count]\n        count += 1\n    else:\n        break\n\nprint(count)\n", "#-----input-----\n# 3 7\n# 3 4 2\n\n#-----main-----\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\neaten = set()\ncur_sum = 0\nfor fruit in fruits:\n    if fruit + cur_sum <= c and fruit not in eaten:\n        eaten.add(fruit)\n        cur_sum += fruit\nprint(len(eaten))\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, c = map(int, stdin.readline().split())\nweights = deque(map(int, stdin.readline().split()))\n\neaten = set()\nwhile weights and c >= weights[0]:\n    c -= weights.popleft()\n    eaten.add(c) \n\nprint(len(eaten))\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, c = map(int, stdin.readline().split())\nweights = deque(map(int, stdin.readline().split()))\n\neaten = set()\nwhile weights and c >= weights[0]:\n    c -= weights.popleft()\n    eaten.add(len(weights))\n\nprint(len(eaten))\n", "\ndef main():\n    n, c = map(int, input().split())\n    w = list(map(int, input().split()))\n    fruits = sorted(w)\n\n    i = 0\n    total = 0\n    while i < n:\n        if total + fruits[i] <= c:\n            total += fruits[i]\n            i += 1\n\n        else:\n            break\n\n    print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, c = map(int, input().split())\nw = list(map(int, input().split()))\n\neaten = 0\ncurr = 0\nw.sort(reverse=True)\n\nfor x in w:\n    if curr + x <= c:\n        curr += x\n        eaten += 1\n\nprint(eaten)\n", "\n\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\n# create a set of unique fruits and a count\nunique_fruits = set() \nfruits_count = 0\n\n# iterate over the fruits\nfor fruit in fruits:\n    # if the fruit is not in the set and we have enough capacity\n    # add the fruit to the set\n    if fruit not in unique_fruits and c - fruit >= 0:\n        unique_fruits.add(fruit)\n        fruits_count += 1\n        c -= fruit\n\n# print the number of unique fruits\nprint(fruits_count)\n", "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().split())\n    weights = map(int, sys.stdin.readline().split())\n    weights.sort()\n    eaten = 0\n    for i in range(N):\n        if weights[i] <= C:\n            C -= weights[i]\n            eaten += 1\n    print eaten\n\nmain()\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, c = map(int, stdin.readline().strip().split())\nweights = deque(map(int, stdin.readline().strip().split()))\n\neaten = set()\nwhile weights and c >= weights[0]:\n    c -= weights.popleft()\n    eaten.add(c)\n\nprint(len(eaten))\n", "\n\ndef main():\n    n, c = map(int, input().split()) \n    w = list(map(int, input().split()))\n    fruits = sorted(w)\n\n    i = 0\n    total = 0\n    while i < n:\n        if total + fruits[i] <= c:\n            total += fruits[i]\n            i += 1\n        else:\n            break\n\n    print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom sys import stdin\nfrom collections import deque\n\nn, c = map(int, stdin.readline().split())\nweights = deque(map(int, stdin.readline().split()))\n\neaten = set()\nwhile weights and c >= weights[0]:\n    c -= weights.popleft()\n    eaten.add(c)\n\nprint(len(eaten))\n", "\n#N, C = map(int, input().split())\nN, C = 5, 5\n#w = list(map(int, input().split()))\nw = [3, 1, 2, 1, 1]\n\ncount = 0\n\nwhile C > 0:\n    if w[count] <= C:\n        C -= w[count]\n        count += 1\n    else:\n        break\n\nprint(count)\n", "\n#\n# from sys import stdin\n# from collections import deque\n#\n# n, c = map(int, stdin.readline().split())\n# weights = deque(map(int, stdin.readline().split()))\n#\n# eaten = set()\n# while weights and c >= weights[0]:\n#     c -= weights.popleft()\n#     eaten.add(c)\n#\n# print(len(eaten))\n", "\n\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\n# create a set of unique fruits\nunique_fruits = set()\n\n# iterate over the fruits\nfor fruit in fruits:\n    # if we have enough capacity\n    if c - fruit >= 0:\n        # if the fruit is not in the set\n        # add the fruit to the set\n        if fruit not in unique_fruits:\n            unique_fruits.add(fruit)\n            c -= fruit\n\n# print the number of unique fruits\nprint(len(unique_fruits))\n", "n, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\n# create a set of unique fruits\nunique_fruits = set()\n\n# iterate over the fruits\nfor fruit in fruits:\n    # if the fruit is not in the set and we have enough capacity\n    # add the fruit to the set\n    if fruit not in unique_fruits and c - fruit >= 0:\n        unique_fruits.add(fruit)\n        c -= fruit\n\n# print the number of unique fruits\nprint(len(unique_fruits))\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n\n    i = 0\n    total = 0\n    while i < n:\n        if total + a[i] <= k:\n            total += a[i]\n            i += 1\n        else:\n            break\n\n    print(i + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nN, C = map(int, input().split())\nw = list(map(int, input().split()))\n\ncount = 0\n\nwhile C > 0:\n    if w[count] <= C:\n        C -= w[count]\n        count += 1\n    else:\n        break\n\nprint(count)\n", "\n#N, C = map(int, input().split())\nN, C = 5, 10\n#w = list(map(int, input().split()))\nw = [5, 1, 2, 1, 1]\n\ncount = 0\n\nwhile C > 0:\n    if w[count] <= C:\n        C -= w[count]\n        count += 1\n    else:\n        break\n\nprint(count)\n", "import sys\n\ndef main():\n    n, c = map(int, input().split())\n    fruits = [int(x) for x in input().split()]\n    eaten = 0\n    for i in range(n):\n        if fruits[i] <= c:\n            c -= fruits[i]\n            eaten += 1\n    print(eaten)\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n", "\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\neaten = set()\ncur_sum = 0\nfor fruit in fruits:\n    if fruit + cur_sum <= c and fruit not in eaten:\n        eaten.add(fruit)\n        cur_sum += fruit\n\nprint(len(eaten))\n", "\n\ndef main():\n    n, y = map(int, input().split())\n\n    for i in range(n + 1):\n        for j in range(n + 1):\n            k = n - i - j\n\n            if k < 0:\n                continue\n\n            total = 10000 * i + 5000 * j + 1000 * k\n\n            if total == y:\n                print(i, j, k)\n                return\n\n    print(-1, -1, -1)\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint(\"Hello World\")\n", "\n\ndef main():\n    n, c = map(int, input().split())  # input format: n c\n    fruits = [int(x) for x in input().split()]  # input format: fruit1 fruit2 fruit3 ...\n    eaten = 0\n    for i in range(n):\n        if fruits[i] <= c:\n            c -= fruits[i]\n            eaten += 1\n    print(eaten)\n\nif __name__ == \"__main__\":\n    main()\n", "\n#-----main-----\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\neaten = set()\ncur_sum = 0\nfor fruit in fruits:\n    if fruit + cur_sum <= c and fruit not in eaten:\n        eaten.add(fruit)\n        cur_sum += fruit\n\nprint(len(eaten))\n", "import sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().split())\n    weights = map(int, sys.stdin.readline().split())\n    weights.sort()\n    eaten = 0\n    for i in range(N):\n        if weights[i] <= C:\n            C -= weights[i]\n            eaten += 1\n    print eaten\n\nmain()\n", "\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\n# create a set of unique fruits\nunique_fruits = set()\n\n# iterate over the fruits\nfor fruit in fruits:\n    # if the fruit is not in the set and we have enough capacity\n    # add the fruit to the set\n    if fruit not in unique_fruits and c - fruit >= 0:\n        unique_fruits.add(fruit)\n        c -= fruit\n\n# print the number of unique fruits\nprint(len(unique_fruits))\n", "\n\ndef main():\n    n, c = map(int, input().split())  # \u884c\u6570\u3001\u5bb9\u91cf\n    w = list(map(int, input().split()))  # \u5404\u5546\u54c1\u306e\u91cd\u3055\n    fruits = sorted(w)  # \u91cd\u3055\u306e\u6607\u9806\u30bd\u30fc\u30c8\n\n    i = 0\n    total = 0\n    while i < n:\n        if total + fruits[i] <= c:  # \u5bb9\u91cf\u5185\u306b\u53ce\u307e\u308b\u306a\u3089\u8a70\u3081\u308b\n            total += fruits[i]\n            i += 1\n        else:  # \u53ce\u307e\u3089\u306a\u3044\u306a\u3089\u7d42\u4e86\n            break\n\n    print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, c = map(int, input().split())\nw = list(map(int, input().split()))\n\neaten = 0\ncurr = 0\nw.sort()\n\nfor x in w:\n    if curr + x <= c:\n        curr += x\n        eaten += 1\n\nprint(eaten)\n", "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().split())\n    weights = list(map(int, sys.stdin.readline().split()))\n    weights.sort()\n    eaten = 0\n    for i in range(N):\n        if weights[i] <= C:\n            C -= weights[i]\n            eaten += 1\n    print eaten\n\nmain()\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n\n    i = 0\n    total = 0\n    while i < n:\n        if total + a[i] <= k:\n            total += a[i]\n            i += 1\n        else:\n            break\n\n    print(i)\n\nif __name__ == \"__main__\":\n    main()\n"]