2022-04-16 09:53:09.800509 num operations 1
2022-04-16 09:53:09.800525 size on input set 1
2022-04-16 09:53:23.862609 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    l = int(input('Enter the length of the melody: '))\n    melody1 = input('Enter the first melody: ').split()\n    melody2 = input('Enter the second melody: ').split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 12:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n    \nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    return melody1[0] == melody2[0] or (melody1[0] == 'C' and melody2[0] == 'B') or (melody1[0] == 'B' and melody2[0] == 'C')\n\ndef retrograde(melody1, melody2):\n    return melody1 == melody2[::-1]\n\ndef inversion(melody1, melody2):\n    return melody1[0] == melody2[0] and all(notes.index(melody1[i]) + notes.index(melody2[i]) == 11 for i in range(1, len(melody1)))\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B': \n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0] or (melody1[0] == 'C' and melody2[0] == 'B') or (melody1[0] == 'B' and melody2[0] == 'C'):\n        return True\n    return False\n\ndef retrograde(melody1, melody2):\n    return melody1 == melody2[::-1]\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]: return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n            return False\n    return False\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n            return False\n    return True    \n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650102789,
  "object": "edit"
}
2022-04-16 09:53:23.863051 fix syntax errors 9 ["\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    l = int(input('Enter the length of the melody: '))\n    melody1 = input('Enter the first melody: ').split()\n    melody2 = input('Enter the second melody: ').split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n", "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 12:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n", "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n", "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n", "\n    \nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    return melody1[0] == melody2[0] or (melody1[0] == 'C' and melody2[0] == 'B') or (melody1[0] == 'B' and melody2[0] == 'C')\n\ndef retrograde(melody1, melody2):\n    return melody1 == melody2[::-1]\n\ndef inversion(melody1, melody2):\n    return melody1[0] == melody2[0] and all(notes.index(melody1[i]) + notes.index(melody2[i]) == 11 for i in range(1, len(melody1)))\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n", "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B': \n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n", "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0] or (melody1[0] == 'C' and melody2[0] == 'B') or (melody1[0] == 'B' and melody2[0] == 'C'):\n        return True\n    return False\n\ndef retrograde(melody1, melody2):\n    return melody1 == melody2[::-1]\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]: return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n            return False\n    return False\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n", "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n            return False\n    return True    \n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n", "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    if melody1[0] == melody2[0]:\n        return True\n    elif melody1[0] == 'C' and melody2[0] == 'B':\n        return True\n    elif melody1[0] == 'B' and melody2[0] == 'C':\n        return True\n    else:\n        return False\n\ndef retrograde(melody1, melody2):\n    if melody1 == melody2[::-1]:\n        return True\n    else:\n        return False\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    else:\n        for i in range(1, len(melody1)):\n            if notes.index(melody1[i]) + notes.index(melody2[i]) != 11:\n                return False\n    return True\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print('Transposition')\n    elif retrograde(melody1, melody2):\n        print('Retrograde')\n    elif inversion(melody1, melody2):\n        print('Inversion')\n    else:\n        print('Nonsense')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 09:53:23.863165 size on output set 9
2022-04-16 09:53:23.863175 num operations 1
2022-04-16 09:53:23.863180 size on input set 1
2022-04-16 09:53:50.047839 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1) - 1):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1) - 1):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    },
    {
      "index": 1,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - 1 - i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2) \n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    },
    {
      "index": 3,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)-1):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)-1):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    },
    {
      "index": 4,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - 1 - i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) \\\n        and not isRetrograde(melody1, melody2) \\\n        and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    },
    {
      "index": 5,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\n\nmelody1 = input().split()\nmelody2 = input().split()\n\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    },
    {
      "index": 6,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1) \ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    },
    {
      "index": 7,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i] and melody1[i] != 'R' and melody2[i] != 'R':\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i] and melody1[i] != 'R' and melody2[i] != 'R':\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i] and melody1[i] != 'R' and melody2[i] != 'R':\n            # check for inversion about first note\n            if melody1[0] != melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k] and melody1[k] != 'R' and melody2[k] != 'R':\n                        if melody1[0] != melody2[0]:\n                            if melody1[k] != melody2[k + distance] and melody1[k] != 'R' and melody2[k + distance] != 'R':\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    },
    {
      "index": 8,
      "text": "\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    if len(melody1) == len(melody2):\n        for i in range(len(melody1)):\n            if melody1[i] != melody2[i]:\n                return False\n        return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print(\"Transposition\")\nelif isRetrograde(melody1, melody2):\n    print(\"Retrograde\")\nelif isInversion(melody1, melody2):\n    print(\"Inversion\")\nelse:\n    print(\"Nonsense\")\n\n# 2)\n# 3)\n"
    }
  ],
  "created": 1650102803,
  "object": "edit"
}
2022-04-16 09:53:50.048230 NO RESULT
2022-04-16 09:53:50.048239 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-16 09:53:50.048357 fix syntax errors 8 ['\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1) - 1):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1) - 1):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n', '\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - 1 - i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2) \n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n', '\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)-1):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)-1):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n', '\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - 1 - i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) \\\n        and not isRetrograde(melody1, melody2) \\\n        and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n', '\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\n\nmelody1 = input().split()\nmelody2 = input().split()\n\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n', '\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1) \ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n', '\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i] and melody1[i] != \'R\' and melody2[i] != \'R\':\n            return False\n    return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i] and melody1[i] != \'R\' and melody2[i] != \'R\':\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i] and melody1[i] != \'R\' and melody2[i] != \'R\':\n            # check for inversion about first note\n            if melody1[0] != melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k] and melody1[k] != \'R\' and melody2[k] != \'R\':\n                        if melody1[0] != melody2[0]:\n                            if melody1[k] != melody2[k + distance] and melody1[k] != \'R\' and melody2[k + distance] != \'R\':\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n', '\n\n# NOTES:\n# 1)\n# 2)\n# 3)\n\n# SOLUTIONS:\n# 1)\ndef isTransposition(melody1, melody2):\n    if len(melody1) == len(melody2):\n        for i in range(len(melody1)):\n            if melody1[i] != melody2[i]:\n                return False\n        return True\n\ndef isRetrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2)-1-i]:\n            return False\n    return True\n\ndef isInversion(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            # check for inversion about first note\n            if melody1[0] == melody2[0]:\n                return False\n            else:\n                # find the distance between the first note and the current note\n                distance = 0\n                for j in range(len(melody1)):\n                    if melody1[j] == melody1[0]:\n                        break\n                    distance += 1\n                # check for inversion about the first note\n                for k in range(len(melody1)):\n                    if melody1[k] != melody2[k]:\n                        if melody1[0] == melody2[0]:\n                            if melody1[k] != melody2[k + distance]:\n                                return False\n                        else:\n                            return False\n    return True\n\ndef isNonsense(melody1, melody2):\n    return not isTransposition(melody1, melody2) and not isRetrograde(melody1, melody2) and not isInversion(melody1, melody2)\n\nmelody1 = input().split()\nmelody2 = input().split()\nif isTransposition(melody1, melody2):\n    print("Transposition")\nelif isRetrograde(melody1, melody2):\n    print("Retrograde")\nelif isInversion(melody1, melody2):\n    print("Inversion")\nelse:\n    print("Nonsense")\n\n# 2)\n# 3)\n']
2022-04-16 09:53:50.048511 size on output set 8
2022-04-16 09:53:50.048522 num operations 1
2022-04-16 09:53:50.048528 size on input set 1
2022-04-16 09:54:23.599564 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#\n# def is_transposition(m1, m2):\n#     # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n#     # A transposition is only possible if the number of notes in m1 and m2 are the same\n#     if len(m1) != len(m2):\n#         return False\n#     for i in range(len(m1)):\n#         if m1[i] != m2[(i + 1) % len(m1)]:\n#             return False\n#     return True\n#\n# def is_retrograde(m1, m2):\n#     # m1 is a retrograde of m2 if m2 is the reverse of m1\n#     if len(m1) != len(m2):\n#         return False\n#     for i in range(len(m1)):\n#         if m1[i] != m2[len(m1) - i - 1]:\n#             return False\n#     return True\n#\n# def is_inversion(m1, m2):\n#     # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n#     # An inversion is only possible if the number of notes in m1 and m2 are the same\n#     if len(m1) != len(m2):\n#         return False\n#     for i in range(1, len(m1)):\n#         if m1[i] != m2[(i + 1) % len(m1)]:\n#             return False\n#     return True\n#\n# def is_nonsense(m1, m2):\n#     return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n#\n# def main():\n#     # read the number of notes in each melody\n#     l = int(input())\n#     # read the first melody\n#     m1 = input().split()\n#     # read the second melody\n#     m2 = input().split()\n#     if is_transposition(m1, m2):\n#         print(\"Transposition\")\n#     elif is_retrograde(m1, m2):\n#         print(\"Retrograde\")\n#     elif is_inversion(m1, m2):\n#         print(\"Inversion\")\n#     else:\n#         print(\"Nonsense\")\n#\n# if __name__ == \"__main__\":\n#     main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(len(m1) - i - 1) % len(m1)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not(is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones.\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1.\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1.\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2)\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m2)):\n        if m1[i] != m2[(i + 1) % len(m2)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m2) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m2)):\n        if m1[i] != m2[(i + 1) % len(m2)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2) or is_same(m1, m2))\n\ndef is_same(m1, m2):\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m2)):\n        if m1[i] != m2[i]:\n            return False\n    return True\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    elif is_nonsense(m1, m2):\n        print(\"Nonsense\")\n    else:\n        print(\"Same\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 2) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[len(m1) - i - 2]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split(\" \")\n    # read the second melody\n    m2 = input().split(\" \")\n    if is_transposition(m1, m2):\n        print(\"Transposition\")\n    elif is_retrograde(m1, m2):\n        print(\"Retrograde\")\n    elif is_inversion(m1, m2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650102830,
  "object": "edit"
}
2022-04-16 09:54:23.599963 fix syntax errors 9 ['\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n#\n# def is_transposition(m1, m2):\n#     # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n#     # A transposition is only possible if the number of notes in m1 and m2 are the same\n#     if len(m1) != len(m2):\n#         return False\n#     for i in range(len(m1)):\n#         if m1[i] != m2[(i + 1) % len(m1)]:\n#             return False\n#     return True\n#\n# def is_retrograde(m1, m2):\n#     # m1 is a retrograde of m2 if m2 is the reverse of m1\n#     if len(m1) != len(m2):\n#         return False\n#     for i in range(len(m1)):\n#         if m1[i] != m2[len(m1) - i - 1]:\n#             return False\n#     return True\n#\n# def is_inversion(m1, m2):\n#     # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n#     # An inversion is only possible if the number of notes in m1 and m2 are the same\n#     if len(m1) != len(m2):\n#         return False\n#     for i in range(1, len(m1)):\n#         if m1[i] != m2[(i + 1) % len(m1)]:\n#             return False\n#     return True\n#\n# def is_nonsense(m1, m2):\n#     return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n#\n# def main():\n#     # read the number of notes in each melody\n#     l = int(input())\n#     # read the first melody\n#     m1 = input().split()\n#     # read the second melody\n#     m2 = input().split()\n#     if is_transposition(m1, m2):\n#         print("Transposition")\n#     elif is_retrograde(m1, m2):\n#         print("Retrograde")\n#     elif is_inversion(m1, m2):\n#         print("Inversion")\n#     else:\n#         print("Nonsense")\n#\n# if __name__ == "__main__":\n#     main()\n', '\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(len(m1) - i - 1) % len(m1)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not(is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones.\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1.\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1.\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2)\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m2)):\n        if m1[i] != m2[(i + 1) % len(m2)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m2) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m2)):\n        if m1[i] != m2[(i + 1) % len(m2)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2) or is_same(m1, m2))\n\ndef is_same(m1, m2):\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m2)):\n        if m1[i] != m2[i]:\n            return False\n    return True\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    elif is_nonsense(m1, m2):\n        print("Nonsense")\n    else:\n        print("Same")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 2) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[len(m1) - i - 2]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split()\n    # read the second melody\n    m2 = input().split()\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_transposition(m1, m2):\n    # m1 is a transposition of m2 if m2 can be obtained by shifting m1 by some number of semitones\n    # A transposition is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_retrograde(m1, m2):\n    # m1 is a retrograde of m2 if m2 is the reverse of m1\n    if len(m1) != len(m2):\n        return False\n    for i in range(len(m1)):\n        if m1[i] != m2[len(m1) - i - 1]:\n            return False\n    return True\n\ndef is_inversion(m1, m2):\n    # m1 is an inversion of m2 if m2 can be obtained by inverting m1 about the first note in m1\n    # An inversion is only possible if the number of notes in m1 and m2 are the same\n    if len(m1) != len(m2):\n        return False\n    for i in range(1, len(m1)):\n        if m1[i] != m2[(i + 1) % len(m1)]:\n            return False\n    return True\n\ndef is_nonsense(m1, m2):\n    return not (is_transposition(m1, m2) or is_retrograde(m1, m2) or is_inversion(m1, m2))\n\ndef main():\n    # read the number of notes in each melody\n    l = int(input())\n    # read the first melody\n    m1 = input().split(" ")\n    # read the second melody\n    m2 = input().split(" ")\n    if is_transposition(m1, m2):\n        print("Transposition")\n    elif is_retrograde(m1, m2):\n        print("Retrograde")\n    elif is_inversion(m1, m2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 09:54:23.600130 size on output set 8
2022-04-16 09:54:23.600144 num operations 1
2022-04-16 09:54:23.600149 size on input set 1
2022-04-16 09:54:43.011758 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print(\"Transposition\")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # # Check if transposition\n    # if melody2 == [transpose(note) for note in melody1]:\n    #     print(\"Transposition\")\n    # # Check if retrograde\n    # elif melody2 == melody1[::-1]:\n    #     print(\"Retrograde\")\n    # # Check if inversion\n    # elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n    #     print(\"Inversion\")\n    # # Else, it's nonsense\n    # else:\n    #     print(\"Nonsense\")\n    print(melody1)\n    print(melody2)\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print(\"Transposition\")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print(\"Transposition\")\n    # Check if retrograde\n    elif melody2 == list(reversed(melody1)):\n        print(\"Retrograde\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print(\"Transposition\")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    length = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print(\"Transposition\")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index) - 1\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input.\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition.\n    if melody2 == [transpose(note) for note in melody1]:\n        print(\"Transposition\")\n    # Check if retrograde.\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if inversion.\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print(\"Inversion\")\n    # Else, it's nonsense.\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order.\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note.\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note.\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note.\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order.\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note.\n    index = notes.index(note)\n    # Find the index of the first note.\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes.\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference.\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference.\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first.\n    else:\n        return first_note\n    # Find the index of the inverted note.\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end.\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note.\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function.\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print(\"Transposition\")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print(\"Transposition\")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print(\"Retrograde\")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print(\"Inversion\")\n    # Else, it's nonsense\n    else:\n        print(\"Nonsense\")\n\ndef transpose(note):\n    \"\"\"\n    Transpose a note up by one semitone.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    \"\"\"\n    Invert a note around the first note.\n    \"\"\"\n    # Create a list of all the notes in order\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650102863,
  "object": "edit"
}
2022-04-16 09:54:43.012262 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print("Transposition")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # # Check if transposition\n    # if melody2 == [transpose(note) for note in melody1]:\n    #     print("Transposition")\n    # # Check if retrograde\n    # elif melody2 == melody1[::-1]:\n    #     print("Retrograde")\n    # # Check if inversion\n    # elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n    #     print("Inversion")\n    # # Else, it\'s nonsense\n    # else:\n    #     print("Nonsense")\n    print(melody1)\n    print(melody2)\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print("Transposition")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print("Transposition")\n    # Check if retrograde\n    elif melody2 == list(reversed(melody1)):\n        print("Retrograde")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print("Transposition")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    # Read the input\n    length = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print("Transposition")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index) - 1\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    # Read the input.\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition.\n    if melody2 == [transpose(note) for note in melody1]:\n        print("Transposition")\n    # Check if retrograde.\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if inversion.\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print("Inversion")\n    # Else, it\'s nonsense.\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order.\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note.\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note.\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note.\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order.\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note.\n    index = notes.index(note)\n    # Find the index of the first note.\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes.\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference.\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference.\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first.\n    else:\n        return first_note\n    # Find the index of the inverted note.\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end.\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note.\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function.\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print("Transposition")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    # Read the input\n    l = int(sys.stdin.readline())\n    melody1 = sys.stdin.readline().split()\n    melody2 = sys.stdin.readline().split()\n\n    # Check if transposition\n    if melody2 == [transpose(note) for note in melody1]:\n        print("Transposition")\n    # Check if retrograde\n    elif melody2 == melody1[::-1]:\n        print("Retrograde")\n    # Check if inversion\n    elif melody2 == [invert(note, melody1[0]) for note in melody1]:\n        print("Inversion")\n    # Else, it\'s nonsense\n    else:\n        print("Nonsense")\n\ndef transpose(note):\n    """\n    Transpose a note up by one semitone.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # If the note is the last note in the list, transpose it to the first note\n    if index == len(notes) - 1:\n        transposed_note = notes[0]\n    # Else, transpose it to the next note\n    else:\n        transposed_note = notes[index + 1]\n\n    return transposed_note\n\ndef invert(note, first_note):\n    """\n    Invert a note around the first note.\n    """\n    # Create a list of all the notes in order\n    notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n    # Find the index of the current note\n    index = notes.index(note)\n    # Find the index of the first note\n    first_index = notes.index(first_note)\n    # Find the difference between the two notes\n    difference = index - first_index\n    # If the difference is positive, invert it to the negative difference\n    if difference > 0:\n        difference = -difference\n    # If the difference is negative, invert it to the positive difference\n    elif difference < 0:\n        difference = -difference\n    # If the difference is zero, the note is the same as the first\n    else:\n        return first_note\n    # Find the index of the inverted note\n    inverted_index = first_index + difference\n    # If the inverted note is outside the range of the list, wrap it around to the other end\n    if inverted_index < 0:\n        inverted_index = len(notes) - abs(inverted_index)\n    elif inverted_index > len(notes) - 1:\n        inverted_index = abs(len(notes) - inverted_index)\n    # Find the inverted note\n    inverted_note = notes[inverted_index]\n\n    return inverted_note\n\n# Call the main function\nif __name__ == "__main__":\n    main()\n']
2022-04-16 09:54:43.012497 size on output set 5
2022-04-16 09:54:43.012510 num operations 1
2022-04-16 09:54:43.012515 size on input set 1
2022-04-16 09:54:57.513613 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()  # list of notes\n    n = int(input().strip())\n    m1 = input().strip().split()  # list of notes of melody 1\n    m2 = input().strip().split()  # list of notes of melody 2\n    if m1 == m2:  # check if it's nonsense\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:  # check if it's retrograde\n        print(\"Retrograde\")\n    elif m2 == m1[::-1]:  # check if it's retrograde\n        print(\"Retrograde\")\n    else:  # check if it's transposition or inversion\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:  # check if it's transposition\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:  # check if it's inversion\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1] or m2 == m1[::-1]:\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:\n        print(\"Retrograde\")\n    elif m2 == m1[::-1]:\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + (n % 12)) % 12]:\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()\n    n = int(input().strip())  # number of semi-tones\n    m1 = input().strip().split()  # first melody\n    m2 = input().strip().split()  # second melody\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:\n        print(\"Inversion\")\n    elif m2 == m1[::-1]:\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()  # 12 notes\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:\n        print(\"Retrograde\")\n    elif m2 == m1[::-1]:\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:\n        print(\"Retrograde\")\n    elif m2 == m1[::-1]:\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0])) % 12)]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split(\" \")\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:\n        print(\"Retrograde\")\n    elif m2 == m1[::-1]:\n        print(\"Retrograde\")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print(\"Transposition\")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    notes = \"C C# D D# E F F# G G# A A# B\".split()\n    n = int(input().strip()) # number of notes\n    m1 = input().strip().split() # first line of notes\n    m2 = input().strip().split() # second line of notes\n    if m1 == m2:\n    # if the first line is the same as the second line in reverse\n        print(\"Nonsense\")\n    elif m1 == m2[::-1]:\n    # if the second line is the same as the first line in reverse\n        print(\"Retrograde\")\n    elif m2 == m1[::-1]:\n        print(\"Retrograde\")\n        # check for transposition\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print(\"Transposition\")\n        # check for inversion\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print(\"Inversion\")\n                break\n        else:\n            print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650102883,
  "object": "edit"
}
2022-04-16 09:54:57.513893 fix syntax errors 9 ['\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()  # list of notes\n    n = int(input().strip())\n    m1 = input().strip().split()  # list of notes of melody 1\n    m2 = input().strip().split()  # list of notes of melody 2\n    if m1 == m2:  # check if it\'s nonsense\n        print("Nonsense")\n    elif m1 == m2[::-1]:  # check if it\'s retrograde\n        print("Retrograde")\n    elif m2 == m1[::-1]:  # check if it\'s retrograde\n        print("Retrograde")\n    else:  # check if it\'s transposition or inversion\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:  # check if it\'s transposition\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:  # check if it\'s inversion\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1] or m2 == m1[::-1]:\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1]:\n        print("Retrograde")\n    elif m2 == m1[::-1]:\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + (n % 12)) % 12]:\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()\n    n = int(input().strip())  # number of semi-tones\n    m1 = input().strip().split()  # first melody\n    m2 = input().strip().split()  # second melody\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1]:\n        print("Inversion")\n    elif m2 == m1[::-1]:\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1]:\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()  # 12 notes\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1]:\n        print("Retrograde")\n    elif m2 == m1[::-1]:\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1]:\n        print("Retrograde")\n    elif m2 == m1[::-1]:\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0])) % 12)]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split(" ")\n    n = int(input().strip())\n    m1 = input().strip().split()\n    m2 = input().strip().split()\n    if m1 == m2:\n        print("Nonsense")\n    elif m1 == m2[::-1]:\n        print("Retrograde")\n    elif m2 == m1[::-1]:\n        print("Retrograde")\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print("Transposition")\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    notes = "C C# D D# E F F# G G# A A# B".split()\n    n = int(input().strip()) # number of notes\n    m1 = input().strip().split() # first line of notes\n    m2 = input().strip().split() # second line of notes\n    if m1 == m2:\n    # if the first line is the same as the second line in reverse\n        print("Nonsense")\n    elif m1 == m2[::-1]:\n    # if the second line is the same as the first line in reverse\n        print("Retrograde")\n    elif m2 == m1[::-1]:\n        print("Retrograde")\n        # check for transposition\n    else:\n        for i in range(len(m1)):\n            if m2[i] == notes[(notes.index(m1[i]) + n) % 12]:\n                print("Transposition")\n        # check for inversion\n                break\n            if m2[i] == notes[(notes.index(m1[0]) - (notes.index(m1[i]) - notes.index(m1[0]))) % 12]:\n                print("Inversion")\n                break\n        else:\n            print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 09:54:57.514042 size on output set 9
2022-04-16 09:54:57.514055 num operations 1
2022-04-16 09:54:57.514060 size on input set 1
2022-04-16 09:55:20.378697 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split(\" \")\n    melody2 = input().split(\" \")\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody, melody_):\n    for i in range(len(melody)):\n        if melody[i] != melody_[i]:\n            return False\n    return True\n\ndef retrograde(melody, melody_):\n    for i in range(len(melody)):\n        if melody[i] != melody_[len(melody_) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'H']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 12:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 13] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)-1):\n        if notes[notes.index(melody1[i])+1] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)-1):\n        if melody1[i] != melody2[len(melody2) - i - 2]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if notes.index(melody1[0]) != notes.index(melody2[0]):\n        return False\n    for i in range(1, len(melody1)-1):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11 and notes.index(melody1[i]) + notes.index(melody1[0]) != 23:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12 + 1] != melody2[i]:\n                return False\n    if notes.index(melody1[len(melody1)-1]) + notes.index(melody1[0]) != 11 and notes.index(melody1[len(melody1)-1]) + notes.index(melody1[0]) != 23:\n        if notes[(notes.index(melody1[len(melody1)-1]) + notes.index(melody1[0])) % 12 + 1] != melody2[len(melody2)-1]:\n            return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2) or inversion(melody1, melody2[::-1]):\n        print(\"Inversion\")\n    elif retrograde(melody1, melody2[::-1]):\n        print(\"Retrograde inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nnotes = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n            return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    print(\"hello world\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11: # if not 11, then modulo\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]: # modulo\n                return False\n        else: # if 11, then no modulo\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0]))] != melody2[i]: \n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 12:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12 - 1] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print(\"Transposition\")\n    elif retrograde(melody1, melody2):\n        print(\"Retrograde\")\n    elif inversion(melody1, melody2):\n        print(\"Inversion\")\n    else:\n        print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650102897,
  "object": "edit"
}
2022-04-16 09:55:20.379061 fix syntax errors 9 ['\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split(" ")\n    melody2 = input().split(" ")\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\']\n\ndef transposition(melody, melody_):\n    for i in range(len(melody)):\n        if melody[i] != melody_[i]:\n            return False\n    return True\n\ndef retrograde(melody, melody_):\n    for i in range(len(melody)):\n        if melody[i] != melody_[len(melody_) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\', \'H\']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 12:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 13] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\', \'C\']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)-1):\n        if notes[notes.index(melody1[i])+1] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)-1):\n        if melody1[i] != melody2[len(melody2) - i - 2]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if notes.index(melody1[0]) != notes.index(melody2[0]):\n        return False\n    for i in range(1, len(melody1)-1):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11 and notes.index(melody1[i]) + notes.index(melody1[0]) != 23:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12 + 1] != melody2[i]:\n                return False\n    if notes.index(melody1[len(melody1)-1]) + notes.index(melody1[0]) != 11 and notes.index(melody1[len(melody1)-1]) + notes.index(melody1[0]) != 23:\n        if notes[(notes.index(melody1[len(melody1)-1]) + notes.index(melody1[0])) % 12 + 1] != melody2[len(melody2)-1]:\n            return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2) or inversion(melody1, melody2[::-1]):\n        print("Inversion")\n    elif retrograde(melody1, melody2[::-1]):\n        print("Retrograde inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = [\'C\', \'Db\', \'D\', \'Eb\', \'E\', \'F\', \'Gb\', \'G\', \'Ab\', \'A\', \'Bb\', \'B\']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]:\n            return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    print("hello world")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 11: # if not 11, then modulo\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12] != melody2[i]: # modulo\n                return False\n        else: # if 11, then no modulo\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0]))] != melody2[i]: \n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = [\'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\', \'A\', \'A#\', \'B\', \'C\']\n\ndef transposition(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[i]:\n            return False\n    return True\n\ndef retrograde(melody1, melody2):\n    for i in range(len(melody1)):\n        if melody1[i] != melody2[len(melody2) - i - 1]:\n            return False\n    return True\n\ndef inversion(melody1, melody2):\n    if melody1[0] != melody2[0]:\n        return False\n    for i in range(1, len(melody1)):\n        if notes.index(melody1[i]) + notes.index(melody1[0]) != 12:\n            if notes[(notes.index(melody1[i]) + notes.index(melody1[0])) % 12 - 1] != melody2[i]:\n                return False\n        else:\n            if melody1[i] != melody2[i]:\n                return False\n    return True\n\ndef main():\n    l = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n    if transposition(melody1, melody2):\n        print("Transposition")\n    elif retrograde(melody1, melody2):\n        print("Retrograde")\n    elif inversion(melody1, melody2):\n        print("Inversion")\n    else:\n        print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 09:55:20.379190 size on output set 9
2022-04-16 09:55:20.379202 num operations 1
2022-04-16 09:55:20.379207 size on input set 1
2022-04-16 09:55:30.997109 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length - i - 1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + 12 - notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\n\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i + 1) % length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length - i - 1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Nonsense\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"B#\"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 13]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 13]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i + 1) % length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length - i - 1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nnotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print(\"Nonsense\")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print(\"Transposition\")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print(\"Retrograde\")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + (12 - notes.index(melody2[0]))) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print(\"Inversion\")\n        return\n\n    print(\"Nonsense\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650102920,
  "object": "edit"
}
2022-04-16 09:55:30.997458 fix syntax errors 9 ['\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length - i - 1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + 12 - notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', 'notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n\n\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i + 1) % length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length - i - 1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Nonsense\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "B#"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 13]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 13]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i + 1) % length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length - i - 1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + notes.index(melody2[0])) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n', '\n\nnotes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]\n\ndef main():\n    length = int(input())\n    melody1 = input().split()\n    melody2 = input().split()\n\n    # Transposition\n    if melody1 == melody2:\n        print("Nonsense")\n        return\n    transposed = True\n    for i in range(length):\n        if melody1[i] != melody2[(i+1)%length]:\n            transposed = False\n            break\n    if transposed:\n        print("Transposition")\n        return\n\n    # Retrograde\n    retrograde = True\n    for i in range(length):\n        if melody1[i] != melody2[length-i-1]:\n            retrograde = False\n            break\n    if retrograde:\n        print("Retrograde")\n        return\n\n    # Inversion\n    inversion = True\n    for i in range(length):\n        if i == 0:\n            continue\n        if melody1[i] != notes[(notes.index(melody2[i]) + (12 - notes.index(melody2[0]))) % 12]:\n            inversion = False\n            break\n    if inversion:\n        print("Inversion")\n        return\n\n    print("Nonsense")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 09:55:30.997581 size on output set 9
