2022-04-16 08:33:33.963521 num operations 1
2022-04-16 08:33:33.963538 size on input set 1
2022-04-16 08:33:43.898661 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_A = [0] * N  # \u6771\u4eac\n    x_B = [K] * N  # \u5927\u962a\n    x_total = x_A + x_B  # \u5408\u8a08\n    x_total.sort()\n\n    x_sort = sorted(x)  # \u6607\u9806\n    x_sort.append(K)\n\n    d = 0  # \u5168\u3066\u306e\u8ddd\u96e2\u306e\u5408\u8a08\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_A = [0] * N  # \u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316\n    x_B = [K] * N  # \u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316\n    x_total = x_A + x_B  # \u30ea\u30b9\u30c8\u306e\u7d50\u5408\n    x_total.sort()  # \u30ea\u30b9\u30c8\u306e\u30bd\u30fc\u30c8\n\n    x_sort = sorted(x)  # \u30ea\u30b9\u30c8\u306e\u30bd\u30fc\u30c8\n    x_sort.append(K)  # \u30ea\u30b9\u30c8\u306e\u8ffd\u52a0\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_a = [0] * N\n    x_b = [K] * N\n    x_total = x_a + x_b\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_total = [0] * N + [K] * N\n    x_total = sorted(x_total)\n\n    x_sort = sorted(x) + [K]\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_A = [0] * N\n    x_B = [K] * N\n    x_total = x_A + x_B\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K + 1)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n\n    x_total = x + [K] * N\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_a = [0] * N\n    x_b = [K] * N\n    x_total = x_a + x_b\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_a = [0] * N\n    x_b = [K] * N\n    x_total = x_a + x_b\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_a = [0] * N\n    x_b = [K] * N\n    x_total = x_a + x_b\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650098014,
  "object": "edit"
}
2022-04-16 08:33:43.898992 fix syntax errors 9 ['\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_A = [0] * N  # 東京\n    x_B = [K] * N  # 大阪\n    x_total = x_A + x_B  # 合計\n    x_total.sort()\n\n    x_sort = sorted(x)  # 昇順\n    x_sort.append(K)\n\n    d = 0  # 全ての距離の合計\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_A = [0] * N  # リストの初期化\n    x_B = [K] * N  # リストの初期化\n    x_total = x_A + x_B  # リストの結合\n    x_total.sort()  # リストのソート\n\n    x_sort = sorted(x)  # リストのソート\n    x_sort.append(K)  # リストの追加\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_a = [0] * N\n    x_b = [K] * N\n    x_total = x_a + x_b\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_total = [0] * N + [K] * N\n    x_total = sorted(x_total)\n\n    x_sort = sorted(x) + [K]\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_A = [0] * N\n    x_B = [K] * N\n    x_total = x_A + x_B\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K + 1)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n\n    x_total = x + [K] * N\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_a = [0] * N\n    x_b = [K] * N\n    x_total = x_a + x_b\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_a = [0] * N\n    x_b = [K] * N\n    x_total = x_a + x_b\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n\n    x_a = [0] * N\n    x_b = [K] * N\n    x_total = x_a + x_b\n    x_total.sort()\n\n    x_sort = sorted(x)\n    x_sort.append(K)\n\n    d = 0\n    for i in range(N):\n        d += abs(x_sort[i] - x_total[i])\n\n    print(d)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 08:33:43.899061 size on output set 6
2022-04-16 08:33:43.899073 num operations 1
2022-04-16 08:33:43.899078 size on input set 1
2022-04-16 08:34:01.467230 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "# -*- coding: utf-8 -*-\n\n\nimport sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians, log10\nif sys.version_info.minor >= 5: from math import gcd\nelse: from fractions import gcd \nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul, xor\nfrom copy import copy, deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef round(x): return int((x*2+1) // 2)\ndef fermat(x, y, MOD): return x * pow(y, MOD-2, MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, 1)\ndef gcd_list(nums): return reduce(gcd, nums, nums[0])\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nN = INT()\nK = INT()\nxs = LIST()\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    X = get_line()\n    min_distance = 0\n    for x in X:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0.0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "import itertools\nimport math\n\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappop\nfrom heapq import heappush\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N, K = get_line()\n    A = get_line()\n    B = get_line()\n    C = get_line()\n    D = get_line()\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef get_line():\n    return sys.stdin.readline().rstrip().split()\n\ndef main():\n    N = int(get_line()[0])\n    K = int(get_line()[0])\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650098023,
  "object": "edit"
}
2022-04-16 08:34:01.467629 fix syntax errors 9 ["\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\n\nimport sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians, log10\nif sys.version_info.minor >= 5: from math import gcd\nelse: from fractions import gcd \nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul, xor\nfrom copy import copy, deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef round(x): return int((x*2+1) // 2)\ndef fermat(x, y, MOD): return x * pow(y, MOD-2, MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, 1)\ndef gcd_list(nums): return reduce(gcd, nums, nums[0])\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nN = INT()\nK = INT()\nxs = LIST()\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    X = get_line()\n    min_distance = 0\n    for x in X:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0.0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N = get_line()[0]\n    K = get_line()[0]\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "import itertools\nimport math\n\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappop\nfrom heapq import heappush\nimport sys\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    N, K = get_line()\n    A = get_line()\n    B = get_line()\n    C = get_line()\n    D = get_line()\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_line():\n    return sys.stdin.readline().rstrip().split()\n\ndef main():\n    N = int(get_line()[0])\n    K = int(get_line()[0])\n    xs = get_line()\n    min_distance = 0\n    for x in xs:\n        min_distance += min(x, K - x) * 2\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 08:34:01.467714 size on output set 7
