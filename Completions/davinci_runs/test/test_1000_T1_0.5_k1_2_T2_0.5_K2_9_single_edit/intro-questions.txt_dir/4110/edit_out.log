2022-04-16 05:01:43.644754 num operations 1
2022-04-16 05:01:43.644773 size on input set 1
2022-04-16 05:01:59.035165 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    O(D^2)\n    ans = 10**10\n    for i in range(2**D):\n        score = 0\n        cnt = 0\n        for j in range(D):\n            if i >> j & 1:\n                score += 100 * (j + 1) * P[j] + C[j]\n                cnt += P[j]\n        for j in range(D - 1, -1, -1):\n            if score >= G:\n                ans = min(ans, cnt)\n                break\n            if i >> j & 1:\n                continue\n            for k in range(P[j]):\n                if score >= G:\n                    break\n                score += 100 * (j + 1)\n                cnt += 1\n        else:\n            ans = min(ans, cnt)\n    print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate(P))\n    C_cum = list(accumulate(C))\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * (P_cum[i] - (0 if i == 0 else P_cum[i - 1]))\n        if score >= G:\n            ans = min(ans, P_cum[i] - (0 if i == 0 else P_cum[i - 1]))\n        else:\n            cnt = P_cum[i] - (0 if i == 0 else P_cum[i - 1])\n            score += 100 * (i + 1) * (P_cum[-1] - (0 if i == 0 else P_cum[i - 1]))\n            cnt += (P_cum[-1] - (0 if i == 0 else P_cum[i - 1]))\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum, G - score) - (i + 1)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10 ** 10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10 ** 10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10 ** 10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10 ** 10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650085303,
  "object": "edit"
}
2022-04-16 05:01:59.035683 NO RESULT
2022-04-16 05:01:59.035696 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-16 05:01:59.035758 fix syntax errors 8 ["\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    O(D^2)\n    ans = 10**10\n    for i in range(2**D):\n        score = 0\n        cnt = 0\n        for j in range(D):\n            if i >> j & 1:\n                score += 100 * (j + 1) * P[j] + C[j]\n                cnt += P[j]\n        for j in range(D - 1, -1, -1):\n            if score >= G:\n                ans = min(ans, cnt)\n                break\n            if i >> j & 1:\n                continue\n            for k in range(P[j]):\n                if score >= G:\n                    break\n                score += 100 * (j + 1)\n                cnt += 1\n        else:\n            ans = min(ans, cnt)\n    print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate(P))\n    C_cum = list(accumulate(C))\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * (P_cum[i] - (0 if i == 0 else P_cum[i - 1]))\n        if score >= G:\n            ans = min(ans, P_cum[i] - (0 if i == 0 else P_cum[i - 1]))\n        else:\n            cnt = P_cum[i] - (0 if i == 0 else P_cum[i - 1])\n            score += 100 * (i + 1) * (P_cum[-1] - (0 if i == 0 else P_cum[i - 1]))\n            cnt += (P_cum[-1] - (0 if i == 0 else P_cum[i - 1]))\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum, G - score) - (i + 1)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10 ** 10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10 ** 10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10 ** 10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10 ** 10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 05:01:59.035936 size on output set 5
2022-04-16 05:01:59.035948 num operations 1
2022-04-16 05:01:59.035954 size on input set 1
2022-04-16 05:02:13.551997 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j) & 1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p = []\n    c = []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i >> j) & 1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i >> j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "# https://atcoder.jp/contests/abc086/tasks/arc089_a\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef solve(D, G, p, c):\n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    return ans\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    print(solve(D, G, p, c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2 ** D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i >> j) & 1:\n                score += 100 * (j + 1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D - 1, -1, -1):\n            if (i >> j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j + 1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i >> j) & 1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i >> j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef main():\n    D, G = map(int, input().split())\n    p, c, score = [], [], 0\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        res = 0\n        for j in range(D):\n            if (i >> j) & 1:\n                score += 100 * (j + 1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D - 1, -1, -1):\n            if (i >> j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j + 1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650085319,
  "object": "edit"
}
2022-04-16 05:02:13.552802 fix syntax errors 9 ['\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j) & 1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    D, G = map(int, input().split())\n    p = []\n    c = []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i >> j) & 1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i >> j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '# https://atcoder.jp/contests/abc086/tasks/arc089_a\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(D, G, p, c):\n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    return ans\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    print(solve(D, G, p, c))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2 ** D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i >> j) & 1:\n                score += 100 * (j + 1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D - 1, -1, -1):\n            if (i >> j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j + 1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i >> j) & 1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i >> j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    D, G = map(int, input().split())\n    p, c, score = [], [], 0\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems\n    # that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        res = 0\n        for j in range(D):\n            if (i >> j) & 1:\n                score += 100 * (j + 1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D - 1, -1, -1):\n            if (i >> j) & 1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j + 1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 05:02:13.553360 size on output set 9
