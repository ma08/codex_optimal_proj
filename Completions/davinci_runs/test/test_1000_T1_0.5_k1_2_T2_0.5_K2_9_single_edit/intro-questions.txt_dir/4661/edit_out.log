2022-04-16 08:58:47.459575 num operations 1
2022-04-16 08:58:47.459592 size on input set 1
2022-04-16 08:58:56.065603 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 1,
      "text": "\n\ncube = lambda x: x**3\n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 2,
      "text": "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list[0: n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 3,
      "text": "\n\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 4,
      "text": "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n+1):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n+1]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 5,
      "text": "\ncube = lambda x: x**3  # complete the lambda function\n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 6,
      "text": "\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 7,
      "text": "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 8,
      "text": "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list[0: n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    }
  ],
  "created": 1650099527,
  "object": "edit"
}
2022-04-16 08:58:56.065924 fix syntax errors 9 ["\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\ncube = lambda x: x**3\n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list[0: n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n+1):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n+1]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x**3  # complete the lambda function\n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\ncube = lambda x: x**3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list[0: n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"]
2022-04-16 08:58:56.065972 size on output set 8
2022-04-16 08:58:56.065982 num operations 1
2022-04-16 08:58:56.065987 size on input set 1
2022-04-16 08:59:04.107553 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    l = [0,1]\n    for i in range(2,n):\n        l.append(l[i-2] + l[i-1])\n    return(l[0:n])\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 1,
      "text": "\ncube = lambda x: x**3  # complete the lambda function\n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 2,
      "text": "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 3,
      "text": "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 4,
      "text": "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 5,
      "text": "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 6,
      "text": "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 7,
      "text": "\ncube = lambda x: x**3  # complete the lambda function\n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    },
    {
      "index": 8,
      "text": "\n\ncube = lambda x: x**3 # complete the lambda function\n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"
    }
  ],
  "created": 1650099536,
  "object": "edit"
}
2022-04-16 08:59:04.107892 fix syntax errors 9 ["\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    l = [0,1]\n    for i in range(2,n):\n        l.append(l[i-2] + l[i-1])\n    return(l[0:n])\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x**3  # complete the lambda function\n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\ncube = lambda x: x**3  # complete the lambda function\n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n", "\n\ncube = lambda x: x**3 # complete the lambda function\n\ndef fibonacci(n):\n    a = 0\n    b = 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        c = a + b\n        a = b\n        b = c\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n"]
2022-04-16 08:59:04.107938 size on output set 4
