["\n\ndef main():\n    r, c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n    for i in range(r - 1):\n        for j in range(c - 1):\n            if l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == 'X' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == 'X' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquash = [0]*5\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[0] += 1\n    for cell in space[1:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[space[0][0]][space[0][1]] == '.':\n            squash[1] += 1\n    for cell in space[2:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[space[0][0]][space[0][1]] == '.' and grid[space[1][0]][space[1][1]] == '.':\n            squash[2] += 1\n    for cell in space[4:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[space[0][0]][space[0][1]] == '.' and grid[space[1][0]][space[1][1]] == '.' and grid[space[2][0]][space[2][1]] == '.' and grid[space[3][0]][space[3][1]] == '.':\n            squash[3] += 1\n    for cell in space[3:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[space[0][0]][space[0][1]] == '.' and grid[space[1][0]][space[1][1]] == '.' and grid[space[2][0]][space[2][1]] == '.':\n            squash[4] += 1\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "\n\n#CODE: \n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars.\nprint(free)\nprint(free - 2*cols)\nprint(free - 4*cols)\nprint(free - 6*cols)\nprint(free - 8*cols)\n", "\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R-3):\n        for j in range(C-3):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquash = [0]*6\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X' and cell[0] >= space[0][0] and cell[1] >= space[0][1]:\n            squash[0] += 1\n        if grid[cell[0]][cell[1]] == 'X' and cell[0] >= space[1][0] and cell[1] >= space[1][1]:\n            squash[1] += 1\n        if grid[cell[0]][cell[1]] == 'X' and cell[0] >= space[2][0] and cell[1] >= space[2][1]:\n            squash[2] += 1\n        if grid[cell[0]][cell[1]] == 'X' and cell[0] >= space[3][0] and cell[1] >= space[3][1]:\n            squash[3] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[4] += 1\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "\n\ndef main():\n    r,c = map(int,input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0:0,1:0,2:0,3:0,4:0,5:0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n            else:\n                d[5] += 1\n    for i in range(6):\n        print(d[i])\nmain()\n", "\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquash = [0]*5\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[0] += 1\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "\ndef main():\n    r,c = map(int,input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0:0,1:0,2:0,3:0,4:0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4, 5\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R-3):\n        for j in range(C-3):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\nr, c = map(int, input().split())  # \u5165\u529b\u3055\u308c\u305f\u6570\u3092r,c\u306b\u4ee3\u5165\nparking = [input() for _ in range(r)]  # \u5165\u529b\u3055\u308c\u305f\u6570\u3092parking\u306b\u4ee3\u5165\n\nsquash = [0, 0, 0, 0, 0]  # squash\u30920\u3067\u521d\u671f\u5316\nfor i in range(r-1):  # r-1\u56de\u30eb\u30fc\u30d7\n    for j in range(c-1):  # c-1\u56de\u30eb\u30fc\u30d7\n        if parking[i][j] == \"#\":  # parking[i][j]\u304c#\u306a\u3089\n            continue\n        elif parking[i][j] == \".\":  # parking[i][j]\u304c.\u306a\u3089\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":  # \u4e0b\u3068\u53f3\u3068\u53f3\u4e0b\u304cX\u306a\u3089\n                squash[4] += 1  # squash[4]\u3092+1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":  # \u4e0b\u3068\u53f3\u304cX\u306a\u3089\n                squash[3] += 1  # squash[3]\u3092+1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":  # \u4e0b\u3068\u53f3\u4e0b\u304cX\u306a\u3089\n                squash[3] += 1  # squash[3]\u3092+1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":  # \u53f3\u3068\u53f3\u4e0b\u304cX\u306a\u3089\n                squash[3] += 1  # squash[3]\u3092+1\n            elif parking[i+1][j] == \"X\":  # \u4e0b\u304cX\u306a\u3089\n                squash[2] += 1  # squash[2]\u3092+1\n            elif parking[i][j+1] == \"X\":  # \u53f3\u304cX\u306a\u3089\n                squash[2] += 1  # squash[2]\u3092+1\n            elif parking[i+1][j+1] == \"X\":  # \u53f3\u4e0b\u304cX\u306a\u3089\n                squash[2] += 1  # squash[2]\u3092+1\n            else:\n                squash[0] += 1  # \u305d\u308c\u4ee5\u5916\u306a\u3089squash[0]\u3092+1\n        else:  # parking[i][j]\u304cX\u306a\u3089\n            squash[1] += 1  # squash[1]\u3092+1\n\nprint(squash[0])  # squash[0]\u3092\u51fa\u529b\nprint(squash[1])  # squash[1]\u3092\u51fa\u529b\nprint(squash[2])  # squash[2]\u3092\u51fa\u529b\nprint(squash[3])  # squash[3]\u3092\u51fa\u529b\nprint(squash[4])  # squash[4]\u3092\u51fa\u529b\n", "\n\ndef count_parking_spaces(matrix):\n    parking_spaces = [0, 0, 0, 0, 0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if i < (len(matrix) - 1) and matrix[i + 1][j] == 'X':\n                    if j < (len(matrix[i]) - 1) and matrix[i][j + 1] == 'X':\n                        if i < (len(matrix) - 1) and j < (len(matrix[i]) - 1) and matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[4] += 1\n                        else:\n                            parking_spaces[3] += 1\n                    else:\n                        if i < (len(matrix) - 1) and j < (len(matrix[i]) - 1) and matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[3] += 1\n                        else:\n                            parking_spaces[2] += 1\n                else:\n                    if j < (len(matrix[i]) - 1) and matrix[i][j + 1] == 'X':\n                        if i < (len(matrix) - 1) and j < (len(matrix[i]) - 1) and matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[3] += 1\n                        else:\n                            parking_spaces[2] += 1\n                    else:\n                        if i < (len(matrix) - 1) and j < (len(matrix[i]) - 1) and matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[2] += 1\n                        else:\n                            parking_spaces[1] += 1\n            else:\n                if i < (len(matrix) - 1) and matrix[i + 1][j] == 'X':\n                    if j < (len(matrix[i]) - 1) and matrix[i][j + 1] == 'X':\n                        if i < (len(matrix) - 1) and j < (len(matrix[i]) - 1) and matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[3] += 1\n                        else:\n                            parking_spaces[2] += 1\n                    else:\n                        if i < (len(matrix) - 1) and j < (len(matrix[i]) - 1) and matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[2] += 1\n                        else:\n                            parking_spaces[1] += 1\n                else:\n                    if j < (len(matrix[i]) - 1) and matrix[i][j + 1] == 'X':\n                        if i < (len(matrix) - 1) and j < (len(matrix[i]) - 1) and matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[2] += 1\n                        else:\n                            parking_spaces[1] += 1\n                    else:\n                        if i < (len(matrix) - 1) and j < (len(matrix[i]) - 1) and matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[1] += 1\n                        else:\n                            parking_spaces[0] += 1\n\n    return parking_spaces\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_spaces = count_parking_spaces(matrix)\n    for i in range(len(parking_spaces)):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\n#CODE:\n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(input())\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "\n\nimport math\nimport sys\n\nrows, cols = map(int, input().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if input() == '.':\n            free += 1\n        input()\n\n# Squash 0, 1, 2, 3, or 4 cars\nprint(math.ceil(free/2))\nprint(math.ceil((free - 2*cols)/2))\nprint(math.ceil((free - 4*cols)/2))\nprint(math.ceil((free - 6*cols)/2))\nprint(math.ceil((free - 8*cols)/2))\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquash = [0]*5\nfor space in possible_spaces:\n        if grid[cell[0]][cell[1]] == 'X': squash[0] += 1\n    for cell in space: \n        if grid[cell[0]][cell[1]] == 'X': squash[1] += 1\n    for cell in space: \n        if grid[cell[0]][cell[1]] == 'X': squash[2] += 1\n    for cell in space: \n        if grid[cell[0]][cell[1]] == 'X': squash[3] += 1\n    for cell in space: \n        if grid[cell[0]][cell[1]] == 'X': squash[4] += 1\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "\n\ndef count_parking_spaces(matrix):\n    parking_spaces = [0, 0, 0, 0, 0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if i + 1 < len(matrix):\n                    if matrix[i + 1][j] == 'X':\n                        if j + 1 < len(matrix[i]):\n                            if matrix[i][j + 1] == 'X':\n                                if i + 1 < len(matrix) and j + 1 < len(matrix[i]):\n                                    if matrix[i + 1][j + 1] == 'X':\n                                        parking_spaces[4] += 1\n                                    else:\n                                        parking_spaces[3] += 1\n                                else:\n                                    parking_spaces[3] += 1\n                            else:\n                                if i + 1 < len(matrix) and j + 1 < len(matrix[i]):\n                                    if matrix[i + 1][j + 1] == 'X':\n                                        parking_spaces[3] += 1\n                                    else:\n                                        parking_spaces[2] += 1\n                                else:\n                                    parking_spaces[2] += 1\n                        else:\n                        else:\n                            parking_spaces[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                        else:\n                            parking_spaces[2] += 1\n                else:\n                    if j + 1 < len(matrix[i]):\n                        if matrix[i][j + 1] == 'X':\n                            if i + 1 < len(matrix) and j + 1 < len(matrix[i]):\n                                if matrix[i + 1][j + 1] == 'X':\n                                    parking_spaces[3] += 1\n                                else:\n                                    parking_spaces[2] += 1\n                            else:\n                                parking_spaces[2] += 1\n                        else:\n                            parking_spaces[2] += 1\n            else:\n                continue\n\n    return parking_spaces\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_spaces = count_parking_spaces(matrix)\n    for i in range(len(parking_spaces)):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquash = [0]*5\nfor space in possible_spaces:\n    if grid[space[0][0]][space[0][1]] == 'X':\n        squash[0] += 1\n    if grid[space[1][0]][space[1][1]] == 'X':\n        squash[1] += 1\n    if grid[space[2][0]][space[2][1]] == 'X':\n        squash[2] += 1\n    if grid[space[3][0]][space[3][1]] == 'X':\n        squash[3] += 1\n    if grid[space[4][0]][space[4][1]] == 'X':\n        squash[4] += 1\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "\nimport sys\n\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R - 1):\n        for j in range(C - 1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j + 1] == '.' and parking_map[i + 1][j] == '.' and parking_map[i + 1][j + 1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j + 2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j + 1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 1][j + 2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j + 2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 3][j + 1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 1][j + 3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 3][j + 2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i + 2][j + 3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i + 3][j + 3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquash = [0]*6\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X' and grid[cell[0]][cell[1]] == 'X':\n            squash[0] += 1\n    for cell in space[1:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[cell[0]][cell[1]] == 'X':\n            squash[1] += 1\n    for cell in space[2:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[cell[0]][cell[1]] == 'X':\n            squash[2] += 1\n    for cell in space[3:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[cell[0]][cell[1]] == 'X':\n            squash[3] += 1\n    for cell in space[4:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[cell[0]][cell[1]] == 'X':\n            squash[4] += 1\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(6):\n    print(squash.count(i))\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquash = []\nfor space in possible_spaces:\n    squash.append(0)\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[-1] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[-1] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[-1] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[-1] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[-1] += 1\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "def main():\n    r, c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[0] += 1\n\n\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "import sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars\nprint(free)\nprint(free - 2*cols)\nprint(free - 4*cols)\nprint(free - 6*cols)\nprint(free - 8*cols)\n", "\n#CODE:\nr, c = map(int, input().split())\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\ncount = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\nfor i in range(5):\n    print(count[i])\n", "\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split()) \n\n# Just count the number of free spaces \nfree = 0 \nfor i in range(rows):\n\tfor j in range(cols):\n\t\tif sys.stdin.read(1) == '.':\n\t\t\tfree += 1\n\t\tsys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars \nprint(free) \nprint(free - 2*cols) \nprint(free - 4*cols) \nprint(free - 6*cols) \nprint(free - 8*cols) \n", "\n\ndef main():\n    r, c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "#!/usr/bin/env python3\n\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars\nprint(free)\nprint(free - 2 * cols)\nprint(free - 4 * cols)\nprint(free - 6 * cols)\nprint(free - 8 * cols)\n", "\n\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R - 1):\n        for j in range(C - 1):\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars\nprint(free)\nprint(free - 2*cols)\nprint(free - 4*cols)\nprint(free - 6*cols)\nprint(free - 8*cols)\n", "import sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars, if possible\nif free >= 0:\n    print(free)\nif free - 2*cols >= 0:\n    print(free - 2*cols)\nif free - 4*cols >= 0:\n    print(free - 4*cols)\nif free - 6*cols >= 0:\n    print(free - 6*cols)\nif free - 8*cols >= 0:\n    print(free - 8*cols)\n", "\n\ndef count_parking_spaces(matrix):\n    parking_spaces = [0, 0, 0, 0, 0]\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[i]) - 2):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X' and matrix[i][j + 1] == 'X' and matrix[i + 1][j + 1] == 'X':\n                    parking_spaces[4] += 1\n                elif matrix[i + 1][j] == 'X' and matrix[i][j + 1] == 'X' and matrix[i + 1][j + 1] != 'X':\n                    parking_spaces[3] += 1\n                elif matrix[i + 1][j] == 'X' and matrix[i][j + 1] != 'X' and matrix[i + 1][j + 1] == 'X':\n                    parking_spaces[3] += 1\n                elif matrix[i + 1][j] == 'X' and matrix[i][j + 1] != 'X' and matrix[i + 1][j + 1] != 'X':\n                    parking_spaces[2] += 1\n                elif matrix[i + 1][j] != 'X' and matrix[i][j + 1] == 'X' and matrix[i + 1][j + 1] == 'X':\n                    parking_spaces[3] += 1\n                elif matrix[i + 1][j] != 'X' and matrix[i][j + 1] == 'X' and matrix[i + 1][j + 1] != 'X':\n                    parking_spaces[2] += 1\n                elif matrix[i + 1][j] != 'X' and matrix[i][j + 1] != 'X' and matrix[i + 1][j + 1] == 'X':\n                    parking_spaces[2] += 1\n                elif matrix[i + 1][j] != 'X' and matrix[i][j + 1] != 'X' and matrix[i + 1][j + 1] != 'X':\n                    parking_spaces[1] += 1\n            elif matrix[i][j] == '.':\n                if matrix[i + 1][j] == 'X' and matrix[i][j + 1] == 'X' and matrix[i + 1][j + 1] == 'X':\n                    parking_spaces[3] += 1\n                elif matrix[i + 1][j] == 'X' and matrix[i][j + 1] == 'X' and matrix[i + 1][j + 1] != 'X':\n                    parking_spaces[2] += 1\n                elif matrix[i + 1][j] == 'X' and matrix[i][j + 1] != 'X' and matrix[i + 1][j + 1] == 'X':\n                    parking_spaces[2] += 1\n                elif matrix[i + 1][j] == 'X' and matrix[i][j + 1] != 'X' and matrix[i + 1][j + 1] != 'X':\n                    parking_spaces[1] += 1\n                elif matrix[i + 1][j] != 'X' and matrix[i][j + 1] == 'X' and matrix[i + 1][j + 1] == 'X':\n                    parking_spaces[2] += 1\n                elif matrix[i + 1][j] != 'X' and matrix[i][j + 1] == 'X' and matrix[i + 1][j + 1] != 'X':\n                    parking_spaces[1] += 1\n                elif matrix[i + 1][j] != 'X' and matrix[i][j + 1] != 'X' and matrix[i + 1][j + 1] == 'X':\n                    parking_spaces[1] += 1\n                else:\n                    parking_spaces[0] += 1\n\n    return parking_spaces\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_spaces = count_parking_spaces(matrix)\n    for i in range(len(parking_spaces)):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars\nprint(free)\nprint(free - 2 * cols)\nprint(free - 4 * cols)\nprint(free - 6 * cols)\nprint(free - 8 * cols)\n", "\n\ndef count_parking_spaces(matrix):\n    parking_spaces = [0, 0, 0, 0, 0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[4] += 1\n                        else:\n                            parking_spaces[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[3] += 1\n                        else:\n                            parking_spaces[2] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[3] += 1\n                        else:\n                            parking_spaces[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[2] += 1\n                        else:\n                            parking_spaces[1] += 1\n            else:\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[3] += 1\n                        else:\n                            parking_spaces[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[2] += 1\n                        else:\n                            parking_spaces[1] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[2] += 1\n                        else:\n                            parking_spaces[1] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[1] += 1\n                        else:\n                            parking_spaces[0] += 1\n\n    return parking_spaces\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_spaces = count_parking_spaces(matrix)\n    for i in range(len(parking_spaces)):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R):\n        for j in range(C):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if i < R-1 and j < C-1:\n                        if parking_map[i][j+2] == 'X':\n                            parking_spaces[1] += 1\n                        if parking_map[i+2][j] == 'X':\n                            parking_spaces[1] += 1\n                        if parking_map[i+2][j+1] == 'X':\n                            parking_spaces[1] += 1\n                        if parking_map[i+1][j+2] == 'X':\n                            parking_spaces[1] += 1\n                    if i < R-2 and j < C-2:\n                        if parking_map[i+2][j+2] == 'X':\n                            parking_spaces[2] += 1\n                        if parking_map[i+3][j+1] == 'X':\n                            parking_spaces[2] += 1\n                        if parking_map[i+1][j+3] == 'X':\n                            parking_spaces[2] += 1\n                    if i < R-3 and j < C-3:\n                        if parking_map[i+3][j+2] == 'X':\n                            parking_spaces[3] += 1\n                        if parking_map[i+2][j+3] == 'X':\n                            parking_spaces[3] += 1\n                    if i < R-4 and j < C-4:\n                        if parking_map[i+3][j+3] == 'X':\n                            parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    r, c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == 'X' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\n", "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars per row\nprint(free)\nprint(free - 2 * cols)\nprint(free - 4 * cols)\nprint(free - 6 * cols)\nprint(free - 8 * cols)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Apr  9 21:24:29 2018\n@author: kazuki.onodera\n\"\"\"\n\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat May 16 20:52:37 2020\n@author: kodiuser\n\"\"\"\n\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "\nn = int(input())\nif n % 2 == 0:\n    print(n//2-1)\nelse:\n    print(n//2)\n", "\n\ndef count_spaces(matrix):\n    spaces = [0, 0, 0, 0, 0]\n    for i in range(len(matrix) - 1):\n        for j in range(len(matrix[i]) - 1):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            spaces[4] += 1\n                        else:\n                            spaces[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            spaces[3] += 1\n                        else:\n                            spaces[2] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            spaces[3] += 1\n                        else:\n                            spaces[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            spaces[2] += 1\n                        else:\n                            spaces[1] += 1\n            else:\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            spaces[3] += 1\n                        else:\n                            spaces[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            spaces[2] += 1\n                        else:\n                            spaces[1] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            spaces[2] += 1\n                        else:\n                            spaces[1] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            spaces[1] += 1\n                        else:\n                            spaces[0] += 1\n\n    return spaces\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    spaces = count_spaces(matrix)\n    for i in range(len(spaces)):\n        print(spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r - 1):\n    for j in range(c - 1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i + 1][j] == \"X\" and parking[i][j + 1] == \"X\" and parking[i + 1][j + 1] == \"X\":\n                squash[4] += 1\n            elif parking[i + 1][j] == \"X\" and parking[i][j + 1] == \"X\":\n                squash[3] += 1\n            elif parking[i + 1][j] == \"X\" and parking[i + 1][j + 1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j + 1] == \"X\" and parking[i + 1][j + 1] == \"X\":\n                squash[3] += 1\n            elif parking[i + 1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j + 1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "\n\ndef main():\n    r,c = map(int,input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0:0,1:0,2:0,3:0,4:0}\n    for i in range(r-1):                               # 5\n        for j in range(c-1):                           # 5\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X': # 2\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\n\n# CODE:\n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "\n\ndef main():\n    r, c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n    for i in range(r - 1):\n        for j in range(c - 1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\n\ndef count_parking_spaces(matrix, rows, columns):\n    parking_spaces = [0, 0, 0, 0, 0]\n    for i in range(rows - 1):\n        for j in range(columns - 1):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[4] += 1\n                        else:\n                            parking_spaces[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[3] += 1\n                        else:\n                            parking_spaces[2] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[3] += 1\n                        else:\n                            parking_spaces[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[2] += 1\n                        else:\n                            parking_spaces[1] += 1\n            else:\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[3] += 1\n                        else:\n                            parking_spaces[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[2] += 1\n                        else:\n                            parking_spaces[1] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[2] += 1\n                        else:\n                            parking_spaces[1] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_spaces[1] += 1\n                        else:\n                            parking_spaces[0] += 1\n\n    return parking_spaces\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_spaces = count_parking_spaces(matrix, rows, columns)\n    for i in range(len(parking_spaces)):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n"]