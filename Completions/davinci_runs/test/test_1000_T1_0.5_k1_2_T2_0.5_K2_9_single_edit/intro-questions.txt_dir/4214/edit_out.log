2022-04-16 05:49:20.732835 num operations 1
2022-04-16 05:49:20.732853 size on input set 1
2022-04-16 05:50:04.216882 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(float,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/len(paths))\n"
    },
    {
      "index": 2,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\npaths = permutations(points)\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\nprint(total_dist/N)\n"
    },
    {
      "index": 3,
      "text": "\n\n# from math import sqrt\n# from itertools import permutations\n\n# def dist(p1,p2):\n#     return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\n# N = int(input())\n# points = []\n# for _ in range(N):\n#     points.append(tuple(map(int,input().split())))\n\n# paths = permutations(points)\n\n# total_dist = 0\n# for path in paths:\n#     dist_in_path = 0\n#     for i in range(N-1):\n#         dist_in_path += dist(path[i],path[i+1])\n#     total_dist += dist_in_path\n\n# print(total_dist/N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/len(paths))\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom math import sqrt\nfrom itertools import permutations, combinations\n\ndef dist(p1, p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i], path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N) \n"
    },
    {
      "index": 6,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\ndef dist(p1, p2):\n    return sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N - 1):\n        dist_in_path += dist(path[i], path[i + 1])\n    total_dist += dist_in_path\n\nprint(total_dist / N)\n"
    },
    {
      "index": 7,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\n\n\ndef dist(p1, p2):\n\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N - 1):\n        dist_in_path += dist(path[i], path[i + 1])\n    total_dist += dist_in_path\n\nprint(total_dist / N)\n"
    },
    {
      "index": 8,
      "text": "\n\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n \npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n"
    }
  ],
  "created": 1650088160,
  "object": "edit"
}
2022-04-16 05:50:04.217194 fix syntax errors 9 ['\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n', '\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(float,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/len(paths))\n', '\nfrom math import sqrt\nfrom itertools import permutations\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\npaths = permutations(points)\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\nprint(total_dist/N)\n', '\n\n# from math import sqrt\n# from itertools import permutations\n\n# def dist(p1,p2):\n#     return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\n# N = int(input())\n# points = []\n# for _ in range(N):\n#     points.append(tuple(map(int,input().split())))\n\n# paths = permutations(points)\n\n# total_dist = 0\n# for path in paths:\n#     dist_in_path = 0\n#     for i in range(N-1):\n#         dist_in_path += dist(path[i],path[i+1])\n#     total_dist += dist_in_path\n\n# print(total_dist/N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', '\n\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/len(paths))\n', '\n\nfrom math import sqrt\nfrom itertools import permutations, combinations\n\ndef dist(p1, p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i], path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N) \n', '\nfrom math import sqrt\nfrom itertools import permutations\ndef dist(p1, p2):\n    return sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N - 1):\n        dist_in_path += dist(path[i], path[i + 1])\n    total_dist += dist_in_path\n\nprint(total_dist / N)\n', '\nfrom math import sqrt\nfrom itertools import permutations\n\n\ndef dist(p1, p2):\n\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N - 1):\n        dist_in_path += dist(path[i], path[i + 1])\n    total_dist += dist_in_path\n\nprint(total_dist / N)\n', '\n\nfrom math import sqrt\nfrom itertools import permutations\n\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n \npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n']
2022-04-16 05:50:04.217331 size on output set 9
2022-04-16 05:50:04.217343 num operations 1
2022-04-16 05:50:04.217348 size on input set 1
2022-04-16 05:50:19.224242 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\npermutation = calc_permutation(list(range(1, N)))\n\ntotal_dist = 0\nfor p in permutation:\n    dist = 0\n    prev = 0\n    for i in p:\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 3,
      "text": "import math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 5,
      "text": "\n# coding: utf-8\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 6,
      "text": "\nimport itertools\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b(\u90fd\u5e020\u306f\u9664\u304f)\npermutation = list(itertools.permutations(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 7,
      "text": "\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 8,
      "text": "\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n"
    }
  ],
  "created": 1650088204,
  "object": "edit"
}
2022-04-16 05:50:19.224566 fix syntax errors 9 ['import math\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\nimport math\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\npermutation = calc_permutation(list(range(1, N)))\n\ntotal_dist = 0\nfor p in permutation:\n    dist = 0\n    prev = 0\n    for i in p:\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\nprint(total_dist / len(permutation))\n', '\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', 'import math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\n# coding: utf-8\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\nimport itertools\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める(都市0は除く)\npermutation = list(itertools.permutations(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n']
2022-04-16 05:50:19.224695 size on output set 8
