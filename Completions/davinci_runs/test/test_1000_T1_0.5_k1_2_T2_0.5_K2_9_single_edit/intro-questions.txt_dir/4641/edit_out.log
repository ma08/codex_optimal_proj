2022-04-16 08:49:43.383850 num operations 1
2022-04-16 08:49:43.383935 size on input set 1
2022-04-16 08:49:54.421634 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n"
    },
    {
      "index": 1,
      "text": "\"\"\"\n\"\"\"\n\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys \n\ndef solve(a, b):\n    return a + b\n\nif __name__ == '__main__':\n    a, b = map(int, sys.stdin.readline().split())\n    print(solve(a, b))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n"
    },
    {
      "index": 4,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef solve(queries, x):\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x)))) \n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([1, 2], 3)\n    [1, 2]\n    >>> solve([1, 1], 3)\n    [1, 1]\n    >>> solve([1, 1, 1], 3)\n    [1, 1, 1]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x)))) \n"
    }
  ],
  "created": 1650098983,
  "object": "edit"
}
2022-04-16 08:49:54.421942 fix syntax errors 9 ['\nimport sys\n\ndef solve(queries, x):\n    """\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    """\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == \'__main__\':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print(\'\\n\'.join(map(str, solve(queries, x))))\n', '"""\n"""\n\nimport sys\n\ndef solve(queries, x):\n    """\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    """\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == \'__main__\':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print(\'\\n\'.join(map(str, solve(queries, x))))\n', "\n\nimport sys \n\ndef solve(a, b):\n    return a + b\n\nif __name__ == '__main__':\n    a, b = map(int, sys.stdin.readline().split())\n    print(solve(a, b))\n", '\nimport sys\n\ndef solve(queries, x):\n    """\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    """\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == \'__main__\':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print(\'\\n\'.join(map(str, solve(queries, x))))\n', "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef solve(queries, x):\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x)))) \n", '\n\nimport sys\n\ndef solve(queries, x):\n    """\n    >>> solve([1, 2], 3)\n    [1, 2]\n    >>> solve([1, 1], 3)\n    [1, 1]\n    >>> solve([1, 1, 1], 3)\n    [1, 1, 1]\n    """\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == \'__main__\':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print(\'\\n\'.join(map(str, solve(queries, x))))\n', '\nimport sys\n\ndef solve(queries, x):\n    """\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    """\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == \'__main__\':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print(\'\\n\'.join(map(str, solve(queries, x))))\n', '\nimport sys\n\ndef solve(queries, x):\n    """\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    """\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\nif __name__ == \'__main__\':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print(\'\\n\'.join(map(str, solve(queries, x))))\n', '\n\nimport sys\n\ndef solve(queries, x):\n    """\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    """\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == \'__main__\':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print(\'\\n\'.join(map(str, solve(queries, x)))) \n']
2022-04-16 08:49:54.422075 size on output set 7
2022-04-16 08:49:54.422086 num operations 1
2022-04-16 08:49:54.422091 size on input set 1
2022-04-16 08:50:02.363335 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, input().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(input().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n\n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n\n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n\n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(\" \"))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n\n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n\n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n\n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX by adding x\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650098994,
  "object": "edit"
}
2022-04-16 08:50:02.363738 fix syntax errors 9 ["\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, input().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(input().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n\n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n\n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n\n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(" "))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == "__main__":\n    main()\n', "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n\n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n\n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n\n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX by adding x\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 08:50:02.363922 size on output set 5
