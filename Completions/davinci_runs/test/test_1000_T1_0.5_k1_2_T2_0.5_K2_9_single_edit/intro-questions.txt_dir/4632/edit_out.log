2022-04-16 08:45:26.563128 num operations 1
2022-04-16 08:45:26.563147 size on input set 1
2022-04-16 08:45:37.393709 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]        \n        print(\"YES\" if is_possible(packages) else \"NO\")        \n\ndef is_possible(packages):\n    packages.sort()        \n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:            \n            return False        \n    return True        \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for case_index in range(num_cases):\n        num_packages = int(lines[2 * case_index + 1])\n        packages = [tuple(map(int, lines[2 * case_index + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for package_index in range(len(packages)):\n        if packages[package_index][0] < package_index or packages[package_index][1] < package_index:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\ndef main():\n    num_cases = int(sys.stdin.readline())\n    for i in range(num_cases):\n        num_packages = int(sys.stdin.readline())\n        packages = [tuple(map(int, sys.stdin.readline().split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650098726,
  "object": "edit"
}
2022-04-16 08:45:37.394068 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]        \n        print("YES" if is_possible(packages) else "NO")        \n\ndef is_possible(packages):\n    packages.sort()        \n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:            \n            return False        \n    return True        \n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for case_index in range(num_cases):\n        num_packages = int(lines[2 * case_index + 1])\n        packages = [tuple(map(int, lines[2 * case_index + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for package_index in range(len(packages)):\n        if packages[package_index][0] < package_index or packages[package_index][1] < package_index:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    num_cases = int(sys.stdin.readline())\n    for i in range(num_cases):\n        num_packages = int(sys.stdin.readline())\n        packages = [tuple(map(int, sys.stdin.readline().split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 08:45:37.394206 size on output set 6
2022-04-16 08:45:37.394220 num operations 1
2022-04-16 08:45:37.394226 size on input set 1
2022-04-16 08:45:45.892144 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        print(\"YES\")\n        print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] < 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], -x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    num_tests = int(input())\n    for i in range(num_tests):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650098737,
  "object": "edit"
}
2022-04-16 08:45:45.892476 fix syntax errors 9 ['\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        print("YES")\n        print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] < 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], -x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_tests = int(input())\n    for i in range(num_tests):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 08:45:45.892556 size on output set 5
