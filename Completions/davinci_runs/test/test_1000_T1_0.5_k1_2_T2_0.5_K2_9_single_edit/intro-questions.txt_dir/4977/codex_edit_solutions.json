["\ndef main():\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    t = int(input())\n\n    if (a - c)**2 + (b - d)**2 == t**2:\n        print(\"Y\")\n\n    else:\n        print(\"N\")\n\nmain()\n", "\n\ndef main():\n    a, b = map(int, input().split())  # a, b = map(int, input().split())\n    c, d = map(int, input().split())  # c, d = map(int, input().split())\n    t = int(input())  # t = int(input())\n\n    if (a - c) ** 2 + (b - d) ** 2 == t ** 2:  # if (a - c) ** 2 + (b - d) ** 2 == t ** 2:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nmain()\n", "\n\ndef solve():\n    pass\n\nsolve()\n", "\n\nimport sys\n\ndef main():\n    start = list(map(int, sys.stdin.readline().split()))\n    end = list(map(int, sys.stdin.readline().split()))\n    charge = int(sys.stdin.readline())\n\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print \"Y\"\n    else:\n        print \"N\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Solve the problem!\n    \"\"\"\n    start = [int(i) for i in input().split()] # list comprehension, turns input into a list of ints\n    end = [int(i) for i in input().split()] # list comprehension, turns input into a list of ints\n    charge = int(input()) # turns input into an int\n\n    if abs(end[0] - start[0]) + abs(end[1] - start[1]) <= charge:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    start = [int(i) for i in sys.stdin.readline().split()]\n    end = [int(i) for i in sys.stdin.readline().split()]\n    charge = int(sys.stdin.readline())\n    print(\"Y\" if (charge - abs(end[0] - start[0]) - abs(end[1] - start[1])) % 2 == 0 else \"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Solve the problem!\n    \"\"\"\n    start = list(map(int, input().split()))\n    end = list(map(int, input().split()))\n    charge = int(input())\n\n    if abs(end[0] - start[0]) + abs(end[1] - start[1]) <= charge:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    t = int(input())\n\n    if (a - c) ** 2 + (b - d) ** 2 == t ** 2:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nmain()\n", "\n\ndef main():\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    t = int(input())\n\n    if t ** 2 == (a - c) ** 2 + (b - d) ** 2:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nmain()\n", "\n\ndef main():\n    start = [int(i) for i in input().split()]\n    end = [int(i) for i in input().split()]\n    charge = int(input())\n\n    if abs(end[0] - start[0]) + abs(end[1] - start[1]) <= charge:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\na, b = [int(x) for x in input().split()]\nc, d = [int(x) for x in input().split()]\nt = int(input())\n\n# If the start and end points are the same, then we can do a U-turn and get there.\nif a == c and b == d:\n    print(\"Y\")\n    exit()\n\n# If we are trying to travel more than t units, we can't get there.\nif abs(a-c) + abs(b-d) > t or abs(a-c) + abs(b-d) < t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel exactly t units, we can get there.\nif abs(a-c) + abs(b-d) == t:\n    print(\"Y\")\n    exit()\n", "\nimport sys\n\ndef main():\n    start = list(map(int, sys.stdin.readline().split()))\n    end = list(map(int, sys.stdin.readline().split()))\n    charge = int(sys.stdin.readline())\n\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    start = [int(i) for i in sys.stdin.readline().split()]\n    end = [int(i) for i in sys.stdin.readline().split()]\n    charge = int(sys.stdin.readline())\n    if (charge - abs(end[0] - start[0]) - abs(end[1] - start[1])) % 2 == 0:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    start = [int(x) for x in input().split()]\n    end = [int(x) for x in input().split()]\n    charge = int(input())\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print('Y')\n    else:\n        print('N')\n\nmain()\n", "\n\ndef solve():\n    sx, sy = [int(x) for x in input().split()]\n    dx, dy = [int(x) for x in input().split()]\n    t = int(input())\n    if (abs(dx - sx) + abs(dy - sy)) == t:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nsolve()\n", "\n\ndef main():\n    \"\"\"\n    Solve the problem!\n    \"\"\"\n    start = [int(i) for i in input().split()]\n    end = [int(i) for i in input().split()]\n    charge = int(input())\n\n    if abs(end[0] - start[0]) + abs(end[1] - start[1]) <= charge * 2:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\na, b = [int(x) for x in input().split()]\nc, d = [int(x) for x in input().split()]\nt = int(input())\n\n# If the start and end points are the same, then we can do a U-turn and get there.\nif a == c and b == d:\n    print(\"Y\")\n    exit()\n\n# If we are trying to travel more than t units, we can't get there.\nif abs(a-c) + abs(b-d) > t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel exactly t units, we can get there.\nif abs(a-c) + abs(b-d) == t:\n    print(\"Y\")\n    exit()\n", "#!/usr/bin/env python3\n\na, b = [int(x) for x in input().split()]\nc, d = [int(x) for x in input().split()]\nt = int(input())\n\n# If the start and end points are the same, then we can do a U-turn and get there.\nif a == c and b == d:\n    print(\"Y\")\n    exit()\n\n# If we are trying to travel more than t units, we can't get there.\nif abs(a-c) + abs(b-d) > t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel less than t units, we can't get there.\nif abs(a-c) + abs(b-d) < t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel exactly t units, we can get there.\nif abs(a-c) + abs(b-d) == t:\n    print(\"Y\")\n    exit()\n", "\n\ndef main():\n    a = int(input())\n    \n\nmain()\n", "#!/usr/bin/env python3\n\n\nstart = [int(x) for x in input().split()]\nend = [int(x) for x in input().split()]\ncharge = int(input())\nif abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n    print('Y')\nelse:\n    print('N')\n", "\n\n\ndef main():\n\tstart = [int(x) for x in input().split()]\n\tend = [int(x) for x in input().split()]\n\tcharge = int(input())\n\tif abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n\t\tprint('Y')\n\telse:\n\t\tprint('N')\n\n\nmain()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    start = map(int, sys.stdin.readline().split())\n    end = map(int, sys.stdin.readline().split())\n    charge = int(sys.stdin.readline())\n\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print \"Y\"\n    else:\n        print \"N\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    start = map(int, sys.stdin.readline().split())\n    end = map(int, sys.stdin.readline().split())\n    charge = int(sys.stdin.readline())\n\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve():\n    sx, sy = [int(x) for x in input().split()]\n    dx, dy = [int(x) for x in input().split()]\n    t = int(input())\n    if abs(dx - sx) + abs(dy - sy) <= t and (t - abs(dx - sx) - abs(dy - sy)) % 2 == 0:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nsolve()\n", "import sys\n\ndef main():\n    start = map(int, sys.stdin.readline().split())\n    end = map(int, sys.stdin.readline().split())\n    charge = int(sys.stdin.readline())\n\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print \"Y\"\n    else:\n        print \"N\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Solve the problem!\n    \"\"\"\n    start = [int(i) for i in input().split()]  # start is a list of integers\n    end = [int(i) for i in input().split()]  # end is a list of integers\n    charge = int(input())\n\n    if abs(end[0] - start[0]) + abs(end[1] - start[1]) <= charge:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve():\n    sx, sy = [int(x) for x in input().split(\" \")]\n    dx, dy = [int(x) for x in input().split(\" \")]\n    t = int(input())\n    if (dx - sx + dy - sy) == t:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nsolve()\n", "\n\ndef main():\n    \"\"\"\n    Solve the problem!\n    \"\"\"\n    start = [int(i) for i in input().split()]  # start point\n    end = [int(i) for i in input().split()]  # end point\n    charge = int(input())\n\n    if abs(end[0] - start[0]) + abs(end[1] - start[1]) <= charge:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    start = map(int, sys.stdin.readline().split())\n    end = map(int, sys.stdin.readline().split())\n    charge = int(sys.stdin.readline())\n\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print \"Y\"\n    else:\n        print \"N\"\n\nif __name__ == \"__main__\":\n    main()\n", "\na, b = [int(x) for x in input().split()]  # initial coordinates\nc, d = [int(x) for x in input().split()]  # final coordinates\nt = int(input())\n\n# If the start and end points are the same, then we can do a U-turn and get there.\nif a == c and b == d:\n    print(\"Y\")\n    exit()\n\n# If we are trying to travel more than t units, we can't get there.\nif abs(a-c) + abs(b-d) > t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel less than t units, we can't get there.\nif abs(a-c) + abs(b-d) < t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel exactly t units, we can get there.\nif abs(a-c) + abs(b-d) == t:\n    print(\"Y\")\n    exit()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    a, b = map(int, input().strip().split())\n    c, d = map(int, input().strip().split())\n    t = int(input().strip())\n\n    if abs(a - c) + abs(b - d) <= t and (abs(a - c) + abs(b - d)) % 2 == t % 2:\n        print('Y')\n    else:\n        print('N')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    t = int(input())\n\n    if (a - c)**2 + (b - d)**2 == t**2:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nmain()\n", "\n\n\nimport sys\n\ndef main():\n    start = map(int, sys.stdin.readline().split())\n    end = map(int, sys.stdin.readline().split())\n    charge = int(sys.stdin.readline())\n\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print \"Y\"\n    else:\n        print \"N\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve():\n    sx, sy = [int(x) for x in input().split()]\n    dx, dy = [int(x) for x in input().split()]\n    t = int(input())\n    if (abs(dx - sx) + abs(dy - sy)) <= t:\n        if ((abs(dx - sx) + abs(dy - sy)) % 2 == t % 2):\n            print(\"Y\")\n        else:\n            print(\"N\")\n    else:\n        print(\"Y\")\n\nsolve()\n", "import sys\n\ndef main():\n    a, b = map(int, sys.stdin.readline().strip().split())\n    c, d = map(int, sys.stdin.readline().strip().split())\n    t = int(sys.stdin.readline().strip())\n\n    if abs(a - c) + abs(b - d) <= t and (abs(a - c) + abs(b - d)) % 2 == t % 2:\n        print('Y')\n    else:\n        print('N')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python\n\na, b = [int(x) for x in input().split()]\nc, d = [int(x) for x in input().split()]\nt = int(input())\n\n# If the start and end points are the same, then we can do a U-turn and get there.\nif a == c and b == d:\n    print(\"Y\")\n    exit()\n\n# If we are trying to travel more than t units, we can't get there.\nif abs(a-c) + abs(b-d) > t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel less than t units, we can't get there.\nif abs(a-c) + abs(b-d) < t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel exactly t units, we can get there.\nif abs(a-c) + abs(b-d) == t:\n    print(\"Y\")\n    exit()\n", "\n\ndef main():\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    t = int(input())\n\n    if (a - c) ** 2 + (b - d) ** 2 == t ** 2:\n        print(\"Y\")\n\n\n    else:\n        print(\"N\")\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    a, b = map(int, sys.stdin.readline().strip().split())\n    c, d = map(int, sys.stdin.readline().strip().split())\n    t = int(sys.stdin.readline().strip())\n\n    if abs(a - c) + abs(b - d) <= t and (abs(a - c) + abs(b - d)) % 2 == t % 2:\n        print('Y')\n    else:\n        print('N')\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2018/9/16 10:11\n# @Author  : Fred Yang\n# @File    : __init__.py.py\n# @Role    : \u8bf4\u660e\u811a\u672c\u529f\u80fd\n", "\na, b = [int(x) for x in input().split()]\nc, d = [int(x) for x in input().split()]\nt = int(input())\n\n# If the start and end points are the same, then we can do a U-turn and get there.\nif a == c and b == d:\n    print(\"Y\")\n    exit()\n\n# If we are trying to travel more than t units, we can't get there.\nif abs(a-c) + abs(b-d) > t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel less than t units, we can't get there.\nif abs(a-c) + abs(b-d) < t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel exactly t units, we can get there.\nif abs(a-c) + abs(b-d) == t:\n    print(\"Y\")\n    exit()\n", "\n\na, b = [int(x) for x in input().split()]\nc, d = [int(x) for x in input().split()]\nt = int(input())\n\n# If the start and end points are the same, then we can do a U-turn and get there.\nif a == c and b == d:\n    print(\"Y\")\n    exit()\n\n# If we are trying to travel more than t units, we can't get there.\nif abs(a-c) + abs(b-d) > t:\n    print(\"N\")\n    exit()\n\n# If we are trying to travel exactly t units, we can get there.\nif abs(a-c) + abs(b-d) == t:\n    print(\"Y\")\n    exit()\n", "\n\n\ndef main():\n    start = [int(x) for x in input().split()]  # list comprehension\n    end = [int(x) for x in input().split()]  # list comprehension\n    charge = int(input())\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print('Y')\n    else:\n        print('N')\n\n\nmain()\n", "\nimport sys\n\ndef main():\n    a, b = map(int, sys.stdin.readline().strip().split()) # readline() reads a single line from the file; a newline character (\\n) is left at the end of the string, and is only omitted on the last line of the file if the file doesn't end in a newline. This makes the return value unambiguous; if f.readline() returns an empty string, the end of the file has been reached, while a blank line is represented by '\\n', a string containing only a single newline.\n    c, d = map(int, sys.stdin.readline().strip().split()) # strip() returns a copy of the string with both leading and trailing characters removed (based on the string argument passed).\n    t = int(sys.stdin.readline().strip())\n\n    if abs(a - c) + abs(b - d) <= t and (abs(a - c) + abs(b - d)) % 2 == t % 2: # abs() returns the absolute value of a number. The argument may be an integer or a floating point number. If the argument is a complex number, its magnitude is returned.\n        print('Y')\n    else:\n        print('N')\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    start = [int(x) for x in input().split()]\n    end = [int(x) for x in input().split()]\n    charge = int(input())\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print('Y')\n    else:\n        print('N')\n\n\nmain()\n", "\n\ndef main():\n    x, y = map(int, input().split())\n    a, b = map(int, input().split()) \n\n    print(\"{} {}\".format(x - b, y + a))\n    print(\"{} {}\".format(x - a, y - b))\n    print(\"{} {}\".format(x + b, y - a))\n    print(\"{} {}\".format(x + a, y + b))\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Solve the problem!\n    \"\"\"\n    start = [int(i) for i in input().split()] # [x, y]\n    end = [int(i) for i in input().split()] # [x, y]\n    charge = int(input()) # int\n\n    if abs(end[0] - start[0]) + abs(end[1] - start[1]) <= charge:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    c, d = map(int, sys.stdin.readline().split())\n    t = int(sys.stdin.readline().strip())\n\n    if abs(a - c) + abs(b - d) <= t and (abs(a - c) + abs(b - d)) % 2 == t % 2:\n        print('Y')\n    else:\n        print('N')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    start = [int(x) for x in input().split()]\n    end = [int(x) for x in input().split()]\n    charge = int(input())\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print('Y')\n    else:\n        print('N')\n\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    start = [int(i) for i in sys.stdin.readline().split()]\n    end = [int(i) for i in sys.stdin.readline().split()]\n    charge = int(sys.stdin.readline())\n    if (charge - abs(end[0] - start[0]) - abs(end[1] - start[1])) % 2 == 0\n        print(\"Y\")\n    else\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    t = int(input())\n\n    if ((a - c) ** 2 + (b - d) ** 2) ** (1/2) <= t:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nmain()\n", "\n\ndef main():\n    start = [int(x) for x in input().split()]\n    end = [int(x) for x in input().split()]\n    charge = int(input())\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print('Y')\n    else:\n        print('N')\n\n\nmain()\n", "\n\ndef main():\n    start = [int(x) for x in input().split()]\n    end = [int(x) for x in input().split()]\n    charge = int(input())\n    if abs(start[0] - end[0]) + abs(start[1] - end[1]) == charge:\n        print('Y')\n    else:\n        print('N')\n\nmain()\n", "\n\n#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    start = [int(i) for i in sys.stdin.readline().split()]\n    end = [int(i) for i in sys.stdin.readline().split()]\n    charge = int(sys.stdin.readline())\n    if (charge - abs(end[0] - start[0]) - abs(end[1] - start[1])) % 2 == 0:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Solve the problem!\n    \"\"\"\n    start = [int(i) for i in input().split()] # read in starting location\n    end = [int(i) for i in input().split()] # read in ending location\n    charge = int(input()) # read in charge\n\n    if abs(end[0] - start[0]) + abs(end[1] - start[1]) <= charge: # if distance is less than or equal to charge\n        print(\"Y\")\n    else: # otherwise\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    a, b = map(int, sys.stdin.readline().strip().split())\n    c, d = map(int, sys.stdin.readline().strip().split())\n    t = int(sys.stdin.readline().strip())\n\n    if abs(a - c) + abs(b - d) <= t and (abs(a - c) + abs(b - d)) % 2 == t % 2:\n        print('Y')\n    else:\n        print('N')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    a, b, c, d, t = map(int, sys.stdin.readline().strip().split())\n\n    if abs(a - c) + abs(b - d) <= t and (abs(a - c) + abs(b - d)) % 2 == t % 2:\n        print('Y')\n    else:\n        print('N')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Solve the problem!\n    # Get starting and ending coordinates\n    \"\"\"\n    start = [int(i) for i in input().split()]\n\n    # Get charge\n    end = [int(i) for i in input().split()]\n\n    # Check if can get there\n    charge = int(input())\n\n    if abs(end[0] - start[0]) + abs(end[1] - start[1]) <= charge:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve():\n    sx, sy = [int(x) for x in input().split()]\n    dx, dy = [int(x) for x in input().split()]\n    t = int(input())\n    if (dx - sx + dy - sy) <= t and (t - (dx - sx + dy - sy)) % 2 == 0:\n        print(\"Y\")\n    else:\n        print(\"N\")\n\nsolve()\n"]