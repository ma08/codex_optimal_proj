["\nprint(\"hello\")\n", "\ndef main():\n    print('Hello world')\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Find the first friend who has a gift\ni = 0\nwhile friends[i] != 0:\n    i += 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j <= n:\n    if friends[j - 1] == 0:\n        friends[j - 1] = i + 1\n        i += 1\n    j += 1\n\n# Print out the friends\n\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the code above\n# The code below is the same as the\nprint(*friends)\n", "\n#!/usr/bin/python\nimport sys\nimport os\nimport subprocess\nprint(subprocess.check_output([\"ls\", \"-l\"]))\n", "\n\nn = int(input())  # number of students\ng = [int(x) for x in input().split()]  # gifts\ns = [int(x) for x in input().split()]  # students\n\n# Find students who don't know who to give gifts to\n# and students who don't know who gives them gifts\nno_gift_to = []  # students who don't know who to give gifts to\nno_gift_from = []  # students who don't know who gives them gifts\nfor i in range(n):\n    if g[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if g[g[i] - 1] == 0:\n            no_gift_from.append(g[i] - 1)\n\n# Give gifts to students who don't know who gives them gifts\nfor i in range(len(no_gift_to)):\n    g[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to students who don't know who to give gifts to\nfor i in range(len(no_gift_to)):\n    g[no_gift_to[i]] = no_gift_from[i] + 1\n\n# Find students who don't know who to give gifts to\n# and students who don't know who gives them gifts\nno_student_to = []  # students who don't know who to give gifts to\nno_student_from = []  # students who don't know who gives them gifts\nfor i in range(n):\n    if s[i] == 0:\n        no_student_to.append(i)\n    else:\n        if s[s[i] - 1] == 0:\n            no_student_from.append(s[i] - 1)\n\n# Give gifts to students who don't know who gives them gifts\nfor i in range(len(no_student_to)):\n    s[no_student_from[i]] = no_student_to[i] + 1\n\n# Give gifts to students who don't know who to give gifts to\nfor i in range(len(no_student_to)):\n    s[no_student_to[i]] = no_student_from[i] + 1\n\nprint(\" \".join(str(x) for x in g))\nprint(\" \".join(str(x) for x in s))\n", "\nn = int(input())\nf = [int(x) for x in input().split()]  # list of friends\n\n# Find friends who don't know who to give gifts to and friends who don't know who gives them gifts\nno_gift_to = []\nno_gift_from = []\n\nfor i in range(n):  # for each friend\n    if f[i] == 0:  # if friend does not know who to give gift to\n        no_gift_to.append(i)  # add friend to list of friends who don't know who to give gifts to\n    else:\n        if f[f[i] - 1] == 0:  # if friend's friend does not know who gives them gift\n            no_gift_from.append(f[i] - 1)  # add friend's friend to list of friends who don't know who gives them gifts\n\n# Give gifts to friends who don't know who gives them gifts\nfor i in range(len(no_gift_to)):  # for each friend who doesn't know who to give gifts to\n    f[no_gift_from[i]] = no_gift_to[i] + 1  # give gift to friend's friend\n\n# Give gifts to friends who don't know who to give gifts to\nfor i in range(len(no_gift_to)):  # for each friend who doesn't know who to give gifts to\n    f[no_gift_to[i]] = no_gift_from[i] + 1  # give gift to friend\n\nprint(\" \".join(str(x) for x in f))  # print answer\n", "\n\nn = int(input())\nf = [int(x) for x in input().split()]\n\n# Find friends who don't know who to give gifts to and friends who don't know\n# who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don't know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don't know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(\" \".join(str(x) for x in f))\n", "\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Find the first friend who has a gift\ni = 0\nwhile friends[i] != 0:\n    i += 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j <= n:\n    if friends[j - 1] == 0:\n        friends[j - 1] = i + 1\n        i += 1\n    j += 1\n\n# Print out the friends\nprint(*friends)\n", "\n\nn = int(input())\nfriends = list(map(int, input().split()))\n", "'''\nThe file contains the adjacency list representation of a simple undirected graph. There are 200 vertices labeled 1 to 200. The first column in the file represents the vertex label, and the particular row (other entries except the first column) tells all the vertices that the vertex is adjacent to. So for example, the 6th row looks like : \"6\t155\t56\t52\t120\t......\". This just means that the vertex with label 6 is adjacent to (i.e., shares an edge with) the vertices with labels 155,56,52,120,......,etc\n'''\n\nn = int(input())\nf = [int(x) for x in input().split()[1:]]\n\n# Find friends who don't know who to give gifts to\n# and friends who don't know who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don't know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don't know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(\" \".join(str(x) for x in f))\n", "def read_file(file_name):\n    with open(file_name) as file:\n        return file.read()\n\n\nprint(read_file('file.py'))\n\n# Find friends who don't know who to give gifts to\n# and friends who don't know who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don't know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don't know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(\" \".join(str(x) for x in f))\n", "\n\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Assign gifts to friends who don't have one\ni = 1\nwhile i <= n:\n    if friends[i - 1] == 0:\n        j = i + 1\n        while friends[j - 1] != 0:\n            j += 1\n        friends[i - 1] = j\n        friends[j - 1] = i\n    i += 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j <= n:\n    if friends[j - 1] == 0:\n        friends[j - 1] = i + 1\n        i += 1\n    j += 1\n\n# Print out the friends\nprint(*friends)\n", "\nn = int(input())\nf = [int(x) for x in input().split()]\n\n# Find friends who don't know who to give gifts to\n# and friends who don't know who gives them gifts\nno_gift_to = []\nno_gift_from = []\nfor i in range(n):\n    if f[i] == 0:\n        no_gift_to.append(i)\n    else:\n        if f[f[i] - 1] == 0:\n            no_gift_from.append(f[i] - 1)\n\n# Give gifts to friends who don't know who gives them gifts\nfor i in range(len(no_gift_to)):\n    f[no_gift_from[i]] = no_gift_to[i] + 1\n\n# Give gifts to friends who don't know who to give gifts to\nfor i in range(len(no_gift_to)):\n    f[no_gift_to[i]] = no_gift_from[i] + 1\n\nprint(\" \".join(str(x) for x in f))\n", "#!/usr/bin/env python3\n\nn = int(input())\nfriends = list(map(int, input().split()))\n\n# Find the first friend who has a gift, starting from the end\ni = n\nwhile friends[i - 1] != 0:\n    i -= 1\n\n# Assign gifts to friends who don't have one\nj = 1\nwhile j < n:\n    if friends[j] == 0:\n        friends[j] = i\n        i += 1\n    j += 1    \n\n# Print out the friends\nprint(*friends)\n"]