["// \n// \n// \n\nvar fs = require('fs');\n\nvar file = new file();\n\nfile.readFile('./test.txt', function (err, data) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(data);\n    }\n});\n", "import os\n\ndef write_file(filename, data):\n\twith open(filename, \"w\") as f:\n\t\tf.write(data)\n\ndef read_file(filename):\n\twith open(filename, \"r\") as f:\n\t\treturn f.read()\n\ndef create_file(filename):\n\ttry:\n\t\twith open(filename, \"x\") as f:\n\t\t\tf.write(\"\")\n\t\t\tprint(\"File created successfully\")\n\texcept FileExistsError:\n\t\tprint(\"File already exists\")\n\ndef delete_file(filename):\n\tif os.path.exists(filename):\n\t\tos.remove(filename)\n\t\tprint(\"File deleted successfully\")\n\telse:\n\t\tprint(\"File not found\")\n\n\n\n\n\n\n\n\n\n", "m = []\nn = []\ndef read_data(filename):\n    with open(filename) as f:\n        for line in f:\n            line = line.strip()\n            if line:\n                line = line.split(',')\n                m.append(line[0])\n                n.append(line[1])\n    return m, n\n\ndef write_data(filename, m, n):\n    with open(filename, \"w\") as f:\n        for i in range(len(m)):\n            f.write(m[i] + \",\" + n[i] + \"\\n\")\n    return\n\ndef sort_data(m, n):\n    for i in range(len(m)):\n        for j in range(len(m) - i - 1):\n            if m[j] > m[j + 1]:\n                m[j], m[j + 1] = m[j + 1], m[j]\n                n[j], n[j + 1] = n[j + 1], n[j]\n    return m, n\n\ndef main():\n    m, n = read_data(\"data.txt\")\n    m, n = sort_data(m, n)\n    write_data(\"sorted_data.txt\", m, n)\n\nif __name__ == \"__main__\":\n    main()\n", "#include <iostream>\n#include <fstream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nint main(){\n\tstring str;\n\tifstream file1;\n\tofstream file2;\n\tfile1.open(\"input.txt\");\n\tfile2.open(\"output.txt\");\n\tif(file1.is_open()){\n\t\twhile(getline(file1,str)){\n\t\t\tfile2 << str << endl;\n\t\t}\n\t}\n\telse{\n\t\tcout << \"Unable to open file\";\n\t\texit(1);\n\t}\n\tfile1.close();\n\tfile2.close();\n\treturn 0;\n}\n", "import os\nimport sys\n\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: python file.py <filename>\")\n        sys.exit(1)\n\n    filename = sys.argv[1]\n\n    if not os.path.exists(filename):\n        print(\"Error: File '%s' not found\" % filename)\n        sys.exit(1)\n\n    infile = open(filename, 'r')\n    text = infile.read()\n    infile.close()\n\n    print(text)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python\n\nimport os\n\ndef main():\n    f = open(\"test.txt\", \"w\")\n    f.write(\"Hello World\\n\")\n    f.write(\"This is our new text file\\n\")\n    f.write(\"and this is another line.\\n\")\n    f.write(\"Why? Because we can.\\n\")\n    f.close()\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\nsales = {}\nfor _ in range(m):\n    d, t = map(int, input().split())\n    sales[d] = t\ndays = 0\nfor i in range(n):\n    if k[i] > 0:\n        on_sale = set()\n        for d, t in sales.items():\n            if t == i+1:\n                on_sale.add(d)\n        if len(on_sale) == 0:\n            days += 2 * k[i]\n        else:\n            days += 1\n            k[i] -= 1\n            for d in on_sale:\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n", "\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\nsales = {}\nfor _ in range(m):\n    d, t = map(int, input().split())\n    sales[d] = t\n\ndays = 0\nfor i in range(n):\n    if k[i] > 0:\n        on_sale = set()\n        for d, t in sales.items():\n            if t == i+1:\n                on_sale.add(d)\n        if len(on_sale) == 0:\n            days += 2 * k[i]\n        else:\n            days += 1\n            k[i] -= 1\n            for d in on_sale:\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n", "\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\nsales = {}\n\nfor _ in range(m):\n    d, t = map(int, input().split())\n    sales[d] = t\n\ndays = 0\nfor i in range(n):\n    if k[i] > 0:\n        on_sale = []\n        for d, t in sales.items():\n            if t == i+1:\n                on_sale.append(d)\n        if len(on_sale) == 0:\n            days += 2 * k[i]\n        else:\n            days += 1\n            k[i] -= 1\n            for j in sorted(on_sale):\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n", "\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\nsales = {}\n\nfor _ in range(m):\n    d, t = map(int, input().split())\n    sales[d] = t\n\ndays = 0\nfor i in range(n):\n    if k[i] > 0:\n        on_sale = set()\n        for d, t in sales.items():\n            if t == i + 1:\n                on_sale.add(d)\n        if len(on_sale) == 0:\n            days += 2 * k[i]\n        else:\n            days += 1\n            k[i] -= 1\n            for d in on_sale:\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n", "\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\nsales = {}\nfor _ in range(m):\n    d, t = map(int, input().split())\n    sales[d] = t\n\ndays = 0\nfor i in range(n):\n    if k[i] > 0:\n        on_sale = set()\n        for d, t in sales.items():\n            if t == i+1:\n                on_sale.add(d)\n        if len(on_sale) == 0:\n            days += 2 * k[i]\n        else:\n            days += 1\n            k[i] -= 1\n            for d in on_sale:\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n", "#!/usr/bin/python\n\nimport os\nimport sys\n\ndef main():\n\tif len(sys.argv) < 2:\n\t\tsys.exit(\"Usage: %s <file>\" % sys.argv[0])\n\t\n\tfile = sys.argv[1]\n\n\tif not os.path.exists(file):\n\t\tsys.exit(\"Error: File '%s' not found\" % file)\n\n\t# file exists\n\tprint \"File:\", file\n\tprint \"Size:\", os.path.getsize(file)\n\tprint \"Type:\", get_file_type(file)\n\ndef get_file_type(filename):\n\treturn os.popen(\"file -b \" + filename).read().strip()\n\nif __name__ == \"__main__\":\n\tmain()\n", "#!/bin/bash\n\n# Script error handling\nset -o errexit\nset -o pipefail\nset -o nounset\n\n# Script variables\nreadonly SCRIPT_NAME=$(basename $0)\nreadonly SCRIPT_DIR=$(cd $(dirname $0) && pwd)\nreadonly SCRIPT_ARGS=\"$@\"\n\n# Check if the script is running as root\nif [ $(id -u) -ne 0 ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run as root\"\n    exit 1\nfi\n\n# Check if the script is running in a TTY\nif [ ! -t 1 ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a TTY\"\n    exit 1\nfi\n\n# Check if the script is running in a valid terminal\nif [ \"$TERM\" != \"xterm\" ] && [ \"$TERM\" != \"xterm-256color\" ] && [ \"$TERM\" != \"screen\" ] && [ \"$TERM\" != \"screen-256color\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a valid terminal\"\n    exit 1\nfi\n\n# Check if the script is running in a valid shell\nif [ \"$SHELL\" != \"/bin/bash\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in bash\"\n    exit 1\nfi\n\n# Check if the script is running in a valid directory\nif [ \"$SCRIPT_DIR\" != \"/root\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in /root\"\n    exit 1\nfi\n\n# Check if the script is running in a valid directory\nif [ \"$(ls -A)\" != \"\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in an empty directory\"\n    exit 1\nfi\n\n# Check if the script is running with no arguments\nif [ \"$SCRIPT_ARGS\" != \"\" ]; then\n    echo \"ERROR: $SCRIPT_NAME does not accept arguments\"\n    exit 1\nfi\n\n# Check if the script is running as root\nif [ \"$(whoami)\" != \"root\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run as root\"\n    exit 1\nfi\n\n# Check if the script is running in a TTY\nif [ ! -t 0 ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a TTY\"\n    exit 1\nfi\n\n# Check if the script is running in a valid terminal\nif [ \"$TERM\" != \"xterm\" ] && [ \"$TERM\" != \"xterm-256color\" ] && [ \"$TERM\" != \"screen\" ] && [ \"$TERM\" != \"screen-256color\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a valid terminal\"\n    exit 1\nfi\n\n# Check if the script is running in a valid shell\nif [ \"$SHELL\" != \"/bin/bash\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in bash\"\n    exit 1\nfi\n\n# Check if the script is running in a valid directory\nif [ \"$SCRIPT_DIR\" != \"/root\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in /root\"\n    exit 1\nfi\n\n# Check if the script is running in a valid directory\nif [ \"$(ls -A)\" != \"\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in an empty directory\"\n    exit 1\nfi\n\n# Check if the script is running with no arguments\nif [ \"$SCRIPT_ARGS\" != \"\" ]; then\n    echo \"ERROR: $SCRIPT_NAME does not accept arguments\"\n    exit 1\nfi\n\n# Check if the script is running as root\nif [ \"$(whoami)\" != \"root\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run as root\"\n    exit 1\nfi\n\n# Check if the script is running in a TTY\nif [ ! -t 0 ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a TTY\"\n    exit 1\nfi\n\n# Check if the script is running in a valid terminal\nif [ \"$TERM\" != \"xterm\" ] && [ \"$TERM\" != \"xterm-256color\" ] && [ \"$TERM\" != \"screen\" ] && [ \"$TERM\" != \"screen-256color\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a valid terminal\"\n    exit 1\nfi\n\n# Check if the script is running in a valid shell\nif [ \"$SHELL\" != \"/bin/bash\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in bash\"\n    exit 1\nfi\n\n# Check if the script is running in a valid directory\nif [ \"$SCRIPT_DIR\" != \"/root\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in /root\"\n    exit 1\nfi\n\n# Check if the script is running in a valid directory\nif [ \"$(ls -A)\" != \"\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in an empty directory\"\n    exit 1\nfi\n\n# Check if the script is running with no arguments\nif [ \"$SCRIPT_ARGS\" != \"\" ]; then\n    echo \"ERROR: $SCRIPT_NAME does not accept arguments\"\n    exit 1\nfi\n\n# Check if the script is running as root\nif [ \"$(whoami)\" != \"root\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run as root\"\n    exit 1\nfi\n\n# Check if the script is running in a TTY\nif [ ! -t 0 ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a TTY\"\n    exit 1\nfi\n\n# Check if the script is running in a valid terminal\nif [ \"$TERM\" != \"xterm\" ] && [ \"$TERM\" != \"xterm-256color\" ] && [ \"$TERM\" != \"screen\" ] && [ \"$TERM\" != \"screen-256color\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a valid terminal\"\n    exit 1\nfi\n\n# Check if the script is running in a valid shell\nif [ \"$SHELL\" != \"/bin/bash\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in bash\"\n    exit 1\nfi\n\n# Check if the script is running in a valid directory\nif [ \"$SCRIPT_DIR\" != \"/root\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in /root\"\n    exit 1\nfi\n\n# Check if the script is running in a valid directory\nif [ \"$(ls -A)\" != \"\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in an empty directory\"\n    exit 1\nfi\n\n# Check if the script is running with no arguments\nif [ \"$SCRIPT_ARGS\" != \"\" ]; then\n    echo \"ERROR: $SCRIPT_NAME does not accept arguments\"\n    exit 1\nfi\n\n# Check if the script is running as root\nif [ \"$(whoami)\" != \"root\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run as root\"\n    exit 1\nfi\n\n# Check if the script is running in a TTY\nif [ ! -t 0 ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a TTY\"\n    exit 1\nfi\n\n# Check if the script is running in a valid terminal\nif [ \"$TERM\" != \"xterm\" ] && [ \"$TERM\" != \"xterm-256color\" ] && [ \"$TERM\" != \"screen\" ] && [ \"$TERM\" != \"screen-256color\" ]; then\n    echo \"ERROR: $SCRIPT_NAME needs to be run in a valid terminal\"\n", "\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\nsales = {}\n\nfor _ in range(m):\n    d, t = map(int, input().split())\n    sales[d] = t\n\n", "#!/usr/bin/python\n\nimport os\nimport sys\nimport time\nimport commands\n\ndef main():\n    # get the command line arguments\n    #\n    if len(sys.argv) != 3:\n        print \"Usage: %s <file> <size>\" % sys.argv[0]\n        sys.exit(1)\n    filename = sys.argv[1]\n    size = int(sys.argv[2])\n\n    # create the file\n    #\n    f = open(filename, 'w')\n    f.write('\\0' * size)\n    f.close()\n\n    # get the filesize\n    #\n    (status, output) = commands.getstatusoutput(\"ls -l %s\" % filename)\n    if status != 0:\n        print \"Error: ls failed\"\n        sys.exit(1)\n    fields = output.split()\n    filesize = int(fields[4])\n    if filesize != size:\n        print \"Error: file size is wrong\"\n        sys.exit(1)\n\n    # remove the file\n    #\n    os.unlink(filename)\n\n    # success\n    #\n    print \"Success!\"\n\nif __name__ == '__main__':\n    main()\n", "print('hi')\n", "\nprint(\"Hello World!\")\n"]